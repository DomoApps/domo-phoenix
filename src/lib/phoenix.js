define(function (require) {
  var $exports = {},$wnd, $doc, $moduleName, $moduleBase, softPermutationId = 0;
  if (typeof(window) != 'undefined') {
    $wnd = window;
    $doc = $wnd.document;
  }

  // figure out the user agent
  var userAgents = {
    gecko1_8: 0,
    ie10: 1,
    ie9: 2,
    safari: 3
  };
  var userAgent = userAgents[function () {
    var ua = navigator.userAgent.toLowerCase();
    var docMode = $doc.documentMode;
    if (ua.indexOf('webkit') != -1) {
      return 'safari';
    }
    if (ua.indexOf('msie') != -1 && (docMode >= 10 && docMode < 11)) {
      return 'ie10';
    }
    if (ua.indexOf('msie') != -1 && (docMode >= 8 && docMode < 11)) {
      return 'ie9';
    }
    if (ua.indexOf('msie') != -1 && (docMode >= 8 && docMode < 11)) {
      return 'ie8';
    }
    if (ua.indexOf('gecko') != -1 || docMode >= 11) {
      return 'gecko1_8';
    }
    return '';
  }()];
  if (userAgent) {
    softPermutationId = userAgent;
  }

  var $gwt_version = 'Google Web Toolkit 2.8.0';
  var $intern_0 = 2147483647, $intern_1 = 3.141592653589793, $intern_2 = 6.283185307179586, $intern_3 = 32000, $intern_4 = {211:1}, $intern_5 = 131072, $intern_6 = 0.017453292519943295, $intern_7 = 7.5625, $intern_8 = 0.75, $intern_9 = {8:1, 9:1, 13:1}, $intern_10 = 1000, $intern_11 = 5000, $intern_12 = 10000, $intern_13 = {23:1, 63:1}, $intern_14 = 1900, $intern_15 = 0.7853981633974483, $intern_16 = 0.25, $intern_17 = {8:1, 45:1, 9:1, 13:1}, $intern_18 = {8:1, 45:1, 77:1, 9:1, 59:1, 13:1, 74:1}, $intern_19 = 1.7976931348623157E308, $intern_20 = -1.7976931348623157E308, $intern_21 = 25000, $intern_22 = {8:1, 57:1}, $intern_23 = {8:1, 38:1, 57:1}, $intern_24 = {8:1, 9:1}, $intern_25 = 65536, $intern_26 = 65535, $intern_27 = 0.6599999999999999, $intern_28 = 0.0174533333333, $intern_29 = {83:1, 8:1, 9:1, 13:1}, $intern_30 = {l:0, m:0, h:524288}, $intern_31 = {l:4194303, m:4194303, h:524287}, $intern_32 = 524288, $intern_33 = {88:1, 8:1, 9:1}, $intern_34 = 86400000, $intern_35 = {23:1, 63:1, 43:1}, $intern_36 = 2000, $intern_37 = {60:1, 64:1}, $intern_38 = 0.001, $intern_39 = 4.9E-324, $intern_40 = 86399999, $intern_41 = {8:1, 45:1, 9:1, 59:1, 13:1}, $intern_42 = {110:1, 64:1}, $intern_43 = {23:1, 63:1, 66:1, 104:1}, $intern_44 = {25:1, 18:1}, $intern_45 = 57.29577951308232, $intern_46 = {36:1, 53:1}, $intern_47 = 0.4999, $intern_48 = {139:1}, $intern_49 = 4194303, $intern_50 = 1048575, $intern_51 = 4194304, $intern_52 = 17592186044416, $intern_53 = -17592186044416, $intern_54 = 16777216, $intern_55 = 33554432, $intern_56 = 67108864, $intern_57 = {138:1}, $intern_58 = {136:1, 172:1}, $intern_59 = {184:1}, $intern_60 = {96:1, 109:1, 102:1}, $intern_61 = {68:1}, $intern_62 = {96:1, 109:1, 102:1, 126:1}, $intern_63 = {96:1, 109:1, 189:1, 102:1, 42:1}, $intern_64 = {96:1, 102:1, 126:1}, $intern_65 = {8:1}, $intern_66 = {8:1, 9:1, 24:1, 68:1}, $intern_67 = {8:1, 108:1, 117:1, 130:1}, $intern_68 = {8:1, 9:1, 13:1, 244:1};
var _, prototypesByTypeId_0, initFnList_0, permutationId = -1;
function create_com_google_gwt_useragent_client_UserAgent(){
  switch (permutationId) {
    case 1:
      return new UserAgentImplIe10;
    case 3:
      return new UserAgentImplSafari;
    case 0:
      return new UserAgentImplGecko1_8;
  }
  return new UserAgentImplIe9;
}

function create_com_google_gwt_user_client_ui_impl_FocusImpl(){
  switch (permutationId) {
    case 0:
      return new FocusImplStandard;
    case 1:
      return new FocusImpl;
    case 3:
      return new FocusImplSafari;
  }
  return new FocusImplIE6;
}

function create_com_google_gwt_user_client_impl_DOMImpl(){
  switch (permutationId) {
    case 0:
      return new DOMImplMozilla_0;
    case 3:
      return new DOMImplWebkit_0;
  }
  return new DOMImplIE9_0;
}

function create_com_google_gwt_dom_client_DOMImpl(){
  switch (permutationId) {
    case 3:
      return new DOMImplWebkit;
    case 0:
      return new DOMImplMozilla;
  }
  return new DOMImplIE9;
}

function setGwtProperty(propertyName, propertyValue){
  typeof window === 'object' && typeof window['$gwt'] === 'object' && (window['$gwt'][propertyName] = propertyValue);
}

function gwtOnLoad_0(errFn, modName, modBase, softPermutationId){
  ensureModuleInit();
  var initFnList = initFnList_0;
  $moduleName = modName;
  $moduleBase = modBase;
  permutationId = softPermutationId;
  function initializeModules(){
    for (var i = 0; i < initFnList.length; i++) {
      initFnList[i]();
    }
  }

  if (errFn) {
    try {
      $entry(initializeModules)();
    }
     catch (e) {
      errFn(modName, e);
    }
  }
   else {
    $entry(initializeModules)();
  }
}

function ensureModuleInit(){
  initFnList_0 == null && (initFnList_0 = []);
}

function addInitFunctions(){
  ensureModuleInit();
  var initFnList = initFnList_0;
  for (var i = 0; i < arguments.length; i++) {
    initFnList.push(arguments[i]);
  }
}

function typeMarkerFn(){
}

function toString_24(object){
  if (Array.isArray(object) && object.typeMarker === typeMarkerFn) {
    return $getName_1(getClass__Ljava_lang_Class___devirtual$(object)) + '@' + (hashCode__I__devirtual$(object) >>> 0).toString(16);
  }
  return object.toString();
}

function portableObjCreate(obj){
  function F(){
  }

  ;
  F.prototype = obj || {};
  return new F;
}

function emptyMethod(){
}

function defineClass(typeId, superTypeIdOrPrototype, castableTypeMap){
  var prototypesByTypeId = prototypesByTypeId_0, superPrototype;
  var prototype_0 = prototypesByTypeId[typeId];
  var clazz = prototype_0 instanceof Array?prototype_0[0]:null;
  if (prototype_0 && !clazz) {
    _ = prototype_0;
  }
   else {
    _ = (superPrototype = superTypeIdOrPrototype && superTypeIdOrPrototype.prototype , !superPrototype && (superPrototype = prototypesByTypeId_0[superTypeIdOrPrototype]) , portableObjCreate(superPrototype));
    _.castableTypeMap = castableTypeMap;
    _.constructor = _;
    !superTypeIdOrPrototype && (_.typeMarker = typeMarkerFn);
    prototypesByTypeId[typeId] = _;
  }
  for (var i = 3; i < arguments.length; ++i) {
    arguments[i].prototype = _;
  }
  clazz && (_.___clazz = clazz);
}

function bootstrap(){
  prototypesByTypeId_0 = {};
  !Array.isArray && (Array.isArray = function(vArg){
    return Object.prototype.toString.call(vArg) === '[object Array]';
  }
  );
}

bootstrap();
function Object_0(){
}

function equals_Ljava_lang_Object__Z__devirtual$(this$static, other){
  return instanceOfString(this$static)?$equals_2(this$static, other):instanceOfDouble(this$static)?(checkCriticalNotNull(this$static) , this$static === other):instanceOfBoolean(this$static)?(checkCriticalNotNull(this$static) , this$static === other):hasJavaObjectVirtualDispatch(this$static)?this$static.equals_0(other):isJavaArray(this$static)?this$static === other:!!this$static && !!this$static.equals?this$static.equals(other):maskUndefined(this$static) === maskUndefined(other);
}

function getClass__Ljava_lang_Class___devirtual$(this$static){
  return instanceOfString(this$static)?Ljava_lang_String_2_classLit:instanceOfDouble(this$static)?Ljava_lang_Double_2_classLit:instanceOfBoolean(this$static)?Ljava_lang_Boolean_2_classLit:hasJavaObjectVirtualDispatch(this$static)?this$static.___clazz:isJavaArray(this$static)?this$static.___clazz:this$static.___clazz || Array.isArray(this$static) && getClassLiteralForArray(Lcom_google_gwt_core_client_JavaScriptObject_2_classLit, 1) || Lcom_google_gwt_core_client_JavaScriptObject_2_classLit;
}

function hashCode__I__devirtual$(this$static){
  return instanceOfString(this$static)?getHashCode_1(this$static):instanceOfDouble(this$static)?round_int((checkCriticalNotNull(this$static) , this$static)):instanceOfBoolean(this$static)?(checkCriticalNotNull(this$static) , this$static)?1231:1237:hasJavaObjectVirtualDispatch(this$static)?this$static.hashCode_0():isJavaArray(this$static)?getHashCode_0(this$static):!!this$static && !!this$static.hashCode?this$static.hashCode():getHashCode_0(this$static);
}

defineClass(1, null, {}, Object_0);
_.equals_0 = function equals_0(other){
  return this === other;
}
;
_.getClass_0 = function getClass_0(){
  return this.___clazz;
}
;
_.hashCode_0 = function hashCode_0(){
  return getHashCode_0(this);
}
;
_.toString_0 = function toString_0(){
  return $getName_1(getClass__Ljava_lang_Class___devirtual$(this)) + '@' + (hashCode__I__devirtual$(this) >>> 0).toString(16);
}
;
_.equals = function(other){
  return this.equals_0(other);
}
;
_.hashCode = function(){
  return this.hashCode_0();
}
;
_.toString = function(){
  return this.toString_0();
}
;
function canCast(src_0, dstId){
  if (instanceOfString(src_0)) {
    return !!stringCastMap[dstId];
  }
   else if (src_0.castableTypeMap) {
    return !!src_0.castableTypeMap[dstId];
  }
   else if (instanceOfDouble(src_0)) {
    return !!doubleCastMap[dstId];
  }
   else if (instanceOfBoolean(src_0)) {
    return !!booleanCastMap[dstId];
  }
  return false;
}

function castTo(src_0, dstId){
  checkCriticalType(src_0 == null || canCast(src_0, dstId));
  return src_0;
}

function castToBoolean(src_0){
  checkCriticalType(src_0 == null || instanceOfBoolean(src_0));
  return src_0;
}

function castToDouble(src_0){
  checkCriticalType(src_0 == null || instanceOfDouble(src_0));
  return src_0;
}

function castToJso(src_0){
  checkCriticalType(src_0 == null || isJsObjectOrFunction(src_0) && !(src_0.typeMarker === typeMarkerFn));
  return src_0;
}

function castToString(src_0){
  checkCriticalType(src_0 == null || instanceOfString(src_0));
  return src_0;
}

function charToString(x_0){
  return String.fromCharCode(x_0);
}

function hasJavaObjectVirtualDispatch(src_0){
  return !Array.isArray(src_0) && src_0.typeMarker === typeMarkerFn;
}

function instanceOf(src_0, dstId){
  return src_0 != null && canCast(src_0, dstId);
}

function instanceOfBoolean(src_0){
  return typeof src_0 === 'boolean';
}

function instanceOfDouble(src_0){
  return typeof src_0 === 'number';
}

function instanceOfJso(src_0){
  return src_0 != null && isJsObjectOrFunction(src_0) && !(src_0.typeMarker === typeMarkerFn);
}

function instanceOfString(src_0){
  return typeof src_0 === 'string';
}

function isJsObjectOrFunction(src_0){
  return typeof src_0 === 'object' || typeof src_0 === 'function';
}

function maskUndefined(src_0){
  return src_0 == null?null:src_0;
}

function round_int(x_0){
  return Math.max(Math.min(x_0, $intern_0), -2147483648) | 0;
}

var booleanCastMap, doubleCastMap, stringCastMap;
function $ensureNamesAreInitialized(this$static){
  if (this$static.typeName != null) {
    return;
  }
  initializeNames(this$static);
}

function $getName_1(this$static){
  $ensureNamesAreInitialized(this$static);
  return this$static.typeName;
}

function Class(){
  ++nextSequentialId;
  this.typeName = null;
  this.simpleName = null;
  this.packageName = null;
  this.compoundName = null;
  this.canonicalName = null;
  this.typeId = null;
  this.arrayLiterals = null;
}

function createClassObject(packageName, compoundClassName){
  var clazz;
  clazz = new Class;
  clazz.packageName = packageName;
  clazz.compoundName = compoundClassName;
  return clazz;
}

function createForClass(packageName, compoundClassName, typeId){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  return clazz;
}

function createForEnum(packageName, compoundClassName, typeId, enumConstantsFunc){
  var clazz;
  clazz = createClassObject(packageName, compoundClassName);
  maybeSetClassLiteral(typeId, clazz);
  clazz.modifiers = enumConstantsFunc?8:0;
  return clazz;
}

function createForPrimitive(className, primitiveTypeId){
  var clazz;
  clazz = createClassObject('', className);
  clazz.typeId = primitiveTypeId;
  clazz.modifiers = 1;
  return clazz;
}

function getClassLiteralForArray_0(leafClass, dimensions){
  var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];
  return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));
}

function getPrototypeForClass(clazz){
  if (clazz.isPrimitive()) {
    return null;
  }
  var typeId = clazz.typeId;
  var prototype_0 = prototypesByTypeId_0[typeId];
  return prototype_0;
}

function initializeNames(clazz){
  if (clazz.isArray_0()) {
    var componentType = clazz.componentType;
    componentType.isPrimitive()?(clazz.typeName = '[' + componentType.typeId):!componentType.isArray_0()?(clazz.typeName = '[L' + componentType.getName() + ';'):(clazz.typeName = '[' + componentType.getName());
    clazz.canonicalName = componentType.getCanonicalName() + '[]';
    clazz.simpleName = componentType.getSimpleName() + '[]';
    return;
  }
  var packageName = clazz.packageName;
  var compoundName = clazz.compoundName;
  compoundName = compoundName.split('/');
  clazz.typeName = join_1('.', [packageName, join_1('$', compoundName)]);
  clazz.canonicalName = join_1('.', [packageName, join_1('.', compoundName)]);
  clazz.simpleName = compoundName[compoundName.length - 1];
}

function join_1(separator, strings){
  var i = 0;
  while (!strings[i] || strings[i] == '') {
    i++;
  }
  var result = strings[i++];
  for (; i < strings.length; i++) {
    if (!strings[i] || strings[i] == '') {
      continue;
    }
    result += separator + strings[i];
  }
  return result;
}

function maybeSetClassLiteral(typeId, clazz){
  var proto;
  if (!typeId) {
    return;
  }
  clazz.typeId = typeId;
  var prototype_0 = getPrototypeForClass(clazz);
  if (!prototype_0) {
    prototypesByTypeId_0[typeId] = [clazz];
    return;
  }
  prototype_0.___clazz = clazz;
}

defineClass(216, 1, {}, Class);
_.createClassLiteralForArray = function createClassLiteralForArray(dimensions){
  var clazz;
  clazz = new Class;
  clazz.modifiers = 4;
  dimensions > 1?(clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1)):(clazz.componentType = this);
  return clazz;
}
;
_.getCanonicalName = function getCanonicalName(){
  $ensureNamesAreInitialized(this);
  return this.canonicalName;
}
;
_.getName = function getName(){
  return $getName_1(this);
}
;
_.getSimpleName = function getSimpleName(){
  $ensureNamesAreInitialized(this);
  return this.simpleName;
}
;
_.isArray_0 = function isArray(){
  return (this.modifiers & 4) != 0;
}
;
_.isPrimitive = function isPrimitive(){
  return (this.modifiers & 1) != 0;
}
;
_.toString_0 = function toString_26(){
  return ((this.modifiers & 2) != 0?'interface ':(this.modifiers & 1) != 0?'':'class ') + ($ensureNamesAreInitialized(this) , this.typeName);
}
;
_.modifiers = 0;
var nextSequentialId = 1;
var Ljava_lang_Object_2_classLit = createForClass('java.lang', 'Object', 1);
var Ljava_lang_Class_2_classLit = createForClass('java.lang', 'Class', 216);
function $cancel(this$static){
  if (!this$static.isRunning) {
    return;
  }
  this$static.wasStarted = this$static.isStarted;
  this$static.element = null;
  this$static.isRunning = false;
  this$static.isStarted = false;
  if (this$static.requestHandle) {
    this$static.requestHandle.cancel();
    this$static.requestHandle = null;
  }
  this$static.wasStarted && $onComplete(this$static);
}

function $run(this$static, duration, startTime){
  $cancel(this$static);
  this$static.isRunning = true;
  this$static.isStarted = false;
  this$static.duration = duration;
  this$static.startTime_0 = startTime;
  this$static.element = null;
  ++this$static.runId;
  $execute(this$static.callback_0, now_1());
}

function $update(this$static, curTime){
  var curRunId, finished, progress;
  curRunId = this$static.runId;
  finished = curTime >= this$static.startTime_0 + this$static.duration;
  if (this$static.isStarted && !finished) {
    progress = (curTime - this$static.startTime_0) / this$static.duration;
    $onUpdate(((1 + $wnd.Math.cos($intern_1 + progress * $intern_1)) / 2 , this$static));
    return this$static.isRunning && this$static.runId == curRunId;
  }
  if (!this$static.isStarted && curTime >= this$static.startTime_0) {
    this$static.isStarted = true;
    this$static.startTime = ($clinit_System() , fromDouble_0(now_2()));
    $drawAnimated(this$static.chart, this$static.startTime);
    if (!(this$static.isRunning && this$static.runId == curRunId)) {
      return false;
    }
  }
  if (finished) {
    this$static.isRunning = false;
    this$static.isStarted = false;
    $onComplete(this$static);
    return false;
  }
  return true;
}

function Animation(scheduler){
  this.callback_0 = new Animation$1(this);
  this.scheduler = scheduler;
}

defineClass(229, 1, {});
_.duration = -1;
_.isRunning = false;
_.isStarted = false;
_.runId = -1;
_.startTime_0 = -1;
_.wasStarted = false;
var Lcom_google_gwt_animation_client_Animation_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation', 229);
function $onComplete(this$static){
  $onUpdate(((1 + $wnd.Math.cos($intern_2)) / 2 , this$static));
  $clearCanvas(this$static.rnd);
  $clearAnimation(this$static.chart);
  $draw_0(this$static.chart);
  !!this$static.callback && (this$static.callback() , undefined);
}

function $onUpdate(this$static){
  $isAnimateDrawNeeded(this$static.chart) || $cancel(this$static);
  this$static.startTime = ($clinit_System() , fromDouble_0(now_2()));
  $clearCanvas(this$static.rnd);
  $drawAnimated(this$static.chart, this$static.startTime);
}

function ChartAnimation(theChart, theRenderer, callback){
  Animation.call(this, (!instance && (instance = !!$wnd.requestAnimationFrame && !!$wnd.cancelAnimationFrame?new AnimationSchedulerImplStandard:new AnimationSchedulerImplTimer) , instance));
  this.chart = theChart;
  this.rnd = theRenderer;
  this.callback = callback;
}

defineClass(313, 229, {}, ChartAnimation);
_.startTime = 0;
var Lcom_domo_charting_ChartAnimation_2_classLit = createForClass('com.domo.charting', 'ChartAnimation', 313);
function $addMouseAndTouchHandlers(this$static){
  var element;
  if (!this$static.canvas)
    return;
  element = $getCanvasElement(this$static.canvas);
  if (!element)
    return;
  $nativeAddMouseHandler(this$static, element, this$static.pixelRatio);
}

function $addMouseHandlers(this$static){
  var element;
  if (!this$static.canvas)
    return;
  element = $getCanvasElement(this$static.canvas);
  if (!element)
    return;
  $clinit_DOM();
  impl_2.sinkEvents(element, 131197);
  setEventListener(element, new Container$1(this$static, element));
}

function $calculateAndSetCanvasDimensions(this$static){
  var newHeight, newWidth;
  newWidth = round_int($wnd.Math.round(this$static.unscaledWidth * this$static.scaleFactor));
  newHeight = round_int($wnd.Math.round(this$static.unscaledHeight * this$static.scaleFactor));
  if (newHeight > $intern_3 / this$static.pixelRatio) {
    this$static.scaleFactor = $intern_3 / this$static.pixelRatio / this$static.height_0;
    newWidth = round_int($wnd.Math.round(this$static.width_0 * this$static.scaleFactor));
    newHeight = round_int($wnd.Math.round(this$static.height_0 * this$static.scaleFactor));
  }
  $setNewCanvasDimensions(this$static, newWidth, newHeight, false, true);
}

function $draw(this$static, callback, noAnimation, logMetrics){
  var animated, animation, animationDuration, endTicks, formatTicks, startTicks;
  if (!this$static.chart || !this$static.rnd)
    return;
  startTicks = ($clinit_System() , fromDouble_0(now_2()));
  $formatAllComponents(this$static.chart);
  endTicks = fromDouble_0(now_2());
  formatTicks = sub_1(endTicks, startTicks);
  startTicks = endTicks;
  animated = false;
  if ($isAnimateDrawNeeded(this$static.chart) && !noAnimation) {
    animated = true;
    animation = new ChartAnimation(this$static.chart, this$static.rnd, callback);
    animationDuration = $getAnimationDuration(this$static.chart);
    $run(animation, toInt_0(animationDuration), now_1());
  }
   else {
    $draw_0(this$static.chart);
    !!callback && (console.log('callback') , callback() , undefined);
  }
  endTicks = fromDouble_0(now_2());
  logMetrics && $logFormatAndDrawTimes(this$static, formatTicks, sub_1(endTicks, startTicks), animated);
}

function $exportNativeFunctions(this$static){
  var that_0 = this$static;
  that_0.updateChartJson = $entry(function(chartJson, noAnimation){
    that_0.updateChartJson_0(chartJson, null);
    that_0.draw_0(null, noAnimation, true);
  }
  );
  that_0.updateChartJsonWithChartState = $entry(function(chartJson, currentState, noAnimation){
    that_0.updateChartJson_0(chartJson, currentState);
    that_0.draw_0(null, noAnimation, true);
  }
  );
  that_0.resize = $entry(function(width_0, height, callback){
    if (width_0 && height) {
      that_0.setSize(width_0, height);
      that_0.draw_0(callback, false, false);
    }
  }
  );
  that_0.scaleCanvas = $entry(function(width_0, height, callback){
    if (width_0 && height) {
      that_0.scaleCanvas_0(width_0, height);
      that_0.draw_0(callback, false, false);
    }
  }
  );
  that_0.addEventListener = $entry(function(type_0, theFunction){
    that_0.addEventListener_0(type_0, theFunction);
  }
  );
  that_0.destroy = $entry(function(){
    that_0.destroy_0();
  }
  );
  that_0.getCanvas = $entry(function(){
    var theCanvas = that_0.getCanvas_0();
    return theCanvas;
  }
  );
  that_0.draw = $entry(function(callback, noAnimation){
    that_0.draw_0(callback, noAnimation, false);
  }
  );
  that_0.getSeriesCount = $entry(function(componentName){
    var seriesCount = that_0.getSeriesCount_0(componentName);
    return seriesCount;
  }
  );
  that_0.getCurrentChartState = $entry(function(){
    var chartState = that_0.getCurrentChartState_0();
    return JSON.parse(chartState || '{}');
  }
  );
  that_0.getCurrentFilterState = $entry(function(){
    var chartState = that_0.getCurrentFilterState_0();
    return JSON.parse(chartState || '{}');
  }
  );
  that_0.getSeriesNames = $entry(function(){
    var seriesNames = that_0.getSeriesNames_0();
    return JSON.parse(seriesNames || '{}');
  }
  );
  that_0.showChartPicker = $entry(function(){
    that_0.showChartPicker_0();
  }
  );
  that_0.hideChartPicker = $entry(function(){
    that_0.hideChartPicker_0();
  }
  );
  that_0.isChartPickerOpen = $entry(function(){
    return that_0.isChartPickerOpen_0();
  }
  );
  that_0.isChartPickerAvailable = $entry(function(){
    return that_0.isChartPickerAvailable_0();
  }
  );
  that_0.supportsAnnotations = $entry(function(){
    return that_0.supportsAnnotations_0();
  }
  );
  that_0.setEditAnnotationMode = $entry(function(inAddState){
    that_0.setEditAnnotationMode_0(inAddState);
  }
  );
  that_0.setAnnotationsVisible = $entry(function(visible){
    that_0.setAnnotationsVisible_0(visible);
  }
  );
  that_0.highlight = $entry(function(filter){
    return that_0.highlight_0(filter);
  }
  );
  that_0.removeFilter = $entry(function(filter){
    return that_0.removeFilter_0(filter);
  }
  );
  that_0.setTransparentBackground = $entry(function(transparentFlag){
    return that_0.setBackgroundTransparentFlag(transparentFlag);
  }
  );
  that_0.setUsePhoenixHover = $entry(function(hoverFlag){
    return that_0.setRenderToUsePhoenixHover(hoverFlag);
  }
  );
}

function $handleClickButNotInDrag(this$static, mouseX, mouseY){
  var needsRepaint, shapeClicked;
  if (this$static.chart) {
    shapeClicked = $getShapeUnderPoint(this$static.chart, mouseX, mouseY);
    if (shapeClicked) {
      needsRepaint = $handleClick(this$static.chart, shapeClicked);
      if (needsRepaint) {
        $draw(this$static, null, false, false);
        return true;
      }
    }
  }
  return false;
}

function $initCanvas(this$static, w, h, scale){
  this$static.canvas = createIfSupported();
  if (!this$static.canvas)
    return false;
  this$static.pixelRatio = window.devicePixelRatio !== undefined?window.devicePixelRatio:1;
  this$static.unscaledWidth = this$static.width_0 = w;
  this$static.unscaledHeight = this$static.height_0 = h;
  this$static.scaleFactor = 1;
  if (scale > 0) {
    this$static.unscaledWidth = round_int($wnd.Math.round(w / scale));
    this$static.unscaledHeight = round_int($wnd.Math.round(h / scale));
    this$static.scaleFactor = scale;
  }
  this$static.pixelRatio < 1 && (this$static.pixelRatio = 1);
  this$static.originalHeight = this$static.unscaledHeight;
  $calculateAndSetCanvasDimensions(this$static);
  return true;
}

function $initChartAndRendererImpl(this$static, supportsResize){
  !this$static.chart && (this$static.chart = new Chart(this$static.width_0 * this$static.pixelRatio, this$static.height_0 * this$static.pixelRatio, this$static.scaleFactor * this$static.pixelRatio));
  if (!this$static.rnd) {
    this$static.rnd = new IRendererImplCanvas(this$static, this$static.canvas, supportsResize);
    $setDimensions(this$static.rnd, this$static.pixelRatio);
    $setNativeRenderer(this$static.chart, this$static.rnd);
  }
}

function $initChartFromChartJSON(this$static, chartJson, chartState, supportsResize){
  if (chartJson != null && chartJson.length > 0) {
    $initChartAndRendererImpl(this$static, supportsResize);
    $updateChartJson(this$static, chartJson, chartState);
    !!this$static.chart && $formatAllComponents(this$static.chart);
  }
}

function $logFormatAndDrawTimes(this$static, formatTicks, drawTicks, animatedDraw){
  var list;
  list = new ArrayList;
  $add_1(list, getJsonNameValuePair('formatTicks', toInt_0(formatTicks)));
  animatedDraw?$add_1(list, getJsonNameValuePair('firstFrameTicks', toInt_0(drawTicks))):$add_1(list, getJsonNameValuePair('drawTicks', toInt_0(drawTicks)));
  $addCardURNToMetrics(this$static.chart, list);
  $logMetric(this$static.rnd, 'chart_rendering', getJsonNameValuePairs(list));
}

function $mainMouseButtonStillDown(event_0){
  var localEvent = event_0 || window.event;
  if ('buttons' in localEvent)
    return localEvent.buttons == 1;
  var button = localEvent.which || localEvent.button;
  return button == 1;
}

function $nativeAddMouseHandler(this$static, theCanvas, thePixelRatio){
  var that_0 = this$static;
  that_0.dragStartX = -1;
  that_0.dragStartY = -1;
  that_0.mousePressed = false;
  that_0.inDrag = false;
  that_0.wasInDrag = false;
  that_0.mouseX = 0;
  that_0.mouseY = 0;
  that_0.inTouch = false;
  that_0.wasInTouch = false;
  that_0.inLongPress = false;
  that_0.longPressTested = false;
  that_0.longPressStartTime = 0;
  that_0.isMainMouseButtonStillDown = function(e){
    var localEvent = e || window.event;
    if ('buttons' in localEvent)
      return localEvent.buttons == 1;
    var button = localEvent.which || localEvent.button;
    return button == 1;
  }
  ;
  that_0.doDrag = $entry(function(buttonDown){
    if (that_0.inDrag) {
      if (buttonDown)
        that_0.handleDrag(that_0.dragStartX, that_0.dragStartY, that_0.mouseX, that_0.mouseY);
      else {
        that_0.inDrag = false;
        that_0.mousePressed = false;
      }
    }
     else {
      that_0.selectComponentUnderPoint(that_0.mouseX, that_0.mouseY);
    }
  }
  );
  that_0.mouseDown = $entry(function(e){
    if (that_0.inTouch || that_0.wasInTouch)
      return;
    if (!e)
      var e = event;
    var mousePoint = that_0.getXY(e.clientX, e.clientY);
    that_0.dragStartX = that_0.mouseX;
    that_0.dragStartY = that_0.mouseY;
    that_0.mousePressed = true;
    that_0.inDrag = true;
    that_0.wasInDrag = false;
    that_0.doDrag(that_0.isMainMouseButtonStillDown(e));
  }
  );
  that_0.mouseUp = $entry(function(e){
    if (that_0.inTouch || that_0.wasInTouch)
      return;
    if (!e)
      var e = event;
    var mousePoint = that_0.getXY(e.clientX, e.clientY);
    if (that_0.inDrag && (that_0.mouseX - that_0.dragStartX > 5 || that_0.mouseY - that_0.dragStartY > 5)) {
      that_0.handleDragEnd(that_0.dragStartX, that_0.dragStartY, that_0.mouseX, that_0.mouseY);
      that_0.wasInDrag = false;
    }
    that_0.dragStartX = -1;
    that_0.dragStartY = -1;
    that_0.mousePressed = false;
    that_0.inDrag = false;
  }
  );
  that_0.mouseMove = $entry(function(e){
    if (that_0.inTouch || that_0.wasInTouch)
      return;
    if (!e)
      var e = event;
    var mousePoint = that_0.getXY(e.clientX, e.clientY);
    that_0.doDrag(that_0.isMainMouseButtonStillDown(e));
  }
  );
  that_0.mouseOut = $entry(function(e){
    if (!e)
      var e = event;
    var mousePoint = that_0.getXY(e.clientX, e.clientY);
  }
  );
  that_0.mouseClick = $entry(function(e){
    if (that_0.inTouch || that_0.wasInTouch) {
      that_0.inTouch = that_0.wasInTouch = false;
      return;
    }
    if (!e)
      var e = event;
    var mousePoint = that_0.getXY(e.clientX, e.clientY);
    if (that_0.handleClickButNotInDrag(that_0.mouseX, that_0.mouseY)) {
      that_0.inDrag = false;
      that_0.mousePressed = false;
    }
  }
  );
  that_0.getXY = function(x_0, y_0){
    var rectObject = theCanvas.getBoundingClientRect();
    var mousex = x_0 - rectObject.left;
    var mousey = y_0 - rectObject.top;
    that_0.mouseX = thePixelRatio * mousex;
    that_0.mouseY = thePixelRatio * mousey;
    return {'x':that_0.mouseX, 'y':that_0.mouseY};
  }
  ;
  that_0.touchStart = $entry(function(e){
    if (!e)
      var e = event;
    e.preventDefault();
    var touch = e.touches[0];
    var mousePoint = that_0.getXY(touch.clientX, touch.clientY);
    that_0.wasInTouch = false;
    that_0.inTouch = true;
    that_0.inLongPress = false;
    that_0.longPressTested = false;
    that_0.longPressStartTime = Date.now();
    that_0.dragStartX = that_0.mouseX;
    that_0.dragStartY = that_0.mouseY;
    that_0.handleTapHover(that_0.mouseX, that_0.mouseY);
  }
  );
  that_0.touchEnd = $entry(function(e){
    if (!e)
      var e = event;
    e.preventDefault();
    that_0.inTouch = false;
    that_0.wasInTouch = true;
    if (that_0.inLongPress) {
      that_0.handleDragEnd(that_0.dragStartX, that_0.dragStartY, that_0.mouseX, that_0.mouseY);
      that_0.wasInDrag = false;
      that_0.inLongPress = false;
    }
    that_0.dragStartX = -1;
    that_0.dragStartY = -1;
    that_0.mousePressed = false;
    that_0.inDrag = false;
  }
  );
  that_0.touchMove = $entry(function(e){
    if (!e)
      var e = event;
    e.preventDefault();
    var touch = e.touches[0];
    var mousePoint = that_0.getXY(touch.clientX, touch.clientY);
    if (!that_0.inLongPress && !that_0.longPressTested) {
      var currentTicks = Date.now();
      if (currentTicks > that_0.longPressStartTime + 300) {
        if (Math.abs(that_0.dragStartX - that_0.mouseX) < 20 && Math.abs(that_0.dragStartY - that_0.mouseY) < 20) {
          that_0.inLongPress = true;
          that_0.inDrag = true;
        }
      }
      that_0.longPressTested = true;
    }
    that_0.inLongPress?that_0.handleDrag(that_0.dragStartX, that_0.dragStartY, that_0.mouseX, that_0.mouseY):that_0.doDrag(true);
  }
  );
  theCanvas.addEventListener('touchstart', that_0.touchStart, false);
  theCanvas.addEventListener('touchend', that_0.touchEnd, false);
  theCanvas.addEventListener('touchmove', that_0.touchMove, false);
  theCanvas.addEventListener('mousedown', that_0.mouseDown, false);
  theCanvas.addEventListener('mouseup', that_0.mouseUp, false);
  theCanvas.addEventListener('mousemove', that_0.mouseMove, false);
  theCanvas.addEventListener('mouseout', that_0.mouseOut, false);
  theCanvas.addEventListener('click', that_0.mouseClick, false);
}

function $setNewCanvasDimensions(this$static, newWidth, newHeight, useNewHeight, useCurrentDimensions){
  $setWidth_1(this$static.canvas, newWidth + 'px');
  $setHeight_0(this$static.canvas, newHeight + 'px');
  $setCoordinateSpaceWidth(this$static.canvas, round_int($wnd.Math.round(newWidth * this$static.pixelRatio)));
  $setCoordinateSpaceHeight(this$static.canvas, round_int($wnd.Math.round(newHeight * this$static.pixelRatio)));
  !!this$static.rnd && (useNewHeight?$setDimensions(this$static.rnd, (round_int(newWidth) , round_int(newHeight) , this$static.pixelRatio)):$setDimensions(this$static.rnd, this$static.pixelRatio));
  !!this$static.chart && (useCurrentDimensions?$setScaleFactor(this$static.chart, this$static.scaleFactor * this$static.pixelRatio):$resetSize(this$static.chart, newWidth / this$static.scaleFactor, newHeight / this$static.scaleFactor));
}

function $setSizeVertical(this$static, width_0, height){
  var newHeight, newWidth;
  newWidth = round_int($wnd.Math.round(width_0 * this$static.scaleFactor));
  newHeight = round_int($wnd.Math.round(height * this$static.scaleFactor));
  this$static.unscaledHeight = height;
  if (newHeight > $intern_3 / this$static.pixelRatio) {
    this$static.scaleFactor = $intern_3 / this$static.pixelRatio / this$static.unscaledHeight;
    newWidth = round_int($wnd.Math.round(this$static.unscaledWidth * this$static.scaleFactor));
    newHeight = round_int($wnd.Math.round(this$static.unscaledHeight * this$static.scaleFactor));
  }
  $setNewCanvasDimensions(this$static, newWidth, newHeight, this$static.hasBeenSizedVertically, true);
  this$static.width_0 = width_0;
  this$static.height_0 = height;
  this$static.height_0 == this$static.originalHeight?(this$static.hasBeenSizedVertically = false):(this$static.hasBeenSizedVertically = true);
}

function $updateChartJson(this$static, chartJson, chartState){
  var e;
  try {
    !!this$static.chart && !!this$static.rnd && $createFromJSONWithChartState(this$static.chart, chartJson, chartState);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 171)) {
      e = $e0;
      $printStackTraceImpl(e, ($clinit_System() , err), '', '');
    }
     else 
      throw toJs($e0);
  }
}

function Container(w, h, supportsResize, scaleFactor, addTouchHandler){
  $initCanvas(this, w, h, scaleFactor);
  $initChartAndRendererImpl(this, supportsResize);
  addTouchHandler?$addMouseAndTouchHandlers(this):$addMouseHandlers(this);
  $exportNativeFunctions(this);
}

function Container_0(chartJSON, w, h, supportsResize){
  if (!$initCanvas(this, w, h, 0))
    return;
  $initChartFromChartJSON(this, chartJSON, null, supportsResize);
  $addMouseHandlers(this);
  $exportNativeFunctions(this);
}

function Container_1(chartJSON, chartState, w, h, supportsResize, scaleFactor, addTouchHandler){
  if (!$initCanvas(this, w, h, scaleFactor))
    return;
  $initChartFromChartJSON(this, chartJSON, chartState, supportsResize);
  addTouchHandler?$addMouseAndTouchHandlers(this):$addMouseHandlers(this);
  $exportNativeFunctions(this);
}

function exportAddCSRContainer(){
  $exports.phoenix = {createPhoenix:function(chartJSON, width_0, height, supportsResize){
    return new Container_0(chartJSON, width_0, height, supportsResize);
  }
  , createPhoenixWithChartState:function(chartJSON, chartState, width_0, height, supportsResize, scaleFactor, addTouchHandler){
    return new Container_1(chartJSON, chartState, width_0, height, supportsResize, scaleFactor, addTouchHandler === true);
  }
  , createPhoenixContainer:function(width_0, height, supportsResize, scaleFactor, addTouchHandler){
    return new Container(width_0, height, supportsResize, scaleFactor, addTouchHandler === true);
  }
  , setChartJSON:function(chartJSON, chartState){
    return that.createChartFromJSONWithCurrentState(chartJSON, chartState);
  }
  , version:'1.55.9'};
}

defineClass(377, 1, {}, Container, Container_0, Container_1);
_.addEventListener_0 = function addEventListener_0(type_0, theFunction){
  $addEventListener(this.rnd, type_0, theFunction);
}
;
_.cancelDrag = function cancelDrag(){
  var needsRepaint;
  if (this.chart) {
    needsRepaint = $cancelDrag(this.chart);
    needsRepaint && $draw(this, null, false, false);
  }
}
;
_.clearHoverState = function clearHoverState(){
  if (this.chart) {
    $clearHoverState(this.chart);
    this.chart.redrawNeeded && $draw(this, null, false, false);
  }
}
;
_.createChartFromJSONWithCurrentState = function createChartFromJSONWithCurrentState(chartJson, chartState){
  if (chartJson != null && chartJson.length > 0) {
    $updateChartJson(this, chartJson, chartState);
    !!this.chart && $formatAllComponents(this.chart);
  }
}
;
_.destroy_0 = function destroy(){
  $destroy(this.rnd);
  this.rnd = null;
  this.canvas = null;
  !!this.chart && $freeResources(this.chart);
  this.chart = null;
}
;
_.draw_0 = function draw(callback, noAnimation, logMetrics){
  $draw(this, callback, noAnimation, logMetrics);
}
;
_.getCanvas_0 = function getCanvas(){
  var theCanvas;
  theCanvas = null;
  !!this.canvas && (theCanvas = $getCanvasElement(this.canvas));
  return theCanvas;
}
;
_.getCurrentChartState_0 = function getCurrentChartState(){
  if (this.chart)
    return $getCurrentChartState(this.chart);
  return null;
}
;
_.getCurrentFilterState_0 = function getCurrentFilterState(){
  if (this.chart)
    return $getCurrentFilterState(this.chart);
  return null;
}
;
_.getSeriesCount_0 = function getSeriesCount(componentName){
  if (this.chart)
    return $getSeriesCount(this.chart, componentName);
  return 0;
}
;
_.getSeriesNames_0 = function getSeriesNames(){
  if (this.chart)
    return $getSeriesNames(this.chart);
  return null;
}
;
_.handleClickButNotInDrag = function handleClickButNotInDrag(mouseX, mouseY){
  return $handleClickButNotInDrag(this, mouseX, mouseY);
}
;
_.handleDrag = function handleDrag(dragStartX, dragStartY, mouseX, mouseY){
  var dragStart, mousePoint, needsRepaint;
  if (this.chart) {
    dragStart = new CFPoint(dragStartX, dragStartY);
    mousePoint = new CFPoint(mouseX, mouseY);
    needsRepaint = $handleDrag(this.chart, dragStart, mousePoint);
    needsRepaint && $draw(this, null, false, false);
  }
}
;
_.handleDragEnd = function handleDragEnd(dragStartX, dragStartY, mouseX, mouseY){
  var dragStart, mousePoint, needsRepaint;
  if (this.chart) {
    dragStart = new CFPoint(dragStartX, dragStartY);
    mousePoint = new CFPoint(mouseX, mouseY);
    needsRepaint = $handleDragEnd(this.chart, dragStart, mousePoint);
    needsRepaint && $draw(this, null, false, false);
  }
}
;
_.handleTapHover = function handleTapHover(mouseX, mouseY){
  var shapeTouched;
  if (this.chart) {
    shapeTouched = $getShapeUnderPoint(this.chart, mouseX, mouseY);
    if (!!shapeTouched && shapeTouched == this.lastShapeTouched)
      $handleClickButNotInDrag(this, mouseX, mouseY);
    else if (!!shapeTouched && shapeTouched.drillFilter != null && shapeTouched.drillFilter.indexOf('internal') != -1 && shapeTouched.drillFilter.indexOf('legend item') == -1)
      $handleClickButNotInDrag(this, mouseX, mouseY);
    else {
      $selectItemUnderPointAndGetComponent(this.chart, mouseX, mouseY);
      shapeTouched = $getShapeUnderPoint(this.chart, mouseX, mouseY);
      this.chart.redrawNeeded && $draw(this, null, false, false);
    }
    this.lastShapeTouched = shapeTouched;
  }
}
;
_.hideChartPicker_0 = function hideChartPicker(){
  $hideChartPicker(this.chart);
  $draw(this, null, false, false);
}
;
_.highlight_0 = function highlight(filter){
  return filter != null?$highlightUsingFilters(this.chart, filter):$cancelHighlighting(this.chart);
}
;
_.isChartPickerAvailable_0 = function isChartPickerAvailable(){
  return $isChartPickerAvailable(this.chart);
}
;
_.isChartPickerOpen_0 = function isChartPickerOpen(){
  return this.chart.graphPickerPanelOpen;
}
;
_.removeFilter_0 = function removeFilter(filter){
  return $removeFilter(this.chart, filter);
}
;
_.scaleCanvas_0 = function scaleCanvas(width_0, height){
  this.scaleFactor = width_0 / this.unscaledWidth;
  !this.hasBeenSizedVertically && height / this.unscaledHeight < this.scaleFactor && (this.scaleFactor = height / this.unscaledHeight);
  $calculateAndSetCanvasDimensions(this);
}
;
_.selectComponentUnderPoint = function selectComponentUnderPoint(mouseX, mouseY){
  if (this.chart) {
    $selectItemUnderPointAndGetComponent(this.chart, mouseX, mouseY);
    this.chart.redrawNeeded && $draw(this, null, false, false);
  }
}
;
_.setAnnotationsVisible_0 = function setAnnotationsVisible(value_0){
  $setAnnotationsVisible(this.chart, value_0);
  $draw(this, null, false, false);
}
;
_.setBackgroundTransparentFlag = function setBackgroundTransparentFlag(transparentFlag){
  !!this.rnd && !!this.rnd && $setTransparentBackgroundFlag(this.rnd, transparentFlag);
}
;
_.setEditAnnotationMode_0 = function setEditAnnotationMode(inAddState){
  this.inDrag_0 = false;
  this.wasInDrag_0 = false;
  $setEditAnnotationMode(this.chart, inAddState) && $draw(this, null, false, false);
}
;
_.setRenderToUsePhoenixHover = function setRenderToUsePhoenixHover(hoverFlag){
  !!this.rnd && !!this.rnd && $setSupportsNativeHoverEvents(this.rnd, !hoverFlag);
}
;
_.setSize = function setSize(w, h){
  var newHeight, newWidth;
  newWidth = w;
  newHeight = h;
  this.hasBeenSizedVertically && (newHeight = this.originalHeight * this.scaleFactor);
  if (newHeight > $intern_3 / this.pixelRatio) {
    this.scaleFactor = $intern_3 / this.pixelRatio / this.unscaledHeight;
    newHeight = $intern_3;
  }
  $setNewCanvasDimensions(this, newWidth, newHeight, true, false);
}
;
_.showChartPicker_0 = function showChartPicker(){
  $showChartPicker(this.chart);
  $draw(this, null, false, false);
}
;
_.supportsAnnotations_0 = function supportsAnnotations(){
  return $supportsAnnotations(this.chart);
}
;
_.updateChartJson_0 = function updateChartJson(chartJson, chartState){
  $updateChartJson(this, chartJson, chartState);
}
;
_.dragStartX_0 = -1;
_.dragStartY_0 = -1;
_.hasBeenSizedVertically = false;
_.height_0 = 0;
_.inDrag_0 = false;
_.originalHeight = 0;
_.pixelRatio = 1;
_.scaleFactor = 1;
_.unscaledHeight = 0;
_.unscaledWidth = 0;
_.wasInDrag_0 = false;
_.width_0 = 0;
var Lcom_domo_charting_Container_2_classLit = createForClass('com.domo.charting', 'Container', 377);
function Container$1(this$0, val$element){
  this.this$01 = this$0;
  this.val$element2 = val$element;
}

defineClass(262, 1, $intern_4, Container$1);
_.onBrowserEvent = function onBrowserEvent(event_0){
  var dragStart, eventType, left, mousePoint, mousex, mousey, needsRepaint, notches, shapeClicked, top_0, x_0, y_0, rectObject, top_1, rectObject_0;
  eventType = ($clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , event_0).type));
  x_0 = toInt32(event_0.clientX || 0);
  y_0 = toInt32(event_0.clientY || 0);
  top_0 = round_int((rectObject = this.val$element2.getBoundingClientRect() , rectObject.top));
  left = round_int((rectObject_0 = this.val$element2.getBoundingClientRect() , rectObject_0.left));
  mousex = x_0 - left;
  mousey = y_0 - top_0;
  mousex = round_int(this.this$01.pixelRatio * mousex);
  mousey = round_int(this.this$01.pixelRatio * mousey);
  if (0 != (eventType & 93)) {
    if (this.this$01.chart) {
      if (0 != (eventType & 68)) {
        if (0 != (eventType & 4)) {
          this.this$01.inDrag_0 = true;
          this.this$01.dragStartX_0 = mousex;
          this.this$01.dragStartY_0 = mousey;
          this.this$01.wasInDrag_0 = false;
        }
        if (!!this.this$01.chart && !!this.this$01.rnd) {
          if (this.this$01.inDrag_0) {
            if ($mainMouseButtonStillDown(event_0)) {
              dragStart = new CFPoint(this.this$01.dragStartX_0, this.this$01.dragStartY_0);
              mousePoint = new CFPoint(mousex, mousey);
              needsRepaint = $handleDrag(this.this$01.chart, dragStart, mousePoint);
            }
             else {
              this.this$01.inDrag_0 = false;
              needsRepaint = $cancelDrag(this.this$01.chart);
            }
            needsRepaint && $draw(this.this$01, null, false, false);
          }
           else {
            $selectItemUnderPointAndGetComponent(this.this$01.chart, mousex, mousey);
            this.this$01.chart.redrawNeeded && $draw(this.this$01, null, false, false);
          }
        }
      }
       else if ((eventType & 8) != 0) {
        if (this.this$01.inDrag_0 && !!this.this$01.chart && !!this.this$01.rnd && (abs_0(mousex - this.this$01.dragStartX_0) > 5 || abs_0(mousey - this.this$01.dragStartY_0) > 5)) {
          dragStart = new CFPoint(this.this$01.dragStartX_0, this.this$01.dragStartY_0);
          mousePoint = new CFPoint(mousex, mousey);
          needsRepaint = $handleDragEnd(this.this$01.chart, dragStart, mousePoint);
          needsRepaint && $draw(this.this$01, null, false, false);
          this.this$01.wasInDrag_0 = true;
        }
        this.this$01.inDrag_0 = false;
        this.this$01.dragStartX_0 = -1;
        this.this$01.dragStartY_0 = -1;
      }
       else if ((eventType & 1) != 0 && !this.this$01.wasInDrag_0) {
        shapeClicked = $getShapeUnderPoint(this.this$01.chart, mousex, mousey);
        if (shapeClicked) {
          needsRepaint = $handleClick(this.this$01.chart, shapeClicked);
          if (needsRepaint) {
            $draw(this.this$01, null, false, false);
            this.this$01.inDrag_0 = false;
          }
        }
      }
    }
  }
   else if (eventType == 32) {
    if (this.this$01.chart) {
      if (this.this$01.inDrag_0) {
        needsRepaint = false;
        if (!!this.this$01.rnd && (abs_0(mousex - this.this$01.dragStartX_0) > 5 || abs_0(mousey - this.this$01.dragStartY_0) > 5)) {
          dragStart = new CFPoint(this.this$01.dragStartX_0, this.this$01.dragStartY_0);
          mousePoint = new CFPoint(mousex, mousey);
          needsRepaint = $handleDragEnd(this.this$01.chart, dragStart, mousePoint);
          this.this$01.wasInDrag_0 = false;
        }
        this.this$01.inDrag_0 = false;
        this.this$01.dragStartX_0 = -1;
        this.this$01.dragStartY_0 = -1;
        needsRepaint && $draw(this.this$01, null, false, false);
      }
       else {
        $clearHoverState(this.this$01.chart);
        $sendCardBusHighlightMessage(this.this$01.chart, null);
        this.this$01.chart.redrawNeeded && $draw(this.this$01, null, false, false);
      }
    }
  }
   else if (eventType == $intern_5) {
    if (this.this$01.chart) {
      notches = event_0.deltaY;
      mousePoint = new CFPoint(mousex, mousey);
      if ($handleMouseWheelMoved(this.this$01.chart, mousePoint, notches)) {
        event_0.stopPropagation();
        impl_0.eventPreventDefault(event_0);
        $draw(this.this$01, null, false, false);
      }
    }
  }
}
;
var Lcom_domo_charting_Container$1_2_classLit = createForClass('com.domo.charting', 'Container/1', 262);
function $clinit_IRendererImplCanvas(){
  $clinit_IRendererImplCanvas = emptyMethod;
  $ensureLogger(getLogManager(), '');
}

function $addEventListener(this$static, type_0, theFunction){
  $equals_2('drill', type_0)?(this$static.drill = theFunction):$equals_2('hover', type_0)?(this$static.hover = theFunction):$equals_2('chartPickerClosed', type_0)?(this$static.chartPickerClosed = theFunction):$equals_2('displayAnnotation', type_0)?(this$static.displayAnnotation = theFunction):$equals_2('metricLogger', type_0)?(this$static.metricLogger = theFunction):$equals_2('chartStateChanged', type_0)?(this$static.chartStateChanged = theFunction):$equals_2('createNewAnnotation', type_0)?(this$static.createNewAnnotation = theFunction):$equals_2('deleteAnnotation', type_0)?(this$static.deleteAnnotation = theFunction):$equals_2('cardbus', type_0) && (this$static.cardbus = theFunction);
}

function $cardBusEvent(this$static, message){
  !!this$static.cardbus && $nativeCardBus(this$static.cardbus, message);
}

function $chartPickerClosed(this$static){
  !!this$static.chartPickerClosed && (this$static.chartPickerClosed() , undefined);
}

function $chartStateChanged(this$static, chartState){
  !!this$static.chartStateChanged && $nativeChartStateChanged(this$static.chartStateChanged, chartState);
}

function $clearCanvas(this$static){
  var h1, w1;
  if (this$static.canvas) {
    w1 = $getCanvasElement(this$static.canvas).width;
    h1 = $getCanvasElement(this$static.canvas).height;
    !!this$static.context && $clearRect(this$static.context, 0, 0, w1, h1);
  }
  if (this$static.transparentBackground)
    return true;
  return false;
}

function $createNewAnnotation(this$static, category){
  !!this$static.createNewAnnotation && (this$static.createNewAnnotation(0, category) , undefined);
}

function $deleteAnnotation(this$static, id_0){
  !!this$static.deleteAnnotation && (this$static.deleteAnnotation(toDouble_0(id_0)) , undefined);
}

function $destroy(this$static){
  this$static.drill = null;
  this$static.hover = null;
  this$static.context = null;
  this$static.cardbus = null;
}

function $displayAnnotations(this$static, hintRect, annotationJSON){
  !!this$static.displayAnnotation && (this$static.displayAnnotation(annotationJSON, hintRect) , undefined);
}

function $drawCanvasPath(this$static, path){
  var arcEl, circleEl, curveEl, pathAry, pe, pe$iterator, quadEl, rectEl;
  this$static.context.beginPath();
  pathAry = path.pathAry;
  for (pe$iterator = pathAry.iterator(); pe$iterator.hasNext_0();) {
    pe = castTo(pe$iterator.next_1(), 11);
    if (pe.type_0 == 5) {
      rectEl = castTo(pe, 80);
      $moveTo(this$static.context, pe.x_0, pe.y_0);
      $lineTo(this$static.context, pe.x_0 + rectEl.width_0, pe.y_0);
      $lineTo(this$static.context, pe.x_0 + rectEl.width_0, pe.y_0 + rectEl.height_0);
      $lineTo(this$static.context, pe.x_0, pe.y_0 + rectEl.height_0);
      this$static.context.closePath();
    }
     else if (pe.type_0 == 0) {
      $moveTo(this$static.context, pe.x_0, pe.y_0);
    }
     else if (pe.type_0 == 1) {
      $lineTo(this$static.context, pe.x_0, pe.y_0);
    }
     else if (pe.type_0 == 3) {
      curveEl = castTo(pe, 84);
      $bezierCurveTo(this$static.context, curveEl.ctlX1, curveEl.ctlY1, curveEl.ctlX2, curveEl.ctlY2, curveEl.x_0, curveEl.y_0);
    }
     else if (pe.type_0 == 2) {
      quadEl = castTo(pe, 94);
      $quadraticCurveTo(this$static.context, quadEl.ctlX, quadEl.ctlY, quadEl.x_0, quadEl.y_0);
    }
     else if (pe.type_0 == 4) {
      this$static.context.closePath();
    }
     else if (pe.type_0 == 6) {
      circleEl = castTo(pe, 112);
      $moveTo(this$static.context, circleEl.x_0 + circleEl.diameter, circleEl.y_0 + circleEl.diameter / 2);
      $arc(this$static.context, circleEl.x_0 + circleEl.diameter / 2, circleEl.y_0 + circleEl.diameter / 2, circleEl.diameter / 2, 0, $intern_2, true);
      this$static.context.closePath();
    }
     else if (pe.type_0 == 7) {
      arcEl = castTo(pe, 115);
      $arc(this$static.context, pe.x_0, pe.y_0, arcEl.radius, arcEl.startAngle * $intern_6, arcEl.endAngle * $intern_6, arcEl.counterClockwise);
    }
  }
}

function $drawShape(this$static, path, fill, stroke){
  var fillColor, strokeColor;
  this$static.context.beginPath();
  if (!!stroke && !!stroke.color_0) {
    strokeColor = $getRBGAStr(stroke.color_0);
    $setStrokeStyleWeb(this$static.context, strokeColor);
    $setLineWidth(this$static.context, stroke.width_0);
    !!stroke && stroke.onOffArray != null && $nativeSetDashPatternStroke(this$static.context, stroke.onOffArray);
    $setStrokeJoin(this$static, stroke);
  }
  if (!!fill && !!fill.color_0) {
    fillColor = $getRBGAStr(fill.color_0);
    $setFillStyleWeb(this$static.context, fillColor);
  }
  !!path && $drawCanvasPath(this$static, path);
  !!fill && (this$static.context.fill() , undefined);
  !!stroke && (this$static.context.stroke() , undefined);
  $resetStrokeStyle(this$static, stroke);
  this$static.context.closePath();
}

function $drawShapeRotated(this$static, path, fill, stroke, hoverText, drillFilter, rotation, rotationPt){
  var dupPath, pathBnds;
  dupPath = $duplicate_3(path);
  if (rotation != 0) {
    this$static.context.save();
    pathBnds = $getBoundsForPath(dupPath);
    !rotationPt && (rotationPt = new CFPoint(pathBnds.x_0 + pathBnds.width_0 / 2, pathBnds.y_0 + pathBnds.height_0 / 2));
    $translate_0(this$static.context, rotationPt.x_0, rotationPt.y_0);
    $rotate(this$static.context, rotation * 0.0174533);
    $scaleAndPositionToRect(dupPath, new CFRect(0 - (rotationPt.x_0 - pathBnds.x_0), pathBnds.y_0 - rotationPt.y_0, pathBnds.width_0, pathBnds.height_0));
  }
  $drawShape(this$static, dupPath, fill, stroke);
  rotation != 0 && (this$static.context.restore() , undefined);
}

function $drawText(this$static, text_0, font, position, rotation){
  var fontColor, x_0, y_0;
  if (!!font && !!font.color_0) {
    fontColor = $getRBGAStr(font.color_0);
    $setFillStyleWeb(this$static.context, fontColor);
    $setFont_0(this$static.context, $getFontString(this$static, font));
    x_0 = position.x_0;
    y_0 = position.y_0;
    if (rotation != 0) {
      this$static.context.save();
      $translate_0(this$static.context, x_0, y_0);
      $rotate(this$static.context, rotation * 0.0174533);
      x_0 = 0;
      y_0 = 0;
    }
    $fillText(this$static.context, text_0, x_0, y_0);
    rotation != 0 && (this$static.context.restore() , undefined);
  }
}

function $getFontString(this$static, font){
  var fontName;
  fontName = font.name_0;
  (fontName == null || $trim(fontName).length == 0) && $setName_1(font, this$static.defaultFontName);
  return $toString_1(font);
}

function $hideHoverText(this$static){
  !!this$static.hover && (this$static.hover({show:false}) , undefined);
}

function $log(message){
  console.log(message);
}

function $logMetric(this$static, metric, properties){
  !!this$static.metricLogger && $nativeLogMetric(this$static.metricLogger, metric, properties);
}

function $measureText(this$static, text_0, font){
  var height, tm, width_0;
  width_0 = 0;
  height = 0;
  if (text_0 != null && text_0.length > 0) {
    $setFont_0(this$static.context, $getFontString(this$static, font));
    tm = $measureText_1(this$static.context, text_0);
    width_0 = tm.width;
    height = font.size_0 * 1.2;
  }
  return new CFDimension(width_0, height);
}

function $nativeCardBus(cardbus, value_0){
  var filter = JSON.parse(value_0);
  cardbus(filter);
}

function $nativeChartStateChanged(chartStateChanged, chartState){
  chartStateChanged(JSON.parse(chartState));
}

function $nativeDrill(drill, drillInfo){
  var drillObj;
  try {
    drillObj = JSON.parse(drillInfo);
  }
   catch (e) {
    drillObj = {};
  }
  return drill({drillInfo:drillObj});
}

function $nativeLogMetric(metricLogger, metric, properties){
  metricLogger(metric, JSON.parse(properties));
}

function $nativeSetDashPatternStroke(context, pattern){
  context.setLineDash(pattern);
}

function $nativeShowHover(this$static, hover, x_0, y_0, hoverText){
  hover({text:hoverText, x:x_0 / this$static.devicePixelRatio_0, y:y_0 / this$static.devicePixelRatio_0, show:true});
}

function $performDrill(this$static, drillFilter){
  if (this$static.drill)
    return $nativeDrill(this$static.drill, drillFilter);
  return false;
}

function $pointInPath(this$static, x_0, y_0, path){
  $drawCanvasPath(this$static, path);
  return $isPointInPath(this$static.context, x_0, y_0);
}

function $resetStrokeStyle(this$static, stroke){
  if (!!stroke && stroke.join_0 == 3) {
    $setLineCap(this$static.context, ($clinit_Context2d$LineCap() , BUTT).value_0);
    $setLineJoin(this$static.context, ($clinit_Context2d$LineJoin() , BEVEL).value_0);
  }
  !!stroke && stroke.onOffArray != null && (this$static.context.setLineDash([]) , undefined);
}

function $setCanvasSize(this$static, width_0, height){
  !!this$static.container && $setSizeVertical(this$static.container, width_0, height);
}

function $setCursorToDrillEnabled(this$static, filter){
  var theCanvas, theCanvas_0;
  theCanvas = (theCanvas_0 = null , !!this$static.canvas && (theCanvas_0 = $getCanvasElement(this$static.canvas)) , theCanvas_0);
  !!theCanvas && (filter != null && filter.length > 0?(theCanvas.style.cursor = 'pointer' , undefined):(theCanvas.style.cursor = 'auto' , undefined));
}

function $setDefaultFontName(this$static, name_0){
  this$static.defaultFontName = name_0;
}

function $setDimensions(this$static, pixelRatio){
  this$static.devicePixelRatio_0 = pixelRatio;
}

function $setOrClearClip(this$static, path){
  if (path) {
    this$static.context.save();
    this$static.context.beginPath();
    $drawCanvasPath(this$static, path);
    this$static.context.clip();
  }
   else {
    this$static.context.restore();
  }
}

function $setStrokeJoin(this$static, stroke){
  var join_0;
  if (!!stroke && stroke.join_0 != 0) {
    join_0 = stroke.join_0;
    if (join_0 == 1)
      $setLineJoin(this$static.context, ($clinit_Context2d$LineJoin() , BEVEL).value_0);
    else if (join_0 == 3) {
      $setLineJoin(this$static.context, ($clinit_Context2d$LineJoin() , ROUND_0).value_0);
      $setLineCap(this$static.context, ($clinit_Context2d$LineCap() , ROUND).value_0);
    }
     else 
      join_0 == 2 && $setLineJoin(this$static.context, ($clinit_Context2d$LineJoin() , MITER).value_0);
  }
}

function $setSupportsNativeHoverEvents(this$static, supportsNativeHoverEvents){
  this$static.supportsNativeHoverEvents = supportsNativeHoverEvents;
}

function $setTransparentBackgroundFlag(this$static, flag){
  this$static.transparentBackground = flag;
}

function $showHoverText(this$static, x_0, y_0, hoverText){
  !!this$static.hover && $nativeShowHover(this$static, this$static.hover, x_0, y_0, hoverText);
}

function $supportsCanvasResize(this$static){
  if (this$static.supportsResize)
    return -1;
  return 0;
}

function IRendererImplCanvas(container, canvas, supportsAutoSize){
  $clinit_IRendererImplCanvas();
  this.container = container;
  this.canvas = canvas;
  this.context = ($clinit_DOM() , canvas.element).getContext('2d');
  this.supportsResize = supportsAutoSize;
  this.supportsNativeHoverEvents = true;
  this.supportsNativeAnnotations = true;
}

defineClass(284, 1, {}, IRendererImplCanvas);
_.deleteAnnotation_0 = function deleteAnnotation(id_0){
  $deleteAnnotation(this, id_0);
}
;
_.displayAnnotations = function displayAnnotations(hintRect, annotationJSON){
  $displayAnnotations(this, hintRect, annotationJSON);
}
;
_.drawShape = function drawShape(path, fill, stroke, hoverText, drillFilter){
  $drawShape(this, path, fill, stroke);
}
;
_.drawShapeRotated = function drawShapeRotated(path, fill, stroke, hoverText, drillFilter, rotation, rotationPt){
  $drawShapeRotated(this, path, fill, stroke, hoverText, drillFilter, rotation, rotationPt);
}
;
_.drawText = function drawText(text_0, font, position, rotation){
  $drawText(this, text_0, font, position, rotation);
}
;
_.editMapData = function editMapData(names, codes, longNames, altNames, altCodes){
}
;
_.groupMapItems = function groupMapItems(itemNames){
}
;
_.log_0 = function log_1(message){
  $log(message);
}
;
_.measureText_0 = function measureText(text_0, font){
  return $measureText(this, text_0, font);
}
;
_.pointInPath = function pointInPath_0(x_0, y_0, path){
  return $pointInPath(this, x_0, y_0, path);
}
;
_.setCanvasSize = function setCanvasSize(width_0, height){
  $setCanvasSize(this, width_0, height);
}
;
_.setOrClearClip = function setOrClearClip(path){
  $setOrClearClip(this, path);
}
;
_.setOrigin = function setOrigin(x_0, y_0){
}
;
_.showCancelZoomIndicator = function showCancelZoomIndicator(show){
}
;
_.showHoverText = function showHoverText(x_0, y_0, hoverText){
  $showHoverText(this, x_0, y_0, hoverText);
}
;
_.supportsCanvasResize = function supportsCanvasResize(){
  return $supportsCanvasResize(this);
}
;
_.supportsNativeAnnotations_0 = function supportsNativeAnnotations(){
  return this.supportsNativeAnnotations;
}
;
_.supportsNativeCancelZoom = function supportsNativeCancelZoom(){
  return false;
}
;
_.supportsNativeEditMapData = function supportsNativeEditMapData(){
  return false;
}
;
_.supportsNativeGroupMapItems = function supportsNativeGroupMapItems(){
  return false;
}
;
_.supportsNativeHover = function supportsNativeHover(){
  return this.supportsNativeHoverEvents;
}
;
_.defaultFontName = 'Open Sans';
_.devicePixelRatio_0 = 1;
_.supportsNativeAnnotations = false;
_.supportsNativeHoverEvents = false;
_.supportsResize = false;
_.transparentBackground = false;
var Lcom_domo_charting_IRendererImplCanvas_2_classLit = createForClass('com.domo.charting', 'IRendererImplCanvas', 284);
function $bounceInOut(t){
  return ((t *= 2) <= 1?1 - $bounceOut(1 - t):$bounceOut(t - 1) + 1) / 2;
}

function $bounceOut(t){
  return t < 0.36363636363636365?$intern_7 * t * t:t < 0.7272727272727273?$intern_7 * (t -= 0.5454545454545454) * t + $intern_8:t < 0.9090909090909091?$intern_7 * (t -= 0.8181818181818182) * t + 0.9375:$intern_7 * (t -= 0.9545454545454546) * t + 0.984375;
}

function $circleInOut(t){
  return ((t *= 2) <= 1?1 - $wnd.Math.sqrt(1 - t * t):$wnd.Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

function $circleOut(t){
  return $wnd.Math.sqrt(1 - --t * t);
}

function $cubicInOut(t){
  if (t < 0.5)
    return 2 * t * (2 * t) * (2 * t) / 2;
  return 1 - (1 - t) * 2 * ((1 - t) * 2) * ((1 - t) * 2) / 2;
}

function $cubicOut(t){
  return --t * t * t + 1;
}

function $ease(this$static, value_0){
  switch (this$static.easing) {
    case 'linear':
    default:return value_0;
    case 'bounceIn':
      return 1 - $bounceOut(1 - value_0);
    case 'bounceOut':
      return $bounceOut(value_0);
    case 'bounceInOut':
      return $bounceInOut(value_0);
    case 'circleIn':
      return 1 - $wnd.Math.sqrt(1 - value_0 * value_0);
    case 'circleOut':
      return $circleOut(value_0);
    case 'circleInOut':
      return $circleInOut(value_0);
    case 'cubicIn':
      return value_0 * value_0 * value_0;
    case 'cubicOut':
      return $cubicOut(value_0);
    case 'cubicInOut':
      return $cubicInOut(value_0);
    case 'quadIn':
      return value_0 * value_0;
    case 'quadOut':
      return 1 - (1 - value_0) * (1 - value_0);
    case 'elasticOut':
      return $wnd.Math.pow(2, -10 * value_0) * $wnd.Math.sin((value_0 - 0.075) * $intern_2 / 0.3) + 1;
    case 'sinIn':
      return 1 - $wnd.Math.cos(value_0 * $intern_1 / 2);
    case 'sinOut':
      return $wnd.Math.sin(value_0 * $intern_1 / 2);
    case 'sinInOut':
      return (1 - $wnd.Math.cos($intern_1 * value_0)) / 2;
  }
}

function $getPercentComplete(this$static, curTime){
  var percentComplete;
  percentComplete = 1;
  lt(curTime, this$static.startTime)?(percentComplete = 0):gte_0(curTime, this$static.startTime) && lt(curTime, this$static.endTime) && (percentComplete = $ease(this$static, toDouble_0(sub_1(curTime, this$static.startTime)) / toDouble_0(this$static.durationMS)) * 0.999);
  return percentComplete;
}

function $getTotalDuration(this$static){
  return add_1(this$static.delayMS, this$static.durationMS);
}

function $setAnimTimeAndDraw(this$static, rnd, timeMS, comp){
  if (eq(this$static.startTime, 0)) {
    this$static.startTime = add_1(timeMS, this$static.delayMS);
    this$static.endTime = add_1(this$static.startTime, this$static.durationMS);
  }
  if (gte_0(timeMS, this$static.startTime) && lte(timeMS, this$static.endTime)) {
    comp.needsFormat && comp.format_0(rnd);
    comp.setFrame(this$static.type_0, this$static.easing, this$static.startTime, timeMS, this$static.endTime, rnd);
    comp.draw_1(rnd);
  }
   else if (gt(timeMS, this$static.endTime)) {
    if (!this$static.finalStateSet) {
      comp.setFrame(this$static.type_0, this$static.easing, this$static.startTime, timeMS, this$static.endTime, rnd);
      this$static.finalStateSet = true;
    }
    comp.draw_1(rnd);
  }
}

function AnimInfo(delayMS, durationMS, type_0, easingType){
  this.delayMS = delayMS;
  this.durationMS = durationMS;
  this.type_0 = type_0;
  this.easing = easingType;
}

defineClass(99, 1, {}, AnimInfo);
_.delayMS = 0;
_.durationMS = 0;
_.easing = 'sinInOut';
_.endTime = 0;
_.finalStateSet = false;
_.startTime = 0;
var Lcom_domo_charting_base_AnimInfo_2_classLit = createForClass('com.domo.charting.base', 'AnimInfo', 99);
function AnimInfoSrs(startTime, endTime, easingType){
  this.type_0 = 'default';
  this.startTime = startTime;
  this.endTime = endTime;
  this.durationMS = sub_1(endTime, startTime);
  easingType != null && (this.easing = easingType);
}

defineClass(101, 99, {}, AnimInfoSrs);
var Lcom_domo_charting_base_AnimInfoSrs_2_classLit = createForClass('com.domo.charting.base', 'AnimInfoSrs', 101);
function $addCardURNToMetrics(this$static, list){
  this$static.cardURN != null && $add_1(list, getJsonNameValuePair_1('card_id', this$static.cardURN));
}

function $addComponent(this$static, comp){
  !comp.chart && (comp.chart = this$static);
  $add_1(this$static.compAry, comp);
}

function $addComponent_0(this$static, comp, index_0){
  !comp.chart && (comp.chart = this$static);
  $add_0(this$static.compAry, index_0, comp);
}

function $addMapThumbnailToPicker(this$static, map_0, theData, name_0){
  var tempGrid, thumbNail;
  thumbNail = new MapArea_0(map_0, name_0);
  thumbNail.origBounds = $duplicate_5(map_0.origBounds);
  tempGrid = $clone(theData);
  $setData(thumbNail, tempGrid);
  $addThumbnail(this$static.graphPickerPanel, this$static.rnd, thumbNail, false);
}

function $addThumbnailToPicker(this$static, graph, graphType, theData, name_0){
  var selected, tempGrid, thumbNail;
  $clearHasRunningTotals(theData);
  thumbNail = createGraph(name_0, graphType.type_0, graphType.typeAttributes, this$static, true, null);
  tempGrid = $clone(theData);
  !!graph && $setChartOptions(thumbNail, $cloneChartOptions(graph));
  thumbNail.setData(tempGrid);
  selected = false;
  !!graph && graph.graphType == graphType.type_0 && $equals(graphType.typeAttributes, graph.typeAttributes) && (selected = true);
  $addThumbnail(this$static.graphPickerPanel, this$static.rnd, thumbNail, selected);
}

function $animateAllComponents(this$static, startTime){
  var animTotalEndTime, comp, comp$iterator, endTime;
  $clearCanvas_0(this$static);
  animTotalEndTime = 0;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    endTime = comp.drawAnimated(this$static.rnd, startTime);
    compare_22(endTime, animTotalEndTime) > 0 && (animTotalEndTime = endTime);
  }
  return animTotalEndTime;
}

function $buildAndPopulateChartPicker(this$static, supportedTypes, dataGrid, graph){
  var graphType, graphType$iterator, index_0, tempGrid;
  !!this$static.savedMapForChartPicker && !!this$static.savedMapForChartPicker.data_0 && (dataGrid = this$static.savedMapForChartPicker.data_0);
  this$static.graphPickerPanel = new GraphPickerPanel(this$static);
  $setRenderer(this$static.graphPickerPanel, this$static.rnd);
  $setSizeBasedOnChart(this$static.graphPickerPanel, supportedTypes.array.length);
  $add_1(this$static.compAry, this$static.graphPickerPanel);
  index_0 = 0;
  tempGrid = $clone_0(dataGrid, 500, 100);
  for (graphType$iterator = new ArrayList$1(supportedTypes); graphType$iterator.i < graphType$iterator.this$01.array.length;) {
    graphType = castTo($next_3(graphType$iterator), 50);
    graphType.type_0 == -1?$addMapThumbnailToPicker(this$static, this$static.savedMapForChartPicker, tempGrid, 'thumb_' + index_0++):$addThumbnailToPicker(this$static, graph, graphType, tempGrid, 'thumb_' + index_0++);
  }
  $freeResources_11(tempGrid);
}

function $cancelDrag(this$static){
  var comp, comp$iterator;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    $setRedrawNeeded(this$static, comp.cancelDrag_0());
  }
  return this$static.redrawNeeded;
}

function $cancelHighlighting(this$static){
  var comp, comp$iterator, result;
  result = false;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    result = result | comp.cancelHighlighting();
  }
  return result;
}

function $changeGraphToNewType(this$static, graphToChangeTo){
  var animInfo, dataToKeep, graph, newBadgeName, newGraph, newIsScaleGraph, oldAnnotations, oldBounds, oldChartOptions, oldColumnFormats, oldData, oldIsScaleGraph, oldScaleMarkers, originalBadgeName, originalSettings, switchToGraph, typeAttrs;
  this$static.warningMessage = null;
  this$static.goalShape = null;
  if (!!graphToChangeTo && instanceOf(graphToChangeTo, 43)) {
    switchToGraph = castTo(graphToChangeTo, 43);
    graph = $getGraphComponent(this$static);
    if (!graph) {
      $changeMapToGraph(this$static, graphToChangeTo);
      return;
    }
    animInfo = graph.animInfo;
    $getPreviousTypeAttributes(switchToGraph).isStacked && (switchToGraph.typeAttributes.isStacked = true);
    if (!!graph && !!switchToGraph && (graph.graphType != switchToGraph.graphType || !$equals(graph.typeAttributes, switchToGraph.typeAttributes))) {
      originalSettings = graph.originalSettings;
      originalBadgeName = '';
      originalSettings?(originalBadgeName = getBadgeNameFromTypeAndAttributes(originalSettings.type_0, originalSettings.typeAttributes, $getOriginalData(graph))):(switchToGraph.previousGraphType == -1 && (switchToGraph.previousGraphType = switchToGraph.graphType) , switchToGraph.previousGraphType == -1 && (originalBadgeName = 'map'));
      $clearAnimation(this$static);
      oldIsScaleGraph = isScaleGraphType(graph.graphType, graph.typeAttributes);
      newIsScaleGraph = isScaleGraphType(switchToGraph.graphType, switchToGraph.typeAttributes);
      $resetDataForTypeChange(graph);
      graph.resetForSizeChange();
      $addDependentCompsToCompArray(graph);
      $usingCardBus(this$static) && this$static.lastCardBusApplyFilterMessage != null && this$static.lastCardBusApplyFilterMessage.length > 0 && $addChartOption(graph, 'show_as_filtered', this$static.lastCardBusApplyFilterMessage);
      graph.setNeedsFormat(true);
      typeAttrs = switchToGraph.typeAttributes;
      if (oldIsScaleGraph && newIsScaleGraph || !oldIsScaleGraph && !newIsScaleGraph) {
        changeToGraphType(graph, switchToGraph.graphType, typeAttrs, true, false);
      }
       else {
        graph.resetForTypeChange();
        $remove_3(this$static.compAry, graph);
        oldChartOptions = graph.chartOptions;
        oldAnnotations = graph.annotations;
        oldScaleMarkers = graph.scaleMarkers;
        oldColumnFormats = graph.columnFormats;
        oldData = $getOriginalData(graph);
        oldBounds = new CFRect_0(graph.bnds);
        newGraph = createGraph(graph.name_0, switchToGraph.graphType, typeAttrs, this$static, false, null);
        graph.freeResources(oldData);
        newGraph.originalSettings = originalSettings;
        newGraph.chartOptions = oldChartOptions;
        !!oldColumnFormats && $size(oldColumnFormats.map_0) > 0?(newGraph.columnFormats = new LinkedHashMap_0(oldColumnFormats)):(newGraph.columnFormats = null);
        newGraph.annotations = oldAnnotations;
        newGraph.setData(oldData);
        $addScaleMarkers(newGraph, oldScaleMarkers);
        newGraph.setBounds(oldBounds);
        $add_1(this$static.compAry, newGraph);
        graph = newGraph;
      }
      !animInfo && $setAnimationData(graph, 0, 700, 'Transition', $getEasingTypeForGraph(switchToGraph.graphType, graph));
      newBadgeName = getBadgeNameFromComponent(graph);
      $setAnimateDrawNeeded(this$static);
      $logChangeChartType(this$static, originalBadgeName, newBadgeName);
    }
  }
   else if (!!graphToChangeTo && instanceOf(graphToChangeTo, 85)) {
    graph = $getGraphComponent(this$static);
    if (graph) {
      graph.resetForTypeChange();
      $remove_3(this$static.compAry, graph);
      dataToKeep = null;
      !!this$static.savedMapForChartPicker.data_0 && (dataToKeep = this$static.savedMapForChartPicker.data_0);
      graph.freeResources(dataToKeep);
    }
    !!this$static.savedMapForChartPicker && $add_1(this$static.compAry, this$static.savedMapForChartPicker);
  }
}

function $changeMapToGraph(this$static, graphToChangeTo){
  var dataGrid, map_0, newBadgeName, newGraph, oldBounds, switchToGraph;
  switchToGraph = castTo(graphToChangeTo, 43);
  map_0 = $getMapComponent(this$static);
  if (!map_0)
    return;
  dataGrid = map_0.data_0;
  $clearAnimation(this$static);
  $remove_3(this$static.compAry, map_0);
  oldBounds = new CFRect_0(map_0.bnds);
  newGraph = createGraph('graph', switchToGraph.graphType, new TypeAttributes, this$static, false, null);
  newGraph.setData(dataGrid);
  newGraph.setBounds(oldBounds);
  $add_1(this$static.compAry, newGraph);
  $setAnimationData(newGraph, 0, 700, 'Transition', $getEasingTypeForGraph(switchToGraph.graphType, newGraph));
  newBadgeName = getBadgeNameFromComponent(newGraph);
  $setAnimateDrawNeeded(this$static);
  $logChangeChartType(this$static, 'map', newBadgeName);
}

function $chartStateChanged_0(this$static){
  var currentState;
  currentState = $getCurrentChartState(this$static);
  $chartStateChanged_1(this$static.rnd, currentState);
}

function $checkIfPacketTooBig(this$static, jsonData){
  var closeIndex, commaIndex, numRows, numRowsIndex, rowsString;
  if (jsonData != null) {
    if (jsonData.length > 100000000) {
      $log_0(this$static.rnd, 'Chart Packet over 100000000 characters Exception');
      throw toJs(new PacketTooBigException('Chart Packet over 100000000 characters Exception'));
    }
    numRowsIndex = jsonData.indexOf('"numRows":');
    if (numRowsIndex > 0) {
      commaIndex = jsonData.indexOf(',', numRowsIndex + 10);
      closeIndex = jsonData.indexOf('}', numRowsIndex + 10);
      closeIndex < commaIndex && (commaIndex = closeIndex);
      if (commaIndex > 0) {
        rowsString = jsonData.substr(numRowsIndex + 10, commaIndex - (numRowsIndex + 10));
        rowsString = $trim(rowsString);
        numRows = getInt(rowsString, 0);
        if (numRows > 101000) {
          $log_0(this$static.rnd, 'Chart Packet over 101000 Rows Exception');
          throw toJs(new PacketTooBigException('Chart Packet over 101000 Rows Exception'));
        }
      }
    }
  }
}

function $clearAnimation(this$static){
  var comp, comp$iterator;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    comp.clearAnimation();
  }
  this$static.animateDrawNeeded = false;
  $removeGraphPickerComponent(this$static);
}

function $clearCanvas_0(this$static){
  var clearRect, frameRect, ge, rect;
  if (!!this$static.palette.backgroundColor || !$clearCanvas_1(this$static.rnd)) {
    rect = new CFRect(0, 0, this$static.dimension.width_0 + 1, this$static.dimension.height_0 + 1);
    clearRect = new CFShape_1(rect, new CFFill($getBackgroundColor(this$static.palette)), null);
    ge = new GraphicElement_0(clearRect);
    $draw_2(ge, this$static.rnd);
  }
  if (this$static.drawFrameRect) {
    rect = new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0);
    frameRect = new CFShape_1(rect, null, new CFStroke(($clinit_CFColor() , RED), 1));
    ge = new GraphicElement_0(frameRect);
    $draw_2(ge, this$static.rnd);
  }
}

function $clearHoverState(this$static){
  var comp, i;
  if (this$static.compAry.array.length > 0) {
    for (i = this$static.compAry.array.length - 1; i >= 0; i--) {
      comp = castTo($get_2(this$static.compAry, i), 23);
      $setRedrawNeeded(this$static, comp.setHoverData(null, this$static.rnd));
    }
  }
  this$static.activeHoverShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $hideHoverText(this$static.rnd.renderer);
}

function $createFromJSONWithChartState(this$static, jsonData, currentChartState){
  var chartDef, comp, comp$iterator, compDef, compName, compName$iterator, currentComp, e, entry, graph, graphPickerWasOpen, jex, jsonObject, map_0, outerIter;
  $checkIfPacketTooBig(this$static, jsonData);
  this$static.chartCreationStartTicks = ($clinit_System() , fromDouble_0(now_2()));
  this$static.timeToCreateNeedsLogged = true;
  this$static.lastCardBusApplyFilterMessage = null;
  graphPickerWasOpen = this$static.graphPickerPanelOpen;
  graphPickerWasOpen && $hideChartPicker(this$static);
  jsonObject = getJsonObject(jsonData);
  if (isGeoJson(jsonObject)) {
    try {
      map_0 = parse_0(this$static, jsonObject);
      if (map_0) {
        $add_1(this$static.compAry, map_0);
        $setAnimateDrawNeeded(this$static);
        !map_0.animInfo && (map_0.animInfo = new AnimInfo(0, 600, 'Initial', 'linear'));
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 38)) {
        jex = $e0;
        if (this$static.testMode)
          throw toJs(new RuntimeException_1(jex.getCause()));
        if (this$static.rnd) {
          $log_0(this$static.rnd, getExceptionStackTrace(jex));
          $log_0(this$static.rnd, 'GeoJson DATA: ' + jsonData);
        }
      }
       else 
        throw toJs($e0);
    }
  }
   else {
    this$static.currentChartIsBridgeChart && $reset(this$static);
    try {
      chartDef = getChartDefinition(this$static.rnd, jsonObject);
      $dataSourceMisMatch(this$static, chartDef) && $reset(this$static);
      chartDef.palette?(this$static.palette = chartDef.palette):!this$static.palette && (this$static.palette = getPalette_0(this$static.rnd, defaultPaletteJSON));
      !!chartDef.backgroundColor && (this$static.palette.backgroundColor = chartDef.backgroundColor);
      !!chartDef.scaleLineColor && (this$static.palette.scaleLineColor = chartDef.scaleLineColor);
      !!chartDef.textColor && (this$static.palette.textColor = chartDef.textColor);
      chartDef.mobile && (this$static.mobile = true);
      chartDef.locale != null && $setLocale(this$static, chartDef.locale);
      this$static.mapZoomEnabled = false;
      chartDef.mapZoomEnabled && (this$static.mapZoomEnabled = true);
      this$static.disableDueToSize = chartDef.disableDueToSize;
      chartDef.timeZone != null && (this$static.timeZone = chartDef.timeZone);
      chartDef.timeZoneOffset != null && (this$static.timeZoneOffset = chartDef.timeZoneOffset);
      chartDef.version_0 > this$static.version_0 && (this$static.version_0 = chartDef.version_0);
      chartDef.defaultFont != null && $setDefaultFontName_0(this$static.rnd, chartDef.defaultFont);
      this$static.showPoweredBy = chartDef.showPoweredBy;
      this$static.sizzle = chartDef.sizzle;
      this$static.isPageLayout = chartDef.isPageLayout;
      this$static.cardURN = chartDef.cardURN;
      this$static.editMode = chartDef.editMode;
      this$static.conditionalFormats = chartDef.conditionalFormatList;
      currentComp = $getGraphComponent(this$static);
      !currentComp && (currentComp = $getMapComponent(this$static));
      currentChartState != null && mergeChartDefinitionWithCurrentState(this$static.rnd, chartDef, currentChartState, currentComp);
      graph = $getGraphComponent(this$static);
      removeNonExistentColumnNamesFromColumnFormats(chartDef, graph);
      if (chartDef.componentDefMap) {
        for (compName$iterator = (outerIter = (new AbstractMap$1(chartDef.componentDefMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); compName$iterator.val$outerIter2.hasNext_0();) {
          compName = (entry = castTo(compName$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
          compDef = castTo($get_4(chartDef.componentDefMap, compName), 137);
          $createOrSetComponentWithDefintion(this$static, compName, compDef, chartDef.datasourceMap, chartDef.pivotTableTotals);
        }
      }
       else if (chartDef.datasourceMap) {
        for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
          comp = castTo($next_3(comp$iterator), 23);
          comp.updateWithDefinition(null, chartDef.datasourceMap, null, false, chartDef.pivotTableTotals);
        }
      }
      $setAnimateDrawNeeded(this$static);
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 38)) {
        e = $e1;
        if (this$static.testMode)
          throw toJs(e);
        if (this$static.rnd) {
          $log_0(this$static.rnd, getExceptionStackTrace(e));
          $log_0(this$static.rnd, 'JSON DATA: ' + jsonData);
        }
      }
       else 
        throw toJs($e1);
    }
  }
  graphPickerWasOpen && $showChartPicker(this$static);
}

function $createGraph(this$static, compName, compDef){
  var graph, graphType, origAttributes, origState, origType, typeAttributes;
  graphType = getGraphType(compDef);
  typeAttributes = getTypeAttributes(compDef);
  graph = createGraph(compName, graphType, typeAttributes, this$static, false, compDef.overrides);
  if (compDef.originalBadgeType != null) {
    origType = getChartTypeFromBadgeType(compDef.originalBadgeType, compDef.overrides);
    origAttributes = getTypeAttributesFromBadgeType(compDef.originalBadgeType);
    origState = new GraphType(origType, origAttributes);
    graph.originalSettings = origState;
  }
  compDef.bounds?graph.setBounds(compDef.bounds):graph.setBounds(new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0));
  this$static.staticImage && (graph.allowInteractions = false , graph.hasInteractions = graph.allowInteractions);
  $addScaleMarkers(graph, compDef.scaleMarkers);
  $setAnnotations(graph, compDef.annotations);
  $addLegendsOrSubComponents(graph, this$static);
  !graph.chart && (graph.chart = this$static);
  $add_1(this$static.compAry, graph);
  $addDependentCompsToCompArray(graph);
  graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?$setAnimationData(graph, 0, 750, 'Initial', graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?'bounceOut':graphType == 17?'bounceOut':'circleInOut'):graphType == 17?$setAnimationData(graph, 0, $intern_10, 'Initial', graph.typeAttributes.isRadial?'bounceOut':'bounceOut'):$setAnimationData(graph, 0, 600, 'Initial', graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?'bounceOut':graphType == 17?'bounceOut':'circleInOut');
  return graph;
}

function $createMap(this$static, compDef){
  var map_0;
  map_0 = compDef.mapDef;
  map_0.chart = this$static;
  compDef.bounds?map_0.setBounds(compDef.bounds):map_0.setBounds(new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0));
  this$static.staticImage && (map_0.allowInteractions = false , map_0.hasInteractions = map_0.allowInteractions);
  map_0.addLegendsOrSubComponents(this$static);
  !map_0.chart && (map_0.chart = this$static);
  $add_1(this$static.compAry, map_0);
  $addDependentCompsToCompArray(map_0);
  $setColumnFormats(map_0, compDef.columnFormats);
  $setAnimateDrawNeeded(this$static);
  !map_0.animInfo && (map_0.animInfo = new AnimInfo(0, 600, 'Initial', 'linear'));
  return map_0;
}

function $createOrSetComponentWithDefintion(this$static, compName, compDef, datasourceMap, pivotTotals){
  var comp, graph, graphType, map_0, newGraph, oldDataGrid;
  !!compDef && compDef.type_0 != null && $equals_2(compDef.type_0, 'graph') && $migrateChartOptions(compDef);
  comp = $getComponentByName(this$static, compName);
  if (comp) {
    if (instanceOf(comp, 43)) {
      this$static.warningMessage = null;
      graphType = getGraphType(compDef);
      if (graphCreationNeeded(castTo(comp, 43).graphType, graphType, castTo(comp, 43).typeAttributes)) {
        graph = castTo(comp, 43);
        oldDataGrid = resetGraph(graph, graph.graphType, castTo(comp, 43).typeAttributes, false, false);
        $removeComponent(this$static, comp);
        newGraph = $createGraph(this$static, compName, compDef);
        newGraph.updateWithDefinition(compDef, datasourceMap, oldDataGrid, false, pivotTotals);
      }
       else {
        graph = castTo(comp, 43);
        $setAnnotations(graph, compDef.annotations);
        oldDataGrid = resetGraph(graph, graphType, castTo(comp, 43).typeAttributes, false, false);
        compDef.bounds?graph.setBounds(compDef.bounds):graph.setBounds(new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0));
        this$static.staticImage && (graph.allowInteractions = false , graph.hasInteractions = graph.allowInteractions);
        graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?$setAnimationData(graph, 0, 750, 'Initial', graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?'bounceOut':graphType == 17?'bounceOut':'circleInOut'):graphType == 17?$setAnimationData(graph, 0, $intern_10, 'Initial', graph.typeAttributes.isRadial?'bounceOut':'bounceOut'):$setAnimationData(graph, 0, 600, 'Initial', graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?'bounceOut':graphType == 17?'bounceOut':'circleInOut');
        comp.updateWithDefinition(compDef, datasourceMap, oldDataGrid, false, pivotTotals);
        comp.clearAnimation();
        comp.setAnimationData(0, 500, 'Transition', 'circleOut');
      }
    }
     else if (instanceOf(comp, 85)) {
      $remove_3(this$static.compAry, comp);
      comp.freeResources(null);
      map_0 = $createMap(this$static, compDef);
      map_0.rnd = this$static.rnd;
      map_0.editMode = this$static.editMode;
      map_0.updateWithDefinition(compDef, datasourceMap, null, false, pivotTotals);
    }
     else {
      comp.updateWithDefinition(compDef, datasourceMap, null, false, pivotTotals);
    }
  }
   else {
    if (compDef.type_0 != null && $equals_2(compDef.type_0, 'graph')) {
      graph = $createGraph(this$static, compName, compDef);
      graph.rnd = this$static.rnd;
      graph.updateWithDefinition(compDef, datasourceMap, null, false, pivotTotals);
    }
     else if (compDef.type_0 != null && $equals_2(compDef.type_0, 'map')) {
      map_0 = $createMap(this$static, compDef);
      map_0.rnd = this$static.rnd;
      map_0.editMode = this$static.editMode;
      map_0.updateWithDefinition(compDef, datasourceMap, null, false, pivotTotals);
    }
  }
}

function $createPoweredByShape(this$static){
  var backShape, bluePath, blueRect, dark, fontsize, left, logo, logoShape, pItem, poweredSize, rectSize, textOffset, top_0, whitePath, whiteRect, whiteShape;
  logo = new CFPath_7('M 24 15.1 C 24.4 13.1 26.2 11.7 28.2 11.7 C 30.3 11.7 32.1 13.2 32.5 15.2 L 32.5 16.8 L 32.5 16.8 C 32.1 18.8 30.3 20.3 28.2 20.3 C 26.2 20.3 24.4 18.9 24 16.9 L 24 20.3 L 22.7 20.3 L 22.7 15.2 L 19.7 18.1 L 16.9 15.2 L 16.9 20.3 L 15.6 20.3 L 15.6 16.6 C 15.3 18.7 13.5 20.3 11.3 20.3 C 9.2 20.3 7.4 18.8 7 16.8 C 6.6 18.8 4.9 20.3 2.8 20.3 L 0 20.3 L 0 11.7 L 2.8 11.7 C 4.9 11.7 6.6 13.2 7 15.2 C 7.4 13.2 9.2 11.7 11.3 11.7 C 13.5 11.7 15.3 13.3 15.6 15.4 L 15.6 11.7 L 19.7 16 L 24 11.7 L 24 15.1 Z M 1.4 19 L 2.8 19 C 4.4 19 5.7 17.6 5.7 16 C 5.7 14.4 4.4 13 2.8 13 L 1.4 13 L 1.4 19 Z M 11.3 18.9 C 12.9 18.9 14.2 17.6 14.2 16 C 14.2 14.4 12.9 13.1 11.3 13.1 C 9.7 13.1 8.4 14.4 8.4 16 C 8.4 17.6 9.7 18.9 11.3 18.9 Z M 28.2 18.9 C 29.8 18.9 31.1 17.6 31.1 16 C 31.1 14.4 29.8 13.1 28.2 13.1 C 26.6 13.1 25.3 14.4 25.3 16 C 25.3 17.6 26.6 18.9 28.2 18.9 Z');
  rectSize = 32;
  if (this$static.showPoweredBy) {
    fontsize = 11.5;
    textOffset = 12;
    if (this$static.dimension.height_0 <= 300) {
      fontsize *= $intern_8;
      rectSize = round_int(rectSize * $intern_8);
      textOffset = round_int(textOffset * $intern_8);
    }
    dark = new CFFont_0(null, fontsize, ($clinit_CFColor() , DOMO_BLUE));
    poweredSize = $measureText_0(this$static.rnd, 'POWERED BY', dark);
    left = round_int(this$static.dimension.width_0 - poweredSize.width_0) - (rectSize + 6);
    top_0 = round_int(this$static.dimension.height_0) - textOffset;
    pItem = new CFTextItem_0('POWERED BY', dark, left, top_0);
    blueRect = new CFRect(left - 6, round_int(this$static.dimension.height_0) - (rectSize + 1), poweredSize.width_0 + 20, rectSize);
    bluePath = new CFPath_3(blueRect);
    backShape = new CFShape_0(bluePath, ($clinit_CFFill() , DOMO_BLUE_0), null);
    this$static.poweredShape = new GraphicElement_0(backShape);
    whiteRect = new CFRect(left - 5, round_int(this$static.dimension.height_0) - rectSize, poweredSize.width_0 + 18, rectSize - 2);
    whitePath = new CFPath_3(whiteRect);
    whiteShape = new CFShape_0(whitePath, WHITE_0, null);
    $addShape(this$static.poweredShape, whiteShape);
    this$static.dimension.height_0 <= 300 && $scale_1(logo, $intern_8, 0, 0);
    $scale_1(logo, 1, round_int(this$static.dimension.width_0) - (rectSize + 1), round_int(this$static.dimension.height_0) - (rectSize + 1));
    blueRect = new CFRect(round_int(this$static.dimension.width_0) - (rectSize + 1), round_int(this$static.dimension.height_0) - (rectSize + 1), rectSize, rectSize);
    bluePath = new CFPath_3(blueRect);
    backShape = new CFShape_0(bluePath, DOMO_BLUE_0, null);
    logoShape = new CFShape_0(logo, WHITE_0, null);
    !!logoShape.path && (logoShape.path.shouldAntiAlias = true);
    $addShape(this$static.poweredShape, backShape);
    $addShape(this$static.poweredShape, logoShape);
    $addTextItem(this$static.poweredShape, pItem);
  }
   else {
    $scale_1(logo, 1, round_int(this$static.dimension.width_0) - 33, round_int(this$static.dimension.height_0) - 33);
    logoShape = new CFShape_0(logo, ($clinit_CFFill() , MOSTLY_TRANSPARENT_0), null);
    this$static.poweredShape = new GraphicElement_0(logoShape);
  }
}

function $dataSourceMisMatch(this$static, chartDef){
  var graph, map_0, name_0;
  graph = $getGraphComponent(this$static);
  map_0 = $getMapComponent(this$static);
  name_0 = null;
  !!graph && !!graph.data_0?(name_0 = graph.data_0.name_0):!!map_0 && !!map_0.data_0 && (name_0 = map_0.data_0.name_0);
  if (name_0 != null) {
    if (!!chartDef.datasourceMap && $getStringValue(chartDef.datasourceMap, name_0) != null) {
      if (!!chartDef.componentDefMap && $get_4(chartDef.componentDefMap, 'graph') != null && !!map_0)
        return true;
      if (!!chartDef.componentDefMap && $get_4(chartDef.componentDefMap, 'map') != null && !!graph)
        return true;
      return false;
    }
    return true;
  }
  return false;
}

function $draw_0(this$static){
  var comp, comp$iterator, comp$iterator0, e, wasPopup;
  try {
    $clearCanvas_0(this$static);
    for (comp$iterator0 = new ArrayList$1(this$static.compAry); comp$iterator0.i < comp$iterator0.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator0), 23);
      comp.draw_1(this$static.rnd);
    }
    for (comp$iterator = new ArrayList$1(this$static.activeHoverShapes); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      wasPopup = comp.isPopupComp;
      comp.isPopupComp = false;
      comp.draw_1(this$static.rnd);
      comp.isPopupComp = wasPopup;
    }
    $drawWarningMessage(this$static);
    !this$static.poweredShape && $createPoweredByShape(this$static);
    !!this$static.poweredShape && $draw_2(this$static.poweredShape, this$static.rnd);
    this$static.redrawNeeded = false;
    this$static.animateDrawNeeded = false;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      if (this$static.testMode)
        throw toJs(e);
      $log_0(this$static.rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function $drawAddAnnotationIndicator(this$static, x_0, y_0){
  var dataObject, graph, hitShape, innerBnds, innerBndsHorz, linePos;
  graph = $getGraphComponent(this$static);
  linePos = null;
  if (!!graph && instanceOf(graph, 40)) {
    innerBnds = graph.getInnerBounds();
    innerBndsHorz = $getInnerBoundsRect($getValueScaleByNumber(castTo(graph, 40), 0));
    this$static.useExtendedThumbRegion && (graph.isHorizontal_0() && x_0 < innerBnds.x_0 && x_0 >= graph.bnds.x_0?(x_0 = round_int(innerBnds.x_0 + 1)):!graph.isHorizontal_0() && y_0 > innerBnds.y_0 + innerBnds.height_0 && y_0 <= $getBottom(graph.bnds) && (y_0 = round_int(innerBnds.y_0 + innerBnds.height_0 - 1)));
    if ($containsPoint_0(innerBnds, new CFPoint(x_0, y_0))) {
      hitShape = $getNearestShapeUnderPosition(this$static, x_0, y_0, castTo(graph, 40), innerBnds, castTo(graph, 40).isHorizontal);
      dataObject = $getDataObjectForShape_0(graph, hitShape);
      if (!!hitShape && dataObject != null && (instanceOf(dataObject, 18) || instanceOf(dataObject, 87))) {
        linePos = $drawAnnotationIndicatorForShape(this$static, graph, innerBnds, innerBndsHorz, hitShape);
      }
       else if (graph.annotationIndicatorShape) {
        graph.annotationIndicatorShape = null;
        graph.annotationIndicatorHitShape = null;
        this$static.redrawNeeded = true;
      }
    }
  }
  return linePos;
}

function $drawAnimated(this$static, startTime){
  var adjustedStartTime, animTotalEndTime, comp, comp$iterator, e, estimateNumberElementsToDraw, hasChainedAnimations;
  try {
    adjustedStartTime = startTime;
    if (this$static.firstAnimationPass) {
      estimateNumberElementsToDraw = 0;
      for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 23);
        estimateNumberElementsToDraw += comp.getEstimateOfNumberOfShapesToDraw();
      }
      estimateNumberElementsToDraw > $intern_11 && (adjustedStartTime = sub_1(startTime, $intern_12));
      this$static.firstAnimationPass = false;
    }
    animTotalEndTime = $animateAllComponents(this$static, adjustedStartTime);
    if (compare_22(adjustedStartTime, animTotalEndTime) < 0)
    ;
    else {
      hasChainedAnimations = false;
      for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 23);
        if (comp.checkAndSetChainedAnimations()) {
          hasChainedAnimations = true;
          this$static.firstAnimationPass = true;
          break;
        }
      }
      if (!hasChainedAnimations) {
        $clearAnimation(this$static);
        $drawWarningMessage(this$static);
        !this$static.poweredShape && $createPoweredByShape(this$static);
        !!this$static.poweredShape && $draw_2(this$static.poweredShape, this$static.rnd);
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      if (this$static.testMode)
        throw toJs(e);
      $log_0(this$static.rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function $drawAnnotationIndicatorForShape(this$static, graph, innerBnds, innerBndsHorz, hitShape){
  var annotPos, cell, dataObject, graphicElement, hiddenRowsBeforeDisplayed, hvrLabel, legend, linePath, linePos, listView, pos, rect, right, row, row$iterator, scale, shape_0, timeValueStr;
  !innerBnds && (innerBnds = graph.getInnerBounds());
  !innerBndsHorz && (innerBndsHorz = $getInnerBoundsRect($getValueScaleByNumber(castTo(graph, 40), 0)));
  scale = $getCategoryScale(castTo(graph, 40));
  cell = null;
  pos = NaN;
  dataObject = $getDataObjectForShape_0(graph, hitShape);
  if (instanceOf(scale, 56)) {
    instanceOf(dataObject, 18) && (cell = castTo(dataObject, 18).cell);
    instanceOf(dataObject, 87) && (cell = castTo(dataObject, 87).cell);
    !!cell && (pos = $getPositionForTime(castTo(scale, 56), cell.row.timeMS));
  }
   else if (instanceOf(scale, 36)) {
    instanceOf(dataObject, 18) && (cell = castTo(dataObject, 18).cell);
    instanceOf(dataObject, 87) && (cell = castTo(dataObject, 87).cell);
    if (!!cell && graph.data_0.hasHiddenRows) {
      hiddenRowsBeforeDisplayed = 0;
      for (row$iterator = graph.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        if (row.hidden)
          ++hiddenRowsBeforeDisplayed;
        else 
          break;
      }
      pos = castTo(scale, 36).getPositionForValue(cell.row.curIndex - hiddenRowsBeforeDisplayed);
    }
     else 
      !!cell && (pos = castTo(scale, 36).getPositionForValue(cell.row.curIndex));
  }
  if (cell) {
    timeValueStr = $getName(cell.row);
    timeValueStr != null && timeValueStr.indexOf('T') != -1 && neq(cell.row.timeMS, 0) && (timeValueStr = $replaceAll(timeValueStr, 'T', ' '));
    pos = scale.getMinPosition() + pos;
    annotPos = new CFPoint(0, 0);
    castTo(graph, 40).isHorizontal?(annotPos.y_0 = pos):(annotPos.x_0 = pos);
    hvrLabel = new HoverLabel(graph);
    $setSize_0(hvrLabel.primaryFont, graph.getCurFontSize());
    hvrLabel.primaryFont.face_0 = 1;
    if (graph.isHorizontal_0()) {
      right = $getRight(castTo(graph, 40).bnds);
      listView = $getAnnotationView(graph);
      legend = $getLegend(graph);
      !!listView && listView.position == 2 && !!$getBndsOrLastBnds(listView) && (right = $getBndsOrLastBnds($getAnnotationView(graph)).x_0);
      !!legend && legend.position == 2 && !!$getBndsOrLastBnds_0(legend) && (right = $getBndsOrLastBnds_0(legend).x_0);
      rect = $getTextRectForPoint_0(hvrLabel, this$static.rnd, annotPos, timeValueStr, 4);
      $setX(annotPos, right - (rect.width_0 + 10));
      $setX_0(rect, annotPos.x_0);
      rect.y_0 < 5?(rect.y_0 = 5):rect.y_0 + rect.height_0 > this$static.dimension.height_0 - 5 && $setBottom(rect, this$static.dimension.height_0 - 5);
      graphicElement = $getCaptionGraphicElement_0(hvrLabel, this$static.rnd, timeValueStr, annotPos, rect, 4);
      $setFill(castTo($get_2(graphicElement.shapeAry, 0), 6), ($clinit_Annotation() , DEFAULT_HINT_COLOR));
      $setColor_1(castTo($get_2(graphicElement.textAry, 0), 26).font_0, ($clinit_CFColor() , WHITE));
      graph.annotationIndicatorShape = graphicElement;
      graph.annotationIndicatorHitShape = hitShape;
    }
     else {
      rect = $getTextRectForPoint_0(hvrLabel, this$static.rnd, annotPos, timeValueStr, 0);
      rect.y_0 > 0 && (rect.y_0 = -28);
      $setY(annotPos, innerBnds.y_0 + annotPos.y_0 + 5 - rect.y_0);
      rect.x_0 < 7?(rect.x_0 = 7):rect.x_0 + rect.width_0 > this$static.dimension.width_0 - 7 && $setRight(rect, this$static.dimension.width_0 - 7);
      $setY_0(rect, innerBnds.y_0 + 5);
      graphicElement = $getCaptionGraphicElement_0(hvrLabel, this$static.rnd, timeValueStr, annotPos, rect, 0);
      $setFill(castTo($get_2(graphicElement.shapeAry, 0), 6), ($clinit_Annotation() , DEFAULT_HINT_COLOR));
      $setColor_1(castTo($get_2(graphicElement.textAry, 0), 26).font_0, ($clinit_CFColor() , WHITE));
      graph.annotationIndicatorShape = graphicElement;
      graph.annotationIndicatorHitShape = hitShape;
    }
    if (castTo(graph, 40).isHorizontal) {
      linePath = new CFPath_1(innerBndsHorz.x_0, pos, annotPos.x_0 - 10, pos);
      linePos = new CFPoint(innerBndsHorz.x_0, pos);
    }
     else {
      linePath = new CFPath_1(pos, annotPos.y_0 - 5, pos, innerBnds.y_0 + innerBnds.height_0);
      linePos = new CFPoint(pos, innerBnds.y_0 + innerBnds.height_0);
    }
    shape_0 = new CFShape_0(linePath, null, new CFStroke_1('#000000', 1));
    $addShape(graph.annotationIndicatorShape, shape_0);
    $setDataObject(graph.annotationIndicatorShape, cell);
    this$static.redrawNeeded = true;
    return linePos;
  }
  return null;
}

function $drawSelectionThumbForXY(this$static, x_0, y_0){
  var graph, thumbPoint;
  if (this$static.inAddAnnotationMode && !!this$static.rnd) {
    graph = $getGraphComponent(this$static);
    if (instanceOf(graph, 40)) {
      thumbPoint = new CFPoint(x_0, y_0);
      graph.isHorizontal_0()?$setX(thumbPoint, graph.bnds.x_0):$setY(thumbPoint, $getBottom(graph.bnds));
      $scale_2(thumbPoint, this$static.scaleFactor, 0, 0);
      graph.isHorizontal_0();
    }
  }
}

function $drawWarningMessage(this$static){
  var textInfo, textItem, textItem$array, textItem$index, textItem$max;
  if (this$static.warningShape)
    $draw_2(this$static.warningShape, this$static.rnd);
  else if (this$static.warningMessage != null) {
    textInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(this$static.rnd, this$static.warningMessage, this$static.warningFont, this$static.dimension.width_0 - this$static.warningMessagePadding, -1, -1));
    for (textItem$array = $getCFTextItemsForWrappedLines(textInfo, this$static.rnd, new CFRect(this$static.warningMessagePadding, 0, this$static.dimension.width_0 - this$static.warningMessagePadding, textInfo.textDimension.height_0), this$static.warningFont, 0, 0) , textItem$index = 0 , textItem$max = textItem$array.length; textItem$index < textItem$max; ++textItem$index) {
      textItem = textItem$array[textItem$index];
      $draw_7(textItem, this$static.rnd);
    }
  }
  !!this$static.goalShape && $draw_2(this$static.goalShape, this$static.rnd);
}

function $ensureChartPicker(this$static){
  var dataGrid, graph, map_0, supportedTypes;
  $removeGraphPickerComponent(this$static);
  this$static.chartPickerSavedAnimationState = this$static.animationsEnabled;
  graph = $getGraphComponent(this$static);
  if (graph) {
    dataGrid = graph.data_0;
    if (dataGrid.numVisibleRows > 0 && dataGrid.numVisibleCols > 0) {
      $usingCardBus(this$static) && this$static.lastCardBusApplyFilterMessage != null && this$static.lastCardBusApplyFilterMessage.length > 0 && $addChartOption(graph, 'show_as_filtered', this$static.lastCardBusApplyFilterMessage);
      this$static.animationsEnabled = true;
      !!$getLegend(graph) && (this$static.mainGraphLegendVisible = true);
      supportedTypes = getPriorityListOfSupportedGraphTypes(graph, this$static.savedMapForChartPicker);
      if (supportedTypes.array.length > 0) {
        $resetDataForTypeChange(graph);
        dataGrid = graph.data_0;
        $handleRowFiltersHiddenSeries(graph, dataGrid);
        $buildAndPopulateChartPicker(this$static, supportedTypes, dataGrid, graph);
      }
    }
  }
   else if ($getMapComponent(this$static)) {
    map_0 = $getMapComponent(this$static);
    this$static.savedMapForChartPicker = map_0;
    dataGrid = map_0.data_0;
    if (dataGrid.numVisibleRows > 0 && dataGrid.numVisibleCols > 0) {
      this$static.animationsEnabled = true;
      supportedTypes = getPriorityListOfSupportedGraphTypesForMapData(dataGrid);
      supportedTypes.array.length > 0 && $buildAndPopulateChartPicker(this$static, supportedTypes, dataGrid, null);
    }
  }
  if (this$static.graphPickerPanel)
    return true;
  return false;
}

function $formatAllComponents(this$static){
  var component, e, i, numComps;
  $resizeComponentsForWarningAndGoalMessages(this$static, this$static.dimension.width_0, true);
  try {
    numComps = this$static.compAry.array.length;
    for (i = 0; i < numComps; i++) {
      component = castTo($get_2(this$static.compAry, i), 23);
      if (component.getNeedsFormat()) {
        instanceOf(component, 85) && $setChart(castTo(component, 85), this$static);
        component.format_0(this$static.rnd);
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      if (this$static.testMode)
        throw toJs(e);
      $log_0(this$static.rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  this$static.timeToCreateNeedsLogged && $logCreationTime(this$static);
}

function $formatNumber(this$static, theValue){
  return $formatNumber_1(this$static.numberFormatter, theValue);
}

function $freeResources(this$static){
  $reset(this$static);
  !!this$static.rnd && (this$static.rnd.renderer = null , undefined);
  this$static.popupShapes = null;
  this$static.activeHoverShapes = null;
}

function $getAnimationDuration(this$static){
  var animationLength, comp, comp$iterator, endTime;
  animationLength = 0;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    endTime = comp.getAnimationDuration();
    compare_22(endTime, animationLength) > 0 && (animationLength = endTime);
  }
  return animationLength;
}

function $getComponentByName(this$static, name_0){
  var comp, comp$iterator;
  if (name_0 != null) {
    for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      if ($equals_2(name_0, comp.name_0)) {
        !comp.rnd && !!this$static.rnd && (comp.rnd = this$static.rnd);
        return comp;
      }
    }
  }
  return null;
}

function $getComponentUnderPosition(this$static, x_0, y_0){
  var comp, i;
  if (this$static.compAry.array.length > 0) {
    for (i = this$static.compAry.array.length - 1; i >= 0; i--) {
      comp = castTo($get_2(this$static.compAry, i), 23);
      if (!!this$static.rnd && !!comp && !!comp.bnds) {
        if ($pointInPath_1(this$static.rnd, x_0, y_0, $getPath_0(comp.bnds)))
          return comp;
      }
    }
  }
  return null;
}

function $getCompositeFilters(this$static){
  var comp, comp$iterator, filters;
  filters = new ArrayList;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    !!comp.getData() && comp.getCompositeFilters(filters);
  }
  return filters;
}

function $getCurrentChartState(this$static){
  var chartType, graph, map_0, options, sb, options_0;
  chartType = null;
  options = null;
  graph = $getGraphComponent(this$static);
  if (graph) {
    chartType = getBadgeNameFromComponent(graph);
    options = $getOptions(graph);
  }
   else {
    map_0 = $getMapComponent(this$static);
    !!map_0 && (options = (options_0 = new ArrayList , $getChartOptionAsString(map_0, 'map_zoom') != null && $add_1(options_0, '"map_zoom": "' + $getChartOptionAsString(map_0, 'map_zoom') + '"') , $getChartOptionAsString(map_0, 'map_pan_x') != null && $add_1(options_0, '"map_pan_x": "' + $getChartOptionAsString(map_0, 'map_pan_x') + '"') , $getChartOptionAsString(map_0, 'map_pan_y') != null && $add_1(options_0, '"map_pan_y": "' + $getChartOptionAsString(map_0, 'map_pan_y') + '"') , $getChartOptionAsString(map_0, 'show_cities') != null && $add_1(options_0, '"show_cities": "' + $getChartOptionAsString(map_0, 'show_cities') + '"') , $usingCardBus(map_0.chart) && $getChartOptionAsString(map_0, 'row_show_as_unfiltered') != null && $add_1(options_0, '"row_show_as_unfiltered": "' + jsonStringify($getChartOptionAsString(map_0, 'row_show_as_unfiltered')) + '"') , flattenOptions(options_0)));
  }
  sb = new StringBuilder_1('{');
  if (chartType != null) {
    sb.string += '"chartType":"';
    sb.string += '' + chartType;
    sb.string += '",';
  }
  if (options != null) {
    sb.string += '"overrides":{';
    sb.string += '' + options;
    sb.string += '},';
  }
  $clinit_StrUtil();
  $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
  sb.string += '}';
  return sb.string;
}

function $getCurrentFilterState(this$static){
  var comp, comp$iterator, dataFilters, dataGrid, entry, filter, name_0, name$iterator, outerIter, sb;
  sb = new StringBuilder_1('{');
  dataFilters = new HashMap;
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    !!comp.getData() && $getStringValue(dataFilters, comp.getData().name_0) == null && $hasDynamicFilters(comp.getData()) && $putStringValue(dataFilters, comp.getData().name_0, comp.getData());
  }
  if (dataFilters.hashCodeMap.size_0 + dataFilters.stringMap.size_0 > 0) {
    sb.string += '"datasources": {';
    for (name$iterator = (outerIter = (new AbstractMap$1(dataFilters)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); name$iterator.val$outerIter2.hasNext_0();) {
      name_0 = (entry = castTo(name$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      sb.string += '"';
      $append_3(sb, jsonStringify(name_0));
      sb.string += '":{';
      dataGrid = castTo(name_0 == null?getEntryValueOrNull($getEntry(dataFilters.hashCodeMap, null)):$get_3(dataFilters.stringMap, name_0), 61);
      filter = $getDynamicRowFilter(dataGrid, true);
      if (filter != null) {
        sb.string += '"filter":';
        sb.string += '' + filter;
      }
      sb.string += '},';
    }
    $clinit_StrUtil();
    $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
    sb.string += '},';
  }
  $clinit_StrUtil();
  $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
  sb.string += '}';
  return sb.string;
}

function $getDataObjectForGE(ge, comp){
  var dataObj, dataObjStr, tmpDataObj;
  dataObj = ge.dataObject;
  if (instanceOfString(ge.dataObject)) {
    dataObjStr = castToString(ge.dataObject);
    tmpDataObj = $getDataObjectForString(comp, dataObjStr);
    if (tmpDataObj != null)
      return tmpDataObj;
  }
  return dataObj;
}

function $getDataObjectForShape(shape_0, comp){
  var dataObj, dataObjStr, tmpDataObj;
  dataObj = shape_0.dataObject;
  if (instanceOfString(shape_0.dataObject)) {
    dataObjStr = castToString(shape_0.dataObject);
    tmpDataObj = $getDataObjectForString(comp, dataObjStr);
    if (tmpDataObj != null)
      return tmpDataObj;
  }
  return dataObj;
}

function $getDataObjectForString(comp, dataObjStr){
  var drillObjs, drillStr, drillStr$index, drillStr$max, drillStrs;
  if ($equals_2(dataObjStr.substr(0, 5), 'list:')) {
    drillStrs = $split(dataObjStr.substr(5, dataObjStr.length - 5), '\\|', 0);
    if (drillStrs.length > 0) {
      drillObjs = new ArrayList;
      for (drillStr$index = 0 , drillStr$max = drillStrs.length; drillStr$index < drillStr$max; ++drillStr$index) {
        drillStr = drillStrs[drillStr$index];
        $add_1(drillObjs, $getSingleDataObjectForShape(drillStr, comp));
      }
      return drillObjs;
    }
  }
   else if ($equals_2(dataObjStr.substr(0, 4), 'obj:')) {
    return $getSingleDataObjectForShape(dataObjStr, comp);
  }
  return null;
}

function $getEasingTypeForGraph(graphType, graph){
  return graphType == 8 || graphType == 9 || graph.typeAttributes.isRadial?'bounceOut':graphType == 17?'bounceOut':'circleInOut';
}

function $getGraphComponent(this$static){
  var comp;
  comp = $getComponentByName(this$static, 'graph');
  if (!!comp && instanceOf(comp, 43))
    return castTo(comp, 43);
  return null;
}

function $getMapComponent(this$static){
  var comp;
  comp = $getComponentByName(this$static, 'map');
  if (!!comp && instanceOf(comp, 85))
    return castTo(comp, 85);
  return null;
}

function $getNearestShapeUnderPosition(this$static, x_0, y_0, graph, innerBnds, isHorizontal){
  var shape_0;
  if ($pointInPath_1(this$static.rnd, x_0, y_0, $getPath_0(graph.bnds))) {
    shape_0 = $getNearestShapeUnderPoint(graph, x_0, y_0, this$static.rnd, innerBnds, isHorizontal);
    if (shape_0)
      return shape_0;
  }
  return null;
}

function $getSeriesCount(this$static, componentName){
  var comp;
  (componentName == null || componentName.length == 0) && (componentName = 'graph');
  comp = $getComponentByName(this$static, componentName);
  if (!!comp && !!comp.getData()) {
    if (comp.getData().originalDataType != null && $equals_2(comp.getData().originalDataType, 'item-value')) {
      if (instanceOf(comp, 43)) {
        if ($isLineOnly(castTo(comp, 43)) || $isBarOnly(castTo(comp, 43)))
          return $getNumCols(comp.getData());
      }
      return $getNumRows(comp.getData());
    }
    return $getNumCols(comp.getData());
  }
  return 0;
}

function $getSeriesNames(this$static){
  var graph;
  graph = $getGraphComponent(this$static);
  if (graph)
    return $getSeriesNames_1(graph);
  return null;
}

function $getShapeUnderPoint(this$static, x_0, y_0){
  var graph, shape_0;
  if (this$static.inAddAnnotationMode) {
    graph = $getGraphComponent(this$static);
    if (!!graph && !!graph.annotationIndicatorShape) {
      return castTo($get_2(graph.annotationIndicatorShape.shapeAry, 0), 6);
    }
  }
   else {
    shape_0 = $getShapeUnderPosition(this$static, round_int(x_0 / this$static.scaleFactor), round_int(y_0 / this$static.scaleFactor));
    !!shape_0 && shape_0.drillFilter != null && !!shape_0.comp && shape_0.comp.drillFilter == null && $setDrillFilter(shape_0.comp, shape_0.drillFilter);
    return shape_0;
  }
  return null;
}

function $getShapeUnderPosition(this$static, x_0, y_0){
  var comp, i, shape_0, shape$iterator;
  if (this$static.compAry.array.length > 0) {
    for (i = this$static.compAry.array.length - 1; i >= 0; i--) {
      comp = castTo($get_2(this$static.compAry, i), 23);
      if (!!this$static.rnd && !!comp && !!comp.getHitBounds()) {
        if ($containsPoint(comp.getHitBounds(), x_0, y_0)) {
          shape_0 = comp.getShapeUnderPoint(x_0, y_0, this$static.rnd);
          if (shape_0)
            return shape_0;
        }
      }
    }
  }
  if (this$static.warningShape) {
    for (shape$iterator = new ArrayList$1(this$static.warningShape.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
      shape_0 = castTo($next_3(shape$iterator), 6);
      if ($pointInPath_0(shape_0, x_0, y_0, this$static.rnd) && !!shape_0.comp)
        return shape_0;
    }
  }
  return null;
}

function $getSingleDataObjectForShape(dataObjStr, comp){
  dataObjStr = dataObjStr.substr(4, dataObjStr.length - 4);
  if ($equals_2(dataObjStr.substr(0, 6), 'colrow') && instanceOf(comp, 63))
    return $getColRowInfoForHvrDataStr(castTo(comp, 63), dataObjStr);
  else if ($equals_2(dataObjStr.substr(0, 5), 'scale') && instanceOf(comp, 40))
    return $getScaleForHvrDataStr(castTo(comp, 40), dataObjStr);
  else if ($equals_2(dataObjStr.substr(0, 12), 'srsShapeInfo') && instanceOf(comp, 43))
    return $getSrsShapeInfoForHvrDataStr(castTo(comp, 43), dataObjStr);
  else if ($equals_2(dataObjStr.substr(0, 10), 'xyscalerow') && instanceOf(comp, 63))
    return $getColRowInfoForXYScaleHvrDataStr((castTo(comp, 63) , dataObjStr));
  return null;
}

function $growGraph(this$static){
  var graph, map_0, newBounds, typeAttrs;
  this$static.warningMessage = null;
  this$static.goalShape = null;
  graph = $getGraphComponent(this$static);
  if (graph) {
    this$static.mainGraphLegendVisible && !!$getLegend(graph) && ($getLegend(graph).isHidden = false , undefined);
    typeAttrs = graph.typeAttributes;
    newBounds = new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0);
    graph.setBounds(newBounds);
    $resetDataForTypeChange(graph);
    graph.resetForSizeChange();
    graph.removeDependentCompsFromCompArray();
    $addLegendsOrSubComponents(graph, this$static);
    $addDependentCompsToCompArray(graph);
    $usingCardBus(this$static) && this$static.lastCardBusApplyFilterMessage != null && this$static.lastCardBusApplyFilterMessage.length > 0 && $addChartOption(graph, 'show_as_filtered', this$static.lastCardBusApplyFilterMessage);
    graph.setNeedsFormat(true);
    changeToGraphType(graph, graph.graphType, typeAttrs, false, false);
    graph.setData(graph.data_0);
    !graph.animInfo && (graph.animInfo = new AnimInfo(100, 400, 'Transition', 'circleInOut'));
    $setAnimateDrawNeeded(this$static);
  }
   else if ($getMapComponent(this$static)) {
    map_0 = $getMapComponent(this$static);
    newBounds = new CFRect(0, 0, this$static.dimension.width_0, this$static.dimension.height_0);
    $resetForSizeChange(map_0);
    map_0.setBounds(newBounds);
    map_0.rangesApplied = false;
    map_0.needsFormat = true;
  }
}

function $handleClick(this$static, shape_0){
  var needsRepaint;
  needsRepaint = false;
  !!shape_0 && (this$static.inAddAnnotationMode?(needsRepaint = $handleClickInAddAnnotationMode(this$static)):(needsRepaint = $handleClickInComponent(this$static, shape_0)));
  return needsRepaint;
}

function $handleClickInAddAnnotationMode(this$static){
  var cell, dataPoint, graph;
  graph = $getGraphComponent(this$static);
  if (graph) {
    if (!!graph.annotationIndicatorShape && instanceOf(graph.annotationIndicatorShape.dataObject, 16)) {
      cell = castTo(graph.annotationIndicatorShape.dataObject, 16);
      if (cell.row) {
        dataPoint = getAnnotationDataPoint(graph.data_0, cell);
        $createNewAnnotation_0(this$static.rnd, dataPoint);
      }
      graph.annotationIndicatorShape = null;
      graph.annotationIndicatorHitShape = null;
    }
  }
  this$static.inAddAnnotationMode = false;
  return true;
}

function $handleClickInComponent(this$static, shape_0){
  var comp, dataObj, needsRepaint;
  comp = shape_0.comp;
  dataObj = shape_0.dataObject;
  needsRepaint = false;
  if (!!comp && (dataObj != null || comp.drillFilter != null)) {
    $hideHoverText(this$static.rnd.renderer);
    needsRepaint = comp.handleClick(shape_0);
    needsRepaint = $isCloseGraphPicker(this$static, needsRepaint, comp);
    comp.drillFilter != null && comp.drillFilter.length > 0 && !$equals_2('none', comp.drillFilter) && !$equals_2('null', comp.drillFilter) && (needsRepaint = $performDrill_0(this$static.rnd, comp.drillFilter) || needsRepaint);
    if ($usingCardBus(this$static) && $isInternalCloseZoom(shape_0.drillFilter)) {
      $sendCardBusApplyFiltersMessage(this$static, 'none');
      needsRepaint = true;
    }
    if (!$isInternalFilter(shape_0.drillFilter) && comp.drillFilter != null) {
      $sendCardBusApplyFiltersMessage(this$static, comp.drillFilter);
      needsRepaint = true;
    }
  }
  return needsRepaint;
}

function $handleDrag(this$static, startPoint, curPoint){
  var comp, x_0, y_0;
  x_0 = startPoint.x_0 / this$static.scaleFactor;
  y_0 = startPoint.y_0 / this$static.scaleFactor;
  comp = $getComponentUnderPosition(this$static, round_int(x_0), round_int(y_0));
  !!comp && comp.supportsDrag_0() && $setRedrawNeeded(this$static, comp.handleDrag_0(x_0, y_0, curPoint.x_0 / this$static.scaleFactor, curPoint.y_0 / this$static.scaleFactor));
  return this$static.redrawNeeded;
}

function $handleDragEnd(this$static, startPoint, curPoint){
  var comp, comp2, comp2$iterator, x_0, y_0;
  x_0 = startPoint.x_0 / this$static.scaleFactor;
  y_0 = startPoint.y_0 / this$static.scaleFactor;
  comp = $getComponentUnderPosition(this$static, round_int(x_0), round_int(y_0));
  if (!!comp && comp.supportsDrag_0()) {
    if (comp.handleDragEnd_0(x_0, y_0, curPoint.x_0 / this$static.scaleFactor, curPoint.y_0 / this$static.scaleFactor)) {
      if (instanceOf(comp, 43)) {
        comp.setAnimationData(0, 500, 'Transition', 'circleOut');
        $setAnimateDrawNeeded(this$static);
      }
    }
  }
  for (comp2$iterator = new ArrayList$1(this$static.compAry); comp2$iterator.i < comp2$iterator.this$01.array.length;) {
    comp2 = castTo($next_3(comp2$iterator), 23);
    comp2 != comp && comp2.cancelDrag_0() && (this$static.redrawNeeded = true);
  }
  $sendCardBusApplyFiltersMessage(this$static, null);
  return this$static.animateDrawNeeded;
}

function $handleMouseWheelMoved(this$static, zoomPoint, notches){
  var comp, needsRepaint, unScaledZoomPoint;
  needsRepaint = false;
  comp = $getComponentUnderPosition(this$static, round_int(zoomPoint.x_0 / this$static.scaleFactor), round_int(zoomPoint.y_0 / this$static.scaleFactor));
  if (!!comp && comp.supportsZoom()) {
    unScaledZoomPoint = new CFPoint(zoomPoint.x_0 / this$static.scaleFactor, zoomPoint.y_0 / this$static.scaleFactor);
    notches < 0?(needsRepaint = comp.zoomIn(unScaledZoomPoint, notches)):(needsRepaint = comp.zoomOut(unScaledZoomPoint, notches));
  }
  return needsRepaint;
}

function $hideChartPicker(this$static){
  var e;
  if (!!this$static.graphPickerPanel && this$static.graphPickerPanelOpen) {
    try {
      this$static.graphPickerPanelOpen = false;
      $growGraph(this$static);
      $replaceAnimationData(this$static.graphPickerPanel, 0, 500, 'Transition', 'circleOut');
      $setActiveState(this$static.graphPickerPanel, false);
      $setAnimateDrawNeeded(this$static);
      $chartPickerClosed(this$static.rnd.renderer);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 38)) {
        e = $e0;
        if (this$static.testMode)
          throw toJs(e);
        !!this$static.rnd && $log_0(this$static.rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
}

function $highlightUsingFilters(this$static, filtersStr){
  var comp, comp$iterator, filters, result;
  result = false;
  filters = getHighlightFilters(this$static.rnd, filtersStr);
  $clinit_System();
  for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    result = result | comp.highlightUsingFilters(filters);
  }
  return result;
}

function $isAnimateDrawNeeded(this$static){
  return this$static.animationsEnabled && this$static.animateDrawNeeded;
}

function $isChartPickerAvailable(this$static){
  var graph, supportedTypes;
  graph = $getGraphComponent(this$static);
  if (graph) {
    if (!isChartBigEnough(this$static.dimension))
      return false;
    supportedTypes = getPriorityListOfSupportedGraphTypes(graph, this$static.savedMapForChartPicker);
    if (supportedTypes.array.length > 1)
      return true;
  }
   else if (!!$getMapComponent(this$static) && !this$static.currentChartIsBridgeChart) {
    if (!isChartBigEnough(this$static.dimension))
      return false;
    supportedTypes = getPriorityListOfSupportedGraphTypesForMapData($getMapComponent(this$static).data_0);
    if (supportedTypes.array.length > 1)
      return true;
  }
  return false;
}

function $isCloseGraphPicker(this$static, needsRepaint, comp){
  if (!needsRepaint && !!this$static.graphPickerPanel && comp.drillFilter != null && $startsWith(comp.drillFilter, '{"internal": "close graph picker"}')) {
    $hideChartPicker(this$static);
    needsRepaint = true;
  }
  return needsRepaint;
}

function $isInternalCloseZoom(filter){
  if ($isInternalFilter(filter) && filter.indexOf('close zoom') > 0)
    return true;
  return false;
}

function $isInternalFilter(filter){
  var index_0;
  if (filter != null) {
    index_0 = filter.indexOf('internal');
    if (index_0 >= 0 && index_0 < 6)
      return true;
  }
  return false;
}

function $limitHeight(height){
  height > $intern_3 && (height = $intern_3);
  height < 1 && (height = 1);
  return height;
}

function $limitWidth(width_0){
  width_0 > $intern_3 && (width_0 = $intern_3);
  width_0 < 1 && (width_0 = 1);
  return width_0;
}

function $logChangeChartType(this$static, originalBadgeName, newBadgeName){
  var currentState, list, result, result0;
  list = new ArrayList;
  $add_1(list, ($clinit_StrUtil() , result0 = '"' + jsonStringify('previous') + '"' + ':' + ('"' + jsonStringify(originalBadgeName) + '"') , result0));
  $add_1(list, (result = '"' + jsonStringify('card_type') + '"' + ':' + ('"' + jsonStringify(newBadgeName) + '"') , result));
  this$static.cardURN != null && $add_1(list, getJsonNameValuePair_1('card_id', this$static.cardURN));
  $logMetric_0(this$static.rnd, 'chart_change_type', getJsonNameValuePairs(list));
  currentState = $getCurrentChartState(this$static);
  $chartStateChanged_1(this$static.rnd, currentState);
}

function $logChangeSort(this$static){
  var currentState;
  $logMetric_0(this$static.rnd, 'chart_sort', '{}');
  currentState = $getCurrentChartState(this$static);
  $chartStateChanged_1(this$static.rnd, currentState);
}

function $logCreationTime(this$static){
  var data_0, graph, list, ticks;
  ticks = ($clinit_System() , sub_1(fromDouble_0(now_2()), this$static.chartCreationStartTicks));
  list = new ArrayList;
  $add_1(list, getJsonNameValuePair('duration', toInt_0(ticks)));
  graph = $getGraphComponent(this$static);
  if (!!graph && !!graph.data_0) {
    $add_1(list, getJsonNameValuePair_1('card_type', getBadgeNameFromComponent(graph)));
    data_0 = graph.data_0;
    $add_1(list, getJsonNameValuePair('row_count', $getNumRows(data_0)));
    $add_1(list, getJsonNameValuePair('column_count', $getNumCols(data_0)));
  }
  this$static.cardURN != null && $add_1(list, getJsonNameValuePair_1('card_id', this$static.cardURN));
  this$static.timeToCreateNeedsLogged = false;
  $logMetric_0(this$static.rnd, 'chart_generation', getJsonNameValuePairs(list));
}

function $logSeriesState(this$static, value_0){
  var currentState;
  value_0?$logMetric_0(this$static.rnd, 'chart_hide_series', '{}'):$logMetric_0(this$static.rnd, 'chart_show_series', '{}');
  currentState = $getCurrentChartState(this$static);
  $chartStateChanged_1(this$static.rnd, currentState);
}

function $logZoomState(this$static, value_0){
  var currentState;
  value_0?$logMetric_0(this$static.rnd, 'chart_zoom_in', '{}'):$logMetric_0(this$static.rnd, 'chart_cancel_zoom', '{}');
  currentState = $getCurrentChartState(this$static);
  $chartStateChanged_1(this$static.rnd, currentState);
}

function $migrateChartOptions(compDef){
  var graphType, typeAttributes;
  if (compDef.overrides) {
    graphType = getGraphType(compDef);
    if (graphType == 1) {
      typeAttributes = getTypeAttributes(compDef);
      typeAttributes.isCategoryScatter && migrateChartOptions(compDef.overrides);
    }
  }
}

function $removeComponent(this$static, comp){
  var depComp, depComp$iterator, dependantComps, graph;
  if (instanceOf(comp, 43)) {
    graph = castTo(comp, 43);
    dependantComps = graph.dependentComps;
    if (!!dependantComps && dependantComps.array.length > 0) {
      for (depComp$iterator = new ArrayList$1(dependantComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        $remove_3(this$static.compAry, depComp);
      }
    }
  }
  $remove_3(this$static.compAry, comp);
}

function $removeFilter(this$static, jsonFilter){
  var component, component$iterator, filterToRemove, redrawNeeded;
  filterToRemove = getSingleFilter(this$static.rnd, jsonFilter);
  redrawNeeded = false;
  if (!!filterToRemove && $usingCardBus(this$static)) {
    for (component$iterator = new ArrayList$1(this$static.compAry); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      instanceOf(component, 63) && (redrawNeeded = redrawNeeded | castTo(component, 63).removeFilter_1(filterToRemove));
    }
  }
  return redrawNeeded;
}

function $removeGraphPickerComponent(this$static){
  if (!!this$static.graphPickerPanel && !this$static.graphPickerPanelOpen) {
    $remove_3(this$static.compAry, this$static.graphPickerPanel);
    $freeResources_16(this$static.graphPickerPanel, null);
    this$static.graphPickerPanel = null;
    this$static.animationsEnabled = this$static.chartPickerSavedAnimationState;
  }
}

function $reset(this$static){
  var comp, comp$iterator, component, entry, key, key$iterator, keys_0, outerIter;
  if (this$static.compAry.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.compAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      comp.freeResources(null);
    }
    this$static.compAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  if (!!this$static.popupShapes && $size(this$static.popupShapes) > 0) {
    keys_0 = new AbstractMap$1(this$static.popupShapes);
    for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
      component = castTo($get_1(this$static.popupShapes, key), 23);
      !!component && component.freeResources(null);
    }
    this$static.popupShapes = null;
  }
  !!this$static.styleMap && $reset_5(this$static.styleMap);
  !!this$static.savedMapForChartPicker && this$static.savedMapForChartPicker.freeResources(null);
  if (!!this$static.activeHoverShapes && this$static.activeHoverShapes.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.activeHoverShapes); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      comp.freeResources(null);
    }
    this$static.activeHoverShapes = null;
  }
  !!this$static.graphPickerPanel && $freeResources_16(this$static.graphPickerPanel, null);
  this$static.graphPickerPanel = null;
  this$static.numberFormatter = new NumberFormatter;
  this$static.savedMapForChartPicker = null;
  this$static.warningFont = null;
  this$static.warningShape = null;
  this$static.poweredShape = null;
  this$static.cardURN = null;
  this$static.styleMap = null;
  this$static.palette = null;
  this$static.lastShapeWithHover = null;
  this$static.lastShapeWithDrill = null;
  this$static.lastShapeWithAnnotation = null;
  this$static.animationsEnabled = true;
  this$static.lastShapeWithHover = null;
  this$static.lastShapeWithDrill = null;
  this$static.lastShapeWithAnnotation = null;
  this$static.graphPickerPanelOpen = false;
  this$static.chartPickerSavedAnimationState = false;
  this$static.chartHoverData = null;
  this$static.currentChartIsBridgeChart = false;
  this$static.mainGraphLegendVisible = false;
  this$static.popupShapes = new HashMap;
  this$static.activeHoverShapes = new ArrayList;
  this$static.chartHoverData = null;
  this$static.warningMessage = null;
  this$static.goalShape = null;
  this$static.lastCardBusApplyFilterMessage = null;
}

function $resetSize(this$static, width_0, height){
  var annotationViewWasOpen, graph, graphPickerWasOpen, linePoint, map_0, newBounds, oldDataGrid;
  graphPickerWasOpen = this$static.graphPickerPanelOpen;
  annotationViewWasOpen = true;
  graphPickerWasOpen && $hideChartPicker(this$static);
  $resetSizeOnly(this$static, width_0, height);
  graph = $getGraphComponent(this$static);
  if (graph) {
    !graph.typeAttributes.isStacked && !!$getPreviousTypeAttributes(graph) && $getPreviousTypeAttributes(graph).originallyStacked && (graph.typeAttributes.isStacked = true);
    !graph.chart && (graph.chart = this$static);
    !!$getAnnotationView(graph) && (annotationViewWasOpen = $getAnnotationView(graph).isOpen);
    $usingCardBus(this$static) && this$static.lastCardBusApplyFilterMessage != null && this$static.lastCardBusApplyFilterMessage.length > 0 && $addChartOption(graph, 'show_as_filtered', this$static.lastCardBusApplyFilterMessage);
    oldDataGrid = resetGraph(graph, graph.graphType, graph.typeAttributes, true, false);
    graph.setData(oldDataGrid);
    newBounds = new CFRect(0, 0, width_0, height);
    graph.setBounds(newBounds);
    $addLegendsOrSubComponents(graph, this$static);
    $addDependentCompsToCompArray(graph);
    !!$getAnnotationView(graph) && $setIsOpen($getAnnotationView(graph), annotationViewWasOpen);
    graph.setNeedsFormat(true);
    if (this$static.inAddAnnotationMode && !!graph.annotationIndicatorHitShape) {
      graph.format_0(this$static.rnd);
      if ($getDataObjectForShape_0(graph, graph.annotationIndicatorHitShape) != null) {
        linePoint = $drawAnnotationIndicatorForShape(this$static, graph, null, null, graph.annotationIndicatorHitShape);
        $drawSelectionThumbForXY(this$static, round_int(linePoint.x_0), round_int(linePoint.y_0));
      }
       else {
        $drawCenteredAnnotationThumb(graph);
      }
    }
  }
   else {
    map_0 = $getMapComponent(this$static);
    if (!!map_0 && !!map_0.origBounds) {
      newBounds = new CFRect(0, 0, width_0, height);
      $resetForSizeChange(map_0);
      map_0.setBounds(newBounds);
      map_0.rangesApplied = false;
      map_0.needsFormat = true;
    }
  }
  graphPickerWasOpen && $showChartPicker(this$static);
}

function $resetSizeOnly(this$static, width_0, height){
  var graph, newBounds;
  width_0 = $limitWidth(width_0);
  height = $limitHeight(height);
  this$static.dimension = new CFDimension(width_0, height);
  this$static.originalDimension = new CFDimension(width_0, height);
  this$static.poweredShape = null;
  this$static.adjustedForPoweredBy = false;
  graph = $getGraphComponent(this$static);
  if (graph) {
    !!$getLegend(graph) && ($getLegend(graph).isHidden = false , undefined);
    graph.onResize();
    newBounds = new CFRect(0, 0, width_0, height);
    graph.setBounds(newBounds);
    graph.setNeedsFormat(true);
  }
}

function $resetVerticalSizeOnly(this$static){
  !!this$static.originalDimension && (this$static.dimension = new CFDimension(this$static.originalDimension.width_0, this$static.originalDimension.height_0));
}

function $resizeComponentsForWarningAndGoalMessages(this$static, width_0, processPoweredBy){
  var compBounds, component, component$iterator, component$iterator0, component$iterator1, componentCSR, exShape, exclamation, messageDimension, overShape, poweredBuffer, textInfo, triangle, underShape, yAdjust;
  componentCSR = $getGraphComponent(this$static);
  !componentCSR && (componentCSR = $getMapComponent(this$static));
  if (processPoweredBy && this$static.showPoweredBy && !this$static.adjustedForPoweredBy) {
    poweredBuffer = 34;
    this$static.dimension.height_0 <= 300 && (poweredBuffer = 26);
    for (component$iterator0 = new ArrayList$1(this$static.compAry); component$iterator0.i < component$iterator0.this$01.array.length;) {
      component = castTo($next_3(component$iterator0), 23);
      compBounds = component.bnds;
      if (compBounds) {
        $setHeight(compBounds, compBounds.height_0 - poweredBuffer);
        component.setBounds(compBounds);
        component.setNeedsFormat(true);
      }
    }
    this$static.adjustedForPoweredBy = true;
  }
  for (component$iterator1 = new ArrayList$1(this$static.compAry); component$iterator1.i < component$iterator1.this$01.array.length;) {
    component = castTo($next_3(component$iterator1), 23);
    instanceOf(component, 40) && (castTo(component, 40).warningGoalMessageDim = null , undefined);
  }
  if (this$static.warningMessage != null && this$static.warningMessage.length > 0 && (!instanceOf(componentCSR, 43) || !!castTo(componentCSR, 43).handler && castTo(componentCSR, 43).handler.supportsWarning(this$static.warningMessage)) || !!componentCSR && instanceOf(componentCSR, 40) && $hasTopScaleMarkers(castTo(componentCSR, 40))) {
    messageDimension = null;
    if (this$static.warningMessage != null && this$static.warningMessage.length > 0) {
      !this$static.warningFont && (this$static.warningFont = new CFFont_0(null, 11, ($clinit_CFColor() , WARNING_MESSAGE)));
      textInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(this$static.rnd, this$static.warningMessage, this$static.warningFont, width_0 - this$static.warningMessagePadding, -1, -1));
      messageDimension = textInfo.textDimension;
    }
     else {
      messageDimension = new CFDimension(20, 20);
    }
    if (componentCSR) {
      if (componentCSR.treatAsSmall) {
        if (this$static.warningMessage != null) {
          triangle = new CFPath_7('M 2 18 L 4 20 L 18 20 L 20 18 L 12.5 1 L 9.5 1 Z');
          exclamation = new CFPath_7('M 10 5 L 12 5 L 12 13 L 10 13 L 10 5 M 10 15 L 12 15 L 12 18 L 10 18 L 10 15');
          triangle.shouldAntiAlias = true;
          exclamation.shouldAntiAlias = true;
          underShape = new CFShape_0(triangle, new CFFill(this$static.warningTriangleColor), new CFStroke(($clinit_CFColor() , WHITE), 1));
          exShape = new CFShape_0(exclamation, ($clinit_CFFill() , WHITE_0), null);
          overShape = new CFShape_1(new CFRect(0, 0, 20, 20), TRANSPARENT_0, null);
          overShape.comp = componentCSR;
          $setHoverText_8(overShape, this$static.warningMessage);
          this$static.warningShape = new GraphicElement_0(underShape);
          $addShape(this$static.warningShape, exShape);
          $addShape(this$static.warningShape, overShape);
        }
      }
       else {
        for (component$iterator = new ArrayList$1(this$static.compAry); component$iterator.i < component$iterator.this$01.array.length;) {
          component = castTo($next_3(component$iterator), 23);
          instanceOf(component, 40) && $setWarningGoalMessageDim(castTo(component, 40), messageDimension);
          compBounds = component.bnds;
          if (!!compBounds && compBounds.y_0 < messageDimension.height_0) {
            if (compBounds.x_0 < messageDimension.width_0) {
              yAdjust = messageDimension.height_0 - compBounds.y_0;
              $setY_0(compBounds, messageDimension.height_0);
              $setHeight(compBounds, compBounds.height_0 - yAdjust);
              component.setBounds(compBounds);
              component.setNeedsFormat(true);
            }
          }
        }
      }
    }
  }
}

function $selectItemUnderPointAndGetComponent(this$static, x_0, y_0){
  var comp, dataObj, drillFilter, hoverText, lastComp, shape_0;
  x_0 = round_int(x_0 / this$static.scaleFactor);
  y_0 = round_int(y_0 / this$static.scaleFactor);
  if (this$static.inAddAnnotationMode) {
    $drawAddAnnotationIndicator(this$static, x_0, y_0);
    $drawSelectionThumbForXY(this$static, x_0, y_0);
    return null;
  }
  if (this$static.animateDrawNeeded)
    return null;
  if (!!this$static.lastShapeWithDrill && !$pointInPath_0(this$static.lastShapeWithDrill, x_0, y_0, this$static.rnd)) {
    $setCursorToDrillEnabled_0(this$static.rnd, null);
    $sendCardBusHighlightMessage(this$static, null);
    this$static.lastShapeWithDrill = null;
  }
  if (!!this$static.lastShapeWithHover && !$pointInPath_0(this$static.lastShapeWithHover, x_0, y_0, this$static.rnd)) {
    this$static.activeHoverShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    lastComp = this$static.lastShapeWithHover.comp;
    !!lastComp && lastComp.setHoverData(null, this$static.rnd);
    this$static.redrawNeeded = true;
    this$static.lastShapeWithHover = null;
    $hideHoverText(this$static.rnd.renderer);
  }
  if (!!this$static.lastShapeWithAnnotation && !$pointInPath_0(this$static.lastShapeWithAnnotation, x_0, y_0, this$static.rnd)) {
    $setCursorToDrillEnabled_0(this$static.rnd, null);
    $sendCardBusHighlightMessage(this$static, null);
    this$static.lastShapeWithAnnotation = null;
  }
  shape_0 = $getShapeUnderPosition(this$static, x_0, y_0);
  if (!!shape_0 && shape_0 == this$static.lastShapeWithHover) {
    return shape_0.comp;
  }
  if (shape_0) {
    comp = shape_0.comp;
    hoverText = $getHoverTextOrRODatalabel(shape_0);
    if (hoverText != null && $trim(hoverText).length > 0) {
      this$static.lastShapeWithHover = shape_0;
      $showHoverText_0(this$static.rnd, x_0, y_0, hoverText);
    }
    comp.setDrillFilter(shape_0, false);
    drillFilter = comp.drillFilter;
    if (drillFilter != null && drillFilter.length > 0) {
      !!this$static.graphPickerPanel && comp != this$static.graphPickerPanel && this$static.graphPickerPanelOpen && (drillFilter = '{"internal": "close graph picker"}');
      if (this$static.lastShapeWithDrill != shape_0) {
        this$static.lastShapeWithDrill = shape_0;
        $setCursorToDrillEnabled_0(this$static.rnd, drillFilter);
        $sendCardBusHighlightMessage(this$static, drillFilter);
      }
    }
    if (shape_0.dataObject != null && instanceOf(shape_0.dataObject, 42) && castTo(shape_0.dataObject, 42).size_1() > 0 && instanceOf(castTo(shape_0.dataObject, 42).get_1(0), 46)) {
      this$static.lastShapeWithAnnotation = shape_0;
      this$static.redrawNeeded = true;
      $setStroke(shape_0, new CFStroke_1('#FFFFFF', 1));
      $setCursorToDrillEnabled_0(this$static.rnd, '{"internal": "annotation"}');
    }
    this$static.activeHoverShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    dataObj = $getDataObjectForShape(shape_0, comp);
    $setRedrawNeeded(this$static, comp.setHoverData(dataObj, this$static.rnd));
    $showHoverTextIfSet(this$static, comp, shape_0, x_0, y_0);
    return comp;
  }
   else {
    $clearHoverState(this$static);
  }
  return null;
}

function $sendCardBusApplyFiltersMessage(this$static, filter){
  var filters, item_0, item$iterator, sb;
  if ($usingCardBus(this$static)) {
    filters = $getCompositeFilters(this$static);
    if (filters.array.length == 0 && ($equals_2('none', filter) || $equals_2('null', filter))) {
      this$static.lastCardBusApplyFilterMessage = '{"applyfilters":null}';
      $sendCardBusMessage(this$static, this$static.lastCardBusApplyFilterMessage);
      return;
    }
    if (filters.array.length > 0) {
      sb = new StringBuilder_1('[');
      for (item$iterator = new ArrayList$1(filters); item$iterator.i < item$iterator.this$01.array.length;) {
        item_0 = castToString($next_3(item$iterator));
        $append_3((sb.string += '' + item_0 , sb), ',');
      }
      $clinit_StrUtil();
      $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
      sb.string += ']';
      this$static.lastCardBusApplyFilterMessage = '{"applyfilters":' + sb.string + '}';
      $sendCardBusMessage(this$static, this$static.lastCardBusApplyFilterMessage);
    }
     else {
      this$static.lastCardBusApplyFilterMessage = '{"applyfilters":null}';
      $sendCardBusMessage(this$static, this$static.lastCardBusApplyFilterMessage);
    }
  }
}

function $sendCardBusHighlightMessage(this$static, filter){
  if ($usingCardBus(this$static)) {
    if (filter == null || $equals_2('none', filter))
      filter = 'null';
    else if ($isInternalFilter(filter) && !!this$static.lastShapeWithDrill) {
      if (this$static.lastShapeWithDrill.dataObject != null && instanceOf(this$static.lastShapeWithDrill.dataObject, 37))
        filter = $getCardBusHighlightFilter(castTo(this$static.lastShapeWithDrill.dataObject, 37));
      else 
        return;
    }
    $equals_2('{"highlight":' + filter + '}', this$static.lastCardBusMessage) || $cardBusEvent_0(this$static.rnd, '{"highlight":' + filter + '}');
    this$static.lastCardBusMessage = '{"highlight":' + filter + '}';
  }
}

function $sendCardBusMessage(this$static, message){
  message != null && ($equals_2(message, this$static.lastCardBusMessage) || $cardBusEvent_0(this$static.rnd, message));
  this$static.lastCardBusMessage = message;
}

function $setAnimateDrawNeeded(this$static){
  if (this$static.animationsEnabled && !this$static.animateDrawNeeded) {
    this$static.animateDrawNeeded = true;
    this$static.firstAnimationPass = true;
  }
   else 
    this$static.redrawNeeded = true;
}

function $setAnimationsEnabledState(this$static, state){
  !this$static.graphPickerPanel && (this$static.animationsEnabled = state);
}

function $setAnnotationsVisible(this$static, value_0){
  var graph;
  this$static.hideAnnotations = !value_0;
  graph = castTo($getComponentByName(this$static, 'graph'), 43);
  if (graph) {
    graph.setNeedsFormat(true);
    graph.frontGeAry.clear_0();
    !this$static.hideAnnotations && instanceOf(graph, 40) && !!graph.handler && $addAnnotationListIfNeeded(castTo(graph.handler, 64), this$static);
    !graph.animInfo && (graph.animInfo = new AnimInfo(0, 500, 'Transition', 'linear'));
  }
  $setAnimateDrawNeeded(this$static);
}

function $setChartHoverData(this$static, hoverData){
  this$static.chartHoverData = hoverData;
}

function $setEditAnnotationMode(this$static, inAddState){
  var component, component$iterator, repaintNeeded;
  repaintNeeded = false;
  if (this$static.hideAnnotations)
    return false;
  if (this$static.inAddAnnotationMode != inAddState) {
    this$static.useExtendedThumbRegion = false;
    this$static.inAddAnnotationMode = inAddState;
    for (component$iterator = new ArrayList$1(this$static.compAry); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      component.setEditAnnotationMode_0(inAddState);
      component.setNeedsFormat(true);
      this$static.inAddAnnotationMode && instanceOf(component, 43) && (castTo(component, 43).curDisplayedAnnotation = null);
    }
    repaintNeeded = true;
  }
  $cancelDrag(this$static);
  return repaintNeeded;
}

function $setGoalShape(this$static, shape_0){
  this$static.goalShape = shape_0;
}

function $setLocale(this$static, theLocale){
  this$static.locale = theLocale;
  this$static.numberFormatter = new NumberFormatter_1(this$static.locale);
}

function $setNativeRenderer(this$static, renderer){
  !this$static.rnd?(this$static.rnd = new IRendererScale(renderer)):$setRenderer_0(this$static.rnd, renderer);
  $setScaleFactor_0(this$static.rnd, this$static.scaleFactor);
}

function $setRedrawNeeded(this$static, redraw){
  redraw && (this$static.redrawNeeded = true);
}

function $setScaleFactor(this$static, theScaleFactor){
  theScaleFactor > 0 && (this$static.scaleFactor = theScaleFactor);
  this$static.scaleFactor > 20 && (this$static.scaleFactor = 20);
  this$static.scaleFactor < 0.05 && (this$static.scaleFactor = 0.05);
  !!this$static.rnd && $setScaleFactor_0(this$static.rnd, this$static.scaleFactor);
}

function $setVerticalSizeOnly(this$static, height){
  var graph, newBounds;
  !this$static.originalDimension && (this$static.originalDimension = new CFDimension(this$static.dimension.width_0, this$static.dimension.height_0));
  height = $limitHeight(height);
  this$static.dimension = new CFDimension(this$static.dimension.width_0, height);
  graph = $getGraphComponent(this$static);
  if (graph) {
    !!$getLegend(graph) && ($getLegend(graph).isHidden = false , undefined);
    newBounds = new CFRect(0, graph.bnds.y_0, graph.bnds.width_0, height - graph.bnds.y_0);
    graph.setBounds(newBounds);
    graph.setNeedsFormat(true);
  }
}

function $setWarningMessage(this$static, message){
  this$static.warningMessage = message;
  this$static.warningShape = null;
  if (this$static.disableDueToSize) {
    this$static.warningMessage = getString('WARN_HIGHTLIGHTING_DISABLED', this$static.locale);
    this$static.warningFont = new CFFont_0(null, 11, ($clinit_CFColor() , GRAY));
    this$static.warningTriangleColor = GRAY;
  }
  $resizeComponentsForWarningAndGoalMessages(this$static, this$static.dimension.width_0, false);
}

function $showChartPicker(this$static){
  var e, graph, ticks, list;
  if (this$static.dimension.width_0 < 100 || this$static.dimension.height_0 < 100)
    return;
  this$static.chartCreationStartTicks = ($clinit_System() , fromDouble_0(now_2()));
  try {
    if ($ensureChartPicker(this$static)) {
      graph = $getGraphComponent(this$static);
      !!graph && !!$getLegend(graph) && ($getLegend(graph).isHidden = true , undefined);
      $shrinkGraph(this$static);
      $replaceAnimationData(this$static.graphPickerPanel, 100, 400, 'Transition', 'circleOut');
      $setActiveState(this$static.graphPickerPanel, true);
      this$static.graphPickerPanelOpen = true;
      $setAnimateDrawNeeded(this$static);
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      if (this$static.testMode)
        throw toJs(e);
      !!this$static.rnd && $log_0(this$static.rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  ticks = sub_1(fromDouble_0(now_2()), this$static.chartCreationStartTicks);
  list = new ArrayList;
  $add_1(list, getJsonNameValuePair('duration', toInt_0(ticks)));
  this$static.cardURN != null && $add_1(list, getJsonNameValuePair_1('card_id', this$static.cardURN));
  $logMetric_0(this$static.rnd, 'chart_picker_opened', getJsonNameValuePairs(list));
}

function $showHoverTextIfSet(this$static, comp, shape_0, x_0, y_0){
  var hoverPoint, hoverText;
  if (comp) {
    hoverText = null;
    comp.allowHoverTextForPoint(x_0, y_0) && (hoverText = comp.getHoverText());
    hoverText == null && !!shape_0 && (hoverText = shape_0.hoverText);
    hoverPoint = comp.getHoverPoint();
    hoverText != null && hoverText.length > 0?hoverPoint?$showHoverText_0(this$static.rnd, round_int(hoverPoint.x_0), round_int(hoverPoint.y_0), hoverText):$showHoverText_0(this$static.rnd, x_0, y_0, hoverText):$hideHoverText(this$static.rnd.renderer);
  }
}

function $shrinkGraph(this$static){
  var graph, map_0, newBounds, typeAttrs;
  graph = $getGraphComponent(this$static);
  if (graph) {
    typeAttrs = graph.typeAttributes;
    newBounds = $getRemainingBounds(this$static.graphPickerPanel);
    graph.setBounds(newBounds);
    $resetDataForTypeChange(graph);
    graph.resetForSizeChange();
    graph.removeDependentCompsFromCompArray();
    $usingCardBus(this$static) && this$static.lastCardBusApplyFilterMessage != null && this$static.lastCardBusApplyFilterMessage.length > 0 && $addChartOption(graph, 'show_as_filtered', this$static.lastCardBusApplyFilterMessage);
    graph.setNeedsFormat(true);
    changeToGraphType(graph, graph.graphType, typeAttrs, false, false);
    graph.setData(graph.data_0);
    !graph.animInfo && (graph.animInfo = new AnimInfo(0, 500, 'Transition', 'circleInOut'));
    $setAnimateDrawNeeded(this$static);
  }
   else if ($getMapComponent(this$static)) {
    map_0 = $getMapComponent(this$static);
    newBounds = $getRemainingBounds(this$static.graphPickerPanel);
    $resetForSizeChange(map_0);
    map_0.setBounds(newBounds);
    map_0.rangesApplied = false;
    map_0.needsFormat = true;
  }
}

function $supportsAnnotations(this$static){
  var data_0, graph;
  graph = $getGraphComponent(this$static);
  if (graph) {
    data_0 = graph.data_0;
    if ((!!data_0 && data_0.dateGrain != null && $trim(data_0.dateGrain).length > 0 || graph.hasTimeScale() || !!graph.data_0 && $hasTimeData(graph.data_0)) && $graphTypeSupportsAnnotations(graph))
      return true;
  }
  return false;
}

function $usingCardBus(this$static){
  if (!!this$static.rnd && !this$static.disableUsingCardBus)
    return !!this$static.rnd.renderer.cardbus;
  return false;
}

function $warnNotAllDataShown(this$static){
  $setWarningMessage(this$static, getString('WARN_NOT_ALL_DATA', this$static.locale));
}

function Chart(width_0, height, theScaleFactor){
  this.compAry = new ArrayList;
  this.styleMap = new HashMap;
  this.numberFormatter = new NumberFormatter;
  this.popupShapes = new HashMap;
  this.activeHoverShapes = new ArrayList;
  this.warningTriangleColor = ($clinit_CFColor() , WARNING_MESSAGE_TRANSPARENT);
  $setScaleFactor(this, theScaleFactor);
  this.dimension = new CFDimension(round_int($limitWidth(width_0 / this.scaleFactor + 0.5)), round_int($limitHeight(height / this.scaleFactor + 0.5)));
}

defineClass(280, 1, {}, Chart);
_.adjustedForPoweredBy = false;
_.animateDrawNeeded = false;
_.animationsEnabled = true;
_.chartCreationStartTicks = 0;
_.chartPickerSavedAnimationState = false;
_.currentChartIsBridgeChart = false;
_.disableDueToSize = false;
_.disableUsingCardBus = false;
_.drawFrameRect = false;
_.editMode = false;
_.firstAnimationPass = false;
_.graphPickerPanelOpen = false;
_.hideAnnotations = false;
_.inAddAnnotationMode = false;
_.includeJsonMap = false;
_.isPageLayout = false;
_.locale = 'en-US';
_.mainGraphLegendVisible = false;
_.mapZoomEnabled = false;
_.mobile = false;
_.redrawNeeded = false;
_.scaleFactor = 1;
_.showPoweredBy = false;
_.sizzle = false;
_.staticImage = false;
_.testMode = false;
_.timeToCreateNeedsLogged = false;
_.useExtendedThumbRegion = false;
_.version_0 = 0;
_.warningMessagePadding = 6;
var Lcom_domo_charting_base_Chart_2_classLit = createForClass('com.domo.charting.base', 'Chart', 280);
function $applyNamedColorsToConditionalColors(this$static){
  var conditionalFormat, conditionalFormat$iterator;
  if (!!this$static.conditionalFormatList && this$static.conditionalFormatList.array.length > 0) {
    for (conditionalFormat$iterator = new ArrayList$1(this$static.conditionalFormatList); conditionalFormat$iterator.i < conditionalFormat$iterator.this$01.array.length;) {
      conditionalFormat = castTo($next_3(conditionalFormat$iterator), 119);
      conditionalFormat.colorStr != null && (conditionalFormat.color_0 = $getColorForName(this$static, conditionalFormat.colorStr));
    }
  }
}

function $clearConditionalFormats(this$static){
  this$static.conditionalColors = false;
  this$static.conditionalFormatList = null;
}

function $freeResources_0(this$static){
  this$static.graph = null;
  this$static.palette = null;
  this$static.overrides = null;
}

function $getAdditionalLegendItemsForCell(this$static, cell, valueColumnName, columnLabel, legendItemList, legend, colNumFormatter){
  var columnName, fillColor, format, index_0, legendItemInfo, numberFormatter;
  if (!!this$static.conditionalFormatList && this$static.conditionalFormatList.array.length > 0) {
    numberFormatter = new NumberFormatter_0(colNumFormatter);
    numberFormatter.autoAbbreviate3digit = true;
    numberFormatter.needsNewNumFormat = true;
    numberFormatter.alwaysShowDecimalPlaces = false;
    numberFormatter.needsNewNumFormat = true;
    for (index_0 = this$static.conditionalFormatList.array.length - 1; index_0 >= 0; index_0--) {
      format = castTo($get_2(this$static.conditionalFormatList, index_0), 119);
      fillColor = null;
      !!format.filter && !!format.filter.values && format.filter.values.array.length > 0 && (fillColor = $getColorForCellValue(format, cell, valueColumnName));
      if (fillColor) {
        legendItemInfo = castTo($get_1(this$static.additionalLegendItemsConditionalFormatMap, format), 37);
        if (legendItemInfo)
          return legendItemInfo;
        else {
          columnName = columnLabel;
          (columnLabel == null || columnLabel.length == 0) && (columnName = $getColName(cell));
          legendItemInfo = new LegendItemInfo_1(legend, $getAsLegendName(format.filter, columnName, numberFormatter), new CFFill(fillColor), null);
          legendItemInfo.type_0 = 13;
          $put_0(this$static.additionalLegendItemsConditionalFormatMap, format, legendItemInfo);
          !!legendItemList && (legendItemList.array[legendItemList.array.length] = legendItemInfo , true);
        }
        return legendItemInfo;
      }
    }
  }
  return null;
}

function $getColorForName(this$static, paletteColor){
  var color_0;
  if (paletteColor == null)
    return null;
  if (this$static.palette) {
    color_0 = castTo($getStringValue(this$static.palette.nameToColorMap, paletteColor), 15);
    if (color_0)
      return color_0;
  }
  if (paletteColor != null && paletteColor.length > 0)
    return new CFColor_2(paletteColor);
  return null;
}

function $getConditionalColorCategory(this$static, cell){
  var result;
  result = null;
  this$static.conditionalColors && (result = $getConditionalColorForCategoryName(this$static, cell));
  return result;
}

function $getConditionalColorForCategoryName(this$static, cell){
  var conditionalFormat, conditionalFormat$iterator, result, temp;
  result = null;
  for (conditionalFormat$iterator = new ArrayList$1(this$static.conditionalFormatList); conditionalFormat$iterator.i < conditionalFormat$iterator.this$01.array.length;) {
    conditionalFormat = castTo($next_3(conditionalFormat$iterator), 119);
    temp = $getColorForCategoryName(conditionalFormat, cell);
    !!temp && (result = temp);
  }
  return result;
}

function $getConditionalColorForCell(this$static, cell, valueColumnName){
  var conditionalFormat, index_0, result;
  if (!!this$static.conditionalFormatList && this$static.conditionalFormatList.array.length > 0) {
    for (index_0 = this$static.conditionalFormatList.array.length - 1; index_0 >= 0; index_0--) {
      conditionalFormat = castTo($get_2(this$static.conditionalFormatList, index_0), 119);
      result = $getColorForCellValue(conditionalFormat, cell, valueColumnName);
      !result && (result = $getColorForCategoryName(conditionalFormat, cell));
      !result && (result = $getColorForSeriesName(conditionalFormat, cell.column));
      if (result)
        return result;
    }
  }
  return null;
}

function $getConditionalColorForNameInColumn(this$static, name_0, column){
  var conditionalFormat, conditionalFormat$iterator, result, temp;
  result = null;
  for (conditionalFormat$iterator = new ArrayList$1(this$static.conditionalFormatList); conditionalFormat$iterator.i < conditionalFormat$iterator.this$01.array.length;) {
    conditionalFormat = castTo($next_3(conditionalFormat$iterator), 119);
    temp = $getColorForNameFromColumnName(conditionalFormat, name_0, column);
    !!temp && (result = temp);
  }
  return result;
}

function $getConditionalColorForSeriesName(this$static, column){
  var conditionalFormat, conditionalFormat$iterator, result, temp;
  result = null;
  for (conditionalFormat$iterator = new ArrayList$1(this$static.conditionalFormatList); conditionalFormat$iterator.i < conditionalFormat$iterator.this$01.array.length;) {
    conditionalFormat = castTo($next_3(conditionalFormat$iterator), 119);
    temp = $getColorForSeriesName(conditionalFormat, column);
    !!temp && (result = temp);
  }
  return result;
}

function $getConditionalColorForValueAndColumnName(this$static, value_0, originalColumnName, valueColumnName){
  var conditionalFormat, index_0, result;
  if (!!this$static.conditionalFormatList && this$static.conditionalFormatList.array.length > 0) {
    for (index_0 = this$static.conditionalFormatList.array.length - 1; index_0 >= 0; index_0--) {
      conditionalFormat = castTo($get_2(this$static.conditionalFormatList, index_0), 119);
      result = $getColorForAltValue(conditionalFormat, value_0, originalColumnName, valueColumnName);
      if (result)
        return result;
    }
  }
  return null;
}

function $getConditionalColorSeries(this$static, column){
  var result;
  result = null;
  this$static.conditionalColors && (result = $getConditionalColorForSeriesName(this$static, column));
  return result;
}

function $getLabelColorForSeriesColor(this$static, seriesColor){
  var color_0, color$iterator, colorAry, colorAry$iterator;
  if (this$static.palette) {
    for (colorAry$iterator = new ArrayList$1(this$static.palette.colorTable); colorAry$iterator.i < colorAry$iterator.this$01.array.length;) {
      colorAry = castTo($next_3(colorAry$iterator), 42);
      for (color$iterator = colorAry.iterator(); color$iterator.hasNext_0();) {
        color_0 = castTo(color$iterator.next_1(), 15);
        if ($equals_0(color_0, seriesColor)) {
          if (isLightColor(seriesColor) && colorAry.size_1() > 2)
            return castTo(colorAry.get_1(colorAry.size_1() - 2), 15);
          return $clinit_CFColor() , WHITE;
        }
      }
    }
  }
  if (isLightColor(seriesColor))
    return $clinit_CFColor() , TEXT_DARK_GRAY;
  return $clinit_CFColor() , WHITE;
}

function $getMapLatLongColors(this$static, numItems){
  var colorAry, i;
  colorAry = new ArrayList;
  if (!this$static.palette) {
    $add_1(colorAry, ($clinit_CFColor() , DISABLED_DARK_GRAY));
    return colorAry;
  }
  this$static.palette.latLongMapColors.array.length > 0?(colorAry = this$static.palette.latLongMapColors):(colorAry = $getColorAryForNumSeries(this$static.palette, numItems, this$static.palette.colorRanges));
  for (i = 0; i < MAX_COLOR_OVERRIDES; i++) {
    !!this$static.overrides[i] && i < colorAry.array.length && $set(colorAry, i, this$static.overrides[i]);
  }
  return colorAry;
}

function $getNumForRangeName(rangeName){
  switch (rangeName.toLowerCase()) {
    case 'orange':
      return 'gradient-1';
    case 'blue':
      return 'gradient-2';
    case 'green':
      return 'gradient-3';
    case 'purple':
      return 'gradient-4';
    case 'teal':
      return 'gradient-5';
    case 'pink':
      return 'gradient-6';
    default:return rangeName;
  }
}

function $getPeriodOverPeriodColors(this$static, graphType, numSeries){
  var colorAry, firstVarSeries, forLines, i, isPoPVariance, lineColorAry, varColorIndex, colorAry_0, colorAry_1;
  colorAry = new ArrayList;
  if (!!this$static.palette && this$static.palette.popColors.array.length > 0) {
    isPoPVariance = false;
    instanceOf(this$static.graph, 43) && castTo(this$static.graph, 43).typeAttributes.isPoPVariance && (isPoPVariance = true);
    colorAry = (colorAry_0 = new ArrayList , $loadPopColors(this$static, colorAry_0, graphType, isPoPVariance) , colorAry_0);
    if (isPoPVariance) {
      firstVarSeries = (numSeries / 2 | 0) + 1;
      forLines = graphType != 4;
      lineColorAry = (colorAry_1 = new ArrayList , $loadPopVarColors(this$static, colorAry_1, forLines) , colorAry_1);
      varColorIndex = 0;
      for (i = firstVarSeries; i < numSeries; i++)
        $set(colorAry, i, castTo($get_2(lineColorAry, varColorIndex++), 15));
    }
  }
  if (colorAry.array.length > 0) {
    for (i = 0; i < MAX_COLOR_OVERRIDES; i++) {
      !!this$static.overrides[i] && i < colorAry.array.length && $set(colorAry, i, this$static.overrides[i]);
    }
  }
  return colorAry;
}

function $getRadialGaugeColorForName(this$static, paletteColor){
  switch (paletteColor) {
    case 'Green':
      return new CFColor_2('#80C25D');
    case 'Orange':
      return new CFColor_2('#FB8D34');
    case 'Red':
      return new CFColor_2('#C92E25');
    case 'Blue':
      return new CFColor_2('#90C4E4');
    case 'Purple':
      return new CFColor_2('#C5ACDE');
    case 'Pink':
      return new CFColor_2('#F395CD');
    case 'Teal':
      return new CFColor_2('#8DD5BE');
    default:return $getColorForName(this$static, paletteColor);
  }
}

function $getRangeColorsForName(this$static, rangeClrName){
  var color_0, color$iterator, paletteRngColors, rangeColors;
  rangeColors = new ArrayList;
  if (!this$static.palette) {
    $add_1(rangeColors, ($clinit_CFColor() , DISABLED_DARK_GRAY));
    return rangeColors;
  }
  rangeClrName = $getNumForRangeName(rangeClrName);
  paletteRngColors = $getRangeColorsForName_0(this$static.palette, rangeClrName);
  for (color$iterator = new ArrayList$1(paletteRngColors); color$iterator.i < color$iterator.this$01.array.length;) {
    color_0 = castTo($next_3(color$iterator), 15);
    $add_1(rangeColors, new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0));
  }
  return rangeColors;
}

function $getSeriesColors(this$static, totalSeries, numDisplayed, useLineColors){
  var colorAry, i, i0, val;
  totalSeries < numDisplayed && (numDisplayed = totalSeries);
  colorAry = new ArrayList;
  if (!this$static.palette) {
    $add_1(colorAry, ($clinit_CFColor() , DISABLED_DARK_GRAY));
    return colorAry;
  }
  useLineColors && this$static.palette.lineColors.array.length > 0?(colorAry = this$static.palette.lineColors):(colorAry = $getColorAryForNumSeries(this$static.palette, numDisplayed, this$static.palette.colorRanges));
  if (totalSeries > numDisplayed) {
    for (i0 = numDisplayed; i0 <= totalSeries; i0++) {
      val = i0 % numDisplayed;
      $add_1(colorAry, (checkCriticalElementIndex(val, colorAry.array.length) , castTo(colorAry.array[val], 15)));
    }
  }
  for (i = 0; i < MAX_COLOR_OVERRIDES; i++) {
    !!this$static.overrides[i] && i < colorAry.array.length && $set(colorAry, i, this$static.overrides[i]);
  }
  return colorAry;
}

function $hasPopColors(this$static){
  if (!!this$static.palette && this$static.palette.popColors.array.length > 0)
    return true;
  return false;
}

function $loadPopColors(this$static, colorAry, graphType, isVariance){
  var i;
  if (this$static.palette) {
    if (graphType == 0 || graphType == 30) {
      if (this$static.palette.popColors.array.length > 0) {
        for (i = 0; i < this$static.palette.popColors.array.length; i++)
          $add_1(colorAry, castTo($get_2(this$static.palette.popColors, i), 15));
      }
      if (!isVariance && graphType == 30 && this$static.palette.popLineColors.array.length > 0) {
        for (i = 0; i < this$static.palette.popLineColors.array.length; i++)
          i + 1 < colorAry.array.length?$set(colorAry, i + 1, castTo($get_2(this$static.palette.popLineColors, i), 15)):$add_1(colorAry, castTo($get_2(this$static.palette.popLineColors, i), 15));
      }
    }
     else {
      if (this$static.palette.popLineColors.array.length > 0) {
        for (i = 0; i < this$static.palette.popLineColors.array.length; i++)
          $add_1(colorAry, castTo($get_2(this$static.palette.popLineColors, i), 15));
      }
      if (!isVariance && graphType == 4 && this$static.palette.popColors.array.length > 0) {
        for (i = 0; i < this$static.palette.popColors.array.length; i++) {
          i + 1 < colorAry.array.length?$set(colorAry, i + 1, castTo($get_2(this$static.palette.popColors, i), 15)):$add_1(colorAry, castTo($get_2(this$static.palette.popColors, i), 15));
        }
      }
    }
  }
}

function $loadPopVarColors(this$static, colorAry, forLines){
  var i, varColors;
  if (this$static.palette) {
    varColors = this$static.palette.popVarColors;
    forLines && (varColors = this$static.palette.popVarLineColors);
    if (varColors.array.length > 0) {
      for (i = 0; i < varColors.array.length; i++)
        $add_1(colorAry, (checkCriticalElementIndex(i, varColors.array.length) , castTo(varColors.array[i], 15)));
    }
  }
}

function $setChartOptionOverride(this$static){
  1 <= MAX_COLOR_OVERRIDES && (this$static.overrides[1] = $getColorForName(this$static, 'Orange'));
}

function $setChartOptionOverride_0(this$static, seriesNumStr, value_0){
  var seriesNum, suffixlength;
  suffixlength = '_color'.length;
  if ($equals_2(seriesNumStr.substr(seriesNumStr.length - suffixlength, suffixlength), '_color') && $equals_2(seriesNumStr.substr(0, 7), 'series_')) {
    seriesNumStr = $substring($substring_0(seriesNumStr, 0, seriesNumStr.length - 6), 7);
    try {
      seriesNum = __parseAndValidateInt(seriesNumStr, 10);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 38)) {
        seriesNum = 0;
      }
       else 
        throw toJs($e0);
    }
    seriesNum - 1 >= 0 && seriesNum - 1 <= MAX_COLOR_OVERRIDES && (this$static.overrides[seriesNum - 1] = $getColorForName(this$static, value_0));
  }
}

function $setChartOptionOverrideForSeries1(this$static, value_0){
  this$static.overrides[0] = $getColorForName(this$static, value_0);
}

function $setGetColorForIndex(this$static, index_0, color_0){
  if (index_0 >= 0 && index_0 < this$static.overrides.length) {
    if (this$static.overrides[index_0])
      return this$static.overrides[index_0];
  }
  return color_0;
}

function ColorManager(palette, component){
  this.overrides = initUnidimensionalArray(Lcom_domo_charting_model_CFColor_2_classLit, $intern_9, 15, MAX_COLOR_OVERRIDES, 0, 1);
  this.palette = palette;
  this.graph = component;
  if (this.graph) {
    this.conditionalFormatList = component.chart.conditionalFormats;
    if (!!this.conditionalFormatList && this.conditionalFormatList.array.length > 0) {
      this.conditionalColors = true;
      $applyNamedColorsToConditionalColors(this);
    }
  }
}

defineClass(193, 1, {}, ColorManager);
_.conditionalColors = false;
var MAX_COLOR_OVERRIDES = 16, defaultPaletteJSON = '{"colorRanges":[{"name":"Blues-0","values":["ECF6FD","D9EBFD","B7DAF5","90C4E4","73B0D7","4E8CBA","31689B","00537F","1F4161"]},{"name":"Greens-1","values":["F7FAC9","DDF4BA","BBE491","A0D771","80C25D","559E38","387B26","345926","223C2F"]},{"name":"Oranges-2","values":["FFFAC9","FDECAD","FCCF84","FBAD56","FB8D34","E45621","A43724","8E251D","661324"]},{"name":"Purples-3","values":["F3E4FE","DDC8EF","C5ACDE","B391CA","8F6DC0","7940A1"]},{"name":"Teals-4","values":["D8F4DE","ABE4CA","8DD5BE","68BEA8","46998A","227872"]},{"name":"Pinks-5","values":["FCD7E6","FBB6DD","F395CD","EE76BF","CF51AC","A62A92"]},{"name":"Reds-6","values":["FDDDDD","FCBCB7","FD9A93","FD7F76","E45850","C92E25"]},{"name":"Lines-7","values":["4E8CBA","559E38","E45621","8F6DC0","46998A","CF51AC","95CBEC","A0D771","FBAD56","C5ACDE","8DD5BE","F395CD"]},{"name":"Gauges-8","values":["C4C5C560","94959560","D9EBFD","73B0D7","FF993380","FF9933FD","80C25D","C92E25","D8F3DE","69BEA8","FDDDDD","E4584F","95CBEC","A0D771","FBAD56","C92E25","8B9B9B","F4F4F4","F0FBFF","F4FFE4","FB8D34","E45850","FEAD59","76B1DD","99CCEE50","FDDDDD","FF0000"]},{"name":"Grays-9","values":["E8E8E8","D1D1D1","BABABA","A2A2A2","7E7E7E","5A5A5A"]}],"colorRules":[{"min":1,"max":1,"values":[[0,3]]},{"min":2,"max":3,"values":[[0,4],[1,2],[2,4]]},{"min":4,"max":4,"values":[[0,4],[1,2],[2,3],[2,5]]},{"min":5,"max":5,"values":[[0,4],[1,3],[1,5],[2,3],[2,5]]},{"min":6,"max":6,"values":[[0,3],[0,5],[1,3],[1,5],[2,3],[2,5]]},{"min":7,"max":7,"values":[[0,3],[0,5],[1,3],[1,5],[2,2],[2,5],[2,4]]},{"min":8,"max":8,"values":[[0,3],[0,5],[1,2],[1,5],[1,4],[2,2],[2,5],[2,4]]},{"min":9,"max":9,"values":[[0,2],[0,5],[0,4],[1,2],[1,5],[1,4],[2,2],[2,5],[2,4]]},{"min":10,"max":10,"values":[[0,2],[0,5],[0,4],[1,2],[1,5],[1,4],[2,1],[2,4],[2,2],[2,5]]},{"min":11,"max":11,"values":[[0,2],[0,5],[0,4],[1,1],[1,4],[1,2],[1,5],[2,1],[2,4],[2,2],[2,5]]},{"min":12,"max":12,"values":[[0,1],[0,4],[0,2],[0,5],[1,1],[1,4],[1,2],[1,5],[2,1],[2,4],[2,2],[2,5]]},{"min":13,"max":13,"values":[[0,1],[0,4],[0,2],[0,5],[1,1],[1,4],[1,2],[1,5],[2,1],[2,4],[2,2],[2,5],[2,3]]},{"min":14,"max":14,"values":[[0,1],[0,4],[0,2],[0,5],[1,1],[1,4],[1,2],[1,5],[1,3],[2,1],[2,4],[2,2],[2,5],[2,3]]},{"min":15,"max":15,"values":[[0,1],[0,4],[0,2],[0,5],[0,3],[1,1],[1,4],[1,2],[1,5],[1,3],[2,1],[2,4],[2,2],[2,5],[2,3]]},{"min":16,"max":16,"values":[[0,1],[0,4],[0,2],[0,5],[0,3],[1,1],[1,4],[1,2],[1,5],[1,3],[2,1],[2,4],[2,2],[2,5],[2,3],[2,6]]},{"min":17,"max":17,"values":[[0,1],[0,4],[0,2],[0,5],[0,3],[1,1],[1,4],[1,2],[1,5],[1,3],[1,6],[2,1],[2,4],[2,2],[2,5],[2,3],[2,6]]},{"min":18,"max":18,"values":[[0,1],[0,4],[0,2],[0,5],[0,3],[0,6],[1,1],[1,4],[1,2],[1,5],[1,3],[1,6],[2,1],[2,4],[2,2],[2,5],[2,3],[2,6]]},{"min":19,"max":36,"values":[[0,1],[0,4],[0,2],[0,5],[0,3],[0,6],[1,1],[1,4],[1,2],[1,5],[1,3],[1,6],[2,1],[2,4],[2,2],[2,5],[2,3],[2,6],[3,0],[3,3],[3,1],[3,4],[3,2],[3,5],[4,0],[4,3],[4,1],[4,4],[4,2],[4,5],[5,0],[5,3],[5,1],[5,4],[5,2],[5,5]]}],"lineColors":[[7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[7,9],[7,10],[7,11]],"latLongMapColors":[[2,4],[0,4],[1,4],[3,3],[5,3],[4,3],[2,5],[0,5],[1,5],[3,4],[5,4],[4,4],[2,2],[0,2],[1,2],[3,1],[5,1],[4,1],[2,6],[0,6],[1,6],[3,5],[5,5],[4,5],[2,3],[0,3],[1,3],[3,2],[5,2],[4,2]],"popColors":[[0,4],[0,2],[4,3],[4,1],[1,4],[1,2],[9,2],[9,0],[2,4],[2,2],[6,3],[6,1],[3,3],[3,1],[0,3],[4,2],[1,3],[2,3],[6,2],[3,2]],"popLineColors":[[0,8],[0,5],[1,6],[1,4],[9,4],[3,5],[3,3],[2,6],[3,5],[0,7],[5,3],[5,5],[0,6],[2,5],[2,3],[5,4],[6,4],[1,7],[9,3],[9,4]],"popVarColors":[[5,4],[5,2],[3,5],[3,3],[2,4],[2,2],[6,2],[6,4],[2,6],[5,5],[5,3],[0,6],[0,4],[1,6],[1,4],[4,5],[4,3],[0,8],[9,4],[9,2]],"popVarLineColors":[[5,4],[5,2],[3,5],[3,3],[2,4],[2,2],[6,2],[6,4],[2,6],[5,5],[5,3],[0,6],[0,4],[1,6],[1,4],[4,5],[4,3],[0,8],[9,4],[9,2]],"selector":[[[0,1],[0,2],[0,3],[0,4],[0,5],[0,6]],[[1,1],[1,2],[1,3],[1,4],[1,5],[1,6]],[[2,1],[2,2],[2,3],[2,4],[2,5],[2,6]],[[3,0],[3,1],[3,2],[3,3],[3,4],[3,5]],[[4,0],[4,1],[4,2],[4,3],[4,4],[4,5]],[[5,0],[5,1],[5,2],[5,3],[5,4],[5,5]],[[6,0],[6,1],[6,2],[6,3],[6,4],[6,5]],[[9,0],[9,1],[9,2],[9,3],[9,4],[9,5]]],"nameColorMap":{"Light Blue":[0,2],"Color-1":[0,2],"Medium Blue":[0,4],"Blue":[0,4],"Color-2":[0,4],"Dark Blue":[0,6],"Color-3":[0,6],"Light Green":[1,2],"Color-4":[1,2],"Medium Green":[1,4],"Green":[1,4],"Color-5":[1,4],"Dark Green":[1,6],"Color-6":[1,6],"Light Orange":[2,2],"Color-7":[2,2],"Medium Orange":[2,4],"Orange":[2,4],"Color-8":[2,4],"Dark Orange":[2,6],"Color-9":[2,6],"Light Red":[6,1],"Color-10":[6,1],"Medium Red":[6,3],"Color-11":[6,3],"Dark Red":[6,5],"Red":[6,5],"Color-12":[6,5],"Color-13":[3,1],"Purple":[3,3],"Color-14":[3,3],"Color-15":[3,5],"Color-16":[4,1],"Teal":[4,3],"Color-17":[4,3],"Color-18":[4,5],"Pink":[5,3],"NestedBar":[8,0],"NestedBarDisabled":[8,1],"BoxPlotFill":[8,2],"BoxPlotStroke":[8,3],"CatScatterFill":[8,4],"CatScatterStroke":[8,5],"FilledGaugeRed":[8,7],"FilledGaugeGreen":[8,6],"CompGaugeLtGreen":[8,8],"CompGaugeDkGreen":[8,9],"CompGaugeArrowGreen":[8,9],"CompGaugeLtRed":[8,10],"CompGaugeDkRed":[8,11],"CompGaugeArrowRed":[8,11],"ProgressBar":[8,12],"FaceGaugeGreen":[8,13],"FaceGaugeYellow":[8,14],"FaceGaugeRed":[8,15],"FaceGaugeGray":[8,16],"LineScaleRangeGray":[8,17],"LineScaleRangeBlue":[8,18],"LineScaleRangeGreen":[8,19],"ParetoLine":[8,20],"CandlestickUpGreen":[8,13],"CandlestickDnRed":[8,21],"WaterfallGreen":[8,13],"WaterfallRed":[8,21],"WaterfallBlue":[8,12],"WordCloudFirstOrange":[8,22],"WordCloudSecBlue":[8,23],"DragSelect":[8,24],"LineRangeOutlierFill":[8,25],"LineRangeDashedRed":[8,26],"POPSingleVarianceLine":[5,5],"PositiveColor":[1,5],"NegativeColor":[6,5]},"largeSelector":{"colCount":6,"values":[[0,2],[1,2],[2,2],[6,1],[3,1],[4,1],[0,4],[1,4],[2,4],[6,3],[3,3],[4,3],[0,6],[1,6],[2,6],[6,5],[3,5],[4,5]]},"smallSelector":{"colCount":6,"values":[[2,4],[0,4],[1,4],[3,3],[4,3],[5,3]]},"gradients":[{"colCount":5,"values":[[2,2],[2,3],[2,4],[2,5],[2,6]]},{"colCount":5,"values":[[0,2],[0,3],[0,4],[0,5],[0,6]]},{"colCount":5,"values":[[1,2],[1,3],[1,4],[1,5],[1,6]]},{"colCount":5,"values":[[3,1],[3,2],[3,3],[3,4],[3,5]]},{"colCount":5,"values":[[4,1],[4,2],[4,3],[4,4],[4,5]]},{"colCount":5,"values":[[5,1],[5,2],[5,3],[5,4],[5,5]]},{"colCount":9,"values":[[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8]]},{"colCount":9,"values":[[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8]]},{"colCount":9,"values":[[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8]]},{"colCount":5,"values":[[6,1],[6,2],[6,3],[6,4],[6,5]]},{"colCount":5,"values":[[9,1],[9,2],[9,3],[9,4],[9,5]]}]}';
var Lcom_domo_charting_base_ColorManager_2_classLit = createForClass('com.domo.charting.base', 'ColorManager', 193);
function ColorRange(){
}

defineClass(164, 1, {164:1}, ColorRange);
_.max_0 = 0;
_.min_0 = 0;
var Lcom_domo_charting_base_ColorRange_2_classLit = createForClass('com.domo.charting.base', 'ColorRange', 164);
function $addGraphicElement(this$static, ge){
  this$static.geAry.add_1(0, ge);
}

function $addGraphicElement_0(this$static, ge){
  !!this$static.clipPath && !!ge && (ge.clipPath = this$static.clipPath);
  this$static.geAry.add_0(ge);
}

function $draw_1(this$static, rnd){
  var ge, ge$iterator;
  if (!this$static.isPopupComp && !!this$static.geAry) {
    for (ge$iterator = this$static.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      !ge.hidden && $draw_2(ge, rnd);
    }
  }
}

function $freeResources_1(this$static){
  this$static.chart = null;
  this$static.name_0 = null;
  this$static.bnds = null;
  this$static.drillFilter = null;
  this$static.clipPath = null;
  !!this$static.geAry && clearGraphicElementArray(this$static.geAry);
  this$static.geAry = null;
  !!this$static.annotationList && this$static.annotationList.clear_0();
  this$static.annotationList = null;
  this$static.rnd = null;
}

function $getDataObjectForGE_0(this$static, ge){
  var dataObject;
  dataObject = null;
  !!ge && (this$static.chart?(dataObject = $getDataObjectForGE(ge, this$static)):(dataObject = ge.dataObject));
  return dataObject;
}

function $getDataObjectForShape_0(this$static, shape_0){
  var dataObject;
  dataObject = null;
  !!shape_0 && (this$static.chart?(dataObject = $getDataObjectForShape(shape_0, this$static)):(dataObject = shape_0.dataObject));
  return dataObject;
}

function $getEstimateOfNumberOfShapesToDraw(this$static){
  if (this$static.geAry)
    return this$static.geAry.size_1();
  return 1;
}

function $getHvrDataStrsList(hvrDataStrs){
  var hdStr, hdStr$iterator, hvrDataStr;
  hvrDataStr = '';
  for (hdStr$iterator = new ArrayList$1(hvrDataStrs); hdStr$iterator.i < hdStr$iterator.this$01.array.length;) {
    hdStr = castToString($next_3(hdStr$iterator));
    hdStr != null && (hvrDataStr += hdStr + '|');
  }
  if (hvrDataStr.length > 0)
    return 'list:' + $substring_0(hvrDataStr, 0, hvrDataStr.length - 1);
  return null;
}

function $getLocalizedString(this$static, key){
  return getString(key, this$static.chart.locale);
}

function $getLocalizedString1Param(this$static, key, param1){
  var retVal;
  retVal = getString(key, this$static.chart.locale);
  retVal = replace_0(retVal, '{1}', param1, true);
  return retVal;
}

function $getLocalizedString2Params(this$static, param1, param2){
  var retVal;
  retVal = getString('VAL_OF_VAL', this$static.chart.locale);
  retVal = replace_0(retVal, '{1}', param1, true);
  retVal = replace_0(retVal, '{2}', param2, true);
  return retVal;
}

function $getLocalizedString3Params(this$static, param1, param2, param3){
  var retVal;
  retVal = getString('SLICER_INFO_TEXT', this$static.chart.locale);
  retVal = replace_0(retVal, '{1}', param1, true);
  retVal = replace_0(retVal, '{2}', param2, true);
  retVal = replace_0(retVal, '{3}', param3, true);
  return retVal;
}

function $getShapeUnderPoint_0(this$static, x_0, y_0, rnd){
  var ge, j, k, pointInPath, shape_0;
  for (j = this$static.geAry.size_1() - 1; j >= 0; j--) {
    ge = castTo(this$static.geAry.get_1(j), 12);
    if (ge.shapeAry) {
      for (k = ge.shapeAry.array.length - 1; k >= 0; k--) {
        shape_0 = castTo($get_2(ge.shapeAry, k), 6);
        pointInPath = $pointInPath_0(shape_0, x_0, y_0, rnd);
        if (pointInPath) {
          if (!ge.clipPath || rnd.pointInPath(x_0, y_0, this$static.clipPath)) {
            shape_0.comp = this$static;
            shape_0.dataObject == null && !!ge && (shape_0.dataObject = ge.dataObject);
            return shape_0;
          }
        }
      }
    }
  }
  return null;
}

function $setBounds(this$static, bounds){
  bounds?(this$static.bnds = new CFRect(bounds.x_0, bounds.y_0, bounds.width_0, bounds.height_0)):(this$static.bnds = null);
}

function $setClipPath(this$static, clipPath){
  this$static.clipPath = clipPath;
}

function $setDrillFilter(this$static, filter){
  this$static.drillFilter = filter;
}

function Component(theChart, name_0){
  this.chart = theChart;
  this.name_0 = name_0;
  this.reset_0();
}

function flattenOptions(options){
  var i, optionStr;
  optionStr = '';
  if (options.array.length > 0) {
    for (i = 0; i < options.array.length; i++) {
      i == 0?(optionStr += (checkCriticalElementIndex(0, options.array.length) , castToString(options.array[0]))):(optionStr += (checkCriticalElementIndex(i, options.array.length) , ', ' + castToString(options.array[i])));
    }
    return optionStr;
  }
  return null;
}

defineClass(23, 1, {23:1}, Component);
_.adjustLayout = function adjustLayout(){
}
;
_.allowHoverTextForPoint = function allowHoverTextForPoint(x_0, y_0){
  return true;
}
;
_.cancelDrag_0 = function cancelDrag_0(){
  return false;
}
;
_.cancelHighlighting = function cancelHighlighting(){
  return false;
}
;
_.checkAndSetChainedAnimations = function checkAndSetChainedAnimations(){
  return false;
}
;
_.clearAnimation = function clearAnimation(){
}
;
_.draw_1 = function draw_0(rnd){
  $draw_1(this, rnd);
}
;
_.drawAnimated = function drawAnimated(rnd, time){
  this.draw_1(rnd);
  return time;
}
;
_.format_0 = function format_0(rnd){
  this.rnd = rnd;
}
;
_.freeResources = function freeResources(dataToKeep){
  $freeResources_1(this);
}
;
_.getAnimationDuration = function getAnimationDuration(){
  return 0;
}
;
_.getCompositeFilters = function getCompositeFilters(filters){
}
;
_.getData = function getData(){
  return null;
}
;
_.getEstimateOfNumberOfShapesToDraw = function getEstimateOfNumberOfShapesToDraw(){
  return $getEstimateOfNumberOfShapesToDraw(this);
}
;
_.getHitBounds = function getHitBounds(){
  return this.bnds;
}
;
_.getHoverPoint = function getHoverPoint(){
  return null;
}
;
_.getHoverText = function getHoverText(){
  return null;
}
;
_.getInnerBounds = function getInnerBounds(){
  return this.bnds;
}
;
_.getLocalizedString = function getLocalizedString(key){
  return $getLocalizedString(this, key);
}
;
_.getNeedsFormat = function getNeedsFormat(){
  return false;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint(x_0, y_0, rnd){
  return $getShapeUnderPoint_0(this, x_0, y_0, rnd);
}
;
_.handleClick = function handleClick(shapeClicked){
  return false;
}
;
_.handleDrag_0 = function handleDrag_0(startX, startY, curX, curY){
  return false;
}
;
_.handleDragEnd_0 = function handleDragEnd_0(startX, startY, curX, curY){
  return false;
}
;
_.highlightUsingFilters = function highlightUsingFilters(filters){
  return false;
}
;
_.reset_0 = function reset_0(){
  this.geAry = new ArrayList;
  this.isPopupComp = false;
}
;
_.setAnimationData = function setAnimationData(delayMS, durationMS, animType, easingType){
}
;
_.setBounds = function setBounds(bounds){
  $setBounds(this, bounds);
}
;
_.setDrillFilter = function setDrillFilter(shape_0, clicked){
  !!shape_0 && shape_0.drillFilter != null && (this.drillFilter = shape_0.drillFilter);
}
;
_.setEditAnnotationMode_0 = function setEditAnnotationMode_0(inAddState){
}
;
_.setFrame = function setFrame(type_0, easingType, startTime, curTime, endTime, rnd){
}
;
_.setHoverData = function setHoverData(data_0, rnd){
  return false;
}
;
_.setHoverEffects = function setHoverEffects(hoverData, rnd){
}
;
_.setNeedsFormat = function setNeedsFormat(value_0){
}
;
_.supportsDrag_0 = function supportsDrag(){
  return false;
}
;
_.supportsZoom = function supportsZoom(){
  return false;
}
;
_.updateWithDefinition = function updateWithDefinition(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
}
;
_.zoomIn = function zoomIn(zoomPoint, numZooms){
  return false;
}
;
_.zoomOut = function zoomOut(zoomPoint, numZooms){
  return false;
}
;
_.isPopupComp = false;
var Lcom_domo_charting_base_Component_2_classLit = createForClass('com.domo.charting.base', 'Component', 23);
function $addChartOption(this$static, key, value_0){
  !this$static.chartOptions && (this$static.chartOptions = new HashMap);
  this$static.chartOptions.put(key, value_0);
}

function $addDependentComp(this$static, depComp){
  !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
  $add_1(this$static.dependentComps, depComp);
}

function $addDependentCompsToCompArray(this$static){
  var comp, comp$iterator, index_0;
  index_0 = $indexOf_1(this$static.chart.compAry, this$static, 0);
  if (this$static.dependentComps) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      $indexOf_1(this$static.chart.compAry, comp, 0) != -1 || (index_0 != -1?$addComponent_0(this$static.chart, comp, index_0):$addComponent(this$static.chart, comp));
    }
  }
}

function $checkForNoFilteredCols(this$static){
  if (!this$static.data_0.hasFilteredCols) {
    this$static.drillFilter = 'none';
    return true;
  }
  return false;
}

function $checkForNoFilteredRows(this$static){
  if (!this$static.data_0.hasFilteredRows) {
    this$static.drillFilter = 'none';
    return true;
  }
  return false;
}

function $clearDependentComponents(this$static){
  !!this$static.dependentComps && (this$static.dependentComps.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
}

function $clearRowFilter(this$static){
  $clearFilteredRows(this$static.data_0);
  $setChartOptionsBasedOnShowAsFiltered(this$static);
  this$static.setNeedsFormat(true);
}

function $cloneChartOptions(this$static){
  var clone;
  if (!this$static.chartOptions)
    return null;
  clone = new HashMap;
  $putAll(clone, this$static.chartOptions);
  return clone;
}

function $formatNumber_0(this$static, theValue){
  if (this$static.numberFormatter)
    return $formatNumber_1(this$static.numberFormatter, theValue);
  else if (this$static.chart)
    return $formatNumber(this$static.chart, theValue);
  return 'No Component Number formatter';
}

function $freeResources_2(this$static, dataToKeep){
  var component, component$iterator;
  $freeResources_1(this$static);
  if (!!this$static.data_0 && this$static.data_0 != dataToKeep) {
    $freeResources_11(this$static.data_0);
    this$static.data_0 = null;
  }
  this$static.animInfo = null;
  if (this$static.dependentComps) {
    for (component$iterator = new ArrayList$1(this$static.dependentComps); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      component.freeResources(dataToKeep);
    }
    this$static.dependentComps = null;
  }
  this$static.numberFormatter = null;
  this$static.dataLabelNumberFormatter = null;
  this$static.hoverNumberFormatter = null;
  this$static.currentHoverString = null;
  this$static.currentHoverPoint = null;
  this$static.chartOptions = null;
  this$static.annotations = null;
  this$static.columnFormats = null;
}

function $getAnnotationView(this$static){
  var comp, comp$iterator;
  if (!!this$static.dependentComps && this$static.dependentComps.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      if (instanceOf(comp, 173))
        return castTo(comp, 173);
    }
  }
  return null;
}

function $getChartOptionAsString(this$static, key){
  if (!this$static.chartOptions)
    return null;
  return getObjectFromMapAsString(this$static.chartOptions, key);
}

function $getChartOptionKeys(this$static){
  if (this$static.chartOptions)
    return this$static.chartOptions.keySet_0();
  return null;
}

function $getColRowInfoForHvrDataStr(this$static, hvrDataStr){
  var index_0, indexStr, separatorPos;
  if (hvrDataStr != null && $equals_2(hvrDataStr.substr(0, 6), 'colrow') && hvrDataStr.indexOf(':') != -1) {
    hvrDataStr = hvrDataStr.substr(6, hvrDataStr.length - 6);
    separatorPos = hvrDataStr.indexOf(':');
    indexStr = hvrDataStr.substr(separatorPos + 1, hvrDataStr.length - (separatorPos + 1));
    index_0 = getInt(indexStr, -1);
    if (index_0 != -1) {
      if ($equals_2(hvrDataStr.substr(0, 4), '_row') && !!this$static.data_0.rows_0 && index_0 < this$static.data_0.rows_0.size_1())
        return castTo(this$static.data_0.rows_0.get_1(index_0), 7);
      if ($equals_2(hvrDataStr.substr(0, 4), '_col') && !!this$static.data_0.cols_0 && index_0 < this$static.data_0.cols_0.size_1())
        return castTo(this$static.data_0.cols_0.get_1(index_0), 7);
      if ($equals_2(hvrDataStr.substr(0, 3), '_md') && !!this$static.data_0.metadata && index_0 < this$static.data_0.metadata.size_1())
        return castTo(this$static.data_0.metadata.get_1(index_0), 7);
    }
  }
  return null;
}

function $getColRowInfoForXYScaleHvrDataStr(hvrDataStr){
  var colRowInfo, nameStr, separatorPos, timeMSStr;
  if (hvrDataStr != null && $equals_2(hvrDataStr.substr(0, 10), 'xyscalerow') && hvrDataStr.indexOf(':') != -1) {
    hvrDataStr = hvrDataStr.substr(10, hvrDataStr.length - 10);
    separatorPos = hvrDataStr.indexOf(':');
    timeMSStr = hvrDataStr.substr(0, separatorPos);
    nameStr = hvrDataStr.substr(separatorPos + 1, hvrDataStr.length - (separatorPos + 1));
    colRowInfo = new ColRowInfo_2(nameStr, 'STRING');
    $setTimeMS_0(colRowInfo, __parseAndValidateLong(timeMSStr));
    return colRowInfo;
  }
  return null;
}

function $getColumnFormatForSeriesIndex(this$static, index_0){
  var colFormat, columnFormatsList, dataFormat;
  if (this$static.data_0) {
    if (this$static.columnFormats) {
      columnFormatsList = $getColumnFormatsAsList(this$static);
      if (columnFormatsList.array.length > index_0) {
        colFormat = (checkCriticalElementIndex(index_0, columnFormatsList.array.length) , castTo(columnFormatsList.array[index_0], 68));
        if (colFormat)
          return $getNumberFormatterFromColumnFormat(this$static, colFormat);
      }
    }
     else {
      dataFormat = $getDataFormatForSeriesOrMetaDataIndex(this$static.data_0, index_0);
      if (dataFormat)
        return $getNumberFormatterFromColumnFormat(this$static, dataFormat);
    }
  }
  return null;
}

function $getColumnFormatsAsList(this$static){
  var colName, colformat, column, column$iterator, columnFormatList, i, metadataInfo, row, row$iterator;
  columnFormatList = new ArrayList;
  if (this$static.data_0.isPeriodOverPeriod) {
    $add_1(columnFormatList, castTo($get_4(this$static.columnFormats, this$static.data_0.valueColumnName), 68));
    return columnFormatList;
  }
  if (this$static.data_0.valueColumnName != null) {
    colformat = castTo($get_4(this$static.columnFormats, this$static.data_0.valueColumnName), 68);
    columnFormatList.array[columnFormatList.array.length] = colformat;
    return columnFormatList;
  }
  if (this$static.data_0.origColNameList) {
    for (i = 1; i < this$static.data_0.origColNameList.size_1(); i++) {
      colName = castToString(this$static.data_0.origColNameList.get_1(i));
      colformat = castTo($get_4(this$static.columnFormats, colName), 68);
      columnFormatList.array[columnFormatList.array.length] = colformat;
    }
    return columnFormatList;
  }
  for (column$iterator = this$static.data_0.cols_0.iterator(); column$iterator.hasNext_0();) {
    column = castTo(column$iterator.next_1(), 7);
    colformat = castTo($get_4(this$static.columnFormats, column.name_0), 68);
    columnFormatList.array[columnFormatList.array.length] = colformat;
  }
  if ($getMetaDataSize(this$static.data_0) > 0) {
    columnFormatList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      colformat = castTo($get_4(this$static.columnFormats, $getName(row)), 68);
      columnFormatList.array[columnFormatList.array.length] = colformat;
    }
    for (i = 0; i < $getMetaDataSize(this$static.data_0); i++) {
      metadataInfo = $getMetadataInfo(this$static.data_0, i);
      if (metadataInfo) {
        colformat = castTo($get_4(this$static.columnFormats, $getName(metadataInfo)), 68);
        columnFormatList.array[columnFormatList.array.length] = colformat;
      }
    }
  }
   else if ($isGroupItemValue(this$static.data_0)) {
    columnFormatList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    colformat = castTo($get_4(this$static.columnFormats, this$static.data_0.valueColumnName), 68);
    columnFormatList.array[columnFormatList.array.length] = colformat;
  }
  return columnFormatList;
}

function $getFirstColumnFormat(this$static){
  var colFormat, colFormat$iterator, columnFormatsList, dataFormat;
  if (!!this$static.columnFormats && $size(this$static.columnFormats.map_0) > 0) {
    columnFormatsList = $getColumnFormatsAsList(this$static);
    if (columnFormatsList.array.length > 0) {
      for (colFormat$iterator = new ArrayList$1(columnFormatsList); colFormat$iterator.i < colFormat$iterator.this$01.array.length;) {
        colFormat = castTo($next_3(colFormat$iterator), 68);
        if (colFormat)
          return $getNumberFormatterFromColumnFormat(this$static, colFormat);
      }
    }
  }
  if (this$static.data_0) {
    dataFormat = $getFirstDataFormat(this$static.data_0);
    if (dataFormat) {
      return $getNumberFormatterFromColumnFormat(this$static, dataFormat);
    }
  }
  return null;
}

function $getForecastUIPanel(this$static){
  var comp, comp$iterator;
  if (!!this$static.dependentComps && this$static.dependentComps.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      if (instanceOf(comp, 150))
        return castTo(comp, 150);
    }
  }
  return null;
}

function $getHvrDataStrForColRowInfo(this$static, rowOrCol){
  var index_0;
  if (this$static.data_0.rows_0) {
    index_0 = this$static.data_0.rows_0.indexOf_0(rowOrCol);
    if (index_0 != -1)
      return 'obj:colrow_row:' + index_0;
  }
  if (this$static.data_0.cols_0) {
    index_0 = this$static.data_0.cols_0.indexOf_0(rowOrCol);
    if (index_0 != -1)
      return 'obj:colrow_col:' + index_0;
  }
  if (this$static.data_0.metadata) {
    index_0 = this$static.data_0.metadata.indexOf_0(rowOrCol);
    if (index_0 != -1)
      return 'obj:colrow_md:' + index_0;
  }
  return null;
}

function $getLegend(this$static){
  var comp, comp$iterator;
  if (!!this$static.dependentComps && this$static.dependentComps.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      if (instanceOf(comp, 104))
        return castTo(comp, 104);
    }
  }
  return null;
}

function $getMobileLimit(this$static, mobileLimit, limit){
  return !!this$static.chart && this$static.chart.mobile?mobileLimit:limit;
}

function $getNumberFormatterFromColumnFormat(this$static, dataFormat){
  var theNumberFormatter;
  theNumberFormatter = new NumberFormatter_0(this$static.chart.numberFormatter);
  $applyColumnFormat(theNumberFormatter, dataFormat);
  return theNumberFormatter;
}

function $hasAnnotations(this$static){
  return !!this$static.annotations && this$static.annotations.size_1() > 0 || this$static.chart.inAddAnnotationMode;
}

function $hasChartOptions(this$static){
  if (!!this$static.chartOptions && this$static.chartOptions.size_1() > 0)
    return true;
  return false;
}

function $hasScaleLineColorOverride(this$static){
  if (!!this$static.chart && !!this$static.chart.palette && !!this$static.chart.palette.scaleLineColor)
    return true;
  return false;
}

function $hasTextColorOverride(this$static){
  if (!!this$static.chart && !!this$static.chart.palette && !!this$static.chart.palette.textColor)
    return true;
  return false;
}

function $initHoverFormatterIfNeeded(this$static){
  if (!this$static.hoverNumberFormatter) {
    this$static.hoverNumberFormatter = new NumberFormatter_0(this$static.numberFormatter);
    this$static.hoverNumberFormatter.autoAbbreviate = false;
  }
}

function $processChartOption(this$static, key){
  var handled, value_0;
  value_0 = this$static.getChartOptionAsString(key);
  handled = true;
  switch (key) {
    case 'disable_animation':
      $setAnimationsEnabledState(this$static.chart, !isTrue(value_0));
      break;
    case 'testing_show_chart_picker':
      this$static.isThumbnail || isTrue(value_0);
      break;
    default:handled = false;
  }
  return handled;
}

function $processChartOptions(this$static){
  var key, key$iterator;
  if (!!this$static.chartOptions && this$static.chartOptions.size_1() > 0) {
    for (key$iterator = this$static.chartOptions.keySet_0().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      this$static.processChartOption(key);
    }
  }
}

function $removeChartOption(this$static, key){
  !!this$static.chartOptions && this$static.chartOptions.remove_0(key);
}

function $removeDependentCompsFromCompArray(this$static){
  var comp, comp$iterator;
  if (this$static.dependentComps) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      $removeComponent(this$static.chart, comp);
    }
  }
}

function $removeFilter_0(this$static, filterToRemove){
  var redrawNeeded;
  redrawNeeded = false;
  if (!!this$static.data_0 && filterToRemove.column != null) {
    if ($equals_2(filterToRemove.column, $getRow(this$static.data_0, 0).parentName) || $equals_2(filterToRemove.column, $getColumnName($getRow(this$static.data_0, 0)))) {
      this$static.clearRowFilter();
      redrawNeeded = true;
    }
     else if ($equals_2(filterToRemove.column, $getColumn(this$static.data_0, 0).parentName) || $equals_2(filterToRemove.column, $getColumnName($getColumn(this$static.data_0, 0)))) {
      $clearFilteredCols(this$static.data_0);
      $setChartOptionsBasedOnShowAsFiltered(this$static);
      this$static.setNeedsFormat(true);
      redrawNeeded = true;
    }
  }
  return redrawNeeded;
}

function $replaceAnimationData(this$static, delayMS, durationMS, animType, easingType){
  this$static.animInfo = new AnimInfo(delayMS, durationMS, animType, easingType);
}

function $reset_0(this$static){
  this$static.geAry = new ArrayList;
  this$static.isPopupComp = false;
  this$static.data_0 = null;
  this$static.removeDependentCompsFromCompArray();
  this$static.dependentComps = null;
  this$static.needsFormat = true;
  this$static.treatAsSmall = false;
  this$static.simplifiedForMobile = false;
  this$static.verticalLayout = false;
  this$static.horizontalLayout = true;
  this$static.numberFormatter = null;
  this$static.dataLabelNumberFormatter = null;
  this$static.hoverNumberFormatter = null;
  this$static.supportsDrag = false;
  this$static.currentHoverString = null;
  this$static.currentHoverPoint = null;
  this$static.chartOptions = null;
  this$static.annotations = null;
  this$static.columnFormats = null;
  this$static.isThumbnail = false;
  this$static.hasInteractions = true;
  this$static.allowInteractions = true;
  this$static.chart?(this$static.numberFormatter = new NumberFormatter_0(this$static.chart.numberFormatter)):(this$static.numberFormatter = new NumberFormatter);
  this$static.shortName = null;
}

function $setAllowInteractions(this$static, value_0){
  this$static.allowInteractions = value_0;
  this$static.hasInteractions = this$static.allowInteractions;
}

function $setAnimationData(this$static, delayMS, durationMS, animType, easingType){
  !this$static.animInfo && (this$static.animInfo = new AnimInfo(delayMS, durationMS, animType, easingType));
}

function $setAnnotations(this$static, annotations){
  this$static.annotations = annotations;
}

function $setBounds_0(this$static, x_0, y_0, width_0, height){
  var rect;
  rect = new CFRect(x_0, y_0, width_0, height);
  this$static.setBounds(rect);
}

function $setBounds_1(this$static, bounds){
  bounds?(this$static.bnds = new CFRect(bounds.x_0, bounds.y_0, bounds.width_0, bounds.height_0)):(this$static.bnds = null);
  $setLayoutFlagsBasedOnSize(this$static);
}

function $setChartOptions(this$static, chartOptions){
  this$static.chartOptions = chartOptions;
}

function $setChartOptionsBasedOnShowAsFiltered(this$static){
  var colHeaderName, filter, filterBase, rowHeaderName, unFilteredColumns, unFilteredRows;
  unFilteredRows = $getNonFilteredRowList(this$static.data_0);
  if (!!unFilteredRows && unFilteredRows.array.length > 0 && $getNumRows(this$static.data_0) > 1) {
    rowHeaderName = $getRow(this$static.data_0, 0).parentName;
    filterBase = new FilterBase(rowHeaderName, 'IN', $getRow(this$static.data_0, 0));
    filterBase.values = unFilteredRows;
    $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
    !this$static.chartOptions && (this$static.chartOptions = new HashMap);
    this$static.chartOptions.put('row_show_as_unfiltered', filter);
  }
   else {
    !!this$static.chartOptions && this$static.chartOptions.remove_0('row_show_as_unfiltered');
    $clearFilteredRows(this$static.data_0);
  }
  unFilteredColumns = $getNonFilteredColumnList(this$static.data_0);
  if (!!unFilteredColumns && unFilteredColumns.array.length > 0 && $getNumCols(this$static.data_0) > 1) {
    colHeaderName = $getColumn(this$static.data_0, 0).parentName;
    filterBase = new FilterBase(colHeaderName, 'IN', $getColumn(this$static.data_0, 0));
    filterBase.values = unFilteredColumns;
    $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
    !this$static.chartOptions && (this$static.chartOptions = new HashMap);
    this$static.chartOptions.put('column_show_as_unfiltered', filter);
  }
   else {
    !!this$static.chartOptions && this$static.chartOptions.remove_0('column_show_as_unfiltered');
    $clearFilteredCols(this$static.data_0);
  }
}

function $setColumnFormats(this$static, columnFormats){
  !!columnFormats && columnFormats.size_1() > 0?(this$static.columnFormats = new LinkedHashMap_0(columnFormats)):(this$static.columnFormats = null);
}

function $setDrillFromDataBasedOnShowAsFiltered(this$static, clicked){
  var colHeaderName, colNames, columnNames, filter1, filter2, filterBase, rowHeaderName, rowNames;
  (!$usingCardBus(this$static.chart) || !clicked) && (this$static.drillFilter = null);
  filter1 = null;
  filter2 = null;
  $setChartOptionsBasedOnShowAsFiltered(this$static);
  if ($equals_2('item-value', this$static.data_0.originalDataType)) {
    if ($checkForNoFilteredRows(this$static))
      return;
    rowNames = $getNonFilteredRowList(this$static.data_0);
    if (!!rowNames && rowNames.array.length > 0) {
      rowHeaderName = $getRow(this$static.data_0, 0).parentName;
      filterBase = new FilterBase(rowHeaderName, 'IN', $getRow(this$static.data_0, 0));
      filterBase.values = rowNames;
      $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
      this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter1, null));
    }
  }
   else if ($equals_2('legacy', this$static.data_0.originalDataType)) {
    if (!$checkForNoFilteredRows(this$static)) {
      rowNames = $getNonFilteredRowList(this$static.data_0);
      if (!!rowNames && rowNames.array.length > 0) {
        rowHeaderName = $getRow(this$static.data_0, 0).parentName;
        filterBase = new FilterBase(rowHeaderName, 'IN', $getRow(this$static.data_0, 0));
        filterBase.values = rowNames;
        $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
        $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
        filter1 = getDrillFilterFromValues(filterBase);
      }
    }
    filter1 != null?(this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter1, null))):(this$static.drillFilter = 'null');
  }
   else if ($isXYBubble(this$static.data_0) || this$static.data_0.isPeriodOverPeriod) {
    if ($checkForNoFilteredCols(this$static))
      return;
    columnNames = $getNonFilteredColumnList(this$static.data_0);
    if (!!columnNames && columnNames.array.length > 0) {
      colHeaderName = $getColumn(this$static.data_0, 0).parentName;
      filterBase = new FilterBase(colHeaderName, 'IN', $getColumn(this$static.data_0, 0));
      filterBase.values = columnNames;
      $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
      this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter1, null));
    }
  }
   else {
    if ($checkForNoFilteredRows(this$static) && $checkForNoFilteredCols(this$static))
      return;
    if (this$static.data_0.hasFilteredRows) {
      rowNames = $getNonFilteredRowList(this$static.data_0);
      rowHeaderName = $getRow(this$static.data_0, 0).parentName;
      filterBase = new FilterBase(rowHeaderName, 'IN', $getRow(this$static.data_0, 0));
      filterBase.values = rowNames;
      $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
    }
    if (this$static.data_0.hasFilteredCols) {
      colNames = $getFilteredColumnList(this$static.data_0);
      colHeaderName = $getColumn(this$static.data_0, 0).parentName;
      filterBase = new FilterBase(colHeaderName, 'NOT_IN', $getColumn(this$static.data_0, 0));
      filterBase.values = colNames;
      $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
      filter2 = getDrillFilterFromValues(filterBase);
    }
    this$static.drillFilter = getDrillFilterFromFilters(filter1, filter2);
  }
  $equals_2('none', this$static.drillFilter) && (this$static.drillFilter = null);
}

function $setHasInteractions(this$static, value_0){
  this$static.hasInteractions = value_0;
}

function $setHoverPoint(this$static, point){
  this$static.currentHoverPoint = point;
}

function $setHoverText(this$static, text_0){
  this$static.currentHoverString = text_0;
}

function $setLayoutFlagsBasedOnComponentSize(this$static){
  this$static.getChartOptionAsString('override_layout') != null && (this$static.overrideLayout = isTrue(this$static.getChartOptionAsString('override_layout')));
  this$static.horizontalLayout = this$static.verticalLayout = this$static.treatAsSmall = this$static.simplifiedForMobile = false;
  if (this$static.bnds) {
    !this$static.overrideLayout && (this$static.bnds.width_0 <= 270 || this$static.bnds.height_0 <= 130) && (!this$static.chart || !this$static.chart.isPageLayout)?(this$static.treatAsSmall = true):!this$static.overrideLayout && (this$static.bnds.width_0 < 260 || this$static.bnds.height_0 < 105) && !!this$static.chart && this$static.chart.isPageLayout?(this$static.treatAsSmall = true):this$static.bnds.width_0 / this$static.bnds.height_0 < 1.25?(this$static.verticalLayout = true):(this$static.horizontalLayout = true);
    this$static.adjustLayout();
  }
}

function $setLayoutFlagsBasedOnSize(this$static){
  var chartBounds;
  this$static.getChartOptionAsString('override_layout') != null && (this$static.overrideLayout = isTrue(this$static.getChartOptionAsString('override_layout')));
  this$static.horizontalLayout = this$static.verticalLayout = this$static.treatAsSmall = this$static.simplifiedForMobile = false;
  chartBounds = this$static.chart.dimension;
  if ((chartBounds.width_0 <= 270 || chartBounds.height_0 <= 130) && (!this$static.chart || !this$static.chart.isPageLayout) || (chartBounds.width_0 < 260 || chartBounds.height_0 < 105) && !!this$static.chart && this$static.chart.isPageLayout) {
    this$static.chart.mobile && chartBounds.width_0 >= 200 && chartBounds.height_0 >= 120?(this$static.simplifiedForMobile = true):this$static.overrideLayout || (this$static.treatAsSmall = true);
    if (this$static.simplifiedForMobile && chartBounds.width_0 > 400) {
      this$static.simplifiedForMobile = false;
      this$static.horizontalLayout = true;
    }
  }
   else 
    chartBounds.width_0 / chartBounds.height_0 < 1.25?(this$static.verticalLayout = true):(this$static.horizontalLayout = true);
  this$static.adjustLayout();
}

function $setNumberFormatFromColumnFormat(this$static){
  var numberFormatter;
  numberFormatter = this$static.getFirstColumnFormat();
  !!numberFormatter && (this$static.numberFormatter = numberFormatter);
}

function $setNumberFormatter(this$static, theFormatter){
  this$static.numberFormatter = theFormatter;
}

function $setOriginalHeight(this$static, value_0){
  this$static.originalHeight = value_0;
}

function $stripAllReferencesForThumbnail(this$static){
  if (this$static.data_0) {
    $freeResources_11(this$static.data_0);
    this$static.data_0 = null;
  }
  removeDataObjectsFromShapesInGEAry(this$static.geAry);
}

function $updateNumberFormats(this$static){
  $applyOverrides(this$static.numberFormatter, this$static.chartOptions);
  this$static.dataLabelNumberFormatter = new NumberFormatter_0(this$static.numberFormatter);
  this$static.dataLabelNumberFormatter.autoAbbreviate = false;
  this$static.hoverNumberFormatter = new NumberFormatter_0(this$static.numberFormatter);
  this$static.hoverNumberFormatter.autoAbbreviate = false;
}

function ComponentCSR(theChart, name_0){
  Component.call(this, theChart, name_0);
  this.originalHeight = -1;
  this.hasInteractions = true;
  this.allowInteractions = true;
}

defineClass(63, 23, $intern_13);
_.clearAnimation = function clearAnimation_0(){
  this.animInfo = null;
}
;
_.clearRowFilter = function clearRowFilter(){
  $clearRowFilter(this);
}
;
_.draw_1 = function draw_1(rnd){
  $draw_1(this, rnd);
}
;
_.drawAnimated = function drawAnimated_0(rnd, time){
  if (!this.animInfo) {
    this.draw_1(rnd);
    return 0;
  }
   else {
    $setAnimTimeAndDraw(this.animInfo, rnd, time, this);
    return this.animInfo.endTime;
  }
}
;
_.formatNumber = function formatNumber(theValue){
  return $formatNumber_0(this, theValue);
}
;
_.freeResources = function freeResources_0(dataToKeep){
  $freeResources_2(this, dataToKeep);
}
;
_.getAnimationDuration = function getAnimationDuration_0(){
  if (this.animInfo)
    return $getTotalDuration(this.animInfo);
  return 0;
}
;
_.getChartOptionAsString = function getChartOptionAsString(key){
  return $getChartOptionAsString(this, key);
}
;
_.getChartOptionKeys = function getChartOptionKeys(){
  return $getChartOptionKeys(this);
}
;
_.getColorAry = function getColorAry(){
  return null;
}
;
_.getData = function getData_0(){
  return this.data_0;
}
;
_.getFirstColumnFormat = function getFirstColumnFormat(){
  return $getFirstColumnFormat(this);
}
;
_.getHoverPoint = function getHoverPoint_0(){
  return this.currentHoverPoint;
}
;
_.getHoverText = function getHoverText_0(){
  return this.currentHoverString;
}
;
_.getNeedsFormat = function getNeedsFormat_0(){
  return this.needsFormat;
}
;
_.hasChartOptions = function hasChartOptions(){
  return $hasChartOptions(this);
}
;
_.hasInteractions_0 = function hasInteractions(){
  return this.hasInteractions;
}
;
_.processChartOption = function processChartOption(key){
  return $processChartOption(this, key);
}
;
_.removeDependentCompsFromCompArray = function removeDependentCompsFromCompArray(){
  $removeDependentCompsFromCompArray(this);
}
;
_.removeFilter_1 = function removeFilter_0(filterToRemove){
  return $removeFilter_0(this, filterToRemove);
}
;
_.reset_0 = function reset_1(){
  $reset_0(this);
}
;
_.resetForSizeChange = function resetForSizeChange(){
  this.removeDependentCompsFromCompArray();
  this.dependentComps = null;
}
;
_.setAnimationData = function setAnimationData_0(delayMS, durationMS, animType, easingType){
  $setAnimationData(this, delayMS, durationMS, animType, easingType);
}
;
_.setBounds = function setBounds_0(bounds){
  $setBounds_1(this, bounds);
}
;
_.setDrillFilter = function setDrillFilter_0(shape_0, clicked){
  !!shape_0 && shape_0.drillFilter != null && (this.drillFilter = shape_0.drillFilter);
}
;
_.setHoverData = function setHoverData_0(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.chart.chartHoverData) !== maskUndefined(data_0)) {
    $setChartHoverData(this.chart, data_0);
    redrawNeeded = true;
  }
  return redrawNeeded;
}
;
_.setNeedsFormat = function setNeedsFormat_0(value_0){
  this.needsFormat = value_0;
}
;
_.stripAllReferencesForThumbnail = function stripAllReferencesForThumbnail(){
  $stripAllReferencesForThumbnail(this);
}
;
_.supportsDrag_0 = function supportsDrag_0(){
  return this.supportsDrag;
}
;
_.updateNumberFormats = function updateNumberFormats(copyToScalesFromGraph){
  $updateNumberFormats(this);
}
;
_.allowInteractions = false;
_.hasInteractions = false;
_.horizontalLayout = false;
_.isThumbnail = false;
_.needsFormat = false;
_.originalHeight = 0;
_.overrideLayout = false;
_.simplifiedForMobile = false;
_.supportsDrag = false;
_.treatAsSmall = false;
_.verticalLayout = false;
var Lcom_domo_charting_base_ComponentCSR_2_classLit = createForClass('com.domo.charting.base', 'ComponentCSR', 63);
function FormatDate(ticks, format, locale, timeZone){
  var date, result;
  result = tokenizeDateFormat(format);
  if (result != null) {
    date = new Date_4(ticks);
    result = replaceHour(result, date, locale);
    result = replaceMinute(result, date);
    result = replaceSecond(result, date);
    result = replaceLongYear(result, date);
    result = replaceShortYear(result, date);
    result = replaceDayOfWeek(result, date, locale);
    result = replaceMonth(result, date, locale);
    result = replaceDate(result, date);
    result = replaceDateNoPad(result, date);
    result = replaceTimeZone(result, timeZone);
    result = removeTokenDelimiters(result);
  }
  return result;
}

function containsMonthDaysOtherThanTestDay(ticks, testDate){
  if (testDate != getDayOfMonth(ticks))
    return true;
  return false;
}

function containsSubHourTime(ticks){
  var date;
  if (compare_22(ticks, 0) != 0) {
    date = new Date_4(ticks);
    if (date.jsdate.getMinutes() != 0 || date.jsdate.getSeconds() != 0)
      return true;
  }
  return false;
}

function convertPopChartDateMacros(dateOutputFormat){
  if ($indexOf(dateOutputFormat, fromCodePoint(37)) > -1) {
    dateOutputFormat = replace_0(dateOutputFormat, '%Y', 'yyyy', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%y', 'yy', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%b', 'MMM', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%f', 'MMM', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%F', 'MMM', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%m', 'M', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%n', 'MM', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%d', 'd', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%e', 'dd', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%a', 'E', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%H', 'HH', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%I', 'h', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%p', 'a', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%M', 'mm', false);
    dateOutputFormat = replace_0(dateOutputFormat, '%S', 'ss', false);
  }
  return dateOutputFormat;
}

function getDayOfMonth(ticks){
  var date;
  if (compare_22(ticks, 0) != 0) {
    date = new Date_4(ticks);
    return date.jsdate.getDate();
  }
  return 0;
}

function getLongDayOfWeekName(date, locale){
  var dayOfWeek;
  dayOfWeek = date.jsdate.getDay();
  return getString('DAYLONGNAME_' + (dayOfWeek + 1), locale);
}

function getLongMonthName(date, locale){
  var month;
  month = date.jsdate.getMonth();
  return getString('MONTHLONGNAME_' + month, locale);
}

function getShortDayOfWeekName(date, locale){
  var dayOfWeek;
  dayOfWeek = date.jsdate.getDay();
  return getString('DAYSHORTNAME_' + (dayOfWeek + 1), locale);
}

function getShortMonthName(date, locale){
  var month;
  month = date.jsdate.getMonth();
  return getString('MONTHSHORTNAME_' + month, locale);
}

function getStdCalMonthShortNameMap(locale){
  var i, monthShortNameMap;
  monthShortNameMap = new HashMap;
  for (i = 0; i < 12; i++)
    $putStringValue(monthShortNameMap, getString('MONTHSHORTNAMESTDCAL_' + i, locale).toLowerCase(), valueOf(i));
  return monthShortNameMap;
}

function getToken(source, token){
  var endIndex, startIndex;
  startIndex = source.indexOf('<*' + token);
  if (startIndex > -1) {
    endIndex = source.indexOf('*>', startIndex);
    if (endIndex > -1)
      return source.substr(startIndex, endIndex + 2 - startIndex);
  }
  return null;
}

function removeTokenDelimiters(result){
  if (result.length > 0) {
    while (result.indexOf('<*') > -1)
      result = replace_0(result, '<*', '', false);
    while (result.indexOf('*>') > -1)
      result = replace_0(result, '*>', '', false);
  }
  return result;
}

function replaceDate(result, date){
  var dayOfMonth, replace, replaceString;
  replaceString = getToken(result, 'd');
  if (replaceString != null) {
    dayOfMonth = date.jsdate.getDate();
    replace = '' + dayOfMonth;
    replaceString.length > 5 && (replace = getTwoDigitInt(dayOfMonth));
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceDateNoPad(result, date){
  var dayOfMonth, replace, replaceString;
  replaceString = getToken(result, 'DD');
  if (replaceString != null) {
    dayOfMonth = date.jsdate.getDate();
    replace = '' + dayOfMonth;
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceDayOfWeek(result, date, locale){
  var dayOfWeek, replace, replaceStr;
  replaceStr = getToken(result, 'E');
  if (replaceStr != null) {
    if (replaceStr.length > 7) {
      replace = (dayOfWeek = date.jsdate.getDay() , getString('DAYLONGNAME_' + (dayOfWeek + 1), locale));
      result = replace_0(result, replaceStr, replace, false);
    }
     else {
      replace = (dayOfWeek = date.jsdate.getDay() , getString('DAYSHORTNAME_' + (dayOfWeek + 1), locale));
      result = replace_0(result, replaceStr, replace, false);
    }
  }
  return result;
}

function replaceHour(result, date, locale){
  var amPm, hour, hour12, pm, replace, replaceString;
  hour = date.jsdate.getHours();
  hour12 = hour;
  pm = false;
  hour >= 12 && (pm = true);
  hour > 12 && (hour12 -= 12);
  hour12 == 0 && (hour12 = 12);
  replaceString = getToken(result, 'H');
  if (replaceString != null) {
    replace = getTwoDigitInt(hour);
    result = replace_0(result, replaceString, replace, false);
  }
  replaceString = getToken(result, 'h');
  if (replaceString != null) {
    replace = '' + hour12;
    result = replace_0(result, replaceString, replace, false);
  }
  replaceString = getToken(result, 'a');
  if (replaceString != null) {
    pm?(amPm = getString('PM', locale)):(amPm = getString('AM', locale));
    result = replace_0(result, replaceString, amPm, false);
  }
  return result;
}

function replaceLongYear(result, date){
  result = replaceLongYearGeneral(result, date, 'yyyy');
  result = replaceLongYearGeneral(result, date, 'YYYY');
  return result;
}

function replaceLongYearGeneral(result, date, yearString){
  var replace, replaceString, year;
  replaceString = getToken(result, yearString);
  if (replaceString != null) {
    year = date.jsdate.getFullYear() - $intern_14 + $intern_14;
    replace = '' + year;
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceMinute(result, date){
  var minute, replace, replaceString;
  replaceString = getToken(result, 'm');
  if (replaceString != null) {
    minute = date.jsdate.getMinutes();
    replace = getTwoDigitInt(minute);
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceMonth(result, date, locale){
  var month, replace, replaceStr;
  replaceStr = getToken(result, 'M');
  if (replaceStr != null) {
    if (replaceStr.length > 7) {
      replace = (month = date.jsdate.getMonth() , getString('MONTHLONGNAME_' + month, locale));
      result = replace_0(result, replaceStr, replace, false);
    }
     else if (replaceStr.length == 7) {
      replace = (month = date.jsdate.getMonth() , getString('MONTHSHORTNAME_' + month, locale));
      result = replace_0(result, replaceStr, replace, false);
    }
     else {
      month = date.jsdate.getMonth() + 1;
      replace = '' + month;
      replaceStr.length > 5 && (replace = getTwoDigitInt(month));
      result = replace_0(result, replaceStr, replace, false);
    }
  }
  return result;
}

function replaceSecond(result, date){
  var replace, replaceString, second;
  replaceString = getToken(result, 's');
  if (replaceString != null) {
    second = date.jsdate.getSeconds();
    replace = getTwoDigitInt(second);
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceShortYear(result, date){
  var replace, replaceString, year;
  replaceString = getToken(result, 'y');
  if (replaceString != null) {
    year = date.jsdate.getFullYear() - $intern_14 + $intern_14;
    replace = ('' + year).substr(2, ('' + year).length - 2);
    result = replace_0(result, replaceString, replace, false);
  }
  return result;
}

function replaceTimeZone(result, timeZone){
  var replaceStr, zone;
  replaceStr = getToken(result, 'z');
  if (replaceStr != null) {
    zone = '';
    timeZone != null && (zone = timeZone);
    result = replace_0(result, replaceStr, zone, false);
  }
  return result;
}

function tokenizeDateFormat(format){
  var ch_0, inToken, index_0, sb;
  inToken = false;
  if (format.length > 0) {
    sb = new StringBuilder;
    ch_0 = 0;
    for (index_0 = 0; index_0 < format.length; index_0++) {
      if (ch_0 != format.charCodeAt(index_0)) {
        if (inToken) {
          sb.string += '*>';
          inToken = false;
        }
        if (format.charCodeAt(index_0) == 92) {
          index_0 + 1 < format.length && ++index_0;
        }
         else {
          sb.string += '<*';
          inToken = true;
        }
      }
      ch_0 = format.charCodeAt(index_0);
      sb.string += String.fromCharCode(ch_0);
    }
    inToken && (sb.string += '*>' , sb);
    format = sb.string;
  }
  return format;
}

function $addGEItems(this$static, ge){
  var shape_0, shape$iterator, ti, ti$iterator;
  if (ge.textAry) {
    for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      !this$static.textAry && (this$static.textAry = new ArrayList);
      $add_1(this$static.textAry, ti);
    }
  }
  if (ge.shapeAry) {
    for (shape$iterator = new ArrayList$1(ge.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
      shape_0 = castTo($next_3(shape$iterator), 6);
      !this$static.shapeAry && (this$static.shapeAry = new ArrayList);
      $add_1(this$static.shapeAry, shape_0);
    }
  }
}

function $addShape(this$static, shape_0){
  !this$static.shapeAry && (this$static.shapeAry = new ArrayList);
  $add_1(this$static.shapeAry, shape_0);
}

function $addShape_0(this$static, shape_0, dataObject){
  !this$static.shapeAry && (this$static.shapeAry = new ArrayList);
  $add_1(this$static.shapeAry, shape_0);
  this$static.dataObject = dataObject;
}

function $addTextItem(this$static, textItem){
  !this$static.textAry && (this$static.textAry = new ArrayList);
  $add_1(this$static.textAry, textItem);
}

function $addTextItems(this$static, textItems){
  var textItem, textItem$index, textItem$max;
  !this$static.textAry && (this$static.textAry = new ArrayList);
  for (textItem$index = 0 , textItem$max = textItems.length; textItem$index < textItem$max; ++textItem$index) {
    textItem = textItems[textItem$index];
    $add_1(this$static.textAry, textItem);
  }
}

function $draw_2(this$static, rnd){
  var previousHoverText, shape_0, shape$iterator, textItem, textItem$iterator;
  if (this$static.shapeAry) {
    for (shape$iterator = new ArrayList$1(this$static.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
      shape_0 = castTo($next_3(shape$iterator), 6);
      if (shape_0) {
        previousHoverText = shape_0.hoverText;
        this$static.dataObject != null && instanceOf(this$static.dataObject, 18) && castTo(this$static.dataObject, 18).hoverText != null?$setHoverText_8(shape_0, castTo(this$static.dataObject, 18).hoverText):this$static.dataObject != null && instanceOf(this$static.dataObject, 87) && castTo(this$static.dataObject, 87).hoverText != null && $setHoverText_8(shape_0, castTo(this$static.dataObject, 87).hoverText);
        $draw_6(shape_0, rnd);
        shape_0.hoverText = previousHoverText;
      }
    }
  }
  if (this$static.textAry) {
    for (textItem$iterator = new ArrayList$1(this$static.textAry); textItem$iterator.i < textItem$iterator.this$01.array.length;) {
      textItem = castTo($next_3(textItem$iterator), 26);
      !!textItem && $draw_7(textItem, rnd);
    }
  }
}

function $freeResources_3(this$static){
  var shape_0, shape$iterator;
  this$static.dataObject != null && instanceOf(this$static.dataObject, 42) && castTo(this$static.dataObject, 42).clear_0();
  this$static.dataObject = null;
  !!this$static.textAry && this$static.textAry.array.length > 0 && (this$static.textAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.textAry = null;
  !!this$static.clipPath && $freeResources_30(this$static.clipPath);
  this$static.clipPath = null;
  if (!!this$static.shapeAry && this$static.shapeAry.array.length > 0) {
    for (shape$iterator = new ArrayList$1(this$static.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
      shape_0 = castTo($next_3(shape$iterator), 6);
      !!shape_0 && $freeResources_31(shape_0);
    }
    this$static.shapeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.shapeAry = null;
}

function $insertShape(this$static, shape_0){
  !this$static.shapeAry && (this$static.shapeAry = new ArrayList);
  $add_0(this$static.shapeAry, 0, shape_0);
}

function $insertShape_0(this$static, shape_0, dataObject){
  !this$static.shapeAry && (this$static.shapeAry = new ArrayList);
  $add_0(this$static.shapeAry, 0, shape_0);
  this$static.dataObject = dataObject;
}

function $isClip(this$static){
  if (this$static.dataObject == null && !!this$static.shapeAry && this$static.shapeAry.array.length > 0 && castTo($get_2(this$static.shapeAry, 0), 6).isClip)
    return true;
  return false;
}

function $setDataObject(this$static, value_0){
  this$static.dataObject = value_0;
}

function GraphicElement(){
}

function GraphicElement_0(shape_0){
  !this.shapeAry && (this.shapeAry = new ArrayList);
  $add_1(this.shapeAry, shape_0);
}

function GraphicElement_1(shape_0, dataObject){
  !this.shapeAry && (this.shapeAry = new ArrayList);
  $add_1(this.shapeAry, shape_0);
  this.dataObject = dataObject;
}

function GraphicElement_2(textItem){
  !this.textAry && (this.textAry = new ArrayList);
  $add_1(this.textAry, textItem);
}

defineClass(12, 1, {12:1}, GraphicElement, GraphicElement_0, GraphicElement_1, GraphicElement_2);
_.toString_0 = function toString_1(){
  if ($isClip(this)) {
    return !!this.shapeAry && this.shapeAry.array.length > 0 && !!castTo($get_2(this.shapeAry, 0), 6).path?'Start Clip':'End Clip';
  }
   else {
    if (!!this.shapeAry && this.shapeAry.array.length > 0) {
      if (castTo($get_2(this.shapeAry, 0), 6).fill_0) {
        return 'Shape - ' + castTo($get_2(this.shapeAry, 0), 6).fill_0;
      }
       else if (castTo($get_2(this.shapeAry, 0), 6).stroke_0) {
        return 'Shape - ' + castTo($get_2(this.shapeAry, 0), 6).stroke_0;
      }
      return 'Shape';
    }
     else 
      return !!this.textAry && this.textAry.array.length > 0?'TextItem':'Unknown';
  }
}
;
_.hidden = false;
var Lcom_domo_charting_base_GraphicElement_2_classLit = createForClass('com.domo.charting.base', 'GraphicElement', 12);
function $matchForColumnName(this$static, name_0){
  var filter, filter$iterator;
  if (!!this$static.filters && this$static.filters.array.length > 0) {
    for (filter$iterator = new ArrayList$1(this$static.filters); filter$iterator.i < filter$iterator.this$01.array.length;) {
      filter = castTo($next_3(filter$iterator), 148);
      if ($isMatchForName(filter, null, null, name_0))
        return true;
    }
  }
  return false;
}

function $matchForName(this$static, name_0){
  var filter, filter$iterator;
  if (!!this$static.filters && this$static.filters.array.length > 0) {
    for (filter$iterator = new ArrayList$1(this$static.filters); filter$iterator.i < filter$iterator.this$01.array.length;) {
      filter = castTo($next_3(filter$iterator), 148);
      if ($isMatchForNameRegardlessOfColumn(filter, name_0))
        return true;
    }
  }
  return false;
}

function HighlightManager(list){
  this.filters = list;
}

defineClass(196, 1, {}, HighlightManager);
var Lcom_domo_charting_base_HighlightManager_2_classLit = createForClass('com.domo.charting.base', 'HighlightManager', 196);
function KeyValuePair(theKey, theObject){
  this.key = theKey;
  this.value_0 = theObject;
}

defineClass(198, 1, {198:1}, KeyValuePair);
var Lcom_domo_charting_base_KeyValuePair_2_classLit = createForClass('com.domo.charting.base', 'KeyValuePair', 198);
function $convert(this$static, horizontal, vertical){
  var point;
  point = new CFPoint(horizontal, vertical);
  return $convert_0(this$static, point);
}

function $convert_0(this$static, point){
  point = this$static.project(point);
  this$static.scaleFactor != 1 && (point = $scale(this$static, point.x_0, point.y_0, this$static.scaleFactor));
  return point;
}

function $long180(this$static, point){
  var changed, x_0;
  changed = false;
  x_0 = point.x_0;
  if (this$static.xMin - x_0 > 180) {
    x_0 += 360;
    changed = true;
  }
   else if (x_0 - this$static.xMax > 180) {
    x_0 -= 360;
    changed = true;
  }
  changed && (point = new CFPoint(x_0, point.y_0));
  return point;
}

function $scale(this$static, x_0, y_0, scale){
  var xScaled, yScaled;
  xScaled = (x_0 - this$static.xScaleMin) * scale;
  yScaled = (y_0 - this$static.yScaleMin) * scale;
  return new CFPoint(xScaled, yScaled);
}

function LatLongProjector(){
}

function getProjector(proj, minX, minY, maxX, maxY, scale, xScale, yScale){
  var projector;
  switch (proj) {
    case 4:
      projector = new LatLongProjectorLambert;
      break;
    case 6:
      projector = new LatLongProjectorMiller;
      break;
    default:return null;
  }
  if (projector) {
    projector.xMin = minX;
    projector.yMin = minY;
    projector.xMax = maxX;
    projector.yMax = maxY;
    projector.xMidPoint = (projector.xMin + projector.xMax) / 2;
    projector.scaleFactor = scale;
    projector.xScaleMin = xScale;
    projector.yScaleMin = yScale;
  }
  return projector;
}

function translateProjection(projection){
  if (projection == null || projection.length == 0)
    return 0;
  projection = projection.toLowerCase();
  if ($equals_2('miller', projection))
    return 6;
  else if ($equals_2('flat', projection))
    return 3;
  else if ($equals_2('lambert', projection))
    return 4;
  else if ($equals_2('mercator', projection))
    return 5;
  else if ($equals_2('albers', projection))
    return 7;
  return 0;
}

defineClass(241, 1, {});
_.project = function project(point){
  return point;
}
;
_.scaleFactor = 1;
_.xMax = 0;
_.xMidPoint = 0;
_.xMin = 0;
_.xScaleMin = 0;
_.yMax = 0;
_.yMin = 0;
_.yScaleMin = 0;
var Lcom_domo_charting_base_LatLongProjector_2_classLit = createForClass('com.domo.charting.base', 'LatLongProjector', 241);
function LatLongProjectorLambert(){
  LatLongProjector.call(this);
}

defineClass(356, 241, {}, LatLongProjectorLambert);
_.project = function project_0(point){
  var F, lambda, lambda0, n, psi, psi0, psi1, psi2, roe, roe0, sp1, sp2, x_0, y_0;
  lambda = point.x_0 * $intern_6;
  psi = point.y_0 * $intern_6;
  lambda0 = this.xMidPoint * $intern_6;
  psi0 = (this.yMax + this.yMin) / 2 * $intern_6;
  sp1 = this.yMin + (this.yMax - this.yMin) / 6;
  sp2 = this.yMax - (this.yMax - this.yMin) / 6;
  psi1 = sp1 * $intern_6;
  psi2 = sp2 * $intern_6;
  n = $wnd.Math.log($wnd.Math.cos(psi1) * (1 / $wnd.Math.cos(psi2))) / $wnd.Math.log($wnd.Math.tan($intern_15 + psi2 / 2) / $wnd.Math.tan($intern_15 + psi1 / 2));
  F = $wnd.Math.cos(psi1) * $wnd.Math.pow($wnd.Math.tan($intern_15 + psi1 / 2), n) / n;
  roe0 = F * $wnd.Math.pow(1 / $wnd.Math.tan($intern_15 + psi0 / 2), n);
  roe = F * $wnd.Math.pow(1 / $wnd.Math.tan($intern_15 + psi / 2), n);
  x_0 = roe * $wnd.Math.sin(n * (lambda - lambda0));
  y_0 = roe0 - roe * $wnd.Math.cos(n * (lambda - lambda0));
  y_0 = -(y_0 - this.yMax);
  return new CFPoint(x_0, y_0);
}
;
var Lcom_domo_charting_base_LatLongProjectorLambert_2_classLit = createForClass('com.domo.charting.base', 'LatLongProjectorLambert', 356);
function LatLongProjectorMiller(){
  LatLongProjector.call(this);
}

defineClass(357, 241, {}, LatLongProjectorMiller);
_.project = function project_1(point){
  var lambda, lambda0, psi, x_0, y_0;
  point = $long180(this, point);
  lambda = point.x_0 * $intern_6;
  psi = point.y_0 * $intern_6;
  lambda0 = this.xMidPoint * $intern_6;
  x_0 = lambda - lambda0;
  y_0 = -1.25 * $wnd.Math.log($wnd.Math.tan($intern_15 + psi * 0.4));
  return new CFPoint(x_0, y_0);
}
;
var Lcom_domo_charting_base_LatLongProjectorMiller_2_classLit = createForClass('com.domo.charting.base', 'LatLongProjectorMiller', 357);
function $$init(this$static){
  this$static.NODATA_CLR = new CFColor_2('#E6E6E6');
  this$static.rangeComps = new ArrayList;
  this$static.legendComponents = new ArrayList;
  this$static.showRangeMinAndMax = true;
  this$static.curAnimRange = -1;
  this$static.hoverGEAry = new ArrayList;
  this$static.legendMarkerSize = 20;
  this$static.showSideLegend = true;
  this$static.rangeMap = new HashMap;
  this$static.legendBnds = new CFRect(740, 5, 220, 0);
  this$static.rangeCompMap = new HashMap;
  this$static.supportsZooming = false;
  this$static.zoomBtnSize = 16;
  this$static.scaleFactor = 1;
  this$static.mapOffset = new CFPoint(0, 0);
  this$static.dataLabelBkgFillAlpha = 255;
  this$static.datalabelFontSize = 14;
  this$static.hoverNonGeoNonSelectedColor = $duplicate_0(($clinit_CFColor() , DISABLED_LIGHT_GRAY));
  this$static.hoverNonSelectedGrayLegend = new CFColor_0(229, 229, 229, 255);
  this$static.regionBorderColor = $duplicate_0(WHITE);
  this$static.unmappedRows = new ArrayList;
  this$static.mappedRows = new ArrayList;
  this$static.autoZoom = false;
  this$static.initalScalingFromDataSet = false;
  this$static.hideNoDataShapes = false;
}

function $addDataLabelsToFirstAreaLayer(this$static, displayRect, scale){
  var layer;
  layer = $getFirstAreaLayer(this$static);
  !!layer && $addDataLabels(layer, this$static.rnd, displayRect, scale);
}

function $addHoverShapesForComponent(this$static, mapHoverComp, rnd){
  var clipShape, endClipShape, fillClr, ge, ge$iterator, geLegendText, height, hl, hoverColor, hoverFill, hoverGE, hoverShape, layer, legBnds, legFont, legendStr, liiSelected, lineAboveVal, lineAboveValPath, mapComp, mapComp$iterator, mapShape, mapShapePath, markerRect, pctBnds, pctFont, point, primaryFont, range, rect, ti, tlBnds, top_0, valBnds, valFont;
  hoverGE = new GraphicElement;
  hoverShape = new CFShape_0(null, new CFFill($duplicate_0(($clinit_CFColor() , WHITE))), new CFStroke_1('#DCDCDC', 1));
  if (this$static.hoverNonGeoStyle) {
    fillClr = this$static.NODATA_CLR;
    !!mapHoverComp.range && !!mapHoverComp.range.origMarkerFillColor && (fillClr = $duplicate_0(mapHoverComp.range.origMarkerFillColor));
    hoverShape = new CFShape_0(null, new CFFill(fillClr), new CFStroke_1('#DCDCDC', 1));
    $setFillColor(mapHoverComp, fillClr);
    layer = mapHoverComp.layer;
    for (mapComp$iterator = new ArrayList$1(layer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      mapComp != mapHoverComp && $setFillColor(mapComp, this$static.hoverNonGeoNonSelectedColor);
    }
  }
   else {
    if (!$equals_2(mapHoverComp.name_0, 'Unmapped')) {
      if (this$static.supportsZooming && !!this$static.viewPort) {
        clipShape = new CFShape_1(this$static.viewPort, null, null);
        clipShape.isClip = true;
        !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
        $add_1(hoverGE.shapeAry, clipShape);
      }
      for (ge$iterator = mapHoverComp.geAry.iterator(); ge$iterator.hasNext_0();) {
        ge = castTo(ge$iterator.next_1(), 12);
        mapShape = castTo($get_2(ge.shapeAry, 0), 6);
        mapShapePath = $duplicate_3(mapShape.path);
        hoverColor = mapHoverComp.origFillColor;
        if (!!hoverColor && $isShowAsFiltered(mapHoverComp) && !!this$static.chart && $usingCardBus(this$static.chart) && this$static.data_0.numFilteredRows > 0)
          hoverColor = $deSaturateAndLighten(hoverColor, 0.1, 0.5);
        else if (this$static.editMode) {
          hoverColor = new CFColor_2('CDCDCD');
          $setHoverText_0(mapHoverComp, $getLongName(mapHoverComp));
        }
        if (hoverColor) {
          hoverShape = new CFShape_0(mapShapePath, new CFFill(hoverColor), mapShape.stroke_0);
          !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
          $add_1(hoverGE.shapeAry, hoverShape);
        }
      }
      if (this$static.supportsZooming && !!this$static.viewPort) {
        endClipShape = new CFShape;
        endClipShape.isClip = true;
        !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
        $add_1(hoverGE.shapeAry, endClipShape);
      }
    }
    if (this$static.editMode && mapHoverComp.hoverText != null && $trim(mapHoverComp.hoverText).length > 0) {
      if (rnd.supportsNativeHover()) {
        point = $getLogicalCenter(mapHoverComp, this$static.curScale);
        !point && (point = new CFPoint($getCenterX(mapHoverComp.bnds), mapHoverComp.bnds.y_0));
        rnd.showHoverText(round_int(point.x_0), round_int(point.y_0), mapHoverComp.hoverText);
      }
       else {
        primaryFont = new CFFont_0(null, 12, WHITE);
        hl = new HoverLabel(this$static);
        point = $getLogicalCenter(mapHoverComp, this$static.curScale);
        !point && (point = new CFPoint($getCenterX(mapHoverComp.bnds), mapHoverComp.bnds.y_0));
        rect = $getTextRectForPoint(hl, rnd, primaryFont, point, mapHoverComp.hoverText, 0, true, false);
        rect = $keepRectInBounds(rect, this$static.bnds, true);
        $addGEItems(hoverGE, $getCaptionGraphicElement(rnd, primaryFont, mapHoverComp.hoverText, point, rect, 0));
      }
    }
  }
  $add_1(this$static.hoverGEAry, hoverGE);
  if (!!this$static.topLineComp && this$static.bnds.width_0 > 800 && this$static.bnds.height_0 >= 350 && !this$static.editMode && this$static.showSideLegend) {
    tlBnds = this$static.topLineComp.bnds;
    top_0 = tlBnds.y_0;
    if (mapHoverComp.pctStr != null && !this$static.hideValues) {
      pctFont = new CFFont_0(null, 18, new CFColor_2('#8A8D8F'));
      height = (isNaN_0(pctFont.lineHeight) && (pctFont.lineHeight = rnd.measureText_0('A', pctFont).height_0) , pctFont.lineHeight);
      top_0 -= height + 4;
      pctBnds = new CFRect(tlBnds.x_0, top_0, tlBnds.width_0, height);
      drawTextInBoundsWithGE(hoverGE, rnd, pctBnds, $getPctStr(mapHoverComp), pctFont);
    }
    if (mapHoverComp.valStr != null && !this$static.hideValues) {
      valFont = new CFFont_0(null, 18, $getTextColor(this$static.chart.palette));
      height = (isNaN_0(valFont.lineHeight) && (valFont.lineHeight = rnd.measureText_0('A', valFont).height_0) , valFont.lineHeight);
      top_0 -= height + 4;
      valBnds = new CFRect(tlBnds.x_0, top_0, tlBnds.width_0, height);
      drawTextInBoundsWithGE(hoverGE, rnd, valBnds, mapHoverComp.valStr, valFont);
    }
     else {
      top_0 -= 3;
    }
    legendStr = mapHoverComp.legendStr;
    legendStr == null && $getLongName(mapHoverComp) != null && (legendStr = $getLongName(mapHoverComp));
    if (legendStr != null) {
      legFont = new CFFont_0(null, 18, $getTextColor(this$static.chart.palette));
      ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, legendStr, legFont, tlBnds.width_0, -1, -1));
      height = ti.textDimension.height_0;
      this$static.totalAmtComp?(top_0 = $getBottom(this$static.totalAmtComp.bnds) + 8):(top_0 -= height);
      legBnds = new CFRect(tlBnds.x_0 + 25, top_0, tlBnds.width_0, height);
      geLegendText = drawTextInBounds(rnd, legBnds, legendStr, legFont, 0, 0, 18, null, null);
      $addGEItems(hoverGE, geLegendText);
      markerRect = new CFRect(tlBnds.x_0, top_0 + 6, 12, 12);
      hoverFill = hoverShape.fill_0;
      !hoverFill.color_0 && $setColor_0(hoverFill, this$static.NODATA_CLR);
      $equals_2(mapHoverComp.name_0, 'Unmapped')?$addShape(hoverGE, new CFShape_1(markerRect, hoverShape.fill_0, hoverShape.stroke_0)):$addShape(hoverGE, new CFShape_1(markerRect, hoverShape.fill_0, hoverShape.stroke_0));
      lineAboveValPath = new CFPath_1(tlBnds.x_0, top_0 - 4, tlBnds.x_0 + tlBnds.width_0, top_0 - 4);
      lineAboveVal = new CFShape_0(lineAboveValPath, null, castTo($get_2(castTo(this$static.topLineComp.geAry.get_1(0), 12).shapeAry, 0), 6).stroke_0);
      !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
      $add_1(hoverGE.shapeAry, lineAboveVal);
    }
  }
  range = mapHoverComp.range;
  if (range) {
    $setToSelected(range, this$static.hoverGEAry, this$static.showRangeMinAndMax, this$static);
    liiSelected = $getLegendItemForRange(this$static, range);
    !!liiSelected && $setValuesFromColor(liiSelected.fill_0.color_0, range.origMarkerFillColor);
  }
}

function $addLabelsForFirstPointLayer(this$static, displayRect){
  var layer;
  layer = $getFirstPointLayer(this$static);
  !!layer && $addPointLabels(layer, this$static.rnd, displayRect);
}

function $addNoDataUnmappedLegendMarker(this$static, left, top_0, right, markerTextLeft, name_0, index_0){
  var back_0, ge, geMinVal, legValFont, markerComp, markerRect, markerShape, range, rangeCompBase, text_0;
  rangeCompBase = new Component(this$static.chart, 'RangeBase' + name_0);
  $setBounds(rangeCompBase, new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize));
  ge = new GraphicElement_0(new CFShape_1(new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize), new CFFill(($clinit_CFColor() , TRANSPARENT)), new CFStroke(TRANSPARENT, 1)));
  $setDataObject(ge, new Integer(index_0));
  rangeCompBase.geAry.add_0(ge);
  $add_1(this$static.legendComponents, rangeCompBase);
  markerComp = new Component(this$static.chart, 'Range' + name_0);
  $setBounds(markerComp, new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize));
  markerRect = new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize);
  if ($equals_2(name_0, 'NoData')) {
    markerShape = new CFShape_1(markerRect, new CFFill_1('#CDCDCD'), new CFStroke(WHITE, 1));
  }
   else {
    $inflate(markerRect, -1);
    markerShape = new CFShape_1(markerRect, new CFFill($duplicate_0(WHITE)), new CFStroke_1('#CDCDCD', 1));
  }
  markerComp.geAry.add_0(new GraphicElement_0(markerShape));
  legValFont = new CFFont_0(null, 14, $getTextColor(this$static.chart.palette));
  range = new MapRange(markerComp, index_0);
  range.noDataRange = true;
  range.name_0 = 'RNG_Range' + name_0;
  text_0 = getString('NO_DATA', this$static.chart.locale);
  if ($equals_2(name_0, 'Unmapped')) {
    text_0 = getString('UNMAPPED_DATA', this$static.chart.locale);
    back_0 = $getFirstAreaLayer(this$static);
    !!back_0 && !!back_0.unmappedNames && back_0.unmappedNames.array.length > 0 && $addDrillFilter_1(range, back_0.unmappedNames, $getRow(this$static.data_0, 0).parentName, $getRow(this$static.data_0, 0));
  }
  geMinVal = ($clinit_StrUtil() , drawTextInBounds(this$static.rnd, new CFRect(markerTextLeft, top_0, right - markerTextLeft, this$static.legendMarkerSize), text_0, legValFont, 0, VALIGN_MIDDLE, 14, null, null));
  markerComp.geAry.add_0(geMinVal);
  $add_0(this$static.rangeComps, 0, range);
}

function $addZoomPanCitiesChartOptions(this$static){
  this$static.scaleFactor == 1?this$static.chartOptions.remove_0('map_zoom'):this$static.chartOptions.put('map_zoom', '' + this$static.scaleFactor);
  this$static.mapOffset.x_0 == 0?this$static.chartOptions.remove_0('map_pan_x'):this$static.chartOptions.put('map_pan_x', '' + this$static.mapOffset.x_0);
  this$static.mapOffset.y_0 == 0?this$static.chartOptions.remove_0('map_pan_y'):this$static.chartOptions.put('map_pan_y', '' + this$static.mapOffset.y_0);
  $chartStateChanged_0(this$static.chart);
}

function $applyRangesToData(this$static){
  var bkgLayer, curRange, mapComp, mapComp$iterator, pctStr, pctValue, rangeIndex, row, row$iterator, total, value_0;
  if (this$static.rangesApplied || this$static.editMode)
    return;
  bkgLayer = $getFirstAreaLayer(this$static);
  if (!bkgLayer)
    return;
  if (!$getColumn(this$static.data_0, 0))
    return;
  total = $getSum($getColumn(this$static.data_0, 0));
  if (!!bkgLayer && !!this$static.rangeValues && this$static.rangeValues.array.length > 0) {
    if (bkgLayer.dataShapeAry) {
      for (mapComp$iterator = new ArrayList$1(bkgLayer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
        mapComp = castTo($next_3(mapComp$iterator), 47);
        if (mapComp.row) {
          rangeIndex = $getRangeIndexForValue(this$static, mapComp.value_0);
          if (rangeIndex != -1) {
            value_0 = mapComp.value_0;
            curRange = castTo($get_2(this$static.rangeComps, rangeIndex), 76);
            $setFillColor(mapComp, $getRangeColorForIndex(this$static.rangeColors, rangeIndex));
            !!mapComp.row && !!mapComp.fillColor_0 && (mapComp.row.showAsFiltered?mapComp.origFillColor?$applyOverrideColor(mapComp, $deSaturateAndLighten(mapComp.origFillColor, 0.9, 0.4)):$applyOverrideColor(mapComp, $deSaturateAndLighten(mapComp.fillColor_0.color_0, 0.9, 0.4)):(mapComp.overrideColor = null , mapComp.overrideColor?$updateFillColor(mapComp, mapComp.overrideColor):$updateFillColor(mapComp, mapComp.origFillColor)));
            mapComp.range = curRange;
            if (!isNaN(total) && total != 0 && !this$static.hideTotal) {
              pctValue = value_0 / total;
              pctStr = $formatPercentNumber(this$static.numberFormatter, pctValue, true);
              $equals_2(pctStr.substr(0, 1), '(')?(mapComp.pctStr = pctStr):(mapComp.pctStr = '(' + pctStr + ')');
            }
            mapComp.valStr = $formatNumber_1(this$static.numberFormatter, value_0);
            mapComp.value_0 = value_0;
            $add_1(curRange.shapes, mapComp);
          }
        }
        if (!mapComp.range && mapComp.valStr == null) {
          this$static.hasNoDataShapes = true;
          $setFillColor(mapComp, this$static.NODATA_CLR);
          mapComp.pctStr = getString('NO_DATA', this$static.chart.locale);
        }
      }
    }
  }
  if (!!this$static.unmappedRows && this$static.unmappedRows.array.length > 0) {
    bkgLayer.unmappedData = 0;
    !bkgLayer.unmappedNames && (bkgLayer.unmappedNames = new ArrayList);
    for (row$iterator = new ArrayList$1(this$static.unmappedRows); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 7);
      value_0 = $getValue($getFirstCell(row));
      isNaN(value_0) || (bkgLayer.unmappedData += value_0);
      $add_1(bkgLayer.unmappedNames, $getName(row));
    }
  }
  this$static.rangesApplied = true;
}

function $buildMappedUnmappedLists(this$static){
  var bkgLayer, comp, rootMapName, row, row$iterator;
  if (!this$static.dataMapped && !!this$static.data_0) {
    this$static.mappedRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.unmappedRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    bkgLayer = $getFirstAreaLayer(this$static);
    if (bkgLayer) {
      rootMapName = $getRootMapName(this$static);
      for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        comp = $findMapShapeForDataAndAddDrillFilter(bkgLayer, $getName(row), row.parentName, row, rootMapName);
        if (!comp)
          $add_1(this$static.unmappedRows, row);
        else {
          comp.row = row;
          if (!!$getFirstCell(row) && !isNaN_0($getValue($getFirstCell(row)))) {
            isNaN_0(comp.value_0) && (comp.value_0 = 0);
            comp.value_0 += $getValue($getFirstCell(row));
          }
          $add_1(this$static.mappedRows, row);
        }
      }
    }
  }
  this$static.dataMapped = true;
}

function $clearAllZoomControlFlags(this$static){
  this$static.showZoomInControlHover = false;
  this$static.showZoomOutControlHover = false;
  this$static.showCityControlInHover = false;
  this$static.showDataTableControlHover = false;
  this$static.showGroupElementsControlHover = false;
}

function $clearRangeHighlight(this$static){
  var lii, range, range$iterator;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    range.showAsFiltered?$setValuesFromColor(range.markerFillColor, $deSaturateAndLighten(range.origMarkerFillColor, 0.9, 0.4)):!!range.markerFillColor && !!range.origMarkerFillColor && $setValuesFromColor(range.markerFillColor, range.origMarkerFillColor);
    lii = $getLegendItemForRange(this$static, range);
    !!lii && $setValuesFromColor(lii.fill_0.color_0, $getMarkerFillColor(range));
    $useCurrentColorForAllShapes(range);
    $setRangeTextColor(range, $getTextColor(this$static.chart.palette), true);
  }
}

function $clearZoomControls(this$static){
  this$static.zoomBackGroundControl = null;
  this$static.zoomInControl = null;
  this$static.zoomOutControl = null;
  this$static.citiesControl = null;
  this$static.dataTableControl = null;
  this$static.groupElementsControl = null;
}

function $createBottomLegend(this$static, rnd, legBnds){
  var ge, geMaxVal, geMinVal, geNoData, halfMarkerSize, hideNoDataForWidth, i, left, legValFont, markerComp, markerTop, maxDim, maxVal, minDim, minVal, noDataDim, noDataMarker, noDataStr, noDataWidth, range, rangeCompBase, rangeMaxTextComp, rangeMinTextComp, rangeNoDataComp, top_0, totalWidth;
  if (!!this$static.legend && this$static.hasRangeText) {
    $setBounds_1(this$static.legend, legBnds);
    instanceOf(this$static.legend, 66) && $formatFromGraph_1(castTo(this$static.legend, 66), rnd);
    this$static.legend.geAry.clear_0();
    this$static.legend.createDrawObjects();
    return;
  }
  halfMarkerSize = round_int(this$static.legendMarkerSize / 2);
  top_0 = round_int(legBnds.y_0);
  left = legBnds.x_0;
  round_int(legBnds.x_0 + legBnds.width_0);
  round_int(left) + this$static.legendMarkerSize + halfMarkerSize;
  legValFont = new CFFont_0(null, 14, $getTextColor(this$static.chart.palette));
  minVal = $formatNumber_1(this$static.numberFormatter, castTo($get_2(this$static.rangeValues, 0), 48).min_0);
  maxVal = $formatNumber_1(this$static.numberFormatter, castTo($get_2(this$static.rangeValues, this$static.rangeValues.array.length - 1), 48).max_0);
  noDataStr = getString('NO_DATA', this$static.chart.locale);
  minDim = rnd.measureText_0(minVal, legValFont);
  maxDim = rnd.measureText_0(maxVal, legValFont);
  noDataDim = rnd.measureText_0(noDataStr, legValFont);
  totalWidth = minDim.width_0 + maxDim.width_0 + (this$static.rangeValues.array.length + 1) * this$static.legendMarkerSize;
  noDataWidth = this$static.legendMarkerSize * 3.5 + noDataDim.width_0;
  hideNoDataForWidth = false;
  totalWidth + noDataWidth > legBnds.width_0 - 20 && (hideNoDataForWidth = true);
  this$static.hasNoDataShapes && !hideNoDataForWidth && (totalWidth += noDataWidth);
  left = 10;
  legBnds.width_0 > 600 && (left = legBnds.x_0 + (legBnds.width_0 - totalWidth) / 2);
  rangeMinTextComp = new Component(this$static.chart, 'MinRngText');
  geMinVal = ($clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(left, top_0, minDim.width_0 + 1, legBnds.height_0), minVal, legValFont, 0, VALIGN_MIDDLE, 14, null, null));
  !!rangeMinTextComp.clipPath && (geMinVal.clipPath = rangeMinTextComp.clipPath);
  rangeMinTextComp.geAry.add_0(geMinVal);
  $add_1(this$static.legendComponents, rangeMinTextComp);
  left += minDim.width_0 + halfMarkerSize;
  rangeMaxTextComp = new Component(this$static.chart, 'MaxRngText');
  geMaxVal = drawTextInBounds(rnd, new CFRect(left + this$static.rangeValues.array.length * this$static.legendMarkerSize + halfMarkerSize, top_0, maxDim.width_0 + 1, legBnds.height_0), maxVal, legValFont, 0, VALIGN_MIDDLE, 14, null, null);
  !!rangeMaxTextComp.clipPath && (geMaxVal.clipPath = rangeMaxTextComp.clipPath);
  rangeMaxTextComp.geAry.add_0(geMaxVal);
  $add_1(this$static.legendComponents, rangeMaxTextComp);
  markerTop = top_0 + (legBnds.height_0 - this$static.legendMarkerSize) / 2;
  for (i = 0; i < this$static.rangeValues.array.length; i++) {
    rangeCompBase = new Component(this$static.chart, 'RangeBase' + i);
    $setBounds(rangeCompBase, new CFRect(left, markerTop, this$static.legendMarkerSize, this$static.legendMarkerSize));
    ge = new GraphicElement_0(new CFShape_1(new CFRect(left, markerTop, this$static.legendMarkerSize, this$static.legendMarkerSize), new CFFill(($clinit_CFColor() , TRANSPARENT)), new CFStroke(TRANSPARENT, 1)));
    $setDataObject(ge, new Integer(i + 1));
    rangeCompBase.geAry.add_0(ge);
    $add_1(this$static.legendComponents, rangeCompBase);
    range = castTo($get_1(this$static.rangeCompMap, valueOf(i)), 76);
    markerComp = range.marker;
    $setBounds(markerComp, new CFRect(left, markerTop, this$static.legendMarkerSize, this$static.legendMarkerSize));
    $setPath(castTo($get_2(castTo(markerComp.geAry.get_1(0), 12).shapeAry, 0), 6), new CFPath_3(markerComp.bnds));
    left += this$static.legendMarkerSize;
  }
  left += maxDim.width_0 + this$static.legendMarkerSize * 2.5;
  if (this$static.hasNoDataShapes && !hideNoDataForWidth) {
    rangeNoDataComp = new Component(this$static.chart, 'NoDataRange');
    noDataMarker = new CFShape_1(new CFRect(left, markerTop, this$static.legendMarkerSize, this$static.legendMarkerSize), new CFFill_1('#CDCDCD'), new CFStroke(($clinit_CFColor() , WHITE), 1));
    geNoData = drawTextInBounds(rnd, new CFRect(left + this$static.legendMarkerSize + halfMarkerSize, top_0, noDataDim.width_0 + 1, legBnds.height_0), noDataStr, legValFont, 0, VALIGN_MIDDLE, 14, null, null);
    !geNoData.shapeAry && (geNoData.shapeAry = new ArrayList);
    $add_0(geNoData.shapeAry, 0, noDataMarker);
    !!rangeNoDataComp.clipPath && (geNoData.clipPath = rangeNoDataComp.clipPath);
    rangeNoDataComp.geAry.add_0(geNoData);
    $add_1(this$static.legendComponents, rangeNoDataComp);
  }
}

function $createCitiesControl(this$static){
  var citiesRect, citiesRoundedRect, cityBnds, cityFill, cityLayer, cityPath, cityScale, cityShape, cityShapeRect, fill, graphicElement, mostlyWhite, showDarkCities, stroke, stroke0, xOffset, yOffset;
  cityLayer = $getFirstPointLayer(this$static);
  if (!cityLayer || cityLayer.dataShapeAry.array.length == 0)
    return;
  mostlyWhite = (this$static.showCityControlInHover?(fill = new CFFill(new CFColor_0(242, 242, 242, 200))):(fill = new CFFill(new CFColor_0(255, 255, 255, 200))) , fill);
  stroke0 = (this$static.showCityControlInHover?(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)):(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)) , stroke);
  showDarkCities = !this$static.showCityNames && this$static.showCityControlInHover || this$static.showCityNames && !this$static.showCityControlInHover;
  cityFill = showDarkCities?new CFFill_1('#666666'):new CFFill_1('#999999');
  citiesRect = new CFRect(this$static.zoomXY.x_0, this$static.zoomXY.y_0 + this$static.zoomBtnSize * 2 + 8, this$static.zoomBtnSize, this$static.zoomBtnSize);
  citiesRoundedRect = new CFPath_7(getRoundedRectPath(citiesRect, 3));
  cityShapeRect = new CFShape_0(citiesRoundedRect, mostlyWhite, stroke0);
  cityShapeRect.comp = this$static;
  cityShapeRect.dataObject = '{"internal": "citytoggle"}';
  cityPath = new CFPath_8('M0 4L4 4L4 2L6 0L8 2L8 7L12 7L12 14L0 14Z M1 5L1 7L3 7L3 5ZM1 8L1 10L3 10L3 8ZM1 11L1 13L3 13L3 11Z M5 2L5 4L7 4L7 2ZM5 5L5 7L7 7L7 5ZM5 8L5 10L7 10L7 8ZM5 11L5 13L7 13L7 11Z M9 8L9 10L11 10L11 8ZM9 11L9 13L11 13L11 11Z');
  cityScale = 0.8571428571428571;
  this$static.chart.mobile && (cityScale = this$static.zoomBtnSize / 20);
  $scale_1(cityPath, cityScale, 0, 0);
  cityBnds = $getBoundsForPath(cityPath);
  xOffset = (this$static.zoomBtnSize - cityBnds.width_0) / 2;
  yOffset = (this$static.zoomBtnSize - cityBnds.height_0) / 2;
  $translate(cityPath, this$static.zoomXY.x_0 + xOffset, this$static.zoomXY.y_0 + this$static.zoomBtnSize * 2 + 8 + yOffset);
  cityShape = new CFShape_0(cityPath, cityFill, null);
  !!cityShape.path && (cityShape.path.shouldAntiAlias = true);
  cityShape.dataObject = '{"internal": "citytoggle"}';
  graphicElement = new GraphicElement_0(cityShapeRect);
  !graphicElement.shapeAry && (graphicElement.shapeAry = new ArrayList);
  $add_1(graphicElement.shapeAry, cityShape);
  this$static.citiesControl = graphicElement;
}

function $createDataTableControl(this$static){
  var fill, graphicElement, mostlyWhite, stroke, stroke0, tableRect, tableShapeRect;
  if (!this$static.editMode)
    return;
  mostlyWhite = (this$static.showDataTableControlHover?(fill = new CFFill(new CFColor_0(242, 242, 242, 200))):(fill = new CFFill(new CFColor_0(255, 255, 255, 200))) , fill);
  stroke0 = (this$static.showDataTableControlHover?(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)):(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)) , stroke);
  tableRect = new CFRect(this$static.zoomXY.x_0, this$static.zoomXY.y_0 + this$static.zoomBtnSize * 3 + 8, this$static.zoomBtnSize, this$static.zoomBtnSize);
  tableShapeRect = new CFShape_1(tableRect, mostlyWhite, stroke0);
  tableShapeRect.comp = this$static;
  tableShapeRect.dataObject = 'datatable';
  graphicElement = new GraphicElement_0(tableShapeRect);
  this$static.dataTableControl = graphicElement;
}

function $createGroupElementsControl(this$static){
  var fill, graphicElement, groupRect, groupShapeRect, mostlyWhite, stroke, stroke0;
  if (!this$static.editMode)
    return;
  mostlyWhite = (this$static.showGroupElementsControlHover?(fill = new CFFill(new CFColor_0(242, 242, 242, 200))):(fill = new CFFill(new CFColor_0(255, 255, 255, 200))) , fill);
  stroke0 = (this$static.showGroupElementsControlHover?(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)):(stroke = new CFStroke(new CFColor_2('#BBBBBBAA'), 1)) , stroke);
  groupRect = new CFRect(this$static.zoomXY.x_0, this$static.zoomXY.y_0 + this$static.zoomBtnSize * 4 + 8, this$static.zoomBtnSize, this$static.zoomBtnSize);
  groupShapeRect = new CFShape_1(groupRect, mostlyWhite, stroke0);
  groupShapeRect.comp = this$static;
  groupShapeRect.dataObject = 'groupelements';
  graphicElement = new GraphicElement_0(groupShapeRect);
  this$static.groupElementsControl = graphicElement;
}

function $createRangeMarkerComps(this$static){
  var i, markerComp, markerShape, range;
  for (i = this$static.rangeValues.array.length - 1; i >= 0; i--) {
    markerComp = new Component(this$static.chart, 'Range' + i);
    markerShape = new CFShape_1(new CFRect(-100, -100, this$static.legendMarkerSize, this$static.legendMarkerSize), new CFFill($getRangeColorForIndex(this$static.rangeColors, i)), new CFStroke(($clinit_CFColor() , WHITE), 1));
    markerComp.geAry.add_0(new GraphicElement_0(markerShape));
    range = new MapRange(markerComp, i);
    range.name_0 = 'RNG_Range' + i;
    $getMarkerFillColor(range);
    if (!!this$static.rangeShowAsFiltered && this$static.rangeShowAsFiltered.array.length > i && checkNotNull(castToBoolean($get_2(this$static.rangeShowAsFiltered, i)))) {
      range.showAsFiltered = true;
      range.showAsFiltered?$setValuesFromColor(range.markerFillColor, $deSaturateAndLighten(range.origMarkerFillColor, 0.9, 0.4)):!!range.markerFillColor && !!range.origMarkerFillColor && $setValuesFromColor(range.markerFillColor, range.origMarkerFillColor);
    }
    $add_0(this$static.rangeComps, 0, range);
    $put_0(this$static.rangeCompMap, valueOf(i), range);
  }
}

function $createSideLegend(this$static, rnd, legBnds){
  var bottomLineComp, bottomLinePath, ge, geMaxVal, geMinVal, halfMarkerSize, i, left, legValFont, lineAboveTotalComp, lineAboveTotalPath, lineWidth, markerComp, markerTextLeft, range, rangeCompBase, rangeMaxComp, rangeMinComp, rangesDefined, right, rng, tbTotalLabelComp, text_0, top_0, topLinePath, total, totalText2GE, totalTextGE;
  halfMarkerSize = round_int(this$static.legendMarkerSize / 2);
  top_0 = round_int(legBnds.y_0);
  left = round_int(legBnds.x_0);
  right = round_int(legBnds.x_0 + legBnds.width_0);
  lineWidth = round_int(legBnds.width_0) - 50;
  markerTextLeft = left + this$static.legendMarkerSize + halfMarkerSize;
  if (!this$static.hideTotal) {
    lineAboveTotalComp = new Component(this$static.chart, 'lineAboveTotal');
    $setBounds(lineAboveTotalComp, new CFRect(left, top_0, lineWidth, 0));
    lineAboveTotalPath = new CFPath_1(left, top_0, left + lineWidth, top_0);
    lineAboveTotalComp.geAry.add_0(new GraphicElement_0(new CFShape_0(lineAboveTotalPath, null, new CFStroke(($clinit_CFColor() , DISABLED_LIGHT_GRAY), 1))));
    $add_1(this$static.legendComponents, lineAboveTotalComp);
    top_0 += 5;
    tbTotalLabelComp = new Component(this$static.chart, 'tbTotalLbl');
    $setBounds(tbTotalLabelComp, new CFRect(left, top_0, 42, 24));
    totalText2GE = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, tbTotalLabelComp.bnds, getString('TOTAL', this$static.chart.locale), new CFFont_0(null, 18, $getTextColor(this$static.chart.palette)), 0, VALIGN_MIDDLE, 5, null, null));
    tbTotalLabelComp.geAry.add_0(totalText2GE);
    $add_1(this$static.legendComponents, tbTotalLabelComp);
    top_0 += 25;
    this$static.totalAmtComp = new Component(this$static.chart, 'tbTotalAmt');
    this$static.totalAmtComp.setBounds(new CFRect(left, top_0, 138, 32));
    total = $getSum($getColumn(this$static.data_0, 0));
    totalTextGE = (null , drawTextInBounds(rnd, this$static.totalAmtComp.bnds, $formatNumber_1(this$static.legend.numberFormatter, total), new CFFont_0(null, 18, $getTextColor(this$static.chart.palette)), 0, VALIGN_MIDDLE, 5, null, null));
    this$static.totalAmtComp.geAry.add_0(totalTextGE);
    $add_1(this$static.legendComponents, this$static.totalAmtComp);
    top_0 += 35;
  }
  this$static.hideValues?(top_0 += 50):(top_0 += 125);
  this$static.topLineComp = new Component(this$static.chart, 'topLine');
  this$static.topLineComp.setBounds(new CFRect(left, top_0, lineWidth, 0));
  topLinePath = new CFPath_1(left, top_0, left + lineWidth, top_0);
  this$static.topLineComp.geAry.add_0(new GraphicElement_0(new CFShape_0(topLinePath, null, new CFStroke(($clinit_CFColor() , DISABLED_LIGHT_GRAY), 1))));
  $add_1(this$static.legendComponents, this$static.topLineComp);
  top_0 += 20;
  rangesDefined = $validRangesAreDefined(this$static);
  if (rangesDefined) {
    for (i = this$static.rangeValues.array.length - 1; i >= 0; i--) {
      rangeCompBase = new Component(this$static.chart, 'RangeBase' + i);
      $setBounds(rangeCompBase, new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize));
      ge = new GraphicElement_0(new CFShape_1(new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize), new CFFill(TRANSPARENT), new CFStroke(TRANSPARENT, 1)));
      $setDataObject(ge, new Integer(i + 1));
      rangeCompBase.geAry.add_0(ge);
      $add_1(this$static.legendComponents, rangeCompBase);
      range = castTo($get_1(this$static.rangeCompMap, valueOf(i)), 76);
      markerComp = range.marker;
      $setBounds(markerComp, new CFRect(left, top_0, this$static.legendMarkerSize, this$static.legendMarkerSize));
      $setPath(castTo($get_2(castTo(markerComp.geAry.get_1(0), 12).shapeAry, 0), 6), new CFPath_3(markerComp.bnds));
      legValFont = new CFFont_0(null, 14, $getTextColor(this$static.chart.palette));
      if (i == this$static.rangeValues.array.length - 1 && !this$static.hasRangeText) {
        rangeMaxComp = new Component(this$static.chart, 'MaxRng-' + i);
        geMaxVal = ($clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(markerTextLeft, top_0 - halfMarkerSize, right - markerTextLeft, this$static.legendMarkerSize), $formatNumber_1(this$static.legend.numberFormatter, castTo($get_2(this$static.rangeValues, i), 48).max_0), legValFont, 0, VALIGN_MIDDLE, 14, null, null));
        !!rangeMaxComp.clipPath && (geMaxVal.clipPath = rangeMaxComp.clipPath);
        rangeMaxComp.geAry.add_0(geMaxVal);
        range.textMax = rangeMaxComp;
      }
      rangeMinComp = new Component(this$static.chart, 'MinVal-' + i);
      if (this$static.hasRangeText && !!this$static.ranges_0 && this$static.ranges_0.array.length > i) {
        rng = castTo($get_2(this$static.ranges_0, i), 58);
        text_0 = '';
        !!rng && rng.text_0 != null && (text_0 = rng.text_0);
        geMinVal = ($clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(markerTextLeft, top_0, right - markerTextLeft, this$static.legendMarkerSize), text_0, legValFont, 0, VALIGN_MIDDLE, 14, null, null));
      }
       else 
        geMinVal = ($clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(markerTextLeft, top_0 + halfMarkerSize, right - markerTextLeft, this$static.legendMarkerSize), $formatNumber_1(this$static.legend.numberFormatter, castTo($get_2(this$static.rangeValues, i), 48).min_0), legValFont, 0, VALIGN_MIDDLE, 14, null, null));
      !!rangeMinComp.clipPath && !!geMinVal && (geMinVal.clipPath = rangeMinComp.clipPath);
      rangeMinComp.geAry.add_0(geMinVal);
      range.textMin = rangeMinComp;
      top_0 += this$static.legendMarkerSize;
    }
    top_0 += this$static.legendMarkerSize;
    if (this$static.hasNoDataShapes && !this$static.hideNoDataShapes) {
      $addNoDataUnmappedLegendMarker(this$static, left, top_0, right, markerTextLeft, 'NoData', -1);
      top_0 += this$static.legendMarkerSize;
    }
    if ($hasUnmappedData(this$static)) {
      $addNoDataUnmappedLegendMarker(this$static, left, top_0, right, markerTextLeft, 'Unmapped', -2);
      top_0 += this$static.legendMarkerSize;
    }
    (this$static.hasNoDataShapes || $hasUnmappedData(this$static)) && (top_0 += this$static.legendMarkerSize);
    bottomLineComp = new Component(this$static.chart, 'bottomLine');
    $setBounds(bottomLineComp, new CFRect(left, top_0, lineWidth, 0));
    bottomLinePath = new CFPath_1(left, top_0, left + lineWidth, top_0);
    bottomLineComp.geAry.add_0(new GraphicElement_0(new CFShape_0(bottomLinePath, null, new CFStroke(DISABLED_LIGHT_GRAY, 1))));
    $add_1(this$static.legendComponents, bottomLineComp);
  }
   else 
    this$static.hasNoDataShapes && !this$static.hideNoDataShapes && $addNoDataUnmappedLegendMarker(this$static, left, top_0, right, markerTextLeft, 'NoData', -1);
}

function $createZoomControls(this$static){
  var mostlyWhite, stroke0, zoomRect, roundedRect, zoomShape, graphicElement, plusMinusWidth, mostlyWhite_0, fill, zoomInRect, roundedRect_0, zoomInShape, ziPath, ziShape, stroke, graphicElement_0, plusMinusWidth_0, mostlyWhite_1, fill_0, zoomOutRect, roundedRect_1, zoomOutShape, zoPath, zoShape, stroke_0, graphicElement_1;
  if (this$static.supportsZooming && (this$static.chart.mapZoomEnabled || this$static.editMode)) {
    this$static.zoomXY = new CFPoint(this$static.bnds.x_0 + 2, this$static.bnds.y_0 + 2);
    this$static.chart.mobile && (this$static.zoomBtnSize = 44);
    mostlyWhite = new CFFill(new CFColor_0(255, 255, 255, 200));
    stroke0 = new CFStroke(new CFColor_2('#BBBBBBAA'), 1);
    zoomRect = new CFRect(this$static.zoomXY.x_0, this$static.zoomXY.y_0, this$static.zoomBtnSize, this$static.zoomBtnSize * 2);
    roundedRect = new CFPath_7(getRoundedRectPath(zoomRect, 3));
    $add(roundedRect, new CFPathElement_0(0, this$static.zoomXY.x_0 + 0.5, this$static.zoomXY.y_0 + this$static.zoomBtnSize));
    $add(roundedRect, new CFPathElement_0(1, this$static.zoomXY.x_0 + this$static.zoomBtnSize - 1, this$static.zoomXY.y_0 + this$static.zoomBtnSize));
    roundedRect.shouldAntiAlias = true;
    zoomShape = new CFShape_0(roundedRect, mostlyWhite, stroke0);
    zoomShape.comp = this$static;
    graphicElement = new GraphicElement_0(zoomShape);
    this$static.zoomBackGroundControl = graphicElement;
    plusMinusWidth = this$static.zoomBtnSize * $intern_16;
    mostlyWhite_0 = (this$static.showZoomInControlHover?(fill = new CFFill(new CFColor_0(242, 242, 242, 200))):(fill = new CFFill(new CFColor_0(255, 255, 255, 200))) , fill);
    zoomInRect = new CFRect(this$static.zoomXY.x_0 + 0.5, this$static.zoomXY.y_0 + 0.5, this$static.zoomBtnSize - 1, this$static.zoomBtnSize - 1);
    roundedRect_0 = new CFPath_7(getRoundedRectPath(zoomInRect, 3));
    zoomInShape = new CFShape_0(roundedRect_0, mostlyWhite_0, null);
    zoomInShape.comp = this$static;
    zoomInShape.dataObject = '{"internal": "zoomin"}';
    ziPath = new CFPath;
    $add(ziPath, new CFPathElement_0(0, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).x_0 - plusMinusWidth, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).y_0));
    $add(ziPath, new CFPathElement_0(1, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).x_0 + plusMinusWidth, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).y_0));
    $add(ziPath, new CFPathElement_0(0, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).x_0, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).y_0 - plusMinusWidth));
    $add(ziPath, new CFPathElement_0(1, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).x_0, (new CFPoint(zoomInRect.x_0 + zoomInRect.width_0 / 2, zoomInRect.y_0 + zoomInRect.height_0 / 2)).y_0 + plusMinusWidth));
    ziShape = new CFShape_0(ziPath, mostlyWhite_0, (this$static.showZoomInControlHover?(stroke = new CFStroke(new CFColor_2('#666666'), 1.5)):(stroke = new CFStroke(new CFColor_2('#999999'), 1)) , stroke));
    ziShape.dataObject = '{"internal": "zoomin"}';
    !!ziShape.path && (ziShape.path.shouldAntiAlias = true);
    graphicElement_0 = new GraphicElement_0(zoomInShape);
    !graphicElement_0.shapeAry && (graphicElement_0.shapeAry = new ArrayList);
    $add_1(graphicElement_0.shapeAry, ziShape);
    this$static.zoomInControl = graphicElement_0;
    plusMinusWidth_0 = this$static.zoomBtnSize * $intern_16;
    mostlyWhite_1 = (this$static.showZoomOutControlHover?(fill_0 = new CFFill(new CFColor_0(242, 242, 242, 200))):(fill_0 = new CFFill(new CFColor_0(255, 255, 255, 200))) , fill_0);
    zoomOutRect = new CFRect(this$static.zoomXY.x_0 + 0.5, this$static.zoomXY.y_0 + this$static.zoomBtnSize + 0.5, this$static.zoomBtnSize - 1, this$static.zoomBtnSize - 1);
    roundedRect_1 = new CFPath_7(getRoundedRectPath(zoomOutRect, 3));
    zoomOutShape = new CFShape_0(roundedRect_1, mostlyWhite_1, null);
    zoomOutShape.comp = this$static;
    zoomOutShape.dataObject = '{"internal": "zoomout"}';
    zoPath = new CFPath;
    $add(zoPath, new CFPathElement_0(0, (new CFPoint(zoomOutRect.x_0 + zoomOutRect.width_0 / 2, zoomOutRect.y_0 + zoomOutRect.height_0 / 2)).x_0 - plusMinusWidth_0, (new CFPoint(zoomOutRect.x_0 + zoomOutRect.width_0 / 2, zoomOutRect.y_0 + zoomOutRect.height_0 / 2)).y_0));
    $add(zoPath, new CFPathElement_0(1, (new CFPoint(zoomOutRect.x_0 + zoomOutRect.width_0 / 2, zoomOutRect.y_0 + zoomOutRect.height_0 / 2)).x_0 + plusMinusWidth_0, (new CFPoint(zoomOutRect.x_0 + zoomOutRect.width_0 / 2, zoomOutRect.y_0 + zoomOutRect.height_0 / 2)).y_0));
    zoShape = new CFShape_0(zoPath, mostlyWhite_1, (this$static.showZoomOutControlHover?(stroke_0 = new CFStroke(new CFColor_2('#666666'), 1.5)):(stroke_0 = new CFStroke(new CFColor_2('#999999'), 1)) , stroke_0));
    zoShape.dataObject = '{"internal": "zoomout"}';
    !!zoShape.path && (zoShape.path.shouldAntiAlias = true);
    graphicElement_1 = new GraphicElement_0(zoomOutShape);
    !graphicElement_1.shapeAry && (graphicElement_1.shapeAry = new ArrayList);
    $add_1(graphicElement_1.shapeAry, zoShape);
    this$static.zoomOutControl = graphicElement_1;
    $createCitiesControl(this$static);
    $createDataTableControl(this$static);
    $createGroupElementsControl(this$static);
  }
}

function $drawBackAndDecorationLayers(this$static, rnd, drawFront){
  var chartScale, clipShape, endClipShape, firstPointLayer, layer, layer$iterator, mapComponent, mapComponent$iterator, shape_0, shape$iterator, shapeRect;
  firstPointLayer = $getFirstPointLayer(this$static);
  if (this$static.supportsZooming && !!this$static.viewPort) {
    clipShape = new CFShape_1(this$static.viewPort, null, null);
    clipShape.isClip = true;
    $draw_6(clipShape, rnd);
  }
  chartScale = this$static.chart.scaleFactor;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (!this$static.showCityNames && layer == firstPointLayer)
      continue;
    if (layer.type_0 == 0 || layer.type_0 == 2) {
      if (layer.dataShapeAry) {
        for (mapComponent$iterator = new ArrayList$1(layer.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
          mapComponent = castTo($next_3(mapComponent$iterator), 47);
          shapeRect = mapComponent.getDisplayBounds();
          !!shapeRect && !mapComponent.hidden && shapeRect.width_0 * chartScale >= 0.5 && shapeRect.height_0 * chartScale >= 0.5 && (!this$static.viewPort || $intersects(this$static.viewPort, shapeRect)) && (!this$static.hideNoDataShapes || !isNaN_0(mapComponent.value_0)) && (drawFront?$drawFront(mapComponent, rnd):$draw_1(mapComponent, rnd));
        }
      }
      if (layer.shapeAry) {
        for (shape$iterator = new ArrayList$1(layer.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 93);
          shapeRect = shape_0.bnds;
          (!this$static.viewPort || $intersects(this$static.viewPort, shapeRect)) && (drawFront?$drawFront(shape_0, rnd):$draw_1(shape_0, rnd));
        }
      }
    }
     else if (layer.type_0 == 3) {
      for (shape$iterator = new ArrayList$1(layer.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
        shape_0 = castTo($next_3(shape$iterator), 93);
        shapeRect = shape_0.getDisplayBounds();
        if (instanceOf(shape_0, 47)) {
          mapComponent = castTo(shape_0, 47);
          !!shapeRect && !mapComponent.hidden && shapeRect.width_0 * chartScale >= 0.5 && shapeRect.height_0 * chartScale >= 0.5 && (!this$static.viewPort || $intersects(this$static.viewPort, shapeRect)) && (!this$static.hideNoDataShapes || !isNaN_0(mapComponent.value_0)) && (drawFront?$drawFront(mapComponent, rnd):$draw_1(mapComponent, rnd));
        }
         else {
          (!this$static.viewPort || $intersects(this$static.viewPort, shapeRect)) && (drawFront?$drawFront(shape_0, rnd):$draw_1(shape_0, rnd));
        }
      }
    }
  }
  if (this$static.supportsZooming && !!this$static.viewPort) {
    endClipShape = new CFShape;
    endClipShape.isClip = true;
    $draw_6(endClipShape, rnd);
  }
}

function $drawLayersOfType(this$static, rnd, layerType){
  var clipShape, endClipShape, firstPointLayer, layer, layer$iterator, shape_0, shape$iterator;
  firstPointLayer = $getFirstPointLayer(this$static);
  if (this$static.supportsZooming && !!this$static.viewPort) {
    clipShape = new CFShape_1(this$static.viewPort, null, null);
    clipShape.isClip = true;
    $draw_6(clipShape, rnd);
  }
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (!this$static.showCityNames && layer == firstPointLayer)
      continue;
    if (layer.type_0 == layerType) {
      if (layer.dataShapeAry) {
        for (shape$iterator = new ArrayList$1(layer.dataShapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 47);
          !shape_0.hidden && (!this$static.viewPort || $intersects(this$static.viewPort, shape_0.getDisplayBounds())) && $draw_1(shape_0, rnd);
        }
      }
      if (layer.shapeAry) {
        for (shape$iterator = new ArrayList$1(layer.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 93);
          (!this$static.viewPort || $intersects(this$static.viewPort, shape_0.bnds)) && $draw_1(shape_0, rnd);
        }
      }
    }
  }
  if (this$static.supportsZooming && !!this$static.viewPort) {
    endClipShape = new CFShape;
    endClipShape.isClip = true;
    $draw_6(endClipShape, rnd);
  }
}

function $drawZoomControls(this$static, rnd){
  !!this$static.zoomBackGroundControl && $draw_2(this$static.zoomBackGroundControl, rnd);
  !!this$static.zoomInControl && !this$static.showZoomInControlHover && $draw_2(this$static.zoomInControl, rnd);
  !!this$static.zoomOutControl && $draw_2(this$static.zoomOutControl, rnd);
  !!this$static.zoomInControl && this$static.showZoomInControlHover && $draw_2(this$static.zoomInControl, rnd);
  !!this$static.citiesControl && $draw_2(this$static.citiesControl, rnd);
  !!this$static.dataTableControl && $draw_2(this$static.dataTableControl, rnd);
  !!this$static.groupElementsControl && $draw_2(this$static.groupElementsControl, rnd);
}

function $filterAllRanges(this$static, value_0){
  var range, range$iterator;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    range.noDataRange || $setShowAsFiltered(range, this$static.data_0, value_0);
  }
}

function $format(this$static, rnd){
  var layer, numberFormatter;
  if (!this$static.data_0 && !this$static.editMode) {
    this$static.rnd = rnd;
    return;
  }
  if (this$static.needsFormat) {
    this$static.lastHoverComp = null;
    clearGraphicElementArray(this$static.hoverGEAry);
    this$static.legendComponents.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.rangeComps.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    $reset_5(this$static.rangeCompMap);
    layer = $getFirstPointLayer(this$static);
    !!layer && $setPointLayerSizes(layer);
    this$static.rnd = rnd;
    this$static.processChartOptions();
    this$static.moveAndScaleMapAndPlaceLegend(rnd, 220, 5);
    this$static.processZoomAndPanOptions();
    numberFormatter = $getFirstColumnFormat(this$static);
    !!numberFormatter && (this$static.numberFormatter = numberFormatter);
    $setAutoAbbreviateState(this$static.numberFormatter, false);
    $updateNumberFormatWithChartOptionOverrides(this$static, this$static.numberFormatter);
    $updateNumberFormats(this$static);
    if (this$static.legend) {
      this$static.legend.numberFormatter = new NumberFormatter_0(this$static.numberFormatter);
      $setAutoAbbreviateState(this$static.legend.numberFormatter, this$static.abbrevHvrLegendVals);
    }
    $createRangeMarkerComps(this$static);
    $applyRangesToData(this$static);
    if ((this$static.autoZoom || this$static.hideNoDataShapes) && !this$static.initalScalingFromDataSet) {
      this$static.autoZoomToData();
      if (this$static.hideNoDataShapes) {
        this$static.origScale = this$static.curScale;
        this$static.scaleFactor = 0.99;
      }
    }
    this$static.dataLabelVisible && this$static.dataLabelTextFormatStr != null && this$static.dataLabelTextFormatStr.length > 0 && $addDataLabelsToFirstAreaLayer(this$static, this$static.viewPort, this$static.curScale);
    $addLabelsForFirstPointLayer(this$static, this$static.viewPort);
    if (!this$static.editMode) {
      this$static.showSideLegend?$createSideLegend(this$static, rnd, this$static.legendBnds):this$static.showBottomLegend && $createBottomLegend(this$static, rnd, this$static.legendBnds);
      $setup(this$static, this$static.topLineComp, this$static.totalAmtComp);
    }
    $createZoomControls(this$static);
    !!this$static.chart && this$static.chart.includeJsonMap && this$static.processMapShapesForJsonMap();
    this$static.needsFormat = false;
  }
}

function $freeResources_4(this$static, dataToKeep){
  var component, component$iterator, layer, layer$iterator, range, range$iterator;
  $freeResources_2(this$static, dataToKeep);
  if (this$static.layers) {
    for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
      layer = castTo($next_3(layer$iterator), 91);
      $freeResources_7(layer);
    }
    this$static.layers.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.layers = null;
  if (this$static.rangeComps) {
    for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 76);
      $freeResources_8(range, dataToKeep);
    }
    this$static.rangeComps.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.rangeComps = null;
  if (this$static.legendComponents) {
    for (component$iterator = new ArrayList$1(this$static.legendComponents); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      component.freeResources(dataToKeep);
    }
    this$static.legendComponents.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.legendComponents = null;
  !!this$static.topLineComp && this$static.topLineComp.freeResources(dataToKeep);
  this$static.topLineComp = null;
  !!this$static.totalAmtComp && this$static.totalAmtComp.freeResources(dataToKeep);
  this$static.totalAmtComp = null;
  this$static.hoverGEAry = null;
  this$static.lastHoverComp != null && instanceOf(this$static.lastHoverComp, 23) && castTo(this$static.lastHoverComp, 23).freeResources(null);
  this$static.lastHoverComp = null;
  this$static.mappedRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this$static.unmappedRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this$static.lastHoverComp = null;
  this$static.colorMgr = null;
  this$static.rangeMap = null;
  this$static.colorPalette = null;
  this$static.rangeColors = null;
  this$static.rangeValues = null;
  this$static.ranges_0 = null;
}

function $getDataLabelFontColor(value_0){
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    if ($equals_2(value_0, 'gray'))
      return $clinit_CFColor() , TEXT_DARK_GRAY;
    else if ($equals_2(value_0, 'white'))
      return $clinit_CFColor() , WHITE;
  }
  return null;
}

function $getDataLabelFontSize(value_0){
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    if ($equals_2(value_0, 'smallest'))
      return 10;
    else if ($equals_2(value_0, 'smaller'))
      return 12;
    else if ($equals_2(value_0, 'larger'))
      return 18;
  }
  return 14;
}

function $getDrillFilterFromLegendItemInfo(this$static, lii){
  var filter, rangeIndex, selectedRange;
  filter = null;
  if (lii.colInfo) {
    rangeIndex = lii.colInfo.curIndex;
    selectedRange = castTo($get_2(this$static.rangeComps, rangeIndex), 76);
    filter = $getDrillFilterFromMapRange(selectedRange);
  }
  return filter;
}

function $getDrillFilterFromMapRange(selectedRange){
  var ColumnName, drillNames, filter, filterBase, mapComponent, mapComponent$iterator, row;
  filter = null;
  if (!!selectedRange.shapes && selectedRange.shapes.array.length > 0) {
    drillNames = new ArrayList;
    row = castTo($get_2(selectedRange.shapes, 0), 47).row;
    ColumnName = row.parentName;
    $getDataSourceId(row);
    for (mapComponent$iterator = new ArrayList$1(selectedRange.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      $add_1(drillNames, mapComponent.drillMatchValue);
    }
    filterBase = new FilterBase(ColumnName, 'IN', row);
    filterBase.values = drillNames;
    filter = getDrillFilterFromValues(filterBase);
  }
  return filter;
}

function $getFirstAreaLayer(this$static){
  var layer, layer$iterator;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (layer.type_0 == 0 || layer.type_0 == 3)
      return layer;
  }
  return null;
}

function $getFirstPointLayer(this$static){
  var layer, layer$iterator;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (layer.type_0 == 1)
      return layer;
  }
  return null;
}

function $getFormattedDataLabelText(this$static, mapComp, numberFormatter){
  var rangeNum, rangeStr, result, valueStr;
  result = null;
  if (this$static.dataLabelTextFormatStr != null && $trim(this$static.dataLabelTextFormatStr).length > 0) {
    result = castToString(checkNotNull(this$static.dataLabelTextFormatStr));
    rangeStr = '';
    valueStr = mapComp.valStr;
    valueStr != null && valueStr.length > 0 && !isNaN_0(mapComp.value_0) && (valueStr = $formatNumber_1(numberFormatter, mapComp.value_0));
    if (this$static.hasRangeText) {
      if (mapComp.range) {
        rangeNum = mapComp.range.rangeNum;
        !!this$static.ranges_0 && rangeNum >= 0 && rangeNum < this$static.ranges_0.array.length && (rangeStr = castTo($get_2(this$static.ranges_0, rangeNum), 58).text_0);
      }
    }
    (valueStr == null || $trim(valueStr).length == 0) && (this$static.dataLabelTextFormatStr != null && $equals_2($trim(this$static.dataLabelTextFormatStr), '%_VALUE')?(valueStr = ''):(valueStr = getString('NO_DATA', this$static.chart.locale)));
    result = replaceMacroWithValue(result, '%_VALUE', valueStr);
    result = replaceMacroWithValue(result, '%_RANGENAME', rangeStr);
    result = replaceMacroWithValue(result, '%_NAME', mapComp.name_0);
    result = replaceMacroWithValue(result, '%_LONGNAME', $getLongName(mapComp));
    if (!!mapComp && !!mapComp.row) {
      result = replaceTOOLTIP('%_TOOLTIP1', 'EXTRAINFO1', $getFirstCell(mapComp.row), this$static, false, result);
      result = replaceTOOLTIP('%_TOOLTIP2', 'EXTRAINFO2', $getFirstCell(mapComp.row), this$static, false, result);
      result = replaceTOOLTIP('%_TOOLTIP3', 'EXTRAINFO3', $getFirstCell(mapComp.row), this$static, false, result);
    }
     else {
      result = $replaceAll(result, '%_TOOLTIP1', '');
      result = $replaceAll(result, '%_TOOLTIP2', '');
      result = $replaceAll(result, '%_TOOLTIP3', '');
    }
  }
  return result;
}

function $getLegendItemForRange(this$static, range){
  var lii, lii$iterator, rangeIndex;
  if (!!this$static.legend && instanceOf(this$static.legend, 197)) {
    rangeIndex = $indexOf_1(this$static.rangeComps, range, 0);
    if (rangeIndex != -1) {
      for (lii$iterator = this$static.legend.legendItems.iterator(); lii$iterator.hasNext_0();) {
        lii = castTo(lii$iterator.next_1(), 37);
        if (!!lii.colInfo && lii.colInfo.curIndex == rangeIndex)
          return lii;
      }
    }
  }
  return null;
}

function $getMapBoundsForRect(this$static, containingRect, scale){
  var newHeight, newWidth, newX, newY;
  newWidth = this$static.origBounds.width_0 * scale;
  newHeight = this$static.origBounds.height_0 * scale;
  newX = containingRect.x_0 + (containingRect.width_0 - newWidth) / 2;
  newY = containingRect.y_0 + (containingRect.height_0 - newHeight) / 2;
  return new CFRect(newX, newY, newWidth, newHeight);
}

function $getMapDataArrays(this$static){
  var altCodes, altNames, areaLayer, codes, i, longNames, mapcomp, names, retVal;
  retVal = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_17, 74, 5, 0, 2);
  areaLayer = $getFirstAreaLayer(this$static);
  if (areaLayer) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, areaLayer.dataShapeAry.array.length, 6, 1);
    codes = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, areaLayer.dataShapeAry.array.length, 6, 1);
    longNames = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, areaLayer.dataShapeAry.array.length, 6, 1);
    altNames = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, areaLayer.dataShapeAry.array.length, 6, 1);
    altCodes = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, areaLayer.dataShapeAry.array.length, 6, 1);
    for (i = 0; i < areaLayer.dataShapeAry.array.length; i++) {
      mapcomp = castTo($get_2(areaLayer.dataShapeAry, i), 47);
      names[i] = mapcomp.name_0;
      codes[i] = mapcomp.code_0;
      longNames[i] = mapcomp.longName;
      altNames[i] = mapcomp.altName;
      altCodes[i] = mapcomp.altCode;
    }
    retVal[0] = names;
    retVal[1] = codes;
    retVal[2] = longNames;
    retVal[3] = altNames;
    retVal[4] = altCodes;
  }
  return retVal;
}

function $getMapOffsetForZoomFromPoint(this$static, zoomPoint, newScaleFactor){
  var mapOffsetScaled, mapOffsetUnscaled, newScaledMapHeight, newScaledMapWidth, newScaledPointInMap, pointInMap, retPoint, unscaledMapHeight, unscaledMapWidth, unscaledPointInMap;
  if (this$static.supportsZooming && !!this$static.viewPort) {
    pointInMap = new CFPoint(zoomPoint.x_0 - (this$static.mapBounds.x_0 - this$static.mapOffset.x_0), zoomPoint.y_0 - this$static.mapBounds.y_0 + this$static.mapOffset.y_0);
    unscaledPointInMap = new CFPoint(pointInMap.x_0 / this$static.scaleFactor, pointInMap.y_0 / this$static.scaleFactor);
    newScaledPointInMap = new CFPoint(unscaledPointInMap.x_0 * newScaleFactor, unscaledPointInMap.y_0 * newScaleFactor);
    mapOffsetUnscaled = new CFPoint(this$static.mapOffset.x_0 / this$static.scaleFactor, this$static.mapOffset.y_0 / this$static.scaleFactor);
    mapOffsetScaled = new CFPoint(mapOffsetUnscaled.x_0 * newScaleFactor, mapOffsetUnscaled.y_0 * newScaleFactor);
    unscaledMapWidth = this$static.mapBounds.width_0 / this$static.scaleFactor;
    unscaledMapHeight = this$static.mapBounds.height_0 / this$static.scaleFactor;
    newScaledMapWidth = unscaledMapWidth * newScaleFactor;
    newScaledMapHeight = unscaledMapHeight * newScaleFactor;
    $setWidth(this$static.mapBounds, newScaledMapWidth);
    $setHeight(this$static.mapBounds, newScaledMapHeight);
    retPoint = new CFPoint(zoomPoint.x_0 - this$static.viewPort.x_0 - newScaledPointInMap.x_0 + mapOffsetScaled.x_0, zoomPoint.y_0 - this$static.viewPort.y_0 - newScaledPointInMap.y_0 + mapOffsetScaled.y_0);
    return retPoint;
  }
  return new CFPoint(0, 0);
}

function $getMapScaleNonZoomed(this$static, containingRect){
  var heightScale, scale, widthScale;
  widthScale = containingRect.width_0 / this$static.origBounds.width_0;
  heightScale = containingRect.height_0 / this$static.origBounds.height_0;
  scale = widthScale;
  heightScale < widthScale && (scale = heightScale);
  return scale;
}

function $getMinMaxValues(this$static){
  var bkgLayer, mapComponent, mapComponent$iterator, max_0, min_0, valueList;
  min_0 = $intern_19;
  max_0 = $intern_20;
  valueList = new ArrayList;
  bkgLayer = $getFirstAreaLayer(this$static);
  if (bkgLayer) {
    for (mapComponent$iterator = new ArrayList$1(bkgLayer.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      if (!!mapComponent && !isNaN_0(mapComponent.value_0)) {
        $add_1(valueList, mapComponent.value_0);
        mapComponent.value_0 < min_0 && (min_0 = mapComponent.value_0);
        mapComponent.value_0 > max_0 && (max_0 = mapComponent.value_0);
      }
    }
  }
  return new MinMax_0(min_0, max_0, valueList);
}

function $getNumFilteredRanges(this$static){
  var count, range, range$iterator;
  count = 0;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    !range.noDataRange && range.showAsFiltered && ++count;
  }
  return count;
}

function $getRange(this$static, index_0){
  var rng;
  !this$static.rangeMap && (this$static.rangeMap = new HashMap);
  rng = castTo($get_1(this$static.rangeMap, valueOf(index_0)), 58);
  if (!rng) {
    rng = new Range_0;
    $put_0(this$static.rangeMap, valueOf(index_0), rng);
  }
  return rng;
}

function $getRangeByNum(this$static, rangeNum){
  var range, range$iterator;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    if (range.rangeNum == rangeNum)
      return range;
  }
  return null;
}

function $getRangeColorForIndex(rangeColors, index_0){
  if (!!rangeColors && index_0 >= 0 && index_0 < rangeColors.array.length)
    return checkCriticalElementIndex(index_0, rangeColors.array.length) , castTo(rangeColors.array[index_0], 15);
  return new CFColor(0, 0, 0);
}

function $getRangeIndexForValue(this$static, value_0){
  var minMax, minMax$iterator, rangeIndex;
  if (isNaN(value_0) || value_0 == 0 && this$static.zeroLikeNoData)
    return -1;
  rangeIndex = 0;
  for (minMax$iterator = new ArrayList$1(this$static.rangeValues); minMax$iterator.i < minMax$iterator.this$01.array.length;) {
    minMax = castTo($next_3(minMax$iterator), 48);
    if (this$static.balancedDistribution) {
      if (value_0 >= minMax.min_0 && value_0 <= minMax.max_0)
        break;
    }
     else {
      if (minMax.min_0 == minMax.max_0 && value_0 == minMax.min_0)
        break;
      else if (value_0 >= minMax.min_0 && value_0 < minMax.max_0)
        break;
    }
    ++rangeIndex;
  }
  value_0 == castTo($get_2(this$static.rangeValues, this$static.rangeValues.array.length - 1), 48).max_0 && (rangeIndex = this$static.rangeValues.array.length - 1);
  if (rangeIndex < this$static.rangeValues.array.length)
    return rangeIndex;
  return -1;
}

function $getRangesShowAsFiltered(this$static){
  var range, range$iterator;
  if (!!this$static.rangeComps && this$static.rangeComps.array.length > 0) {
    this$static.rangeShowAsFiltered = new ArrayList;
    for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 76);
      range.name_0.indexOf('Unmapped') == -1 && range.name_0.indexOf('NoData') == -1 && $add_1(this$static.rangeShowAsFiltered, ($clinit_Boolean() , range.showAsFiltered?true:false));
    }
  }
}

function $getRootMapName(this$static){
  if (this$static.customMap && $hasChartOptions(this$static))
    return $getChartOptionAsString(this$static, 'map_name');
  return null;
}

function $getSelectedMapShapeNames(this$static){
  var areaLayer, mapComp, mapComp$iterator, names;
  names = new ArrayList;
  areaLayer = $getFirstAreaLayer(this$static);
  if (areaLayer) {
    for (mapComp$iterator = new ArrayList$1(areaLayer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      mapComp.selected && $add_1(names, mapComp.name_0);
    }
  }
  if (names.array.length > 0)
    return castTo($toArray_0(names, initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, names.array.length, 6, 1)), 74);
  return null;
}

function $getShapeUnderPointForRange(this$static, range, x_0, y_0, rnd){
  var shape_0;
  if (range.marker) {
    shape_0 = $getShapeUnderPoint_0(range.marker, x_0, y_0, rnd);
    if (shape_0) {
      if (shape_0.drillFilter == null && !!range.shapes && !!this$static.data_0 && $getNumRows(this$static.data_0) > 0 && !!$getRow(this$static.data_0, 0)) {
        (range.drillFilter == null || !!this$static.chart && $usingCardBus(this$static.chart)) && $addDrillFilter_0(range, $getRow(this$static.data_0, 0).parentName, $getRow(this$static.data_0, 0));
        $setDrillFilter_0(shape_0, range.drillFilter);
      }
      shape_0.comp = this$static;
      shape_0.dataObject = range;
      return shape_0;
    }
  }
  return null;
}

function $getUniqueValues(this$static){
  var bkgLayer, mapComponent, mapComponent$iterator, uniqueValues;
  uniqueValues = new HashMap;
  bkgLayer = $getFirstAreaLayer(this$static);
  if (bkgLayer) {
    for (mapComponent$iterator = new ArrayList$1(bkgLayer.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      !!mapComponent && !isNaN_0(mapComponent.value_0) && uniqueValues.hashCodeMap.size_0 + uniqueValues.stringMap.size_0 < 20 && $put_0(uniqueValues, mapComponent.value_0, mapComponent.value_0);
    }
  }
  return uniqueValues;
}

function $getZoomShapeUnderPoint(this$static, x_0, y_0, rnd){
  if (this$static.supportsZooming) {
    if (!!this$static.zoomInControl && $pointInPath_0(castTo($get_2(this$static.zoomInControl.shapeAry, 0), 6), x_0, y_0, rnd))
      return castTo($get_2(this$static.zoomInControl.shapeAry, 0), 6);
    if (!!this$static.zoomOutControl && $pointInPath_0(castTo($get_2(this$static.zoomOutControl.shapeAry, 0), 6), x_0, y_0, rnd))
      return castTo($get_2(this$static.zoomOutControl.shapeAry, 0), 6);
    if (!!this$static.citiesControl && $pointInPath_0(castTo($get_2(this$static.citiesControl.shapeAry, 0), 6), x_0, y_0, rnd))
      return castTo($get_2(this$static.citiesControl.shapeAry, 0), 6);
    if (!!this$static.dataTableControl && $pointInPath_0(castTo($get_2(this$static.dataTableControl.shapeAry, 0), 6), x_0, y_0, rnd))
      return castTo($get_2(this$static.dataTableControl.shapeAry, 0), 6);
    if (!!this$static.groupElementsControl && $pointInPath_0(castTo($get_2(this$static.groupElementsControl.shapeAry, 0), 6), x_0, y_0, rnd))
      return castTo($get_2(this$static.groupElementsControl.shapeAry, 0), 6);
  }
  return null;
}

function $handleClickInLegendItemInfo(this$static, liiClicked, usingCardBus){
  var rangeIndex, selectedRange;
  if (!!liiClicked && !!liiClicked.colInfo && usingCardBus) {
    rangeIndex = liiClicked.colInfo.curIndex;
    selectedRange = castTo($get_2(this$static.rangeComps, rangeIndex), 76);
    this$static.drillFilter = $handleToggleRangeShowAsFiltered(this$static, selectedRange);
    $setDrillFromDataBasedOnShowAsFiltered(this$static, true);
    $getRangesShowAsFiltered(this$static);
  }
  return false;
}

function $handleToggleRangeShowAsFiltered(this$static, mapRange){
  var layer, newFilter;
  newFilter = null;
  if (mapRange.noDataRange)
    return null;
  layer = $getFirstAreaLayer(this$static);
  if (layer) {
    if ($getNumFilteredRanges(this$static) == 0 && this$static.data_0.numFilteredRows == 0) {
      $filterAllRanges(this$static, true);
      $setShowAsFiltered(mapRange, this$static.data_0, false);
    }
     else {
      $setShowAsFiltered(mapRange, this$static.data_0, !$hasShowAsFilteredShapes(mapRange));
      $getNumFilteredRanges(this$static) == this$static.rangeColors.array.length && this$static.data_0.numFilteredRows == $getNumRows(this$static.data_0) - this$static.unmappedRows.array.length && $filterAllRanges(this$static, false);
    }
    $adjustColorsForShowAsFiltered(layer);
    newFilter = $buildDrillFilterFromFilteredRowsForRange(layer, this$static);
  }
  return newFilter;
}

function $hasMinAndMaxRangeText(this$static){
  var range, range$iterator;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    if (range.textMax)
      return true;
  }
  return false;
}

function $hasUnmappedData(this$static){
  var layer, layer$iterator;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (!!layer.unmappedNames && layer.unmappedNames.array.length > 0)
      return true;
  }
  return false;
}

function $highlightRange(this$static, selectedRange, nonSelectedAlpha, setNonSelectedToGray){
  var lii, liiSelected, range, range$iterator;
  for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    lii = $getLegendItemForRange(this$static, range);
    if (range != selectedRange) {
      if (setNonSelectedToGray) {
        if (this$static.hoverNonGeoStyle) {
          $setRangeMarkerColorOrAlpha(this$static, range, this$static.hoverNonGeoNonSelectedColor, 0);
          $useMarkerFillColorForAllShapes(range);
        }
         else {
          $useHoverNotSelectedColorForAllShapes(range);
          if (!!this$static.chart && $usingCardBus(this$static.chart) && !!this$static.data_0 && this$static.data_0.numFilteredRows > 0) {
            range.showAsFiltered?$setValuesFromColor(range.markerFillColor, $deSaturateAndLighten(range.origMarkerFillColor, 0.9, 0.4)):!!range.markerFillColor && !!range.origMarkerFillColor && $setValuesFromColor(range.markerFillColor, range.origMarkerFillColor);
            !!lii && $setValuesFromColor(lii.fill_0.color_0, $getMarkerFillColor(range));
          }
           else 
            $setRangeMarkerColorOrAlpha(this$static, range, this$static.hoverNonSelectedGrayLegend, 0);
        }
      }
       else 
        $setRangeMarkerColorOrAlpha(this$static, range, null, nonSelectedAlpha);
      $setRangeTextColor(range, ($clinit_CFColor() , WHITE), true);
    }
  }
  $useOriginalColorForAllShapes(selectedRange);
  !!selectedRange.markerFillColor && !!selectedRange.origMarkerFillColor && $setValuesFromColor(selectedRange.markerFillColor, selectedRange.origMarkerFillColor);
  $getMarkerFillColor(selectedRange).alpha_0 = 255;
  $setRangeTextColor(selectedRange, $getTextColor(this$static.chart.palette), this$static.showRangeMinAndMax);
  liiSelected = $getLegendItemForRange(this$static, selectedRange);
  !!liiSelected && $setValuesFromColor(liiSelected.fill_0.color_0, $getMarkerFillColor(selectedRange));
}

function $moveAndScaleMap(this$static, mapRect, scale){
  this$static.mapBounds = $getMapBoundsForRect(this$static, mapRect, scale);
  $placeScaledMapShapes(this$static);
}

function $moveAndScaleToOriginal(this$static){
  var mapRect;
  mapRect = $duplicate_5(this$static.viewPort);
  this$static.mapOffset = new CFPoint(0 - (this$static.origBounds.x_0 - 1) * this$static.origScale, 0 - (this$static.origBounds.y_0 - 1) * this$static.origScale);
  $setX_0(mapRect, this$static.viewPort.x_0 + this$static.mapOffset.x_0);
  $setY_0(mapRect, this$static.viewPort.y_0 + this$static.mapOffset.y_0);
  $moveAndScaleMap(this$static, mapRect, this$static.origScale);
}

function $moveAndScaleToRect(this$static, frameRect){
  var heightRatio, layer, layer$iterator, layerBnds, newHeight, newWidth, scaleRatio, widthRatio, x_0, y_0;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (layer.isBackgroundLayer) {
      layerBnds = $getBoundingRect(layer);
      heightRatio = frameRect.height_0 / layerBnds.height_0;
      widthRatio = frameRect.width_0 / layerBnds.width_0;
      scaleRatio = heightRatio;
      widthRatio < heightRatio && (scaleRatio = widthRatio);
      newHeight = layerBnds.height_0 * scaleRatio;
      newWidth = layerBnds.width_0 * scaleRatio;
      x_0 = frameRect.x_0 + (frameRect.width_0 - newWidth) / 2;
      y_0 = frameRect.y_0 + (frameRect.height_0 - newHeight) / 2;
      $moveAndScaleToRect_1(layer, new CFRect(x_0, y_0, newWidth, newHeight));
      break;
    }
  }
}

function $placeScaledMapShapes(this$static){
  var layer, numAreaShapes;
  layer = $getFirstAreaLayer(this$static);
  numAreaShapes = 0;
  !!layer && !!layer.dataShapeAry && layer.dataShapeAry.array.length > 0 && (numAreaShapes = layer.dataShapeAry.array.length);
  $setSizeAndStrokeWidthForMapShapes(this$static, true, numAreaShapes > 500);
}

function $processBackGroundColor(this$static, value_0){
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    switch (value_0) {
      case 'very light':
        this$static.NODATA_CLR = new CFColor_2('#eeeeee');
        break;
      case 'light':
        this$static.NODATA_CLR = new CFColor_2('#d4d4d4');
        break;
      case 'medium':
        this$static.NODATA_CLR = new CFColor_2('#888888');
        break;
      case 'dark':
        this$static.NODATA_CLR = new CFColor_2('#555555');
        break;
      case 'very dark':
        this$static.NODATA_CLR = new CFColor_2('#333333');
        break;
      default:this$static.NODATA_CLR = new CFColor_2('#e6e6e6');
    }
  }
}

function $processChartOptions_0(this$static){
  var hasCustomColors, i, key, key$iterator, maxValue, minMax, numRanges, numberFormatter, range, range$iterator, removeShowAsFilteredhartOption, uniqueValues, value_0;
  this$static.colorPalette = 'gradient-2';
  this$static.forcedMaxValue = NaN;
  this$static.allowInteractions = true;
  this$static.hasInteractions = this$static.allowInteractions;
  this$static.manualRanges = false;
  this$static.datalabelFontColor = null;
  hasCustomColors = false;
  this$static.hoverNonGeoStyle = false;
  removeShowAsFilteredhartOption = false;
  this$static.colorMgr = new ColorManager(this$static.chart.palette, this$static);
  $processChartOptions(this$static);
  if ($hasChartOptions(this$static)) {
    for (key$iterator = $getChartOptionKeys(this$static).iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = $getChartOptionAsString(this$static, key);
      switch (key) {
        case 'map_hover_style':
          value_0 != null && $equalsIgnoreCase(value_0, 'Style 1') && (this$static.hoverNonGeoStyle = true);
          break;
        case 'hover_fill_color':
          this$static.hoverNonGeoNonSelectedColor = $getColorForName(this$static.colorMgr, value_0);
          break;
        case 'auto_zoom':
          this$static.autoZoom = isTrue(value_0);
          break;
        case 'hide_no_data_items':
          this$static.hideNoDataShapes = isTrue(value_0);
          break;
        case 'color_theme':
          this$static.colorPalette = value_0;
          break;
        case 'hide_total':
          this$static.hideTotal = isTrue(value_0);
          break;
        case 'hide_values':
          this$static.hideValues = isTrue(value_0);
          break;
        case 'balanced_distribution':
          this$static.balancedDistribution = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'force_max_value':
          getDouble(value_0) != null && (this$static.forcedMaxValue = checkNotNull(getDouble(value_0)));
          break;
        case 'zero_like_no_data':
          this$static.zeroLikeNoData = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'range_1_min':
          $setMin($getRange(this$static, 1), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_1_max':
          $setMax($getRange(this$static, 1), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_1_color':
          $setColor($getRange(this$static, 1), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_1_text':
          $setText_0($getRange(this$static, 1), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_2_min':
          $setMin($getRange(this$static, 2), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_2_max':
          $setMax($getRange(this$static, 2), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_2_color':
          $setColor($getRange(this$static, 2), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_2_text':
          $setText_0($getRange(this$static, 2), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_3_min':
          $setMin($getRange(this$static, 3), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_3_max':
          $setMax($getRange(this$static, 3), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_3_color':
          $setColor($getRange(this$static, 3), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_3_text':
          $setText_0($getRange(this$static, 3), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_4_min':
          $setMin($getRange(this$static, 4), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_4_max':
          $setMax($getRange(this$static, 4), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_4_color':
          $setColor($getRange(this$static, 4), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_4_text':
          $setText_0($getRange(this$static, 4), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_5_min':
          $setMin($getRange(this$static, 5), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_5_max':
          $setMax($getRange(this$static, 5), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_5_color':
          $setColor($getRange(this$static, 5), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_5_text':
          $setText_0($getRange(this$static, 5), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_6_min':
          $setMin($getRange(this$static, 6), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_6_max':
          $setMax($getRange(this$static, 6), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_6_color':
          $setColor($getRange(this$static, 6), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_6_text':
          $setText_0($getRange(this$static, 6), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_7_min':
          $setMin($getRange(this$static, 7), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_7_max':
          $setMax($getRange(this$static, 7), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_7_color':
          $setColor($getRange(this$static, 7), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_7_text':
          $setText_0($getRange(this$static, 7), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_8_min':
          $setMin($getRange(this$static, 8), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_8_max':
          $setMax($getRange(this$static, 8), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_8_color':
          $setColor($getRange(this$static, 8), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_8_text':
          $setText_0($getRange(this$static, 8), value_0);
          this$static.hasRangeText = true;
          break;
        case 'range_9_min':
          $setMin($getRange(this$static, 9), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_9_max':
          $setMax($getRange(this$static, 9), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_9_color':
          $setColor($getRange(this$static, 9), $getColorForName(this$static.colorMgr, value_0));
          hasCustomColors = true;
          break;
        case 'range_9_text':
          $setText_0($getRange(this$static, 9), value_0);
          this$static.hasRangeText = true;
          break;
        case 'map_bkg_color':
          $processBackGroundColor(this$static, value_0);
          break;
        case 'data_label_text':
          this$static.hoverTextFormatStr = value_0;
          break;
        case 'data_label_format_text':
          this$static.dataLabelTextFormatStr = value_0;
          break;
        case 'hide_hover_legend':
          isTrue(value_0) && (this$static.showSideLegend = false);
          break;
        case 'abbrev_hover_legend_vals':
          this$static.abbrevHvrLegendVals = isTrue(value_0);
          break;
        case 'datalabel_fill':
          this$static.dataLabelShowBackground = isTrue(value_0);
          break;
        case 'datalabel_fill_color':
          this$static.dataLabelBkgFillColor = $getColorForName(this$static.colorMgr, value_0);
          break;
        case 'datalabel_fill_trans_pct':
          this$static.dataLabelBkgFillAlpha = getFillTransparencyPct(value_0);
          break;
        case 'datalabel_font_size':
          this$static.datalabelFontSize = $getDataLabelFontSize(value_0);
          break;
        case 'datalabel_font_clr':
          this$static.datalabelFontColor = $getDataLabelFontColor(value_0);
          break;
        case 'datalabel_val_abbrev':
          this$static.dontAbbrevDatalabel = $equals_2(value_0.toLowerCase(), 'none');
          break;
        case 'hover_always_on_map':
          this$static.alwaysShowHoverText = isTrue(value_0);
          break;
        case 'hide_small_legend':
          this$static.hideAbbrevLegend = isTrue(value_0);
          break;
        case 'show_cities':
          this$static.showCityNames = false;
          !!this$static.bnds && this$static.bnds.width_0 > 350 && (this$static.showCityNames = isTrue(value_0));
          break;
        case 'row_show_as_unfiltered':
          $applyRowShowAsUnFiltered(this$static.data_0, value_0);
          break;
        case 'show_as_filtered':
          !!this$static.data_0 && $applyShowAsFiltered(this$static.data_0, value_0);
          removeShowAsFilteredhartOption = true;
          break;
        case 'region_stroke_color':
          this$static.regionBorderColor = $getColorForName(this$static.colorMgr, value_0);
      }
    }
  }
  removeShowAsFilteredhartOption && this$static.chartOptions.remove_0('show_as_filtered');
  $buildMappedUnmappedLists(this$static);
  minMax = $getMinMaxValues(this$static);
  isNaN_0(this$static.forcedMaxValue) || (minMax.max_0 = this$static.forcedMaxValue);
  maxValue = minMax.max_0;
  uniqueValues = $getUniqueValues(this$static);
  this$static.ranges_0 = getSortedAndCompletedRanges(this$static.rangeMap, this$static.manualRanges, maxValue);
  this$static.rangeColors = $getRangeColorsForName(this$static.colorMgr, this$static.colorPalette);
  for (i = 0; i < 9; i++) {
    i < this$static.ranges_0.array.length && (castTo($get_2(this$static.ranges_0, i), 58).color_0?this$static.rangeColors.array.length > i?$set(this$static.rangeColors, i, castTo($get_2(this$static.ranges_0, i), 58).color_0):$add_1(this$static.rangeColors, castTo($get_2(this$static.ranges_0, i), 58).color_0):i < this$static.rangeColors.array.length && $get_2(this$static.rangeColors, i) != null && $setColor(castTo($get_2(this$static.ranges_0, i), 58), castTo($get_2(this$static.rangeColors, i), 15)));
  }
  if (this$static.manualRanges) {
    this$static.rangeValues = new ArrayList;
    for (range$iterator = new ArrayList$1(this$static.ranges_0); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 58);
      $add_1(this$static.rangeValues, new MinMax(range.min_0, range.max_0));
    }
  }
   else {
    numRanges = this$static.rangeColors.array.length;
    hasCustomColors && (numRanges = this$static.ranges_0.array.length);
    this$static.rangeValues = getRangeValuesWithUniqueVals(minMax, this$static.balancedDistribution, numRanges, uniqueValues);
  }
  numberFormatter = $getFirstColumnFormat(this$static);
  !!numberFormatter && (this$static.numberFormatter = numberFormatter);
  $setToHavingRangeTextIfMinMaxEqual(this$static);
  this$static.rangeMap = null;
}

function $processZoomAndPanOptions(this$static){
  var key, key$iterator, layer, mapRect, newHeight, newWidth, newX, newY, numAreaShapes, value_0, zoomOrScaleEncountered;
  if (!this$static.zoomAndPanProcessed && $hasChartOptions(this$static)) {
    zoomOrScaleEncountered = false;
    for (key$iterator = $getChartOptionKeys(this$static).iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = $getChartOptionAsString(this$static, key);
      switch (key) {
        case 'map_zoom':
          this$static.scaleFactor = getDouble_0(value_0, 1);
          zoomOrScaleEncountered = true;
          break;
        case 'map_pan_x':
          this$static.mapOffset = new CFPoint(getDouble_0(value_0, 0), this$static.mapOffset.y_0);
          zoomOrScaleEncountered = true;
          break;
        case 'map_pan_y':
          this$static.mapOffset = new CFPoint(this$static.mapOffset.x_0, getDouble_0(value_0, 0));
          zoomOrScaleEncountered = true;
      }
    }
    this$static.chartOptions.remove_0('map_zoom');
    this$static.chartOptions.remove_0('map_pan_x');
    this$static.chartOptions.remove_0('map_pan_y');
    if (zoomOrScaleEncountered) {
      mapRect = $duplicate_5(this$static.viewPort);
      this$static.curScale = this$static.origScale * this$static.scaleFactor;
      newWidth = this$static.origBounds.width_0 * this$static.curScale;
      newHeight = this$static.origBounds.height_0 * this$static.curScale;
      newX = mapRect.x_0 + this$static.mapOffset.x_0;
      newY = mapRect.y_0 + this$static.mapOffset.y_0;
      this$static.mapBounds = new CFRect(newX, newY, newWidth, newHeight);
      layer = $getFirstAreaLayer(this$static);
      numAreaShapes = 0;
      !!layer && !!layer.dataShapeAry && layer.dataShapeAry.array.length > 0 && (numAreaShapes = layer.dataShapeAry.array.length);
      $setSizeAndStrokeWidthForMapShapes(this$static, true, numAreaShapes > 500);
    }
  }
  this$static.zoomAndPanProcessed = true;
}

function $resetDataShapes(this$static){
  var comp, comp$iterator, layer, layer$iterator;
  this$static.ranges_0 = null;
  this$static.rangeMap = new HashMap;
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    for (comp$iterator = new ArrayList$1(layer.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 47);
      $reset_1(comp);
    }
  }
}

function $resetForSizeChange(this$static){
  this$static.viewPort = null;
  this$static.rangesApplied = false;
  this$static.initalScalingFromDataSet = false;
  $removeDependentCompsFromCompArray(this$static);
  this$static.dependentComps = null;
}

function $setChart(this$static, chart){
  var layer, layer$iterator;
  !this$static.chart && (this$static.chart = chart);
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    layer.map_0 = this$static;
    $setChart_0(layer, chart);
  }
}

function $setData(this$static, theData){
  !!this$static.data_0 && this$static.data_0 != theData && $freeResources_11(this$static.data_0);
  this$static.resetDataShapes();
  this$static.rangesApplied = false;
  this$static.needsFormat = true;
  this$static.data_0 = theData;
}

function $setFrame(this$static, curTime){
  var pctComplete, pctPerRange, range, range$iterator, rangeNum;
  if (!this$static.animStarted) {
    for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 76);
      range.rangeNum >= 0 && $setValues($getMarkerFillColor(range));
    }
    this$static.animStarted = true;
  }
  pctComplete = $getPercentComplete(this$static.animInfo, curTime);
  if (pctComplete < 0.99) {
    pctPerRange = 1 / this$static.rangeComps.array.length;
    rangeNum = round_int(pctComplete / pctPerRange);
    rangeNum -= 1;
    if (this$static.curAnimRange != rangeNum && rangeNum >= 0) {
      this$static.curAnimRange = rangeNum;
      range = $getRangeByNum(this$static, this$static.curAnimRange);
      if (range) {
        !!range.markerFillColor && !!range.origMarkerFillColor && $setValuesFromColor(range.markerFillColor, range.origMarkerFillColor);
        $highlightRange(this$static, range, 255, false);
      }
    }
  }
   else {
    this$static.curAnimRange = -1;
    this$static.animStarted = false;
    for (range$iterator = new ArrayList$1(this$static.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 76);
      range.rangeNum >= 0 && !!range.markerFillColor && !!range.origMarkerFillColor && $setValuesFromColor(range.markerFillColor, range.origMarkerFillColor);
    }
    $clearRangeHighlight(this$static);
  }
}

function $setHoverDataForZoomControl(this$static, hoverObject){
  if (hoverObject == null)
    return false;
  if (hoverObject != null && instanceOfString(hoverObject)) {
    $equals_2('{"internal": "zoomin"}', hoverObject) && (this$static.showZoomInControlHover = true);
    $equals_2('{"internal": "zoomout"}', hoverObject) && (this$static.showZoomOutControlHover = true);
    $equals_2('{"internal": "citytoggle"}', hoverObject) && (this$static.showCityControlInHover = true);
    $equals_2('datatable', hoverObject) && (this$static.showDataTableControlHover = true);
    $equals_2('groupelements', hoverObject) && (this$static.showGroupElementsControlHover = true);
    $createZoomControls(this$static);
    return true;
  }
  return false;
}

function $setRangeMarkerColorOrAlpha(this$static, range, color_0, alpha_0){
  var lii;
  color_0?$setValuesFromColor($getMarkerFillColor(range), color_0):$setAlpha($getMarkerFillColor(range), alpha_0);
  lii = $getLegendItemForRange(this$static, range);
  !!lii && (color_0?$setValuesFromColor(lii.fill_0.color_0, color_0):(lii.fill_0.color_0.alpha_0 = 64 , undefined));
}

function $setSizeAndStrokeWidthForMapShapes(this$static, setCurScale, thinStroke){
  var firstArea, layer, layer$iterator, strokeWidth, strokecolor;
  strokeWidth = thinStroke?0.4:0.5;
  (this$static.mapBounds.width_0 < 150 || this$static.mapBounds.height_0 < 120) && (strokeWidth = 0.2);
  firstArea = true;
  setCurScale && (this$static.curScale = this$static.mapBounds.width_0 / this$static.origBounds.width_0);
  strokecolor = $duplicate_0(($clinit_CFColor() , WHITE));
  for (layer$iterator = new ArrayList$1(this$static.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    $moveAndScale_0(layer, this$static.mapBounds, this$static.curScale, !firstArea, this$static.NODATA_CLR, strokecolor, strokeWidth, this$static.editMode, this$static.viewPort);
    if (layer.type_0 == 0 || layer.type_0 == 3) {
      strokecolor = this$static.regionBorderColor;
      strokeWidth += 0.8;
      firstArea = false;
    }
  }
}

function $setToHavingRangeTextIfMinMaxEqual(this$static){
  var allMinMaxAreSame, i, newRange, rangeVal, rangeVal$iterator, rangeValStr;
  if (this$static.rangeValues.array.length > 0) {
    allMinMaxAreSame = true;
    for (rangeVal$iterator = new ArrayList$1(this$static.rangeValues); rangeVal$iterator.i < rangeVal$iterator.this$01.array.length;) {
      rangeVal = castTo($next_3(rangeVal$iterator), 48);
      if (rangeVal.min_0 != rangeVal.max_0) {
        allMinMaxAreSame = false;
        break;
      }
    }
    if (allMinMaxAreSame) {
      $setAutoAbbreviateState(this$static.numberFormatter, false);
      for (i = 0; i < this$static.rangeValues.array.length; i++) {
        rangeValStr = $formatNumber_1(this$static.numberFormatter, castTo($get_2(this$static.rangeValues, i), 48).min_0);
        if (this$static.ranges_0.array.length > i) {
          castTo($get_2(this$static.ranges_0, i), 58).text_0 == null && (castTo($get_2(this$static.ranges_0, i), 58).text_0 = rangeValStr);
          !castTo($get_2(this$static.ranges_0, i), 58).color_0 && (castTo($get_2(this$static.ranges_0, i), 58).color_0 = $getRangeColorForIndex(this$static.rangeColors, i));
        }
         else {
          newRange = new Range_1(castTo($get_2(this$static.rangeValues, i), 48).min_0, castTo($get_2(this$static.rangeValues, i), 48).max_0);
          newRange.text_0 = rangeValStr;
          newRange.color_0 = $getRangeColorForIndex(this$static.rangeColors, i);
          $add_1(this$static.ranges_0, newRange);
        }
      }
      this$static.hasRangeText = true;
    }
  }
}

function $setup(this$static, topLineComp, totalAmtComp){
  var curRange, i, nextRange;
  this$static.topLineComp = topLineComp;
  this$static.totalAmtComp = totalAmtComp;
  this$static.showRangeMinAndMax = $hasMinAndMaxRangeText(this$static);
  for (i = -1; i < this$static.rangeComps.array.length; i++) {
    curRange = $getRangeByNum(this$static, i);
    nextRange = $getRangeByNum(this$static, i + 1);
    if (curRange) {
      !curRange.textMax && !!nextRange && curRange.rangeNum != -1 && (curRange.textMax = nextRange.textMin);
      !!curRange && !!curRange.marker && !!curRange.marker.geAry && curRange.marker.geAry.size_1() > 0 && !!castTo(curRange.marker.geAry.get_1(0), 12).shapeAry && castTo(curRange.marker.geAry.get_1(0), 12).shapeAry.array.length > 0 && !!castTo($get_2(castTo(curRange.marker.geAry.get_1(0), 12).shapeAry, 0), 6).fill_0 && (castTo($get_2(castTo(curRange.marker.geAry.get_1(0), 12).shapeAry, 0), 6).fill_0.noMouse = false);
    }
  }
}

function $updateMapBoundsAfterZoom(this$static){
  var mapRect;
  mapRect = $duplicate_5(this$static.mapBounds);
  $setX_0(mapRect, this$static.viewPort.x_0 + this$static.mapOffset.x_0);
  $setY_0(mapRect, this$static.viewPort.y_0 + this$static.mapOffset.y_0);
  this$static.mapBounds = $getMapBoundsForRect(this$static, mapRect, this$static.scaleFactor * this$static.origScale);
}

function $updateNumberFormatWithChartOptionOverrides(this$static, numFormatter){
  var afterDecimal, negativeType, type_0;
  afterDecimal = $getChartOptionAsString(this$static, 'decimal_places');
  afterDecimal != null && $applyDecimalPlaces(numFormatter, afterDecimal);
  type_0 = $getChartOptionAsString(this$static, 'label_format');
  type_0 != null && $applyValueFormatOverride(numFormatter, type_0);
  negativeType = $getChartOptionAsString(this$static, 'negative_numbers');
  negativeType != null && $applyNegativeFormat(numFormatter, negativeType);
}

function $updateWithDefinition(this$static, compDef, datasourceMap, oldDataGrid){
  var dataGrid, newData;
  if (compDef) {
    $setChartOptions(this$static, compDef.overrides);
    $setColumnFormats(this$static, compDef.columnFormats);
    if (compDef.datasource != null && compDef.datasource.length > 0 && !!datasourceMap) {
      dataGrid = castTo($getStringValue(datasourceMap, compDef.datasource), 61);
      if (dataGrid) {
        !!this$static.data_0 && $freeResources_11(this$static.data_0);
        this$static.setData(dataGrid);
      }
    }
     else if (oldDataGrid) {
      !!this$static.data_0 && $freeResources_11(this$static.data_0);
      this$static.setData(oldDataGrid);
    }
    this$static.rangesApplied = false;
    this$static.needsFormat = true;
  }
   else if (!!datasourceMap && datasourceMap.hashCodeMap.size_0 + datasourceMap.stringMap.size_0 > 0) {
    newData = castTo($next_1(new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(datasourceMap)).this$01)).getValue(), 61);
    this$static.setData(newData);
    $setWarningMessage(this$static.chart, null);
    this$static.dataMapped = false;
    this$static.rangesApplied = false;
    this$static.needsFormat = true;
  }
  !!this$static.data_0 && (this$static.data_0.errorCode != 0?$setWarningMessage(this$static.chart, getErrorCodeString(this$static.data_0.errorCode, this$static.chart.locale)):this$static.data_0.dataHasBeenLimited?$warnNotAllDataShown(this$static.chart):this$static.chart.disableDueToSize && $setWarningMessage(this$static.chart, null));
}

function $validRangesAreDefined(this$static){
  var i, rangesDefined;
  rangesDefined = false;
  for (i = this$static.rangeValues.array.length - 1; i >= 0; i--) {
    if (!isInfinite(castTo($get_2(this$static.rangeValues, i), 48).min_0) && castTo($get_2(this$static.rangeValues, i), 48).min_0 != $intern_19) {
      (!isNaN_0(castTo($get_2(this$static.rangeValues, i), 48).min_0) || !isNaN_0(castTo($get_2(this$static.rangeValues, i), 48).max_0)) && (rangesDefined = true);
      break;
    }
  }
  return rangesDefined;
}

function $zoomIn(this$static, zoomPoint){
  if (this$static.supportsZooming && !!this$static.viewPort && $containsPoint_0(this$static.viewPort, zoomPoint)) {
    $clearRangeHighlight(this$static);
    this$static.startingDragOffset = null;
    this$static.mapOffset = $getMapOffsetForZoomFromPoint(this$static, zoomPoint, this$static.scaleFactor * 1.2);
    this$static.rangesApplied = false;
    this$static.needsFormat = true;
    this$static.scaleFactor *= 1.2;
    $updateMapBoundsAfterZoom(this$static);
    $addZoomPanCitiesChartOptions(this$static);
    return true;
  }
  return false;
}

function $zoomOut(this$static, zoomPoint){
  if (this$static.supportsZooming && !!this$static.viewPort && $containsPoint_0(this$static.viewPort, zoomPoint)) {
    $clearRangeHighlight(this$static);
    this$static.startingDragOffset = null;
    this$static.mapOffset = $getMapOffsetForZoomFromPoint(this$static, zoomPoint, this$static.scaleFactor / 1.2);
    this$static.rangesApplied = false;
    this$static.needsFormat = true;
    this$static.scaleFactor /= 1.2;
    if (this$static.scaleFactor < 1) {
      this$static.scaleFactor = 1;
      this$static.mapOffset = new CFPoint(0, 0);
    }
    this$static.scaleFactor == 1 && this$static.hideNoDataShapes && (this$static.initalScalingFromDataSet = false);
    $updateMapBoundsAfterZoom(this$static);
    $addZoomPanCitiesChartOptions(this$static);
    return true;
  }
  return false;
}

function MapArea(theChart){
  ComponentCSR.call(this, theChart, 'Map');
  $$init(this);
  this.layers = null;
}

function MapArea_0(source, name_0){
  var newLayer, sourceLayer, sourceLayer$iterator;
  ComponentCSR.call(this, null, name_0);
  $$init(this);
  if (source) {
    this.chart = source.chart;
    this.origBounds = source.bnds;
    if (!!source.layers && source.layers.array.length > 0) {
      this.layers = new ArrayList;
      for (sourceLayer$iterator = new ArrayList$1(source.layers); sourceLayer$iterator.i < sourceLayer$iterator.this$01.array.length;) {
        sourceLayer = castTo($next_3(sourceLayer$iterator), 91);
        newLayer = new MapLayer(sourceLayer);
        $add_1(this.layers, newLayer);
      }
    }
  }
}

function MapArea_1(name_0, bnds){
  ComponentCSR.call(this, null, name_0);
  $$init(this);
  this.origBounds = bnds;
}

defineClass(85, 63, {23:1, 63:1, 85:1}, MapArea, MapArea_0, MapArea_1);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents(chart){
  if (chart.graphPickerPanelOpen)
    return;
  this.legend = new LegendMapArea(chart, this.name_0 + '_legend', this);
  $addDependentComp(this, this.legend);
}
;
_.adjustLayout = function adjustLayout_0(){
  var layer, layer$iterator;
  if (this.treatAsSmall || this.simplifiedForMobile) {
    this.dataLabelVisible = false;
    for (layer$iterator = new ArrayList$1(this.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
      layer = castTo($next_3(layer$iterator), 91);
      $clearFrontArys(layer);
    }
  }
   else {
    this.dataLabelVisible = true;
  }
}
;
_.autoZoomToData = function autoZoomToData(){
  var comp, comp$iterator, height, heightOffset, layer, mapRect, margin, maxX, maxY, minX, minY, newHeight, newWidth, numAreaShapes, scaleHeight, scaleWidth, tmpOrigBnds, width_0, widthOffset;
  if (this.hasNoDataShapes) {
    minX = $intern_19;
    maxX = $intern_20;
    minY = $intern_19;
    maxY = $intern_20;
    margin = 20;
    (this.bnds.width_0 < 250 || this.bnds.height_0 < 250) && (margin = 5);
    layer = $getFirstAreaLayer(this);
    if (!!layer && !!layer.dataShapeAry && layer.dataShapeAry.array.length > 0) {
      numAreaShapes = layer.dataShapeAry.array.length;
      for (comp$iterator = new ArrayList$1(layer.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 47);
        if (!isNaN_0(comp.value_0)) {
          tmpOrigBnds = $getOrigOrCalculatedOrigBounds(comp);
          tmpOrigBnds.x_0 < minX && (minX = tmpOrigBnds.x_0);
          tmpOrigBnds.y_0 < minY && (minY = tmpOrigBnds.y_0);
          tmpOrigBnds.x_0 + tmpOrigBnds.width_0 > maxX && (maxX = tmpOrigBnds.x_0 + tmpOrigBnds.width_0);
          tmpOrigBnds.y_0 + tmpOrigBnds.height_0 > maxY && (maxY = tmpOrigBnds.y_0 + tmpOrigBnds.height_0);
        }
      }
      width_0 = maxX - minX;
      height = maxY - minY;
      this.hideNoDataOrigBnds = new CFRect(minX, minY, width_0, height);
      scaleWidth = (this.viewPort.width_0 - margin) / width_0;
      scaleHeight = (this.viewPort.height_0 - margin) / height;
      if (scaleWidth < scaleHeight) {
        this.scaleFactor = scaleWidth / this.curScale;
        this.curScale = scaleWidth;
      }
       else {
        this.scaleFactor = scaleHeight / this.curScale;
        this.curScale = scaleHeight;
      }
      newWidth = width_0 * this.curScale;
      newHeight = height * this.curScale;
      widthOffset = (this.viewPort.width_0 - newWidth) / 2;
      heightOffset = (this.viewPort.height_0 - newHeight) / 2;
      mapRect = $duplicate_5(this.viewPort);
      $moveAndScaleMap(this, mapRect, this.curScale);
      this.mapBounds = new CFRect(0 - (minX * this.curScale - widthOffset), 0 - (minY * this.curScale - heightOffset), this.origBounds.width_0 * this.curScale, this.origBounds.height_0 * this.curScale);
      this.mapOffset = new CFPoint(this.mapBounds.x_0, this.mapBounds.y_0);
      $setSizeAndStrokeWidthForMapShapes(this, false, numAreaShapes > 500);
      this.initalScalingFromDataSet = true;
    }
  }
}
;
_.cancelHighlighting = function cancelHighlighting_0(){
  return this.setHoverData(null, this.rnd);
}
;
_.draw_1 = function draw_2(rnd){
  var comp, comp$iterator, comp$iterator0, ge, ge$iterator, range, range$iterator;
  $drawBackAndDecorationLayers(this, rnd, false);
  for (comp$iterator0 = new ArrayList$1(this.legendComponents); comp$iterator0.i < comp$iterator0.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator0), 23);
    comp.draw_1(rnd);
  }
  if (this.dependentComps) {
    for (comp$iterator = new ArrayList$1(this.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      $indexOf_1(this.chart.compAry, comp, 0) != -1 || comp.draw_1(rnd);
    }
  }
  for (range$iterator = new ArrayList$1(this.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    $draw_3(range, rnd);
  }
  for (ge$iterator = new ArrayList$1(this.hoverGEAry); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 12);
    $draw_2(ge, rnd);
  }
  $drawBackAndDecorationLayers(this, rnd, true);
  $drawLayersOfType(this, rnd, 1);
  !!this.geHoverText && $draw_2(this.geHoverText, rnd);
  $drawZoomControls(this, rnd);
}
;
_.format_0 = function format_1(rnd){
  $format(this, rnd);
}
;
_.freeResources = function freeResources_1(dataToKeep){
  $freeResources_4(this, dataToKeep);
}
;
_.getColorAry = function getColorAry_0(){
  return null;
}
;
_.getCompositeFilters = function getCompositeFilters_0(filters){
  $getChartOptionAsString(this, 'row_show_as_unfiltered') != null && !$equals_2($getChartOptionAsString(this, 'row_show_as_unfiltered'), 'none') && $add_1(filters, $getChartOptionAsString(this, 'row_show_as_unfiltered'));
  $getChartOptionAsString(this, 'column_show_as_unfiltered') != null && !$equals_2($getChartOptionAsString(this, 'column_show_as_unfiltered'), 'none') && $add_1(filters, $getChartOptionAsString(this, 'column_show_as_unfiltered'));
}
;
_.getFormattedHoverText = function getFormattedHoverText(mapComp){
  var rangeNum, rangeStr, result, valueStr;
  result = '%_LONGNAME : %_VALUE';
  this.hoverTextFormatStr != null && $trim(this.hoverTextFormatStr).length > 0 && (result = castToString(checkNotNull(this.hoverTextFormatStr)));
  rangeStr = '';
  valueStr = mapComp.valStr;
  if (this.hasRangeText) {
    if (mapComp.range) {
      rangeNum = mapComp.range.rangeNum;
      !!this.ranges_0 && rangeNum >= 0 && rangeNum < this.ranges_0.array.length && (rangeStr = castTo($get_2(this.ranges_0, rangeNum), 58).text_0);
    }
  }
  (valueStr == null || $trim(valueStr).length == 0) && (valueStr = getString('NO_DATA', this.chart.locale));
  result = replaceMacroWithValue(result, '%_VALUE', valueStr);
  result = replaceMacroWithValue(result, '%_RANGENAME', rangeStr);
  result = replaceMacroWithValue(result, '%_NAME', mapComp.name_0);
  result = replaceMacroWithValue(result, '%_LONGNAME', $getLongName(mapComp));
  if (!!mapComp && !!mapComp.row) {
    result = replaceTOOLTIP('%_TOOLTIP1', 'EXTRAINFO1', $getFirstCell(mapComp.row), this, true, result);
    result = replaceTOOLTIP('%_TOOLTIP2', 'EXTRAINFO2', $getFirstCell(mapComp.row), this, true, result);
    result = replaceTOOLTIP('%_TOOLTIP3', 'EXTRAINFO3', $getFirstCell(mapComp.row), this, true, result);
  }
   else {
    result = $replaceAll(result, '%_TOOLTIP1', '');
    result = $replaceAll(result, '%_TOOLTIP2', '');
    result = $replaceAll(result, '%_TOOLTIP3', '');
  }
  return result;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_0(x_0, y_0, rnd){
  var comp, comp$iterator, dataObject, layer, layer$iterator, markerShape, range, range$iterator, shape_0, zoomShape;
  zoomShape = $getZoomShapeUnderPoint(this, x_0, y_0, rnd);
  if (zoomShape) {
    dataObject = $getDataObjectForShape_0(this, zoomShape);
    instanceOfString(dataObject) && $setDrillFilter_0(zoomShape, castToString(dataObject));
    return zoomShape;
  }
  if (this.lastHoverComp != null) {
    if (instanceOf(this.lastHoverComp, 76)) {
      markerShape = $getShapeUnderPointForRange(this, castTo(this.lastHoverComp, 76), x_0, y_0, rnd);
      if (markerShape)
        return markerShape;
    }
     else if (instanceOf(this.lastHoverComp, 23)) {
      if (!this.viewPort || !!this.viewPort && $containsPoint(this.viewPort, x_0, y_0)) {
        shape_0 = castTo(this.lastHoverComp, 23).getShapeUnderPoint(x_0, y_0, rnd);
        if (shape_0)
          return shape_0;
      }
    }
  }
  clearGraphicElementArray(this.hoverGEAry);
  for (range$iterator = new ArrayList$1(this.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    markerShape = $getShapeUnderPointForRange(this, range, x_0, y_0, rnd);
    if (markerShape)
      return markerShape;
  }
  if (!this.viewPort || !!this.viewPort && $containsPoint(this.viewPort, x_0, y_0)) {
    for (layer$iterator = new ArrayList$1(this.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
      layer = castTo($next_3(layer$iterator), 91);
      if (layer.isBackgroundLayer) {
        shape_0 = null;
        if (layer.dataShapeAry) {
          for (comp$iterator = new ArrayList$1(layer.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
            comp = castTo($next_3(comp$iterator), 47);
            comp.bnds?$containsPoint(comp.bnds, x_0, y_0) && (shape_0 = $getShapeUnderPoint_1(comp, x_0, y_0, rnd)):(shape_0 = $getShapeUnderPoint_1(comp, x_0, y_0, rnd));
            if (shape_0) {
              shape_0.dataObject = this;
              return shape_0;
            }
          }
        }
      }
    }
  }
  return null;
}
;
_.handleClick = function handleClick_0(shapeClicked){
  var dataObject, mapDataAry, selMapNames, zoomPoint;
  dataObject = $getDataObjectForShape_0(this, shapeClicked);
  if (!!shapeClicked && dataObject != null && instanceOfString(dataObject)) {
    if (equals_Ljava_lang_Object__Z__devirtual$(dataObject, '{"internal": "zoomin"}')) {
      zoomPoint = $getCenterPoint(this.viewPort);
      return $zoomIn(this, zoomPoint);
    }
     else if (equals_Ljava_lang_Object__Z__devirtual$(dataObject, '{"internal": "zoomout"}') && this.scaleFactor > 1) {
      zoomPoint = $getCenterPoint(this.viewPort);
      return $zoomOut(this, zoomPoint);
    }
     else if (equals_Ljava_lang_Object__Z__devirtual$(dataObject, '{"internal": "citytoggle"}')) {
      this.showCityNames = !this.showCityNames;
      this.chartOptions.put('show_cities', ($clinit_Boolean() , this.showCityNames?true:false));
      this.rangesApplied = false;
      this.needsFormat = true;
      $addZoomPanCitiesChartOptions(this);
      return true;
    }
     else if (equals_Ljava_lang_Object__Z__devirtual$(dataObject, 'datatable')) {
      mapDataAry = $getMapDataArrays(this);
      this.rnd.supportsNativeEditMapData() && this.rnd.editMapData(mapDataAry[0], mapDataAry[1], mapDataAry[2], mapDataAry[3], mapDataAry[4]);
    }
     else if (equals_Ljava_lang_Object__Z__devirtual$(dataObject, 'groupelements')) {
      selMapNames = $getSelectedMapShapeNames(this);
      this.rnd.supportsNativeGroupMapItems() && this.rnd.groupMapItems(selMapNames);
    }
    return false;
  }
   else if (!!shapeClicked && !!this.chart && $usingCardBus(this.chart) && dataObject != null && instanceOf(dataObject, 76)) {
    this.drillFilter = $handleToggleRangeShowAsFiltered(this, castTo(dataObject, 76));
    $setDrillFromDataBasedOnShowAsFiltered(this, true);
    $getRangesShowAsFiltered(this);
    return false;
  }
   else {
    return false;
  }
}
;
_.handleDrag_0 = function handleDrag_1(startX, startY, curX, curY){
  var result, zoomControlShape;
  result = false;
  clearGraphicElementArray(this.hoverGEAry);
  if (this.scaleFactor > 1) {
    zoomControlShape = null;
    !!this.zoomXY && (zoomControlShape = new CFRect(this.zoomXY.x_0, this.zoomXY.y_0, this.zoomBtnSize, this.zoomBtnSize * 2));
    if (!zoomControlShape || !$containsPoint_0(zoomControlShape, new CFPoint(startX, startY))) {
      !this.startingDragOffset && (this.startingDragOffset = $duplicate_4(this.mapOffset));
      this.mapOffset = new CFPoint(this.startingDragOffset.x_0 + (curX - startX), this.startingDragOffset.y_0 + (curY - startY));
      this.needsFormat = true;
      result = true;
    }
  }
  return result;
}
;
_.handleDragEnd_0 = function handleDragEnd_1(startX, startY, curX, curY){
  var result;
  result = false;
  if (this.scaleFactor > 1) {
    if (this.startingDragOffset) {
      this.mapOffset = new CFPoint(this.startingDragOffset.x_0 + (curX - startX), this.startingDragOffset.y_0 + (curY - startY));
      this.startingDragOffset = null;
      this.rangesApplied = false;
      this.needsFormat = true;
      result = true;
    }
  }
  $addZoomPanCitiesChartOptions(this);
  return result;
}
;
_.highlightUsingFilters = function highlightUsingFilters_0(filters){
  var area, filter, filter$iterator, highlightManager, match_0;
  if (!!filters && filters.array.length > 0) {
    highlightManager = new HighlightManager(filters);
    area = $getFirstAreaLayer(this);
    if (area) {
      if (!!highlightManager.filters && highlightManager.filters.array.length > 0) {
        for (filter$iterator = new ArrayList$1(highlightManager.filters); filter$iterator.i < filter$iterator.this$01.array.length;) {
          filter = castTo($next_3(filter$iterator), 148);
          if (($equals_2(filter.operand, 'equals') || $equals_2(filter.operand, 'in')) && !!filter.values && filter.values.array.length > 0) {
            match_0 = $findMapShapeForData(area, castToString($get_2(filter.values, 0)));
            if (match_0)
              return this.setHoverData(match_0, this.rnd);
          }
        }
      }
    }
  }
  return false;
}
;
_.moveAndScaleMapAndPlaceLegend = function moveAndScaleMapAndPlaceLegend(rnd, sideLegendWidth, margin){
  var hideHoverLegend, legendHeight, mapRect;
  if (this.origBounds) {
    hideHoverLegend = false;
    $getChartOptionAsString(this, 'hide_hover_legend') != null && isTrue($getChartOptionAsString(this, 'hide_hover_legend')) && (hideHoverLegend = true);
    (!this.data_0 || $getNumCols(this.data_0) == 0 || $getNumRows(this.data_0) == 0) && this.showSideLegend && (hideHoverLegend = true);
    this.bnds.width_0 > 400 && this.bnds.height_0 > 350 && !this.chart.mobile && !this.chart.staticImage?(this.supportsZooming = true):(this.supportsZooming = false);
    if (!this.supportsZooming) {
      this.viewPort = null;
      this.scaleFactor = 1;
      $clearZoomControls(this);
      this.bnds.width_0 < 150 && (margin = 0);
    }
    if (!this.viewPort) {
      this.showSideLegend = true;
      hideHoverLegend && (this.showSideLegend = false);
      this.viewPort = $duplicate_5(this.bnds);
      $inflate(this.viewPort, -margin);
      if (this.bnds.width_0 > 800 && this.bnds.height_0 >= 350 && !this.editMode && this.showSideLegend) {
        $setWidth(this.viewPort, this.viewPort.width_0 - sideLegendWidth);
        this.legendBnds = new CFRect($getRight(this.bnds) - sideLegendWidth, 5, sideLegendWidth, 0);
        this.legendMarkerSize = 20;
      }
       else if (this.bnds.width_0 > 275 && (this.bnds.height_0 > 180 || this.chart.mobile && this.bnds.height_0 > 120) && $validRangesAreDefined(this) && !this.hideAbbrevLegend) {
        legendHeight = 32;
        if (this.hasRangeText) {
          (!this.dependentComps || this.dependentComps.array.length < 1) && this.addLegendsOrSubComponents(this.chart);
          this.legend = $getLegend(this);
          if (this.legend) {
            this.legend.position = 1;
            instanceOf(this.legend, 66) && $formatFromGraph_1(castTo(this.legend, 66), rnd);
            legendHeight = this.legend.bnds.height_0;
            $setMarkerSize(this.legend, 13);
            this.legend.setFont(new CFFont_0(null, 14, $getTextColor(this.chart.palette)));
            instanceOf(this.legend, 66) && (castTo(this.legend, 66).textMarkerYOffset = -2);
            $indexOf_1(this.chart.compAry, this.legend, 0) != -1 || $add_0(this.chart.compAry, 0, this.legend);
          }
        }
        $setHeight(this.viewPort, this.viewPort.height_0 - legendHeight);
        this.legendBnds = new CFRect(this.bnds.x_0, $getBottom(this.viewPort), this.bnds.width_0, legendHeight);
        this.legendMarkerSize = 15;
        this.showSideLegend = false;
        this.showBottomLegend = true;
      }
       else {
        this.showSideLegend = false;
        this.showBottomLegend = false;
      }
      this.origScale = $getMapScaleNonZoomed(this, this.viewPort);
      $moveAndScaleToOriginal(this);
    }
     else if (this.mapBounds) {
      hideHoverLegend && (this.showSideLegend = false);
      mapRect = $duplicate_5(this.mapBounds);
      if (this.scaleFactor == 1) {
        $moveAndScaleToOriginal(this);
      }
       else {
        $setX_0(mapRect, this.viewPort.x_0 + this.mapOffset.x_0);
        $setY_0(mapRect, this.viewPort.y_0 + this.mapOffset.y_0);
        $moveAndScaleMap(this, mapRect, this.scaleFactor * this.origScale);
      }
    }
  }
}
;
_.processChartOptions = function processChartOptions(){
  $processChartOptions_0(this);
}
;
_.processMapShapesForJsonMap = function processMapShapesForJsonMap(){
  var bkgLayer, ge, ge$iterator, hoverText, mapComp, mapComp$iterator, shape_0, shape$iterator;
  bkgLayer = $getFirstAreaLayer(this);
  if (bkgLayer) {
    for (mapComp$iterator = new ArrayList$1(bkgLayer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      if (!this.hideNoDataShapes || !isNaN_0(mapComp.value_0)) {
        hoverText = this.getFormattedHoverText(mapComp);
        if (hoverText != null) {
          if (mapComp.geAry) {
            for (ge$iterator = mapComp.geAry.iterator(); ge$iterator.hasNext_0();) {
              ge = castTo(ge$iterator.next_1(), 12);
              if (ge.shapeAry) {
                for (shape$iterator = new ArrayList$1(ge.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
                  shape_0 = castTo($next_3(shape$iterator), 6);
                  shape_0.hoverText = hoverText;
                }
              }
            }
          }
        }
      }
    }
  }
}
;
_.processZoomAndPanOptions = function processZoomAndPanOptions(){
  $processZoomAndPanOptions(this);
}
;
_.resetDataShapes = function resetDataShapes(){
  $resetDataShapes(this);
}
;
_.resetForSizeChange = function resetForSizeChange_0(){
  $resetForSizeChange(this);
}
;
_.setData = function setData(theData){
  $setData(this, theData);
}
;
_.setFrame = function setFrame_0(type_0, easingType, startTime, curTime, endTime, rnd){
  $setFrame(this, curTime);
}
;
_.setHoverData = function setHoverData_1(hoverObject, rnd){
  var back_0, hoverComp, hoverCompRange, lii, mapHoverComp, origColor, range, range$iterator, rangeIndex, selectedRange;
  if (hoverObject == null && this.lastHoverComp != null) {
    clearGraphicElementArray(this.hoverGEAry);
    this.geHoverText = null;
    $clearRangeHighlight(this);
    this.hoverNonGeoStyle && (back_0 = $getFirstAreaLayer(this) , !!back_0 && $resetNoDataShapesColor(back_0));
    this.lastHoverComp = null;
    $clearAllZoomControlFlags(this);
    $createZoomControls(this);
    return true;
  }
  if (hoverObject != null && maskUndefined(hoverObject) !== maskUndefined(this.lastHoverComp)) {
    $clearAllZoomControlFlags(this);
    if (instanceOf(hoverObject, 23)) {
      hoverComp = castTo(hoverObject, 23);
      if (maskUndefined(hoverComp) !== maskUndefined(this.lastHoverComp)) {
        clearGraphicElementArray(this.hoverGEAry);
        if (instanceOf(hoverComp, 47)) {
          mapHoverComp = castTo(hoverComp, 47);
          !!this.origBounds && (!(this.bnds.width_0 > 800 && this.bnds.height_0 >= 350 && !this.editMode && this.showSideLegend) || this.alwaysShowHoverText) && $setHoverText_0(mapHoverComp, this.getFormattedHoverText(mapHoverComp));
          if (!this.data_0 || !!this.data_0 && this.data_0.numFilteredRows == 0) {
            hoverCompRange = mapHoverComp.range;
            if (hoverCompRange) {
              for (range$iterator = new ArrayList$1(this.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
                range = castTo($next_3(range$iterator), 76);
                if (this.hoverNonGeoStyle) {
                  if (range != hoverCompRange) {
                    $setRangeMarkerColorOrAlpha(this, range, this.hoverNonGeoNonSelectedColor, 0);
                  }
                   else {
                    origColor = range.origMarkerFillColor;
                    !!origColor && $setRangeMarkerColorOrAlpha(this, range, origColor, 0);
                  }
                }
                 else 
                  $setRangeMarkerColorOrAlpha(this, range, null, 128);
                $setRangeTextColor(range, $duplicate_0(($clinit_CFColor() , WHITE)), true);
                this.hoverNonGeoStyle || $useHoverNotSelectedColorForAllShapes(range);
              }
            }
             else 
              $clearRangeHighlight(this);
          }
          $addHoverShapesForComponent(this, mapHoverComp, rnd);
        }
         else if (instanceOf(hoverComp, 76)) {
          selectedRange = castTo(hoverComp, 76);
          $highlightRange(this, selectedRange, 128, true);
        }
        this.lastHoverComp = hoverComp;
        return true;
      }
    }
     else if (instanceOf(hoverObject, 37)) {
      lii = castTo(hoverObject, 37);
      if (lii.colInfo) {
        rangeIndex = lii.colInfo.curIndex;
        selectedRange = castTo($get_2(this.rangeComps, rangeIndex), 76);
        $highlightRange(this, selectedRange, 128, true);
        this.lastHoverComp = hoverObject;
        return true;
      }
    }
    this.lastHoverComp = hoverObject;
  }
  return $setHoverDataForZoomControl(this, hoverObject);
}
;
_.setNeedsFormat = function setNeedsFormat_1(flag){
  this.rangesApplied = false;
  this.needsFormat = true;
}
;
_.supportsDrag_0 = function supportsDrag_1(){
  if (!!this.origBounds && this.scaleFactor > 1)
    return true;
  return false;
}
;
_.supportsZoom = function supportsZoom_0(){
  return true;
}
;
_.updateWithDefinition = function updateWithDefinition_0(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
  $updateWithDefinition(this, compDef, datasourceMap, oldDataGrid);
}
;
_.zoomIn = function zoomIn_0(zoomPoint, numZooms){
  return $zoomIn(this, zoomPoint);
}
;
_.zoomOut = function zoomOut_0(zoomPoint, numZooms){
  return $zoomOut(this, zoomPoint);
}
;
_.abbrevHvrLegendVals = false;
_.alwaysShowHoverText = false;
_.animStarted = false;
_.autoZoom = false;
_.balancedDistribution = false;
_.curAnimRange = 0;
_.curScale = 0;
_.customMap = false;
_.dataLabelBkgFillAlpha = 0;
_.dataLabelShowBackground = false;
_.dataLabelVisible = false;
_.dataMapped = false;
_.datalabelFontSize = 0;
_.dontAbbrevDatalabel = false;
_.editMode = false;
_.forcedMaxValue = 0;
_.hasNoDataShapes = false;
_.hasRangeText = false;
_.hideAbbrevLegend = false;
_.hideNoDataShapes = false;
_.hideTotal = false;
_.hideValues = false;
_.hoverNonGeoStyle = false;
_.initalScalingFromDataSet = false;
_.legendMarkerSize = 0;
_.manualRanges = false;
_.origScale = 0;
_.rangesApplied = false;
_.scaleFactor = 0;
_.showBottomLegend = false;
_.showCityControlInHover = false;
_.showCityNames = false;
_.showDataTableControlHover = false;
_.showGroupElementsControlHover = false;
_.showRangeMinAndMax = false;
_.showSideLegend = false;
_.showZoomInControlHover = false;
_.showZoomOutControlHover = false;
_.supportsZooming = false;
_.zeroLikeNoData = false;
_.zoomAndPanProcessed = false;
_.zoomBtnSize = 0;
var Lcom_domo_charting_base_MapArea_2_classLit = createForClass('com.domo.charting.base', 'MapArea', 85);
function $addCityPointLayerIfNeeded(this$static){
  var layer;
  layer = $getFirstPointLayer(this$static);
  if (!layer) {
    layer = new MapLayer_0('city', 'point', 0);
    $add_1(this$static.layers, layer);
  }
}

function $addHoverShapesForMapPointComponent(this$static, mapHoverComp, rnd){
  var clipShape, endClipShape, hoverGE, hoverTextGE;
  hoverGE = new GraphicElement;
  hoverTextGE = null;
  if (!$equals_2(mapHoverComp.name_0, 'Unmapped')) {
    if (this$static.supportsZooming && !!this$static.viewPort) {
      clipShape = new CFShape_1(this$static.viewPort, null, null);
      clipShape.isClip = true;
      !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
      $add_1(hoverGE.shapeAry, clipShape);
    }
    mapHoverComp.addEnlargedHoverShape(hoverGE);
    if (this$static.supportsZooming && !!this$static.viewPort) {
      endClipShape = new CFShape;
      endClipShape.isClip = true;
      !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
      $add_1(hoverGE.shapeAry, endClipShape);
    }
    hoverTextGE = $getHoverTextShapeGEForComponent(this$static, mapHoverComp, rnd);
  }
  $add_1(this$static.hoverGEAry, hoverGE);
  !!hoverTextGE && $add_1(this$static.hoverGEAry, hoverTextGE);
}

function $addLatLongLayer(this$static){
  if (!this$static.latlongLayerProcessed) {
    this$static.latLongLayer = new MapLayer_0('latlong', 'latlong', 0);
    this$static.latLongLayer.map_0 = this$static;
    $addLatLongPointsToLatLongLayer(this$static);
    $add_1(this$static.layers, this$static.latLongLayer);
  }
  this$static.latlongLayerProcessed = true;
}

function $addLatLongPointsToLatLongLayer(this$static){
  var row, row$iterator;
  if (this$static.data_0) {
    $processSeriesNamesAndRange(this$static);
    for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      this$static.addMapPointForRow(this$static.latLongLayer, row);
    }
  }
}

function $adjustMinMaxBubbleSizeBasedOnImageSize(this$static){
  var factor;
  factor = this$static.bnds.width_0 / 960;
  this$static.bnds.height_0 / 400 < factor && (factor = this$static.bnds.height_0 / 570);
  if (factor < 1) {
    this$static.MIN_BUBBLESIZE = this$static.MIN_BUBBLESIZE * factor;
    this$static.MAX_BUBBLESIZE = this$static.MAX_BUBBLESIZE * factor;
  }
}

function $adjustMinMaxToIncludeValue(this$static, value_0){
  if (!isNaN_0((checkCriticalNotNull(value_0) , value_0))) {
    (checkCriticalNotNull(value_0) , value_0) < this$static.minValue && (this$static.minValue = (checkCriticalNotNull(value_0) , value_0));
    (checkCriticalNotNull(value_0) , value_0) > this$static.maxValue && (this$static.maxValue = (checkCriticalNotNull(value_0) , value_0));
    $putStringValue(this$static.valueMap, '' + (checkCriticalNotNull(value_0) , value_0), value_0);
  }
}

function $autoZoomToData(this$static){
  var height, heightOffset, mapComp, mapComp$iterator, margin, newHeight, newWidth, point1, point2, scaleHeight, scaleWidth, width_0, widthOffset;
  point1 = new CFPoint($intern_19, $intern_19);
  point2 = new CFPoint($intern_20, $intern_20);
  if (this$static.latLongLayer) {
    for (mapComp$iterator = new ArrayList$1(this$static.latLongLayer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      this$static.updateExtents(mapComp, point1, point2);
    }
  }
  margin = 60;
  (this$static.bnds.width_0 < 250 || this$static.bnds.height_0 < 250) && (margin = 10);
  width_0 = point2.x_0 - point1.x_0;
  height = point2.y_0 - point1.y_0;
  scaleWidth = (this$static.viewPort.width_0 - margin) / width_0;
  scaleHeight = (this$static.viewPort.height_0 - margin) / height;
  if (scaleWidth < scaleHeight) {
    this$static.scaleFactor = scaleWidth / this$static.curScale;
    this$static.curScale = scaleWidth;
  }
   else {
    this$static.scaleFactor = scaleHeight / this$static.curScale;
    this$static.curScale = scaleHeight;
  }
  newWidth = width_0 * this$static.curScale;
  newHeight = height * this$static.curScale;
  widthOffset = (this$static.viewPort.width_0 - newWidth) / 2;
  heightOffset = (this$static.viewPort.height_0 - newHeight) / 2;
  this$static.mapBounds = new CFRect(0 - (point1.x_0 * this$static.curScale - widthOffset), 0 - (point1.y_0 * this$static.curScale - heightOffset), this$static.origBounds.width_0 * this$static.curScale, this$static.origBounds.height_0 * this$static.curScale);
  this$static.mapOffset = new CFPoint(this$static.mapBounds.x_0, this$static.mapBounds.y_0);
  $placeScaledMapShapes(this$static);
}

function $getCellForColumnMappedName(data_0, row, match_0){
  var col, col$iterator, index_0;
  index_0 = 0;
  for (col$iterator = data_0.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    if (col.mapping != null && $equals_2(col.mapping, match_0))
      return $getCellByCellIndex(row, index_0);
    ++index_0;
  }
  return null;
}

function $getCellFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'VALUE');
      if (cell)
        return cell;
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return cell;
    }
  }
  return null;
}

function $getCellFromRowForMapping(data_0, row, mapping){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, mapping);
      return cell;
    }
  }
  return null;
}

function $getColorForIndex(this$static, index_0){
  if (index_0 < this$static.colorAry.array.length)
    return castTo($get_2(this$static.colorAry, index_0), 15);
  else {
    index_0 = index_0 % this$static.colorAry.array.length;
    return castTo($get_2(this$static.colorAry, index_0), 15);
  }
}

function $getColorForSeriesNameOrIndex(this$static, column, name_0, index_0){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForNameInColumn(this$static.colorMgr, name_0, column));
  !color_0 && (color_0 = $getColorForIndex(this$static, index_0));
  return color_0;
}

function $getFillColorForRow(this$static, row){
  var series;
  series = $getName(row);
  return $getFillColorForSeries(this$static, series);
}

function $getFillColorForSeries(this$static, series){
  var fillColor, index_0;
  if (series != null) {
    index_0 = castTo($getStringValue(this$static.seriesMap, series), 29);
    index_0.value_0 >= this$static.colorAry.array.length && (index_0 = valueOf(index_0.value_0 % this$static.colorAry.array.length));
    fillColor = castTo($get_2(this$static.colorAry, index_0.value_0), 15);
    index_0.value_0 == 0 && !!this$static.colorOverride && (fillColor = this$static.colorOverride);
  }
   else 
    this$static.colorOverride?(fillColor = this$static.colorOverride):(fillColor = castTo($get_2(this$static.colorAry, 0), 15));
  !!fillColor && this$static.alphaBubble != 0 && (fillColor = new CFColor_1(fillColor, this$static.alphaBubble));
  return fillColor;
}

function $getFormattedHoverText(this$static, mapComp){
  var result, series, value_0, valueStr;
  series = this$static.getSeriesNameFromRow(this$static.data_0, mapComp.row);
  result = '%_NAME : %_VALUE';
  series != null && (result = '%_SERIES_NAME : %_NAME : %_VALUE');
  this$static.hoverTextFormatStr != null && $trim(this$static.hoverTextFormatStr).length > 0 && (result = castToString(checkNotNull(this$static.hoverTextFormatStr)));
  valueStr = null;
  value_0 = this$static.getValueFromRow(this$static.data_0, mapComp.row);
  isNaN_0((checkCriticalNotNull(value_0) , value_0)) || (valueStr = $formatNumber_1(this$static.hoverNumberFormatter, (checkCriticalNotNull(value_0) , value_0)));
  (valueStr == null || $trim(valueStr).length == 0) && (valueStr = getString('NO_DATA', this$static.chart.locale));
  result = replaceMacroWithValue(result, '%_VALUE', valueStr);
  result = replaceMacroWithValue(result, '%_NAME', mapComp.name_0);
  result = replaceMacroWithValue(result, '%_SERIES_NAME', series);
  if (!!mapComp && !!mapComp.row) {
    result = replaceTOOLTIPMap('%_TOOLTIP1', $getCellFromRowForMapping(this$static.data_0, mapComp.row, 'EXTRAINFO1'), this$static, result);
    result = replaceTOOLTIPMap('%_TOOLTIP2', $getCellFromRowForMapping(this$static.data_0, mapComp.row, 'EXTRAINFO2'), this$static, result);
    result = replaceTOOLTIPMap('%_TOOLTIP3', $getCellFromRowForMapping(this$static.data_0, mapComp.row, 'EXTRAINFO3'), this$static, result);
  }
   else {
    result = $replaceAll(result, '%_TOOLTIP1', '');
    result = $replaceAll(result, '%_TOOLTIP2', '');
    result = $replaceAll(result, '%_TOOLTIP3', '');
  }
  return result;
}

function $getHoverTextShapeGEForComponent(this$static, mapHoverComp, rnd){
  var hl, point, primaryFont, rect;
  if (mapHoverComp.hoverText != null && $trim(mapHoverComp.hoverText).length > 0) {
    if (rnd.supportsNativeHover()) {
      rnd.showHoverText(round_int($getCenterX(mapHoverComp.bnds)), round_int($getCenterY(mapHoverComp.bnds)), mapHoverComp.hoverText);
    }
     else {
      primaryFont = new CFFont_0(null, 12, ($clinit_CFColor() , WHITE));
      hl = new HoverLabel(this$static);
      point = mapHoverComp.getHoverPoint();
      rect = $getTextRectForPoint(hl, rnd, primaryFont, point, mapHoverComp.hoverText, 0, true, false);
      rect = $keepRectInBounds(rect, this$static.bnds, true);
      return $getCaptionGraphicElement(rnd, primaryFont, mapHoverComp.hoverText, point, rect, 0);
    }
  }
  return null;
}

function $getLegendDataGrid(this$static, totalAry, countAry){
  var cell, col, cols_0, count, dg, i, row, rows_0, seriesName, value_0;
  rows_0 = new ArrayList;
  cols_0 = new ArrayList;
  col = new ColRowInfo;
  cols_0.array[cols_0.array.length] = col;
  for (i = 0; i < this$static.seriesNames.array.length; i++) {
    seriesName = castToString($get_2(this$static.seriesNames, i));
    value_0 = checkNotNull(castToDouble($get_2(totalAry, castTo($getStringValue(this$static.seriesMap, seriesName), 29).value_0)));
    count = castTo($get_2(countAry, castTo($getStringValue(this$static.seriesMap, seriesName), 29).value_0), 29).value_0;
    this$static.seriesLegendValType == 1 && (count > 0?(value_0 = value_0 / count):(value_0 = 0));
    cell = new Cell(value_0);
    cell.column = col;
    row = new ColRowInfo_3(null, seriesName, 'DOUBLE', i, cell, true, 0);
    $put_0(col.cellMap, valueOf(i), cell);
    rows_0.array[rows_0.array.length] = row;
  }
  dg = new DataGrid_0('legenddata', null, rows_0, cols_0, null);
  $sortRows(dg, SORT_NAME);
  return dg;
}

function $getNameDataTypeFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COUNTRY');
      if (cell)
        return $getColDataType(cell);
    }
     else 
      return row.type_0;
  }
  return null;
}

function $getSeriesColumnName(this$static, data_0, row){
  var column;
  column = this$static.getColumnForSeriesName(data_0, row);
  if (column)
    return column.name_0;
  return null;
}

function $getSeriesNameCount(this$static){
  if (this$static.seriesNames)
    return this$static.seriesNames.array.length;
  return 0;
}

function $getSizeForValue(this$static, value_0){
  var size_0;
  size_0 = 6;
  if (isNaN(value_0))
    return size_0;
  if (this$static.useLogScale)
    return $getSizeForValueLog(this$static, value_0);
  this$static.rangeValue != null && checkNotNull(this$static.rangeValue) != 0 && (size_0 = (value_0 - this$static.minValue) / checkNotNull(this$static.rangeValue) * (this$static.MAX_BUBBLESIZE - this$static.MIN_BUBBLESIZE) + this$static.MIN_BUBBLESIZE);
  return size_0;
}

function $getSizeForValueFromRanges(this$static, value_0){
  var range, range$iterator;
  if (isNaN(value_0))
    return 0;
  if (!!this$static.ranges && this$static.ranges.array.length > 0) {
    for (range$iterator = new ArrayList$1(this$static.ranges); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 134);
      if (value_0 >= range.min_0 && value_0 <= range.max_0)
        return range.bubbleSize;
    }
  }
  return 6;
}

function $getSizeForValueLog(this$static, value_0){
  var logRange, size_0;
  logRange = this$static.maxValuelog - this$static.minValuelog;
  value_0 = $wnd.Math.log(value_0);
  size_0 = (value_0 - this$static.minValuelog) / logRange * (this$static.MAX_BUBBLESIZE - this$static.MIN_BUBBLESIZE) + this$static.MIN_BUBBLESIZE;
  return size_0;
}

function $getValueColFromRow(data_0, row){
  var cell;
  cell = $getCellFromRow(data_0, row);
  if (cell)
    return cell.column;
  return null;
}

function $moveAndScaleMapAndPlaceLegend(this$static, rnd, sideLegendWidth, margin){
  var catLegendBnds, hideLegend, legend, legendCat, legendComp, legendComp$iterator, mapRect, sizeLegendBnds, srsLegendBnds;
  if (this$static.origBounds) {
    hideLegend = false;
    $getChartOptionAsString(this$static, 'hide_latlong_legend') != null && isTrue($getChartOptionAsString(this$static, 'hide_latlong_legend')) && (hideLegend = true);
    (!this$static.data_0 || $getNumCols(this$static.data_0) == 0 || $getNumRows(this$static.data_0) == 0 || hideLegend) && this$static.showSideLegend && (this$static.showSideLegend = false);
    legend = null;
    this$static.bnds.width_0 > 400 && this$static.bnds.height_0 > 350 && !this$static.chart.mobile && !this$static.chart.staticImage?(this$static.supportsZooming = true):(this$static.supportsZooming = false);
    if (!this$static.supportsZooming) {
      this$static.viewPort = null;
      this$static.scaleFactor = 1;
      $clearZoomControls(this$static);
      this$static.bnds.width_0 < 150 && (margin = 0);
    }
    if (!this$static.viewPort) {
      this$static.viewPort = $duplicate_5(this$static.bnds);
      $inflate(this$static.viewPort, -margin);
      $setHeight(this$static.viewPort, this$static.viewPort.height_0 * this$static.scaleFactor);
      $setWidth(this$static.viewPort, this$static.viewPort.width_0 * this$static.scaleFactor);
      if (this$static.bnds.width_0 > 800 && this$static.bnds.height_0 >= 350 && !this$static.editMode && this$static.showSideLegend) {
        legendCat = null;
        if (!!this$static.seriesNames && this$static.seriesNames.array.length > 0) {
          legendCat = new LegendPie(this$static.chart, this$static.name_0 + '_legend', this$static);
          if (this$static.seriesLegendValType == 2 || instanceOf(this$static, 207)) {
            legendCat.chartOptions = new HashMap;
            !!legendCat.chartOptions && legendCat.chartOptions.put('legend_summary', 'none');
          }
        }
        legend = new LegendMapLatLongSize(this$static.chart, this$static, 1);
        if (legendCat) {
          catLegendBnds = new CFRect($getRight(this$static.bnds) - sideLegendWidth, 5, sideLegendWidth, this$static.viewPort.height_0 - 10);
          legendCat.bnds = new CFRect(catLegendBnds.x_0, catLegendBnds.y_0, catLegendBnds.width_0, catLegendBnds.height_0);
          $setLayoutFlagsBasedOnSize(legendCat);
          $setWidth(this$static.viewPort, this$static.viewPort.width_0 - sideLegendWidth);
          sizeLegendBnds = new CFRect(this$static.viewPort.x_0, $getBottom(this$static.viewPort), this$static.viewPort.width_0, 0);
          legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
          $setLayoutFlagsBasedOnSize(legend);
          $formatFromGraph_1(legend, rnd);
          if (legend.valuesTruncated) {
            castTo(legend, 125).forceAutoAbbreviate = true;
            $formatFromGraph_1(legend, rnd);
          }
          $setHeight(this$static.viewPort, this$static.viewPort.height_0 - legend.bnds.height_0);
          $setY_0(legend.bnds, $getBottom(this$static.viewPort));
          $formatFromGraph_1(legend, rnd);
          !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
          $add_1(this$static.dependentComps, legendCat);
          $add_1(this$static.legendComponents, legendCat);
          !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
          $add_1(this$static.dependentComps, legend);
          $add_1(this$static.legendComponents, legend);
        }
         else if (legend) {
          sizeLegendBnds = new CFRect($getRight(this$static.bnds) - sideLegendWidth, 5, 0, this$static.viewPort.height_0 - 10);
          legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
          $setLayoutFlagsBasedOnSize(legend);
          legend.reverseOrder = true;
          legend.position = 2;
          $formatFromGraph_1(legend, rnd);
          if (legend.valuesTruncated) {
            castTo(legend, 125).forceAutoAbbreviate = true;
            $formatFromGraph_1(legend, rnd);
          }
          $setWidth(this$static.viewPort, this$static.viewPort.width_0 - sideLegendWidth);
          !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
          $add_1(this$static.dependentComps, legend);
          $add_1(this$static.legendComponents, legend);
        }
      }
       else if (this$static.bnds.width_0 > 400 && this$static.bnds.height_0 > 300 && !hideLegend) {
        if (!!this$static.seriesNames && this$static.seriesNames.array.length > 0) {
          legend = new LegendMapLatLongSrs(this$static.chart, this$static, 1);
          sizeLegendBnds = new CFRect(this$static.viewPort.x_0, $getBottom(this$static.viewPort), this$static.viewPort.width_0, 0);
          legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
          $setLayoutFlagsBasedOnSize(legend);
          $formatFromGraph_1(legend, rnd);
          $setHeight(this$static.viewPort, this$static.viewPort.height_0 - legend.bnds.height_0);
          $setY_0(legend.bnds, $getBottom(this$static.viewPort));
          $formatFromGraph_1(legend, rnd);
          !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
          $add_1(this$static.dependentComps, legend);
          $add_1(this$static.legendComponents, legend);
        }
         else {
          legend = new LegendMapLatLongSize(this$static.chart, this$static, 1);
          sizeLegendBnds = new CFRect(this$static.viewPort.x_0, $getBottom(this$static.viewPort), this$static.viewPort.width_0, 0);
          legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
          $setLayoutFlagsBasedOnSize(legend);
          $formatFromGraph_1(legend, rnd);
          if (legend.valuesTruncated) {
            castTo(legend, 125).forceAutoAbbreviate = true;
            $formatFromGraph_1(legend, rnd);
          }
          $setHeight(this$static.viewPort, this$static.viewPort.height_0 - legend.bnds.height_0);
          $setY_0(legend.bnds, $getBottom(this$static.viewPort));
          $formatFromGraph_1(legend, rnd);
          !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
          $add_1(this$static.dependentComps, legend);
          $add_1(this$static.legendComponents, legend);
        }
      }
       else if (this$static.chart.mobile && !hideLegend) {
        if (!!this$static.seriesNames && this$static.seriesNames.array.length > 0) {
          if (this$static.bnds.width_0 > this$static.bnds.height_0 && this$static.bnds.width_0 >= 2 * sideLegendWidth) {
            legend = new LegendMapLatLongSrs(this$static.chart, this$static, 2);
            srsLegendBnds = new CFRect($getRight(this$static.bnds) - sideLegendWidth, 5, 0, this$static.viewPort.height_0);
            legend.bnds = new CFRect(srsLegendBnds.x_0, srsLegendBnds.y_0, srsLegendBnds.width_0, srsLegendBnds.height_0);
            $setLayoutFlagsBasedOnSize(legend);
            $formatFromGraph_1(legend, rnd);
            $setWidth(this$static.viewPort, this$static.viewPort.width_0 - sideLegendWidth);
            !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
            $add_1(this$static.dependentComps, legend);
            $add_1(this$static.legendComponents, legend);
          }
           else if (this$static.viewPort.height_0 >= 160) {
            legend = new LegendMapLatLongSrs(this$static.chart, this$static, 1);
            srsLegendBnds = new CFRect(this$static.viewPort.x_0, $getBottom(this$static.viewPort), this$static.viewPort.width_0, 80);
            legend.bnds = new CFRect(srsLegendBnds.x_0, srsLegendBnds.y_0, srsLegendBnds.width_0, srsLegendBnds.height_0);
            $setLayoutFlagsBasedOnSize(legend);
            $formatFromGraph_1(legend, rnd);
            $setHeight(this$static.viewPort, this$static.viewPort.height_0 - legend.bnds.height_0);
            $setY_0(legend.bnds, $getBottom(this$static.viewPort));
            $formatFromGraph_1(legend, rnd);
            !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
            $add_1(this$static.dependentComps, legend);
            $add_1(this$static.legendComponents, legend);
          }
        }
         else {
          if (this$static.bnds.width_0 > this$static.bnds.height_0 && this$static.bnds.width_0 >= 2 * sideLegendWidth) {
            legend = new LegendMapLatLongSize(this$static.chart, this$static, 2);
            sizeLegendBnds = new CFRect($getRight(this$static.bnds) - sideLegendWidth, 5, 0, this$static.viewPort.height_0);
            legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
            $setLayoutFlagsBasedOnSize(legend);
            legend.reverseOrder = true;
            $formatFromGraph_1(legend, rnd);
            castTo(legend, 125).forceAutoAbbreviate = true;
            $formatFromGraph_1(legend, rnd);
            $setWidth(this$static.viewPort, this$static.viewPort.width_0 - sideLegendWidth);
            !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
            $add_1(this$static.dependentComps, legend);
            $add_1(this$static.legendComponents, legend);
          }
           else if (this$static.viewPort.height_0 >= 160) {
            legend = new LegendMapLatLongSize(this$static.chart, this$static, 1);
            sizeLegendBnds = new CFRect(this$static.viewPort.x_0, $getBottom(this$static.viewPort), this$static.viewPort.width_0, 80);
            legend.bnds = new CFRect(sizeLegendBnds.x_0, sizeLegendBnds.y_0, sizeLegendBnds.width_0, sizeLegendBnds.height_0);
            $setLayoutFlagsBasedOnSize(legend);
            $formatFromGraph_1(legend, rnd);
            if (legend.valuesTruncated) {
              castTo(legend, 125).forceAutoAbbreviate = true;
              $formatFromGraph_1(legend, rnd);
            }
            $setHeight(this$static.viewPort, this$static.viewPort.height_0 - legend.bnds.height_0);
            $setY_0(legend.bnds, $getBottom(this$static.viewPort));
            $formatFromGraph_1(legend, rnd);
            !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
            $add_1(this$static.dependentComps, legend);
            $add_1(this$static.legendComponents, legend);
          }
        }
      }
      this$static.origScale = $getMapScaleNonZoomed(this$static, this$static.viewPort);
      mapRect = $duplicate_5(this$static.viewPort);
      this$static.mapOffset = new CFPoint(0 - this$static.origBounds.x_0 * this$static.origScale, 0 - this$static.origBounds.y_0 * this$static.origScale);
      $setX_0(mapRect, this$static.viewPort.x_0 + this$static.mapOffset.x_0);
      $setY_0(mapRect, this$static.viewPort.y_0 + this$static.mapOffset.y_0);
      $moveAndScaleMap(this$static, mapRect, this$static.origScale);
    }
     else if (!!this$static.mapBounds && !!this$static.dependentComps) {
      for (legendComp$iterator = new ArrayList$1(this$static.dependentComps); legendComp$iterator.i < legendComp$iterator.this$01.array.length;) {
        legendComp = castTo($next_3(legendComp$iterator), 23);
        $indexOf_1(this$static.legendComponents, legendComp, 0) != -1 || $add_1(this$static.legendComponents, legendComp);
      }
      mapRect = $duplicate_5(this$static.mapBounds);
      if (this$static.scaleFactor == 1) {
        mapRect = $duplicate_5(this$static.viewPort);
        this$static.mapOffset = new CFPoint(0 - this$static.origBounds.x_0 * this$static.origScale, 0 - this$static.origBounds.y_0 * this$static.origScale);
        $setX_0(mapRect, this$static.viewPort.x_0 + this$static.mapOffset.x_0);
        $setY_0(mapRect, this$static.viewPort.y_0 + this$static.mapOffset.y_0);
        $moveAndScaleMap(this$static, mapRect, this$static.origScale);
      }
       else {
        $setX_0(mapRect, this$static.viewPort.x_0 + this$static.mapOffset.x_0);
        $setY_0(mapRect, this$static.viewPort.y_0 + this$static.mapOffset.y_0);
        $moveAndScaleMap(this$static, mapRect, this$static.scaleFactor * this$static.origScale);
      }
    }
    !!legend && $createDrawObjects_1(legend);
  }
}

function $processChartOptions_1(this$static){
  var key, key$iterator, value_0;
  $processChartOptions_0(this$static);
  if ($hasChartOptions(this$static)) {
    for (key$iterator = $getChartOptionKeys(this$static).iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = $getChartOptionAsString(this$static, key);
      switch (key) {
        case 'symbol_transparency':
          $processSymbolTransparency(this$static, value_0);
          break;
        case 'symbol_color':
          value_0 != null && (this$static.colorOverride = new CFColor_2(value_0));
          break;
        case 'symbol_size':
          $processSymbolSize(this$static, value_0);
          break;
        case 'use_logscale':
          this$static.useLogScale = isTrue(value_0);
          break;
        case 'legend_summary':
          $setColorLegendValueType(this$static, value_0);
      }
    }
  }
}

function $processMapShapesForJsonMap(this$static){
  var ge, ge$iterator, hoverText, mapComp, mapComp$iterator, shape_0, shape$iterator;
  if (this$static.latLongLayer) {
    for (mapComp$iterator = new ArrayList$1(this$static.latLongLayer.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      hoverText = $getFormattedHoverText(this$static, mapComp);
      if (hoverText != null) {
        if (mapComp.geAry) {
          for (ge$iterator = mapComp.geAry.iterator(); ge$iterator.hasNext_0();) {
            ge = castTo(ge$iterator.next_1(), 12);
            if (ge.shapeAry) {
              for (shape$iterator = new ArrayList$1(ge.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
                shape_0 = castTo($next_3(shape$iterator), 6);
                shape_0.hoverText = hoverText;
              }
            }
          }
        }
      }
    }
  }
}

function $processSeriesNamesAndRange(this$static){
  var $tmp, cell, color_0, column, countAry, idx, index_0, row, row$iterator, series, seriesIndex, seriesName, seriesName$iterator, tempColorList, totalAry, value_0;
  if (this$static.data_0) {
    totalAry = new ArrayList;
    countAry = new ArrayList;
    this$static.seriesNames = new ArrayList;
    this$static.seriesMap = new HashMap;
    this$static.valueMap = new HashMap;
    index_0 = valueOf(0);
    for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      value_0 = this$static.getValueFromRow(this$static.data_0, row);
      if (!isNaN_0((checkCriticalNotNull(value_0) , value_0))) {
        $adjustMinMaxToIncludeValue(this$static, value_0);
        this$static.addSecondValueToMinMaxRangeIfNeeded(row);
        series = this$static.getSeriesNameFromRow(this$static.data_0, row);
        if (series != null) {
          idx = castTo($getStringValue(this$static.seriesMap, series), 29);
          if (!idx) {
            $putStringValue(this$static.seriesMap, series, ($tmp = index_0 , index_0 = valueOf(index_0.value_0 + 1) , $tmp));
            $add_1(this$static.seriesNames, series);
            totalAry.array[totalAry.array.length] = value_0;
            $add_1(countAry, valueOf(1));
          }
           else {
            $set(totalAry, idx.value_0, checkNotNull(castToDouble($get_2(totalAry, idx.value_0))) + (checkCriticalNotNull(value_0) , value_0));
            $set(countAry, idx.value_0, valueOf(castTo($get_2(countAry, idx.value_0), 29).value_0 + 1));
          }
        }
      }
    }
    if (this$static.seriesNames.array.length > 0) {
      this$static.colorAry = $getMapLatLongColors(this$static.colorMgr, this$static.seriesNames.array.length);
      if (this$static.colorMgr.conditionalColors) {
        tempColorList = new ArrayList;
        cell = $getCellForColumnMappedName(this$static.data_0, $getFirstVisibleRow(this$static.data_0), 'COLOR');
        column = cell.column;
        seriesIndex = 0;
        for (seriesName$iterator = new ArrayList$1(this$static.seriesNames); seriesName$iterator.i < seriesName$iterator.this$01.array.length;) {
          seriesName = castToString($next_3(seriesName$iterator));
          color_0 = $getColorForSeriesNameOrIndex(this$static, column, seriesName, seriesIndex++);
          tempColorList.array[tempColorList.array.length] = color_0;
        }
        tempColorList.array.length > 0 && (this$static.colorAry = tempColorList);
      }
      this$static.seriesLegendDataGrid = $getLegendDataGrid(this$static, totalAry, countAry);
    }
     else {
      this$static.seriesNames = null;
      this$static.seriesMap = null;
      this$static.colorAry = $getMapLatLongColors(this$static.colorMgr, 3);
    }
    $setupRanges(this$static);
  }
}

function $processSymbolSize(this$static, value_0){
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    switch (value_0) {
      case 'large':
        this$static.MAX_BUBBLESIZE = 24;
        this$static.MIN_BUBBLESIZE = 4;
        break;
      case 'small':
        this$static.MAX_BUBBLESIZE = 12;
        this$static.MIN_BUBBLESIZE = 2;
        break;
      default:this$static.MAX_BUBBLESIZE = 18;
        this$static.MIN_BUBBLESIZE = 3;
    }
    $adjustMinMaxBubbleSizeBasedOnImageSize(this$static);
  }
}

function $processSymbolTransparency(this$static, value_0){
  if (value_0 != null) {
    switch (value_0) {
      case 'none':
        this$static.alphaBubble = 0;
        break;
      case '10 %':
        this$static.alphaBubble = 230;
        break;
      case '20 %':
        this$static.alphaBubble = 204;
        break;
      case '30 %':
        this$static.alphaBubble = 187;
        break;
      case '40 %':
        this$static.alphaBubble = 153;
        break;
      case '50 %':
        this$static.alphaBubble = 127;
        break;
      case '60 %':
        this$static.alphaBubble = 102;
        break;
      case '70 %':
        this$static.alphaBubble = 77;
        break;
      case '80 %':
        this$static.alphaBubble = 51;
        break;
      default:this$static.alphaBubble = 191;
    }
  }
}

function $processZoomAndPanOptions_0(this$static){
  this$static.autoZoom || $processZoomAndPanOptions(this$static);
  if (this$static.autoZoom && !this$static.autoZoomProcessed) {
    $autoZoomToData(this$static);
    this$static.autoZoomProcessed = true;
  }
}

function $resetDataShapes_0(this$static){
  $resetDataShapes(this$static);
  this$static.latlongLayerProcessed = false;
  if (this$static.latLongLayer) {
    $remove_3(this$static.layers, this$static.latLongLayer);
    this$static.latLongLayer.map_0 = null;
    $freeResources_7(this$static.latLongLayer);
    this$static.latLongLayer = null;
  }
}

function $setColorLegendValueType(this$static, value_0){
  var lowerVal;
  if (value_0 != null) {
    lowerVal = value_0.toLowerCase();
    $equals_2(lowerVal.substr(0, 2), 'no')?(this$static.seriesLegendValType = 2):$equals_2(lowerVal.substr(0, 2), 'av')?(this$static.seriesLegendValType = 1):(this$static.seriesLegendValType = 0);
  }
   else {
    this$static.seriesLegendValType = 0;
  }
}

function $setProjector(this$static, projector){
  this$static.projector = projector;
}

function $setSizesForRangesBasedOnNumberOfRanges(this$static){
  var range, range$iterator, size_0, sizeIncrement;
  if (!!this$static.ranges && this$static.ranges.array.length > 0) {
    size_0 = this$static.MIN_BUBBLESIZE;
    sizeIncrement = (this$static.MAX_BUBBLESIZE - this$static.MIN_BUBBLESIZE) / this$static.ranges.array.length;
    for (range$iterator = new ArrayList$1(this$static.ranges); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 134);
      range.bubbleSize = size_0;
      size_0 += sizeIncrement;
    }
  }
}

function $setSizesForRangesUsingRangeValues(this$static){
  var range, range$iterator;
  if (!!this$static.ranges && this$static.ranges.array.length > 0) {
    for (range$iterator = new ArrayList$1(this$static.ranges); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 134);
      $setBubbleSize(range, $getSizeForValue(this$static, range.min_0));
    }
  }
}

function $setupRanges(this$static){
  if (this$static.minValue != $intern_19 && this$static.maxValue != $intern_20) {
    this$static.rangeValue = this$static.maxValue - this$static.minValue;
    (this$static.maxValue <= 0 || this$static.minValue <= 0) && (this$static.useLogScale = false);
    if (this$static.useLogScale) {
      this$static.minValuelog = $wnd.Math.log(this$static.minValue);
      this$static.maxValuelog = $wnd.Math.log(this$static.maxValue);
      this$static.minValuelog == this$static.maxValuelog && (this$static.useLogScale = false);
    }
    $size(this$static.valueMap) <= this$static.MAX_RANGES?$setupRangesFromValueMap(this$static):this$static.useLogScale?$setupRangesLog(this$static):$setupRangesRegular(this$static);
  }
}

function $setupRangesFromValueMap(this$static){
  var entry, key, key$iterator, outerIter, value_0, value$iterator, valuesFromMap;
  this$static.ranges = new ArrayList;
  valuesFromMap = new ArrayList;
  for (key$iterator = (outerIter = (new AbstractMap$1(this$static.valueMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
    key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
    $add_1(valuesFromMap, castToDouble($getStringValue(this$static.valueMap, key)));
  }
  sort_4(valuesFromMap.array, valuesFromMap.array.length, null);
  for (value$iterator = new ArrayList$1(valuesFromMap); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    $add_1(this$static.ranges, new RangeLatLong((checkCriticalNotNull(value_0) , value_0), (checkCriticalNotNull(value_0) , value_0)));
  }
  $setSizesForRangesUsingRangeValues(this$static);
}

function $setupRangesLog(this$static){
  var increment, index_0, maxForRange, minForRange, range, start_0;
  this$static.ranges = new ArrayList;
  start_0 = this$static.minValuelog;
  increment = (this$static.maxValuelog - this$static.minValuelog) / this$static.MAX_RANGES;
  for (index_0 = 0; index_0 < this$static.MAX_RANGES; index_0++) {
    minForRange = $wnd.Math.exp(start_0);
    index_0 == 0 && (minForRange = this$static.minValue);
    maxForRange = $wnd.Math.exp(start_0 + increment);
    index_0 == this$static.MAX_RANGES - 1 && (maxForRange = this$static.maxValue);
    range = new RangeLatLong(minForRange, maxForRange);
    $add_1(this$static.ranges, range);
    start_0 += increment;
  }
  $setSizesForRangesBasedOnNumberOfRanges(this$static);
}

function $setupRangesRegular(this$static){
  var increment, index_0, range, start_0;
  this$static.ranges = new ArrayList;
  start_0 = this$static.minValue;
  increment = checkNotNull(this$static.rangeValue) / this$static.MAX_RANGES;
  for (index_0 = 0; index_0 < this$static.MAX_RANGES; index_0++) {
    range = new RangeLatLong(start_0, start_0 + increment);
    index_0 == this$static.MAX_RANGES - 1 && (range.max_0 = this$static.maxValue);
    $add_1(this$static.ranges, range);
    start_0 += increment;
  }
  $setSizesForRangesBasedOnNumberOfRanges(this$static);
}

function $updateExtentsFromRect(rect, min_0, max_0){
  if (rect) {
    rect.x_0 < min_0.x_0 && $setX(min_0, rect.x_0);
    rect.y_0 < min_0.y_0 && $setY(min_0, rect.y_0);
    rect.x_0 > max_0.x_0 && $setX(max_0, rect.x_0);
    rect.y_0 > max_0.y_0 && $setY(max_0, rect.y_0);
  }
}

function MapAreaLatLong(name_0, bnds){
  MapArea_1.call(this, name_0, bnds);
  this.MAX_RANGES = 6;
  this.MAX_BUBBLESIZE = 20;
  this.MIN_BUBBLESIZE = 4;
  this.minValue = $intern_19;
  this.maxValue = $intern_20;
  this.alphaBubble = 191;
  this.seriesLegendValType = 0;
}

function keepLatitudeInRange(latitude){
  if (latitude > 90)
    return 90;
  if (latitude < -90)
    return -90;
  return latitude;
}

function keepLongitudeInRange(longitude){
  if (longitude > 200)
    return 200;
  if (longitude < -200)
    return -200;
  return longitude;
}

defineClass(144, 85, {23:1, 63:1, 85:1, 144:1}, MapAreaLatLong);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_0(chart){
  if (chart.graphPickerPanelOpen)
    return;
}
;
_.addMapPointForRow = function addMapPointForRow(layer, row){
  var colName, column, fillColor, lat, location_0, longitude, mapPointComponent, name_0, series, size_0, value_0;
  if (row) {
    name_0 = this.getNameFromRow(this.data_0, row);
    value_0 = this.getValueFromRow(this.data_0, row);
    if (isNaN_0((checkCriticalNotNull(value_0) , value_0)))
      return;
    lat = this.getLatitudeFromRow(this.data_0, row);
    longitude = this.getLongitudeFromRow(this.data_0, row);
    colName = this.getColNameForName(this.data_0, row);
    series = this.getSeriesNameFromRow(this.data_0, row);
    column = this.getColumnForName(this.data_0, row);
    $getNameDataTypeFromRow(this.data_0, row);
    fillColor = $getFillColorForSeries(this, series);
    if (this.projector) {
      longitude = keepLongitudeInRange((checkCriticalNotNull(longitude) , longitude));
      lat = keepLatitudeInRange((checkCriticalNotNull(lat) , lat));
      if (!isNaN_0((checkCriticalNotNull(longitude) , longitude)) && !isNaN_0((checkCriticalNotNull(lat) , lat))) {
        location_0 = $convert(this.projector, (checkCriticalNotNull(longitude) , longitude), (checkCriticalNotNull(lat) , lat));
        size_0 = $getSizeForValueFromRanges(this, (checkCriticalNotNull(value_0) , value_0));
        mapPointComponent = new MapPointComponent(name_0, new CFRect(location_0.x_0, location_0.y_0, 1, 1));
        mapPointComponent.layer = layer;
        !!fillColor && (mapPointComponent.fillColor = fillColor);
        mapPointComponent.noStroke = true;
        mapPointComponent.size_0 = size_0;
        if (series != null) {
          name_0 = series;
          colName = $getSeriesColumnName(this, this.data_0, row);
          column = this.getColumnForSeriesName(this.data_0, row);
        }
        $addDrillFilterAndRootMapName(mapPointComponent, colName, name_0, column, null);
        mapPointComponent.row = row;
        $addMapShape(layer, mapPointComponent);
      }
    }
  }
}
;
_.addSecondValueToMinMaxRangeIfNeeded = function addSecondValueToMinMaxRangeIfNeeded(row){
}
;
_.autoZoomToData = function autoZoomToData_0(){
  $autoZoomToData(this);
}
;
_.draw_1 = function draw_3(rnd){
  var comp, comp$iterator, ge, ge$iterator, range, range$iterator;
  $drawLayersOfType(this, rnd, 0);
  for (comp$iterator = new ArrayList$1(this.legendComponents); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 23);
    comp.draw_1(rnd);
  }
  for (range$iterator = new ArrayList$1(this.rangeComps); range$iterator.i < range$iterator.this$01.array.length;) {
    range = castTo($next_3(range$iterator), 76);
    $draw_3(range, rnd);
  }
  $drawLayersOfType(this, rnd, 1);
  $drawZoomControls(this, rnd);
  for (ge$iterator = new ArrayList$1(this.hoverGEAry); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 12);
    $draw_2(ge, rnd);
  }
}
;
_.format_0 = function format_2(rnd){
  var layer, numberFormatter, rows_0;
  if (!this.data_0) {
    $format(this, rnd);
    return;
  }
  if (this.needsFormat) {
    this.setMinMaxBubbleSizesAndNumberOfRanges();
    this.lastHoverComp = null;
    clearGraphicElementArray(this.hoverGEAry);
    this.legendComponents.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this.rangeComps.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    !!this.origBounds && !!this.seriesNames && this.seriesNames.array.length > 0 && (rows_0 = this.data_0.rows_0 , rows_0.sort_0(new MapAreaLatLong$1(this)) , $setRows(this.data_0, rows_0) , undefined);
    numberFormatter = $getFirstColumnFormat(this);
    !!numberFormatter && (this.numberFormatter = numberFormatter);
    $setAutoAbbreviateState(this.numberFormatter, false);
    $updateNumberFormatWithChartOptionOverrides(this, this.numberFormatter);
    $updateNumberFormats(this);
    layer = $getFirstPointLayer(this);
    !!layer && $setPointLayerSizes(layer);
    this.rnd = rnd;
    this.processChartOptions();
    $addLatLongLayer(this);
    $moveAndScaleMapAndPlaceLegend(this, rnd, 220, 5);
    $processZoomAndPanOptions_0(this);
    $addLabelsForFirstPointLayer(this, this.viewPort);
    $setup(this, this.topLineComp, this.totalAmtComp);
    $createZoomControls(this);
    !!this.chart && this.chart.includeJsonMap && $processMapShapesForJsonMap(this);
    this.needsFormat = false;
  }
}
;
_.freeResources = function freeResources_2(dataToKeep){
  $freeResources_4(this, dataToKeep);
  !!this.latLongLayer && $freeResources_7(this.latLongLayer);
  this.latLongLayer = null;
  this.projector = null;
  this.seriesNames = null;
  this.seriesMap = null;
  this.colorAry = null;
}
;
_.getColNameForName = function getColNameForName(data_0, row){
  var cell, column;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COUNTRY');
      if (cell) {
        column = cell.column;
        if (column)
          return column.name_0;
      }
    }
     else 
      return row.parentName;
  }
  return null;
}
;
_.getColumnForName = function getColumnForName(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COUNTRY');
      if (cell) {
        return cell.column;
      }
    }
     else 
      return row;
  }
  return null;
}
;
_.getColumnForSeriesName = function getColumnForSeriesName(data_0, row){
  var cell, column;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COLOR');
      if (cell) {
        return cell.column;
      }
    }
     else {
      column = $getMetadataInfo(data_0, 2);
      return column;
    }
  }
  return null;
}
;
_.getDataRowLimit = function getDataRowLimit(){
  return this.chart.mobile?$intern_10:$intern_21;
}
;
_.getFormattedHoverText = function getFormattedHoverText_0(mapComp){
  return $getFormattedHoverText(this, mapComp);
}
;
_.getLatitudeFromRow = function getLatitudeFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LATITUDE');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 0);
    }
  }
  return NaN;
}
;
_.getLongitudeFromRow = function getLongitudeFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LONGITUDE');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 1);
    }
  }
  return NaN;
}
;
_.getNameFromRow = function getNameFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COUNTRY');
      if (cell)
        return cell.valueStr;
    }
     else 
      return $getName(row);
  }
  return null;
}
;
_.getSeriesNameFromRow = function getSeriesNameFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COLOR');
      if (cell)
        return cell.valueStr;
    }
     else {
      cell = $getFirstCell(row);
      if (!!cell && !!$getMetaDataCell(cell, 2))
        return $getMetaDataCell(cell, 2).valueStr;
    }
  }
  return null;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_1(x_0, y_0, rnd){
  var cityLayer, comp, comp$iterator, displayBounds, layer, layer$iterator, shape_0, zoomShape;
  zoomShape = $getZoomShapeUnderPoint(this, x_0, y_0, rnd);
  if (zoomShape)
    return zoomShape;
  if (this.lastHoverComp != null && instanceOf(this.lastHoverComp, 23)) {
    shape_0 = castTo(this.lastHoverComp, 23).getShapeUnderPoint(x_0, y_0, rnd);
    if (shape_0)
      return shape_0;
  }
  clearGraphicElementArray(this.hoverGEAry);
  cityLayer = $getFirstPointLayer(this);
  for (layer$iterator = new ArrayList$1(this.layers); layer$iterator.i < layer$iterator.this$01.array.length;) {
    layer = castTo($next_3(layer$iterator), 91);
    if (!$isArea(layer) && layer != cityLayer) {
      shape_0 = null;
      if (layer.dataShapeAry) {
        for (comp$iterator = new ArrayList$1(layer.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
          comp = castTo($next_3(comp$iterator), 47);
          displayBounds = comp.getDisplayBounds();
          displayBounds?$containsPoint(displayBounds, x_0, y_0) && (shape_0 = $getShapeUnderPoint_1(comp, x_0, y_0, rnd)):(shape_0 = $getShapeUnderPoint_1(comp, x_0, y_0, rnd));
          if (shape_0) {
            shape_0.dataObject = this;
            return shape_0;
          }
        }
      }
    }
  }
  if (this.dependentComps) {
    for (comp$iterator = new ArrayList$1(this.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      shape_0 = comp.getShapeUnderPoint(x_0, y_0, rnd);
      if (shape_0)
        return shape_0;
    }
  }
  return null;
}
;
_.getValueFromRow = function getValueFromRow(data_0, row){
  var cell;
  cell = $getCellFromRow(data_0, row);
  if (cell)
    return $getValue(cell);
  return NaN;
}
;
_.moveAndScaleMapAndPlaceLegend = function moveAndScaleMapAndPlaceLegend_0(rnd, sideLegendWidth, margin){
  $moveAndScaleMapAndPlaceLegend(this, rnd, sideLegendWidth, margin);
}
;
_.processChartOptions = function processChartOptions_0(){
  $processChartOptions_1(this);
}
;
_.processMapShapesForJsonMap = function processMapShapesForJsonMap_0(){
  $processMapShapesForJsonMap(this);
}
;
_.processZoomAndPanOptions = function processZoomAndPanOptions_0(){
  $processZoomAndPanOptions_0(this);
}
;
_.resetDataShapes = function resetDataShapes_0(){
  $resetDataShapes_0(this);
}
;
_.setBounds = function setBounds_1(bounds){
  bounds?(this.bnds = new CFRect(bounds.x_0, bounds.y_0, bounds.width_0, bounds.height_0)):(this.bnds = null);
  $setLayoutFlagsBasedOnSize(this);
  this.showCityNames = false;
  !!this.bnds && this.bnds.width_0 >= 350 && this.bnds.height_0 >= 100 && (this.showCityNames = true);
  this.latlongLayerProcessed = false;
  if (this.latLongLayer) {
    this.latLongLayer.map_0 = null;
    $remove_3(this.layers, this.latLongLayer);
  }
  this.latLongLayer = null;
}
;
_.setData = function setData_0(theData){
  var limitedRows, mobileLimt;
  !!this.data_0 && this.data_0 != theData && $freeResources_11(this.data_0);
  $resetDataShapes_0(this);
  this.rangesApplied = false;
  this.needsFormat = true;
  mobileLimt = this.getDataRowLimit();
  if (!!theData && $getNumRows(theData) > mobileLimt) {
    limitedRows = $clone_0(theData, mobileLimt, $getNumCols(theData));
    $freeResources_11(theData);
    theData = limitedRows;
    $warnNotAllDataShown(this.chart);
  }
  this.data_0 = theData;
}
;
_.setFrame = function setFrame_1(type_0, easingType, startTime, curTime, endTime, rnd){
  $setFrame(this, curTime);
}
;
_.setHoverData = function setHoverData_2(hoverObject, rnd){
  var hoverComp, mapHoverComp;
  if (hoverObject == null && this.lastHoverComp != null) {
    clearGraphicElementArray(this.hoverGEAry);
    this.lastHoverComp = null;
    $clearAllZoomControlFlags(this);
    $createZoomControls(this);
    return true;
  }
  if (hoverObject != null && maskUndefined(hoverObject) !== maskUndefined(this.lastHoverComp)) {
    $clearAllZoomControlFlags(this);
    if (instanceOf(hoverObject, 23)) {
      hoverComp = castTo(hoverObject, 23);
      if (maskUndefined(hoverComp) !== maskUndefined(this.lastHoverComp)) {
        if (instanceOf(hoverComp, 114) && castTo(hoverComp, 114).layer != $getFirstPointLayer(this)) {
          mapHoverComp = castTo(hoverComp, 114);
          $setHoverText_0(mapHoverComp, $getFormattedHoverText(this, mapHoverComp));
          $addHoverShapesForMapPointComponent(this, mapHoverComp, rnd);
          this.lastHoverComp = hoverComp;
          return true;
        }
      }
    }
    instanceOfString(hoverObject) && (this.lastHoverComp = hoverObject);
  }
  return $setHoverDataForZoomControl(this, hoverObject);
}
;
_.setMinMaxBubbleSizesAndNumberOfRanges = function setMinMaxBubbleSizesAndNumberOfRanges(){
  this.MAX_RANGES = 6;
  this.MAX_BUBBLESIZE = 20;
  this.MIN_BUBBLESIZE = 4;
  if (this.treatAsSmall) {
    this.MIN_BUBBLESIZE = 2;
    this.MAX_BUBBLESIZE = 10;
  }
  $adjustMinMaxBubbleSizeBasedOnImageSize(this);
}
;
_.updateExtents = function updateExtents(comp, min_0, max_0){
  var rect;
  rect = comp.origBnds;
  $updateExtentsFromRect(rect, min_0, max_0);
}
;
_.updateWithDefinition = function updateWithDefinition_1(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
  $updateWithDefinition(this, compDef, datasourceMap, oldDataGrid);
  $addCityPointLayerIfNeeded(this);
}
;
_.MAX_BUBBLESIZE = 0;
_.MAX_RANGES = 0;
_.MIN_BUBBLESIZE = 0;
_.alphaBubble = 0;
_.autoZoomProcessed = false;
_.latlongLayerProcessed = false;
_.maxValue = 0;
_.maxValuelog = 0;
_.minValue = 0;
_.minValuelog = 0;
_.seriesLegendValType = 0;
_.useLogScale = false;
var Lcom_domo_charting_base_MapAreaLatLong_2_classLit = createForClass('com.domo.charting.base', 'MapAreaLatLong', 144);
function $compare(this$static, o1, o2){
  var o1Name, o2Name;
  o1Name = this$static.this$01.getSeriesNameFromRow(this$static.this$01.data_0, o1);
  o1Name == null && (o1Name = '');
  o2Name = this$static.this$01.getSeriesNameFromRow(this$static.this$01.data_0, o2);
  o2Name == null && (o2Name = '');
  return compare_28((checkCriticalNotNull(o1Name) , o1Name), (checkCriticalNotNull(o2Name) , o2Name));
}

function MapAreaLatLong$1(this$0){
  this.this$01 = this$0;
}

defineClass(351, 1, {}, MapAreaLatLong$1);
_.compare = function compare_0(o1, o2){
  return $compare(this, castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_1(other){
  return this === other;
}
;
var Lcom_domo_charting_base_MapAreaLatLong$1_2_classLit = createForClass('com.domo.charting.base', 'MapAreaLatLong/1', 351);
function $getColNameForName(this$static, data_0, row){
  var column;
  column = $getColumnForName(data_0, row);
  if (column)
    return column.name_0;
  return null;
}

function $getColumnForName(data_0, row){
  var cell, column;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LABEL');
      if (cell) {
        return cell.column;
      }
    }
     else {
      column = $getMetadataInfo(data_0, 0);
      return column;
    }
  }
  return null;
}

function $getColumnForSeriesName(data_0, row){
  var cell, column;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COLOR');
      if (cell) {
        return cell.column;
      }
    }
     else {
      column = $getMetadataInfo(data_0, 5);
      return column;
    }
  }
  return null;
}

function $getLatitude2FromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LATITUDE2');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 3);
    }
  }
  return NaN;
}

function $getLatitudeFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LATITUDE');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 1);
    }
  }
  return NaN;
}

function $getLongitude2FromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LONGITUDE2');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 4);
    }
  }
  return NaN;
}

function $getLongitudeFromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LONGITUDE');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getMetaDataCellValue(cell, 2);
    }
  }
  return NaN;
}

function $getNameFromRow(data_0, row){
  var cell, metaData;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'LABEL');
      if (cell)
        return cell.valueStr;
    }
     else {
      cell = $getFirstCell(row);
      if (cell) {
        metaData = $getMetaDataCell(cell, 0);
        if (!!metaData && metaData.valueStr != null)
          return metaData.valueStr;
      }
    }
  }
  return null;
}

function $getSeriesNameFromRow(data_0, row){
  var cell, metaData;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'COLOR');
      if (cell)
        return cell.valueStr;
    }
     else {
      cell = $getFirstCell(row);
      if (cell) {
        metaData = $getMetaDataCell(cell, 5);
        if (!!metaData && metaData.valueStr != null)
          return metaData.valueStr;
      }
    }
  }
  return null;
}

function $getValue2FromRow(data_0, row){
  var cell;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'ITEM');
      if (cell)
        return $getValue(cell);
    }
     else {
      cell = $getFirstCell(row);
      if (cell)
        return $getValue(cell);
    }
  }
  return NaN;
}

function $getValueFromRow(data_0, row){
  var cell, value_0;
  if (!!row && !!data_0) {
    if (data_0.orderedColumnList) {
      cell = $getCellForColumnMappedName(data_0, row, 'VALUE');
      if (cell)
        return $getValue(cell);
    }
     else {
      value_0 = getDouble_0($getName(row), NaN);
      return value_0;
    }
  }
  return NaN;
}

function MapAreaLatLongRoute(name_0, bnds){
  MapAreaLatLong.call(this, name_0, bnds);
  this.useCurvedRoutes = true;
}

defineClass(207, 144, {23:1, 63:1, 85:1, 144:1, 207:1}, MapAreaLatLongRoute);
_.addMapPointForRow = function addMapPointForRow_0(layer, row){
  var colName, column, fillColor, index_0, lat, lat2, location_0, location2, longitude, longitude2, mapRouteComponent, name_0, numColors, rect1, rect2, routeColor, series, size_0, size2, val1, val2, value_0, value2;
  if (row) {
    name_0 = $getNameFromRow(this.data_0, row);
    value_0 = $getValueFromRow(this.data_0, row);
    lat = $getLatitudeFromRow(this.data_0, row);
    longitude = $getLongitudeFromRow(this.data_0, row);
    value2 = $getValue2FromRow(this.data_0, row);
    lat2 = $getLatitude2FromRow(this.data_0, row);
    longitude2 = $getLongitude2FromRow(this.data_0, row);
    series = $getSeriesNameFromRow(this.data_0, row);
    colName = $getColNameForName(this, this.data_0, row);
    column = $getColumnForName(this.data_0, row);
    $getNameDataTypeFromRow(this.data_0, row);
    routeColor = null;
    numColors = this.colorAry.array.length;
    if (series != null) {
      index_0 = castTo($getStringValue(this.seriesMap, series), 29);
      fillColor = castTo($get_2(this.colorAry, index_0.value_0 % numColors), 15);
      index_0.value_0 == 0 && !!this.colorOverride && (fillColor = this.colorOverride);
    }
     else 
      this.colorOverride?(fillColor = this.colorOverride):(fillColor = castTo($get_2(this.colorAry, 0), 15));
    !!fillColor && this.alphaBubble != 0 && (routeColor = new CFColor_1(fillColor, this.alphaBubble));
    if (this.projector) {
      longitude = keepLongitudeInRange((checkCriticalNotNull(longitude) , longitude));
      lat = keepLatitudeInRange((checkCriticalNotNull(lat) , lat));
      longitude2 = keepLongitudeInRange((checkCriticalNotNull(longitude2) , longitude2));
      lat2 = keepLatitudeInRange((checkCriticalNotNull(lat2) , lat2));
      rect1 = null;
      rect2 = null;
      if (!isNaN_0((checkCriticalNotNull(longitude) , longitude)) && !isNaN_0((checkCriticalNotNull(lat) , lat))) {
        location_0 = $convert(this.projector, (checkCriticalNotNull(longitude) , longitude), (checkCriticalNotNull(lat) , lat));
        rect1 = new CFRect(location_0.x_0, location_0.y_0, 1, 1);
      }
      if (!isNaN_0((checkCriticalNotNull(longitude2) , longitude2)) && !isNaN_0((checkCriticalNotNull(lat2) , lat2))) {
        location2 = $convert(this.projector, (checkCriticalNotNull(longitude2) , longitude2), (checkCriticalNotNull(lat2) , lat2));
        rect2 = new CFRect(location2.x_0, location2.y_0, 1, 1);
      }
      size_0 = $getSizeForValueFromRanges(this, (checkCriticalNotNull(value_0) , value_0));
      size2 = $getSizeForValueFromRanges(this, (checkCriticalNotNull(value2) , value2));
      mapRouteComponent = new MapRouteComponent(name_0, rect1, rect2, size_0, size2, this.useCurvedRoutes);
      mapRouteComponent.layer = layer;
      !!fillColor && (mapRouteComponent.fillColor = fillColor);
      !!routeColor && (mapRouteComponent.routeColor = routeColor);
      mapRouteComponent.noStroke = true;
      val1 = '';
      val2 = '';
      isNaN_0((checkCriticalNotNull(value_0) , value_0)) || (val1 = ' : ' + $formatNumber_1(this.hoverNumberFormatter, (checkCriticalNotNull(value_0) , value_0)));
      isNaN_0((checkCriticalNotNull(value2) , value2)) || (val2 = ' \u2192 ' + $formatNumber_1(this.hoverNumberFormatter, (checkCriticalNotNull(value2) , value2)));
      mapRouteComponent.hoverText = name_0 + val1 + val2;
      if (series != null) {
        name_0 = series;
        colName = $getSeriesColumnName(this, this.data_0, row);
        column = $getColumnForSeriesName(this.data_0, row);
      }
      $addDrillFilterAndRootMapName(mapRouteComponent, colName, name_0, column, null);
      $addMapShape(layer, mapRouteComponent);
    }
  }
}
;
_.addSecondValueToMinMaxRangeIfNeeded = function addSecondValueToMinMaxRangeIfNeeded_0(row){
  var value_0;
  value_0 = $getValue2FromRow(this.data_0, row);
  $adjustMinMaxToIncludeValue(this, value_0);
}
;
_.getColNameForName = function getColNameForName_0(data_0, row){
  return $getColNameForName(this, data_0, row);
}
;
_.getColumnForName = function getColumnForName_0(data_0, row){
  return $getColumnForName(data_0, row);
}
;
_.getColumnForSeriesName = function getColumnForSeriesName_0(data_0, row){
  return $getColumnForSeriesName(data_0, row);
}
;
_.getDataRowLimit = function getDataRowLimit_0(){
  return this.chart.mobile?$intern_10:$intern_11;
}
;
_.getLatitudeFromRow = function getLatitudeFromRow_0(data_0, row){
  return $getLatitudeFromRow(data_0, row);
}
;
_.getLongitudeFromRow = function getLongitudeFromRow_0(data_0, row){
  return $getLongitudeFromRow(data_0, row);
}
;
_.getNameFromRow = function getNameFromRow_0(data_0, row){
  return $getNameFromRow(data_0, row);
}
;
_.getSeriesNameFromRow = function getSeriesNameFromRow_0(data_0, row){
  return $getSeriesNameFromRow(data_0, row);
}
;
_.getValueFromRow = function getValueFromRow_0(data_0, row){
  return $getValueFromRow(data_0, row);
}
;
_.processChartOptions = function processChartOptions_1(){
  var key, key$iterator, value_0;
  $processChartOptions_1(this);
  if ($hasChartOptions(this)) {
    for (key$iterator = $getChartOptionKeys(this).iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = $getChartOptionAsString(this, key);
      key == 'use_curvedline' && (this.useCurvedRoutes = isFalse(value_0));
    }
  }
}
;
_.setMinMaxBubbleSizesAndNumberOfRanges = function setMinMaxBubbleSizesAndNumberOfRanges_0(){
  this.MAX_RANGES = 8;
  this.MAX_BUBBLESIZE = 19;
  this.MIN_BUBBLESIZE = 2;
  if (this.treatAsSmall) {
    this.MIN_BUBBLESIZE = 1;
    this.MAX_BUBBLESIZE = 10;
  }
  $adjustMinMaxBubbleSizeBasedOnImageSize(this);
}
;
_.updateExtents = function updateExtents_0(comp, min_0, max_0){
  var mapRouteComponent, rect, rect0;
  rect0 = comp.origBnds;
  $updateExtentsFromRect(rect0, min_0, max_0);
  if (instanceOf(comp, 182)) {
    mapRouteComponent = castTo(comp, 182);
    rect = mapRouteComponent.origBnds2;
    $updateExtentsFromRect(rect, min_0, max_0);
  }
}
;
_.useCurvedRoutes = false;
var Lcom_domo_charting_base_MapAreaLatLongRoute_2_classLit = createForClass('com.domo.charting.base', 'MapAreaLatLongRoute', 207);
function $addOrigPath(this$static, path){
  !this$static.origPaths && (this$static.origPaths = new ArrayList);
  $add_1(this$static.origPaths, path);
}

function $drawFront(this$static, rnd){
  var ge, ge$iterator;
  if (!this$static.isPopupComp && !!this$static.frontGeAry) {
    for (ge$iterator = new ArrayList$1(this$static.frontGeAry); ge$iterator.i < ge$iterator.this$01.array.length;) {
      ge = castTo($next_3(ge$iterator), 12);
      !ge.hidden && $draw_2(ge, rnd);
    }
  }
}

function $freeResources_5(this$static, dataToKeep){
  $freeResources_1(this$static);
  this$static.layer = null;
  this$static.origBnds = null;
  this$static.origPaths = null;
  this$static.origFillColor = null;
  this$static.origStroke = null;
  this$static.origFont = null;
  this$static.text_0 = null;
  this$static.calculatedOrigBnds = null;
  !!this$static.frontGeAry && clearGraphicElementArray(this$static.frontGeAry);
  this$static.frontGeAry = null;
}

function $getOrigOrCalculatedOrigBounds(this$static){
  var bnds, maxX, maxY, minX, minY, origPath, origPath$iterator;
  if (!!this$static.origBnds && this$static.origBnds.x_0 == 0 && this$static.origBnds.y_0 == 0) {
    if (!!this$static.origPaths && !this$static.calculatedOrigBnds) {
      if (this$static.origPaths.array.length == 1) {
        this$static.calculatedOrigBnds = $getBoundsForPath(castTo($get_2(this$static.origPaths, 0), 14));
      }
       else {
        minX = $intern_19;
        maxX = $intern_20;
        minY = $intern_19;
        maxY = $intern_20;
        for (origPath$iterator = new ArrayList$1(this$static.origPaths); origPath$iterator.i < origPath$iterator.this$01.array.length;) {
          origPath = castTo($next_3(origPath$iterator), 14);
          bnds = $getBoundsForPath(origPath);
          bnds.x_0 < minX && (minX = bnds.x_0);
          bnds.y_0 < minY && (minY = bnds.y_0);
          bnds.x_0 + bnds.width_0 > maxX && (maxX = bnds.x_0 + bnds.width_0);
          bnds.y_0 + bnds.height_0 > maxY && (maxY = bnds.y_0 + bnds.height_0);
        }
        this$static.calculatedOrigBnds = new CFRect(minX, minY, maxX - minX, maxY - minY);
      }
    }
    return this$static.calculatedOrigBnds;
  }
  return this$static.origBnds;
}

function $moveAndScale(this$static, newBnds, scale){
  var bnds, drawStroke, ge, newCompBnds, newPath, newScaledCompBounds, newX, newY, path, path$iterator, rotation, shape_0, textItem, theFill;
  clearGraphicElementArray(this$static.geAry);
  !!this$static.frontGeAry && (this$static.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  if (this$static.origPaths) {
    newScaledCompBounds = null;
    for (path$iterator = new ArrayList$1(this$static.origPaths); path$iterator.i < path$iterator.this$01.array.length;) {
      path = castTo($next_3(path$iterator), 14);
      ge = new GraphicElement;
      newPath = $duplicate_3(path);
      bnds = $getBoundsForPath(path);
      if (bnds) {
        newX = newBnds.x_0 + (bnds.x_0 + this$static.origBnds.x_0) * scale;
        newY = newBnds.y_0 + (bnds.y_0 + this$static.origBnds.y_0) * scale;
        newCompBnds = new CFRect(newX, newY, bnds.width_0 * scale, bnds.height_0 * scale);
        newScaledCompBounds = $extendToIncludeRect(newCompBnds, newScaledCompBounds);
        $scaleAndPositionToRect(newPath, newCompBnds);
        newPath.shouldAntiAlias = true;
        if (this$static.text_0 != null) {
          rotation = 0;
          !isNaN_0(this$static.textRotation) && this$static.textRotation != 0 && (rotation = round_int(this$static.textRotation));
          this$static.origFont?(textItem = new CFTextItem_1(this$static.text_0, new CFFont_1(null, this$static.origFont.size_0 * scale, this$static.origFont.color_0, this$static.origFont.face_0), round_int(newX), round_int(newY), rotation)):(textItem = new CFTextItem_1(this$static.text_0, new CFFont_0(null, 12 * scale, ($clinit_CFColor() , BLACK)), round_int(newX), round_int(newY), rotation));
          !ge.textAry && (ge.textAry = new ArrayList);
          $add_1(ge.textAry, textItem);
        }
         else {
          theFill = this$static.origFillColor?new CFFill(this$static.origFillColor):null;
          drawStroke = this$static.origStroke;
          if (!!this$static.origStroke && this$static.origStroke.width_0 != 0) {
            drawStroke = $duplicate_7(this$static.origStroke);
            $setWidth_0(drawStroke, drawStroke.width_0 * scale);
          }
          shape_0 = new CFShape_0(newPath, theFill, drawStroke);
          !ge.shapeAry && (ge.shapeAry = new ArrayList);
          $add_1(ge.shapeAry, shape_0);
        }
      }
      !!this$static.clipPath && (ge.clipPath = this$static.clipPath);
      this$static.geAry.add_0(ge);
    }
    newScaledCompBounds?(this$static.bnds = new CFRect(newScaledCompBounds.x_0, newScaledCompBounds.y_0, newScaledCompBounds.width_0, newScaledCompBounds.height_0)):(this$static.bnds = null);
  }
}

function $moveAndScaleToRect_0(this$static, newBounds, layerBounds, scale){
  var bnds, bnds0, ge, i, j, newCompBnds, newX, newX0, newY, newY0, path;
  for (i = 0; i < this$static.geAry.size_1(); i++) {
    ge = castTo(this$static.geAry.get_1(i), 12);
    if (!!ge.shapeAry && ge.shapeAry.array.length > 0) {
      for (j = 0; j < ge.shapeAry.array.length; j++) {
        path = castTo($get_2(ge.shapeAry, j), 6).path;
        bnds0 = $getBoundsForPath(path);
        if (bnds0) {
          newX0 = newBounds.x_0 + (bnds0.x_0 - layerBounds.x_0) * scale;
          newY0 = newBounds.y_0 + (bnds0.y_0 - layerBounds.y_0) * scale;
          newCompBnds = new CFRect(newX0, newY0, bnds0.width_0 * scale, bnds0.height_0 * scale);
          $scaleAndPositionToRect(path, newCompBnds);
        }
      }
    }
    bnds = this$static.bnds;
    newX = newBounds.x_0 + (bnds.x_0 - layerBounds.x_0) * scale;
    newY = newBounds.y_0 + (bnds.y_0 - layerBounds.y_0) * scale;
    $setBounds(this$static, new CFRect(newX, newY, bnds.width_0 * scale, bnds.height_0 * scale));
  }
}

function $setOrigFillColor(this$static, origFillColor){
  this$static.origFillColor = origFillColor;
}

function $setText(this$static, text_0){
  this$static.text_0 = text_0;
}

function $setTextRotation(this$static, textRotation){
  this$static.textRotation = textRotation;
}

function ShapeComponent(theChart, name_0){
  Component.call(this, theChart, name_0);
}

function ShapeComponent_0(source){
  var path, path$iterator;
  Component.call(this, source.chart, source.name_0);
  !!source.origBnds && (this.origBnds = $duplicate_5(source.origBnds));
  !!source.origFillColor && (this.origFillColor = $duplicate_0(source.origFillColor));
  !!source.origStroke && (this.origStroke = new CFStroke($duplicate_0(source.origStroke.color_0), source.origStroke.width_0));
  if (!!source.origPaths && source.origPaths.array.length > 0) {
    this.origPaths = new ArrayList;
    for (path$iterator = new ArrayList$1(source.origPaths); path$iterator.i < path$iterator.this$01.array.length;) {
      path = castTo($next_3(path$iterator), 14);
      !!path && $add_1(this.origPaths, $duplicate_3(path));
    }
  }
}

function ShapeComponent_1(bnds, fill, stroke){
  Component.call(this, null, null);
  this.origBnds = bnds;
  this.origFillColor = fill;
  this.origStroke = stroke;
}

defineClass(93, 23, {23:1, 93:1}, ShapeComponent_0, ShapeComponent_1);
_.freeResources = function freeResources_3(dataToKeep){
  $freeResources_5(this, dataToKeep);
}
;
_.getDisplayBounds = function getDisplayBounds(){
  return this.bnds;
}
;
_.textRotation = 0;
var Lcom_domo_charting_base_ShapeComponent_2_classLit = createForClass('com.domo.charting.base', 'ShapeComponent', 93);
function $$init_0(this$static){
  this$static.value_0 = NaN;
  this$static.logicalCenterX = NaN;
  this$static.logicalCenterY = NaN;
}

function $addDrillFilter(this$static, colName, names, colRowInfo, rootMapName){
  var filter, filterBase, passThroughMap, passThrough;
  filterBase = new FilterBase(colName, 'IN', colRowInfo);
  filterBase.values = names;
  filter = getDrillFilterFromValues(filterBase);
  if (this$static.drillMap != null) {
    passThroughMap = new HashMap;
    $putStringValue(passThroughMap, 'map_name', this$static.drillMap);
    this$static.altDrillMap != null && $putStringValue(passThroughMap, 'map_name_alt', this$static.altDrillMap);
    rootMapName != null && $put_2(passThroughMap.stringMap, 'root_map_name', rootMapName);
    this$static.drillFilter = ($clinit_StrUtil() , passThrough = null , passThroughMap.hashCodeMap.size_0 + passThroughMap.stringMap.size_0 > 0 && (passThrough = getMapOfStringsAsJson(passThroughMap)) , getDrillFilterFromFiltersAndPassThrough(filter, passThrough));
  }
   else 
    this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter, null));
}

function $addDrillFilterAndRootMapName(this$static, colName, shapeName, colRowInfo, rootMapName){
  var names;
  this$static.drillMatchValue = shapeName;
  names = new ArrayList;
  names.array[names.array.length] = shapeName;
  $addDrillFilter(this$static, colName, names, colRowInfo, rootMapName);
}

function $applyFillColor(this$static, color_0){
  var ge, ge$iterator, shape_0, shape$iterator;
  if (color_0) {
    for (ge$iterator = this$static.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      if (!!ge.shapeAry && ge.shapeAry.array.length > 0) {
        for (shape$iterator = new ArrayList$1(ge.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 6);
          !!shape_0.fill_0 && (shape_0.fill_0 = new CFFill(color_0));
        }
      }
    }
  }
}

function $applyOverrideColor(this$static, color_0){
  this$static.overrideColor = color_0;
  this$static.overrideColor?$updateFillColor(this$static, this$static.overrideColor):$updateFillColor(this$static, this$static.origFillColor);
}

function $freeResources_6(this$static, dataToKeep){
  $freeResources_5(this$static, dataToKeep);
  !!this$static.range && $freeResources_8(this$static.range, dataToKeep);
  this$static.range = null;
  this$static.legendStr = null;
  this$static.pctStr = null;
  this$static.valStr = null;
  this$static.properties = null;
  this$static.hoverText = null;
  this$static.longName = null;
  this$static.altName = null;
  this$static.code_0 = null;
  this$static.altCode = null;
  this$static.fillColor_0 = null;
  this$static.row = null;
  this$static.drillMap = null;
  this$static.drillMatchValue = null;
}

function $getLogicalCenter(this$static, scaleFactor){
  if (!isNaN_0(this$static.logicalCenterX) && !isNaN_0(this$static.logicalCenterY) && !!this$static.bnds)
    return new CFPoint(this$static.bnds.x_0 + this$static.logicalCenterX * scaleFactor, this$static.bnds.y_0 + this$static.logicalCenterY * scaleFactor);
  return null;
}

function $getLongName(this$static){
  if (this$static.longName != null && this$static.longName.length > 0)
    return this$static.longName;
  return this$static.name_0;
}

function $getPctStr(this$static){
  if (this$static.pctStr != null) {
    if (this$static.pctStr.indexOf('fin') != -1 && this$static.pctStr.indexOf('ite') != -1)
      return '(0%)';
    return this$static.pctStr;
  }
  return null;
}

function $getShapeUnderPoint_1(this$static, x_0, y_0, rnd){
  if (!!this$static.layer && (!!this$static.layer.map_0 && (!this$static.layer.map_0.hideNoDataShapes || !isNaN_0(this$static.value_0)) || !this$static.layer.map_0))
    return $getShapeUnderPoint_0(this$static, x_0, y_0, rnd);
  return null;
}

function $isShowAsFiltered(this$static){
  if (this$static.row)
    return this$static.row.showAsFiltered;
  return false;
}

function $reset_1(this$static){
  this$static.geAry = new ArrayList;
  this$static.isPopupComp = false;
  this$static.value_0 = NaN;
  this$static.valStr = null;
  this$static.range = null;
  this$static.fillColor_0 = null;
  this$static.origFillColor = null;
}

function $setDrillMap(this$static, drillMap){
  this$static.drillMap = drillMap;
}

function $setFillColor(this$static, color_0){
  if (color_0) {
    this$static.fillColor_0 = new CFFill(new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0));
    !this$static.origFillColor && (this$static.origFillColor = new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0));
    $applyFillColor(this$static, this$static.fillColor_0.color_0);
  }
}

function $setHoverText_0(this$static, text_0){
  this$static.hoverText = text_0;
}

function $setLogicalCenterX(this$static, value_0){
  this$static.logicalCenterX = value_0;
}

function $setLogicalCenterY(this$static, value_0){
  this$static.logicalCenterY = value_0;
}

function $updateFillColor(this$static, color_0){
  this$static.fillColor_0?$setValuesFromColor(this$static.fillColor_0.color_0, color_0):(this$static.fillColor_0 = new CFFill(new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0)));
}

function $useHoverNotSelectedColor(this$static){
  if (this$static.overrideColor)
    $updateFillColor(this$static, this$static.overrideColor);
  else {
    $updateFillColor(this$static, this$static.origFillColor);
    !!this$static.fillColor_0 && (this$static.fillColor_0.color_0.alpha_0 = 128 , undefined);
  }
}

function MapComponent(theChart, name_0, properties){
  ShapeComponent.call(this, theChart, name_0);
  $$init_0(this);
  this.properties = properties;
}

function MapComponent_0(source){
  ShapeComponent_0.call(this, source);
  $$init_0(this);
  this.legendStr = source.legendStr;
  this.pctStr = source.pctStr;
  this.valStr = source.valStr;
  this.value_0 = source.value_0;
  this.hoverText = source.hoverText;
  !!source.properties && (this.properties = new HashMap_1(source.properties));
  this.longName = source.longName;
  this.altName = source.altName;
  this.code_0 = source.code_0;
  this.altCode = source.altCode;
  this.drillMap = source.drillMap;
  !!source.fillColor_0 && (this.fillColor_0 = new CFFill($duplicate_0(source.fillColor_0.color_0)));
  this.hidden = source.selected;
  this.selected = source.selected;
  this.logicalCenterX = source.logicalCenterX;
  this.logicalCenterY = source.logicalCenterY;
}

function MapComponent_1(name_0, bnds, longName, altName, code_0, altCode){
  ShapeComponent.call(this, null, name_0);
  $$init_0(this);
  this.origBnds = bnds;
  this.longName = longName;
  this.altName = altName;
  this.code_0 = code_0;
  this.altCode = altCode;
}

defineClass(47, 93, {23:1, 47:1, 93:1}, MapComponent, MapComponent_0, MapComponent_1);
_.freeResources = function freeResources_4(dataToKeep){
  $freeResources_6(this, dataToKeep);
}
;
_.getHoverPoint = function getHoverPoint_1(){
  if (!!this.layer && !!this.layer.map_0 && instanceOf(this.layer.map_0, 144)) {
    if (this.bnds)
      return new CFPoint(this.bnds.x_0, this.bnds.y_0 - 3);
    return new CFPoint(0, 0);
  }
   else 
    return null;
}
;
_.getHoverText = function getHoverText_1(){
  return this.hoverText;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_2(x_0, y_0, rnd){
  return $getShapeUnderPoint_1(this, x_0, y_0, rnd);
}
;
_.handleClick = function handleClick_1(shapeClicked){
  var dataObject, map_0;
  dataObject = $getDataObjectForShape_0(this, shapeClicked);
  if (!!shapeClicked && instanceOf(dataObject, 85)) {
    map_0 = castTo(dataObject, 85);
    if (map_0.editMode) {
      this.selected = !this.selected;
      this.selected?$setStroke(shapeClicked, new CFStroke_1('#FF0000', shapeClicked.stroke_0.width_0 * 5)):$setStroke(shapeClicked, new CFStroke_1('#000000', shapeClicked.stroke_0.width_0 / 5));
      return true;
    }
     else if (!!map_0.chart && $usingCardBus(map_0.chart)) {
      if (this.row) {
        $toggleRowShowAsFilterAndClearIfAllFiltered(map_0.data_0, this.row);
        if (this.layer) {
          $adjustColorsForShowAsFiltered(this.layer);
          !!map_0 && !!map_0.data_0 && $setDrillFromDataBasedOnShowAsFiltered(map_0, true);
        }
        clearGraphicElementArray(map_0.hoverGEAry);
      }
      return true;
    }
  }
  return false;
}
;
_.moveAndScale = function moveAndScale(newBnds, scale, fill, stroke, viewPort){
  var bnds, drawStroke, ge, newCompBnds, newPath, newScaledCompBounds, newX, newY, path, path$iterator, shape_0;
  clearGraphicElementArray(this.geAry);
  !!this.fillColor_0 && (fill = this.fillColor_0);
  if (this.origPaths) {
    newScaledCompBounds = null;
    for (path$iterator = new ArrayList$1(this.origPaths); path$iterator.i < path$iterator.this$01.array.length;) {
      path = castTo($next_3(path$iterator), 14);
      bnds = $getBoundsForPath(path);
      if (bnds) {
        newX = newBnds.x_0 + (bnds.x_0 + this.origBnds.x_0) * scale;
        newY = newBnds.y_0 + (bnds.y_0 + this.origBnds.y_0) * scale;
        newCompBnds = new CFRect(newX, newY, bnds.width_0 * scale, bnds.height_0 * scale);
        if ($intersects(newCompBnds, viewPort)) {
          ge = new GraphicElement;
          newScaledCompBounds = $extendToIncludeRect(newCompBnds, newScaledCompBounds);
          if (newCompBnds.width_0 < 3 && newCompBnds.height_0 < 3)
            newPath = new CFPath_3(newCompBnds);
          else {
            newPath = $duplicate_3(path);
            $scaleAndPositionToRect(newPath, newCompBnds);
          }
          newPath.shouldAntiAlias = true;
          drawStroke = stroke;
          if (stroke.width_0 != 0) {
            drawStroke = $duplicate_7(stroke);
            $setWidth_0(drawStroke, drawStroke.width_0 * scale);
          }
          shape_0 = new CFShape_0(newPath, fill, drawStroke);
          !ge.shapeAry && (ge.shapeAry = new ArrayList);
          $add_1(ge.shapeAry, shape_0);
          !!this.clipPath && (ge.clipPath = this.clipPath);
          this.geAry.add_0(ge);
        }
      }
    }
    newScaledCompBounds?(this.bnds = new CFRect(newScaledCompBounds.x_0, newScaledCompBounds.y_0, newScaledCompBounds.width_0, newScaledCompBounds.height_0)):(this.bnds = null);
  }
}
;
_.reset_0 = function reset_2(){
  $reset_1(this);
}
;
_.resetHoverText = function resetHoverText(){
  this.hoverText = null;
}
;
_.setHoverData = function setHoverData_3(data_0, rnd){
  var graphicElement, hl, point, primaryFont, rect, redrawNeeded;
  if (data_0 != null && instanceOf(data_0, 85)) {
    !!this.row && $addDrillFilterAndRootMapName(this, this.row.parentName, this.drillMatchValue, this.row, null);
    redrawNeeded = castTo(data_0, 85).setHoverData(this, rnd);
    if (!rnd.renderer.supportsNativeHoverEvents && this.hoverText != null && $trim(this.hoverText).length > 0) {
      hl = new HoverLabel(this.layer.map_0);
      primaryFont = new CFFont_0(null, 12, ($clinit_CFColor() , WHITE));
      point = $getLogicalCenter(this, this.layer.map_0.curScale);
      !point && (point = $getCenterPoint(this.bnds));
      rect = $getTextRectForPoint(hl, rnd, primaryFont, point, this.hoverText, 0, true, false);
      graphicElement = $getCaptionGraphicElement_0(hl, rnd, this.hoverText, point, rect, 0);
      this.layer.map_0.geHoverText = graphicElement;
      this.resetHoverText();
    }
    return redrawNeeded;
  }
   else if (data_0 == null && !!this.layer.map_0.geHoverText) {
    this.layer.map_0.geHoverText = null;
    return true;
  }
  return false;
}
;
_.toString_0 = function toString_2(){
  return this.name_0;
}
;
_.hidden = false;
_.logicalCenterX = 0;
_.logicalCenterY = 0;
_.selected = false;
_.value_0 = 0;
var Lcom_domo_charting_base_MapComponent_2_classLit = createForClass('com.domo.charting.base', 'MapComponent', 47);
function $clinit_MapLayer(){
  $clinit_MapLayer = emptyMethod;
  SEMI_TRANSPARENT_WHITE = new CFFill_1('#FFFFFF88');
  pointFont = new CFFont_0(null, 11, ($clinit_CFColor() , TEXT_DARK_GRAY));
}

function $$init_1(this$static){
  this$static.dataShapeAry = new ArrayList;
  this$static.shapeAry = new ArrayList;
  this$static.compNameMap = new HashMap;
  this$static.compLongNameMap = new HashMap;
  this$static.compAltNameMap = new HashMap;
  this$static.compCodeMap = new HashMap;
  this$static.compAltCodeMap = new HashMap;
  this$static.compCodeNumericMap = new HashMap;
  this$static.compAltCodeNumericMap = new HashMap;
}

function $addDataLabels(this$static, rnd, displayRect, scale){
  var bkgFill, bkgRect, bkgShape, center, dlFont, dlGE, dlNumFormatter, existingRects, labelColor, labelText, mapComp, mapComp$iterator, srsColor, textItems, textRect, ti;
  if (!!displayRect && (this$static.type_0 == 0 || this$static.type_0 == 3) && !!this$static.dataShapeAry && this$static.dataShapeAry.array.length > 0) {
    dlNumFormatter = new NumberFormatter_0(this$static.map_0.numberFormatter);
    if (!this$static.map_0.dontAbbrevDatalabel) {
      dlNumFormatter.autoAbbreviate = true;
      dlNumFormatter.needsNewNumFormat = true;
      dlNumFormatter.autoAbbreviate3digit = true;
      dlNumFormatter.needsNewNumFormat = true;
    }
    existingRects = new ArrayList;
    for (mapComp$iterator = new ArrayList$1(this$static.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      !!mapComp.frontGeAry && clearGraphicElementArray(mapComp.frontGeAry);
      if (!mapComp.bnds)
        continue;
      srsColor = this$static.map_0.NODATA_CLR;
      !!mapComp.range && (srsColor = $getMarkerFillColor(mapComp.range));
      labelColor = ($clinit_CFColor() , TEXT_DARK_GRAY);
      this$static.map_0.datalabelFontColor?(labelColor = this$static.map_0.datalabelFontColor):$equals_0(srsColor, this$static.map_0.NODATA_CLR) || (labelColor = $getLabelColorForSeriesColor(this$static.map_0.colorMgr, srsColor));
      dlFont = new CFFont_0(null, this$static.map_0.datalabelFontSize, labelColor);
      labelText = $getFormattedDataLabelText(this$static.map_0, mapComp, dlNumFormatter);
      ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, labelText, dlFont, $intern_10, -1, -1));
      center = $getLogicalCenter(mapComp, scale);
      !center && (center = $getCenterPoint(mapComp.bnds));
      textRect = new CFRect(0, 0, ti.textDimension.width_0, ti.textDimension.height_0);
      $setCenterX(textRect, center.x_0);
      $setCenterY(textRect, center.y_0);
      $inflate(textRect, 2);
      if ($containsRect(displayRect, textRect) && !$intersectsWithList(textRect, existingRects)) {
        dlGE = new GraphicElement;
        if (this$static.map_0.dataLabelShowBackground && labelText != null && labelText.length > 0) {
          bkgRect = new CFRect(textRect.x_0, textRect.y_0, textRect.width_0, textRect.height_0);
          bkgRect.width_0 = bkgRect.width_0 + 6;
          bkgRect.x_0 -= 3;
          bkgRect.height_0 = bkgRect.height_0 + -2;
          bkgRect.y_0 -= -1;
          bkgFill = new CFFill_1('FFFFFFB0');
          !!this$static.map_0.dataLabelBkgFillColor && $setColor_0(bkgFill, new CFColor_0(this$static.map_0.dataLabelBkgFillColor.red, this$static.map_0.dataLabelBkgFillColor.green, this$static.map_0.dataLabelBkgFillColor.blue, this$static.map_0.dataLabelBkgFillAlpha));
          bkgShape = new CFShape_0(new CFPath_4(bkgRect, 2), bkgFill, null);
          $addShape_0(dlGE, bkgShape, null);
        }
        textItems = $getCFTextItemsForWrappedLines(ti, rnd, textRect, dlFont, HALIGN_CENTER, VALIGN_MIDDLE);
        $addTextItems(dlGE, textItems);
        !mapComp.frontGeAry && (mapComp.frontGeAry = new ArrayList);
        $add_1(mapComp.frontGeAry, dlGE);
        existingRects.array[existingRects.array.length] = textRect;
      }
    }
  }
}

function $addLabelToMapPoint(mapPoint, labelRect){
  var name_0, semiPath, semiRect, semiTransparentBackground, textItem, theFont;
  if (!!mapPoint && mapPoint.name_0 != null) {
    semiRect = new CFRect(labelRect.x_0 - 3, labelRect.y_0 - 1, labelRect.width_0 + 6, labelRect.height_0);
    semiPath = new CFPath_3(semiRect);
    semiPath.shouldAntiAlias = true;
    semiTransparentBackground = new CFShape_0(semiPath, SEMI_TRANSPARENT_WHITE, null);
    mapPoint.geAry.add_1(0, new GraphicElement_0(semiTransparentBackground));
    name_0 = mapPoint.name_0;
    mapPoint.longName != null && mapPoint.longName.length > 0 && (name_0 = mapPoint.longName);
    theFont = $getPointFont(mapPoint, pointFont);
    textItem = new CFTextItem_2(name_0, theFont, round_int(labelRect.x_0), round_int(labelRect.y_0));
    mapPoint.geAry.add_0(new GraphicElement_2(textItem));
  }
}

function $addMapShape(this$static, mapShape){
  var altName, altName$index, altName$max, altNames, numericCode;
  $add_1(this$static.dataShapeAry, mapShape);
  $putStringValue(this$static.compNameMap, MungeMapName(mapShape.name_0), mapShape);
  mapShape.longName != null && $putStringValue(this$static.compLongNameMap, MungeMapName(mapShape.longName), mapShape);
  if (mapShape.altName != null) {
    altNames = $split(mapShape.altName, '\\|', 0);
    for (altName$index = 0 , altName$max = altNames.length; altName$index < altName$max; ++altName$index) {
      altName = altNames[altName$index];
      $putStringValue(this$static.compAltNameMap, MungeMapName(altName), mapShape);
    }
  }
  if (mapShape.code_0 != null) {
    $putStringValue(this$static.compCodeMap, MungeMapName(mapShape.code_0), mapShape);
    numericCode = getInt(mapShape.code_0, 0);
    numericCode != 0 && $put_0(this$static.compCodeNumericMap, valueOf(numericCode), mapShape);
  }
  if (mapShape.altCode != null) {
    $putStringValue(this$static.compAltCodeMap, MungeMapName(mapShape.altCode), mapShape);
    numericCode = getInt(mapShape.altCode, 0);
    numericCode != 0 && $put_0(this$static.compAltCodeNumericMap, valueOf(numericCode), mapShape);
  }
}

function $addPointLabels(this$static, rnd, displayRect){
  var existingRects, labelAdded, labelCount, labelDim, labelPos, labelRect, mapComp, mapComp$iterator, mapPoint, ptRect, testRect;
  $makeAllMapShapesVisible(this$static);
  if (!!displayRect && !$isArea(this$static) && !!this$static.dataShapeAry && this$static.dataShapeAry.array.length > 0) {
    existingRects = new ArrayList;
    labelCount = 0;
    for (mapComp$iterator = new ArrayList$1(this$static.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      if (labelCount >= 12) {
        mapComp.hidden = true;
        continue;
      }
      labelAdded = false;
      if ($mapPointIsInBounds(this$static, mapComp, displayRect)) {
        mapPoint = castTo(mapComp, 114);
        labelDim = $getLabelDimensions(rnd, mapPoint);
        ptRect = new CFRect(round_int(mapPoint.bnds.x_0 - 4), toDouble_0(fromDouble_0($wnd.Math.round(mapPoint.bnds.y_0 - 4))), 8, 8);
        for (labelPos = 0; labelPos <= 3; labelPos++) {
          labelRect = $getLabelRect(mapPoint.bnds, labelDim, labelPos);
          testRect = new CFRect_0(labelRect);
          if (labelPos == 0) {
            $setX_0(testRect, testRect.x_0 - 8 - 10);
            $setWidth(testRect, testRect.width_0 + 8 + 10);
          }
           else 
            labelPos == 1 && $setWidth(testRect, testRect.width_0 + 8 + 10);
          if ($containsRect(displayRect, labelRect) && !$intersectsWithList(ptRect, existingRects) && !$intersectsWithList(testRect, existingRects)) {
            (labelPos == 2 || labelPos == 3) && (existingRects.array[existingRects.array.length] = ptRect , true);
            existingRects.array[existingRects.array.length] = testRect;
            $addLabelToMapPoint(mapPoint, labelRect);
            labelAdded = true;
            ++labelCount;
            break;
          }
        }
      }
      labelAdded || (mapComp.hidden = true);
    }
  }
}

function $addShape_1(this$static, shapeComp){
  $add_1(this$static.shapeAry, shapeComp);
}

function $adjustColorsForShowAsFiltered(this$static){
  var mapComponent, mapComponent$iterator;
  if (this$static.dataShapeAry) {
    for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      !!mapComponent.row && !!mapComponent.fillColor_0 && (mapComponent.row.showAsFiltered?mapComponent.origFillColor?$applyOverrideColor(mapComponent, $deSaturateAndLighten(mapComponent.origFillColor, 0.9, 0.4)):$applyOverrideColor(mapComponent, $deSaturateAndLighten(mapComponent.fillColor_0.color_0, 0.9, 0.4)):(mapComponent.overrideColor = null , mapComponent.overrideColor?$updateFillColor(mapComponent, mapComponent.overrideColor):$updateFillColor(mapComponent, mapComponent.origFillColor)));
    }
  }
}

function $buildDrillFilterFromFilteredRowsForRange(this$static, map_0){
  var colName, data_0, filter, filterBase, names, newFilter;
  newFilter = null;
  if (map_0.data_0) {
    newFilter = 'none';
    data_0 = map_0.data_0;
    if (!!data_0 && $getNumRows(data_0) > 0) {
      colName = $getRow(data_0, 0).parentName;
      $getRow(data_0, 0);
      if (data_0.hasFilteredRows) {
        names = $getListOfUnfilteredRows(this$static);
        if (names.array.length > 0) {
          filterBase = new FilterBase(colName, 'IN', $getRow(data_0, 0));
          filterBase.values = names;
          filter = getDrillFilterFromValues(filterBase);
          newFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter, null));
        }
      }
    }
  }
  return newFilter;
}

function $clearFrontArys(this$static){
  var comp, comp$iterator, comp$iterator0;
  for (comp$iterator0 = new ArrayList$1(this$static.dataShapeAry); comp$iterator0.i < comp$iterator0.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator0), 47);
    !!comp.frontGeAry && (comp.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  }
  for (comp$iterator = new ArrayList$1(this$static.shapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 93);
    !!comp.frontGeAry && (comp.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  }
}

function $findMapShapeForData(this$static, shapeName){
  var foundComp, nameAsNumber, shapeNameMunged;
  foundComp = null;
  if (shapeName != null) {
    shapeName.indexOf('\xA0') != -1 && (shapeName = $replaceAll(shapeName, '\xA0', ' '));
    shapeName = stripDecimalPortionFromString($trim(shapeName));
    shapeNameMunged = MungeMapName(shapeName);
    !!this$static.compNameMap && (foundComp = castTo($getStringValue(this$static.compNameMap, shapeNameMunged), 47));
    !foundComp && !!this$static.compAltNameMap && (foundComp = castTo($getStringValue(this$static.compAltNameMap, shapeNameMunged), 47));
    !foundComp && !!this$static.compCodeMap && (foundComp = castTo($getStringValue(this$static.compCodeMap, shapeNameMunged), 47));
    !foundComp && !!this$static.compAltCodeMap && (foundComp = castTo($getStringValue(this$static.compAltCodeMap, shapeNameMunged), 47));
    !foundComp && !!this$static.compLongNameMap && (foundComp = castTo($getStringValue(this$static.compLongNameMap, shapeNameMunged), 47));
    if (!foundComp && !!this$static.compCodeNumericMap) {
      nameAsNumber = getInt(shapeName, 0);
      if (nameAsNumber != 0) {
        foundComp = castTo($get_1(this$static.compCodeNumericMap, valueOf(nameAsNumber)), 47);
        !foundComp && !!this$static.compAltCodeNumericMap && (foundComp = castTo($get_1(this$static.compAltCodeNumericMap, valueOf(nameAsNumber)), 47));
      }
    }
  }
  return foundComp;
}

function $findMapShapeForDataAndAddDrillFilter(this$static, shapeName, colName, colRowInfo, rootMapName){
  var foundComp;
  foundComp = $findMapShapeForData(this$static, shapeName);
  !!foundComp && $addDrillFilterAndRootMapName(foundComp, colName, shapeName, colRowInfo, rootMapName);
  return foundComp;
}

function $freeResources_7(this$static){
  var mapComponent, mapComponent$iterator, shapeComponent, shapeComponent$iterator;
  this$static.name_0 = null;
  this$static.unmappedNames = null;
  if (this$static.dataShapeAry) {
    for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      mapComponent.freeResources(null);
    }
  }
  this$static.dataShapeAry = null;
  if (this$static.shapeAry) {
    for (shapeComponent$iterator = new ArrayList$1(this$static.shapeAry); shapeComponent$iterator.i < shapeComponent$iterator.this$01.array.length;) {
      shapeComponent = castTo($next_3(shapeComponent$iterator), 93);
      shapeComponent.freeResources(null);
    }
  }
  this$static.shapeAry = null;
  this$static.compNameMap = null;
  this$static.compLongNameMap = null;
  this$static.compAltNameMap = null;
  this$static.compCodeMap = null;
  this$static.compAltCodeMap = null;
  this$static.compCodeMap = null;
  this$static.compCodeNumericMap = null;
  this$static.compAltCodeNumericMap = null;
}

function $getBoundingRect(this$static){
  var bnds, cmpBnds, ge, i, j, mapComponent, mapComponent$iterator, maxX, maxXComp, maxY, maxYComp, minX, minXComp, minY, minYComp, shape_0, shapeComponent, shapeComponent$iterator;
  minX = $intern_19;
  minY = $intern_19;
  maxX = $intern_20;
  maxY = $intern_20;
  for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
    mapComponent = castTo($next_3(mapComponent$iterator), 47);
    bnds = mapComponent.bnds;
    if (!bnds && !!mapComponent.geAry && mapComponent.geAry.size_1() > 0) {
      for (i = 0; i < mapComponent.geAry.size_1(); i++) {
        ge = castTo(mapComponent.geAry.get_1(i), 12);
        if (!!ge.shapeAry && ge.shapeAry.array.length > 0) {
          minXComp = $intern_19;
          minYComp = $intern_19;
          maxXComp = $intern_20;
          maxYComp = $intern_20;
          for (j = 0; j < ge.shapeAry.array.length; j++) {
            shape_0 = castTo($get_2(ge.shapeAry, j), 6);
            bnds = $getBoundsForPath(shape_0.path);
            if (bnds) {
              bnds.x_0 < minXComp && (minXComp = bnds.x_0);
              bnds.x_0 > maxXComp && (maxXComp = bnds.x_0);
              bnds.y_0 < minYComp && (minYComp = bnds.y_0);
              bnds.y_0 > maxYComp && (maxYComp = bnds.y_0);
              bnds.x_0 + bnds.width_0 < minXComp && (minXComp = bnds.x_0 + bnds.width_0);
              bnds.x_0 + bnds.width_0 > maxXComp && (maxXComp = bnds.x_0 + bnds.width_0);
              bnds.y_0 + bnds.height_0 < minYComp && (minYComp = bnds.y_0 + bnds.height_0);
              bnds.y_0 + bnds.height_0 > maxYComp && (maxYComp = bnds.y_0 + bnds.height_0);
            }
          }
          cmpBnds = new CFRect(minXComp, minYComp, maxXComp - minXComp, maxYComp - minYComp);
          mapComponent.bnds = new CFRect(cmpBnds.x_0, cmpBnds.y_0, cmpBnds.width_0, cmpBnds.height_0);
          cmpBnds.x_0 < minX && (minX = cmpBnds.x_0);
          cmpBnds.x_0 > maxX && (maxX = cmpBnds.x_0);
          cmpBnds.y_0 < minY && (minY = cmpBnds.y_0);
          cmpBnds.y_0 > maxY && (maxY = cmpBnds.y_0);
          cmpBnds.x_0 + cmpBnds.width_0 < minX && (minX = cmpBnds.x_0 + cmpBnds.width_0);
          cmpBnds.x_0 + cmpBnds.width_0 > maxX && (maxX = cmpBnds.x_0 + cmpBnds.width_0);
          cmpBnds.y_0 + cmpBnds.height_0 < minY && (minY = cmpBnds.y_0 + cmpBnds.height_0);
          cmpBnds.y_0 + cmpBnds.height_0 > maxY && (maxY = cmpBnds.y_0 + cmpBnds.height_0);
        }
      }
    }
  }
  for (shapeComponent$iterator = new ArrayList$1(this$static.shapeAry); shapeComponent$iterator.i < shapeComponent$iterator.this$01.array.length;) {
    shapeComponent = castTo($next_3(shapeComponent$iterator), 93);
    bnds = shapeComponent.bnds;
    if (!bnds && !!shapeComponent.geAry && shapeComponent.geAry.size_1() > 0) {
      for (i = 0; i < shapeComponent.geAry.size_1(); i++) {
        ge = castTo(shapeComponent.geAry.get_1(i), 12);
        if (!!ge.shapeAry && ge.shapeAry.array.length > 0) {
          minXComp = $intern_19;
          minYComp = $intern_19;
          maxXComp = $intern_20;
          maxYComp = $intern_20;
          for (j = 0; j < ge.shapeAry.array.length; j++) {
            shape_0 = castTo($get_2(ge.shapeAry, j), 6);
            bnds = $getBoundsForPath(shape_0.path);
            if (bnds) {
              bnds.x_0 < minXComp && (minXComp = bnds.x_0);
              bnds.x_0 > maxXComp && (maxXComp = bnds.x_0);
              bnds.y_0 < minYComp && (minYComp = bnds.y_0);
              bnds.y_0 > maxYComp && (maxYComp = bnds.y_0);
              bnds.x_0 + bnds.width_0 < minXComp && (minXComp = bnds.x_0 + bnds.width_0);
              bnds.x_0 + bnds.width_0 > maxXComp && (maxXComp = bnds.x_0 + bnds.width_0);
              bnds.y_0 + bnds.height_0 < minYComp && (minYComp = bnds.y_0 + bnds.height_0);
              bnds.y_0 + bnds.height_0 > maxYComp && (maxYComp = bnds.y_0 + bnds.height_0);
            }
          }
          cmpBnds = new CFRect(minXComp, minYComp, maxXComp - minXComp, maxYComp - minYComp);
          shapeComponent.bnds = new CFRect(cmpBnds.x_0, cmpBnds.y_0, cmpBnds.width_0, cmpBnds.height_0);
          cmpBnds.x_0 < minX && (minX = cmpBnds.x_0);
          cmpBnds.x_0 > maxX && (maxX = cmpBnds.x_0);
          cmpBnds.y_0 < minY && (minY = cmpBnds.y_0);
          cmpBnds.y_0 > maxY && (maxY = cmpBnds.y_0);
          cmpBnds.x_0 + cmpBnds.width_0 < minX && (minX = cmpBnds.x_0 + cmpBnds.width_0);
          cmpBnds.x_0 + cmpBnds.width_0 > maxX && (maxX = cmpBnds.x_0 + cmpBnds.width_0);
          cmpBnds.y_0 + cmpBnds.height_0 < minY && (minY = cmpBnds.y_0 + cmpBnds.height_0);
          cmpBnds.y_0 + cmpBnds.height_0 > maxY && (maxY = cmpBnds.y_0 + cmpBnds.height_0);
        }
      }
    }
  }
  this$static.bounds = new CFRect(minX, minY, maxX - minX, maxY - minY);
  return this$static.bounds;
}

function $getLabelDimensions(rnd, mapComponent){
  var name_0, textDimension, theFont;
  if (!!mapComponent && mapComponent.name_0 != null) {
    name_0 = mapComponent.name_0;
    mapComponent.longName != null && mapComponent.longName.length > 0 && (name_0 = mapComponent.longName);
    theFont = $getPointFont(mapComponent, pointFont);
    textDimension = getVisbleDimensionForText(rnd, name_0, theFont);
    return textDimension;
  }
  return null;
}

function $getLabelRect(pointBounds, textDim, labelPos){
  var top_0;
  top_0 = toDouble_0(fromDouble_0($wnd.Math.round(pointBounds.y_0 - textDim.height_0 / 2)));
  return labelPos == 0?new CFRect(round_int(pointBounds.x_0 + 8), top_0, $wnd.Math.ceil(textDim.width_0), $wnd.Math.ceil(textDim.height_0 + 1)):labelPos == 1?new CFRect(round_int(pointBounds.x_0 - 8 - textDim.width_0), top_0, $wnd.Math.ceil(textDim.width_0), $wnd.Math.ceil(textDim.height_0 + 1)):labelPos == 2?new CFRect(round_int(pointBounds.x_0 - textDim.width_0 / 2), round_int(pointBounds.y_0 - textDim.height_0 - 4), $wnd.Math.ceil(textDim.width_0), $wnd.Math.ceil(textDim.height_0 + 1)):new CFRect(round_int(pointBounds.x_0 - textDim.width_0 / 2), round_int(pointBounds.y_0 + 4), $wnd.Math.ceil(textDim.width_0), $wnd.Math.ceil(textDim.height_0 + 1));
}

function $getListOfUnfilteredRows(this$static){
  var comp, comp$iterator, names;
  names = new ArrayList;
  for (comp$iterator = new ArrayList$1(this$static.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
    comp = castTo($next_3(comp$iterator), 47);
    !!comp.row && !comp.row.showAsFiltered && $add_1(names, comp.drillMatchValue);
  }
  return names;
}

function $getPointFont(mapComponent, baseFont){
  var theFont;
  theFont = baseFont;
  !!mapComponent && (theFont = new CFFont_0(baseFont.name_0, baseFont.size_0 - (7 - mapComponent.size_0) / 3, baseFont.color_0));
  return theFont;
}

function $isArea(this$static){
  if (this$static.type_0 == 0)
    return true;
  return false;
}

function $makeAllMapShapesVisible(this$static){
  var mapComp, mapComp$iterator;
  if (!!this$static.dataShapeAry && this$static.dataShapeAry.array.length > 0) {
    for (mapComp$iterator = new ArrayList$1(this$static.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
      mapComp = castTo($next_3(mapComp$iterator), 47);
      mapComp.hidden = false;
    }
  }
}

function $mapPointIsInBounds(this$static, mapComp, displayRect){
  var origBnds;
  if (instanceOf(mapComp, 114) && $intersects(displayRect, mapComp.bnds)) {
    if (this$static.map_0.hideNoDataShapes && !!this$static.map_0.hideNoDataOrigBnds) {
      origBnds = $getOrigOrCalculatedOrigBounds(mapComp);
      if (!!origBnds && $intersects(origBnds, this$static.map_0.hideNoDataOrigBnds))
        return true;
    }
     else {
      return true;
    }
  }
  return false;
}

function $moveAndScale_0(this$static, newBnds, scale, transparentFill, noDataColor, strokecolor, strokeWidth, editMode, viewPort){
  var comp, comp$iterator, fill, mapComp, selectedStroke, stroke;
  fill = null;
  if (editMode) {
    noDataColor = ($clinit_CFColor() , TRANSPARENT);
    strokecolor = $duplicate_0(BLACK);
  }
  transparentFill || (fill = new CFFill(noDataColor));
  if (this$static.type_0 == 1) {
    fill = new CFFill_1('#666666');
    strokeWidth = 0.7;
    strokecolor = new CFColor_2('#FFFFFF88');
  }
  stroke = new CFStroke(strokecolor, strokeWidth);
  selectedStroke = new CFStroke_1('#FF0000', strokeWidth * 5);
  if (this$static.type_0 == 3) {
    if (this$static.shapeAry) {
      for (comp$iterator = new ArrayList$1(this$static.shapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 93);
        if (instanceOf(comp, 47)) {
          mapComp = castTo(comp, 47);
          editMode && mapComp.selected?mapComp.moveAndScale(newBnds, scale, fill, selectedStroke, viewPort):mapComp.moveAndScale(newBnds, scale, fill, stroke, viewPort);
        }
         else {
          $moveAndScale(comp, newBnds, scale);
        }
      }
    }
  }
   else {
    if (this$static.dataShapeAry) {
      for (comp$iterator = new ArrayList$1(this$static.dataShapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 47);
        editMode && comp.selected?comp.moveAndScale(newBnds, scale, fill, selectedStroke, viewPort):comp.moveAndScale(newBnds, scale, fill, stroke, viewPort);
      }
    }
    if (this$static.shapeAry) {
      for (comp$iterator = new ArrayList$1(this$static.shapeAry); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 93);
        $moveAndScale(comp, newBnds, scale);
      }
    }
  }
}

function $moveAndScaleToRect_1(this$static, newBounds){
  var mapComponent, mapComponent$iterator, scale, shapeComponent, shapeComponent$iterator;
  !this$static.bounds && $getBoundingRect(this$static);
  if (this$static.bounds) {
    scale = newBounds.width_0 / this$static.bounds.width_0;
    for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      $moveAndScaleToRect_0(mapComponent, newBounds, this$static.bounds, scale);
    }
    for (shapeComponent$iterator = new ArrayList$1(this$static.shapeAry); shapeComponent$iterator.i < shapeComponent$iterator.this$01.array.length;) {
      shapeComponent = castTo($next_3(shapeComponent$iterator), 93);
      $moveAndScaleToRect_0(shapeComponent, newBounds, this$static.bounds, scale);
    }
  }
}

function $resetNoDataShapesColor(this$static){
  var mapComponent, mapComponent$iterator;
  for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
    mapComponent = castTo($next_3(mapComponent$iterator), 47);
    !mapComponent.range && $updateFillColor(mapComponent, this$static.map_0.NODATA_CLR);
  }
}

function $setChart_0(this$static, chart){
  var mapComp, mapComp$iterator;
  for (mapComp$iterator = new ArrayList$1(this$static.dataShapeAry); mapComp$iterator.i < mapComp$iterator.this$01.array.length;) {
    mapComp = castTo($next_3(mapComp$iterator), 47);
    mapComp.chart = chart;
  }
}

function $setPointLayerSizes(this$static){
  var count, curSize, index_0, mapComponent, mapComponent$iterator;
  if (this$static.type_0 == 1 && !!this$static.dataShapeAry && this$static.dataShapeAry.array.length > 0) {
    curSize = 7;
    count = this$static.dataShapeAry.array.length;
    index_0 = 0;
    for (mapComponent$iterator = new ArrayList$1(this$static.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      index_0 > 5 * count / 10?(curSize = 2.5):index_0 > 3.5 * count / 10?(curSize = 3):index_0 > 2 * count / 10?(curSize = 4):index_0 > count / 10?(curSize = 5):index_0 > 0.3 * count / 10 && (curSize = 6);
      instanceOf(mapComponent, 114) && $setSize(castTo(mapComponent, 114), curSize);
      ++index_0;
    }
  }
}

function MapLayer(source){
  $clinit_MapLayer();
  var mapComponent, mapComponent$iterator, shape_0, shape$iterator;
  $$init_1(this);
  if (!source)
    return;
  this.name_0 = source.name_0;
  this.unmappedData = source.unmappedData;
  !!source.unmappedNames && (this.unmappedNames = new ArrayList_1(source.unmappedNames));
  this.type_0 = source.type_0;
  this.isBackgroundLayer = source.isBackgroundLayer;
  for (mapComponent$iterator = new ArrayList$1(source.dataShapeAry); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
    mapComponent = castTo($next_3(mapComponent$iterator), 47);
    !!mapComponent && $addMapShape(this, new MapComponent_0(mapComponent));
  }
  for (shape$iterator = new ArrayList$1(source.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
    shape_0 = castTo($next_3(shape$iterator), 93);
    !!shape_0 && $addShape_1(this, new ShapeComponent_0(shape_0));
  }
}

function MapLayer_0(name_0, type_0, unmappedData){
  $clinit_MapLayer();
  $$init_1(this);
  this.name_0 = name_0;
  this.unmappedData = unmappedData;
  this.unmappedNames = null;
  type_0 != null && $equals_2(type_0.toLowerCase(), 'area')?(this.type_0 = 0):type_0 != null && $equals_2(type_0.toLowerCase(), 'decoration')?(this.type_0 = 2):type_0 != null && $equalsIgnoreCase(type_0, 'custom')?(this.type_0 = 3):(this.type_0 = 1);
  ($equals_2(name_0.toLowerCase(), 'background') || $equals_2(name_0.toLowerCase(), 'admin1') || this.type_0 == 3) && (this.isBackgroundLayer = true);
}

defineClass(91, 1, {91:1}, MapLayer, MapLayer_0);
_.isBackgroundLayer = false;
_.type_0 = 0;
_.unmappedData = NaN;
_.unmappedNames = null;
var SEMI_TRANSPARENT_WHITE, pointFont;
var Lcom_domo_charting_base_MapLayer_2_classLit = createForClass('com.domo.charting.base', 'MapLayer', 91);
function $moveAndScale_1(this$static, newBnds, scale, fill, theStroke, viewPort){
  var ge, halfSize, newPath, newX, newY, ptSize, shape_0;
  clearGraphicElementArray(this$static.geAry);
  ptSize = this$static.size_0;
  ptSize == 0 && (ptSize = 4);
  halfSize = ptSize / 2;
  if (this$static.origBnds) {
    newX = newBnds.x_0 + this$static.origBnds.x_0 * scale;
    newY = newBnds.y_0 + this$static.origBnds.y_0 * scale;
    this$static.bnds = new CFRect(newX - halfSize, newY - halfSize, this$static.size_0, this$static.size_0);
    if ($intersects(this$static.bnds, viewPort)) {
      ge = new GraphicElement;
      newPath = new CFPath_0(newX - halfSize, newY - halfSize, ptSize);
      newPath.shouldAntiAlias = true;
      !!this$static.fillColor && (fill = new CFFill(this$static.fillColor));
      this$static.noStroke && (theStroke = null);
      shape_0 = new CFShape_0(newPath, fill, theStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      !!this$static.clipPath && (ge.clipPath = this$static.clipPath);
      this$static.geAry.add_0(ge);
    }
  }
}

function $setSize(this$static, size_0){
  this$static.size_0 = size_0;
}

function MapPointComponent(name_0, theBounds){
  ShapeComponent.call(this, null, name_0);
  $$init_0(this);
  this.origBnds = theBounds;
}

defineClass(114, 47, {23:1, 47:1, 114:1, 93:1}, MapPointComponent);
_.addEnlargedHoverShape = function addEnlargedHoverShape(hoverGE){
  var fill, newPath, ptSize, shape_0;
  ptSize = 12;
  this.size_0 > 0 && (ptSize = this.size_0 + 8);
  if (this.bnds) {
    newPath = new CFPath_0(this.bnds.x_0 - 4, this.bnds.y_0 - 4, ptSize);
    newPath.shouldAntiAlias = true;
    fill = ($clinit_CFFill() , DOMO_BLUE_0);
    !!this.fillColor && (fill = new CFFill(new CFColor(this.fillColor.red, this.fillColor.green, this.fillColor.blue)));
    shape_0 = new CFShape_0(newPath, fill, new CFStroke(($clinit_CFColor() , WHITE), 1.5));
    !hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList);
    $add_1(hoverGE.shapeAry, shape_0);
  }
}
;
_.freeResources = function freeResources_5(dataToKeep){
  $freeResources_6(this, dataToKeep);
  this.fillColor = null;
}
;
_.moveAndScale = function moveAndScale_0(newBnds, scale, fill, theStroke, viewPort){
  $moveAndScale_1(this, newBnds, scale, fill, theStroke, viewPort);
}
;
_.resetHoverText = function resetHoverText_0(){
}
;
_.toString_0 = function toString_3(){
  return this.hidden?'(HIDDEN) ' + this.name_0:this.name_0;
}
;
_.noStroke = false;
_.size_0 = 0;
var Lcom_domo_charting_base_MapPointComponent_2_classLit = createForClass('com.domo.charting.base', 'MapPointComponent', 114);
function $addDrillFilter_0(this$static, columnName, colRowInfo){
  var mapComponent, mapComponent$iterator, names;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    names = new ArrayList;
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      mapComponent.drillMatchValue != null && $add_1(names, mapComponent.drillMatchValue);
    }
    $addDrillFilter_1(this$static, names, columnName, colRowInfo);
  }
}

function $addDrillFilter_1(this$static, names, columnName, colRowInfo){
  var filter, filterBase;
  if (!!names && names.array.length > 0) {
    filterBase = new FilterBase(columnName, 'IN', colRowInfo);
    filterBase.values = names;
    filter = getDrillFilterFromValues(filterBase);
    this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter, null));
  }
}

function $draw_3(this$static, rnd){
  !!this$static.marker && $draw_1(this$static.marker, rnd);
  !!this$static.textMax && $draw_1(this$static.textMax, rnd);
  (this$static.rangeNum == 0 || this$static.rangeNum == -1) && !!this$static.textMin && $draw_1(this$static.textMin, rnd);
}

function $freeResources_8(this$static, dataToKeep){
  $freeResources_1(this$static);
  this$static.origMarkerFillColor = null;
  this$static.markerFillColor = null;
  !!this$static.marker && $freeResources_1(this$static.marker);
  this$static.marker = null;
  !!this$static.textMax && $freeResources_1(this$static.textMax);
  this$static.textMax = null;
  !!this$static.textMin && $freeResources_1(this$static.textMin);
  this$static.textMin = null;
  this$static.shapes = null;
}

function $getMarkerFillColor(this$static){
  var ge, shape_0;
  if (!this$static.markerFillColor) {
    if (!!this$static.marker && !!this$static.marker.geAry) {
      ge = castTo(this$static.marker.geAry.get_1(0), 12);
      shape_0 = castTo($get_2(ge.shapeAry, 0), 6);
      this$static.markerFillColor = shape_0.fill_0.color_0;
      this$static.origMarkerFillColor = $duplicate_0(this$static.markerFillColor);
    }
  }
  return this$static.markerFillColor;
}

function $hasShowAsFilteredShapes(this$static){
  var mapComponent, mapComponent$iterator;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      if ($isShowAsFiltered(mapComponent))
        return true;
    }
  }
  return false;
}

function $setRangeTextColor(this$static, color_0, showMinAndMax){
  if (this$static.rangeNum != -1) {
    $setTextComponentColor(this$static.textMin, color_0);
    showMinAndMax && $setTextComponentColor(this$static.textMax, color_0);
  }
}

function $setShowAsFiltered(this$static, dataGrid, value_0){
  var mapComponent, mapComponent$iterator;
  this$static.showAsFiltered = value_0;
  this$static.showAsFiltered?$setValuesFromColor(this$static.markerFillColor, $deSaturateAndLighten(this$static.origMarkerFillColor, 0.9, 0.4)):!!this$static.markerFillColor && !!this$static.origMarkerFillColor && $setValuesFromColor(this$static.markerFillColor, this$static.origMarkerFillColor);
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      !!dataGrid && !!mapComponent.row && $setRowFilteredValue(dataGrid, value_0, mapComponent.row);
    }
  }
}

function $setTextComponentColor(textComp, color_0){
  var textFont, textItem;
  if (!!textComp && !!textComp.geAry && textComp.geAry.size_1() > 0 && !!castTo(textComp.geAry.get_1(0), 12).textAry && $get_2(castTo(textComp.geAry.get_1(0), 12).textAry, 0) != null) {
    textItem = castTo($get_2(castTo(textComp.geAry.get_1(0), 12).textAry, 0), 26);
    textFont = $duplicate_2(textItem.font_0);
    textFont.color_0 = color_0;
    textItem.font_0 = textFont;
  }
}

function $setToSelected(this$static, hoverGEAry, showRangeMinAndMax, map_0){
  var ge, hoverColor, hoverShape, markerShape, markerShapePath;
  $setRangeTextColor(this$static, $getTextColor(map_0.chart.palette), showRangeMinAndMax);
  ge = castTo(this$static.marker.geAry.get_1(0), 12);
  markerShape = castTo($get_2(ge.shapeAry, 0), 6);
  markerShapePath = $duplicate_3(markerShape.path);
  hoverColor = $duplicate_0(markerShape.fill_0.color_0);
  hoverColor.alpha_0 = 255;
  hoverShape = new CFShape_0(markerShapePath, new CFFill(hoverColor), markerShape.stroke_0);
  $add_1(hoverGEAry, new GraphicElement_0(hoverShape));
}

function $useCurrentColorForAllShapes(this$static){
  var mapComponent, mapComponent$iterator;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      mapComponent.overrideColor?$updateFillColor(mapComponent, mapComponent.overrideColor):$updateFillColor(mapComponent, mapComponent.origFillColor);
    }
  }
}

function $useHoverNotSelectedColorForAllShapes(this$static){
  var mapComponent, mapComponent$iterator;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      $useHoverNotSelectedColor(mapComponent);
    }
  }
}

function $useMarkerFillColorForAllShapes(this$static){
  var mapComponent, mapComponent$iterator;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      $updateFillColor(mapComponent, this$static.markerFillColor);
    }
  }
}

function $useOriginalColorForAllShapes(this$static){
  var mapComponent, mapComponent$iterator;
  if (!!this$static.shapes && this$static.shapes.array.length > 0) {
    for (mapComponent$iterator = new ArrayList$1(this$static.shapes); mapComponent$iterator.i < mapComponent$iterator.this$01.array.length;) {
      mapComponent = castTo($next_3(mapComponent$iterator), 47);
      !!mapComponent.origFillColor && $updateFillColor(mapComponent, mapComponent.origFillColor);
    }
  }
}

function MapRange(marker, num){
  Component.call(this, marker.chart, 'RNG_' + marker.name_0);
  this.shapes = new ArrayList;
  this.marker = marker;
  this.rangeNum = num;
}

defineClass(76, 23, {23:1, 76:1}, MapRange);
_.draw_1 = function draw_4(rnd){
  $draw_3(this, rnd);
}
;
_.freeResources = function freeResources_6(dataToKeep){
  $freeResources_8(this, dataToKeep);
}
;
_.setHoverData = function setHoverData_4(data_0, rnd){
  if (data_0 != null && instanceOf(data_0, 85)) {
    return castTo(data_0, 85).setHoverData(this, rnd);
  }
  return false;
}
;
_.noDataRange = false;
_.rangeNum = 0;
_.showAsFiltered = false;
var Lcom_domo_charting_base_MapRange_2_classLit = createForClass('com.domo.charting.base', 'MapRange', 76);
function $getControlPoint(p1, p2){
  var control, controlpoints, length_0, p3;
  p3 = new CFPoint((p1.x_0 + p2.x_0) / 2, (p1.y_0 + p2.y_0) / 2);
  length_0 = $wnd.Math.abs(p1.x_0 - p2.x_0) / 2;
  controlpoints = $getPerpendicularPoint(p3, p1, length_0);
  control = (checkCriticalElementIndex(0, controlpoints.array.length) , castTo(controlpoints.array[0], 10));
  (checkCriticalElementIndex(1, controlpoints.array.length) , castTo(controlpoints.array[1], 10)).y_0 < control.y_0 && (control = (checkCriticalElementIndex(1, controlpoints.array.length) , castTo(controlpoints.array[1], 10)));
  return control;
}

function $getEndPoint(rect, fill){
  var inflated, newPath, shape_0;
  inflated = new CFRect(rect.x_0, rect.y_0, rect.width_0, rect.height_0);
  $inflate(inflated, 3);
  newPath = new CFPath_0(inflated.x_0, inflated.y_0, inflated.width_0);
  newPath.shouldAntiAlias = true;
  shape_0 = new CFShape_0(newPath, fill, new CFStroke(($clinit_CFColor() , WHITE), 1.5));
  return shape_0;
}

function $getPerpendicularPoint(p1, p2, p1Size){
  var dx, dy, lineLength, points, x_0, xAdjust, y_0, yAdjust;
  dx = p1.x_0 - p2.x_0;
  dy = p1.y_0 - p2.y_0;
  lineLength = $wnd.Math.sqrt(dx * dx + dy * dy);
  xAdjust = dx;
  yAdjust = dy;
  if (lineLength != 0) {
    xAdjust = dx / lineLength;
    yAdjust = dy / lineLength;
  }
  points = new ArrayList;
  x_0 = p1.x_0 + p1Size / 2 * yAdjust;
  y_0 = p1.y_0 - p1Size / 2 * xAdjust;
  $add_1(points, new CFPoint(x_0, y_0));
  x_0 = p1.x_0 - p1Size / 2 * yAdjust;
  y_0 = p1.y_0 + p1Size / 2 * xAdjust;
  $add_1(points, new CFPoint(x_0, y_0));
  return points;
}

function $getRouteShape(this$static, addStroke){
  var color_0, path, path0, polyPath, polyShape, stroke, halfSize, halfSize2, p1, p2, points;
  if (!!this$static.bnds && !!this$static.bnds2) {
    halfSize = this$static.size_0 / 2;
    halfSize2 = this$static.size2 / 2;
    p1 = new CFPoint(this$static.bnds.x_0 + halfSize, this$static.bnds.y_0 + halfSize);
    p2 = new CFPoint(this$static.bnds2.x_0 + halfSize2, this$static.bnds2.y_0 + halfSize2);
    points = $getPerpendicularPoint(p1, p2, this$static.size_0);
    this$static.point1a = (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10));
    this$static.point1b = (checkCriticalElementIndex(1, points.array.length) , castTo(points.array[1], 10));
    points = $getPerpendicularPoint(p2, p1, this$static.size2);
    this$static.point2a = (checkCriticalElementIndex(1, points.array.length) , castTo(points.array[1], 10));
    this$static.point2b = (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10));
    this$static.useCurvedLines?(path0 = (this$static.control1 = $getControlPoint(this$static.point1b, this$static.point2b) , this$static.control2 = $getControlPoint(this$static.point1a, this$static.point2a) , 'M ' + this$static.point1a.x_0 + ' ' + this$static.point1a.y_0 + ' L ' + this$static.point1b.x_0 + ' ' + this$static.point1b.y_0 + ' Q ' + this$static.control1.x_0 + ' ' + this$static.control1.y_0 + ' ' + this$static.point2b.x_0 + ' ' + this$static.point2b.y_0 + ' L ' + this$static.point2a.x_0 + ' ' + this$static.point2a.y_0 + ' Q ' + this$static.control2.x_0 + ' ' + this$static.control2.y_0 + ' ' + this$static.point1a.x_0 + ' ' + this$static.point1a.y_0 + ' Z')):(path0 = (path = 'M ' + this$static.point1a.x_0 + ' ' + this$static.point1a.y_0 + ' L ' + this$static.point1b.x_0 + ' ' + this$static.point1b.y_0 + ' L ' + this$static.point2b.x_0 + ' ' + this$static.point2b.y_0 + ' L ' + this$static.point2a.x_0 + ' ' + this$static.point2a.y_0 + ' Z' , path));
    polyPath = new CFPath_7(path0);
    color_0 = this$static.routeColor?this$static.routeColor:this$static.fillColor;
    stroke = null;
    addStroke && (stroke = new CFStroke(this$static.fillColor, 1.5));
    polyShape = new CFShape_0(polyPath, new CFFill(color_0), stroke);
    !!polyShape.path && (polyShape.path.shouldAntiAlias = true);
    return polyShape;
  }
  return null;
}

function MapRouteComponent(name_0, bounds1, bounds2, size1, secondSize, curvedPath){
  MapPointComponent.call(this, name_0, bounds1);
  this.origBnds2 = bounds2;
  this.useCurvedLines = curvedPath;
  this.size_0 = size1;
  this.size_0 <= 0 && (this.size_0 = 4);
  this.size2 = secondSize;
  this.size2 <= 0 && (this.size2 = 4);
}

defineClass(182, 114, {23:1, 47:1, 114:1, 182:1, 93:1}, MapRouteComponent);
_.addEnlargedHoverShape = function addEnlargedHoverShape_0(hoverGE){
  var fill, routeShape;
  routeShape = $getRouteShape(this, true);
  !!routeShape && (!hoverGE.shapeAry && (hoverGE.shapeAry = new ArrayList) , $add_1(hoverGE.shapeAry, routeShape));
  fill = ($clinit_CFFill() , DOMO_BLUE_0);
  !!this.fillColor && (fill = new CFFill(new CFColor(this.fillColor.red, this.fillColor.green, this.fillColor.blue)));
  !!this.bnds && $addShape(hoverGE, $getEndPoint(this.bnds, fill));
  !!this.bnds2 && $addShape(hoverGE, $getEndPoint(this.bnds2, fill));
}
;
_.getDisplayBounds = function getDisplayBounds_0(){
  return this.displayBounds;
}
;
_.getHoverPoint = function getHoverPoint_2(){
  if (this.displayBounds)
    return new CFPoint(this.displayBounds.x_0 + this.displayBounds.width_0 / 2, this.displayBounds.y_0 + this.displayBounds.height_0 / 2);
  return new CFPoint(0, 0);
}
;
_.moveAndScale = function moveAndScale_1(newBnds, scale, fill, theStroke, viewPort){
  var ge, halfSize, newPath, newX, newY, routeShape, shape_0;
  $moveAndScale_1(this, newBnds, scale, fill, theStroke, viewPort);
  halfSize = this.size2 / 2;
  if (this.origBnds2) {
    ge = null;
    this.geAry.size_1() > 0 && (ge = castTo(this.geAry.get_1(0), 12));
    newX = newBnds.x_0 + this.origBnds2.x_0 * scale;
    newY = newBnds.y_0 + this.origBnds2.y_0 * scale;
    this.bnds2 = new CFRect(newX - halfSize, newY - halfSize, this.size2, this.size2);
    newPath = new CFPath_0(this.bnds2.x_0, this.bnds2.y_0, this.size2);
    newPath.shouldAntiAlias = true;
    !!this.fillColor && (fill = new CFFill(this.fillColor));
    this.noStroke && (theStroke = null);
    shape_0 = new CFShape_0(newPath, fill, theStroke);
    if (!ge) {
      ge = new GraphicElement;
      !!this.clipPath && !!ge && (ge.clipPath = this.clipPath);
      this.geAry.add_0(ge);
    }
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, shape_0);
    routeShape = $getRouteShape(this, false);
    !!routeShape && (!ge.shapeAry && (ge.shapeAry = new ArrayList) , $add_1(ge.shapeAry, routeShape));
  }
  if (this.bnds) {
    this.displayBounds = $extendToIncludeRect(this.bnds, this.bnds2);
    $extendToIncludePoint(this.displayBounds, this.control1);
    $extendToIncludePoint(this.displayBounds, this.control2);
    $intersects(this.displayBounds, viewPort) || clearGraphicElementArray(this.geAry);
  }
}
;
_.size2 = 0;
_.useCurvedLines = false;
var Lcom_domo_charting_base_MapRouteComponent_2_classLit = createForClass('com.domo.charting.base', 'MapRouteComponent', 182);
function DoubleToStr(n, numFmt){
  var result;
  if (numFmt.use3Sig && !numFmt.alwaysShowDecimalPlaces) {
    numFmt.use3Sig = false;
    result = DoubleToStr_0(n, numFmt, null, 1);
    if (result != null && (result.length < 4 || result.length == 4 && $indexOf(result, fromCodePoint(numFmt.decimalChar)) != -1)) {
      numFmt.use3Sig = true;
      return result;
    }
    numFmt.use3Sig = true;
  }
  return DoubleToStr_0(n, numFmt, null, 1);
}

function DoubleToStr_0(n, numFmt, abbChar, abbFactor){
  var Show, Str, Str2, addNegativeParens, alwaysShowDecimalPlaces, bigNumber, c, isNegative, ln, nn, tempDecimalPlaces, tmpVal;
  abbChar != null && abbChar.length > 0 && (n = n / abbFactor);
  bigNumber = false;
  tempDecimalPlaces = numFmt.decimalPlaces;
  alwaysShowDecimalPlaces = numFmt.alwaysShowDecimalPlaces;
  isNegative = false;
  if (n < 0) {
    isNegative = true;
    n = -n;
  }
  if (numFmt.use3Sig) {
    if (n < 1) {
      tmpVal = toDouble_0(fromDouble_0($wnd.Math.round(n * $wnd.Math.pow(10, 3)))) * $wnd.Math.pow(10, -3);
      tmpVal < $wnd.Math.pow(10, -2) && (n = 0);
    }
    tempDecimalPlaces = getDecimalPlacesToShowFromSignificantDigits(n, 3, true);
    alwaysShowDecimalPlaces = true;
  }
  nn = 0.5000000001 / $wnd.Math.pow(10, tempDecimalPlaces);
  n += nn;
  if (n >= 1000000) {
    Str = '' + toString_23(fromDouble_0(n));
    bigNumber = true;
  }
   else {
    Str = GetNumberString(n);
  }
  numFmt.useThousandSep && (Str = addThousandSeparators(Str));
  if (tempDecimalPlaces > 0) {
    bigNumber && (n -= nn);
    n = n - toDouble_0(fromDouble_0(n));
    bigNumber && (n += nn);
    n < 0 && (n = -n);
    nn = $wnd.Math.pow(10, tempDecimalPlaces);
    n = n * nn + nn;
    Str2 = GetNumberString(n);
    Str2 = $substring_0(Str2, 1, Str2.length);
    Show = true;
    if (!alwaysShowDecimalPlaces && Str2.length > 0) {
      do {
        ln = Str2.length - 1;
        c = Str2.charCodeAt(ln);
        c == 48 && (ln == 0?(Show = false):(Str2 = Str2.substr(0, ln)));
      }
       while (c == 48 && Show);
    }
    Show && (Str = $concat((checkCriticalNotNull(Str) , Str + (checkCriticalNotNull('.') , '.')), Str2));
  }
  abbChar != null && (Str += '' + abbChar);
  numFmt.type_0 == 1 && numFmt.currencyBefore && (Str = $concat(numFmt.currencyStr, Str));
  addNegativeParens = false;
  isNegative && numFmt.negativeType != 2 && !$equals_2(Str, '0') && (numFmt.negativeType == 1?(addNegativeParens = true):(Str = (checkCriticalNotNull('-') , checkCriticalNotNull(Str) , '-' + Str)));
  numFmt.type_0 == 2 && (Str = (checkCriticalNotNull(Str) , Str + (checkCriticalNotNull('%') , '%')));
  numFmt.type_0 == 1 && !numFmt.currencyBefore && (Str = $concat(Str, numFmt.currencyStr));
  if (addNegativeParens) {
    Str = (checkCriticalNotNull('(') , checkCriticalNotNull(Str) , '(' + Str);
    Str = (checkCriticalNotNull(Str) , Str + (checkCriticalNotNull(')') , ')'));
  }
  if (numFmt.thousandChar != 44 || numFmt.decimalChar != 46) {
    Str = $replace(Str, 46, 60);
    Str = $replace(Str, 44, numFmt.thousandChar);
    Str = $replace(Str, 60, numFmt.decimalChar);
  }
  return Str;
}

function GetNumberString(n){
  var Str, i;
  Str = '' + (n > 0?$wnd.Math.floor(n):$wnd.Math.ceil(n));
  i = $lastIndexOf(Str, fromCodePoint(46));
  i != -1 && (Str = Str.substr(0, i));
  return Str;
}

function NumFormat(decimalCharacter, thousandCharacter, currencyString, decimalPlaces, currencyBefore, alwaysShowDecimalPlaces, useThousandSeparator, numberType, negativeType, use3SignificantDigits){
  this.decimalChar = decimalCharacter;
  this.thousandChar = thousandCharacter;
  this.currencyStr = currencyString;
  this.decimalPlaces = decimalPlaces;
  this.currencyBefore = currencyBefore;
  this.alwaysShowDecimalPlaces = alwaysShowDecimalPlaces;
  this.useThousandSep = useThousandSeparator;
  this.type_0 = numberType;
  this.negativeType = negativeType;
  this.use3Sig = use3SignificantDigits;
}

function addThousandSeparators(str){
  var Str2, sl, so1, so2, soo;
  Str2 = '';
  sl = str.length;
  if (sl > 3) {
    so1 = 0;
    so2 = sl - (sl / 3 | 0) * 3;
    so2 == 0 && (so2 = 3);
    soo = so2;
    sl = sl - so2;
    while (sl >= 3) {
      Str2 = $concat(Str2, str.substr(so1, so2 - so1));
      Str2 = (checkCriticalNotNull(Str2) , Str2 + (checkCriticalNotNull(',') , ','));
      so1 += soo;
      so2 = so1 + 3;
      sl -= 3;
      soo = 3;
    }
    str = $concat(Str2, str.substr(so1, so2 - so1));
  }
  return str;
}

function getDecimalPlacesToShowFromSignificantDigits(n, significantDigits, firstCall){
  var afterRound, decimalPos, nn, result, valStr;
  valStr = '' + n;
  decimalPos = valStr.indexOf('.');
  if (decimalPos == -1 && valStr.length < significantDigits)
    result = significantDigits - valStr.length;
  else if (decimalPos != -1 && decimalPos < significantDigits) {
    if (firstCall) {
      nn = 0.5 / $wnd.Math.pow(10, significantDigits - decimalPos);
      n += nn;
      afterRound = getDecimalPlacesToShowFromSignificantDigits(n, significantDigits, false);
      if (afterRound != significantDigits - decimalPos)
        return afterRound;
    }
    result = significantDigits - decimalPos;
  }
   else 
    result = 0;
  return result;
}

defineClass(352, 1, {}, NumFormat);
_.alwaysShowDecimalPlaces = false;
_.currencyBefore = true;
_.currencyStr = '$';
_.decimalChar = 46;
_.decimalPlaces = 2;
_.negativeType = 0;
_.thousandChar = 44;
_.type_0 = 0;
_.use3Sig = false;
_.useThousandSep = true;
var Lcom_domo_charting_base_NumFormat_2_classLit = createForClass('com.domo.charting.base', 'NumFormat', 352);
function $clinit_NumberFormatter(){
  $clinit_NumberFormatter = emptyMethod;
  namedAbbreviations = getAbbreviations(null);
}

function $$init_2(this$static){
  this$static.abbreviations = getAbbreviations(null);
}

function $applyAbbreviationsFromOtherNumberFormatter(this$static, other){
  this$static.autoAbbreviate = other.autoAbbreviate;
  this$static.manualAbbreviation = other.manualAbbreviation;
  this$static.multiplyBy100 = other.multiplyBy100;
  this$static.needsNewNumFormat = true;
}

function $applyColumnFormat(this$static, numFormat){
  var afterDecimal, commas, currency, format, multiplied, precision, type_0;
  if (numFormat) {
    commas = castToString(numFormat.get_0('commas'));
    commas != null && $equals_2(commas.toLowerCase(), 'false') && (this$static.useThousandSeparator = false);
    precision = castToString(numFormat.get_0('precision'));
    format = castToString(numFormat.get_0('format'));
    if (precision != null) {
      afterDecimal = __parseAndValidateInt(precision, 10);
      this$static.decimalPlaces = afterDecimal;
      afterDecimal > 0 && (this$static.alwaysShowDecimalPlaces = true);
    }
     else if (format != null) {
      afterDecimal = 0;
      $indexOf(format, fromCodePoint(46)) != -1 && (afterDecimal = $getNumberOfDecimalPlaces($substring(format, $indexOf(format, fromCodePoint(46)))));
      this$static.decimalPlaces = afterDecimal;
      afterDecimal > 0 && (this$static.alwaysShowDecimalPlaces = true);
    }
    type_0 = castToString(numFormat.get_0('type'));
    if (type_0 != null && $equals_2(type_0.toLowerCase(), 'currency')) {
      currency = castToString(numFormat.get_0('currency'));
      currency != null && (this$static.currencyString = currency);
      this$static.numberType = 1;
    }
     else if (type_0 != null && $startsWith(type_0.toLowerCase(), 'percent')) {
      this$static.numberType = 2;
      multiplied = castToString(numFormat.get_0('percentMultiplied'));
      (multiplied == null || $equals_2(multiplied, 'true')) && (this$static.multiplyBy100 = true);
    }
  }
}

function $applyCurrencyPosition(this$static, position){
  if (position != null && position.length > 0) {
    this$static.currencyBefore = true;
    $equals_2('after', position.toLowerCase()) && (this$static.currencyBefore = false);
    this$static.needsNewNumFormat = true;
  }
}

function $applyCurrencySymbol(this$static, symbol){
  if (symbol != null && symbol.length > 0) {
    this$static.currencyString = ($clinit_StrUtil() , entityDecodeString(symbol));
    this$static.needsNewNumFormat = true;
  }
}

function $applyDecimalPlaces(this$static, afterDecimal){
  var charsAfterDecimal;
  if (afterDecimal != null) {
    charsAfterDecimal = $getNumberOfDecimalPlaces(afterDecimal);
    if (charsAfterDecimal != this$static.decimalPlaces) {
      this$static.decimalPlaces = charsAfterDecimal;
      this$static.needsNewNumFormat = true;
    }
    if (charsAfterDecimal > 0) {
      this$static.alwaysShowDecimalPlaces = true;
      this$static.needsNewNumFormat = true;
    }
  }
}

function $applyDecimalSeparator(this$static, separator){
  if (separator != null && separator.length > 0) {
    this$static.decimalChar = ($clinit_StrUtil() , entityDecodeString(separator)).charCodeAt(0);
    this$static.needsNewNumFormat = true;
  }
}

function $applyFormatFromOtherNumberFormatter(this$static, other){
  this$static.numberType = other.numberType;
  this$static.multiplyBy100 = other.multiplyBy100;
  this$static.decimalPlaces = other.decimalPlaces;
  this$static.alwaysShowDecimalPlaces = other.alwaysShowDecimalPlaces;
  this$static.useThousandSeparator = other.useThousandSeparator;
  this$static.currencyBefore = other.currencyBefore;
  this$static.currencyString = other.currencyString;
  this$static.needsNewNumFormat = true;
}

function $applyNegativeFormat(this$static, format){
  this$static.negativeType = 0;
  format != null && $equals_2(format.substr(0, 1), '(') && (this$static.negativeType = 1);
  this$static.needsNewNumFormat = true;
}

function $applyOverrides(this$static, overrides){
  var afterDecimal, currencyPosition, currencySymbol, separator, thousands, type_0;
  if (overrides) {
    type_0 = getObjectFromMapAsString(overrides, 'value_format');
    $applyValueFormatOverride(this$static, type_0);
    afterDecimal = getObjectFromMapAsString(overrides, 'val_decimal_places');
    $applyDecimalPlaces(this$static, afterDecimal);
    separator = getObjectFromMapAsString(overrides, 'decimal_separator');
    $applyDecimalSeparator(this$static, separator);
    currencySymbol = getObjectFromMapAsString(overrides, 'currency_symbol');
    $applyCurrencySymbol(this$static, currencySymbol);
    currencyPosition = getObjectFromMapAsString(overrides, 'currency_sym_position');
    $applyCurrencyPosition(this$static, currencyPosition);
    thousands = getObjectFromMapAsString(overrides, 'thousands_separator');
    $applyThousandsSeparator(this$static, thousands);
  }
}

function $applyPercentDecimalPlaces(this$static, afterDecimal){
  var charsAfterDecimal;
  if (afterDecimal != null) {
    charsAfterDecimal = $getNumberOfDecimalPlaces(afterDecimal);
    if (charsAfterDecimal != this$static.percentDecimalPlaces) {
      this$static.percentDecimalPlaces = charsAfterDecimal;
      this$static.alwaysShowPercentDecimalPlaces = true;
      this$static.usePercentDecimalPlaces = true;
      this$static.needsNewNumFormat = true;
    }
    if (charsAfterDecimal > 0) {
      this$static.alwaysShowPercentDecimalPlaces = true;
      this$static.usePercentDecimalPlaces = true;
      this$static.needsNewNumFormat = true;
    }
  }
}

function $applyThousandsSeparator(this$static, separator){
  if (separator != null && separator.length > 0) {
    this$static.thousandChar = ($clinit_StrUtil() , entityDecodeString(separator)).charCodeAt(0);
    this$static.needsNewNumFormat = true;
  }
}

function $applyUseNegativeWithParens(this$static){
  this$static.negativeType = 1;
  this$static.needsNewNumFormat = true;
}

function $applyValueFormatOverride(this$static, type_0){
  if (type_0 != null && type_0.length > 0) {
    this$static.numberType = 0;
    $equals_2(type_0.toLowerCase(), 'currency')?(this$static.numberType = 1):$startsWith(type_0.toLowerCase(), 'percent') && (this$static.numberType = 2);
    this$static.needsNewNumFormat = true;
  }
}

function $formatNumber_1(this$static, theValue){
  var abbreviation, formatVal, decimalPrecision;
  formatVal = null;
  if (isNaN(theValue))
    return '';
  this$static.needsNewNumFormat && (decimalPrecision = this$static.decimalPlaces , this$static.numberType == 2 && this$static.usePercentDecimalPlaces && (decimalPrecision = this$static.percentDecimalPlaces) , decimalPrecision > 6 && (decimalPrecision = 6) , this$static.decimalFormat = new NumFormat(this$static.decimalChar, this$static.thousandChar, this$static.currencyString, decimalPrecision, this$static.currencyBefore, this$static.alwaysShowDecimalPlaces, this$static.useThousandSeparator, this$static.numberType, this$static.negativeType, this$static.autoAbbreviate3digit) , this$static.needsNewNumFormat = false , undefined);
  this$static.multiplyBy100 && (theValue *= 100);
  if (this$static.autoAbbreviate || this$static.autoAbbreviate3digit) {
    abbreviation = $getAutoAbbrev(this$static, theValue);
    !!abbreviation && (formatVal = DoubleToStr_0(theValue, this$static.decimalFormat, abbreviation.abbr_0, abbreviation.value_0));
  }
   else 
    !!this$static.manualAbbreviation && (formatVal = DoubleToStr_0(theValue, this$static.decimalFormat, this$static.manualAbbreviation.abbr_0, this$static.manualAbbreviation.value_0));
  formatVal == null && (formatVal = DoubleToStr(theValue, this$static.decimalFormat));
  return formatVal;
}

function $formatPercentNumber(this$static, theValue, multiplyBy100){
  var oldAlwaysShowDecimalPlaces, oldMultiplyBy100, oldNumType, oldUsePercentDecimalPlaces, result;
  if (this$static.numberType != 2) {
    oldNumType = this$static.numberType;
    oldMultiplyBy100 = this$static.multiplyBy100;
    oldAlwaysShowDecimalPlaces = this$static.alwaysShowDecimalPlaces;
    oldUsePercentDecimalPlaces = this$static.usePercentDecimalPlaces;
    this$static.alwaysShowDecimalPlaces = this$static.alwaysShowPercentDecimalPlaces;
    this$static.usePercentDecimalPlaces = true;
    this$static.numberType = 2;
    this$static.multiplyBy100 = multiplyBy100;
    this$static.needsNewNumFormat = true;
    result = $formatNumber_1(this$static, theValue);
    this$static.numberType = oldNumType;
    this$static.multiplyBy100 = oldMultiplyBy100;
    this$static.alwaysShowDecimalPlaces = oldAlwaysShowDecimalPlaces;
    this$static.usePercentDecimalPlaces = oldUsePercentDecimalPlaces;
    this$static.needsNewNumFormat = true;
    return result;
  }
   else {
    oldMultiplyBy100 = this$static.multiplyBy100;
    oldAlwaysShowDecimalPlaces = this$static.alwaysShowDecimalPlaces;
    this$static.multiplyBy100 = multiplyBy100;
    this$static.alwaysShowPercentDecimalPlaces && (this$static.alwaysShowDecimalPlaces = true);
    this$static.needsNewNumFormat = true;
    result = $formatNumber_1(this$static, theValue);
    this$static.multiplyBy100 = oldMultiplyBy100;
    this$static.alwaysShowDecimalPlaces = oldAlwaysShowDecimalPlaces;
    this$static.needsNewNumFormat = true;
    return result;
  }
}

function $getAutoAbbrev(this$static, number){
  var i;
  if (this$static.abbreviations != null) {
    number > 0?(number += 0.5):(number -= 0.5);
    for (i = this$static.abbreviations.length - 1; i >= 0; i--) {
      if (number >= this$static.abbreviations[i].value_0 || number <= -this$static.abbreviations[i].value_0)
        return this$static.abbreviations[i];
    }
  }
  return null;
}

function $getCopyOfAbbreviations(this$static){
  var i, newList;
  if (this$static.abbreviations == null)
    return null;
  newList = initUnidimensionalArray(Lcom_domo_charting_locales_Abbreviation_2_classLit, $intern_9, 159, this$static.abbreviations.length, 0, 1);
  for (i = 0; i < this$static.abbreviations.length; i++)
    newList[i] = new Abbreviation(this$static.abbreviations[i]);
  return newList;
}

function $getNumberOfDecimalPlaces(afterDecimal){
  var charsAfterDecimal;
  charsAfterDecimal = 0;
  afterDecimal != null && $equals_2(afterDecimal.substr(0, 1), '.') && (charsAfterDecimal = afterDecimal.length - 1);
  return charsAfterDecimal;
}

function $setAlwaysShowDecimalPlaces(this$static, value_0){
  this$static.alwaysShowDecimalPlaces = value_0;
  this$static.needsNewNumFormat = true;
}

function $setAutoAbbreviateState(this$static, newState){
  this$static.autoAbbreviate = newState;
  this$static.needsNewNumFormat = true;
}

function $setDecimalPlaces(this$static, newDecimalPlaces){
  this$static.decimalPlaces = newDecimalPlaces;
  this$static.needsNewNumFormat = true;
}

function $setDivideScaleBy(this$static, divideScaleBy, forHover){
  var abbreviation, abbreviation$array, abbreviation$array0, abbreviation$index, abbreviation$index0, abbreviation$max, abbreviation$max0;
  if (divideScaleBy == null)
    return;
  divideScaleBy = divideScaleBy.toLowerCase();
  if ($equals_2(divideScaleBy, 'percentage')) {
    this$static.multiplyBy100 = true;
    forHover && (this$static.numberType = 2);
  }
   else if ($equals_2(divideScaleBy, 'none')) {
    this$static.autoAbbreviate = false;
    this$static.manualAbbreviation = null;
  }
   else {
    for (abbreviation$array0 = this$static.abbreviations , abbreviation$index0 = 0 , abbreviation$max0 = abbreviation$array0.length; abbreviation$index0 < abbreviation$max0; ++abbreviation$index0) {
      abbreviation = abbreviation$array0[abbreviation$index0];
      if ($equals_2(abbreviation.name_0, divideScaleBy)) {
        this$static.manualAbbreviation = abbreviation;
        this$static.autoAbbreviate = false;
        return;
      }
    }
    for (abbreviation$array = namedAbbreviations , abbreviation$index = 0 , abbreviation$max = abbreviation$array.length; abbreviation$index < abbreviation$max; ++abbreviation$index) {
      abbreviation = abbreviation$array[abbreviation$index];
      if ($equals_2(abbreviation.name_0, divideScaleBy)) {
        this$static.manualAbbreviation = abbreviation;
        this$static.autoAbbreviate = false;
        return;
      }
    }
  }
  this$static.needsNewNumFormat = true;
}

function $setMultiplyBy100(this$static, newState){
  this$static.multiplyBy100 = newState;
  this$static.needsNewNumFormat = true;
}

function $setUse3digitFormat(this$static){
  this$static.autoAbbreviate3digit = true;
  this$static.needsNewNumFormat = true;
}

function $setUseThousandSeparator(this$static){
  this$static.useThousandSeparator = false;
  this$static.needsNewNumFormat = true;
}

function NumberFormatter(){
  $clinit_NumberFormatter();
  $$init_2(this);
}

function NumberFormatter_0(base){
  $clinit_NumberFormatter();
  $$init_2(this);
  if (base) {
    this.multiplyBy100 = base.multiplyBy100;
    this.decimalChar = base.decimalChar;
    this.alwaysShowDecimalPlaces = base.alwaysShowDecimalPlaces;
    this.thousandChar = base.thousandChar;
    this.useThousandSeparator = base.useThousandSeparator;
    this.currencyString = base.currencyString;
    this.decimalPlaces = base.decimalPlaces;
    this.percentDecimalPlaces = base.percentDecimalPlaces;
    this.usePercentDecimalPlaces = base.usePercentDecimalPlaces;
    this.alwaysShowPercentDecimalPlaces = base.alwaysShowPercentDecimalPlaces;
    this.currencyBefore = base.currencyBefore;
    this.numberType = base.numberType;
    this.negativeType = base.negativeType;
    this.abbreviations = $getCopyOfAbbreviations(base);
    this.autoAbbreviate = base.autoAbbreviate;
    this.autoAbbreviate3digit = base.autoAbbreviate3digit;
    this.manualAbbreviation = base.manualAbbreviation;
  }
}

function NumberFormatter_1(locale){
  var stringsForLanguage, list;
  $clinit_NumberFormatter();
  $$init_2(this);
  this.currencyString = getString('CURRENCYSYMBOL', locale);
  this.thousandChar = getString('THOUSANDSSEP', locale).charCodeAt(0);
  this.decimalChar = getString('DECIMALCHAR', locale).charCodeAt(0);
  this.abbreviations = getAbbreviations(locale);
  namedAbbreviations = ($clinit_Localized() , stringsForLanguage = getStringsForLanguage(locale) , list = castToString(stringsForLanguage.get_0('NAMED_ABBREVIATIONS')) , getAbbreviationList(null, list));
}

defineClass(52, 1, {}, NumberFormatter, NumberFormatter_0, NumberFormatter_1);
_.alwaysShowDecimalPlaces = false;
_.alwaysShowPercentDecimalPlaces = false;
_.autoAbbreviate = true;
_.autoAbbreviate3digit = false;
_.currencyBefore = true;
_.currencyString = '$';
_.decimalChar = 46;
_.decimalPlaces = 2;
_.multiplyBy100 = false;
_.needsNewNumFormat = true;
_.negativeType = 0;
_.numberType = 0;
_.percentDecimalPlaces = 2;
_.thousandChar = 44;
_.usePercentDecimalPlaces = false;
_.useThousandSeparator = true;
var namedAbbreviations;
var Lcom_domo_charting_base_NumberFormatter_2_classLit = createForClass('com.domo.charting.base', 'NumberFormatter', 52);
function $$init_3(this$static){
  this$static.stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_17, 127, 0, 0, 1);
}

function $constructJavaStackTrace(this$static){
  var stackTrace;
  return $clinit_StackTraceCreator() , stackTrace = collector.getStackTrace(this$static) , dropInternalFrames(stackTrace);
}

function $fillInStackTrace(this$static){
  if (this$static.writetableStackTrace) {
    this$static.backingJsObject !== '__noinit__' && this$static.initializeBackingError();
    this$static.stackTrace = null;
  }
  return this$static;
}

function $printStackTraceImpl(this$static, out, prefix, ident){
  var t, t$array, t$index, t$max, theCause;
  out.println(ident + prefix + this$static);
  $printStackTraceItems(this$static, out, ident);
  for (t$array = (this$static.suppressedExceptions == null && (this$static.suppressedExceptions = initUnidimensionalArray(Ljava_lang_Throwable_2_classLit, $intern_17, 57, 0, 0, 1)) , this$static.suppressedExceptions) , t$index = 0 , t$max = t$array.length; t$index < t$max; ++t$index) {
    t = t$array[t$index];
    $printStackTraceImpl(t, out, 'Suppressed: ', '\t' + ident);
  }
  theCause = this$static.getCause();
  !!theCause && $printStackTraceImpl(theCause, out, 'Caused by: ', ident);
}

function $printStackTraceItems(this$static, out, ident){
  var element, element$array, element$index, element$max;
  for (element$array = (this$static.stackTrace == null && (this$static.stackTrace = $constructJavaStackTrace(this$static)) , this$static.stackTrace) , element$index = 0 , element$max = element$array.length; element$index < element$max; ++element$index) {
    element = element$array[element$index];
    out.println(ident + '\tat ' + element);
  }
}

function $setBackingJsObject(this$static, backingJsObject){
  this$static.backingJsObject = backingJsObject;
  backingJsObject != null && setPropertySafe(backingJsObject, '__java$exception', this$static);
}

function $toString(this$static, message){
  var className;
  className = $getName_1(this$static.___clazz);
  return message == null?className:className + ': ' + message;
}

function fixIE(e){
  if (!('stack' in e)) {
    try {
      throw e;
    }
     catch (ignored) {
    }
  }
  return e;
}

defineClass(57, 1, $intern_22);
_.createError = function createError(msg){
  return new $wnd.Error(msg);
}
;
_.getCause = function getCause(){
  return this.cause_0;
}
;
_.getMessage = function getMessage(){
  return this.detailMessage;
}
;
_.initializeBackingError = function initializeBackingError(){
  var className, errorMessage, message;
  message = this.detailMessage == null?null:this.detailMessage.replace(new $wnd.RegExp('\n', 'g'), ' ');
  errorMessage = (className = $getName_1(this.___clazz) , message == null?className:className + ': ' + message);
  $setBackingJsObject(this, fixIE(this.createError(errorMessage)));
  captureStackTrace(this);
}
;
_.toString_0 = function toString_4(){
  return $toString(this, this.getMessage());
}
;
_.backingJsObject = '__noinit__';
_.writetableStackTrace = true;
var Ljava_lang_Throwable_2_classLit = createForClass('java.lang', 'Throwable', 57);
function Exception(){
  $$init_3(this);
  $fillInStackTrace(this);
  this.initializeBackingError();
}

function Exception_0(message){
  $$init_3(this);
  this.detailMessage = message;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

defineClass(38, 57, $intern_23);
var Ljava_lang_Exception_2_classLit = createForClass('java.lang', 'Exception', 38);
function PacketTooBigException(reason){
  Exception.call(this);
  this.reason = reason;
}

defineClass(171, 38, {171:1, 8:1, 38:1, 57:1}, PacketTooBigException);
_.toString_0 = function toString_5(){
  return this.reason + ' : ' + $toString(this, this.detailMessage);
}
;
var Lcom_domo_charting_base_PacketTooBigException_2_classLit = createForClass('com.domo.charting.base', 'PacketTooBigException', 171);
function $getBackgroundColor(this$static){
  if (!this$static.backgroundColor)
    return $clinit_CFColor() , WHITE;
  return this$static.backgroundColor;
}

function $getColorAryForNumSeries(this$static, numSeries, colorRangeList){
  var colorList, colorRange, colorRange$iterator;
  colorList = null;
  for (colorRange$iterator = new ArrayList$1(colorRangeList); colorRange$iterator.i < colorRange$iterator.this$01.array.length;) {
    colorRange = castTo($next_3(colorRange$iterator), 164);
    if (numSeries >= colorRange.min_0 && numSeries <= colorRange.max_0) {
      colorList = colorRange.colors;
      break;
    }
  }
  !colorList && colorRangeList == this$static.colorRanges && (colorList = castTo($get_2(colorRangeList, colorRangeList.array.length - 1), 164).colors);
  colorList?(colorList = new ArrayList_1(colorList)):(colorList = new ArrayList);
  return colorList;
}

function $getColorForRowCol(this$static, row, col){
  if (row >= 0 && row < this$static.colorTable.array.length && $get_2(this$static.colorTable, row) != null && col >= 0 && col < castTo($get_2(this$static.colorTable, row), 42).size_1())
    return castTo(castTo($get_2(this$static.colorTable, row), 42).get_1(col), 15);
  return $clinit_CFColor() , BLACK;
}

function $getRangeColorsForName_0(this$static, rangeClrName){
  var color_0, color$iterator, colors, copy, gradIndex, gradVals;
  gradIndex = 0;
  gradVals = $split(rangeClrName, '-', 0);
  if (gradVals.length > 1) {
    gradIndex = getInt(gradVals[1], -1);
    if (gradIndex != -1 && gradIndex >= 1) {
      --gradIndex;
      gradIndex >= this$static.gradients.array.length && (gradIndex = 0);
    }
  }
  colors = castTo($get_2(this$static.gradients, gradIndex), 42);
  copy = new ArrayList;
  for (color$iterator = colors.iterator(); color$iterator.hasNext_0();) {
    color_0 = castTo(color$iterator.next_1(), 15);
    $add_1(copy, new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0));
  }
  return copy;
}

function $getScaleLineColor(this$static){
  if (!this$static.scaleLineColor)
    return new CFColor_2('D3D3D2');
  return this$static.scaleLineColor;
}

function $getTextColor(this$static){
  if (!this$static.textColor)
    return $clinit_CFColor() , TEXT_DARK_GRAY;
  return this$static.textColor;
}

function Palette(){
  this.colorTable = new ArrayList;
  this.gradients = new ArrayList;
  this.lineColors = new ArrayList;
  this.latLongMapColors = new ArrayList;
  this.popVarColors = new ArrayList;
  this.popVarLineColors = new ArrayList;
  this.popColors = new ArrayList;
  this.popLineColors = new ArrayList;
  this.selectorColors = new ArrayList;
  this.nameToColorMap = new HashMap;
  this.colorRanges = new ArrayList;
}

defineClass(295, 1, {}, Palette);
_.backgroundColor = null;
_.scaleLineColor = null;
_.textColor = null;
var Lcom_domo_charting_base_Palette_2_classLit = createForClass('com.domo.charting.base', 'Palette', 295);
function $clinit_StrUtil(){
  $clinit_StrUtil = emptyMethod;
  var i;
  ampEntities = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['Aacute', '&#193;', 'aacute', '&#225;', 'Acirc', '&#194;', 'acirc', '&#226;', 'acute', '&#180;', 'AElig', '&#198;', 'aelig', '&#230;', 'Agrave', '&#192;', 'agrave', '&#224;', 'alefsym', '&#8501;', 'Alpha', '&#913;', 'alpha', '&#945;', 'AMP', '&#38;', 'amp', '&#38;', 'and', '&#8743;', 'ang', '&#8736;', 'apos', '&#39;', 'Aring', '&#197;', 'aring', '&#229;', 'asymp', '&#8776;', 'Atilde', '&#195;', 'atilde', '&#227;', 'Auml', '&#196;', 'auml', '&#228;', 'bdquo', '&#8222;', 'Beta', '&#914;', 'beta', '&#946;', 'brvbar', '&#166;', 'bull', '&#8226;', 'cap', '&#8745;', 'Ccedil', '&#199;', 'ccedil', '&#231;', 'cedil', '&#184;', 'cent', '&#162;', 'Chi', '&#935;', 'chi', '&#967;', 'circ', '&#710;', 'clubs', '&#9827;', 'cong', '&#8773;', 'copy', '&#169;', 'crarr', '&#8629;', 'cup', '&#8746;', 'curren', '&#164;', 'dagger', '&#8224;', 'Dagger', '&#8225;', 'darr', '&#8595;', 'dArr', '&#8659;', 'deg', '&#176;', 'Delta', '&#916;', 'delta', '&#948;', 'diams', '&#9830;', 'divide', '&#247;', 'Eacute', '&#201;', 'eacute', '&#233;', 'Ecirc', '&#202;', 'ecirc', '&#234;', 'Egrave', '&#200;', 'egrave', '&#232;', 'empty', '&#8709;', 'emsp', '&#8195;', 'ensp', '&#8194;', 'Epsilon', '&#917;', 'epsilon', '&#949;', 'equiv', '&#8801;', 'Eta', '&#919;', 'eta', '&#951;', 'ETH', '&#208;', 'eth', '&#240;', 'Euml', '&#203;', 'euml', '&#235;', 'euro', '&#8364;', 'exist', '&#8707;', 'fnof', '&#402;', 'forall', '&#8704;', 'frac12', '&#189;', 'frac14', '&#188;', 'frac34', '&#190;', 'frasl', '&#8260;', 'Gamma', '&#915;', 'gamma', '&#947;', 'ge', '&#8805;', 'gt', '&#62;', 'GT', '&#62;', 'harr', '&#8596;', 'hArr', '&#8660;', 'hearts', '&#9829;', 'hellip', '&#8230;', 'Iacute', '&#205;', 'iacute', '&#237;', 'Icirc', '&#206;', 'icirc', '&#238;', 'iexcl', '&#161;', 'Igrave', '&#204;', 'igrave', '&#236;', 'image', '&#8465;', 'infin', '&#8734;', 'int', '&#8747;', 'Iota', '&#921;', 'iota', '&#953;', 'iquest', '&#191;', 'isin', '&#8712;', 'Iuml', '&#207;', 'iuml', '&#239;', 'Kappa', '&#922;', 'kappa', '&#954;', 'Lambda', '&#923;', 'lambda', '&#955;', 'lang', '&#9001;', 'laquo', '&#171;', 'larr', '&#8592;', 'lArr', '&#8656;', 'lceil', '&#8968;', 'ldquo', '&#8220;', 'le', '&#8804;', 'lfloor', '&#8970;', 'lowast', '&#8727;', 'loz', '&#9674;', 'lrm', '&#8206;', 'lsaquo', '&#8249;', 'lsquo', '&#8216;', 'lt', '&#60;', 'LT', '&#60;', 'macr', '&#175;', 'mdash', '&#8212;', 'micro', '&#181;', 'middot', '&#183;', 'minus', '&#8722;', 'Mu', '&#924;', 'mu', '&#956;', 'nabla', '&#8711;', 'nbsp', '&#32;', 'NBSP', '&#32;', 'ndash', '&#8211;', 'ne', '&#8800;', 'ni', '&#8715;', 'not', '&#172;', 'notin', '&#8713;', 'nsub', '&#8836;', 'Ntilde', '&#209;', 'ntilde', '&#241;', 'Nu', '&#925;', 'nu', '&#957;', 'Oacute', '&#211;', 'oacute', '&#243;', 'Ocirc', '&#212;', 'ocirc', '&#244;', 'OElig', '&#338;', 'oelig', '&#339;', 'Ograve', '&#210;', 'ograve', '&#242;', 'oline', '&#8254;', 'Omega', '&#937;', 'omega', '&#969;', 'Omicron', '&#927;', 'omicron', '&#959;', 'oplus', '&#8853;', 'or', '&#8744;', 'ordf', '&#170;', 'ordm', '&#186;', 'Oslash', '&#216;', 'oslash', '&#248;', 'Otilde', '&#213;', 'otilde', '&#245;', 'otimes', '&#8855;', 'Ouml', '&#214;', 'ouml', '&#246;', 'para', '&#182;', 'part', '&#8706;', 'permil', '&#8240;', 'perp', '&#8869;', 'Phi', '&#934;', 'phi', '&#966;', 'Pi', '&#928;', 'pi', '&#960;', 'piv', '&#982;', 'plusmn', '&#177;', 'pound', '&#163;', 'prime', '&#8242;', 'Prime', '&#8243;', 'prod', '&#8719;', 'prop', '&#8733;', 'Psi', '&#936;', 'psi', '&#968;', 'quot', '&#34;', 'QUOT', '&#34;', 'radic', '&#8730;', 'rang', '&#9002;', 'raquo', '&#187;', 'rarr', '&#8594;', 'rArr', '&#8658;', 'rceil', '&#8969;', 'rdquo', '&#8221;', 'real', '&#8476;', 'reg', '&#174;', 'rfloor', '&#8971;', 'Rho', '&#929;', 'rho', '&#961;', 'rlm', '&#8207;', 'rsaquo', '&#8250;', 'rsquo', '&#8217;', 'sbquo', '&#8218;', 'Scaron', '&#352;', 'scaron', '&#353;', 'sdot', '&#8901;', 'sect', '&#167;', 'shy', '&#173;', 'Sigma', '&#931;', 'sigma', '&#963;', 'sigmaf', '&#962;', 'sim', '&#8764;', 'spades', '&#9824;', 'sub', '&#8834;', 'sube', '&#8838;', 'sum', '&#8721;', 'sup', '&#8835;', 'sup1', '&#185;', 'sup2', '&#178;', 'sup3', '&#179;', 'supe', '&#8839;', 'szlig', '&#223;', 'Tau', '&#932;', 'tau', '&#964;', 'there4', '&#8756;', 'Theta', '&#920;', 'theta', '&#952;', 'thetasym', '&#977;', 'thinsp', '&#8201;', 'THORN', '&#222;', 'thorn', '&#254;', 'tilde', '&#732;', 'times', '&#215;', 'trade', '&#8482;', 'Uacute', '&#218;', 'uacute', '&#250;', 'uarr', '&#8593;', 'uArr', '&#8657;', 'Ucirc', '&#219;', 'ucirc', '&#251;', 'Ugrave', '&#217;', 'ugrave', '&#249;', 'uml', '&#168;', 'upsih', '&#978;', 'Upsilon', '&#933;', 'upsilon', '&#965;', 'Uuml', '&#220;', 'uuml', '&#252;', 'weierp', '&#8472;', 'Xi', '&#926;', 'xi', '&#958;', 'Yacute', '&#221;', 'yacute', '&#253;', 'yen', '&#165;', 'yuml', '&#255;', 'Yuml', '&#376;', 'Zeta', '&#918;', 'zeta', '&#950;', 'zwj', '&#8205;', 'zwnj', '&#8204;']);
  amps = new HashMap_0(ampEntities.length / 2 | 0);
  for (i = 0; i < ampEntities.length; i++) {
    $putStringValue(amps, ampEntities[i++], ampEntities[i]);
  }
}

function addCardUrnToFilter(sb, cardURN){
  if (cardURN != null) {
    sb.string += ',"cardURN":"';
    $append_3(sb, jsonStringify(cardURN));
    sb.string += '"';
  }
}

function addColumnLabelToFilter(sb, label_0){
  if (label_0 != null) {
    sb.string += ',"label":"';
    $append_3(sb, jsonStringify(label_0));
    sb.string += '"';
  }
}

function addColumnTypeToFilter(sb, type_0){
  if (type_0 != null) {
    sb.string += ',"columnType":"';
    $append_3(sb, jsonStringify(type_0));
    sb.string += '"';
  }
}

function addDataSourceIdToFilter(sb, dataSourceId){
  if (dataSourceId != null) {
    sb.string += ',"dataSourceId":"';
    $append_3(sb, jsonStringify(dataSourceId));
    sb.string += '"';
  }
}

function addDataTypeToFilter(sb, dataType){
  if (dataType != null) {
    sb.string += ',"dataType":"';
    $append_3(sb, jsonStringify(dataType));
    sb.string += '"';
  }
}

function addDateGrainFilter(sb, calendarColumn){
  calendarColumn && (sb.string += ',"dateGrainFilter":true' , sb);
}

function addDateJoinColumnToFilter(sb, dateJoinColumn){
  if (dateJoinColumn != null) {
    sb.string += ',"dateJoinColumn":"';
    $append_3(sb, jsonStringify(dateJoinColumn));
    sb.string += '"';
  }
}

function addEllipsesToLastLineIfNeeded(rnd, lines, pixelWidth, font){
  var lastLine, strWidth, strWithEllipses;
  lastLine = lines.array.length - 1;
  if (lastLine >= 0) {
    strWidth = rnd.measureText_0((checkCriticalElementIndex(lastLine, lines.array.length) , castToString(lines.array[lastLine])), font).width_0;
    if (strWidth > pixelWidth) {
      strWithEllipses = addEllipsesToString(rnd, (checkCriticalElementIndex(lastLine, lines.array.length) , castToString(lines.array[lastLine])), pixelWidth, font);
      checkCriticalElementIndex(lastLine, lines.array.length);
      lines.array[lastLine] = strWithEllipses;
      return true;
    }
  }
  return false;
}

function addEllipsesToString(rnd, text_0, maxPixelWidth, font){
  var ellipsesWidth, strWidth;
  ellipsesWidth = rnd.measureText_0('...', font).width_0;
  if (ellipsesWidth > maxPixelWidth) {
    text_0 = '...';
  }
   else {
    strWidth = rnd.measureText_0(text_0, font).width_0;
    while (strWidth + ellipsesWidth > maxPixelWidth && text_0.length > 0) {
      text_0 = $substring_0(text_0, 0, text_0.length - 1);
      strWidth = rnd.measureText_0(text_0, font).width_0;
    }
    text_0 = text_0 + '...';
  }
  return text_0;
}

function addFilterTypeToFilter(sb, filterType){
  if (filterType != null) {
    sb.string += ',"filterType":"';
    $append_3(sb, jsonStringify(filterType));
    sb.string += '"';
  }
}

function addFiscalToFilter(sb, fiscal){
  fiscal?(sb.string += ',"fiscal":true' , sb):(sb.string += ',"fiscal":false' , sb);
}

function addOperandToFilter(sb, operand){
  sb.string += ',"operand":"' + operand + '"';
}

function addTextItemsForFormattedStr(ge, rnd, boundingRect, text_0, font, hAlign, posOfStr, offsetLens, altFont){
  var altFontStr, fullItem, i, isMultiPartStr, lastIndex, lenOfAltFont, offsetInThisStr, offsetOfAltFont, partBeforeAltFont, x_0, y_0;
  fullItem = new CFTextItem(rnd, boundingRect, text_0, font, hAlign, 0);
  $setSize_0(altFont, font.size_0);
  x_0 = fullItem.x_0;
  y_0 = fullItem.y_0;
  lastIndex = posOfStr + text_0.length;
  isMultiPartStr = false;
  for (i = 0; i < offsetLens.array.length; i++) {
    offsetOfAltFont = (checkCriticalElementIndex(i, offsetLens.array.length) , castTo(offsetLens.array[i], 29)).value_0;
    lenOfAltFont = (checkCriticalElementIndex(i + 1, offsetLens.array.length) , castTo(offsetLens.array[i + 1], 29)).value_0;
    if (offsetOfAltFont >= posOfStr && offsetOfAltFont < lastIndex) {
      offsetInThisStr = offsetOfAltFont - posOfStr;
      partBeforeAltFont = text_0.substr(0, offsetInThisStr);
      $addTextItem(ge, new CFTextItem_0(partBeforeAltFont, font, x_0, y_0));
      x_0 = round_int(x_0 + rnd.measureText_0(partBeforeAltFont, font).width_0);
      altFontStr = text_0.substr(offsetInThisStr, offsetInThisStr + lenOfAltFont - offsetInThisStr);
      $addTextItem(ge, new CFTextItem_0(altFontStr, altFont, x_0, y_0));
      x_0 = round_int(x_0 + rnd.measureText_0(altFontStr, altFont).width_0);
      text_0 = text_0.substr(offsetInThisStr + lenOfAltFont, text_0.length - (offsetInThisStr + lenOfAltFont));
      posOfStr += offsetInThisStr + lenOfAltFont;
      isMultiPartStr = true;
    }
    ++i;
  }
  isMultiPartStr?$trim(text_0).length > 0 && $addTextItem(ge, new CFTextItem_0(text_0, font, x_0, y_0)):(!ge.textAry && (ge.textAry = new ArrayList) , $add_1(ge.textAry, fullItem));
}

function addValuesToFilter(sb, values){
  var i;
  if (!!values && values.array.length > 0) {
    sb.string += ',"values":[';
    for (i = 0; i < values.array.length; i++)
      $append_3($append_3((sb.string += '"' , sb), jsonStringify((checkCriticalElementIndex(i, values.array.length) , castToString(values.array[i])))), '",');
    $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
    sb.string += ']';
  }
}

function breakableChar(thisChar){
  if (thisChar == 45 || thisChar == 46 || thisChar == 59 || thisChar == 58 || thisChar == 61 || thisChar == 32)
    return true;
  return false;
}

function contains(source, test_0){
  $clinit_StrUtil();
  if (source != null && source.indexOf(test_0) > -1)
    return true;
  return false;
}

function convertBrToNewLine(value_0){
  $clinit_StrUtil();
  var lowercase;
  if (value_0 != null && value_0.length > 2) {
    lowercase = value_0.toLowerCase();
    if (lowercase.indexOf('<br>') > -1) {
      value_0 = replaceWithNewLine(value_0, lowercase, '<br>');
      value_0 = convertBrToNewLine(value_0);
    }
     else if (lowercase.indexOf('<br/>') > -1) {
      value_0 = replaceWithNewLine(value_0, lowercase, '<br/>');
      value_0 = convertBrToNewLine(value_0);
    }
     else if (lowercase.indexOf('\\\\n') > -1) {
      value_0 = replaceWithNewLine(value_0, lowercase, '\\\\n');
      value_0 = convertBrToNewLine(value_0);
    }
     else if (lowercase.indexOf('\\n') > -1) {
      value_0 = replaceWithNewLine(value_0, lowercase, '\\n');
      value_0 = convertBrToNewLine(value_0);
    }
  }
  return value_0;
}

function drawTextInBounds(rnd, bnds, text_0, font, hAlign, vAlign, minFontSize, offsetLens, altFont){
  $clinit_StrUtil();
  var adjustedFontSize, curFont, curFontSize, curTextInfo, empty, lineHeight, numLines, tmpBnds, top_0, vertMargin;
  adjustedFontSize = toDouble_0(fromDouble_0($wnd.Math.round(bnds.height_0 * 0.9)));
  if (bnds.height_0 < adjustedFontSize || bnds.width_0 < 5) {
    empty = new GraphicElement;
    $addTextItem(empty, new CFTextItem_0('', ($clinit_CFFont() , DEFAULT_FONT), round_int(bnds.x_0), round_int(bnds.y_0)));
    return empty;
  }
  curFont = $duplicate_2(font);
  curFontSize = curFont.size_0;
  if (curFontSize > adjustedFontSize + 1) {
    curFontSize = adjustedFontSize + 1;
    curFont.size_0 = curFontSize;
    curFont.lineHeight = NaN;
  }
  curTextInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, curFont, bnds.width_0, bnds.height_0, -1);
  while (shouldShrinkFont(bnds, minFontSize, curFontSize, curTextInfo, text_0)) {
    curFontSize -= 1;
    curFont.size_0 = curFontSize;
    curFont.lineHeight = NaN;
    curTextInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, curFont, bnds.width_0, bnds.height_0, -1);
  }
  curFontSize == minFontSize && curTextInfo.aWordIsSplit && (curTextInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, curFont, bnds.width_0, -1, 1));
  lineHeight = (isNaN_0(curFont.lineHeight) && (curFont.lineHeight = rnd.measureText_0('A', curFont).height_0) , curFont.lineHeight);
  if (curFontSize <= minFontSize && curTextInfo.textDimension.height_0 > bnds.height_0) {
    numLines = round_int(bnds.height_0 / lineHeight);
    numLines < 1 && (numLines = 1);
    curTextInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, curFont, bnds.width_0, -1, numLines);
  }
  top_0 = bnds.y_0;
  if (vAlign == VALIGN_MIDDLE) {
    vertMargin = (bnds.height_0 - curTextInfo.textDimension.height_0) / 2;
    vertMargin > 0 && (top_0 += vertMargin);
  }
   else if (vAlign == VALIGN_BOTTOM) {
    vertMargin = bnds.height_0 - curTextInfo.textDimension.height_0;
    vertMargin > 0 && (top_0 += vertMargin);
  }
  tmpBnds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  tmpBnds.y_0 = top_0;
  return getGEForWrappedLines(rnd, hAlign, curFont, lineHeight, curTextInfo, tmpBnds, offsetLens, altFont);
}

function drawTextInBoundsWithGE(ge, rnd, bnds, text_0, font){
  $clinit_StrUtil();
  var geTmp, ti, ti$iterator;
  geTmp = drawTextInBounds(rnd, bnds, text_0, font, 0, VALIGN_MIDDLE, 5, null, null);
  for (ti$iterator = new ArrayList$1(geTmp.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
    ti = castTo($next_3(ti$iterator), 26);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, ti);
  }
}

function entityDecodeString(request){
  var result, result_0;
  $clinit_StrUtil();
  var ai, ampBuffer, c, ca, i, ii, rsl, theChar;
  if (request == null)
    return null;
  try {
    i = 0;
    ii = 0;
    rsl = request.length;
    ca = initUnidimensionalArray(C_classLit, $intern_24, 41, rsl, 15, 1);
    ampBuffer = initUnidimensionalArray(C_classLit, $intern_24, 41, 16, 15, 1);
    checkCriticalStringBounds(rsl, request.length);
    checkCriticalStringBounds(rsl, ca.length);
    $getChars0(request, 0, rsl, ca, 0);
    while (i < rsl) {
      c = ca[i++];
      if (c == 38) {
        ampBuffer[0] = 38;
        ai = 1;
        c = 0;
        while (i < rsl && ai < 16) {
          ampBuffer[ai++] = ca[i++];
          if (ampBuffer[ai - 1] == 59) {
            theChar = getAmpersandChar(valueOf_1(ampBuffer, ai));
            if (theChar < $intern_25)
              c = theChar & $intern_26;
            else {
              c = (result = theChar - $intern_25 , result = result >> 10 , result = result & 1023 , result |= 55296 , result & $intern_26);
              ca[ii++] = c;
              c = (result_0 = theChar - $intern_25 , result_0 = result_0 & 1023 , result_0 |= 56320 , result_0 & $intern_26);
            }
            break;
          }
        }
        if (c == 0) {
          c = 38;
          i = i - ai + 1;
        }
      }
      ca[ii++] = c;
    }
    request = valueOf_1(ca, ii);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      return '';
    }
     else 
      throw toJs($e0);
  }
  return request;
}

function filterHasAtLeastOneValue(filter){
  if (!!filter.values && filter.values.array.length > 0)
    if ($get_2(filter.values, 0) != null && castToString($get_2(filter.values, 0)).length > 0)
      return true;
  return false;
}

function getAmpersandChar(ampString){
  var tempChar, tempString, value_0;
  tempChar = 0;
  if (ampString != null && ampString.length > 1 && ampString.charCodeAt(0) == 38 && $charAt_0(ampString, ampString.length - 1) == 59) {
    if (ampString.charCodeAt(1) == 35) {
      if (ampString.charCodeAt(2) == 120 || ampString.charCodeAt(2) == 88) {
        tempString = $substring_0(ampString, 3, ampString.length - 1);
        try {
          tempChar = __parseAndValidateInt(tempString, 16);
        }
         catch ($e0) {
          $e0 = toJava($e0);
          if (!instanceOf($e0, 98))
            throw toJs($e0);
        }
      }
       else {
        tempString = $substring_0(ampString, 2, ampString.length - 1);
        try {
          tempChar = __parseAndValidateInt(tempString, 10);
        }
         catch ($e1) {
          $e1 = toJava($e1);
          if (!instanceOf($e1, 98))
            throw toJs($e1);
        }
      }
    }
     else {
      tempString = $substring_0(ampString, 1, ampString.length - 1);
      value_0 = $getStringValue(amps, tempString);
      value_0 != null && (tempChar = getAmpersandChar(castToString(value_0)));
    }
  }
  return tempChar;
}

function getColumnTypeFromFilter(object){
  $clinit_StrUtil();
  var e, jsonObject;
  try {
    jsonObject = new JSONObject_0(object);
    if ($containsKey_1(jsonObject.myHashMap, 'columnType')) {
      return toString_24($get_0(jsonObject, 'columnType'));
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      $printStackTraceImpl(e, ($clinit_System() , err), '', '');
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getDrillFilterFromFilterList(filters){
  $clinit_StrUtil();
  var i, sb;
  sb = new StringBuilder_1('{');
  if (filters.array.length > 0) {
    sb.string += '"filters":[';
    for (i = 0; i < filters.array.length; i++) {
      $append_3(sb, (checkCriticalElementIndex(i, filters.array.length) , castToString(filters.array[i])));
      i < filters.array.length - 1 && (sb.string += ',' , sb);
    }
    sb.string += ']';
  }
  sb.string += '}';
  if (sb.string.length > 2)
    return sb.string;
  return null;
}

function getDrillFilterFromFilters(filter1, filter2){
  $clinit_StrUtil();
  var filters;
  filters = new ArrayList;
  filter1 != null && (filters.array[filters.array.length] = filter1 , true);
  filter2 != null && (filters.array[filters.array.length] = filter2 , true);
  return getDrillFilterFromFiltersAndPassThrough_0(filters);
}

function getDrillFilterFromFiltersAndPassThrough(filter1, passThrough){
  var sb;
  sb = new StringBuilder_1('{');
  if (filter1 != null) {
    sb.string += '"filters":[';
    filter1 != null && (sb.string += '' + filter1 , sb);
    sb.string += ']';
  }
  if (passThrough != null) {
    sb.string += ',';
    sb.string += '' + passThrough;
  }
  sb.string += '}';
  if (sb.string.length > 2)
    return sb.string;
  return null;
}

function getDrillFilterFromFiltersAndPassThrough_0(filterList){
  $clinit_StrUtil();
  var filter, i, sb;
  sb = new StringBuilder_1('{');
  if (filterList.array.length > 0) {
    sb.string += '"filters":[';
    for (i = 0; i < filterList.array.length; i++) {
      filter = (checkCriticalElementIndex(i, filterList.array.length) , castToString(filterList.array[i]));
      if (filter != null) {
        i > 0 && (sb.string += ',' , sb);
        $append_3(sb, (checkCriticalElementIndex(i, filterList.array.length) , castToString(filterList.array[i])));
      }
    }
    sb.string += ']';
  }
  sb.string += '}';
  if (sb.string.length > 2)
    return sb.string;
  return null;
}

function getDrillFilterFromValues(filter){
  $clinit_StrUtil();
  var sb;
  if (filter.column != null && filterHasAtLeastOneValue(filter)) {
    sb = new StringBuilder_1('{"column":"');
    $append_3($append_3(sb, jsonStringify(filter.column)), '"');
    addValuesToFilter(sb, filter.values);
    addOperandToFilter(sb, filter.operand);
    addDataSourceIdToFilter(sb, filter.dataSourceId);
    addColumnTypeToFilter(sb, filter.columnType);
    addDataTypeToFilter(sb, filter.dataType);
    addCardUrnToFilter(sb, filter.cardURN);
    addDateGrainFilter(sb, filter.dateGrainFilter);
    addFilterTypeToFilter(sb, filter.filterType);
    addColumnLabelToFilter(sb, filter.label_0);
    if (filter.dateGrainFilter) {
      addFiscalToFilter(sb, filter.fiscal);
      addDateJoinColumnToFilter(sb, filter.dateJoinColumn);
    }
    sb.string += '}';
    return sb.string;
  }
  return null;
}

function getExplicitLineBreaks(text_0){
  var explicitBreakLines, line, line$index, line$max, lines;
  explicitBreakLines = new ArrayList;
  if (text_0 != null && text_0.length > 0) {
    if (text_0.indexOf('\r') != -1) {
      text_0 = replace_0(text_0, '\r\n', '\n', false);
      text_0 = replace_0(text_0, '\n\r', '\n', false);
      text_0 = replace_0(text_0, '\r', '\n', false);
    }
    lines = $split(text_0, '\n', 0);
    for (line$index = 0 , line$max = lines.length; line$index < line$max; ++line$index) {
      line = lines[line$index];
      explicitBreakLines.array[explicitBreakLines.array.length] = line;
    }
  }
   else 
    explicitBreakLines.array[explicitBreakLines.array.length] = '';
  return explicitBreakLines;
}

function getGEForWrappedLines(rnd, hAlign, curFont, lineHeight, curTextInfo, tmpBnds, offsetLens, altFont){
  var ge, line, line$iterator, posOfStr;
  ge = new GraphicElement;
  if (!!offsetLens && offsetLens.array.length > 0 && !!altFont) {
    posOfStr = 0;
    for (line$iterator = new ArrayList$1(curTextInfo.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      addTextItemsForFormattedStr(ge, rnd, tmpBnds, line, curFont, hAlign, posOfStr, offsetLens, altFont);
      $setY_0(tmpBnds, tmpBnds.y_0 + lineHeight);
      posOfStr = posOfStr + line.length + 1;
    }
  }
   else {
    for (line$iterator = new ArrayList$1(curTextInfo.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      $addTextItem(ge, new CFTextItem(rnd, tmpBnds, line, curFont, hAlign, 0));
      $setY_0(tmpBnds, tmpBnds.y_0 + lineHeight);
    }
  }
  return ge;
}

function getJsonNameValuePair(name_0, value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify(name_0) + '"' + ':' + value_0;
  return result;
}

function getJsonNameValuePair_0(name_0, value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify(name_0) + '"' + ':' + toString_23(value_0);
  return result;
}

function getJsonNameValuePair_1(name_0, value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify(name_0) + '"' + ':' + ('"' + jsonStringify(value_0) + '"');
  return result;
}

function getJsonNameValuePair_2(value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify('canDelete') + '"';
  if (value_0)
    return result + ': true';
  return result + ': false';
}

function getJsonNameValuePairs(pairs){
  $clinit_StrUtil();
  var i, stringBuilder;
  stringBuilder = new StringBuilder;
  stringBuilder.string += '{';
  if (pairs.array.length > 0) {
    for (i = 0; i < pairs.array.length; i++) {
      i == 0?$append_3(stringBuilder, (checkCriticalElementIndex(0, pairs.array.length) , castToString(pairs.array[0]))):$append_3((stringBuilder.string += ',' , stringBuilder), (checkCriticalElementIndex(i, pairs.array.length) , castToString(pairs.array[i])));
    }
  }
  stringBuilder.string += '}';
  return stringBuilder.string;
}

function getJsonNamedArray(value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify('annotations') + '"' + ': [' + value_0 + ']';
  return result;
}

function getJsonNamedObject(name_0, value_0){
  $clinit_StrUtil();
  var result;
  result = '"' + jsonStringify(name_0) + '"' + ': {' + value_0 + '}';
  return result;
}

function getListOfValuesFromFilter(object){
  var e, jsonObject, names, operand, values;
  try {
    jsonObject = new JSONObject_0(object);
    if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
      operand = toString_24($get_0(jsonObject, 'operand'));
      if ($equals_2('IN', operand)) {
        values = $getJSONArray_0(jsonObject, 'values');
        names = getValues(values);
        return names;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      $printStackTraceImpl(e, ($clinit_System() , err), '', '');
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getMapOfStringsAsJson(map_0){
  var entry, key, key$iterator, list, outerIter, result, stringBuilder, value_0;
  if (map_0.hashCodeMap.size_0 + map_0.stringMap.size_0 == 0)
    return '';
  stringBuilder = new StringBuilder;
  $append_3($append_3(stringBuilder, '"' + jsonStringify('passThrough') + '"'), ':');
  list = new ArrayList;
  for (key$iterator = (outerIter = (new AbstractMap$1(map_0)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
    key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
    value_0 = toString_24(key == null?getEntryValueOrNull($getEntry(map_0.hashCodeMap, null)):$get_3(map_0.stringMap, key));
    $add_1(list, (result = '"' + jsonStringify(key) + '"' + ':' + ('"' + jsonStringify(value_0) + '"') , result));
  }
  $append_3(stringBuilder, getJsonNameValuePairs(list));
  return stringBuilder.string;
}

function getObjectFromMapAsString(map_0, key){
  $clinit_StrUtil();
  var object;
  if (map_0) {
    object = map_0.get_0(key);
    if (object != null && (instanceOfString(object) || instanceOfBoolean(object) || instanceOf(object, 29) || instanceOfDouble(object)))
      return toString_24(object);
  }
  return null;
}

function getOperandFromFilter(object){
  $clinit_StrUtil();
  var e, jsonObject;
  try {
    jsonObject = new JSONObject_0(object);
    if ($containsKey_1(jsonObject.myHashMap, 'operand')) {
      return toString_24($get_0(jsonObject, 'operand'));
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      $printStackTraceImpl(e, ($clinit_System() , err), '', '');
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getRowFilterIntersection(filter1, filter2){
  $clinit_StrUtil();
  var column, columnType, dataSourceId, dateGrainFilter, dateJoinColumn, e, filterType, fiscal, i, item_0, item$iterator, jsonObject, label_0, list1, list2, newList, sb;
  list1 = getListOfValuesFromFilter(filter1);
  list2 = getListOfValuesFromFilter(filter2);
  newList = new ArrayList;
  if (!!list1 && !!list2) {
    for (item$iterator = new ArrayList$1(list1); item$iterator.i < item$iterator.this$01.array.length;) {
      item_0 = castToString($next_3(item$iterator));
      $indexOf_1(list2, item_0, 0) != -1 && (newList.array[newList.array.length] = item_0 , true);
    }
  }
   else 
    !list1 && !!list2?(newList = list2):!list2 && !!list1 && (newList = list1);
  if (newList.array.length > 0) {
    try {
      jsonObject = new JSONObject_0(filter1);
      column = null;
      dataSourceId = null;
      columnType = null;
      dateJoinColumn = null;
      dateGrainFilter = false;
      fiscal = false;
      filterType = null;
      label_0 = null;
      $containsKey_1(jsonObject.myHashMap, 'column') && (column = toString_24($get_0(jsonObject, 'column')));
      $containsKey_1(jsonObject.myHashMap, 'dataSourceId') && (dataSourceId = toString_24($get_0(jsonObject, 'dataSourceId')));
      $containsKey_1(jsonObject.myHashMap, 'columnType') && (columnType = toString_24($get_0(jsonObject, 'columnType')));
      $containsKey_1(jsonObject.myHashMap, 'dateJoinColumn') && (dateJoinColumn = toString_24($get_0(jsonObject, 'dateJoinColumn')));
      $containsKey_1(jsonObject.myHashMap, 'dateGrainFilter') && (dateGrainFilter = $getBoolean(jsonObject, 'dateGrainFilter'));
      $containsKey_1(jsonObject.myHashMap, 'filterType') && (filterType = toString_24($get_0(jsonObject, 'filterType')));
      $containsKey_1(jsonObject.myHashMap, 'fiscal') && (fiscal = $getBoolean(jsonObject, 'fiscal'));
      $containsKey_1(jsonObject.myHashMap, 'label') && (label_0 = toString_24($get_0(jsonObject, 'label')));
      sb = new StringBuilder_1('{');
      column != null && $append_3($append_3((sb.string += '"column":"' , sb), column), '",');
      sb.string += '"values":[';
      for (i = 0; i < newList.array.length; i++)
        $append_3($append_3((sb.string += '"' , sb), (checkCriticalElementIndex(i, newList.array.length) , castToString(newList.array[i]))), '",');
      $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
      sb.string += '],"operand":"IN"';
      dataSourceId != null && addDataSourceIdToFilter(sb, dataSourceId);
      columnType != null && addDataTypeToFilter(sb, columnType);
      if (dateGrainFilter) {
        dateJoinColumn != null && addDateJoinColumnToFilter(sb, dateJoinColumn);
        fiscal && (sb.string += ',"fiscal":true' , sb);
      }
      dateGrainFilter && (sb.string += ',"dateGrainFilter":true' , sb);
      addFilterTypeToFilter(sb, filterType);
      addColumnLabelToFilter(sb, label_0);
      sb.string += '}';
      return sb.string;
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        $printStackTraceImpl(e, ($clinit_System() , err), '', '');
      }
       else 
        throw toJs($e0);
    }
  }
  return null;
}

function getValueListFromFilter(object){
  $clinit_StrUtil();
  var e, jsonObject, names, values;
  try {
    jsonObject = new JSONObject_0(object);
    if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
      toString_24($get_0(jsonObject, 'operand'));
      values = $getJSONArray_0(jsonObject, 'values');
      names = getValues(values);
      return names;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      $printStackTraceImpl(e, ($clinit_System() , err), '', '');
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getValues(values){
  $clinit_StrUtil();
  var i, name_0, names;
  names = new ArrayList;
  for (i = 0; i < $length(values); i++) {
    try {
      name_0 = toString_24($get(values, i));
      names.array[names.array.length] = name_0;
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 35))
        throw toJs($e0);
    }
  }
  return names;
}

function getVisbleDimensionForText(rnd, text_0, font){
  $clinit_StrUtil();
  var dim, visibleHeight;
  dim = rnd.measureText_0(text_0, font);
  visibleHeight = $intern_27 * dim.height_0 + 2;
  hasDescenders(text_0) && (visibleHeight = 0.84 * dim.height_0);
  dim = new CFDimension(dim.width_0, visibleHeight);
  return dim;
}

function getWrappedTextForWidthWithMaxLines(rnd, text_0, font, pixelWidth, pixelHeight, maxLines){
  $clinit_StrUtil();
  var aWordIsSplit, currentHeight, done, explicitBreakLines, line, line$iterator, line$iterator0, lines, maxWidth, numWrappedLines, singleLineHeight, spaceDim, textDim, textDim0, wrappedLine, wrappedLine$iterator, wrappedLines;
  explicitBreakLines = getExplicitLineBreaks(text_0);
  explicitBreakLines = noMoreThanMaxLines(explicitBreakLines, maxLines);
  lines = new ArrayList;
  done = false;
  aWordIsSplit = false;
  numWrappedLines = 0;
  singleLineHeight = 0;
  currentHeight = 0;
  if (pixelHeight != -1) {
    singleLineHeight = rnd.measureText_0(' ', font).height_0;
    if (pixelHeight < singleLineHeight) {
      lines.array[lines.array.length] = '...';
      return new TextInfo_0(lines, new CFDimension(pixelWidth, singleLineHeight), true);
    }
  }
  for (line$iterator0 = explicitBreakLines.iterator(); line$iterator0.hasNext_0();) {
    line = castToString(line$iterator0.next_1());
    if (!done) {
      wrappedLines = new ArrayList;
      aWordIsSplit = wrapTextForWidthHeight(rnd, wrappedLines, line, font, pixelWidth, pixelHeight) || aWordIsSplit;
      numWrappedLines = wrappedLines.array.length;
      for (wrappedLine$iterator = new ArrayList$1(wrappedLines); wrappedLine$iterator.i < wrappedLine$iterator.this$01.array.length;) {
        wrappedLine = castToString($next_3(wrappedLine$iterator));
        if ((maxLines == -1 || lines.array.length < maxLines) && (pixelHeight == -1 || currentHeight + singleLineHeight <= pixelHeight)) {
          lines.array[lines.array.length] = wrappedLine;
          currentHeight += singleLineHeight;
        }
         else {
          $set(lines, lines.array.length - 1, castToString($get_2(lines, lines.array.length - 1)) + ' ' + wrappedLine);
          done = true;
          break;
        }
      }
    }
  }
  lines.array.length < numWrappedLines?$set(lines, lines.array.length - 1, addEllipsesToString(rnd, castToString($get_2(lines, lines.array.length - 1)), pixelWidth, font)):(aWordIsSplit = aWordIsSplit || addEllipsesToLastLineIfNeeded(rnd, lines, pixelWidth, font));
  spaceDim = rnd.measureText_0(' ', font);
  maxWidth = 0;
  for (line$iterator = new ArrayList$1(lines); line$iterator.i < line$iterator.this$01.array.length;) {
    line = castToString($next_3(line$iterator));
    textDim0 = rnd.measureText_0(line, font);
    textDim0.width_0 > maxWidth && (maxWidth = textDim0.width_0);
  }
  textDim = new CFDimension(maxWidth, lines.array.length * spaceDim.height_0);
  return new TextInfo_0(lines, textDim, aWordIsSplit);
}

function hasDescenders(text_0){
  var ch_0, i;
  for (i = 0; i < text_0.length; i++) {
    ch_0 = text_0.charCodeAt(i);
    if (ch_0 >= 128) {
      return true;
    }
    switch (ch_0) {
      case 124:
      case 123:
      case 125:
      case 91:
      case 93:
      case 103:
      case 106:
      case 112:
      case 113:
      case 121:
      case 74:
      case 81:
        return true;
    }
  }
  return false;
}

function jsonStringify(source){
  $clinit_StrUtil();
  var i, length_0, sb, temp, theChar;
  if (source == null || source.length == 0)
    return '';
  length_0 = source.length;
  sb = new StringBuilder_0;
  for (i = 0; i < length_0; i += 1) {
    theChar = source.charCodeAt(i);
    switch (theChar) {
      case 92:
      case 47:
      case 34:
        sb.string += '\\';
        sb.string += String.fromCharCode(theChar);
        break;
      case 8:
        sb.string += '\\b';
        break;
      case 9:
        sb.string += '\\t';
        break;
      case 10:
        sb.string += '\\n';
        break;
      case 12:
        sb.string += '\\f';
        break;
      case 13:
        sb.string += '\\r';
        break;
      default:if (theChar < 32) {
          temp = '000' + (theChar >>> 0).toString(16);
          $append_3(sb, '\\u' + $substring(temp, temp.length - 4));
        }
         else 
          sb.string += String.fromCharCode(theChar);
    }
  }
  return sb.string;
}

function migrateOneChartOption(overrides, newOverrides, key, newKey){
  $clinit_StrUtil();
  var value_0;
  value_0 = overrides.get_0(key);
  if (value_0 != null) {
    overrides.remove_0(key);
    $add_1(newOverrides, new KeyValuePair(newKey, value_0));
  }
}

function noMoreThanMaxLines(lines, maxLines){
  if (maxLines != -1 && lines.size_1() > maxLines) {
    while (lines.size_1() > maxLines)
      lines.remove_2(maxLines);
  }
  return lines;
}

function replace_0(source, findStr, replaceStr, ignoreCase){
  $clinit_StrUtil();
  var cmpSource, copyIndex, rtn, sIndex;
  if (null == source || null == findStr || findStr.length < 1)
    return source;
  replaceStr == null && (replaceStr = '');
  cmpSource = source;
  if (ignoreCase) {
    cmpSource = source.toLowerCase();
    findStr = findStr.toLowerCase();
  }
  rtn = new StringBuffer;
  copyIndex = 0;
  sIndex = cmpSource.indexOf(findStr, 0);
  if (sIndex != -1) {
    while (sIndex != -1) {
      $append(rtn, source.substr(copyIndex, sIndex - copyIndex));
      rtn.string += '' + replaceStr;
      sIndex += findStr.length;
      copyIndex = sIndex;
      sIndex = cmpSource.indexOf(findStr, sIndex);
    }
    $append(rtn, source.substr(copyIndex, source.length - copyIndex));
    return rtn.string;
  }
   else 
    return source;
}

function replaceMacroWithValue(formatStr, macroName, valStr){
  $clinit_StrUtil();
  valStr == null && (valStr = '');
  formatStr != null && formatStr.indexOf(macroName) > -1 && (formatStr = replace_0(formatStr, macroName, valStr, false));
  return formatStr;
}

function replaceWithNewLine(value_0, lowercase, searchStr){
  var after, before, endIndex, startIndex;
  startIndex = lowercase.indexOf(searchStr);
  endIndex = startIndex + searchStr.length;
  before = $trim(value_0.substr(0, startIndex));
  after = $trim(value_0.substr(endIndex, value_0.length - endIndex));
  value_0 = before + '\n' + after;
  return value_0;
}

function shouldShrinkFont(bnds, minFontSize, curFontSize, curTextInfo, text_0){
  var lastLine, lastStart, lastTextFromText;
  if (curFontSize > minFontSize) {
    if (curTextInfo.textDimension.height_0 > bnds.height_0 || curTextInfo.aWordIsSplit)
      return true;
    if (curTextInfo.wrappedLines) {
      lastLine = castToString($get_2(curTextInfo.wrappedLines, curTextInfo.wrappedLines.array.length - 1));
      lastStart = text_0.length - lastLine.length;
      if (lastStart < 0)
        return true;
      lastTextFromText = text_0.substr(lastStart, text_0.length - lastStart);
      if (!$equals_2(lastLine, lastTextFromText))
        return true;
    }
  }
  return false;
}

function splitWord(rnd, wordText, pixelWidth, pixelHeight, font){
  var curDim, curLen, curStr, currentHeight, i, lastBreakableChar, line, line$index, line$max, lines, remainingLines, theChar;
  curDim = new CFDimension(0, 0);
  curLen = 0;
  currentHeight = 0;
  curStr = '';
  lines = new ArrayList;
  i = 0;
  lastBreakableChar = 0;
  if (wordText.length > 0) {
    for (; i < wordText.length && curLen <= pixelWidth; i++) {
      theChar = wordText.charCodeAt(i);
      curStr = curStr + charToString(wordText.charCodeAt(i));
      curDim = rnd.measureText_0(curStr, font);
      if (pixelHeight != -1 && curDim.height_0 > pixelHeight)
        return initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 0, 6, 1);
      curLen = curDim.width_0;
      curLen <= pixelWidth && breakableChar(theChar) && (lastBreakableChar = i);
    }
    if (curLen > pixelWidth && curStr.length > 1) {
      lastBreakableChar > 0 && (i = lastBreakableChar + 2);
      $add_1(lines, curStr.substr(0, i - 1));
      if (pixelHeight == -1 || currentHeight + curDim.height_0 <= pixelHeight) {
        currentHeight += curDim.height_0;
        wordText = wordText.substr(i - 1, wordText.length - (i - 1));
        curDim = rnd.measureText_0(wordText, font);
        curLen = curDim.width_0;
        if (curLen > pixelWidth) {
          pixelHeight != -1 && (pixelHeight -= currentHeight);
          remainingLines = splitWord(rnd, wordText, pixelWidth, pixelHeight, font);
          for (line$index = 0 , line$max = remainingLines.length; line$index < line$max; ++line$index) {
            line = remainingLines[line$index];
            lines.array[lines.array.length] = line;
          }
        }
         else {
          lines.array[lines.array.length] = wordText;
        }
      }
    }
     else 
      curStr.length == 1 && (lines.array[lines.array.length] = '' , true);
  }
  return castTo($toArray_0(lines, initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, lines.array.length, 6, 1)), 74);
}

function stripDecimalPortionFromString(str){
  $clinit_StrUtil();
  var firstChar, index_0;
  if (str == null || str.length == 0)
    return str;
  firstChar = str.charCodeAt(0);
  if (firstChar >= 48 && firstChar <= 57 && $indexOf(str, fromCodePoint(46)) > -1) {
    index_0 = $indexOf(str, fromCodePoint(46));
    return str.substr(0, index_0);
  }
  return str;
}

function stripZerosAfterDecimal(value_0){
  $clinit_StrUtil();
  var decimalIndex, endIndex;
  if (value_0 != null && value_0.length > 0) {
    decimalIndex = $lastIndexOf(value_0, fromCodePoint(46));
    endIndex = value_0.length;
    if (decimalIndex > -1) {
      while (endIndex > decimalIndex && (value_0.charCodeAt(endIndex - 1) == 48 || value_0.charCodeAt(endIndex - 1) == 46))
        --endIndex;
      value_0 = value_0.substr(0, endIndex);
    }
  }
  return value_0;
}

function truncateString(rnd, text_0, pixelWidth, font){
  $clinit_StrUtil();
  var retStr, strAry, textDim, width_0;
  retStr = text_0;
  textDim = rnd.measureText_0(text_0, font);
  width_0 = textDim.width_0;
  if (width_0 > pixelWidth) {
    strAry = splitWord(rnd, text_0, pixelWidth, textDim.height_0, font);
    if (strAry.length > 0) {
      retStr = strAry[0];
      strAry.length > 1 && (retStr += '' + strAry[1]);
      retStr = addEllipsesToString(rnd, retStr, pixelWidth, font);
    }
  }
  return retStr;
}

function wrapTextForWidthHeight(rnd, lines, text_0, font, pixelWidth, pixelHeight){
  var aWordIsSplit, curLine, currentHeight, dim, done, endIndex, i, lastFragmentIndex, lineStartIndex, maxWidth, numWhitespaceChars, partialWord, pos, spaceDim, spaceWidth, strWidth, wordFragmentIndex, wordFragments, wordIndex, wordLens, wordWidth, words;
  aWordIsSplit = false;
  dim = rnd.measureText_0(text_0, font);
  if (dim.width_0 < pixelWidth && (pixelHeight == -1 || dim.height_0 <= pixelHeight)) {
    lines.array[lines.array.length] = text_0;
    return false;
  }
  if (pixelWidth < 0) {
    text_0 = '';
    lines.array[lines.array.length] = text_0;
    return false;
  }
  spaceDim = rnd.measureText_0(' ', font);
  spaceWidth = spaceDim.width_0;
  words = $split(text_0, ' ', 0);
  wordLens = initUnidimensionalArray(D_classLit, $intern_24, 41, words.length, 15, 1);
  done = false;
  lineStartIndex = 0;
  wordIndex = 0;
  strWidth = 0;
  maxWidth = 0;
  curLine = '';
  currentHeight = 0;
  while (!done) {
    while (strWidth <= pixelWidth && wordIndex < words.length) {
      if (curLine.length > 0) {
        curLine += ' ';
        strWidth += spaceWidth;
      }
      curLine += '' + words[wordIndex];
      wordLens[wordIndex] = rnd.measureText_0(words[wordIndex], font).width_0;
      strWidth += wordLens[wordIndex++];
    }
    if (strWidth > pixelWidth) {
      if (wordIndex == lineStartIndex + 1) {
        aWordIsSplit = true;
        --wordIndex;
        wordFragments = splitWord(rnd, words[wordIndex], pixelWidth, pixelHeight, font);
        for (wordFragmentIndex = 0; wordFragmentIndex < wordFragments.length - 2; wordFragmentIndex++) {
          partialWord = wordFragments[wordFragmentIndex];
          breakableChar($charAt_0(partialWord, partialWord.length - 1)) || (aWordIsSplit = true);
        }
        lastFragmentIndex = wordFragments.length - 1;
        for (i = 0; i < lastFragmentIndex; i++) {
          wordWidth = rnd.measureText_0(wordFragments[i], font).width_0;
          wordWidth > maxWidth && (maxWidth = wordWidth);
          $add_1(lines, wordFragments[i]);
        }
        if (wordFragments.length > 1) {
          words[wordIndex] = wordFragments[lastFragmentIndex];
          wordLens[wordIndex] = rnd.measureText_0(words[wordIndex], font).width_0;
          curLine = words[wordIndex];
          strWidth = wordLens[wordIndex++];
        }
         else {
          wordFragments != null && wordFragments.length > 0 && $add_1(lines, wordFragments[0]);
          ++wordIndex;
          lineStartIndex = wordIndex;
          done = true;
        }
      }
       else {
        --wordIndex;
        endIndex = curLine.length - (words[wordIndex].length + 1);
        if (endIndex > 0) {
          curLine = curLine.substr(0, endIndex);
          strWidth -= spaceWidth + wordLens[wordIndex];
          strWidth > maxWidth && (maxWidth = strWidth);
          lines.array[lines.array.length] = curLine;
          curLine = '';
          strWidth = 0;
          lineStartIndex = wordIndex;
        }
      }
    }
     else {
      if ($endsWith($trim(text_0), curLine) && !$equals_2($substring(text_0, text_0.length - curLine.length), curLine)) {
        pos = text_0.lastIndexOf(curLine);
        numWhitespaceChars = text_0.length - pos - curLine.length;
        for (i = 0; i < numWhitespaceChars; i++)
          curLine += ' ';
      }
      lines.array[lines.array.length] = curLine;
      strWidth > maxWidth && (maxWidth = strWidth);
      done = true;
    }
    currentHeight += spaceDim.height_0;
    pixelHeight != -1 && currentHeight > pixelHeight && (done = true);
  }
  return aWordIsSplit;
}

var ampEntities, amps;
function $getCFTextItemsForWrappedLines(this$static, rnd, bounds, font, hAlign, vAlign){
  var index_0, lineText, lineText$iterator, retItems, tmpBnds;
  tmpBnds = new CFRect(bounds.x_0, bounds.y_0, bounds.width_0, bounds.height_0);
  retItems = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, this$static.wrappedLines.array.length, 0, 1);
  vAlign == VALIGN_MIDDLE?$setY_0(tmpBnds, bounds.y_0 + bounds.height_0 / 2 - this$static.textDimension.height_0 / 2):vAlign == VALIGN_BOTTOM && $setY_0(tmpBnds, bounds.y_0 + bounds.height_0 - this$static.textDimension.height_0);
  index_0 = 0;
  for (lineText$iterator = new ArrayList$1(this$static.wrappedLines); lineText$iterator.i < lineText$iterator.this$01.array.length;) {
    lineText = castToString($next_3(lineText$iterator));
    retItems[index_0++] = new CFTextItem(rnd, tmpBnds, lineText, font, hAlign, 0);
    $setY_0(tmpBnds, tmpBnds.y_0 + (isNaN_0(font.lineHeight) && (font.lineHeight = rnd.measureText_0('A', font).height_0) , font.lineHeight));
  }
  return retItems;
}

function $getCFTextItemsForWrappedLinesRotated(this$static, rnd, bounds, font, hAlign, vAlign){
  var dim, index_0, left, lineBaseAdjust, lineHeight, lineText, lineText$iterator, retItems, totalLineHeight, y_0;
  lineHeight = (isNaN_0(font.lineHeight) && (font.lineHeight = rnd.measureText_0('A', font).height_0) , font.lineHeight);
  totalLineHeight = lineHeight * this$static.wrappedLines.array.length;
  lineBaseAdjust = (isNaN_0(font.capHeight) && (font.capHeight = (isNaN_0(font.lineHeight) && (font.lineHeight = rnd.measureText_0('A', font).height_0) , font.lineHeight * 0.66)) , font.capHeight);
  retItems = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, this$static.wrappedLines.array.length, 0, 1);
  left = bounds.x_0 + lineBaseAdjust;
  vAlign == VALIGN_MIDDLE?(left = bounds.x_0 + (bounds.width_0 - totalLineHeight) / 2 + lineBaseAdjust):vAlign == VALIGN_BOTTOM && (left = bounds.x_0 + bounds.width_0 - totalLineHeight + lineBaseAdjust);
  index_0 = 0;
  for (lineText$iterator = new ArrayList$1(this$static.wrappedLines); lineText$iterator.i < lineText$iterator.this$01.array.length;) {
    lineText = castToString($next_3(lineText$iterator));
    dim = rnd.measureText_0(lineText, font);
    y_0 = round_int(bounds.y_0 + bounds.height_0);
    hAlign == HALIGN_CENTER?(y_0 = round_int(bounds.y_0 + bounds.height_0 / 2 + dim.width_0 / 2)):hAlign == HALIGN_RIGHT && (y_0 = round_int(bounds.y_0 + dim.width_0));
    retItems[index_0] = new CFTextItem_1(lineText, font, round_int(left), y_0, -90);
    retItems[index_0].rotation = -90;
    ++index_0;
    left += lineHeight;
  }
  return retItems;
}

function $getStringForIndex(this$static){
  if (!!this$static.wrappedLines && 0 < this$static.wrappedLines.array.length)
    return castToString($get_2(this$static.wrappedLines, 0));
  else if (this$static.singleLine != null)
    return this$static.singleLine;
  return null;
}

function TextInfo(line, textDim){
  this.textDimension = textDim;
  this.singleLine = line;
}

function TextInfo_0(wrappedLines, textDim, aWordIsSplit){
  this.textDimension = textDim;
  this.wrappedLines = wrappedLines;
  this.aWordIsSplit = aWordIsSplit;
}

defineClass(79, 1, {79:1}, TextInfo, TextInfo_0);
_.aWordIsSplit = false;
var Lcom_domo_charting_base_TextInfo_2_classLit = createForClass('com.domo.charting.base', 'TextInfo', 79);
function $clinit_Util(){
  $clinit_Util = emptyMethod;
  charsToRemove = stampJavaTypeInfo(getClassLiteralForArray(C_classLit, 1), $intern_24, 41, 15, [32, 34, 37, 36, 44, 165, 65509, 8364]);
}

function AproxIt(db){
  if (db > 0) {
    db > 0.999 && (db = 1);
    db < 1.0E-4 && (db = 0);
  }
   else {
    db < -0.999 && (db = -1);
    db > -1.0E-4 && (db = 0);
  }
  return db;
}

function MungeMapName(str){
  $clinit_Util();
  var Saint, i, j, len, newChars, temp;
  j = 0;
  if (str != null) {
    str = str.toLocaleUpperCase();
    Saint = str.indexOf('SAINT');
    Saint != -1 && (str = str.substr(0, Saint) + 'ST' + str.substr(Saint + 5, str.length - (Saint + 5)));
    len = str.length;
    newChars = initUnidimensionalArray(C_classLit, $intern_24, 41, len, 15, 1);
    for (i = 0; i < len; i++) {
      temp = str.charCodeAt(i);
      temp < 127?(temp <= 90 && temp >= 65 || temp <= 57 && temp >= 48) && (newChars[j++] = temp):(newChars[j++] = temp);
    }
    return valueOf_1(newChars, j);
  }
  return null;
}

function clearGraphicElementArray(graphicElements){
  $clinit_Util();
  var graphicElement, graphicElement$iterator;
  if (!!graphicElements && graphicElements.size_1() > 0) {
    for (graphicElement$iterator = graphicElements.iterator(); graphicElement$iterator.hasNext_0();) {
      graphicElement = castTo(graphicElement$iterator.next_1(), 12);
      !!graphicElement && $freeResources_3(graphicElement);
    }
    graphicElements.clear_0();
  }
}

function convertTimeZoneOffsetToMinutes(timeZoneOffset){
  $clinit_Util();
  var hours, length_0, minutes, positive;
  minutes = 0;
  positive = true;
  if (timeZoneOffset != null && timeZoneOffset.length > 3) {
    if ($equals_2(timeZoneOffset.substr(0, 1), '+'))
      timeZoneOffset = $substring_0(timeZoneOffset, 1, timeZoneOffset.length);
    else if ($equals_2(timeZoneOffset.substr(0, 1), '-')) {
      positive = false;
      timeZoneOffset = $substring_0(timeZoneOffset, 1, timeZoneOffset.length);
    }
    hours = getInt(timeZoneOffset.substr(0, 2), 0);
    length_0 = timeZoneOffset.length;
    minutes = getInt(timeZoneOffset.substr(length_0 - 2, length_0 - (length_0 - 2)), 0);
    minutes += hours * 60;
    positive || (minutes *= -1);
  }
  return minutes;
}

function doublesEqualWithinTolerance(one, two){
  $clinit_Util();
  var tolerance;
  tolerance = one / 1000000;
  if (one >= 0 && one >= two - tolerance && one <= two + tolerance)
    return true;
  else if (one <= 0 && two >= one + tolerance && two <= one - tolerance)
    return true;
  return false;
}

function drawGEAry(rnd, geAry){
  $clinit_Util();
  var ge, ge$iterator;
  if (!!geAry && geAry.size_1() > 0) {
    for (ge$iterator = geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      !!ge && !ge.hidden && $draw_2(ge, rnd);
    }
  }
}

function extremeGetDouble(Str){
  var i, newString, sb, theChar;
  if (Str == null)
    return NaN;
  Str = $trim(Str);
  if (Str.length == 0 || $indexOf(Str, fromCodePoint(47)) != -1 || $indexOf(Str, fromCodePoint(decimalCharacter_0)) != $lastIndexOf(Str, fromCodePoint(decimalCharacter_0)))
    return NaN;
  sb = new StringBuilder;
  for (i = 0; i < Str.length; i++) {
    theChar = Str.charCodeAt(i);
    if (theChar >= 48 && theChar <= 57)
      sb.string += String.fromCharCode(theChar);
    else if (theChar == decimalCharacter_0)
      sb.string += String.fromCharCode(theChar);
    else if (theChar == negSign || theChar == leftParen || theChar == rightParen)
      sb.string += String.fromCharCode(theChar);
    else if (!ignoreCharacter(theChar))
      return NaN;
  }
  newString = sb.string;
  newString.length > 2 && newString.charCodeAt(0) == leftParen && $charAt_0(newString, newString.length - 1) == rightParen && (newString = '-' + $substring_0(newString, 1, newString.length - 1));
  try {
    return __parseAndValidateDouble(newString);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 38))
      throw toJs($e0);
  }
  return NaN;
}

function getAngleMultiplier(Angle){
  $clinit_Util();
  var Rad, x_0, y_0;
  Rad = $intern_28 * Angle;
  x_0 = AproxIt($wnd.Math.cos(Rad));
  y_0 = AproxIt($wnd.Math.sin(Rad));
  return new CFPoint(x_0, y_0);
}

function getAvgValueForValues(values){
  $clinit_Util();
  var sumNonNaN, value_0, value$iterator;
  sumNonNaN = 0;
  for (value$iterator = new ArrayList$1(values); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    sumNonNaN += (checkCriticalNotNull(value_0) , value_0);
  }
  return sumNonNaN / values.array.length;
}

function getDataObjectForShape(shape_0, ge){
  if (shape_0.dataObject != null)
    return shape_0.dataObject;
  return ge.dataObject;
}

function getDefaultMaxRange(value_0, is100Multiplied){
  $clinit_Util();
  var divisor, mostSignificantDigit, nextRange, result;
  nextRange = 100;
  is100Multiplied && (value_0 = value_0 * 100);
  if (value_0 > 100) {
    divisor = 10;
    do {
      divisor *= 10;
      result = value_0 / divisor;
    }
     while (result > 1);
    divisor /= 10;
    mostSignificantDigit = $wnd.Math.floor(value_0 / divisor);
    mostSignificantDigit += 1;
    nextRange = mostSignificantDigit * divisor;
    is100Multiplied && (nextRange = nextRange / 100);
  }
   else 
    is100Multiplied && (nextRange = 1);
  return nextRange;
}

function getDouble(valueStr){
  $clinit_Util();
  var ch_0;
  try {
    if (valueStr != null && valueStr.length > 0) {
      ch_0 = valueStr.charCodeAt(0);
      if (ch_0 >= 97 && ch_0 <= 122 || ch_0 >= 65 && ch_0 <= 90)
        return NaN;
    }
    return __parseAndValidateDouble(valueStr);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      return extremeGetDouble(valueStr);
    }
     else 
      throw toJs($e0);
  }
}

function getDouble_0(valueStr, defaultValue){
  $clinit_Util();
  var result;
  result = getDouble(valueStr);
  if (isNaN_0((checkCriticalNotNull(result) , result)))
    return defaultValue;
  return checkCriticalNotNull(result) , result;
}

function getExceptionStackTrace(throwable){
  $clinit_Util();
  var array, element, element$index, element$max, sb;
  sb = new StringBuilder;
  if (throwable) {
    $append_3(sb, throwable.getMessage());
    array = (throwable.stackTrace == null && (throwable.stackTrace = $constructJavaStackTrace(throwable)) , throwable.stackTrace);
    if (array != null) {
      for (element$index = 0 , element$max = array.length; element$index < element$max; ++element$index) {
        element = array[element$index];
        sb.string += '\n';
        $append_3(sb, element.className + '.' + element.methodName + '(' + (element.fileName != null?element.fileName:'Unknown Source') + (element.lineNumber >= 0?':' + element.lineNumber:'') + ')');
      }
    }
  }
  return sb.string;
}

function getFillTransparencyPct(transPctStr){
  $clinit_Util();
  var transPct;
  transPct = getInt(transPctStr, 0);
  transPct > 100 && (transPct = 100);
  transPct < 0 && (transPct = 0);
  return round_int((transPct - 100) * -2.55);
}

function getInt(valueStr, defaultValue){
  $clinit_Util();
  var value_0;
  try {
    value_0 = __parseAndValidateInt(valueStr, 10);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      value_0 = defaultValue;
    }
     else 
      throw toJs($e0);
  }
  return value_0;
}

function getMaxValueForValues(values){
  $clinit_Util();
  var max_0, value_0, value$iterator;
  max_0 = $intern_20;
  for (value$iterator = new ArrayList$1(values); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    (checkCriticalNotNull(value_0) , value_0) > max_0 && (max_0 = (checkCriticalNotNull(value_0) , value_0));
  }
  return max_0;
}

function getMedianValueForValues(doubleVals){
  $clinit_Util();
  var middleItemIndex, remainder, val1, val2;
  sort_4(doubleVals.array, doubleVals.array.length, null);
  remainder = doubleVals.array.length % 2;
  if (remainder == 1) {
    middleItemIndex = round_int(doubleVals.array.length / 2);
    return checkNotNull((checkCriticalElementIndex(middleItemIndex, doubleVals.array.length) , castToDouble(doubleVals.array[middleItemIndex])));
  }
   else {
    middleItemIndex = round_int(doubleVals.array.length / 2);
    val1 = checkNotNull((checkCriticalElementIndex(middleItemIndex - 1, doubleVals.array.length) , castToDouble(doubleVals.array[middleItemIndex - 1])));
    val2 = checkNotNull((checkCriticalElementIndex(middleItemIndex, doubleVals.array.length) , castToDouble(doubleVals.array[middleItemIndex])));
    return (val1 + val2) / 2;
  }
}

function getMinValueForValues(values){
  $clinit_Util();
  var min_0, value_0, value$iterator;
  min_0 = $intern_19;
  for (value$iterator = new ArrayList$1(values); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    (checkCriticalNotNull(value_0) , value_0) < min_0 && (min_0 = (checkCriticalNotNull(value_0) , value_0));
  }
  return min_0;
}

function getMonthWithOffset(timeMS, offset){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year, month + offset, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getNearestShapeUnderPointForGEAry(x_0, y_0, geAry, rnd, comp, innerBnds, isHorizontal){
  $clinit_Util();
  var closerThanAnyPrevious, closestShape, dataObj, distanceFromPos, ge, j, k, path, pointInPath, shape_0, xyRange;
  distanceFromPos = 100000;
  closestShape = null;
  for (j = geAry.size_1() - 1; j >= 0; j--) {
    ge = castTo(geAry.get_1(j), 12);
    if (!!ge && !!ge.shapeAry) {
      for (k = ge.shapeAry.array.length - 1; k >= 0; k--) {
        shape_0 = castTo($get_2(ge.shapeAry, k), 6);
        if (!!shape_0 && (!!shape_0.fill_0 || !!shape_0.stroke_0)) {
          path = shape_0.path;
          if (path) {
            isHorizontal?(xyRange = $getYRangeForPath(path, innerBnds)):(xyRange = $getXRangeForPath(path, innerBnds));
            if ($canHavePointInPath(shape_0) && $shapeIsValidAnnotationPointIfAdding(comp, shape_0)) {
              dataObj = getDataObjectForShape(shape_0, ge);
              pointInPath = $pointInPath_1(rnd, x_0, y_0, new CFPath_3(xyRange));
              if (dataObj != null && instanceOf(dataObj, 18) && !!castTo(dataObj, 18).cell) {
                if (pointInPath) {
                  shape_0.comp = comp;
                  shape_0.dataObject == null && !!ge && (shape_0.dataObject = ge.dataObject);
                  return shape_0;
                }
                 else {
                  closerThanAnyPrevious = false;
                  if (isHorizontal) {
                    if (xyRange.y_0 < y_0 && y_0 - (xyRange.y_0 + xyRange.height_0) < distanceFromPos) {
                      distanceFromPos = y_0 - (xyRange.y_0 + xyRange.height_0);
                      closerThanAnyPrevious = true;
                    }
                     else if (xyRange.y_0 > y_0 && xyRange.y_0 - y_0 < distanceFromPos) {
                      distanceFromPos = xyRange.y_0 - y_0;
                      closerThanAnyPrevious = true;
                    }
                  }
                   else {
                    if (xyRange.x_0 < x_0 && x_0 - (xyRange.x_0 + xyRange.width_0) < distanceFromPos) {
                      distanceFromPos = x_0 - (xyRange.x_0 + xyRange.width_0);
                      closerThanAnyPrevious = true;
                    }
                     else if (xyRange.x_0 > x_0 && xyRange.x_0 - x_0 < distanceFromPos) {
                      distanceFromPos = xyRange.x_0 - x_0;
                      closerThanAnyPrevious = true;
                    }
                  }
                  if (closerThanAnyPrevious) {
                    shape_0.comp = comp;
                    shape_0.dataObject == null && !!ge && (shape_0.dataObject = ge.dataObject);
                    closestShape = shape_0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return closestShape;
}

function getNextMonth(timeMS){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year, month + 1, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getNextQuarter(timeMS){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year, month + 3, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getNextYear(timeMS){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year + 1, month, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getPercentileValueForValues(percentile, values){
  $clinit_Util();
  var numItems;
  if (percentile == 0.5)
    return getMedianValueForValues(values);
  numItems = toInt_0(fromDouble_0($wnd.Math.round(values.array.length * percentile)));
  sort_4(values.array, values.array.length, null);
  if (numItems - 1 >= 0)
    return checkNotNull((checkCriticalElementIndex(numItems - 1, values.array.length) , castToDouble(values.array[numItems - 1])));
  return NaN;
}

function getPointForAngle(Radius, Angle){
  $clinit_Util();
  var multiplier, x_0, y_0;
  multiplier = getAngleMultiplier(Angle);
  x_0 = multiplier.x_0 * Radius;
  y_0 = multiplier.y_0 * Radius;
  return new CFPoint(x_0, y_0);
}

function getPreviousMonth(timeMS){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year, month - 1, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getQuantileValue(quantile, values){
  var floorX, numItems, value_0, x_0;
  if (quantile == 0.5)
    return getMedianValueForValues(values);
  numItems = values.array.length;
  x_0 = quantile * (numItems - 1) + 1;
  floorX = round_int($wnd.Math.floor(x_0));
  value_0 = checkNotNull((checkCriticalElementIndex(floorX - 1, values.array.length) , castToDouble(values.array[floorX - 1]))) + x_0 % 1 * (checkNotNull((checkCriticalElementIndex(floorX, values.array.length) , castToDouble(values.array[floorX]))) - checkNotNull((checkCriticalElementIndex(floorX - 1, values.array.length) , castToDouble(values.array[floorX - 1]))));
  return value_0;
}

function getQuantileValuesForValues(quantiles, values){
  $clinit_Util();
  var i, percentile, quantileValues, totalPercentile;
  sort_4(values.array, values.array.length, null);
  quantiles < 3 && (quantiles = 3);
  quantiles > 10 && (quantiles = 10);
  percentile = 1 / quantiles;
  totalPercentile = percentile;
  quantileValues = initUnidimensionalArray(D_classLit, $intern_24, 41, quantiles - 1, 15, 1);
  for (i = 0; i < quantiles - 1; i++) {
    quantileValues[i] = getQuantileValue(1 - totalPercentile, values);
    totalPercentile += percentile;
  }
  return quantileValues;
}

function getQuarterWithOffset(timeMS, offset){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year, month + 3 * offset, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function getRangeIndexForValue(value_0, rangeValues, balancedDistribution, zeroLikeNoData){
  $clinit_Util();
  var minMax, minMax$iterator, rangeIndex;
  if (isNaN(value_0) || value_0 == 0 && zeroLikeNoData)
    return -1;
  rangeIndex = 0;
  for (minMax$iterator = new ArrayList$1(rangeValues); minMax$iterator.i < minMax$iterator.this$01.array.length;) {
    minMax = castTo($next_3(minMax$iterator), 48);
    if (balancedDistribution) {
      if (value_0 >= minMax.min_0 && value_0 <= minMax.max_0)
        break;
    }
     else {
      if (value_0 >= minMax.min_0 && value_0 <= minMax.max_0)
        break;
    }
    ++rangeIndex;
  }
  value_0 == castTo($get_2(rangeValues, rangeValues.array.length - 1), 48).max_0 && (rangeIndex = rangeValues.array.length - 1);
  if (rangeIndex < rangeValues.array.length)
    return rangeIndex;
  return -1;
}

function getRangeValues(minMax, balancedDistribution, numRanges){
  $clinit_Util();
  var curIndex, i, increment, lowValIndex, max_0, min_0, numInCurrentRange, numPerRange, range, ranges, remainingRanges, remainingValues, uniqueValInfoAry, uvi, uvi$iterator;
  ranges = new ArrayList;
  if (minMax.min_0 == minMax.max_0 && !isNaN_0(minMax.min_0)) {
    $add_1(ranges, new MinMax(minMax.min_0, minMax.min_0));
  }
   else if (balancedDistribution) {
    uniqueValInfoAry = getUniqueValueInfo(minMax.valueList);
    numPerRange = minMax.valueList.array.length / numRanges | 0;
    remainingRanges = numRanges;
    remainingValues = minMax.valueList.array.length;
    numInCurrentRange = 0;
    lowValIndex = 0;
    curIndex = 0;
    for (uvi$iterator = new ArrayList$1(uniqueValInfoAry); uvi$iterator.i < uvi$iterator.this$01.array.length;) {
      uvi = castTo($next_3(uvi$iterator), 131);
      if (remainingRanges == 1) {
        $add_1(ranges, new MinMax((checkCriticalElementIndex(lowValIndex, uniqueValInfoAry.array.length) , castTo(uniqueValInfoAry.array[lowValIndex], 131)).value_0, castTo($get_2(uniqueValInfoAry, uniqueValInfoAry.array.length - 1), 131).value_0));
        break;
      }
       else if (numInCurrentRange + uvi.count >= numPerRange) {
        if (lowValIndex == curIndex) {
          $add_1(ranges, new MinMax(uvi.value_0, uvi.value_0));
          lowValIndex = curIndex + 1;
          --remainingRanges;
          remainingValues -= uvi.count;
          numPerRange = remainingValues / remainingRanges | 0;
        }
         else {
          if (numPerRange - numInCurrentRange < numInCurrentRange + uvi.count - numPerRange) {
            $add_1(ranges, new MinMax((checkCriticalElementIndex(lowValIndex, uniqueValInfoAry.array.length) , castTo(uniqueValInfoAry.array[lowValIndex], 131)).value_0, (checkCriticalElementIndex(curIndex - 1, uniqueValInfoAry.array.length) , castTo(uniqueValInfoAry.array[curIndex - 1], 131)).value_0));
            lowValIndex = curIndex;
            --remainingRanges;
            remainingValues -= numInCurrentRange;
            numPerRange = remainingValues / remainingRanges | 0;
            numInCurrentRange = 0;
          }
           else {
            $add_1(ranges, new MinMax((checkCriticalElementIndex(lowValIndex, uniqueValInfoAry.array.length) , castTo(uniqueValInfoAry.array[lowValIndex], 131)).value_0, uvi.value_0));
            lowValIndex = curIndex + 1;
            --remainingRanges;
            remainingValues -= numInCurrentRange + uvi.count;
            numPerRange = remainingValues / remainingRanges | 0;
            numInCurrentRange = -uvi.count;
          }
        }
      }
      numInCurrentRange += uvi.count;
      ++curIndex;
    }
  }
   else {
    increment = (minMax.max_0 - minMax.min_0) / numRanges;
    min_0 = minMax.min_0;
    for (i = 0; i < numRanges; i++) {
      max_0 = min_0 + increment;
      $add_1(ranges, new MinMax(min_0, max_0));
      min_0 = max_0;
    }
    if (castTo($get_2(ranges, ranges.array.length - 1), 48).max_0 < minMax.max_0) {
      range = castTo($get_2(ranges, ranges.array.length - 1), 48);
      range.max_0 = minMax.max_0;
    }
  }
  return ranges;
}

function getRangeValuesWithUniqueVals(minMax, balancedDistribution, numRanges, uniqueVals){
  $clinit_Util();
  var entry, outerIter, ranges, val, val$iterator, val$iterator0, valList;
  if (uniqueVals.hashCodeMap.size_0 + uniqueVals.stringMap.size_0 <= numRanges) {
    ranges = new ArrayList;
    valList = new ArrayList;
    for (val$iterator0 = (outerIter = (new AbstractMap$1(uniqueVals)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); val$iterator0.val$outerIter2.hasNext_0();) {
      val = (entry = castTo(val$iterator0.val$outerIter2.next_1(), 44) , castToDouble(entry.getKey()));
      valList.array[valList.array.length] = val;
    }
    sort_4(valList.array, valList.array.length, null);
    for (val$iterator = new ArrayList$1(valList); val$iterator.i < val$iterator.this$01.array.length;) {
      val = castToDouble($next_3(val$iterator));
      $add_1(ranges, new MinMax((checkCriticalNotNull(val) , val), (checkCriticalNotNull(val) , val)));
    }
    return ranges;
  }
   else 
    return getRangeValues(minMax, balancedDistribution, numRanges);
}

function getShapeUnderPointForGEAry(x_0, y_0, geAry, rnd, comp){
  $clinit_Util();
  var ge, j, k, pointInPath, shape_0;
  for (j = geAry.size_1() - 1; j >= 0; j--) {
    ge = castTo(geAry.get_1(j), 12);
    if (!!ge && !!ge.shapeAry) {
      for (k = ge.shapeAry.array.length - 1; k >= 0; k--) {
        shape_0 = castTo($get_2(ge.shapeAry, k), 6);
        if (shape_0) {
          pointInPath = $pointInPath_0(shape_0, x_0, y_0, rnd);
          if (pointInPath) {
            shape_0.comp = comp;
            shape_0.dataObject == null && !!ge && (shape_0.dataObject = ge.dataObject);
            return shape_0;
          }
        }
      }
    }
  }
  return null;
}

function getStdDevValueForValues(mean, values){
  var calcVals, newVal, value_0, value$iterator;
  calcVals = new ArrayList_0(values.array.length);
  for (value$iterator = new ArrayList$1(values); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    newVal = (checkCriticalNotNull(value_0) , value_0) - mean;
    $add_1(calcVals, newVal * newVal);
  }
  return $wnd.Math.sqrt(getAvgValueForValues(calcVals));
}

function getStdDeviationsForValues(numDeviations, values){
  $clinit_Util();
  var above, devAmt, mean, stdDev;
  above = true;
  if (numDeviations < 0) {
    above = false;
    numDeviations *= -1;
  }
  mean = getAvgValueForValues(values);
  stdDev = getStdDevValueForValues(mean, values);
  devAmt = stdDev * numDeviations;
  return above?mean + devAmt:mean - devAmt;
}

function getStyleFromString(value_0){
  $clinit_Util();
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    switch (value_0) {
      case 'bold':
        return 1;
      case 'italic':
        return 2;
      case 'bold-italic':
        return 3;
      case 'plain':
      default:return 0;
    }
  }
  return 0;
}

function getTwoDigitInt(value_0){
  $clinit_Util();
  var result;
  result = '' + value_0;
  result.length < 2 && (result = '0' + result);
  return result;
}

function getUniqueValueInfo(valueList){
  var lastValue, numUniqueVals, uniqueValInfoAry, uniqueValueCount, value_0, value$iterator;
  uniqueValInfoAry = new ArrayList;
  sort_4(valueList.array, valueList.array.length, null);
  uniqueValueCount = 0;
  numUniqueVals = 0;
  lastValue = NaN;
  for (value$iterator = new ArrayList$1(valueList); value$iterator.i < value$iterator.this$01.array.length;) {
    value_0 = castToDouble($next_3(value$iterator));
    checkCriticalNotNull(value_0);
    if (value_0 == lastValue) {
      ++numUniqueVals;
    }
     else {
      uniqueValueCount > 0 && $add_1(uniqueValInfoAry, new UniqueValInfo((checkCriticalNotNull(lastValue) , lastValue), numUniqueVals));
      numUniqueVals = 1;
      ++uniqueValueCount;
    }
    lastValue = value_0;
  }
  $add_1(uniqueValInfoAry, new UniqueValInfo((checkCriticalNotNull(lastValue) , lastValue), numUniqueVals));
  return uniqueValInfoAry;
}

function getYearWithOffset(timeMS, offset){
  $clinit_Util();
  var month, newDate, tmpDate, year;
  tmpDate = new Date_4(timeMS);
  month = tmpDate.jsdate.getMonth();
  year = tmpDate.jsdate.getFullYear() - $intern_14;
  newDate = new Date_1(year + offset, month, 1);
  return fromDouble_0(newDate.jsdate.getTime());
}

function ignoreCharacter(charToTest){
  var testChar, testChar$array, testChar$index, testChar$max;
  for (testChar$array = charsToRemove , testChar$index = 0 , testChar$max = testChar$array.length; testChar$index < testChar$max; ++testChar$index) {
    testChar = testChar$array[testChar$index];
    if (testChar == charToTest)
      return true;
  }
  return false;
}

function isFalse(value_0){
  $clinit_Util();
  if ($equalsIgnoreCase('false', value_0))
    return true;
  return false;
}

function isLightColor(color_0){
  $clinit_Util();
  if (color_0.alpha_0 != 0 && color_0.alpha_0 < 80)
    return true;
  return 0.299 * color_0.red + 0.587 * color_0.green + 0.114 * color_0.blue > 186;
}

function isNever(value_0){
  $clinit_Util();
  if ($equalsIgnoreCase('never', value_0))
    return true;
  return false;
}

function isTrue(value_0){
  $clinit_Util();
  if ($equalsIgnoreCase('true', value_0))
    return true;
  return false;
}

function isYes(value_0){
  $clinit_Util();
  if ($equalsIgnoreCase('yes', value_0))
    return true;
  return false;
}

function removeDataObjectsFromShapesInGEAry(geAry){
  $clinit_Util();
  var ge, ge$iterator, shape_0, shape$iterator;
  if (!!geAry && geAry.size_1() > 0) {
    for (ge$iterator = geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      if (ge.shapeAry) {
        for (shape$iterator = new ArrayList$1(ge.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 6);
          shape_0.dataObject = null;
        }
      }
    }
  }
}

function typeIsDate(type_0){
  $clinit_Util();
  if ($equals_2(type_0, 'DATE') || $equals_2(type_0, 'DATETIME'))
    return true;
  return false;
}

function typeIsNumeric(type_0){
  $clinit_Util();
  if ($equals_2(type_0, 'LONG') || $equals_2(type_0, 'DECIMAL') || $equals_2(type_0, 'DOUBLE'))
    return true;
  return false;
}

var charsToRemove, decimalCharacter_0 = 46, leftParen = 40, negSign = 45, rightParen = 41;
function $clinit_Annotation(){
  $clinit_Annotation = emptyMethod;
  DEFAULT_HINT_COLOR = new CFColor_2('#99CCEE');
  DEFAULT_SECOND_HINT_COLOR = new CFColor_2('#ABABAB');
}

function $addBackChevron(this$static, prevAnnotation, top_0, left, enabled){
  var geAnot, hoverShape, leftChevronPoints, leftChevronShape, path;
  geAnot = this$static.popup;
  leftChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  leftChevronPoints[0] = new CFPoint(left + 10, top_0);
  leftChevronPoints[1] = new CFPoint(left + 4, top_0 + 5);
  leftChevronPoints[2] = new CFPoint(left + 10, top_0 + 10);
  path = new CFPath_13(leftChevronPoints, false);
  path.shouldAntiAlias = true;
  leftChevronShape = new CFShape_0(path, null, new CFStroke_1('#000000', 1));
  enabled || $setStroke(leftChevronShape, new CFStroke_1('CCCCCC', 1));
  !geAnot.shapeAry && (geAnot.shapeAry = new ArrayList);
  $add_1(geAnot.shapeAry, leftChevronShape);
  hoverShape = new CFShape_1(new CFRect(left - 10, top_0 - 4, 22, 18), ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.dataObject = prevAnnotation;
  enabled && (!geAnot.shapeAry && (geAnot.shapeAry = new ArrayList) , $add_1(geAnot.shapeAry, hoverShape));
}

function $addNextChevron(this$static, nextAnnotation, top_0, left, enabled){
  var geAnot, hoverShape, path, rightChevronPoints, rightChevronShape;
  geAnot = this$static.popup;
  rightChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  rightChevronPoints[0] = new CFPoint(left + 4, top_0);
  rightChevronPoints[1] = new CFPoint(left + 10, top_0 + 5);
  rightChevronPoints[2] = new CFPoint(left + 4, top_0 + 10);
  path = new CFPath_13(rightChevronPoints, false);
  path.shouldAntiAlias = true;
  rightChevronShape = new CFShape_0(path, null, new CFStroke_1('#000000', 1));
  enabled || $setStroke(rightChevronShape, new CFStroke_1('CCCCCC', 1));
  !geAnot.shapeAry && (geAnot.shapeAry = new ArrayList);
  $add_1(geAnot.shapeAry, rightChevronShape);
  hoverShape = new CFShape_1(new CFRect(left + 2, top_0 - 4, 22, 18), ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.dataObject = nextAnnotation;
  enabled && (!geAnot.shapeAry && (geAnot.shapeAry = new ArrayList) , $add_1(geAnot.shapeAry, hoverShape));
}

function $addPopup(this$static, rnd, graph, annotRect, bubblePoint, arrowPos, top_0, left, aTextRect){
  var anotRect, bkgPath, blankAnnotation, closeLeft, closePath, closeShape, closeTop, geAnot, hoverShape, scale, textItems, ti, timeMS, titleText;
  geAnot = new GraphicElement;
  titleText = this$static.point1;
  timeMS = getTimeMSForDateString(this$static.point1, null, null, null);
  gt(timeMS.value_0, 0) && $indexOf(this$static.point1, fromCodePoint(84)) != -1 && (titleText = $replaceAll(this$static.point1, 'T', ' '));
  drawTextInBoundsWithGE(geAnot, rnd, aTextRect, $getLocalizedString1Param(graph, 'ANNOTATION_TITLE', titleText), ($clinit_CFFont() , ANNOTATION_USERNAME));
  closePath = new CFPath;
  scale = 1;
  graph.chart.scaleFactor > 1 && (scale = 1 + (graph.chart.scaleFactor - 1) / 2);
  closeLeft = annotRect.x_0 + annotRect.width_0 - 20;
  closeTop = annotRect.y_0 + 8;
  $add(closePath, new CFPathElement_0(0, closeLeft + 10 / scale, closeTop));
  $add(closePath, new CFPathElement_0(1, closeLeft, closeTop + 10 / scale));
  $add(closePath, new CFPathElement_0(0, closeLeft, closeTop));
  $add(closePath, new CFPathElement_0(1, closeLeft + 10 / scale, closeTop + 10 / scale));
  closePath.shouldAntiAlias = true;
  closeShape = new CFShape_0(closePath, null, new CFStroke_1('#000000', 1));
  !geAnot.shapeAry && (geAnot.shapeAry = new ArrayList);
  $add_1(geAnot.shapeAry, closeShape);
  hoverShape = new CFShape_1(new CFRect(closeLeft - 4 / scale, closeTop - 4 / scale, 18 / scale, 18 / scale), ($clinit_CFFill() , TRANSPARENT_0), null);
  blankAnnotation = new Annotation;
  hoverShape.dataObject = blankAnnotation;
  !geAnot.shapeAry && (geAnot.shapeAry = new ArrayList);
  $add_1(geAnot.shapeAry, hoverShape);
  top_0 += 30;
  ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, this$static.content_0, ANNOTATION_TEXT, 290, -1, -1));
  aTextRect = new CFRect(left, top_0, 290, ti.textDimension.height_0);
  textItems = $getCFTextItemsForWrappedLines(ti, rnd, aTextRect, ANNOTATION_TEXT, 0, 0);
  $addTextItems(geAnot, textItems);
  top_0 += ti.textDimension.height_0;
  $setHeight(annotRect, top_0 + 10 - annotRect.y_0);
  bkgPath = new CFPath_6(annotRect, 4, bubblePoint, arrowPos);
  anotRect = new CFShape_0(bkgPath, new CFFill(($clinit_CFColor() , WHITE)), new CFStroke_1('#B4B8BA', 1));
  !geAnot.shapeAry && (geAnot.shapeAry = new ArrayList);
  $add_0(geAnot.shapeAry, 0, anotRect);
  this$static.popup = geAnot;
}

function $addPopupsForList(this$static, graph, rnd, textRect, annotations){
  var aTextRect, annot, annot$iterator, annotRect, arrowPos, bubblePoint, dim, dimOf, i, left, ofText, ti, top_0, topOffset, totalHeight, totalWidth;
  annotRect = new CFRect(textRect.x_0 - 335, textRect.y_0, 320, 1);
  bubblePoint = new CFPoint(textRect.x_0 - 5, textRect.y_0 + textRect.height_0 / 2 + 3);
  arrowPos = 3;
  if (annotRect.x_0 < 0) {
    $setX_0(annotRect, textRect.x_0 + textRect.width_0 + 15);
    arrowPos = 1;
  }
  if (annotRect.x_0 + annotRect.width_0 > $getRight(graph.bnds)) {
    $setX_0(annotRect, textRect.x_0 + textRect.width_0 / 2 - 160);
    $setY_0(annotRect, textRect.y_0 + textRect.height_0 + 20);
    bubblePoint = new CFPoint(textRect.x_0 + textRect.width_0 / 2, textRect.y_0 + textRect.height_0 / 2);
    annotRect.x_0 + annotRect.width_0 > $getRight(graph.bnds) && $setRight(annotRect, $getRight(graph.bnds) - 2);
    annotRect.x_0 < 0 && (annotRect.x_0 = 2);
    arrowPos = 2;
  }
  this$static.hintRect = textRect;
  top_0 = annotRect.y_0 + 10;
  left = annotRect.x_0 + 10;
  aTextRect = new CFRect(left, top_0, 191, 20);
  for (annot$iterator = annotations.iterator(); annot$iterator.hasNext_0();) {
    annot = castTo(annot$iterator.next_1(), 46);
    topOffset = 0;
    if (graph.isHorizontal) {
      totalHeight = (ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, annot.content_0, ($clinit_CFFont() , ANNOTATION_TEXT), 290, -1, -1)) , 40 + ti.textDimension.height_0 + 10);
      top_0 + totalHeight > $getBottom(graph.bnds) && (topOffset = $getBottom(graph.bnds) - (totalHeight + 2) - top_0);
      top_0 + topOffset < 0 && (topOffset = 2 - top_0);
      if (topOffset != 0) {
        aTextRect.y_0 = top_0 + topOffset;
        $setY_0(annotRect, annotRect.y_0 + topOffset);
        annot.horzTopOffset = topOffset;
      }
    }
    $addPopup(annot, rnd, graph, annotRect, bubblePoint, arrowPos, top_0 + topOffset, left, aTextRect);
    annotRect.y_0 = top_0 - 10;
    aTextRect.y_0 = top_0;
    annot.canDelete && $addTrashIcon(annot, round_int(annotRect.y_0 + annotRect.height_0 - 25 + topOffset), round_int(annotRect.x_0 + annotRect.width_0) - 20, graph);
  }
  if (annotations.size_1() > 1) {
    dim = rnd.measureText_0(getString('ANNOTATION_TITLE', graph.chart.locale) + ('' + this$static.point1), ($clinit_CFFont() , ANNOTATION_USERNAME));
    dimOf = rnd.measureText_0($getLocalizedString2Params(graph, '5', '5'), ANNOTATION_TEXT);
    totalWidth = 20 + round_int(dimOf.width_0) + 14;
    left = left + dim.width_0 + (annotRect.x_0 + annotRect.width_0 - 20 - (left + dim.width_0 + totalWidth)) / 2;
    for (i = 0; i < annotations.size_1(); i++) {
      annot = castTo(annotations.get_1(i), 46);
      ofText = $getLocalizedString2Params(graph, '' + (i + 1), '' + annotations.size_1());
      i > 0?$addBackChevron(annot, castTo(annotations.get_1(i - 1), 46), top_0 + annot.horzTopOffset + 3, left, true):$addBackChevron(annot, null, top_0 + annot.horzTopOffset + 3, left, false);
      i < annotations.size_1() - 1?$addNextChevron(annot, castTo(annotations.get_1(i + 1), 46), top_0 + annot.horzTopOffset + 3, left + 10 + dimOf.width_0 + 14, true):$addNextChevron(annot, null, top_0 + annot.horzTopOffset + 3, left + 10 + dimOf.width_0 + 14, false);
      $addTextItem(annot.popup, new CFTextItem_0(ofText, ANNOTATION_TEXT, round_int(left + 10 + 7), round_int(top_0 + annot.horzTopOffset + 13)));
    }
  }
}

function $addTrashIcon(this$static, top_0, left, graph){
  var graphScale, hoverShape, scale, trashPath, trashShape;
  scale = 1;
  graphScale = graph.chart.scaleFactor;
  graphScale > 1 && (scale = 1 + (graphScale - 1) / 2);
  trashPath = new CFPath_3(new CFRect(left, top_0, 11 / scale, 15 / scale));
  trashShape = new CFShape_0(trashPath, null, new CFStroke_1('#C92E25', 2 / graphScale));
  $addShape(this$static.popup, trashShape);
  trashPath = new CFPath_1(left - 2 / scale, top_0, left + 13 / scale, top_0);
  trashShape = new CFShape_0(trashPath, null, new CFStroke_1('#C92E25', 2 / graphScale));
  $addShape(this$static.popup, trashShape);
  trashPath = new CFPath_1(left + 3 / scale, top_0, left + 3 / scale, top_0 + 15 / scale);
  $add(trashPath, new CFPathElement_0(0, left + 7 / scale, top_0));
  $add(trashPath, new CFPathElement_0(1, left + 7 / scale, top_0 + 15 / scale));
  trashShape = new CFShape_0(trashPath, null, new CFStroke_1('#C92E25', 1 / graphScale));
  $addShape(this$static.popup, trashShape);
  trashPath = new CFPath_3(new CFRect(left + 2 / scale, top_0 - 3 / scale, 6 / scale, 3 / scale));
  trashShape = new CFShape_0(trashPath, null, new CFStroke_1('#C92E25', 1 / graphScale));
  $addShape(this$static.popup, trashShape);
  hoverShape = new CFShape_1(new CFRect(left - 4 / scale, top_0 - 4 / scale, 19 / scale, 23 / scale), new CFFill_1('#FFFFFF80'), null);
  hoverShape.dataObject = 'deleteAnnotation';
  $addShape(this$static.popup, hoverShape);
}

function Annotation(){
  $clinit_Annotation();
  this.p1Grains = new HashMap;
  this.p2Grains = new HashMap;
}

function addLargerHitRectForMobile(graph, annotations, ge, hintRect){
  var mobileHitRect, mobileHitShape;
  mobileHitRect = new CFRect(0, 0, 30, 30);
  $setCenterX(mobileHitRect, hintRect.x_0 + hintRect.width_0 / 2);
  $setCenterY(mobileHitRect, hintRect.y_0 + hintRect.height_0 / 2);
  mobileHitShape = new CFShape_1(mobileHitRect, new CFFill(($clinit_CFColor() , TRANSPARENT)), new CFStroke(TRANSPARENT, 1));
  !$getAnnotationView(graph) && $setHoverText_8(mobileHitShape, castTo(annotations.get_1(0), 46).content_0);
  $addShape_0(ge, mobileHitShape, annotations);
}

function createAndGetAnnotationHint(graph, label_0, point, annotations, rnd){
  $clinit_Annotation();
  var ai, bkgPath, bkgPath2, bkgRect, bkgRect2, bubbleColor, dim, ge, hintRect, hintRect2, hintRectWidth, innerBnds, labelFont, maxRight, ti;
  ai = null;
  ge = new GraphicElement;
  labelFont = new CFFont_0(null, 10, ($clinit_CFColor() , WHITE));
  labelFont.face_0 = 1;
  if (graph.isHorizontal) {
    innerBnds = $getInnerBoundsRect($getValueScaleByNumber(graph, 0));
    if (innerBnds) {
      dim = rnd.measureText_0(label_0, labelFont);
      hintRectWidth = round_int(dim.width_0) + 8;
      hintRectWidth < 15 && (hintRectWidth = 15);
      $setX(point, $getRight(graph.bnds) - 32);
      !!$getAnnotationView(graph) && $getAnnotationView(graph).position == 2 && $setX(point, $getAnnotationView(graph).bnds.x_0 - 32 + 4);
      !!$getLegend(graph) && $getLegend(graph).position == 2 && $setX(point, $getLegend(graph).bnds.x_0 - 32 + 4);
      hintRect = new CFRect(point.x_0 + 3, 0, hintRectWidth, 16);
      $setCenterY(hintRect, point.y_0);
      bkgPath = getAnnotationHintPath(hintRect, point, graph.isHorizontal);
      bubbleColor = DEFAULT_HINT_COLOR;
      !!castTo(annotations.get_1(0), 46).hintColor && (bubbleColor = castTo(annotations.get_1(0), 46).hintColor);
      graph.chart.inAddAnnotationMode && (bubbleColor = new CFColor_2('#EEEEEE'));
      bkgRect = new CFShape_0(bkgPath, new CFFill(bubbleColor), new CFStroke(WHITE, 1));
      !$getAnnotationView(graph) && $setHoverText_8(bkgRect, castTo(annotations.get_1(0), 46).content_0);
      $addShape_0(ge, bkgRect, annotations);
      if ($trim(label_0).length > 0) {
        ti = new CFTextItem_0(label_0, labelFont, toInt_0(fromDouble_0($wnd.Math.round(hintRect.x_0 + hintRect.width_0 / 2 - dim.width_0 / 2))), toInt_0(fromDouble_0($wnd.Math.round(hintRect.y_0 + hintRect.height_0 / 2 - dim.height_0 / 2 + (isNaN_0(labelFont.capHeight) && (labelFont.capHeight = (isNaN_0(labelFont.lineHeight) && (labelFont.lineHeight = rnd.measureText_0('A', labelFont).height_0) , labelFont.lineHeight * 0.66)) , labelFont.capHeight) + 1))));
        !ge.textAry && (ge.textAry = new ArrayList);
        $add_1(ge.textAry, ti);
      }
      if (!!annotations && annotations.size_1() > 1) {
        hintRect2 = new CFRect(hintRect.x_0, hintRect.y_0, hintRect.width_0, hintRect.height_0);
        hintRect2.x_0 = hintRect2.x_0 + 2.5;
        hintRect2.y_0 = hintRect2.y_0 + 2.5;
        $setX(point, point.x_0 + 2.5);
        $setY(point, point.y_0 + 2.5);
        bubbleColor = DEFAULT_SECOND_HINT_COLOR;
        graph.chart.inAddAnnotationMode && (bubbleColor = new CFColor_2('#EEEEEE'));
        bkgPath2 = getAnnotationHintPath(hintRect2, point, graph.isHorizontal);
        bkgRect2 = new CFShape_0(bkgPath2, new CFFill(bubbleColor), new CFStroke(WHITE, 1));
        !$getAnnotationView(graph) && $setHoverText_8(bkgRect2, castTo(annotations.get_1(0), 46).content_0);
        $insertShape_0(ge, bkgRect2, annotations);
      }
      graph.chart.mobile && addLargerHitRectForMobile(graph, annotations, ge, hintRect);
      ai = new AnnotationInfo(hintRect, ge);
    }
  }
   else {
    innerBnds = $getInnerBoundsRect($getValueScaleByNumber(graph, 0));
    if (innerBnds) {
      maxRight = $getRight(graph.bnds);
      !!$getAnnotationView(graph) && $getAnnotationView(graph).position != 1 && $getBndsOrLastBnds($getAnnotationView(graph)).x_0 < maxRight && (maxRight = $getBndsOrLastBnds($getAnnotationView(graph)).x_0);
      dim = rnd.measureText_0(label_0, labelFont);
      hintRectWidth = round_int(dim.width_0) + 8;
      hintRectWidth < 18 && (hintRectWidth = 18);
      $setY(point, graph.bnds.y_0 + 20 + 2);
      !!$getLegend(graph) && $getLegend(graph).position == 3 && $setY(point, graph.bnds.y_0 + $getLegend(graph).bnds.height_0 + 20 - 5);
      graph.typeAttributes.isSpark && !graph.typeAttributes.isGrid && $setY(point, innerBnds.y_0 - 5);
      hintRect = new CFRect(0, 0, hintRectWidth, 15);
      $setCenterX(hintRect, point.x_0);
      $setBottom(hintRect, point.y_0 - 3);
      hintRect.x_0 < 0 && (hintRect.x_0 = 1);
      hintRect.x_0 + hintRect.width_0 > maxRight && (hintRect.x_0 = maxRight - 1 - hintRect.width_0);
      bkgPath = getAnnotationHintPath(hintRect, point, graph.isHorizontal);
      bubbleColor = DEFAULT_HINT_COLOR;
      !!castTo(annotations.get_1(0), 46).hintColor && (bubbleColor = castTo(annotations.get_1(0), 46).hintColor);
      graph.chart.inAddAnnotationMode && (bubbleColor = new CFColor_2('#EEEEEE'));
      bkgRect = new CFShape_0(bkgPath, new CFFill(bubbleColor), new CFStroke(WHITE, 1));
      !$getAnnotationView(graph) && $setHoverText_8(bkgRect, castTo(annotations.get_1(0), 46).content_0);
      $addShape_0(ge, bkgRect, annotations);
      if ($trim(label_0).length > 0) {
        ti = new CFTextItem_0(label_0, labelFont, toInt_0(fromDouble_0($wnd.Math.round(hintRect.x_0 + hintRect.width_0 / 2 - dim.width_0 / 2))), toInt_0(fromDouble_0($wnd.Math.round(hintRect.y_0 + hintRect.height_0 / 2 - dim.height_0 / 2 + (isNaN_0(labelFont.capHeight) && (labelFont.capHeight = (isNaN_0(labelFont.lineHeight) && (labelFont.lineHeight = rnd.measureText_0('A', labelFont).height_0) , labelFont.lineHeight * 0.66)) , labelFont.capHeight) + 2))));
        !ge.textAry && (ge.textAry = new ArrayList);
        $add_1(ge.textAry, ti);
      }
      if (!!annotations && annotations.size_1() > 1) {
        hintRect2 = new CFRect(hintRect.x_0, hintRect.y_0, hintRect.width_0, hintRect.height_0);
        hintRect2.x_0 = hintRect2.x_0 + -2.5;
        hintRect2.y_0 = hintRect2.y_0 + -2.5;
        $setY(point, point.y_0 - 2.5);
        $setX(point, point.x_0 - 2.5);
        bubbleColor = DEFAULT_SECOND_HINT_COLOR;
        graph.chart.inAddAnnotationMode && (bubbleColor = new CFColor_2('#EEEEEE'));
        bkgPath2 = getAnnotationHintPath(hintRect2, point, graph.isHorizontal);
        bkgRect2 = new CFShape_0(bkgPath2, new CFFill(bubbleColor), new CFStroke(WHITE, 1));
        !$getAnnotationView(graph) && $setHoverText_8(bkgRect2, castTo(annotations.get_1(0), 46).content_0);
        $insertShape_0(ge, bkgRect2, annotations);
      }
      graph.chart.mobile && addLargerHitRectForMobile(graph, annotations, ge, hintRect);
      ai = new AnnotationInfo(hintRect, ge);
    }
  }
  return ai;
}

function getAnnotationDataPoint(data_0, cell){
  $clinit_Annotation();
  var mdCell, mdIndex;
  mdIndex = $getMetDataIndexForName(data_0, 'ANNOTATION_DATE');
  if (mdIndex != -1) {
    mdCell = $getMetaDataCell(cell, mdIndex);
    if (mdCell) {
      return mdCell.valueStr;
    }
     else {
      mdCell = $getMetaDataCell($getFirstCell(cell.row), mdIndex);
      if (mdCell)
        return mdCell.valueStr;
    }
  }
   else if (cell.row) {
    return cell.row.name_0;
  }
  return null;
}

function getAnnotationHintPath(rect, point, isHorizontal){
  var pathStr, path;
  pathStr = '';
  pathStr += 'm ' + rect.x_0 + ',' + (rect.y_0 + 3) + '; ';
  if (isHorizontal) {
    pathStr += 'l ' + rect.x_0 + ',' + (point.y_0 - 3) + '; ';
    pathStr += 'l ' + point.x_0 + ',' + point.y_0 + '; ';
    pathStr += 'l ' + rect.x_0 + ',' + (point.y_0 + 3) + '; ';
  }
  pathStr += 'l ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0 - 3) + '; ';
  pathStr += 'q ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + 3) + ',' + (rect.y_0 + rect.height_0) + '; ';
  if (!isHorizontal) {
    if (point.x_0 - 3 < rect.x_0 + 3) {
      pathStr += 'l ' + point.x_0 + ',' + point.y_0 + '; ';
      pathStr += 'l ' + (rect.x_0 + 3 + 6) + ',' + (rect.y_0 + rect.height_0) + '; ';
    }
     else if (point.x_0 + 3 > rect.x_0 + rect.width_0 - 3) {
      pathStr += 'l ' + (rect.x_0 + rect.width_0 - 9) + ',' + (rect.y_0 + rect.height_0) + '; ';
      pathStr += 'l ' + point.x_0 + ',' + point.y_0 + '; ';
    }
     else {
      pathStr += 'l ' + (point.x_0 - 3) + ',' + (rect.y_0 + rect.height_0) + '; ';
      pathStr += 'l ' + point.x_0 + ',' + point.y_0 + '; ';
      pathStr += 'l ' + (point.x_0 + 3) + ',' + (rect.y_0 + rect.height_0) + '; ';
    }
  }
  pathStr += 'l ' + (rect.x_0 + rect.width_0 - 3) + ',' + (rect.y_0 + rect.height_0) + '; ';
  pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0 - 3) + '; ';
  pathStr += 'l ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + 3) + '; ';
  pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + rect.y_0 + ',' + (rect.x_0 + rect.width_0 - 3) + ',' + rect.y_0 + '; ';
  pathStr += 'l ' + (rect.x_0 + 3) + ',' + rect.y_0 + '; ';
  pathStr += 'q ' + rect.x_0 + ',' + rect.y_0 + ',' + rect.x_0 + ',' + (rect.y_0 + 3) + '; ';
  pathStr += 'z';
  return path = new CFPath , $setPathAry(path, getPathArrayForComplexString(pathStr)) , path;
}

function getJSONForAnnotation(annotation){
  var sb, sb_0;
  sb = new StringBuilder;
  $append_3($append_3(sb, getJsonNameValuePair_0('id', annotation.id_0)), ',');
  $append_3($append_3(sb, getJsonNameValuePair_0('cardId', annotation.cardId)), ',');
  $append_3($append_3(sb, getJsonNameValuePair_0('userId', annotation.userId)), ',');
  $append_3($append_3(sb, getJsonNameValuePair_0('createdDate', annotation.createdDate)), ',');
  annotation.channelId != null && $append_3($append_3(sb, getJsonNameValuePair_1('channelId', annotation.channelId)), ',');
  annotation.threadId != null && $append_3($append_3(sb, getJsonNameValuePair_1('threadId', annotation.threadId)), ',');
  !!annotation.hintColor && $append_3($append_3(sb, getJsonNameValuePair_1('color', $getHexString(annotation.hintColor))), ',');
  $append_3($append_3(sb, (sb_0 = new StringBuilder , $append_3(sb_0, getJsonNameValuePair_1('point1', annotation.point1)) , $size(annotation.p1Grains) > 0 && $append_3((sb_0.string += ',' , sb_0), getJSONForGrains(annotation.p1Grains, 'p1Grains')) , annotation.point2 != null && $append_3((sb_0.string += ',' , sb_0), getJsonNameValuePair_1('point2', annotation.point2)) , $size(annotation.p2Grains) > 0 && $append_3((sb_0.string += ',' , sb_0), getJSONForGrains(annotation.p2Grains, 'p2Grains')) , getJsonNamedObject('dataPoint', sb_0.string))), ',');
  $append_3($append_3(sb, getJsonNameValuePair_1('content', annotation.content_0)), ',');
  $append_3($append_3(sb, getJsonNameValuePair_2(annotation.canDelete)), ',');
  $append_3(sb, getJsonNameValuePair_1('userName', annotation.userName));
  return $clinit_StrUtil() , '{' + sb.string + '}';
}

function getJSONForGrains(grains, grainName){
  var entry, key, key$iterator, outerIter, result, result0, sb, value_0;
  sb = new StringBuilder;
  for (key$iterator = (outerIter = (new AbstractMap$1(grains)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
    key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
    value_0 = castToString(key == null?getEntryValueOrNull($getEntry(grains.hashCodeMap, null)):$get_3(grains.stringMap, key));
    sb.string.length > 0?$append_3((sb.string += ',' , sb), ($clinit_StrUtil() , result0 = '"' + jsonStringify(key) + '"' + ':' + ('"' + jsonStringify(value_0) + '"') , result0)):$append_3(sb, ($clinit_StrUtil() , result = '"' + jsonStringify(key) + '"' + ':' + ('"' + jsonStringify(value_0) + '"') , result));
  }
  return getJsonNamedObject(grainName, sb.string);
}

function getJSONForList(annotations){
  $clinit_Annotation();
  var annotation, annotation$iterator, sb;
  sb = new StringBuilder;
  for (annotation$iterator = annotations.iterator(); annotation$iterator.hasNext_0();) {
    annotation = castTo(annotation$iterator.next_1(), 46);
    sb.string.length > 0?$append_3((sb.string += ',' , sb), getJSONForAnnotation(annotation)):$append_3(sb, getJSONForAnnotation(annotation));
  }
  return $clinit_StrUtil() , '{' + getJsonNamedArray(sb.string) + '}';
}

defineClass(46, 1, {46:1}, Annotation);
_.canDelete = false;
_.cardId = 0;
_.createdDate = 0;
_.horzTopOffset = 0;
_.id_0 = 0;
_.isGrayedForSelection = false;
_.isVisible = false;
_.userId = 0;
var DEFAULT_HINT_COLOR, DEFAULT_SECOND_HINT_COLOR;
var Lcom_domo_charting_data_Annotation_2_classLit = createForClass('com.domo.charting.data', 'Annotation', 46);
function $compare_0(o1, o2){
  return $compareTo_3(new Long(o2.createdDate), new Long(o1.createdDate));
}

function Annotation$1(){
}

defineClass(194, 1, {}, Annotation$1);
_.compare = function compare_1(o1, o2){
  return $compare_0(castTo(o1, 46), castTo(o2, 46));
}
;
_.equals_0 = function equals_2(other){
  return this === other;
}
;
var Lcom_domo_charting_data_Annotation$1_2_classLit = createForClass('com.domo.charting.data', 'Annotation/1', 194);
function AnnotationInfo(hoverRect, ge){
  this.ge = ge;
  this.hoverRect = hoverRect;
}

defineClass(237, 1, {}, AnnotationInfo);
var Lcom_domo_charting_data_AnnotationInfo_2_classLit = createForClass('com.domo.charting.data', 'AnnotationInfo', 237);
function $clinit_Cell(){
  $clinit_Cell = emptyMethod;
  nameFromValueFormatter = new NumberFormatter;
  $setDecimalPlaces(nameFromValueFormatter, 5);
  $setAlwaysShowDecimalPlaces(nameFromValueFormatter, false);
  stringFromYearValueFormatter = new NumberFormatter;
  $setDivideScaleBy(stringFromYearValueFormatter, 'none', false);
  $setDecimalPlaces(stringFromYearValueFormatter, 0);
  $setUseThousandSeparator(stringFromYearValueFormatter);
}

function $addMetaData(this$static, index_0, value_0){
  var cell;
  if (this$static.metaData != null && index_0 < this$static.metaData.length) {
    cell = new Cell(value_0);
    this$static.metaData[index_0] = cell;
    return cell;
  }
  return null;
}

function $addMetaData_0(this$static, index_0, mdCell){
  var cell;
  if (this$static.metaData != null && index_0 < this$static.metaData.length) {
    cell = new Cell_0(mdCell);
    this$static.metaData[index_0] = cell;
  }
}

function $addMetaData_1(this$static, index_0, valueStr, type_0){
  var cell;
  if (this$static.metaData != null && index_0 < this$static.metaData.length) {
    cell = new Cell_1(valueStr, type_0);
    this$static.metaData[index_0] = cell;
  }
}

function $addMetaDataCells(this$static, size_0){
  this$static.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, size_0, 0, 1);
}

function $colIsHidden(this$static){
  if (this$static.column)
    return this$static.column.hidden;
  return false;
}

function $freeResources_9(this$static){
  var cell, cell$array, cell$index, cell$max;
  if (this$static.metaData != null && this$static.metaData.length > 0) {
    for (cell$array = this$static.metaData , cell$index = 0 , cell$max = cell$array.length; cell$index < cell$max; ++cell$index) {
      cell = cell$array[cell$index];
      !!cell && $freeResources_9(cell);
    }
  }
  this$static.column = null;
  this$static.row = null;
  this$static.valueStr = null;
  this$static.altName = null;
}

function $getColAltName(this$static){
  if (this$static.column)
    return this$static.column.altName;
  return '';
}

function $getColDataSourceId(this$static){
  if (this$static.column)
    return $getDataSourceId(this$static.column);
  return null;
}

function $getColDataType(this$static){
  if (this$static.column)
    return this$static.column.type_0;
  return null;
}

function $getColMax(this$static){
  var values;
  if (this$static.column)
    return values = $getValuesNonProjected(this$static.column, true, false) , getMaxValueForValues(values);
  return 0;
}

function $getColMin(this$static){
  var values;
  if (this$static.column)
    return values = $getValuesNonProjected(this$static.column, true, false) , getMinValueForValues(values);
  return 0;
}

function $getColName(this$static){
  if (this$static.column)
    return $getName(this$static.column);
  return '';
}

function $getColOrigName(this$static){
  if (this$static.column)
    return this$static.column.name_0;
  return '';
}

function $getColParentName(this$static){
  if (this$static.column)
    return this$static.column.parentName;
  return '';
}

function $getColSum(this$static){
  if (this$static.column)
    return $getSum(this$static.column);
  return 0;
}

function $getCurColIndex(this$static){
  if (this$static.column)
    return this$static.column.curIndex;
  return 0;
}

function $getCurRowIndex(this$static){
  if (this$static.row)
    return this$static.row.curIndex;
  return 0;
}

function $getLogOfAbsoluteVisibleColValue(this$static){
  var multiplier, totalLog, valueLog;
  multiplier = $getLogMultiplierForAbsoluteVisibleValues(this$static.column);
  totalLog = $getAbsoluteVisibleSumOfLogValues(this$static.column, multiplier);
  valueLog = $wnd.Math.log(this$static.value_0 * multiplier) / $wnd.Math.log(10);
  if (totalLog > 0)
    return valueLog / totalLog;
  return 0;
}

function $getMaxValue(this$static){
  var retValue;
  retValue = $getValue(this$static);
  !isNaN_0(this$static.projectedValue) && this$static.projectedValue > retValue && (retValue = this$static.projectedValue);
  return retValue;
}

function $getMetaDataCell(this$static, index_0){
  if (this$static.metaData != null && this$static.metaData.length > index_0 && index_0 >= 0)
    return this$static.metaData[index_0];
  return null;
}

function $getMetaDataCellValue(this$static, index_0){
  var mdCell;
  mdCell = $getMetaDataCell(this$static, index_0);
  if (mdCell)
    return $getValue(mdCell);
  return NaN;
}

function $getMinOrigValue(this$static){
  var retValue;
  retValue = this$static.value_0;
  !isNaN_0(this$static.projectedValue) && this$static.projectedValue < retValue && (retValue = this$static.projectedValue);
  return retValue;
}

function $getMinValue(this$static){
  var retValue;
  retValue = $getValue(this$static);
  !isNaN_0(this$static.projectedValue) && this$static.projectedValue < retValue && (retValue = this$static.projectedValue);
  return retValue;
}

function $getNumberFormatterForCol(col, allowAutoAbbrev){
  var numberFormatter;
  numberFormatter = new NumberFormatter;
  $applyColumnFormat(numberFormatter, col.format);
  allowAutoAbbrev || (numberFormatter.autoAbbreviate = false , numberFormatter.needsNewNumFormat = true);
  return numberFormatter;
}

function $getOrigColIndex(this$static){
  if (this$static.column)
    return this$static.column.origIndex;
  return 0;
}

function $getOrigRowIndex(this$static){
  if (this$static.row)
    return this$static.row.origIndex;
  return 0;
}

function $getOutlierValue(this$static){
  if (this$static.valueStr != null) {
    if ($equals_2(this$static.valueStr.toLowerCase(), 'true') || $equals_2(this$static.valueStr.toLowerCase(), 'yes'))
      return 1;
  }
  return 0;
}

function $getPctOfAbsRowValue(this$static, secondaryOnly){
  var totalValue;
  totalValue = $getRowAbsSum(this$static, secondaryOnly);
  if (totalValue != 0)
    return $getValue(this$static) / totalValue;
  return 0;
}

function $getPctOfAbsoluteVisibleColOrigValue(this$static){
  var totalValue;
  totalValue = $getAbsoluteVisibleSum(this$static.column, $intern_21, true);
  if (totalValue > 0)
    return this$static.value_0 / totalValue;
  return 0;
}

function $getPctOfAbsoluteVisibleColValue(this$static){
  var totalValue;
  totalValue = $getAbsoluteVisibleSum(this$static.column, $intern_11, false);
  if (totalValue > 0)
    return this$static.value_0 / totalValue;
  return 0;
}

function $getPctOfColValue(this$static){
  var totalValue;
  totalValue = $getSum(this$static.column);
  if (totalValue > 0)
    return this$static.value_0 / totalValue;
  return 0;
}

function $getPctOfRowValue(this$static){
  var totalValue;
  totalValue = $getSum(this$static.row);
  if (totalValue > 0)
    return this$static.value_0 / totalValue;
  return 0;
}

function $getPctOfRowValue_0(this$static, secondaryOnly){
  var totalValue;
  totalValue = $getRowSum(this$static, secondaryOnly);
  if (totalValue > 0)
    return $getValue(this$static) / totalValue;
  return 0;
}

function $getProjectedValueIfNotForecastBar(this$static){
  if (!$isForecastItem(this$static))
    return this$static.projectedValue;
  return NaN;
}

function $getRowAbsSum(this$static, secondaryOnly){
  if (this$static.row)
    return $calcAbsSum(this$static.row, secondaryOnly);
  return 0;
}

function $getRowDataSourceId(this$static){
  if (this$static.row)
    return $getDataSourceId(this$static.row);
  return null;
}

function $getRowDataType(this$static){
  if (this$static.row)
    return this$static.row.type_0;
  return null;
}

function $getRowFilterType(this$static){
  if (this$static.row)
    return $getFilterType(this$static.row);
  return null;
}

function $getRowIsCalendarColumn(this$static){
  if (this$static.row)
    return $isCalendarColumn(this$static.row);
  return false;
}

function $getRowName(this$static){
  if (this$static.row)
    return $getName(this$static.row);
  return '';
}

function $getRowOrigName(this$static){
  if (this$static.row)
    return this$static.row.name_0;
  return '';
}

function $getRowParentName(this$static){
  if (this$static.row)
    return this$static.row.parentName;
  return '';
}

function $getRowSum(this$static, secondaryOnly){
  if (this$static.row)
    return $getSum_0(this$static.row, secondaryOnly);
  return 0;
}

function $getValue(this$static){
  if (isNaN_0(this$static.altValue))
    return this$static.value_0;
  return this$static.altValue;
}

function $getValueAsString(this$static){
  var value_0;
  value_0 = '' + $getValue(this$static);
  value_0 = stripZerosAfterDecimal(value_0);
  return value_0;
}

function $getValueOrProjection(this$static, useAltValues){
  if (isNaN_0(this$static.projectedValue)) {
    return useAltValues?$getValue(this$static):this$static.value_0;
  }
  return this$static.projectedValue;
}

function $getValueStrOrValue(this$static){
  if (this$static.valueStr != null)
    return this$static.valueStr;
  else if (!isNaN_0(this$static.value_0))
    return $formatNumber_1(nameFromValueFormatter, this$static.value_0);
  return null;
}

function $getValueStrOrValueNoFormat(this$static){
  var autoAbbState, formattedVal;
  if (this$static.valueStr != null)
    return this$static.valueStr;
  else if (!isNaN_0(this$static.value_0)) {
    autoAbbState = nameFromValueFormatter.autoAbbreviate;
    $setAutoAbbreviateState(nameFromValueFormatter, false);
    formattedVal = $formatNumber_1(nameFromValueFormatter, this$static.value_0);
    $setAutoAbbreviateState(nameFromValueFormatter, autoAbbState);
    return formattedVal;
  }
  return null;
}

function $getValueStrOrValueWithColFormat(this$static, allowAutoAbbrev){
  var numberFormatter;
  if (this$static.valueStr != null)
    return this$static.valueStr;
  else if (!isNaN_0(this$static.value_0)) {
    if (!!this$static.column && !typeIsDate(this$static.column.type_0)) {
      numberFormatter = $getNumberFormatterForCol(this$static.column, allowAutoAbbrev);
      return $formatNumber_1(numberFormatter, this$static.value_0);
    }
    return $formatNumber_1(nameFromValueFormatter, this$static.value_0);
  }
  return null;
}

function $getXYCombination(this$static){
  return $getValue(this$static) + '|^|^|' + $getYValue(this$static);
}

function $getYValue(this$static){
  var yCell;
  if (this$static.metaData != null && this$static.metaData.length >= 1) {
    yCell = this$static.metaData[0];
    return $getValue(yCell);
  }
  return NaN;
}

function $hasXYLower(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 4)
    return true;
  return false;
}

function $hasXYLower2(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 8)
    return true;
  return false;
}

function $hasXYMedian(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 3)
    return true;
  return false;
}

function $hasXYMedian2(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 7)
    return true;
  return false;
}

function $hasXYOutlier(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 6)
    return true;
  return false;
}

function $hasXYUpper(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 5)
    return true;
  return false;
}

function $hasXYUpper2(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 9)
    return true;
  return false;
}

function $hasXyYValue(this$static){
  if (this$static.metaData != null && this$static.metaData.length >= 1)
    return true;
  return false;
}

function $isForecastItem(this$static){
  if (!isNaN_0(this$static.projectedValue) && !!this$static.row && $getDataSourceId(this$static.row) == null && neq(this$static.row.timeMS, 0))
    return true;
  return false;
}

function $isOnSecondaryScale(this$static){
  if (!!this$static.column && this$static.column.usesSecondaryScale)
    return true;
  return false;
}

function $resetMDSize(this$static, newSize){
  var i, newMetaData;
  if (this$static.metaData == null || newSize > this$static.metaData.length) {
    newMetaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, newSize, 0, 1);
    if (this$static.metaData != null) {
      for (i = 0; i < this$static.metaData.length; i++) {
        newMetaData[i] = this$static.metaData[i];
        this$static.metaData[i] = null;
      }
    }
    this$static.metaData = newMetaData;
  }
}

function $rowIsHidden(this$static){
  if (this$static.row)
    return this$static.row.hidden;
  return false;
}

function $setAlternateName(this$static, altName){
  this$static.altName = altName;
}

function $setAlternateValue(this$static, value_0){
  this$static.altValue = value_0;
}

function $setProjectedValue(this$static, value_0){
  this$static.projectedValue = value_0;
}

function $setRow(this$static, rowInfo){
  this$static.row = rowInfo;
}

function $setTimeMS(this$static, timeMS){
  this$static.timeMS = timeMS;
}

function $setValue(this$static, value_0){
  this$static.value_0 = value_0;
}

function $setValueStr(this$static, valueStr){
  this$static.valueStr = valueStr;
}

function $stripFirstMetaDataCell(this$static){
  var i, newCellArray;
  if (this$static.metaData != null && this$static.metaData.length > 1) {
    newCellArray = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, this$static.metaData.length - 1, 0, 1);
    for (i = 1; i < this$static.metaData.length; i++)
      newCellArray[i - 1] = this$static.metaData[i];
    this$static.metaData = newCellArray;
  }
}

function Cell(value_0){
  $clinit_Cell();
  this.value_0 = value_0;
}

function Cell_0(source){
  $clinit_Cell();
  var i;
  if (source) {
    this.valueStr = source.valueStr;
    this.value_0 = source.value_0;
    this.altValue = source.altValue;
    this.projectedValue = source.projectedValue;
    this.timeMS = source.timeMS;
    this.altName = source.altName;
    this.hidden = source.hidden;
    this.projectedIsActual = source.projectedIsActual;
    if (source.metaData != null) {
      this.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, source.metaData.length, 0, 1);
      for (i = 0; i < source.metaData.length; i++)
        this.metaData[i] = new Cell_0(source.metaData[i]);
    }
  }
}

function Cell_1(valueStr, type_0){
  $clinit_Cell();
  this.valueStr = valueStr;
  if (type_0.indexOf('DATE') != -1 || $equals_2(type_0, 'STRING')) {
    this.timeMS = getTimeMSForDateString(valueStr, null, null, null).value_0;
    eq(this.timeMS, 0) && (this.value_0 = checkNotNull(getDouble(valueStr)));
  }
}

defineClass(16, 1, {16:1}, Cell, Cell_0, Cell_1);
_.toString_0 = function toString_6(){
  var desc;
  desc = '' + this.value_0;
  this.valueStr != null && (desc = this.valueStr);
  !!this.column && (desc += ' : ' + $getName(this.column));
  !!this.row && (desc += ' : ' + $getName(this.row));
  return desc;
}
;
_.altValue = NaN;
_.cloneColIndex = 0;
_.hidden = false;
_.projectedIsActual = false;
_.projectedValue = NaN;
_.timeMS = 0;
_.value_0 = NaN;
var nameFromValueFormatter, stringFromYearValueFormatter;
var Lcom_domo_charting_data_Cell_2_classLit = createForClass('com.domo.charting.data', 'Cell', 16);
function ChartDef(){
}

defineClass(293, 1, {}, ChartDef);
_.disableDueToSize = false;
_.editMode = false;
_.isPageLayout = false;
_.mapZoomEnabled = false;
_.mobile = false;
_.showPoweredBy = false;
_.sizzle = false;
_.version_0 = 0;
var Lcom_domo_charting_data_ChartDef_2_classLit = createForClass('com.domo.charting.data', 'ChartDef', 293);
function $$init_4(this$static){
  this$static.cellMap = new HashMap;
}

function $addCopyOfCellsFromOtherRow(this$static, source, isRow, aggregateCells){
  var cellMap, entry, index_0, key, key$iterator, keys_0, outerIter;
  cellMap = source.cellMap;
  if (aggregateCells) {
    for (index_0 = 0; index_0 < cellMap.hashCodeMap.size_0 + cellMap.stringMap.size_0; index_0++)
      $addItem(this$static, new Cell_0(castTo($get_1(cellMap, valueOf(index_0)), 16)), isRow);
  }
   else {
    keys_0 = new AbstractMap$1(source.cellMap);
    for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
      $addItem_0(this$static, new Cell_0(castTo(getEntryValueOrNull($getEntry(cellMap.hashCodeMap, key)), 16)), isRow, key.value_0);
    }
  }
}

function $addItem(this$static, cell, isRow){
  $addItem_0(this$static, cell, isRow, $size(this$static.cellMap));
}

function $addItem_0(this$static, cell, isRow, otherIndex){
  ++this$static.count;
  !!cell && !isNaN_0($getValue(cell)) && (isNaN_0(this$static.sum)?(this$static.sum = $getValue(cell)):(this$static.sum += $getValue(cell)));
  isRow?(cell.row = this$static):(cell.column = this$static);
  $put_0(this$static.cellMap, valueOf(otherIndex), cell);
}

function $allValuesAppearToBeInteger(this$static){
  var cell, cell$iterator, entry, outerIter, value_0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (cell) {
      value_0 = $getValueOrProjection(cell, true);
      if (!doublesEqualWithinTolerance(value_0, toDouble_0(fromDouble_0($wnd.Math.round(value_0)))))
        return false;
    }
  }
  return true;
}

function $calcAbsSum(this$static, secondaryOnly){
  var cell, cell$iterator, entry, outerIter, tempSum;
  tempSum = 0;
  if (!this$static.hidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && !isNaN_0($getValue(cell)) && !$colIsHidden(cell) && (secondaryOnly && $isOnSecondaryScale(cell)?$getValue(cell) < 0?(tempSum += -$getValue(cell)):(tempSum += $getValue(cell)):!secondaryOnly && !$isOnSecondaryScale(cell) && ($getValue(cell) < 0?(tempSum += -$getValue(cell)):(tempSum += $getValue(cell))));
    }
  }
  return tempSum;
}

function $calcSum(this$static, useProjection, useAltValues, includeHidden){
  var cell, cell$iterator, entry, itemsAdded, newSum, outerIter, tempUseAltValues, thisType;
  newSum = 0;
  itemsAdded = false;
  thisType = 0;
  if (!this$static.hidden || includeHidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (cell) {
        tempUseAltValues = useAltValues;
        !!cell.row && cell.row.isOtherRow && (tempUseAltValues = false);
        thisType == 0 && (!!cell.row && cell.row == this$static?(thisType = 1):(thisType = 2));
        if (thisType == 1) {
          if (useProjection) {
            if (!isNaN_0($getValueOrProjection(cell, tempUseAltValues)) && !$colIsHidden(cell)) {
              newSum += $getValueOrProjection(cell, tempUseAltValues);
              itemsAdded = true;
            }
          }
           else {
            if (!isNaN_0($getValue(cell)) && !$colIsHidden(cell)) {
              tempUseAltValues?(newSum += $getValue(cell)):isNaN_0(cell.value_0) || (newSum += cell.value_0);
              itemsAdded = true;
            }
          }
        }
         else {
          if (useProjection) {
            if (!isNaN_0($getValueOrProjection(cell, tempUseAltValues)) && !$rowIsHidden(cell)) {
              newSum += $getValueOrProjection(cell, tempUseAltValues);
              itemsAdded = true;
            }
          }
           else {
            if (!isNaN_0($getValue(cell)) && !$rowIsHidden(cell)) {
              tempUseAltValues?(newSum += $getValue(cell)):isNaN_0(cell.value_0) || (newSum += cell.value_0);
              itemsAdded = true;
            }
          }
        }
      }
    }
  }
  if (itemsAdded)
    return newSum;
  return NaN;
}

function $clearAlternateValues(this$static){
  var cell, cell$iterator, entry, outerIter;
  if (this$static.cellMap) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && (cell.altValue = NaN);
    }
  }
}

function $freeCellMap(cellMap){
  var cell, cell$iterator, entry, outerIter;
  if (cellMap) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && $freeResources_9(cell);
    }
    $reset_5(cellMap);
  }
}

function $freeResources_10(this$static){
  $freeCellMap(this$static.cellMap);
  this$static.cellMap = null;
}

function $getAbsoluteVisibleSum(this$static, maxCount, origValuesOnly){
  var cell, cell$iterator, count, entry, outerIter, sumAbsolute, value_0;
  sumAbsolute = 0;
  count = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !$rowIsHidden(cell) && !isNaN_0($getValue(cell))) {
      value_0 = $getValue(cell);
      origValuesOnly && (value_0 = cell.value_0);
      value_0 < 0 && (value_0 *= -1);
      sumAbsolute += value_0;
    }
    ++count;
    if (count > maxCount)
      break;
  }
  return sumAbsolute;
}

function $getAbsoluteVisibleSumOfLogValues(this$static, multiplier){
  var cell, cell$iterator, count, entry, outerIter, sumAbsolute, value_0;
  sumAbsolute = 0;
  count = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !$rowIsHidden(cell) && !isNaN_0($getValue(cell))) {
      value_0 = $getValue(cell);
      value_0 < 0 && (value_0 *= -1);
      value_0 > 0 && (sumAbsolute += $wnd.Math.log(value_0 * multiplier) / $wnd.Math.log(10));
    }
    ++count;
    if (count > $intern_11)
      break;
  }
  return sumAbsolute;
}

function $getCardURN(this$static){
  if (this$static.metadata)
    return this$static.metadata.cardURN;
  return null;
}

function $getCellByCellIndex(this$static, index_0){
  var cell;
  cell = null;
  !!this$static.cellMap && (cell = castTo($get_1(this$static.cellMap, valueOf(index_0)), 16));
  return cell;
}

function $getCellValueByCellIndex(this$static, index_0){
  var cell;
  cell = $getCellByCellIndex(this$static, index_0);
  if (cell)
    return $getValue(cell);
  return NaN;
}

function $getColumnLabel(this$static){
  if (this$static.metadata)
    return this$static.metadata.label_0;
  return null;
}

function $getColumnName(this$static){
  if (this$static.metadata)
    return this$static.metadata.column;
  return null;
}

function $getCumMaxValue(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, max_0, outerIter;
  max_0 = NaN;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$colIsHidden(cell) && $getMaxValue(cell) > 0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (isNaN(max_0)?(max_0 = $getMaxValue(cell)):(max_0 += $getMaxValue(cell)));
  }
  return max_0;
}

function $getCumMinValue(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, min_0, outerIter;
  min_0 = NaN;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$colIsHidden(cell) && $getMinValue(cell) < 0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (isNaN(min_0)?(min_0 = $getMinValue(cell)):(min_0 += $getMinValue(cell)));
  }
  return min_0;
}

function $getDataSourceId(this$static){
  if (this$static.metadata)
    return this$static.metadata.dataSourceId;
  return null;
}

function $getDataType(this$static){
  if (this$static.metadata)
    return this$static.metadata.dataType;
  return null;
}

function $getFilterType(this$static){
  if (this$static.metadata)
    return this$static.metadata.filterType;
  return null;
}

function $getFirstCell(this$static){
  var cell, i, keys_0, list;
  if (!!this$static.cellMap && $size(this$static.cellMap) > 0) {
    if ($size(this$static.cellMap) == 1)
      return castTo($toArray(new AbstractMap$2(this$static.cellMap))[0], 16);
    for (i = 0; i < $size(this$static.cellMap); i++) {
      cell = castTo($get_1(this$static.cellMap, valueOf(i)), 16);
      if (cell)
        return cell;
    }
    keys_0 = new AbstractMap$1(this$static.cellMap);
    list = new ArrayList_1(keys_0);
    sort_4(list.array, list.array.length, null);
    return castTo($get_1(this$static.cellMap, (checkCriticalElementIndex(0, list.array.length) , list.array[0])), 16);
  }
  return null;
}

function $getGroupedCumMaxValue(this$static, secondBarFirstSrsIndex, forSecondaryScale){
  var cell, cell$iterator, entry, max1, max2, outerIter;
  max1 = NaN;
  max2 = NaN;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$colIsHidden(cell) && $getMaxValue(cell) > 0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && ($getCurColIndex(cell) < secondBarFirstSrsIndex?isNaN(max1)?(max1 = $getMaxValue(cell)):(max1 += $getMaxValue(cell)):isNaN(max2)?(max2 = $getMaxValue(cell)):(max2 += $getMaxValue(cell)));
  }
  isNaN(max2) && !isNaN(max1) && secondBarFirstSrsIndex == $size(this$static.cellMap) && (max2 = 0);
  if (!isNaN(max1) && !isNaN(max2) && max1 > max2)
    return max1;
  return max2;
}

function $getGroupedCumMinValue(this$static, secondBarFirstSrsIndex, forSecondaryScale){
  var cell, cell$iterator, entry, min1, min2, outerIter;
  min1 = NaN;
  min2 = NaN;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$colIsHidden(cell) && $getValue(cell) < 0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && ($getCurColIndex(cell) < secondBarFirstSrsIndex?isNaN(min1)?(min1 = $getValue(cell)):(min1 += $getValue(cell)):isNaN(min2)?(min2 = $getValue(cell)):(min2 += $getValue(cell)));
  }
  if (!isNaN(min1) && !isNaN(min2) && min1 < min2)
    return min1;
  return min2;
}

function $getLastCell(this$static){
  var keys_0, list;
  if ($size(this$static.cellMap) > 0) {
    if ($size(this$static.cellMap) == 1)
      return castTo($toArray(new AbstractMap$2(this$static.cellMap))[0], 16);
    keys_0 = new AbstractMap$1(this$static.cellMap);
    list = new ArrayList_1(keys_0);
    sort_4(list.array, list.array.length, null);
    return castTo($get_1(this$static.cellMap, $get_2(list, list.array.length - 1)), 16);
  }
  return null;
}

function $getLogMultiplierForAbsoluteVisibleValues(this$static){
  var cell, cell$iterator, count, entry, min_0, minLogVal, outerIter, val, value_0;
  min_0 = $intern_19;
  count = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !$rowIsHidden(cell) && !isNaN_0($getValue(cell))) {
      value_0 = $getValue(cell);
      value_0 < 0 && (value_0 *= -1);
      value_0 < min_0 && (min_0 = value_0);
    }
    ++count;
    if (count > $intern_11)
      break;
  }
  minLogVal = $wnd.Math.log(min_0) / $wnd.Math.log(10);
  if (minLogVal <= 0) {
    val = $wnd.Math.floor(-minLogVal) + 2;
    return $wnd.Math.pow(10, val);
  }
  return 1;
}

function $getMaxRow(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, max_0, maxRow, outerIter;
  max_0 = $intern_20;
  maxRow = null;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMaxValue(cell) > max_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale)) {
      max_0 = $getMaxValue(cell);
      maxRow = cell.row;
    }
  }
  return maxRow;
}

function $getMaxTimeMS(this$static){
  var cell, cell$iterator, entry, maxValue, outerIter;
  maxValue = $intern_30;
  new ArrayList;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && neq(cell.timeMS, 0) && gt(cell.timeMS, maxValue) && (maxValue = cell.timeMS);
  }
  return maxValue;
}

function $getMaxValueIncludingProjections(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, max_0, outerIter;
  max_0 = $intern_20;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMaxValue(cell) > max_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (max_0 = $getMaxValue(cell));
  }
  return max_0;
}

function $getMetaDataCellMaxValue(this$static, cellIndex){
  var cell, cell$iterator, entry, maxValue, outerIter, thisType, value_0;
  maxValue = $intern_20;
  thisType = 0;
  if (!this$static.hidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (cell) {
        thisType == 0 && (!!cell.row && cell.row == this$static?(thisType = 1):(thisType = 2));
        if ($getMetaDataCell(cell, cellIndex)) {
          if (thisType == 1) {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$colIsHidden(cell) && value_0 > maxValue && (maxValue = value_0);
          }
           else {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$rowIsHidden(cell) && value_0 > maxValue && (maxValue = value_0);
          }
        }
      }
    }
  }
  return maxValue;
}

function $getMetaDataCellMinValue(this$static, cellIndex){
  var cell, cell$iterator, entry, minValue, outerIter, thisType, value_0;
  minValue = $intern_19;
  thisType = 0;
  if (!this$static.hidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (cell) {
        thisType == 0 && (!!cell.row && cell.row == this$static?(thisType = 1):(thisType = 2));
        if ($getMetaDataCell(cell, cellIndex)) {
          if (thisType == 1) {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$colIsHidden(cell) && value_0 < minValue && (minValue = value_0);
          }
           else {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$rowIsHidden(cell) && value_0 < minValue && (minValue = value_0);
          }
        }
      }
    }
  }
  return minValue;
}

function $getMetaDataCellSum(this$static, cellIndex){
  var cell, cell$iterator, entry, outerIter, sum, thisType, value_0;
  sum = 0;
  thisType = 0;
  if (!this$static.hidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (cell) {
        thisType == 0 && (!!cell.row && cell.row == this$static?(thisType = 1):(thisType = 2));
        if ($getMetaDataCell(cell, cellIndex)) {
          if (thisType == 1) {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$colIsHidden(cell) && (sum += value_0);
          }
           else {
            value_0 = $getValue($getMetaDataCell(cell, cellIndex));
            !isNaN(value_0) && !$rowIsHidden(cell) && (sum += value_0);
          }
        }
      }
    }
  }
  return sum;
}

function $getMinOrigValue_0(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, min_0, outerIter;
  min_0 = $intern_19;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMinOrigValue(cell) < min_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (min_0 = $getMinOrigValue(cell));
  }
  return min_0;
}

function $getMinRow(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, min_0, minRow, outerIter;
  min_0 = $intern_19;
  minRow = null;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMinValue(cell) < min_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale)) {
      min_0 = $getMinValue(cell);
      minRow = cell.row;
    }
  }
  return minRow;
}

function $getMinTimeMS(this$static){
  var cell, cell$iterator, entry, minValue, outerIter;
  minValue = $intern_31;
  new ArrayList;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && neq(cell.timeMS, 0) && lt(cell.timeMS, minValue) && (minValue = cell.timeMS);
  }
  return minValue;
}

function $getMinValueIncludingProjections(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, min_0, outerIter;
  min_0 = $intern_19;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMinValue(cell) < min_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (min_0 = $getMinValue(cell));
  }
  return min_0;
}

function $getMinValueNonNegative(this$static, forSecondaryScale){
  var cell, cell$iterator, entry, min_0, outerIter;
  min_0 = $intern_19;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && $getMinValue(cell) > 0 && $getMinValue(cell) < min_0 && (!forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && (min_0 = $getMinValue(cell));
  }
  return min_0;
}

function $getName(this$static){
  if (this$static.altName != null)
    return this$static.altName;
  return this$static.name_0;
}

function $getNextToLastCell(this$static){
  var keys_0, list;
  if ($size(this$static.cellMap) > 0) {
    if ($size(this$static.cellMap) == 1)
      return castTo($toArray(new AbstractMap$2(this$static.cellMap))[0], 16);
    keys_0 = new AbstractMap$1(this$static.cellMap);
    list = new ArrayList_1(keys_0);
    sort_4(list.array, list.array.length, null);
    return castTo($get_1(this$static.cellMap, $get_2(list, list.array.length - 2)), 16);
  }
  return null;
}

function $getOrigValuesNonProjected(this$static, checkScale, forSecondaryScale){
  var cell, cell$iterator, entry, outerIter, values;
  values = new ArrayList;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && !isNaN_0(cell.value_0) && (!checkScale || !forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && $add_1(values, cell.value_0);
  }
  return values;
}

function $getOriginalVisibleSum(this$static){
  var cell, cell$iterator, entry, outerIter, sumOrig;
  sumOrig = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$rowIsHidden(cell) && !$colIsHidden(cell) && !isNaN_0(cell.value_0) && (sumOrig += cell.value_0);
  }
  return sumOrig;
}

function $getParentDisplayName(this$static){
  if (this$static.parentDisplayName != null)
    return this$static.parentDisplayName;
  return this$static.parentName;
}

function $getSum(this$static){
  isNaN_0(this$static.sum) && (this$static.sum = $calcSum(this$static, false, true, false));
  return this$static.sum;
}

function $getSum_0(this$static, secondaryOnly){
  if (secondaryOnly) {
    isNaN_0(this$static.secondarySum) && $recalcSum(this$static, true);
    return this$static.secondarySum;
  }
   else {
    isNaN_0(this$static.primarySum) && $recalcSum(this$static, false);
    return this$static.primarySum;
  }
}

function $getSumForSecondary(this$static){
  var cell, cell$iterator, entry, outerIter, sumSecondary;
  sumSecondary = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && cell.column.usesSecondaryScale && (sumSecondary += $getValue(cell));
  }
  return sumSecondary;
}

function $getSumOfPositiveValues(this$static){
  var cell, cell$iterator, entry, outerIter, sumPositives;
  sumPositives = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !$colIsHidden(cell) && !$rowIsHidden(cell) && cell.value_0 > 0 && (sumPositives += cell.value_0);
  }
  return sumPositives;
}

function $getSumOfPositiveValues_0(this$static, numLines, numCols){
  var cell, i, sumPositives;
  sumPositives = 0;
  for (i = numLines; i < numCols; i++) {
    cell = castTo($get_1(this$static.cellMap, valueOf(i)), 16);
    !!cell && !$colIsHidden(cell) && !$rowIsHidden(cell) && cell.value_0 > 0 && (sumPositives += cell.value_0);
  }
  return sumPositives;
}

function $getValuesNonProjected(this$static, checkScale, forSecondaryScale){
  var cell, cell$iterator, entry, outerIter, values;
  values = new ArrayList;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && !isNaN_0($getValue(cell)) && (!checkScale || !forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && $add_1(values, $getValue(cell));
  }
  return values;
}

function $getValuesWithDisplayLimitOtherHidden(this$static, data_0, displayLimit, checkScale, forSecondaryScale){
  var cell, index_0, row, values;
  values = new ArrayList;
  index_0 = 0;
  row = $getFirstVisibleRow(data_0);
  while (index_0 < displayLimit && !!row) {
    cell = castTo($get_1(this$static.cellMap, valueOf(row.origIndex)), 16);
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && !isNaN_0($getValue(cell)) && (!checkScale || !forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && $add_1(values, $getValue(cell));
    ++index_0;
    row = $getNextVisibleRow(data_0, row);
  }
  return values;
}

function $getYValues(this$static, checkScale, forSecondaryScale){
  var cell, cell$iterator, entry, outerIter, values;
  values = new ArrayList;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !!cell.column && !$colIsHidden(cell) && !$rowIsHidden(cell) && !isNaN_0($getMetaDataCellValue(cell, 0)) && (!checkScale || !forSecondaryScale && !cell.column.usesSecondaryScale || forSecondaryScale && cell.column.usesSecondaryScale) && $add_1(values, $getMetaDataCellValue(cell, 0));
  }
  return values;
}

function $hasNullValues(this$static){
  var cell, cell$iterator, entry, outerIter;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !$colIsHidden(cell) && !$rowIsHidden(cell) && isNaN_0($getValue(cell)))
      return true;
  }
  return false;
}

function $isCalendarColumn(this$static){
  if (this$static.metadata)
    return this$static.metadata.calendarColumn;
  return false;
}

function $oneOrMoreCellsHaveValue(this$static){
  var cell, cell$iterator, entry, outerIter;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    if (!!cell && !$colIsHidden(cell) && !$rowIsHidden(cell) && !isNaN_0($getValue(cell)))
      return true;
  }
  return false;
}

function $recalcSum(this$static, secondaryOnly){
  var cell, cell$iterator, entry, outerIter, tempSum;
  tempSum = 0;
  if (!this$static.hidden) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && !isNaN_0($getValue(cell)) && !$colIsHidden(cell) && (secondaryOnly && $isOnSecondaryScale(cell)?(tempSum += $getValueOrProjection(cell, true)):!secondaryOnly && !$isOnSecondaryScale(cell) && (tempSum += $getValueOrProjection(cell, true)));
    }
  }
  secondaryOnly?(this$static.secondarySum = tempSum):(this$static.primarySum = tempSum);
}

function $removeCellsForColumnsGreaterThan(this$static){
  var cell, colIndex, column, index_0, keys_0, length_0, list;
  keys_0 = new AbstractMap$1(this$static.cellMap);
  list = new ArrayList_1(keys_0);
  length_0 = list.array.length;
  for (index_0 = 0; index_0 < length_0; index_0++) {
    colIndex = (checkCriticalElementIndex(index_0, list.array.length) , castTo(list.array[index_0], 29));
    cell = castTo($get_1(this$static.cellMap, (checkCriticalElementIndex(index_0, list.array.length) , list.array[index_0])), 16);
    if (cell) {
      column = cell.column;
      !!column && column.curIndex >= $intern_21 && $remove(this$static.cellMap, colIndex);
    }
  }
}

function $resetSum(this$static){
  var cell, cell$iterator, entry, outerIter;
  this$static.sum = 0;
  for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
    cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
    !!cell && !isNaN_0($getValue(cell)) && (this$static.sum += $getValue(cell));
  }
}

function $setAltName(this$static, value_0){
  this$static.altName = value_0;
}

function $setCellMap(this$static, cellMap){
  this$static.cellMap = cellMap;
}

function $setCloneIndicies(this$static){
  var entry, index_0, index$iterator, outerIter, tmpCell;
  for (index$iterator = (outerIter = (new AbstractMap$1(this$static.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); index$iterator.val$outerIter2.hasNext_0();) {
    index_0 = (entry = castTo(index$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
    tmpCell = castTo($get_1(this$static.cellMap, index_0), 16);
    !!tmpCell && (tmpCell.cloneColIndex = index_0.value_0);
  }
}

function $setCurIndex(this$static, value_0){
  this$static.curIndex = value_0;
}

function $setFormat(this$static, format){
  this$static.format = format;
}

function $setMapping(this$static, mapping){
  this$static.mapping = mapping;
}

function $setMetadata(this$static, metadata){
  this$static.metadata = metadata;
}

function $setName(this$static, value_0){
  this$static.name_0 = value_0;
}

function $setOrigIndex(this$static, value_0){
  this$static.origIndex = value_0;
}

function $setParentDisplayName(this$static, value_0){
  this$static.parentDisplayName = null;
  value_0 != null && value_0.length > 0 && (this$static.parentDisplayName = value_0);
}

function $setParentName(this$static, value_0){
  this$static.parentName = value_0;
}

function $setSum(this$static, value_0){
  this$static.sum = value_0;
}

function $setTimeMS_0(this$static, value_0){
  this$static.timeMS = value_0;
}

function $updateColIndexsForAllCells(this$static){
  var cell, cell$iterator, entry, newCellMap, outerIter;
  newCellMap = new HashMap;
  if (this$static.cellMap) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && $put_0(newCellMap, valueOf($getOrigColIndex(cell)), cell);
    }
    $reset_5(this$static.cellMap);
  }
  this$static.cellMap = newCellMap;
}

function $updateRowIndexsForAllCells(this$static){
  var cell, cell$iterator, entry, newCellMap, outerIter;
  newCellMap = new HashMap;
  if (this$static.cellMap) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!cell && $put_0(newCellMap, valueOf($getOrigRowIndex(cell)), cell);
    }
    $reset_5(this$static.cellMap);
  }
  this$static.cellMap = newCellMap;
}

function ColRowInfo(){
  $$init_4(this);
}

function ColRowInfo_0(colRowInfo){
  $$init_4(this);
  this.origIndex = colRowInfo.origIndex;
  this.curIndex = colRowInfo.curIndex;
  this.count = colRowInfo.count;
  this.sum = colRowInfo.sum;
  this.primarySum = colRowInfo.primarySum;
  this.secondarySum = colRowInfo.secondarySum;
  this.name_0 = colRowInfo.name_0;
  this.type_0 = colRowInfo.type_0;
  this.timeMS = colRowInfo.timeMS;
  this.parentName = colRowInfo.parentName;
  this.parentDisplayName = colRowInfo.parentDisplayName;
  this.altName = colRowInfo.altName;
  this.hidden = colRowInfo.hidden;
  this.usesSecondaryScale = colRowInfo.usesSecondaryScale;
  this.isRunningTotal = colRowInfo.isRunningTotal;
  this.isCalculated = colRowInfo.isCalculated;
  this.isOtherRow = colRowInfo.isOtherRow;
  this.isForecastRow = colRowInfo.isForecastRow;
  this.format = colRowInfo.format;
  this.mapping = colRowInfo.mapping;
  !!colRowInfo.metadata && (this.metadata = new ColumnMetadata_0(colRowInfo.metadata));
  this.showAsFiltered = colRowInfo.showAsFiltered;
}

function ColRowInfo_1(source, isRow){
  $$init_4(this);
  this.parentName = source.parentName;
  this.parentDisplayName = source.parentDisplayName;
  this.name_0 = source.name_0;
  this.type_0 = source.type_0;
  neq(source.timeMS, 0) && (this.timeMS = source.timeMS);
  this.format = source.format;
  !!source.metadata && (this.metadata = new ColumnMetadata_0(source.metadata));
  this.showAsFiltered = source.showAsFiltered;
  $addCopyOfCellsFromOtherRow(this, source, isRow, false);
}

function ColRowInfo_2(name_0, type_0){
  $$init_4(this);
  this.name_0 = name_0;
  this.type_0 = type_0;
}

function ColRowInfo_3(parentName, name_0, type_0, index_0, cell, isRow, otherIndex){
  $$init_4(this);
  this.parentName = parentName;
  this.name_0 = name_0;
  this.type_0 = type_0;
  this.count = 1;
  this.origIndex = index_0;
  if (cell) {
    !!cell && !isNaN_0($getValue(cell)) && (isNaN_0(this.sum)?(this.sum = $getValue(cell)):(this.sum += $getValue(cell)));
    isRow?(cell.row = this):(cell.column = this);
  }
  $put_0(this.cellMap, valueOf(otherIndex), cell);
  type_0.indexOf('DATE') != -1 || $equals_2(type_0, 'STRING')?(this.timeMS = getTimeMSForDateString(name_0, parentName, null, null).value_0):$equals_2(type_0, 'LONG') && parentName != null && $equals_2(parentName, 'Year') && (this.timeMS = getTimeMSForYear(name_0).value_0);
}

function ColRowInfo_4(parentName, name_0, type_0, index_0){
  $$init_4(this);
  this.parentName = parentName;
  this.name_0 = name_0;
  this.type_0 = type_0;
  this.count = 0;
  this.origIndex = index_0;
  type_0.indexOf('DATE') != -1 && (this.timeMS = getTimeMSForDateString(name_0, parentName, null, null).value_0);
}

defineClass(7, 1, {7:1}, ColRowInfo, ColRowInfo_0, ColRowInfo_1, ColRowInfo_2, ColRowInfo_3, ColRowInfo_4);
_.toString_0 = function toString_7(){
  var retStr;
  retStr = '';
  this.name_0 != null && (retStr = this.name_0);
  this.type_0 != null && (retStr += ' : ' + this.type_0);
  return retStr;
}
;
_.count = 0;
_.curIndex = 0;
_.hidden = false;
_.hideScaleLabels = false;
_.isCalculated = false;
_.isForecastRow = false;
_.isOtherRow = false;
_.isRunningTotal = false;
_.origIndex = 0;
_.origSum = NaN;
_.primarySum = NaN;
_.secondarySum = NaN;
_.showAsFiltered = false;
_.sum = NaN;
_.sumWithProjections = NaN;
_.timeMS = 0;
_.usesSecondaryScale = false;
var Lcom_domo_charting_data_ColRowInfo_2_classLit = createForClass('com.domo.charting.data', 'ColRowInfo', 7);
function $setCalendarColumn(this$static, value_0){
  this$static.calendarColumn = value_0;
}

function $setCardURN(this$static, cardURN){
  this$static.cardURN = cardURN;
}

function $setColumn(this$static, column){
  this$static.column = column;
}

function $setDataSourceId(this$static, dataSourceId){
  this$static.dataSourceId = dataSourceId;
}

function $setDataType(this$static, dataType){
  this$static.dataType = dataType;
}

function $setFilterType(this$static, filterType){
  this$static.filterType = filterType;
}

function $setLabel(this$static, label_0){
  this$static.label_0 = label_0;
}

function $setType(this$static, theType){
  this$static.type_0 = theType;
}

function ColumnMetadata(){
}

function ColumnMetadata_0(source){
  source.type_0 != null && (this.type_0 = castToString(checkNotNull(source.type_0)));
  this.calendarColumn = source.calendarColumn;
  source.filterType != null && (this.filterType = castToString(checkNotNull(source.filterType)));
  source.dataSourceId != null && (this.dataSourceId = castToString(checkNotNull(source.dataSourceId)));
  source.column != null && (this.column = castToString(checkNotNull(source.column)));
  source.label_0 != null && (this.label_0 = castToString(checkNotNull(source.label_0)));
  source.dataType != null && (this.dataType = castToString(checkNotNull(source.dataType)));
  source.cardURN != null && (this.cardURN = castToString(checkNotNull(source.cardURN)));
}

function ColumnMetadata_1(theType){
  this.type_0 = theType;
}

defineClass(49, 1, {49:1}, ColumnMetadata, ColumnMetadata_0, ColumnMetadata_1);
_.calendarColumn = false;
var Lcom_domo_charting_data_ColumnMetadata_2_classLit = createForClass('com.domo.charting.data', 'ColumnMetadata', 49);
function $addScaleMarker(this$static, sm){
  if (sm) {
    !this$static.scaleMarkers && (this$static.scaleMarkers = new ArrayList);
    $add_1(this$static.scaleMarkers, sm);
  }
}

function ComponentDef(){
}

defineClass(137, 1, {137:1}, ComponentDef);
var Lcom_domo_charting_data_ComponentDef_2_classLit = createForClass('com.domo.charting.data', 'ComponentDef', 137);
function $getColorForAltValue(this$static, value_0, origColumnName, valueColumnName){
  if (valueColumnName != null && valueColumnName.length > 0 && $isMatchForDouble(this$static.filter, valueColumnName, origColumnName, value_0))
    return this$static.color_0;
  return null;
}

function $getColorForCategoryName(this$static, cell){
  var origRowName, parentName, rowName;
  if (cell) {
    if (!!cell.row && (neq(cell.row.timeMS, 0) || cell.row.type_0 != null && cell.row.type_0.indexOf('DATE') != -1))
      return $getColorForCategoryTime(this$static, cell);
    rowName = $getRowName(cell);
    origRowName = null;
    parentName = $getRowParentName(cell);
    if (cell.row) {
      origRowName = cell.row.name_0;
      origRowName != null && $equals_2(origRowName, rowName) && (origRowName = null);
    }
    if ($isMatchForName(this$static.filter, rowName, origRowName, parentName))
      return this$static.color_0;
  }
  return null;
}

function $getColorForCategoryTime(this$static, cell){
  var parentName, timeMS;
  if (!!cell && !!cell.row) {
    timeMS = cell.row.timeMS;
    compare_22(timeMS, 0) == 0 && (timeMS = getTimeMSForDateString($getRowName(cell), null, null, null).value_0);
    parentName = $getRowParentName(cell);
    if ($isMatchForTime(this$static.filter, timeMS, parentName))
      return this$static.color_0;
  }
  return null;
}

function $getColorForCellValue(this$static, cell, valueColumnName){
  var columnName, origColumnName, value_0;
  if (cell) {
    columnName = $getColName(cell);
    origColumnName = null;
    if (cell.column) {
      origColumnName = cell.column.name_0;
      origColumnName != null && $equals_2(origColumnName, columnName) && (origColumnName = null);
    }
    value_0 = cell.value_0;
    !!cell.column && cell.column.isRunningTotal && !isNaN_0(cell.altValue) && (value_0 = cell.altValue);
    if ($isMatchForDouble(this$static.filter, columnName, origColumnName, value_0))
      return this$static.color_0;
    if (valueColumnName != null && valueColumnName.length > 0 && $isMatchForDouble(this$static.filter, valueColumnName, origColumnName, value_0))
      return this$static.color_0;
  }
  return null;
}

function $getColorForNameFromColumnName(this$static, name_0, column){
  var columnName, origColumnName;
  if (column) {
    columnName = $getName(column);
    origColumnName = column.name_0;
    origColumnName != null && $equals_2(origColumnName, columnName) && (origColumnName = null);
    if ($isMatchForName(this$static.filter, name_0, origColumnName, columnName))
      return this$static.color_0;
  }
  return null;
}

function $getColorForSeriesName(this$static, column){
  var altName, columnName, origColumnName, parentName;
  if (column) {
    columnName = $getName(column);
    origColumnName = column.name_0;
    origColumnName != null && $equals_2(origColumnName, columnName) && (origColumnName = null);
    parentName = column.parentName;
    parentName == null && (parentName = column.name_0);
    if ($isMatchForName(this$static.filter, columnName, origColumnName, parentName))
      return this$static.color_0;
    altName = column.altName;
    if (altName != null && $isMatchForAltName(this$static.filter, altName))
      return this$static.color_0;
  }
  return null;
}

function ConditionalFormat(theFilter, theColor, theTextColor, theTextStyle, shouldApplyToRow){
  this.filter = theFilter;
  theColor != null && $equals_2(theColor.substr(0, 1), '#')?(this.color_0 = new CFColor_2(theColor)):(this.colorStr = theColor);
  this.textColor = theTextColor;
  this.textStyle = theTextStyle;
  this.applyToRow = ($clinit_Boolean() , shouldApplyToRow?true:false);
  this.textStyle != null && (this.style_0 = getStyleFromString(this.textStyle));
}

defineClass(119, 1, {119:1}, ConditionalFormat);
_.style_0 = 0;
var Lcom_domo_charting_data_ConditionalFormat_2_classLit = createForClass('com.domo.charting.data', 'ConditionalFormat', 119);
function $$init_5(this$static){
}

function $addExtraForcastItems(this$static, numItems, graph, method, periodOffset){
  var cell, colIndex, curCol, extraRowIndex, extraRows, firstColWithData, forecastPoint, forecastPoints, i, lastRow, newRow, regPoint, rowIndex;
  extraRows = new ArrayList;
  this$static.numProjectedRows > 0 && $clearProjectionRows(this$static);
  lastRow = castTo(this$static.rows_0.get_1(this$static.rows_0.size_1() - 1), 7);
  if (neq(lastRow.timeMS, 0)) {
    firstColWithData = -1;
    for (colIndex = 0; colIndex < $getNumCols(this$static); colIndex++) {
      curCol = castTo(this$static.cols_0.get_1(colIndex), 7);
      forecastPoints = getForecastPoints(colIndex, graph, numItems, method, periodOffset);
      if (!forecastPoints || forecastPoints.array.length == 0)
        continue;
      extraRowIndex = 0;
      firstColWithData == -1 && (firstColWithData = colIndex);
      for (i = forecastPoints.array.length - numItems; i < forecastPoints.array.length; i++) {
        forecastPoint = (checkCriticalElementIndex(i, forecastPoints.array.length) , castTo(forecastPoints.array[i], 10));
        newRow = null;
        if (colIndex == firstColWithData) {
          newRow = new ColRowInfo;
          $setTimeMS_0(newRow, fromDouble_0(forecastPoint.x_0));
          newRow.type_0 = lastRow.type_0;
          $setMetadata(newRow, new ColumnMetadata_0(lastRow.metadata));
          !newRow.metadata && (newRow.metadata = new ColumnMetadata);
          newRow.metadata.dataSourceId = null;
          $setParentDisplayName(newRow, $getParentDisplayName(lastRow));
          $setParentName(newRow, lastRow.parentName);
          newRow.isForecastRow = true;
          newRow.origIndex = i;
          newRow.curIndex = newRow.origIndex;
          $setName(newRow, getTimeDisplayStrForTimeMS(newRow.timeMS, this$static.dateGrain, this$static.isFiscalCalendar, extraRowIndex + 1, graph.chart.locale, graph, true));
          extraRows.array[extraRows.array.length] = newRow;
          this$static.rows_0.add_0(newRow);
          ++this$static.numProjectedRows;
        }
         else {
          extraRowIndex < extraRows.array.length && (newRow = (checkCriticalElementIndex(extraRowIndex, extraRows.array.length) , castTo(extraRows.array[extraRowIndex], 7)));
        }
        if (newRow) {
          cell = new Cell(forecastPoint.y_0);
          cell.row = newRow;
          cell.column = curCol;
          $setProjectedValue(cell, $getValue(cell));
          $put_0(newRow.cellMap, valueOf(colIndex), cell);
          rowIndex = lastRow.curIndex + 1 + extraRowIndex;
          $put_0(curCol.cellMap, valueOf(rowIndex), cell);
          ++extraRowIndex;
        }
      }
      if (curCol.isRunningTotal) {
        if ($get_1(lastRow.cellMap, valueOf(colIndex)) != null) {
          regPoint = castTo($get_2(forecastPoints, lastRow.origIndex), 10);
          $setProjectedValue(castTo($get_1(lastRow.cellMap, valueOf(colIndex)), 16), regPoint.y_0);
        }
      }
    }
  }
  return;
}

function $addMetaDataDefCell(metadataList, cell, defaultName){
  var mdColInfo;
  if (cell) {
    mdColInfo = new ColRowInfo_2(defaultName, cell.column.type_0);
    $setFormat(mdColInfo, cell.column.format);
    $setAltName(mdColInfo, $getColName(cell));
  }
   else 
    mdColInfo = new ColRowInfo_2(defaultName, 'DOUBLE');
  metadataList.array[metadataList.array.length] = mdColInfo;
}

function $applyColumnShowAsFiltered(this$static, operand, values){
  var names;
  switch (operand) {
    case 'IN':
      $filterAllCols(this$static);
      names = getValues(values);
      $setFilteredColValueBulk(this$static, names, false);
      break;
    case 'NOT_IN':
      $clearFilteredCols(this$static);
      names = getValues(values);
      $setFilteredColValueBulk(this$static, names, true);
  }
}

function $applyColumnShowAsUnFiltered(this$static, object){
  var e, filter, operand, values;
  if (instanceOfString(object)) {
    try {
      filter = new JSONObject_0(castToString(object));
      if ($containsKey_1(filter.myHashMap, 'operand') && $containsKey_1(filter.myHashMap, 'values') && $containsKey_1(filter.myHashMap, 'column')) {
        operand = toString_24($get_0(filter, 'operand'));
        values = $getJSONArray_0(filter, 'values');
        $applyColumnShowAsFiltered(this$static, operand, values);
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        $printStackTraceImpl(e, ($clinit_System() , err), '', '');
      }
       else 
        throw toJs($e0);
    }
  }
}

function $applyRowShowAsFiltered(this$static, operand, values){
  var names;
  switch (operand) {
    case 'IN':
      $filterAllRows(this$static);
      names = getValues(values);
      $setFilteredRowValueBulk(this$static, names, false);
      break;
    case 'NOT_IN':
      $clearFilteredRows(this$static);
      names = getValues(values);
      $setFilteredRowValueBulk(this$static, names, true);
  }
}

function $applyRowShowAsUnFiltered(this$static, object){
  var e, filter, operand, values;
  if (instanceOfString(object)) {
    try {
      filter = new JSONObject_0(castToString(object));
      if ($containsKey_1(filter.myHashMap, 'operand') && $containsKey_1(filter.myHashMap, 'values') && $containsKey_1(filter.myHashMap, 'column')) {
        operand = toString_24($get_0(filter, 'operand'));
        values = $getJSONArray_0(filter, 'values');
        $applyRowShowAsFiltered(this$static, operand, values);
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        $printStackTraceImpl(e, ($clinit_System() , err), '', '');
      }
       else 
        throw toJs($e0);
    }
  }
}

function $applyShowAsFiltered(this$static, object){
  var column, e, filter, filters, i, jsonObject, operand, result, values;
  if (instanceOfString(object)) {
    try {
      jsonObject = new JSONObject_0(castToString(object));
      if ($containsKey_1(jsonObject.myHashMap, 'applyfilters')) {
        result = $get_0(jsonObject, 'applyfilters');
        if (result != null && instanceOf(result, 92)) {
          filters = $getJSONArray_0(jsonObject, 'applyfilters');
          for (i = 0; i < $length(filters); i++) {
            filter = $getJSONObject(filters, i);
            if ($containsKey_1(filter.myHashMap, 'operand') && $containsKey_1(filter.myHashMap, 'values') && $containsKey_1(filter.myHashMap, 'column')) {
              operand = toString_24($get_0(filter, 'operand'));
              values = $getJSONArray_0(filter, 'values');
              column = toString_24($get_0(filter, 'column'));
              !!this$static.rows_0 && this$static.rows_0.size_1() > 0 && $equals_2(column, castTo(this$static.rows_0.get_1(0), 7).parentName)?$applyRowShowAsFiltered(this$static, operand, values):$applyColumnShowAsFiltered(this$static, operand, values);
            }
          }
        }
         else {
          $clearFilteredCols(this$static);
          $clearFilteredRows(this$static);
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        $printStackTraceImpl(e, ($clinit_System() , err), '', '');
      }
       else 
        throw toJs($e0);
    }
  }
}

function $buildColumnMappings(this$static){
  var colRowInfo, colRowInfo$iterator, index_0;
  if (this$static.cols_0) {
    this$static.columnMapping = new HashMap;
    index_0 = valueOf(0);
    for (colRowInfo$iterator = this$static.cols_0.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      colRowInfo.mapping != null && colRowInfo.mapping.length > 0?$putStringValue(this$static.columnMapping, colRowInfo.mapping, index_0):$putStringValue(this$static.columnMapping, 'C' + index_0, index_0);
      index_0 = valueOf(index_0.value_0 + 1);
    }
  }
}

function $clearAlternateNames(this$static){
  var cell, cell$iterator, col, col$iterator, entry, outerIter;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (col.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          !!cell && (cell.altName = null);
        }
      }
    }
  }
}

function $clearAlternateValues_0(this$static){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      $clearAlternateValues(col);
    }
  }
}

function $clearColumnsUsingSecondScale(this$static){
  var column, column$iterator;
  for (column$iterator = this$static.cols_0.iterator(); column$iterator.hasNext_0();) {
    column = castTo(column$iterator.next_1(), 7);
    column.usesSecondaryScale = false;
  }
}

function $clearFilteredCols(this$static){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.showAsFiltered = false;
    }
    this$static.numFilteredCols = 0;
  }
  this$static.hasFilteredCols = false;
}

function $clearFilteredRows(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.showAsFiltered = false;
    }
    this$static.numFilteredRows = 0;
  }
  this$static.hasFilteredRows = false;
}

function $clearHasRunningTotals(this$static){
  var colRowInfo, colRowInfo$iterator;
  if (this$static.cols_0) {
    for (colRowInfo$iterator = this$static.cols_0.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      colRowInfo.isRunningTotal = false;
    }
  }
}

function $clearHiddenCols(this$static, force){
  var col, col$iterator;
  if (this$static.hasHiddenCols || force) {
    if (this$static.cols_0) {
      for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
        col = castTo(col$iterator.next_1(), 7);
        col.hidden = false;
      }
      this$static.numVisibleCols = this$static.cols_0.size_1();
    }
    this$static.hasHiddenCols = false;
    $resetAllSums(this$static);
  }
}

function $clearHiddenRows(this$static){
  this$static.hasHiddenRows && $clearHiddenRowsAndResetRowCount(this$static);
}

function $clearHiddenRowsAndResetRowCount(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.hidden = false;
    }
    this$static.hasHiddenRows = false;
    this$static.numVisibleRows = this$static.rows_0.size_1();
  }
  this$static.hasHiddenRows = false;
  $resetAllSums(this$static);
}

function $clearProjectionRows(this$static){
  var col, curLastRowSort, curLastRowSortDesc, firstCell, i, j, row, tempSortNeeded, tmpCell;
  if (this$static.numProjectedRows > 0 && this$static.dateGrain != null) {
    curLastRowSort = this$static.lastRowSort;
    curLastRowSortDesc = this$static.lastRowSortDesc;
    tempSortNeeded = false;
    if (this$static.lastRowSort != SORT_DATE || this$static.lastRowSortDesc) {
      tempSortNeeded = true;
      $sortRows(this$static, SORT_DATE);
    }
    for (i = this$static.rows_0.size_1() - 1; i >= 0; i--) {
      row = castTo(this$static.rows_0.get_1(i), 7);
      firstCell = $getFirstCell(row);
      if (!!firstCell && !isNaN_0(firstCell.projectedValue) && firstCell.value_0 == firstCell.projectedValue && !!row.metadata && row.metadata.dataSourceId == null) {
        for (j = 0; j < this$static.cols_0.size_1(); j++) {
          tmpCell = castTo($get_1(row.cellMap, valueOf(j)), 16);
          if (tmpCell) {
            col = tmpCell.column;
            $remove(col.cellMap, valueOf(i));
            $remove(row.cellMap, valueOf(j));
            tmpCell.row = null;
            tmpCell.column = null;
          }
        }
        this$static.rows_0.remove(row);
      }
    }
    this$static.numProjectedRows = 0;
    tempSortNeeded && (curLastRowSortDesc?$sortRowsDesc(this$static, curLastRowSort, true):$sortRows(this$static, curLastRowSort));
  }
}

function $clearProjectionValues(this$static){
  var cell, cell$iterator, col, col$iterator, entry, outerIter;
  $clearProjectionRows(this$static);
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (col.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          !!cell && (cell.projectedValue = NaN);
        }
      }
    }
  }
}

function $clearRowHiddenValueBewteenDates(this$static, startDate, endDate){
  var endTime, row, row$iterator, startTime, temp;
  startTime = getTimeMSForDateString(startDate, null, null, null).value_0;
  endTime = getTimeMSForDateString(endDate, null, null, null).value_0;
  if (compare_22(endTime, startTime) < 0) {
    temp = startTime;
    startTime = endTime;
    endTime = temp;
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (gte_0(row.timeMS, startTime) && lte(row.timeMS, endTime)) {
        row.hidden = false;
        ++this$static.numVisibleRows;
      }
    }
  }
  $resetAllSums(this$static);
}

function $clearRowHiddenValueBulkByName(this$static, list){
  var name_0, name$iterator, nameToRemove, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      nameToRemove = null;
      for (name$iterator = new ArrayList$1(list); name$iterator.i < name$iterator.this$01.array.length;) {
        name_0 = castToString($next_3(name$iterator));
        if ($equals_2($getName(row), name_0)) {
          row.hidden = false;
          ++this$static.numVisibleRows;
          nameToRemove = name_0;
          break;
        }
      }
      nameToRemove != null && $remove_3(list, nameToRemove);
      if (list.array.length == 0)
        break;
    }
  }
  $resetAllSums(this$static);
}

function $clone(this$static){
  var cell, col, col$iterator, colType, colType$iterator, dupGrid, entry, key, key$iterator, md, md$iterator, newCell, newCol, newColTypes, newCols, newMD, newMDAry, newRow, newRows, oldNewMap, outerIter, row, row$iterator;
  dupGrid = $getDupDataGridBase(this$static);
  if (!this$static.rows_0 || !this$static.cols_0)
    return dupGrid;
  newRows = new ArrayList_0(this$static.rows_0.size_1());
  newCols = new ArrayList_0(this$static.cols_0.size_1());
  oldNewMap = new HashMap_0(this$static.cols_0.size_1());
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    newRow = new ColRowInfo_0(row);
    for (key$iterator = (outerIter = (new AbstractMap$1(row.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
      cell = castTo($get_1(row.cellMap, key), 16);
      newCell = new Cell_0(cell);
      newCell.row = newRow;
      if ($get_1(oldNewMap, cell.column) != null) {
        newCell.column = castTo($get_1(oldNewMap, cell.column), 7);
      }
       else {
        newCol = new ColRowInfo_0(cell.column);
        newCell.column = newCol;
        $put_0(oldNewMap, cell.column, newCol);
        $setCloneIndicies(cell.column);
      }
      $put_0(newRow.cellMap, key, newCell);
      $put_0(newCell.column.cellMap, valueOf(cell.cloneColIndex), newCell);
    }
    newRows.array[newRows.array.length] = newRow;
  }
  for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    newCol = castTo(getEntryValueOrNull($getEntry(oldNewMap.hashCodeMap, col)), 7);
    !!newCol && (newCols.array[newCols.array.length] = newCol , true);
  }
  $reset_5(oldNewMap);
  if (this$static.metadata) {
    newMDAry = new ArrayList_0(this$static.metadata.size_1());
    for (md$iterator = this$static.metadata.iterator(); md$iterator.hasNext_0();) {
      md = castTo(md$iterator.next_1(), 7);
      newMD = new ColRowInfo_0(md);
      newMDAry.array[newMDAry.array.length] = newMD;
    }
    dupGrid.metadata = newMDAry;
  }
  if (this$static.origColTypes) {
    newColTypes = new ArrayList_0(this$static.origColTypes.array.length);
    for (colType$iterator = new ArrayList$1(this$static.origColTypes); colType$iterator.i < colType$iterator.this$01.array.length;) {
      colType = castToString($next_3(colType$iterator));
      newColTypes.array[newColTypes.array.length] = colType;
    }
    dupGrid.origColTypes = newColTypes;
  }
  dupGrid.rows_0 = newRows;
  dupGrid.cols_0 = newCols;
  return dupGrid;
}

function $clone_0(this$static, maxRows, maxColumns){
  var cell, colType, colType$iterator, column, currentColumnIndex, dupGrid, entry, finalRows, key, key$iterator, md, md$iterator, nCols, newCell, newCol, newColTypes, newCols, newMD, newMDAry, newRow, newRowIndex, newRows, oldColIndex, oldColIndex$iterator, oldColIndex$iterator0, oldColumnIndexes, oldNewMap, outerIter, row, row$iterator, row$iterator0, rowsToClone;
  if (!!this$static.cols_0 && !!this$static.rows_0 && maxColumns >= this$static.cols_0.size_1() && maxRows >= this$static.rows_0.size_1())
    return $clone(this$static);
  dupGrid = $getDupDataGridBase(this$static);
  if (!this$static.rows_0 || !this$static.cols_0)
    return dupGrid;
  nCols = maxColumns < this$static.cols_0.size_1()?maxColumns:this$static.cols_0.size_1();
  rowsToClone = $getLimitedRows(this$static, maxRows);
  newRows = new ArrayList_0(rowsToClone.size_1());
  newCols = new ArrayList_0(nCols);
  oldColumnIndexes = new ArrayList_0(nCols);
  oldNewMap = new HashMap_0(nCols);
  newRowIndex = 0;
  for (row$iterator0 = rowsToClone.iterator(); row$iterator0.hasNext_0();) {
    row = castTo(row$iterator0.next_1(), 7);
    newRow = new ColRowInfo_0(row);
    newRow.origIndex = newRow.curIndex = newRowIndex++;
    for (key$iterator = (outerIter = (new AbstractMap$1(row.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
      cell = castTo($get_1(row.cellMap, key), 16);
      newCell = null;
      if (cell) {
        if ($get_1(oldNewMap, cell.column) != null) {
          newCell = new Cell_0(cell);
          newCell.row = newRow;
          newCell.column = castTo($get_1(oldNewMap, cell.column), 7);
        }
         else if (oldNewMap.hashCodeMap.size_0 + oldNewMap.stringMap.size_0 < maxColumns) {
          if (!cell.column.hidden) {
            newCell = new Cell_0(cell);
            newCell.row = newRow;
            newCol = new ColRowInfo_0(cell.column);
            $add_1(oldColumnIndexes, valueOf(cell.column.curIndex));
            newCell.column = newCol;
            $put_0(oldNewMap, cell.column, newCol);
          }
        }
      }
      if (newCell) {
        $put_0(newRow.cellMap, valueOf(-newCell.column.curIndex), newCell);
        $put_0(newCell.column.cellMap, valueOf(newRow.origIndex), newCell);
      }
    }
    newRows.array[newRows.array.length] = newRow;
  }
  sort_4(oldColumnIndexes.array, oldColumnIndexes.array.length, null);
  currentColumnIndex = 0;
  for (oldColIndex$iterator0 = new ArrayList$1(oldColumnIndexes); oldColIndex$iterator0.i < oldColIndex$iterator0.this$01.array.length;) {
    oldColIndex = castTo($next_3(oldColIndex$iterator0), 29);
    column = castTo(this$static.cols_0.get_1(oldColIndex.value_0), 7);
    if (column) {
      newCol = castTo(getEntryValueOrNull($getEntry(oldNewMap.hashCodeMap, column)), 7);
      if (newCol) {
        newCol.origIndex = newCol.curIndex = currentColumnIndex;
        newCols.array[newCols.array.length] = newCol;
      }
    }
    ++currentColumnIndex;
  }
  $reset_5(oldNewMap);
  finalRows = new ArrayList;
  newRowIndex = 0;
  for (row$iterator = new ArrayList$1(newRows); row$iterator.i < row$iterator.this$01.array.length;) {
    row = castTo($next_3(row$iterator), 7);
    if ($size(row.cellMap) == 0)
      continue;
    row.origIndex = row.curIndex = newRowIndex++;
    finalRows.array[finalRows.array.length] = row;
    currentColumnIndex = 0;
    for (oldColIndex$iterator = new ArrayList$1(oldColumnIndexes); oldColIndex$iterator.i < oldColIndex$iterator.this$01.array.length;) {
      oldColIndex = castTo($next_3(oldColIndex$iterator), 29);
      cell = castTo($get_1(row.cellMap, valueOf(-oldColIndex.value_0)), 16);
      if (cell) {
        $remove(row.cellMap, valueOf(-oldColIndex.value_0));
        $put_0(row.cellMap, valueOf(currentColumnIndex), cell);
      }
      ++currentColumnIndex;
    }
  }
  dupGrid.numVisibleCols = oldColumnIndexes.array.length;
  if (this$static.metadata) {
    newMDAry = new ArrayList_0(this$static.metadata.size_1());
    for (md$iterator = this$static.metadata.iterator(); md$iterator.hasNext_0();) {
      md = castTo(md$iterator.next_1(), 7);
      newMD = new ColRowInfo_0(md);
      newMDAry.array[newMDAry.array.length] = newMD;
    }
    dupGrid.metadata = newMDAry;
  }
  if (this$static.origColTypes) {
    newColTypes = new ArrayList_0(this$static.origColTypes.array.length);
    for (colType$iterator = new ArrayList$1(this$static.origColTypes); colType$iterator.i < colType$iterator.this$01.array.length;) {
      colType = castToString($next_3(colType$iterator));
      newColTypes.array[newColTypes.array.length] = colType;
    }
    dupGrid.origColTypes = newColTypes;
  }
  dupGrid.rows_0 = finalRows;
  dupGrid.cols_0 = newCols;
  dupGrid.numVisibleRows = finalRows.array.length;
  $resetAllSums(dupGrid);
  return dupGrid;
}

function $cloneNoGroupItemValueSeries(this$static, maxRowsAndCellsPerRow){
  var cell, colType, colType$iterator, column, currentColumnIndex, dupGrid, entry, finalRows, key, key$iterator, md, md$iterator, newCell, newCol, newColTypes, newCols, newMD, newMDAry, newRow, newRowIndex, newRows, oldColIndex, oldColIndex$iterator, oldColumnIndexes, oldNewMap, outerIter, row, row$iterator, row$iterator0, rowsToClone;
  if ($getNumRows(this$static) > maxRowsAndCellsPerRow || $hasRowsWithMoreCellsThanCellLimit(this$static, maxRowsAndCellsPerRow)) {
    if (!this$static.rows_0 || !this$static.cols_0)
      return this$static;
    dupGrid = $getDupDataGridBase(this$static);
    rowsToClone = this$static.rows_0;
    newRows = new ArrayList_0(rowsToClone.size_1());
    newCols = new ArrayList_0(maxRowsAndCellsPerRow);
    oldColumnIndexes = new ArrayList_0(maxRowsAndCellsPerRow);
    oldNewMap = new HashMap_0(maxRowsAndCellsPerRow);
    newRowIndex = 0;
    for (row$iterator0 = rowsToClone.iterator(); row$iterator0.hasNext_0();) {
      row = castTo(row$iterator0.next_1(), 7);
      newRow = new ColRowInfo_0(row);
      newRow.origIndex = newRow.curIndex = newRowIndex++;
      for (key$iterator = (outerIter = (new AbstractMap$1(row.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
        cell = castTo($get_1(row.cellMap, key), 16);
        newCell = null;
        if (cell) {
          if ($get_1(oldNewMap, cell.column) != null) {
            newCell = new Cell_0(cell);
            newCell.row = newRow;
            newCell.column = castTo($get_1(oldNewMap, cell.column), 7);
          }
           else if (oldNewMap.hashCodeMap.size_0 + oldNewMap.stringMap.size_0 < maxRowsAndCellsPerRow) {
            if (!cell.column.hidden) {
              newCell = new Cell_0(cell);
              newCell.row = newRow;
              newCol = new ColRowInfo_0(cell.column);
              $add_1(oldColumnIndexes, valueOf(cell.column.curIndex));
              newCell.column = newCol;
              $put_0(oldNewMap, cell.column, newCol);
            }
          }
        }
        if (newCell) {
          $put_0(newRow.cellMap, key, newCell);
          $put_0(newCell.column.cellMap, valueOf(newRow.origIndex), newCell);
        }
        if (key.value_0 + 1 >= maxRowsAndCellsPerRow)
          break;
      }
      newRow.count = $size(newRow.cellMap);
      newRows.array[newRows.array.length] = newRow;
      if (newRowIndex >= maxRowsAndCellsPerRow)
        break;
    }
    sort_4(oldColumnIndexes.array, oldColumnIndexes.array.length, null);
    currentColumnIndex = 0;
    for (oldColIndex$iterator = new ArrayList$1(oldColumnIndexes); oldColIndex$iterator.i < oldColIndex$iterator.this$01.array.length;) {
      oldColIndex = castTo($next_3(oldColIndex$iterator), 29);
      column = castTo(this$static.cols_0.get_1(oldColIndex.value_0), 7);
      if (column) {
        newCol = castTo(getEntryValueOrNull($getEntry(oldNewMap.hashCodeMap, column)), 7);
        if (newCol) {
          newCol.origIndex = newCol.curIndex = currentColumnIndex;
          newCols.array[newCols.array.length] = newCol;
        }
      }
      ++currentColumnIndex;
    }
    $reset_5(oldNewMap);
    finalRows = new ArrayList;
    newRowIndex = 0;
    for (row$iterator = new ArrayList$1(newRows); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 7);
      if ($size(row.cellMap) == 0)
        continue;
      row.origIndex = row.curIndex = newRowIndex++;
      finalRows.array[finalRows.array.length] = row;
    }
    dupGrid.numVisibleCols = oldColumnIndexes.array.length;
    if (this$static.metadata) {
      newMDAry = new ArrayList_0(this$static.metadata.size_1());
      for (md$iterator = this$static.metadata.iterator(); md$iterator.hasNext_0();) {
        md = castTo(md$iterator.next_1(), 7);
        newMD = new ColRowInfo_0(md);
        newMDAry.array[newMDAry.array.length] = newMD;
      }
      dupGrid.metadata = newMDAry;
    }
    if (this$static.origColTypes) {
      newColTypes = new ArrayList_0(this$static.origColTypes.array.length);
      for (colType$iterator = new ArrayList$1(this$static.origColTypes); colType$iterator.i < colType$iterator.this$01.array.length;) {
        colType = castToString($next_3(colType$iterator));
        newColTypes.array[newColTypes.array.length] = colType;
      }
      dupGrid.origColTypes = newColTypes;
    }
    dupGrid.rows_0 = finalRows;
    dupGrid.cols_0 = newCols;
    dupGrid.numVisibleRows = finalRows.array.length;
    $resetAllSums(dupGrid);
    return dupGrid;
  }
  return $clone(this$static);
}

function $createColumnsBasedOnMetadata(this$static, metadataColIndex){
  var catName, catNameCell, cell, cell$iterator, col, colMap, entry, newCol, newCols, outerIter;
  col = $getColumn(this$static, 0);
  colMap = new TreeMap;
  newCols = new ArrayList;
  if (!!col && !!col.cellMap) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (cell) {
        catNameCell = $getMetaDataCell(cell, metadataColIndex);
        catName = 'NULL';
        !!catNameCell && catNameCell.valueStr != null && (catName = catNameCell.valueStr);
        newCol = castTo(getEntryValueOrNull($getEntry_0(colMap, catName)), 7);
        if (!newCol) {
          newCol = new ColRowInfo_2(catName, 'STRING');
          newCol.origIndex = newCols.array.length;
          newCol.curIndex = newCol.origIndex;
          !!this$static.metadata && this$static.metadata.size_1() > metadataColIndex && $setParentName(newCol, $getName(castTo(this$static.metadata.get_1(metadataColIndex), 7)));
          cell.column = newCol;
          $put_0(newCol.cellMap, valueOf(0), cell);
          newCol.count = 1;
          newCols.array[newCols.array.length] = newCol;
          $put_4(colMap, catName, newCol);
        }
         else {
          cell.column = newCol;
          $put_0(newCol.cellMap, valueOf($size(newCol.cellMap)), cell);
          ++newCol.count;
        }
      }
    }
  }
  this$static.cols_0 = newCols;
  this$static.numVisibleCols = this$static.cols_0.size_1();
}

function $createGroupedMDFields(this$static, numLevels, level, locale, dateColName){
  var entry, groupName, grpMDInfo, index_0, key, key$iterator, mdCell, outerIter, row, row$iterator, tmpCell;
  grpMDInfo = new ColRowInfo_2(dateColName, 'DATE');
  grpMDInfo.mapping = 'GROUP' + level;
  !this$static.metadata && (this$static.metadata = new ArrayList);
  this$static.metadata.add_0(grpMDInfo);
  index_0 = 1;
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    if (!!row && !!row.cellMap) {
      groupName = getDateNameForDateGroupedTrellis(level, row.timeMS, this$static.dateGrain, locale, numLevels == 1);
      mdCell = new Cell_1(groupName, '');
      for (key$iterator = (outerIter = (new AbstractMap$1(row.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
        tmpCell = castTo($get_1(row.cellMap, key), 16);
        (tmpCell.metaData == null || tmpCell.metaData.length < this$static.metadata.size_1()) && $resetMDSize(tmpCell, this$static.metadata.size_1());
        tmpCell.metaData[this$static.metadata.size_1() - 1] = mdCell;
        $put_0(grpMDInfo.cellMap, valueOf(index_0++), mdCell);
      }
    }
  }
}

function $createHiddenSeriesChartOption(values){
  var arrayStr, sb, value_0, value$index, value$max;
  sb = new StringBuilder_1('[');
  for (value$index = 0 , value$max = values.length; value$index < value$max; ++value$index) {
    value_0 = values[value$index];
    $append_3($append_3((sb.string += '"' , sb), jsonStringify(value_0)), '",');
  }
  $clinit_StrUtil();
  $charAt(sb, sb.string.length - 1) == 44 && $delete(sb, sb.string.length - 1, sb.string.length);
  sb.string += ']';
  arrayStr = sb.string;
  return arrayStr;
}

function $createSummaryColumn(this$static){
  var cell, row, row$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.size_1() == 1) {
    this$static.summaryColumn = castTo(this$static.cols_0.get_1(0), 7);
  }
   else {
    this$static.summaryColumn = new ColRowInfo;
    $setSum(this$static.summaryColumn, $getGridTotal(this$static));
    if (this$static.rows_0) {
      for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        cell = new Cell((isNaN_0(row.sum) && (row.sum = $calcSum(row, false, true, false)) , row.sum));
        cell.row = row;
        cell.column = this$static.summaryColumn;
        $put_0(this$static.summaryColumn.cellMap, valueOf(row.origIndex), cell);
      }
    }
  }
}

function $filterAllCols(this$static){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.showAsFiltered = true;
    }
    this$static.hasFilteredCols = true;
    this$static.numFilteredCols = this$static.cols_0.size_1();
  }
}

function $filterAllRows(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.showAsFiltered = true;
    }
    this$static.hasFilteredRows = true;
    this$static.numFilteredRows = this$static.rows_0.size_1();
  }
}

function $filterCatX(this$static, object){
  var catNames, i, jsonObject, name_0, operand, values;
  if (instanceOfString(object)) {
    if ($equals_2('none', object))
      return;
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          switch (operand) {
            case 'IN':
              catNames = new HashMap;
              for (i = 0; i < $length(values); i++) {
                try {
                  name_0 = toString_24($get(values, i));
                  name_0 == null?$put_1(catNames.hashCodeMap, null, null):$put_2(catNames.stringMap, name_0, name_0);
                }
                 catch ($e0) {
                  $e0 = toJava($e0);
                  if (!instanceOf($e0, 35))
                    throw toJs($e0);
                }
              }

              catNames.hashCodeMap.size_0 + catNames.stringMap.size_0 > 0 && $showXValuesWithCatNames(this$static, catNames);
          }
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $filterRows(this$static, object){
  var endDate, jsonObject, names, operand, startDate, values;
  if (instanceOfString(object)) {
    if ($equals_2('none', object) || $equals_2('null', object))
      this$static.hasHiddenRows && $clearHiddenRowsAndResetRowCount(this$static);
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          $hideAllRows(this$static);
          switch (operand) {
            case 'IN':
              names = getValues(values);
              $clearRowHiddenValueBulkByName(this$static, names);
              break;
            case 'NOT_IN':
              this$static.hasHiddenRows && $clearHiddenRowsAndResetRowCount(this$static);
              names = getValues(values);
              $setRowHiddenValueBulkByName(this$static, names);
              break;
            case 'BETWEEN':
              startDate = null;
              endDate = null;
              try {
                startDate = toString_24($get(values, 0));
                endDate = toString_24($get(values, 1));
              }
               catch ($e0) {
                $e0 = toJava($e0);
                if (!instanceOf($e0, 35))
                  throw toJs($e0);
              }

              startDate != null && endDate != null && $clearRowHiddenValueBewteenDates(this$static, startDate, endDate);
          }
          this$static.numVisibleRows == 0 && this$static.hasHiddenRows && $clearHiddenRowsAndResetRowCount(this$static);
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $filterSeries(this$static, object, showAsFiltered){
  var e, jsonObject, names, operand, values;
  if (showAsFiltered) {
    $filterSeriesShowAsFiltered(this$static, object);
    return;
  }
  if (instanceOfString(object)) {
    if ($equals_2('none', object) || $equals_2('null', object))
      $clearHiddenCols(this$static, true);
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          $hideAllCols(this$static);
          switch (operand) {
            case 'IN':
              names = getValues(values);
              $setColHiddenValueBulk(this$static, names, false);
              break;
            case 'NOT_IN':
              $clearHiddenCols(this$static, true);
              names = getValues(values);
              $setColHiddenValueBulk(this$static, names, true);
          }
          this$static.numVisibleCols == 0 && $clearHiddenCols(this$static, true);
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 35)) {
          e = $e0;
          $printStackTraceImpl(e, ($clinit_System() , err), '', '');
        }
         else 
          throw toJs($e0);
      }
    }
  }
}

function $filterSeriesShowAsFiltered(this$static, object){
  var e, jsonObject, names, operand, values;
  if (instanceOfString(object)) {
    if ($equals_2('none', object) || $equals_2('null', object))
      $clearFilteredCols(this$static);
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          switch (operand) {
            case 'IN':
              names = getValues(values);
              $setFilteredColValueBulk(this$static, names, false);
              break;
            case 'NOT_IN':
              names = getValues(values);
              $setFilteredColValueBulk(this$static, names, true);
          }
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 35)) {
          e = $e0;
          $printStackTraceImpl(e, ($clinit_System() , err), '', '');
        }
         else 
          throw toJs($e0);
      }
    }
  }
}

function $filterTime(this$static, object){
  var endDate, jsonObject, operand, startDate, values;
  if (instanceOfString(object)) {
    if ($equals_2('none', object))
      return;
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          switch (operand) {
            case 'BETWEEN':
              startDate = null;
              endDate = null;
              try {
                startDate = toString_24($get(values, 0));
                endDate = toString_24($get(values, 1));
              }
               catch ($e0) {
                $e0 = toJava($e0);
                if (!instanceOf($e0, 35))
                  throw toJs($e0);
              }

              startDate != null && endDate != null && $showTimeValuesBewteenValues(this$static, startDate, endDate);
          }
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $filterX(this$static, object){
  var jsonObject, operand, values, xMax, xMin;
  if (instanceOfString(object)) {
    if ($equals_2('none', object))
      return;
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          switch (operand) {
            case 'BETWEEN':
              xMin = null;
              xMax = null;
              try {
                xMin = toString_24($get(values, 0));
                xMax = toString_24($get(values, 1));
              }
               catch ($e0) {
                $e0 = toJava($e0);
                if (!instanceOf($e0, 35))
                  throw toJs($e0);
              }

              xMin != null && xMax != null && $showXValuesBewteenValues(this$static, xMin, xMax);
          }
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $filterY(this$static, object){
  var jsonObject, operand, values, yMax, yMin;
  if (instanceOfString(object)) {
    if ($equals_2('none', object))
      $setAllCellsHiddenValue(this$static);
    else {
      try {
        jsonObject = new JSONObject_0(castToString(object));
        if ($containsKey_1(jsonObject.myHashMap, 'operand') && $containsKey_1(jsonObject.myHashMap, 'values')) {
          operand = toString_24($get_0(jsonObject, 'operand'));
          values = $getJSONArray_0(jsonObject, 'values');
          switch (operand) {
            case 'BETWEEN':
              yMin = null;
              yMax = null;
              try {
                yMin = toString_24($get(values, 0));
                yMax = toString_24($get(values, 1));
              }
               catch ($e0) {
                $e0 = toJava($e0);
                if (!instanceOf($e0, 35))
                  throw toJs($e0);
              }

              if (yMin != null && yMax != null) {
                $setAllCellsHiddenValue(this$static);
                $showYValuesBewteenValues(this$static, yMin, yMax);
              }

          }
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $freeResources_11(this$static){
  var col, col$iterator, md, md$iterator, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      $freeCellMap(row.cellMap);
      row.cellMap = null;
    }
    this$static.rows_0 = null;
  }
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      $freeCellMap(col.cellMap);
      col.cellMap = null;
    }
    this$static.cols_0 = null;
  }
  if (this$static.metadata) {
    for (md$iterator = this$static.metadata.iterator(); md$iterator.hasNext_0();) {
      md = castTo(md$iterator.next_1(), 7);
      $freeCellMap(md.cellMap);
      md.cellMap = null;
    }
    this$static.metadata = null;
  }
  if (this$static.summaryColumn) {
    $freeResources_10(this$static.summaryColumn);
    this$static.summaryColumn = null;
  }
  this$static.origColTypes = null;
  this$static.projectionJSON = null;
  if (this$static.columnMapping) {
    $reset_5(this$static.columnMapping);
    this$static.columnMapping = null;
  }
  this$static.origColNameList = null;
}

function $getAltValueColumnName(this$static){
  if (this$static.altValueColumnName != null)
    return this$static.altValueColumnName;
  return this$static.valueColumnName;
}

function $getCell(this$static, row, col){
  var colIndex;
  if (!!this$static.rows_0 && row < this$static.rows_0.size_1()) {
    if (col == -1) {
      !this$static.summaryColumn && $createSummaryColumn(this$static);
      if (this$static.summaryColumn.cellMap)
        return castTo($get_1(this$static.summaryColumn.cellMap, valueOf(row)), 16);
    }
     else if (!!this$static.cols_0 && col < this$static.cols_0.size_1()) {
      colIndex = castTo(this$static.cols_0.get_1(col), 7).origIndex;
      if (castTo(this$static.rows_0.get_1(row), 7).cellMap)
        return castTo($get_1(castTo(this$static.rows_0.get_1(row), 7).cellMap, valueOf(colIndex)), 16);
    }
  }
  return null;
}

function $getColumn(this$static, col){
  if (col == -1) {
    !this$static.summaryColumn && $createSummaryColumn(this$static);
    return this$static.summaryColumn;
  }
  if (!!this$static.cols_0 && col < this$static.cols_0.size_1()) {
    return castTo(this$static.cols_0.get_1(col), 7);
  }
  return null;
}

function $getColumnByName(this$static, value_0){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2($getName(col), value_0))
        return col;
    }
  }
  return null;
}

function $getColumnByOriginalName(this$static, value_0){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2(col.name_0, value_0))
        return col;
    }
  }
  return null;
}

function $getColumnIndexForMappedName(this$static, mappedName){
  var colIndex;
  !this$static.columnMapping && $buildColumnMappings(this$static);
  if (this$static.columnMapping) {
    colIndex = castTo($getStringValue(this$static.columnMapping, mappedName), 29);
    if (colIndex)
      return colIndex.value_0;
  }
  return -1;
}

function $getDataFormatForSeriesOrMetaDataIndex(this$static, index_0){
  if (this$static.dataHasAlreadyBeenTransposed) {
    if (this$static.rows_0.size_1() > index_0)
      return castTo(this$static.rows_0.get_1(index_0), 7).format;
    if (!!this$static.metadata && index_0 < this$static.rows_0.size_1() + this$static.metadata.size_1())
      return castTo(this$static.metadata.get_1(index_0 - this$static.rows_0.size_1()), 7).format;
  }
   else {
    if (this$static.cols_0.size_1() > index_0)
      return castTo(this$static.cols_0.get_1(index_0), 7).format;
    if (!!this$static.metadata && index_0 < this$static.cols_0.size_1() + this$static.metadata.size_1())
      return castTo(this$static.metadata.get_1(index_0 - this$static.cols_0.size_1()), 7).format;
  }
  return null;
}

function $getDateGrainStrForDate(this$static, date, comp, locale){
  var month, year;
  year = date.jsdate.getFullYear() - $intern_14;
  month = date.jsdate.getMonth();
  if ($equals_2(this$static.dateGrain, 'YEAR'))
    return '' + (date.jsdate.getFullYear() - $intern_14 + $intern_14);
  else if ($equals_2(this$static.dateGrain, 'QUARTER')) {
    if (locale != null && $equals_2(locale, 'fr-FR'))
      return '' + (year + $intern_14) + '-T' + ((month / 3 | 0) + 1);
    return locale != null && $equals_2(locale, 'zh-CN')?'' + (year + $intern_14) + '\u5E74' + ((month / 3 | 0) + 1) + '\u5B63\u5EA6':'' + (year + $intern_14) + '-Q' + ((month / 3 | 0) + 1);
  }
   else 
    return $equals_2(this$static.dateGrain, 'MONTH')?locale != null && $equals_2(locale, 'zh-CN')?'' + (year + $intern_14) + getString('MONTHSHORTNAMESTDCAL_' + month, locale):'' + (year + $intern_14) + '-' + getString('MONTHSHORTNAMESTDCAL_' + month, locale):FormatDate(fromDouble_0(date.jsdate.getTime()), 'yyyy-MM-dd', locale, comp.chart.timeZone);
}

function $getDupDataGridBase(this$static){
  var dupGrid;
  dupGrid = new DataGrid;
  dupGrid.name_0 = this$static.name_0;
  dupGrid.dateGrain = this$static.dateGrain;
  dupGrid.dateJoinColumn = this$static.dateJoinColumn;
  dupGrid.isFiscalCalendar = this$static.isFiscalCalendar;
  dupGrid.hasHiddenRows = this$static.hasHiddenRows;
  dupGrid.hasHiddenCols = this$static.hasHiddenCols;
  dupGrid.numVisibleRows = this$static.numVisibleRows;
  dupGrid.numVisibleCols = this$static.numVisibleCols;
  dupGrid.numFilteredCols = this$static.numFilteredCols;
  dupGrid.numFilteredRows = this$static.numFilteredRows;
  dupGrid.hasFilteredCols = this$static.hasFilteredCols;
  dupGrid.hasFilteredRows = this$static.hasFilteredRows;
  dupGrid.isGroupItemValue = this$static.isGroupItemValue;
  dupGrid.isPeriodOverPeriod = this$static.isPeriodOverPeriod;
  dupGrid.orderedColumnList = this$static.orderedColumnList;
  dupGrid.gridTotal = this$static.gridTotal;
  dupGrid.gridPrimaryTotal = this$static.gridPrimaryTotal;
  dupGrid.gridSecondaryTotal = this$static.gridSecondaryTotal;
  dupGrid.valueColumnName = this$static.valueColumnName;
  dupGrid.altValueColumnName = this$static.altValueColumnName;
  dupGrid.dataHasBeenLimited = this$static.dataHasBeenLimited;
  dupGrid.errorCode = this$static.errorCode;
  dupGrid.lastRowSort = this$static.lastRowSort;
  dupGrid.projectionJSON = this$static.projectionJSON;
  dupGrid.originalDataType = this$static.originalDataType;
  dupGrid.origColNameList = this$static.origColNameList;
  dupGrid.dataHasAlreadyBeenTransposed = this$static.dataHasAlreadyBeenTransposed;
  dupGrid.preSorted = this$static.preSorted;
  dupGrid.numProjectedRows = this$static.numProjectedRows;
  return dupGrid;
}

function $getDynamicRowFilter(this$static, supportsTimeScale){
  var columnName, currentRow, filter, filterBase, first, firstVisibleRow, last, rowIndex, values;
  filter = null;
  if (this$static.hasHiddenRows && this$static.rows_0.size_1() > 0) {
    if ($getFirstVisibleRow(this$static)) {
      if (neq($getFirstVisibleRow(this$static).timeMS, 0) && supportsTimeScale && $supportsFiltersWithBetweenTimeMS(this$static)) {
        firstVisibleRow = $getFirstVisibleRow(this$static);
        first = $getName(firstVisibleRow);
        last = $getName($getLastVisibleRow(this$static));
        columnName = firstVisibleRow.parentName;
        filterBase = new FilterBase(columnName, 'BETWEEN', firstVisibleRow);
        !filterBase.values && (filterBase.values = new ArrayList);
        $add_1(filterBase.values, first);
        !filterBase.values && (filterBase.values = new ArrayList);
        $add_1(filterBase.values, last);
        $setDataJoinColumn(filterBase, this$static.dateJoinColumn);
        $setFiscal(filterBase, this$static.isFiscalCalendar);
        filter = getDrillFilterFromValues(filterBase);
      }
       else {
        values = new ArrayList;
        currentRow = null;
        for (rowIndex = 0; rowIndex < this$static.numVisibleRows; rowIndex++) {
          currentRow = $getNextVisibleRow(this$static, currentRow);
          !!currentRow && $add_1(values, $getName(currentRow));
        }
        columnName = $getFirstVisibleRow(this$static).parentName;
        filterBase = new FilterBase(columnName, 'IN', $getFirstVisibleRow(this$static));
        filterBase.values = values;
        $setDataJoinColumn(filterBase, this$static.dateJoinColumn);
        $setFiscal(filterBase, this$static.isFiscalCalendar);
        filter = getDrillFilterFromValues(filterBase);
      }
    }
  }
  return filter;
}

function $getDynamicSeriesFilter(this$static){
  var columnName, filter, filterBase, values;
  filter = null;
  if (this$static.hasHiddenCols && this$static.cols_0.size_1() > 0) {
    values = $getListOfHiddenColumns(this$static);
    columnName = $getFirstVisibleCol(this$static).parentName;
    filterBase = new FilterBase(columnName, 'NOT_IN', $getFirstVisibleCol(this$static));
    filterBase.values = values;
    $setDataJoinColumn(filterBase, this$static.dateJoinColumn);
    $setFiscal(filterBase, this$static.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
  }
  return filter;
}

function $getFilteredColumnList(this$static){
  var col, col$iterator, columnNames;
  if (this$static.numFilteredCols > 0) {
    columnNames = new ArrayList;
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.showAsFiltered && $add_1(columnNames, col.name_0);
    }
    return columnNames;
  }
  return null;
}

function $getFirstDataFormat(this$static){
  var col, col$iterator, row, row$iterator;
  if (this$static.dataHasAlreadyBeenTransposed) {
    if (this$static.rows_0) {
      for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        if (row.format)
          return row.format;
      }
    }
  }
   else {
    if (this$static.cols_0) {
      for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
        col = castTo(col$iterator.next_1(), 7);
        if (col.format)
          return col.format;
      }
    }
  }
  return null;
}

function $getFirstRowWithData(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (!isNaN_0($getValue($getFirstCell(row))))
        return row;
    }
  }
  return null;
}

function $getFirstVisibleCol(this$static){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (!col.hidden)
        return col;
    }
  }
  return null;
}

function $getFirstVisibleRow(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (!row.hidden)
        return row;
    }
  }
  return null;
}

function $getGridTotal(this$static){
  var col, col$iterator, colSum;
  if (isNaN_0(this$static.gridTotal)) {
    this$static.gridTotal = 0;
    if (this$static.cols_0) {
      for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
        col = castTo(col$iterator.next_1(), 7);
        if (!col.isCalculated) {
          colSum = (isNaN_0(col.sum) && (col.sum = $calcSum(col, false, true, false)) , col.sum);
          isNaN(colSum) || (this$static.gridTotal += (isNaN_0(col.sum) && (col.sum = $calcSum(col, false, true, false)) , col.sum));
        }
      }
    }
  }
  return this$static.gridTotal;
}

function $getGridTotal_0(this$static, secondaryOnly){
  var col, col$iterator, colSum;
  if (secondaryOnly) {
    if (isNaN_0(this$static.gridSecondaryTotal)) {
      this$static.gridSecondaryTotal = 0;
      if (this$static.cols_0) {
        for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
          col = castTo(col$iterator.next_1(), 7);
          !col.isCalculated && col.usesSecondaryScale && (this$static.gridSecondaryTotal += (isNaN_0(col.sum) && (col.sum = $calcSum(col, false, true, false)) , col.sum));
        }
      }
    }
    return this$static.gridSecondaryTotal;
  }
   else {
    if (isNaN_0(this$static.gridPrimaryTotal)) {
      this$static.gridPrimaryTotal = 0;
      if (this$static.cols_0) {
        for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
          col = castTo(col$iterator.next_1(), 7);
          if (!col.isCalculated && !col.usesSecondaryScale) {
            colSum = (isNaN_0(col.sum) && (col.sum = $calcSum(col, false, true, false)) , col.sum);
            isNaN(colSum) || (this$static.gridPrimaryTotal += colSum);
          }
        }
      }
    }
    return this$static.gridPrimaryTotal;
  }
}

function $getHiddenColumns(this$static){
  var col, col$iterator, colIndex, hiddenColumns, values;
  hiddenColumns = null;
  if (this$static.hasHiddenCols && this$static.cols_0.size_1() > 0) {
    values = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, this$static.cols_0.size_1() - this$static.numVisibleCols, 6, 1);
    colIndex = 0;
    if (this$static.cols_0) {
      for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
        col = castTo(col$iterator.next_1(), 7);
        col.hidden && (values[colIndex++] = $getName(col));
      }
    }
    hiddenColumns = $createHiddenSeriesChartOption(values);
  }
  return hiddenColumns;
}

function $getLastRows(this$static, maxRows){
  var all, index_0, smallList, startIndex, visibleRow;
  if (maxRows <= 0 || maxRows >= this$static.rows_0.size_1())
    return this$static.rows_0;
  all = new ArrayList;
  visibleRow = $getFirstVisibleRow(this$static);
  while (visibleRow) {
    all.array[all.array.length] = visibleRow;
    visibleRow = $getNextVisibleRow(this$static, visibleRow);
  }
  if (all.array.length <= maxRows)
    return all;
  smallList = new ArrayList;
  index_0 = 0;
  startIndex = all.array.length - maxRows - 1;
  while (index_0 < maxRows)
    $add_1(smallList, castTo($get_2(all, startIndex + index_0++), 7));
  return smallList;
}

function $getLastVisibleCol(this$static){
  var i;
  if (this$static.cols_0) {
    for (i = this$static.cols_0.size_1() - 1; i >= 0; i--)
      if (!castTo(this$static.cols_0.get_1(i), 7).hidden)
        return castTo(this$static.cols_0.get_1(i), 7);
  }
  return null;
}

function $getLastVisibleRow(this$static){
  var i;
  if (this$static.rows_0) {
    for (i = this$static.rows_0.size_1() - 1; i >= 0; i--)
      if (!castTo(this$static.rows_0.get_1(i), 7).hidden)
        return castTo(this$static.rows_0.get_1(i), 7);
  }
  return null;
}

function $getLimitedRows(this$static, maxRows){
  var index_0, row, smallList, visibleRow;
  if (maxRows <= 0 || maxRows >= this$static.rows_0.size_1())
    return this$static.rows_0;
  row = castTo(this$static.rows_0.get_1(0), 7);
  if (!!row && (neq(row.timeMS, 0) || row.type_0.indexOf('DATE') != -1))
    return $getLastRows(this$static, maxRows);
  smallList = new ArrayList;
  index_0 = 0;
  visibleRow = $getFirstVisibleRow(this$static);
  while (!!visibleRow && index_0 < maxRows) {
    smallList.array[smallList.array.length] = visibleRow;
    ++index_0;
    visibleRow = $getNextVisibleRow(this$static, visibleRow);
  }
  return smallList;
}

function $getListOfHiddenColumns(this$static){
  var col, col$iterator, values;
  values = new ArrayList;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.hidden && $add_1(values, $getName(col));
    }
  }
  return values;
}

function $getMaxCellsPerRow(this$static){
  var maxCount, row, row$iterator;
  if (this$static.rows_0) {
    maxCount = 0;
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      !!row.cellMap && $size(row.cellMap) > maxCount && (maxCount = $size(row.cellMap));
    }
    return maxCount;
  }
  return 0;
}

function $getMetDataIndexForName(this$static, name_0){
  var i;
  if (this$static.metadata) {
    for (i = 0; i < this$static.metadata.size_1(); i++) {
      if ($equals_2(name_0, castTo(this$static.metadata.get_1(i), 7).mapping))
        return i;
    }
  }
  return -1;
}

function $getMetaDataSize(this$static){
  if (this$static.metadata)
    return this$static.metadata.size_1();
  return 0;
}

function $getMetadataInfo(this$static, index_0){
  if (!!this$static.metadata && index_0 >= 0 && index_0 < this$static.metadata.size_1())
    return castTo(this$static.metadata.get_1(index_0), 7);
  return null;
}

function $getNextDateToPad(lastDate, dateGrain){
  var lastDay, lastMonth, lastYear;
  lastYear = lastDate.jsdate.getFullYear() - $intern_14;
  lastMonth = lastDate.jsdate.getMonth();
  lastDay = lastDate.jsdate.getDate();
  if ($equals_2(dateGrain, 'YEAR')) {
    return new Date_1(lastYear + 1, 0, 1);
  }
   else if ($equals_2(dateGrain, 'QUARTER')) {
    return lastMonth == 9?new Date_1(lastYear + 1, 0, 1):new Date_1(lastYear, lastMonth + 3, 1);
  }
   else if ($equals_2(dateGrain, 'MONTH')) {
    return lastMonth == 11?new Date_1(lastYear + 1, 0, 1):new Date_1(lastYear, lastMonth + 1, 1);
  }
   else if ($equals_2(dateGrain, 'WEEK')) {
    return new Date_1(lastYear, lastMonth, lastDay + 7);
  }
  return null;
}

function $getNextRowWithData(this$static, curRow){
  var index_0, testRow;
  if (!curRow)
    return $getFirstRowWithData(this$static);
  if (this$static.rows_0) {
    for (index_0 = curRow.curIndex + 1; index_0 < this$static.rows_0.size_1(); index_0++) {
      testRow = castTo(this$static.rows_0.get_1(index_0), 7);
      if (!!testRow && !!$getFirstCell(testRow) && !isNaN_0($getValue($getFirstCell(testRow))))
        return castTo(this$static.rows_0.get_1(index_0), 7);
    }
  }
  return null;
}

function $getNextVisibleCol(this$static, curCol){
  var index_0;
  if (!curCol)
    return $getFirstVisibleCol(this$static);
  if (this$static.cols_0) {
    for (index_0 = curCol.curIndex + 1; index_0 < this$static.cols_0.size_1(); index_0++)
      if (!castTo(this$static.cols_0.get_1(index_0), 7).hidden)
        return castTo(this$static.cols_0.get_1(index_0), 7);
  }
  return null;
}

function $getNextVisibleRow(this$static, curRow){
  var index_0;
  if (!curRow)
    return $getFirstVisibleRow(this$static);
  if (this$static.rows_0) {
    for (index_0 = curRow.curIndex + 1; index_0 < this$static.rows_0.size_1(); index_0++)
      if (!castTo(this$static.rows_0.get_1(index_0), 7).hidden)
        return castTo(this$static.rows_0.get_1(index_0), 7);
  }
  return null;
}

function $getNonFilteredColumnList(this$static){
  var col, col$iterator, columnNames;
  if (!!this$static.cols_0 && this$static.hasFilteredCols) {
    columnNames = new ArrayList;
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.showAsFiltered || $add_1(columnNames, col.name_0);
    }
    return columnNames;
  }
  return null;
}

function $getNonFilteredRowList(this$static){
  var row, row$iterator, rowNames;
  if (!!this$static.rows_0 && this$static.hasFilteredRows) {
    rowNames = new ArrayList;
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.showAsFiltered || $add_1(rowNames, row.name_0);
    }
    return rowNames;
  }
  return null;
}

function $getNumCols(this$static){
  if (this$static.cols_0)
    return this$static.cols_0.size_1();
  return 0;
}

function $getNumColsPrimaryScale(this$static){
  var col, col$iterator, count;
  count = 0;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      !col.usesSecondaryScale && !col.hidden && ++count;
    }
  }
  return count;
}

function $getNumColsSecondaryScale(this$static){
  var col, col$iterator, count;
  count = 0;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.usesSecondaryScale && !col.hidden && ++count;
    }
  }
  return count;
}

function $getNumRows(this$static){
  if (this$static.rows_0)
    return this$static.rows_0.size_1();
  return 0;
}

function $getNumRowsWithData(this$static, max_0){
  var count, row, row$iterator;
  count = 0;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      isNaN_0($getValue($getFirstCell(row))) || ++count;
      if (count == max_0)
        break;
    }
  }
  return count;
}

function $getNumVisibleCols(this$static, secondaryScale){
  if (secondaryScale)
    return $getNumColsSecondaryScale(this$static);
  return $getNumColsPrimaryScale(this$static);
}

function $getNumVisibleRowsWithData(this$static){
  var count, row, row$iterator;
  count = 0;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      !row.hidden && !isNaN_0($getValue($getFirstCell(row))) && ++count;
      if (count == $intern_11)
        break;
    }
  }
  return count;
}

function $getOrigColumnType(this$static){
  if (!!this$static.origColTypes && 0 < this$static.origColTypes.array.length)
    return castToString($get_2(this$static.origColTypes, 0));
  return '';
}

function $getOtherValue(this$static, itemsBeforeOther, curColIndex){
  var curRow, i, itemIndex, otherValue;
  otherValue = 0;
  if ($getNumRows(this$static) > itemsBeforeOther + 1) {
    itemIndex = 0;
    curRow = $getRow(this$static, 0);
    while (curRow) {
      ++itemIndex;
      if (itemIndex > itemsBeforeOther) {
        i = curRow.origIndex;
        isNaN_0($getValue($getCell(this$static, i, curColIndex))) || (otherValue += $getCell(this$static, i, curColIndex).value_0);
      }
      curRow = $getRow(this$static, itemIndex);
    }
  }
  return otherValue;
}

function $getPaddingRows(this$static, daysPlusExtra, comp, locale){
  var beyondNextTimeMS, lastDate, lastRow, lastTimeMS, msToAddToCurrentDate, newDate, newDateStr, newRow, newRows, row, row$iterator;
  newRows = new ArrayList;
  msToAddToCurrentDate = 86400 * daysPlusExtra;
  msToAddToCurrentDate = mul_0(msToAddToCurrentDate, $intern_10);
  lastRow = null;
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    if (lastRow) {
      lastTimeMS = lastRow.timeMS;
      if (compare_22(lastTimeMS, 0) != 0) {
        beyondNextTimeMS = add_1(lastTimeMS, msToAddToCurrentDate);
        while (!row.hidden && gt(row.timeMS, beyondNextTimeMS)) {
          lastDate = new Date_4(lastTimeMS);
          newDate = $getNextDateToPad(lastDate, this$static.dateGrain);
          lastTimeMS = fromDouble_0(newDate.jsdate.getTime());
          newDateStr = $getDateGrainStrForDate(this$static, newDate, comp, locale);
          newRow = new ColRowInfo_2(newDateStr, lastRow.type_0);
          newRow.timeMS = lastTimeMS;
          newRows.array[newRows.array.length] = newRow;
          beyondNextTimeMS = add_1(lastTimeMS, msToAddToCurrentDate);
        }
      }
    }
    row.hidden || (lastRow = row);
  }
  return newRows;
}

function $getPercentOfPreviousVal(this$static, rowIndex){
  var curValue, pctOfPrev, prevValue;
  pctOfPrev = 1;
  if (rowIndex > 0) {
    prevValue = $getValue($getFirstCell($getRow(this$static, rowIndex - 1)));
    curValue = $getValue($getFirstCell($getRow(this$static, rowIndex)));
    pctOfPrev = 1;
    prevValue != 0 && (pctOfPrev = curValue / prevValue);
  }
  return pctOfPrev;
}

function $getPrevVisibleCol(this$static, curCol){
  var index_0;
  if (!curCol)
    return $getLastVisibleCol(this$static);
  for (index_0 = curCol.curIndex - 1; index_0 >= 0; index_0--)
    if (!castTo(this$static.cols_0.get_1(index_0), 7).hidden)
      return castTo(this$static.cols_0.get_1(index_0), 7);
  return null;
}

function $getPrevVisibleRow(this$static, curRow){
  var index_0;
  if (!curRow)
    return $getLastVisibleRow(this$static);
  for (index_0 = curRow.curIndex - 1; index_0 >= 0; index_0--)
    if (!castTo(this$static.rows_0.get_1(index_0), 7).hidden && !!$getFirstCell(castTo(this$static.rows_0.get_1(index_0), 7)))
      return castTo(this$static.rows_0.get_1(index_0), 7);
  return null;
}

function $getRow(this$static, row){
  if (this$static.rows_0) {
    if (row < this$static.rows_0.size_1())
      return castTo(this$static.rows_0.get_1(row), 7);
  }
  return null;
}

function $getRowByName(this$static, value_0){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if ($equals_2($getName(row), value_0))
        return row;
    }
  }
  return null;
}

function $getSeriesNameForLegacy(this$static, sb){
  var col, index_0;
  if (this$static.cols_0) {
    for (index_0 = 0; index_0 < this$static.cols_0.size_1(); index_0++) {
      col = castTo(this$static.cols_0.get_1(index_0), 7);
      $append_3($append_3((sb.string += '{"' , sb), jsonStringify(col.name_0)), '"');
      sb.string += ':null}';
      index_0 < this$static.cols_0.size_1() - 1 && (sb.string += ',' , sb);
    }
  }
}

function $getSeriesNameForPeriodOverPeriod(this$static, sb){
  var alias, col, index_0, name_0;
  if (this$static.cols_0) {
    for (index_0 = 0; index_0 < this$static.cols_0.size_1(); index_0++) {
      col = castTo(this$static.cols_0.get_1(index_0), 7);
      name_0 = col.name_0;
      alias = $getName(col);
      $append_3($append_3((sb.string += '{"' , sb), jsonStringify(name_0)), '"');
      sb.string += ':';
      $append_3($append_3((sb.string += '"' , sb), jsonStringify(alias)), '"');
      sb.string += '}';
      index_0 < this$static.cols_0.size_1() - 1 && (sb.string += ',' , sb);
    }
  }
}

function $getSeriesNameFromColumnNames(this$static, sb){
  var col, index_0;
  if (this$static.cols_0) {
    for (index_0 = 0; index_0 < this$static.cols_0.size_1(); index_0++) {
      col = castTo(this$static.cols_0.get_1(index_0), 7);
      $append_3($append_3((sb.string += '{"' , sb), jsonStringify(col.parentName)), '"');
      $append_3($append_3((sb.string += ':"' , sb), jsonStringify(col.name_0)), '"}');
      index_0 < this$static.cols_0.size_1() - 1 && (sb.string += ',' , sb);
    }
  }
}

function $getSeriesNames_0(this$static, graphType){
  var sb;
  sb = new StringBuilder;
  sb.string += '{';
  $append_3(sb, '"' + this$static.name_0 + '":[');
  $equals_2('item-value', this$static.originalDataType)?graphType == 0 || graphType == 1 || graphType == 2 || graphType == 3?$getSeriesNamesFromRowParentName(this$static, sb):$getSeriesNamesFromRowNames(this$static, sb):$equals_2('group-item-value', this$static.originalDataType) || $equals_2('line-xybubble', this$static.originalDataType)?$getSeriesNameFromColumnNames(this$static, sb):$equals_2('legacy', this$static.originalDataType)?$getSeriesNameForLegacy(this$static, sb):$equals_2('period-over-period', this$static.originalDataType) && $getSeriesNameForPeriodOverPeriod(this$static, sb);
  sb.string += ']}';
  return sb.string;
}

function $getSeriesNamesFromRowNames(this$static, sb){
  var index_0, name_0, nameMap, names, parentName, row, row$iterator;
  names = new ArrayList;
  nameMap = new HashMap;
  parentName = null;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      name_0 = row.name_0;
      if ((name_0 == null?getEntryValueOrNull($getEntry(nameMap.hashCodeMap, null)):$get_3(nameMap.stringMap, name_0)) == null) {
        names.array[names.array.length] = name_0;
        name_0 == null?$put_1(nameMap.hashCodeMap, null, null):$put_2(nameMap.stringMap, name_0, name_0);
        parentName == null && (parentName = row.parentName);
      }
    }
  }
  parentName = jsonStringify(parentName);
  for (index_0 = 0; index_0 < names.array.length; index_0++) {
    name_0 = (checkCriticalElementIndex(index_0, names.array.length) , castToString(names.array[index_0]));
    $append_3($append_3((sb.string += '{"' , sb), parentName), '"');
    $append_3($append_3((sb.string += ':"' , sb), jsonStringify(name_0)), '"}');
    index_0 < names.array.length - 1 && (sb.string += ',' , sb);
  }
}

function $getSeriesNamesFromRowParentName(this$static, sb){
  if (!!this$static.rows_0 && this$static.rows_0.size_1() > 0) {
    $append_3($append_3((sb.string += '{"' , sb), jsonStringify(castTo(this$static.rows_0.get_1(0), 7).parentName)), '"');
    sb.string += ': null}';
  }
}

function $getSingleColumnDataGrid(this$static, col, lastValueOnly){
  var cell, index_0, lastRowIndex, lastVisibleRow, newCol, newGrid, newRow, newRows, row, row$iterator;
  newCol = new ColRowInfo_1(col, false);
  newRows = new ArrayList;
  if (lastValueOnly) {
    lastVisibleRow = $getLastVisibleRow(this$static);
    newRow = new ColRowInfo_0(lastVisibleRow);
    lastRowIndex = lastVisibleRow.origIndex;
    if (!!newCol.cellMap && $get_1(newCol.cellMap, valueOf(lastRowIndex)) != null) {
      cell = castTo($get_1(newCol.cellMap, valueOf(lastRowIndex)), 16);
      cell.row = newRow;
      $put_0(newRow.cellMap, valueOf(0), cell);
    }
    newRows.array[newRows.array.length] = newRow;
  }
   else {
    index_0 = 0;
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      newRow = new ColRowInfo_0(row);
      if (!!newCol.cellMap && $get_1(newCol.cellMap, valueOf(index_0)) != null) {
        cell = castTo($get_1(newCol.cellMap, valueOf(index_0)), 16);
        cell.row = newRow;
        $put_0(newRow.cellMap, valueOf(0), cell);
      }
      ++index_0;
      newRows.array[newRows.array.length] = newRow;
    }
  }
  newGrid = $getDupDataGridBase(this$static);
  newGrid.rows_0 = newRows;
  newGrid.cols_0 = new ArrayList;
  newGrid.cols_0.add_0(newCol);
  return newGrid;
}

function $hasADateTimeField(this$static){
  var row, row$iterator;
  if (!!this$static.rows_0 && this$static.rows_0.size_1() > 0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if ($equals_2(row.type_0, 'DATETIME'))
        return true;
    }
  }
  return false;
}

function $hasDynamicFilters(this$static){
  if (this$static.hasHiddenCols || this$static.hasHiddenRows)
    return true;
  return false;
}

function $hasHiddenData(this$static){
  return this$static.hasHiddenRows || this$static.hasHiddenCells;
}

function $hasNegativeValues(this$static){
  var c, cell, r;
  if (!!this$static.cols_0 && !!this$static.rows_0) {
    for (c = 0; c < this$static.cols_0.size_1(); c++) {
      if (this$static.cols_0.get_1(c) != null && !castTo(this$static.cols_0.get_1(c), 7).hidden) {
        for (r = 0; r < this$static.rows_0.size_1(); r++) {
          if (this$static.rows_0.get_1(r) != null && !castTo(this$static.rows_0.get_1(r), 7).hidden) {
            cell = $getCell(this$static, r, c);
            if (!!cell && !isNaN_0(cell.value_0) && cell.value_0 < 0)
              return true;
          }
        }
      }
    }
  }
  return false;
}

function $hasRowsWithMoreCellsThanCellLimit(this$static, maxCells){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (!!row.cellMap && $size(row.cellMap) > maxCells)
        return true;
    }
  }
  return false;
}

function $hasRunningTotals(this$static){
  var colRowInfo, colRowInfo$iterator;
  if (this$static.cols_0) {
    for (colRowInfo$iterator = this$static.cols_0.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      if (colRowInfo.isRunningTotal)
        return true;
    }
  }
  return false;
}

function $hasSecondaryScaleData(this$static){
  var col, col$iterator, hasSecondaryScale;
  hasSecondaryScale = false;
  for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    hasSecondaryScale = hasSecondaryScale | col.usesSecondaryScale;
  }
  return hasSecondaryScale;
}

function $hasTimeData(this$static){
  var row, row$iterator;
  if (!!this$static.rows_0 && this$static.rows_0.size_1() > 0) {
    if (castTo(this$static.rows_0.get_1(0), 7).type_0.indexOf('DATE') != -1)
      return true;
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (eq(row.timeMS, 0))
        return false;
    }
    return true;
  }
  return false;
}

function $hideAllCols(this$static){
  var col, col$iterator;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.hidden = true;
    }
    this$static.hasHiddenCols = true;
    this$static.numVisibleCols = 0;
  }
  $resetAllSums(this$static);
}

function $hideAllRows(this$static){
  var row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.hidden = true;
    }
  }
  this$static.hasHiddenRows = true;
  this$static.numVisibleRows = 0;
  $resetAllSums(this$static);
}

function $hideColumnByName(this$static, value_0){
  var col, col$iterator, index_0;
  index_0 = 0;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($getName(col) != null && $equals_2($getName(col), value_0)) {
        $setColumnHiddenValue(this$static, index_0, true);
        break;
      }
      ++index_0;
    }
  }
}

function $hideNaNValueRows(this$static){
  var firstCell, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        firstCell = $getFirstCell(row);
        if (!firstCell || ($size(row.cellMap) == 1 && isNaN_0($getValue(firstCell)) || $size(row.cellMap) > 1 && isNaN_0((isNaN_0(row.sum) && (row.sum = $calcSum(row, false, true, false)) , row.sum))) && !row.hidden) {
          --this$static.numVisibleRows;
          row.hidden = true;
        }
      }
    }
  }
}

function $hideSeries(this$static, object){
  var i, jsonArray, value_0;
  if (instanceOfString(object)) {
    if ($equals_2('none', object))
      $clearHiddenCols(this$static, false);
    else {
      try {
        jsonArray = new JSONArray_0(castToString(object));
        for (i = 0; i < $length(jsonArray); i++) {
          try {
            value_0 = toString_24($get(jsonArray, i));
            $hideColumnByName(this$static, value_0);
          }
           catch ($e0) {
            $e0 = toJava($e0);
            if (!instanceOf($e0, 35))
              throw toJs($e0);
          }
        }
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 35))
          throw toJs($e1);
      }
    }
  }
}

function $isGroupItemValue(this$static){
  return this$static.isGroupItemValue | $equals_2('group-item-value', this$static.originalDataType);
}

function $isXYBubble(this$static){
  return $equals_2('line-xybubble', this$static.originalDataType) || $equals_2('line-timey', this$static.originalDataType);
}

function $padTimeData(this$static, comp, locale){
  var newRows;
  if (this$static.datesPadded || this$static.isFiscalCalendar && $equals_2(this$static.dateGrain, 'MONTH'))
    return;
  if (this$static.dateGrain != null) {
    newRows = null;
    $equals_2(this$static.dateGrain, 'YEAR')?(newRows = $getPaddingRows(this$static, 370, comp, locale)):$equals_2(this$static.dateGrain, 'QUARTER')?(newRows = $getPaddingRows(this$static, 94, comp, locale)):$equals_2(this$static.dateGrain, 'MONTH')?(newRows = $getPaddingRows(this$static, 33, comp, locale)):$equals_2(this$static.dateGrain, 'WEEK') && (newRows = $getPaddingRows(this$static, 8, comp, locale));
    if (!!newRows && newRows.array.length > 0) {
      this$static.rows_0.addAll(newRows);
      $sortRows(this$static, SORT_DATE);
    }
    this$static.datesPadded = true;
  }
}

function $recalcRowSums(this$static){
  var row, row$iterator;
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    isNaN_0(row.sum) && (row.sum = $calcSum(row, false, true, false));
  }
}

function $recalcVisibleColumns(this$static){
  var col, col$iterator;
  this$static.hasHiddenCols = false;
  this$static.numVisibleCols = 0;
  for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    col.hidden || ++this$static.numVisibleCols;
  }
  this$static.numVisibleCols != this$static.cols_0.size_1() && (this$static.hasHiddenCols = true);
}

function $resetAllSums(this$static){
  var col, col$iterator, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      row.sum = NaN;
      row.sumWithProjections = NaN;
      row.primarySum = NaN;
      row.secondarySum = NaN;
    }
  }
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      col.sum = NaN;
      col.sumWithProjections = NaN;
      col.primarySum = NaN;
      col.secondarySum = NaN;
    }
  }
}

function $resetTotalsAndSums(this$static){
  var col, col$iterator, row, row$iterator;
  this$static.gridTotal = NaN;
  this$static.gridPrimaryTotal = NaN;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (!col.isCalculated) {
        col.sum = NaN;
        col.origSum = NaN;
        col.hideScaleLabels = false;
      }
    }
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (!row.isCalculated) {
        row.sum = NaN;
        row.origSum = NaN;
        row.hideScaleLabels = false;
      }
    }
  }
}

function $setAllCellsHiddenValue(this$static){
  var cell, cell$iterator, entry, outerIter, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          cell.hidden = false;
        }
      }
    }
  }
  this$static.hasHiddenCells = false;
}

function $setAltValueColumnName(this$static, altName){
  this$static.altValueColumnName = altName;
}

function $setColFilteredValue(this$static, value_0, col){
  if (value_0 && !col.showAsFiltered) {
    col.showAsFiltered = true;
    ++this$static.numFilteredCols;
    this$static.hasFilteredCols = true;
  }
   else if (!value_0 && col.showAsFiltered) {
    col.showAsFiltered = false;
    --this$static.numFilteredCols;
    this$static.numFilteredCols == 0 && (this$static.hasFilteredCols = false);
  }
}

function $setColHiddenValue(this$static, value_0, col){
  if (value_0 && !col.hidden) {
    col.hidden = true;
    --this$static.numVisibleCols;
    this$static.hasHiddenCols = true;
  }
   else if (!value_0 && col.hidden) {
    col.hidden = false;
    ++this$static.numVisibleCols;
    this$static.numVisibleCols == this$static.cols_0.size_1() && (this$static.hasHiddenCols = false);
  }
}

function $setColHiddenValueBulk(this$static, list, value_0){
  var col, col$iterator, name_0, name$iterator, nameToRemove;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      nameToRemove = null;
      for (name$iterator = new ArrayList$1(list); name$iterator.i < name$iterator.this$01.array.length;) {
        name_0 = castToString($next_3(name$iterator));
        if ($equals_2($getName(col), name_0) || $equals_2(col.name_0, name_0)) {
          nameToRemove = name_0;
          $setColHiddenValue(this$static, value_0, col);
        }
      }
      nameToRemove != null && $remove_3(list, nameToRemove);
      if (list.array.length == 0)
        break;
    }
  }
  $resetAllSums(this$static);
}

function $setColIndicesIfNeeded(this$static){
  if (!!this$static.cols_0 && this$static.cols_0.size_1() > 1 && castTo(this$static.cols_0.get_1(0), 7).origIndex == 0 && castTo(this$static.cols_0.get_1(this$static.cols_0.size_1() - 1), 7).origIndex == 0) {
    setOrigIndices(this$static.cols_0);
    $setCurIndices(this$static.cols_0);
  }
}

function $setCols(this$static, cols_0){
  this$static.cols_0 = cols_0;
  setOrigIndices(this$static.cols_0);
  $setCurIndices(this$static.cols_0);
  this$static.numVisibleCols = cols_0.size_1();
}

function $setColumnFilterValue(this$static, index_0, value_0){
  var col;
  col = $getColumn(this$static, index_0);
  !!col && $setColFilteredValue(this$static, value_0, col);
  $resetAllSums(this$static);
}

function $setColumnHiddenValue(this$static, index_0, value_0){
  var col;
  col = $getColumn(this$static, index_0);
  !!col && $setColHiddenValue(this$static, value_0, col);
  $resetAllSums(this$static);
}

function $setColumnToAbsoluteValueData(this$static){
  var cell, col, col$iterator, r, result, row, row$iterator;
  result = false;
  !this$static.summaryColumn && $createSummaryColumn(this$static);
  if (this$static.rows_0) {
    for (r = 0; r < this$static.rows_0.size_1(); r++) {
      cell = $getCell(this$static, r, -1);
      if (!!cell && !isNaN_0(cell.value_0)) {
        if (cell.value_0 < 0) {
          result = true;
          $setAlternateValue(cell, -cell.value_0);
        }
      }
    }
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      $resetSum(row);
    }
  }
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      $resetSum(col);
    }
  }
  return result;
}

function $setCurIndices(colRowList){
  var colRowInfo, colRowInfo$iterator, index_0;
  index_0 = 0;
  if (colRowList) {
    for (colRowInfo$iterator = colRowList.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      colRowInfo.curIndex = index_0++;
    }
  }
}

function $setDataHasBeenLimited(this$static, dataHasBeenLimited){
  this$static.dataHasBeenLimited = dataHasBeenLimited;
}

function $setDateGrain(this$static, grain){
  this$static.dateGrain = grain;
}

function $setDateGrouping(this$static, numLevels, locale){
  var dateColMD, dateColName;
  if (this$static.dateGrain != null && numLevels > 0 && !!this$static.rows_0 && this$static.rows_0.size_1() > 0 && !this$static.isFiscalCalendar) {
    dateColMD = castTo(this$static.rows_0.get_1(0), 7).metadata;
    dateColName = dateColMD.label_0;
    numLevels > 0 && $createGroupedMDFields(this$static, numLevels, 1, locale, dateColName);
    numLevels > 1 && $createGroupedMDFields(this$static, numLevels, 2, locale, dateColName);
  }
}

function $setDateJoinColumn(this$static, theColumnName){
  this$static.dateJoinColumn = theColumnName;
}

function $setErrorCode(this$static, errorCode){
  this$static.errorCode = errorCode;
}

function $setFilteredColValueBulk(this$static, list, value_0){
  var col, col$iterator, name_0, name$iterator, nameToFilter;
  if (this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      nameToFilter = null;
      for (name$iterator = new ArrayList$1(list); name$iterator.i < name$iterator.this$01.array.length;) {
        name_0 = castToString($next_3(name$iterator));
        if ($equals_2($getName(col), name_0) || $equals_2(col.name_0, name_0)) {
          nameToFilter = name_0;
          $setColFilteredValue(this$static, value_0, col);
        }
      }
      nameToFilter != null && $remove_3(list, nameToFilter);
      if (list.array.length == 0)
        break;
    }
  }
}

function $setFilteredRowValueBulk(this$static, list, value_0){
  var name_0, name$iterator, nameToFilter, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      nameToFilter = null;
      for (name$iterator = new ArrayList$1(list); name$iterator.i < name$iterator.this$01.array.length;) {
        name_0 = castToString($next_3(name$iterator));
        if ($equals_2(row.name_0, name_0)) {
          nameToFilter = name_0;
          $setRowFilteredValue(this$static, value_0, row);
        }
      }
      nameToFilter != null && $remove_3(list, nameToFilter);
      if (list.array.length == 0)
        break;
    }
  }
}

function $setIsFiscalCalendar(this$static, value_0){
  this$static.isFiscalCalendar = value_0;
}

function $setOrigColNameList(this$static, colNames){
  this$static.origColNameList = colNames;
}

function $setPeriodNames(this$static, periodNames, periodAliases){
  var index_0, periodName;
  if (this$static.cols_0) {
    for (index_0 = 0; index_0 < periodNames.array.length; index_0++) {
      periodName = (checkCriticalElementIndex(index_0, periodNames.array.length) , castToString(periodNames.array[index_0]));
      if (periodName != null && this$static.cols_0.size_1() > index_0 && this$static.cols_0.get_1(index_0) != null) {
        $setName(castTo(this$static.cols_0.get_1(index_0), 7), periodName);
        !!periodAliases && periodAliases.array.length > index_0 && (checkCriticalElementIndex(index_0, periodAliases.array.length) , periodAliases.array[index_0] != null) && $setAltName(castTo(this$static.cols_0.get_1(index_0), 7), (checkCriticalElementIndex(index_0, periodAliases.array.length) , castToString(periodAliases.array[index_0])));
      }
    }
  }
}

function $setPeriodOverPeriodDates(this$static, index_0){
  var actualDateCell, baseCell, baseColumn, baseDateCell, baseFirstIndexDate, basePeriodFirstCell, basePeriodFirstDateCell, dateMapped, diff, i, i0, periodCell, periodColumn, periodFirstCell, periodFirstDateCell, periodFirstIndexDate;
  periodColumn = $getColumn(this$static, index_0);
  baseColumn = $getColumn(this$static, 0);
  periodFirstIndexDate = 0;
  baseFirstIndexDate = 0;
  if (baseColumn.cellMap) {
    for (i0 = 0; i0 < $size(baseColumn.cellMap); i0++) {
      if (!!periodColumn.cellMap && $get_1(periodColumn.cellMap, valueOf(i0)) != null) {
        periodFirstCell = castTo($get_1(periodColumn.cellMap, valueOf(i0)), 16);
        periodFirstDateCell = $getMetaDataCell(periodFirstCell, 0);
        !!periodFirstDateCell && (periodFirstIndexDate = periodFirstDateCell.timeMS);
        basePeriodFirstCell = castTo($get_1(baseColumn.cellMap, valueOf(i0)), 16);
        basePeriodFirstDateCell = $getMetaDataCell(basePeriodFirstCell, 0);
        !!basePeriodFirstDateCell && (baseFirstIndexDate = basePeriodFirstDateCell.timeMS);
        break;
      }
    }
    if (!!baseColumn && !!periodColumn && compare_22(periodFirstIndexDate, 0) != 0 && compare_22(baseFirstIndexDate, 0) != 0) {
      for (i = 0; i < $size(baseColumn.cellMap); i++) {
        dateMapped = false;
        periodCell = null;
        !!periodColumn.cellMap && (periodCell = castTo($get_1(periodColumn.cellMap, valueOf(i)), 16));
        if (periodCell) {
          actualDateCell = $getMetaDataCell(periodCell, 0);
          if (!!actualDateCell && neq(actualDateCell.timeMS, 0)) {
            periodCell.row.timeMS = actualDateCell.timeMS;
            dateMapped = true;
          }
        }
        if (!dateMapped) {
          baseCell = castTo($get_1(baseColumn.cellMap, valueOf(i)), 16);
          baseDateCell = $getMetaDataCell(baseCell, 0);
          diff = sub_1(baseFirstIndexDate, baseDateCell.timeMS);
          baseCell.row.timeMS = sub_1(periodFirstIndexDate, diff);
        }
      }
    }
  }
}

function $setPreSorted(this$static, preSorted){
  this$static.preSorted = preSorted;
}

function $setProjectionJSON(this$static, json){
  this$static.projectionJSON = json;
}

function $setRowFilteredValue(this$static, value_0, row){
  if (value_0 && !row.showAsFiltered) {
    row.showAsFiltered = true;
    ++this$static.numFilteredRows;
    this$static.hasFilteredRows = true;
  }
   else if (!value_0 && row.showAsFiltered) {
    row.showAsFiltered = false;
    --this$static.numFilteredRows;
  }
}

function $setRowHiddenValue(this$static, index_0, value_0){
  var row;
  row = $getRow(this$static, index_0);
  if (row) {
    if (value_0 && !row.hidden) {
      row.hidden = true;
      --this$static.numVisibleRows;
      this$static.hasHiddenRows = true;
    }
     else if (!value_0 && row.hidden) {
      row.hidden = false;
      ++this$static.numVisibleRows;
      this$static.numVisibleRows == this$static.rows_0.size_1() && (this$static.hasHiddenRows = false);
    }
  }
  $resetAllSums(this$static);
}

function $setRowHiddenValueBulk(this$static, list, value_0){
  var index_0, index$iterator, row;
  for (index$iterator = new ArrayList$1(list); index$iterator.i < index$iterator.this$01.array.length;) {
    index_0 = castTo($next_3(index$iterator), 29).value_0;
    row = $getRow(this$static, index_0);
    if (row) {
      if (value_0 && !row.hidden) {
        row.hidden = true;
        --this$static.numVisibleRows;
        this$static.hasHiddenRows = true;
      }
       else if (!value_0 && row.hidden) {
        row.hidden = false;
        ++this$static.numVisibleRows;
      }
    }
  }
  $resetAllSums(this$static);
}

function $setRowHiddenValueBulkByName(this$static, list){
  var name_0, name$iterator, nameToRemove, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      nameToRemove = null;
      for (name$iterator = new ArrayList$1(list); name$iterator.i < name$iterator.this$01.array.length;) {
        name_0 = castToString($next_3(name$iterator));
        if ($equals_2($getName(row), name_0)) {
          row.hidden = true;
          --this$static.numVisibleRows;
          nameToRemove = name_0;
          break;
        }
      }
      nameToRemove != null && $remove_3(list, nameToRemove);
      if (list.array.length == 0)
        break;
    }
  }
  $resetAllSums(this$static);
}

function $setRows(this$static, rows_0){
  this$static.rows_0 = rows_0;
  setOrigIndices(this$static.rows_0);
  $setCurIndices(this$static.rows_0);
  this$static.numVisibleRows = rows_0.size_1();
}

function $setRowsAsNonTimeData(this$static){
  var row, row$iterator;
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    row.timeMS = 0;
  }
}

function $setToPercentOfCategoryComboValues(this$static, numLines){
  var cell, col, colIndex, groupTotal, i, percentOfCategory, row, row$iterator;
  for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    groupTotal = $getSumOfPositiveValues_0(row, numLines, $getNumCols(this$static));
    if (row.cellMap) {
      for (i = numLines; i < $getNumCols(this$static); i++) {
        col = $getColumn(this$static, i);
        colIndex = col.origIndex;
        cell = castTo($get_1(row.cellMap, valueOf(colIndex)), 16);
        if (!!cell && !cell.column.hidden && !cell.row.hidden) {
          if (groupTotal == 0) {
            cell.altValue = 0;
          }
           else {
            percentOfCategory = cell.value_0 / groupTotal;
            cell.altValue = percentOfCategory * 100;
          }
        }
      }
    }
  }
}

function $setToPercentOfCategoryValues(this$static){
  $setToPercentOfRowOrColumn(this$static, this$static.rows_0, false);
  $hasSecondaryScaleData(this$static) && $setToPercentOfRowOrColumn(this$static, this$static.rows_0, true);
}

function $setToPercentOfRowOrColumn(this$static, rowOrCol, useSecondaryScale){
  var cell, cell$iterator, entry, groupTotal, outerIter, percentOfCategory, rowOrColInfo, rowOrColInfo$iterator;
  $clearAlternateValues_0(this$static);
  for (rowOrColInfo$iterator = rowOrCol.iterator(); rowOrColInfo$iterator.hasNext_0();) {
    rowOrColInfo = castTo(rowOrColInfo$iterator.next_1(), 7);
    useSecondaryScale?(groupTotal = $getSumForSecondary(rowOrColInfo)):(groupTotal = $getSumOfPositiveValues(rowOrColInfo));
    if (rowOrColInfo.cellMap) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowOrColInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !useSecondaryScale || useSecondaryScale && cell.column.usesSecondaryScale) {
          if (!cell.column.hidden && !cell.row.hidden) {
            if (groupTotal == 0) {
              cell.altValue = 0;
            }
             else {
              percentOfCategory = cell.value_0 / groupTotal;
              cell.altValue = percentOfCategory * 100;
            }
          }
        }
      }
    }
  }
}

function $setToPercentOfSeriesValues(this$static){
  $setToPercentOfRowOrColumn(this$static, this$static.cols_0, false);
}

function $setValueColumnName(this$static, valueColumnName){
  this$static.valueColumnName = valueColumnName;
}

function $showTimeValuesBewteenValues(this$static, startDate, endDate){
  var cell, cell$iterator, endTime, entry, outerIter, row, row$iterator, startTime, temp, value_0;
  startTime = getTimeMSForDateString(startDate, null, null, null).value_0;
  endTime = getTimeMSForDateString(endDate, null, null, null).value_0;
  if (compare_22(endTime, startTime) < 0) {
    temp = startTime;
    startTime = endTime;
    endTime = temp;
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          value_0 = toDouble_0(cell.timeMS);
          if (value_0 < toDouble_0(startTime) || value_0 > toDouble_0(endTime)) {
            cell.hidden = true;
            this$static.hasHiddenCells = true;
          }
        }
      }
    }
  }
}

function $showXValuesBewteenValues(this$static, lowValue, highValue){
  var cell, cell$iterator, entry, max_0, min_0, outerIter, row, row$iterator, temp, value_0;
  min_0 = getDouble_0(lowValue, 0);
  max_0 = getDouble_0(highValue, 0);
  if (max_0 < min_0) {
    temp = max_0;
    max_0 = min_0;
    min_0 = temp;
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          value_0 = $getValue(cell);
          if (value_0 < min_0 || value_0 > max_0) {
            cell.hidden = true;
            this$static.hasHiddenCells = true;
          }
        }
      }
    }
  }
}

function $showXValuesWithCatNames(this$static, catNames){
  var catName, cell, cell$iterator, entry, outerIter, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          catName = cell.valueStr;
          if ((catName == null?getEntryValueOrNull($getEntry(catNames.hashCodeMap, null)):$get_3(catNames.stringMap, catName)) == null) {
            cell.hidden = true;
            this$static.hasHiddenCells = true;
          }
        }
      }
    }
  }
}

function $showYValuesBewteenValues(this$static, lowValue, highValue){
  var cell, cell$iterator, entry, max_0, min_0, outerIter, row, row$iterator, temp, value_0;
  min_0 = getDouble_0(lowValue, 0);
  max_0 = getDouble_0(highValue, 0);
  if (max_0 < min_0) {
    temp = max_0;
    max_0 = min_0;
    min_0 = temp;
  }
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          if ($getMetaDataCell(cell, 0)) {
            value_0 = $getValue($getMetaDataCell(cell, 0));
            if (value_0 < min_0 || value_0 > max_0) {
              cell.hidden = true;
              this$static.hasHiddenCells = true;
            }
          }
        }
      }
    }
  }
}

function $sortCellsByTimeValue(cellMap){
  var cellAry;
  cellAry = new ArrayList_1(new AbstractMap$2(cellMap));
  $sort(cellAry, new DataGrid$9);
  return cellAry;
}

function $sortRows(this$static, order){
  sort_1(this$static.rows_0, order, false);
  this$static.lastRowSort = order;
  this$static.lastRowSortDesc = false;
  $setCurIndices(this$static.rows_0);
  this$static.summaryColumn = null;
}

function $sortRowsDesc(this$static, order, includeHidden){
  sort_1(this$static.rows_0, order, includeHidden);
  this$static.lastRowSort = order;
  this$static.lastRowSortDesc = true;
  reverse(this$static.rows_0);
  $setCurIndices(this$static.rows_0);
  this$static.summaryColumn = null;
}

function $supportsFiltersWithBetweenTimeMS(this$static){
  if (this$static.dateGrain != null && ($equals_2(this$static.dateGrain, 'MONTH') || $equals_2(this$static.dateGrain, 'QUARTER') || $equals_2(this$static.dateGrain, 'YEAR')))
    return false;
  return true;
}

function $toggleColumnShowAsFilter(this$static, column){
  if (this$static.numFilteredCols == 0) {
    $filterAllCols(this$static);
    $setColFilteredValue(this$static, false, column);
  }
   else {
    $setColFilteredValue(this$static, !column.showAsFiltered, column);
    this$static.numFilteredCols == $getNumCols(this$static) && $clearFilteredCols(this$static);
  }
}

function $toggleRowShowAsFilter(this$static, row){
  if (this$static.hasFilteredRows) {
    $setRowFilteredValue(this$static, !row.showAsFiltered, row);
  }
   else {
    $filterAllRows(this$static);
    $setRowFilteredValue(this$static, false, row);
  }
}

function $toggleRowShowAsFilterAndClearIfAllFiltered(this$static, row){
  $toggleRowShowAsFilter(this$static, row);
  this$static.numFilteredRows == $getNumRows(this$static) && $clearFilteredRows(this$static);
}

function $transformOrderedColumnToNoGroupItemValue(this$static, columnOrder, groupByRowName){
  var cell, cellMetaDataAdded, colInfo, colList, colMap, colName, itemCell, mdCell, mdCellsNeeded, mdColInfo, mdColumn, mdColumnIndex, mdIndex, metaDataCellsAdded, metadataList, newRowIndex, row, row$iterator, rowIndex, rowInfo, rowList, rowMap, rowMetaData, rowName, rowParentDisplayName, rowParentName, rowType, seriesCell, seriesCol, temp, valueCol;
  if (!this$static.orderedColumnList || columnOrder.array.length == 0)
    return this$static;
  colMap = new HashMap;
  rowMap = new HashMap;
  colList = new ArrayList;
  rowList = new ArrayList;
  metadataList = new ArrayList;
  rowIndex = 0;
  mdCellsNeeded = 0;
  seriesCol = (checkCriticalElementIndex(0, columnOrder.array.length) , castTo(columnOrder.array[0], 29)).value_0;
  valueCol = -1;
  if (columnOrder.array.length > 1) {
    valueCol = (checkCriticalElementIndex(1, columnOrder.array.length) , castTo(columnOrder.array[1], 29)).value_0;
    mdCellsNeeded = columnOrder.array.length - 2;
  }
  metaDataCellsAdded = false;
  rowParentName = null;
  rowParentDisplayName = null;
  rowType = 'STRING';
  colInfo = null;
  rowMetaData = null;
  newRowIndex = 0;
  if (!!this$static.rows_0 && !!this$static.cols_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      rowName = 'series';
      if (seriesCol >= 0) {
        seriesCell = null;
        !!row.cellMap && (seriesCell = castTo($get_1(row.cellMap, valueOf(seriesCol)), 16));
        if (seriesCell) {
          rowName = seriesCell.valueStr;
          rowName == null && !isNaN_0($getValue(seriesCell)) && ($equals_2(seriesCell.column.type_0, 'LONG')?(rowName = '' + toInt_0(fromDouble_0($wnd.Math.round($getValue(seriesCell))))):(rowName = '' + $getValue(seriesCell)));
          rowType = seriesCell.column.type_0;
          !!seriesCell.column.metadata && (rowMetaData = new ColumnMetadata_0(seriesCell.column.metadata));
          if (rowParentName == null) {
            rowParentName = seriesCell.column.name_0;
            seriesCell.column.altName != null && (rowParentDisplayName = seriesCell.column.altName);
          }
        }
      }
      cell = null;
      if (valueCol >= 0) {
        itemCell = null;
        !!row.cellMap && (itemCell = castTo($get_1(row.cellMap, valueOf(valueCol)), 16));
        cell = new Cell_0(itemCell);
        colName = $getColName(itemCell);
        if (!colInfo) {
          colInfo = new ColRowInfo_3(null, $getColOrigName(itemCell), itemCell.column.type_0, 0, cell, false, rowIndex);
          !!itemCell.column && !!itemCell.column.metadata && $setMetadata(colInfo, new ColumnMetadata_0(itemCell.column.metadata));
          $getColAltName(itemCell) != null && $setAltName(colInfo, $getColAltName(itemCell));
          $setFormat(colInfo, itemCell.column.format);
          colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
          colList.array[colList.array.length] = colInfo;
        }
         else 
          $addItem_0(colInfo, cell, false, $size(colInfo.cellMap));
        if (mdCellsNeeded > 0) {
          cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, mdCellsNeeded, 0, 1);
          cellMetaDataAdded = false;
          for (mdIndex = 2; mdIndex < columnOrder.array.length; mdIndex++) {
            mdColumnIndex = (checkCriticalElementIndex(mdIndex, columnOrder.array.length) , castTo(columnOrder.array[mdIndex], 29)).value_0;
            if (mdColumnIndex >= 0) {
              mdCell = null;
              !!row.cellMap && (mdCell = castTo($get_1(row.cellMap, valueOf(mdColumnIndex)), 16));
              $addMetaData_0(cell, mdIndex - 2, mdCell);
              metaDataCellsAdded = true;
              cellMetaDataAdded = true;
            }
          }
          cellMetaDataAdded || (cell.metaData = null);
        }
      }
      if (cell) {
        rowInfo = null;
        groupByRowName && (rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7));
        if (!rowInfo) {
          rowInfo = new ColRowInfo_3(rowParentName, rowName, rowType, newRowIndex++, cell, true, 0);
          rowInfo.metadata = rowMetaData;
          rowParentDisplayName != null && (rowInfo.parentDisplayName = null , rowParentDisplayName != null && rowParentDisplayName.length > 0 && (rowInfo.parentDisplayName = rowParentDisplayName));
          rowName == null?$put_1(rowMap.hashCodeMap, null, rowInfo):$put_2(rowMap.stringMap, rowName, rowInfo);
          rowList.array[rowList.array.length] = rowInfo;
        }
         else 
          $addItem_0(rowInfo, cell, true, $size(rowInfo.cellMap));
        ++rowIndex;
      }
    }
    if (mdCellsNeeded > 0 && metaDataCellsAdded) {
      for (mdIndex = 2; mdIndex < columnOrder.array.length; mdIndex++) {
        mdColumnIndex = (checkCriticalElementIndex(mdIndex, columnOrder.array.length) , castTo(columnOrder.array[mdIndex], 29)).value_0;
        if (mdColumnIndex >= 0) {
          mdColumn = castTo(this$static.cols_0.get_1(mdColumnIndex), 7);
          mdColInfo = new ColRowInfo_2(mdColumn.name_0, mdColumn.type_0);
          $setFormat(mdColInfo, mdColumn.format);
          $setAltName(mdColInfo, mdColumn.altName);
          $setMapping(mdColInfo, mdColumn.mapping);
          metadataList.array[metadataList.array.length] = mdColInfo;
        }
         else 
          $add_1(metadataList, new ColRowInfo);
      }
    }
  }
  $reset_5(rowMap);
  $reset_5(colMap);
  temp = new DataGrid_0(this$static.name_0, 'nogroup-item-value', rowList, colList, metadataList);
  $setDateJoinColumn(temp, this$static.dateJoinColumn);
  return temp;
}

function $transformOrderedColumnToXYBubble(this$static){
  var bubbleCell, bubbleCol, cell, cell$iterator, col, col$iterator, colAltName, colInfo, colList, colMap, colName, curRowIndex, dataType, index_0, itemCell, limit, lower2Cell, lower2Col, lowerCell, lowerCol, mdCellsNeeded, mdColInfoY, median2Cell, median2Col, medianCell, medianCol, metadataList, newCellMap, newGrid, newYCell, orderedCells, outlierCell, outlierCol, row, row$iterator, rowAltName, rowIndex, rowInfo, rowList, rowMap, rowMetaData, rowName, rowParentName, rowType, seriesCell, seriesCol, upper2Cell, upper2Col, upperCell, upperCol, xCol, yCell, yCol, yearValsConverted;
  if (!this$static.orderedColumnList)
    return this$static;
  limit = 26000;
  colMap = new HashMap;
  rowMap = new HashMap;
  colList = new ArrayList;
  rowList = new ArrayList;
  metadataList = new ArrayList;
  seriesCol = -1;
  xCol = -1;
  yCol = -1;
  bubbleCol = -1;
  medianCol = -1;
  lowerCol = -1;
  upperCol = -1;
  outlierCol = -1;
  median2Col = -1;
  lower2Col = -1;
  upper2Col = -1;
  mdCellsNeeded = 1;
  dataType = 'line-timey';
  yearValsConverted = false;
  if (!!this$static.rows_0 && !!this$static.cols_0) {
    for (col$iterator = this$static.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2('SERIES', col.mapping))
        seriesCol = col.origIndex;
      else if ($equals_2('XTIME', col.mapping))
        xCol = col.origIndex;
      else if ($equals_2('ITEM', col.mapping))
        xCol = col.origIndex;
      else if ($equals_2('VALUE', col.mapping))
        yCol = col.origIndex;
      else if ($equals_2('BUBBLESIZE', col.mapping)) {
        bubbleCol = col.origIndex;
        mdCellsNeeded = 2;
      }
       else if ($equals_2('MEDIAN', col.mapping)) {
        medianCol = col.origIndex;
        mdCellsNeeded = 3;
      }
       else if ($equals_2('LOWER', col.mapping)) {
        lowerCol = col.origIndex;
        mdCellsNeeded = 4;
      }
       else if ($equals_2('UPPER', col.mapping)) {
        upperCol = col.origIndex;
        mdCellsNeeded = 5;
      }
       else if ($equals_2('OUTLIERS', col.mapping)) {
        outlierCol = col.origIndex;
        mdCellsNeeded = 6;
      }
       else if ($equals_2('MEDIAN2', col.mapping)) {
        median2Col = col.origIndex;
        mdCellsNeeded = 7;
      }
       else if ($equals_2('LOWER2', col.mapping)) {
        lower2Col = col.origIndex;
        mdCellsNeeded = 8;
      }
       else if ($equals_2('UPPER2', col.mapping)) {
        upper2Col = col.origIndex;
        mdCellsNeeded = 9;
      }
    }
    if (xCol == -1 || yCol == -1)
      return this$static;
    bubbleCol >= 0 && (dataType = 'line-xybubble');
    mdCellsNeeded > 5 && (limit = $intern_12);
    rowIndex = 0;
    rowParentName = null;
    rowType = 'STRING';
    rowMetaData = null;
    colInfo = null;
    mdColInfoY = null;
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      --limit;
      if (limit < 0)
        break;
      rowName = castTo(this$static.cols_0.get_1(xCol), 7).name_0;
      rowAltName = castTo(this$static.cols_0.get_1(xCol), 7).altName;
      if (seriesCol >= 0) {
        seriesCell = null;
        !!row.cellMap && (seriesCell = castTo($get_1(row.cellMap, valueOf(seriesCol)), 16));
        if (seriesCell) {
          rowName = seriesCell.valueStr;
          rowAltName = null;
          rowType = seriesCell.column.type_0;
          !!seriesCell.column.metadata && (rowMetaData = new ColumnMetadata_0(seriesCell.column.metadata));
          rowParentName == null && (rowParentName = seriesCell.column.name_0);
        }
      }
      rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7);
      curRowIndex = rowIndex;
      !!rowInfo && (curRowIndex = rowInfo.origIndex);
      itemCell = null;
      !!row.cellMap && (itemCell = castTo($get_1(row.cellMap, valueOf(xCol)), 16));
      cell = new Cell_0(itemCell);
      colName = $getColOrigName(itemCell);
      colAltName = $getColAltName(itemCell);
      if (!colInfo) {
        colInfo = new ColRowInfo_3(null, colName, itemCell.column.type_0, 0, cell, false, curRowIndex);
        !!itemCell.column && !!itemCell.column.metadata && $setMetadata(colInfo, new ColumnMetadata_0(itemCell.column.metadata));
        colInfo.altName = colAltName;
        $setFormat(colInfo, itemCell.column.format);
        colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
        colList.array[colList.array.length] = colInfo;
      }
       else 
        $addItem_0(colInfo, cell, false, $size(colInfo.cellMap));
      if (!rowInfo) {
        rowInfo = new ColRowInfo_3(rowParentName, rowName, rowType, rowIndex++, cell, true, 0);
        rowInfo.metadata = rowMetaData;
        rowInfo.altName = rowAltName;
        rowName == null?$put_1(rowMap.hashCodeMap, null, rowInfo):$put_2(rowMap.stringMap, rowName, rowInfo);
        rowList.array[rowList.array.length] = rowInfo;
      }
       else 
        $addItem_0(rowInfo, cell, true, $size(rowInfo.cellMap));
      yCell = null;
      !!row.cellMap && (yCell = castTo($get_1(row.cellMap, valueOf(yCol)), 16));
      bubbleCell = null;
      medianCell = null;
      lowerCell = null;
      upperCell = null;
      outlierCell = null;
      median2Cell = null;
      lower2Cell = null;
      upper2Cell = null;
      if (this$static.dateGrain != null && $equalsIgnoreCase(this$static.dateGrain, 'year') && cell.valueStr == null && !isNaN_0($getValue(cell))) {
        cell.valueStr == null && !isNaN_0(cell.value_0) && (cell.valueStr = $formatNumber_1(($clinit_Cell() , stringFromYearValueFormatter), cell.value_0));
        cell.value_0 = NaN;
        yearValsConverted = true;
      }
      if (yCell) {
        cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, mdCellsNeeded, 0, 1);
        newYCell = $addMetaData(cell, 0, $getValue(yCell));
        if (row.cellMap) {
          if (bubbleCol >= 0) {
            bubbleCell = castTo($get_1(row.cellMap, valueOf(bubbleCol)), 16);
            !!bubbleCell && $addMetaData(cell, BUBBLE_VALUE, $getValue(bubbleCell));
          }
          if (medianCol >= 0) {
            medianCell = castTo($get_1(row.cellMap, valueOf(medianCol)), 16);
            !!medianCell && $addMetaData(cell, MEAN_VALUE, $getValue(medianCell));
          }
          if (lowerCol >= 0) {
            lowerCell = castTo($get_1(row.cellMap, valueOf(lowerCol)), 16);
            !!lowerCell && $addMetaData(cell, LOWER_VALUE, $getValue(lowerCell));
          }
          if (upperCol >= 0) {
            upperCell = castTo($get_1(row.cellMap, valueOf(upperCol)), 16);
            !!upperCell && $addMetaData(cell, UPPER_VALUE, $getValue(upperCell));
          }
          if (outlierCol >= 0) {
            outlierCell = castTo($get_1(row.cellMap, valueOf(outlierCol)), 16);
            !!outlierCell && $addMetaData(cell, OUTLIER_VALUE, $getOutlierValue(outlierCell));
          }
          if (median2Col >= 0) {
            median2Cell = castTo($get_1(row.cellMap, valueOf(median2Col)), 16);
            !!median2Cell && $addMetaData(cell, MEAN_VALUE2, $getValue(median2Cell));
          }
          if (lower2Col >= 0) {
            lower2Cell = castTo($get_1(row.cellMap, valueOf(lower2Col)), 16);
            !!lower2Cell && $addMetaData(cell, LOWER_VALUE2, $getValue(lower2Cell));
          }
          if (upper2Col >= 0) {
            upper2Cell = castTo($get_1(row.cellMap, valueOf(upper2Col)), 16);
            !!upper2Cell && $addMetaData(cell, UPPER_VALUE2, $getValue(upper2Cell));
          }
        }
        if (metadataList.array.length == 0) {
          mdColInfoY = new ColRowInfo_2($getColOrigName(yCell), yCell.column.type_0);
          $setAltName(mdColInfoY, $getColAltName(yCell));
          $setFormat(mdColInfoY, yCell.column.format);
          metadataList.array[metadataList.array.length] = mdColInfoY;
          mdCellsNeeded >= 2 && $addMetaDataDefCell(metadataList, bubbleCell, 'BUBBLE');
          mdCellsNeeded >= 3 && $addMetaDataDefCell(metadataList, medianCell, 'MEDIAN');
          mdCellsNeeded >= 4 && $addMetaDataDefCell(metadataList, lowerCell, 'LOWER');
          mdCellsNeeded >= 5 && $addMetaDataDefCell(metadataList, upperCell, 'UPPER');
          mdCellsNeeded >= 6 && $addMetaDataDefCell(metadataList, outlierCell, 'OUTLIERS');
          mdCellsNeeded >= 7 && $addMetaDataDefCell(metadataList, median2Cell, 'MEDIAN2');
          mdCellsNeeded >= 8 && $addMetaDataDefCell(metadataList, lower2Cell, 'LOWER2');
          mdCellsNeeded >= 9 && $addMetaDataDefCell(metadataList, upper2Cell, 'UPPER2');
        }
        !!newYCell && (newYCell.column = mdColInfoY);
      }
    }
  }
  $reset_5(rowMap);
  $reset_5(colMap);
  yearValsConverted && ((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).type_0 = 'STRING');
  newGrid = new DataGrid_0(this$static.name_0, dataType, rowList, colList, metadataList);
  newGrid.dateJoinColumn = this$static.dateJoinColumn;
  $setDateGrain(newGrid, this$static.dateGrain);
  limit < 0 && (newGrid.dataHasBeenLimited = true);
  if ((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).type_0 != null && $equals_2((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).type_0, 'STRING') || $equals_2((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).type_0, 'DATE') && neq($getFirstCell((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7))).timeMS, 0)) {
    orderedCells = $sortCellsByTimeValue((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).cellMap);
    newCellMap = new HashMap;
    index_0 = 0;
    for (cell$iterator = new ArrayList$1(orderedCells); cell$iterator.i < cell$iterator.this$01.array.length;) {
      cell = castTo($next_3(cell$iterator), 16);
      $put_0(newCellMap, valueOf(index_0++), cell);
    }
    $reset_5((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).cellMap);
    $setCellMap((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)), newCellMap);
  }
  return newGrid;
}

function $transposeRowsCols(this$static){
  var cell, cell$iterator, entry, outerIter, row, row$iterator, tmpCRI, tmpNumVisibleRows, tmpRows;
  if (this$static.dataHasAlreadyBeenTransposed)
    return;
  tmpRows = this$static.rows_0;
  this$static.rows_0 = this$static.cols_0;
  this$static.cols_0 = tmpRows;
  tmpNumVisibleRows = this$static.numVisibleRows;
  this$static.numVisibleRows = this$static.numVisibleCols;
  this$static.numVisibleCols = tmpNumVisibleRows;
  if (this$static.rows_0) {
    for (row$iterator = this$static.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (row.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          tmpCRI = cell.column;
          cell.column = cell.row;
          cell.row = tmpCRI;
        }
      }
    }
  }
  this$static.dataHasAlreadyBeenTransposed = true;
}

function $truncateColumns(this$static){
  var column, i, i0, nVisible, newCols, numRows;
  if (!!this$static.cols_0 && !!this$static.rows_0) {
    if (this$static.cols_0.size_1() > $intern_21) {
      newCols = new ArrayList;
      nVisible = 0;
      for (i0 = 0; i0 < $intern_21; i0++) {
        column = castTo(this$static.cols_0.get_1(i0), 7);
        column.hidden || ++nVisible;
        newCols.array[newCols.array.length] = column;
      }
      this$static.cols_0 = newCols;
      this$static.numVisibleCols = nVisible;
      numRows = this$static.rows_0.size_1();
      for (i = 0; i < numRows; i++)
        $removeCellsForColumnsGreaterThan(castTo(this$static.rows_0.get_1(i), 7));
      $resetAllSums(this$static);
    }
  }
}

function $unTransposeRowsCols(this$static){
  if (this$static.dataHasAlreadyBeenTransposed) {
    this$static.dataHasAlreadyBeenTransposed = false;
    $transposeRowsCols(this$static);
    this$static.dataHasAlreadyBeenTransposed = false;
  }
}

function DataGrid(){
  $$init_5(this);
}

function DataGrid_0(name_0, dataType, rows_0, cols_0, metadata){
  $$init_5(this);
  this.name_0 = name_0;
  this.originalDataType = dataType;
  this.rows_0 = rows_0;
  this.cols_0 = cols_0;
  this.metadata = metadata;
  $setCurIndices(this.rows_0);
  $setCurIndices(this.cols_0);
  this.numVisibleCols = cols_0.size_1();
  this.numVisibleRows = rows_0.size_1();
}

function setOrigIndices(colRowList){
  var colRowInfo, colRowInfo$iterator, index_0;
  index_0 = 0;
  if (colRowList) {
    for (colRowInfo$iterator = colRowList.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      colRowInfo.origIndex = index_0++;
    }
  }
}

function sort_1(list, order, includeHidden){
  if (!list)
    return;
  order == 0?list.sort_0(new DataGrid$1):order == SORT_SUM && includeHidden?list.sort_0(new DataGrid$2):order == SORT_SUM?list.sort_0(new DataGrid$3):order == SORT_SUM_ORIG?list.sort_0(new DataGrid$4):order == SORT_NAME?list.sort_0(new DataGrid$5):order == SORT_NAME_AS_INT?list.sort_0(new DataGrid$6):order == SORT_COUNT?list.sort_0(new DataGrid$7):order == SORT_DATE && list.sort_0(new DataGrid$8);
}

defineClass(61, 1, {61:1}, DataGrid, DataGrid_0);
_.dataHasAlreadyBeenTransposed = false;
_.dataHasBeenLimited = false;
_.datesPadded = false;
_.errorCode = 0;
_.gridPrimaryTotal = NaN;
_.gridSecondaryTotal = NaN;
_.gridTotal = NaN;
_.hasFilteredCols = false;
_.hasFilteredRows = false;
_.hasHiddenCells = false;
_.hasHiddenCols = false;
_.hasHiddenRows = false;
_.isFiscalCalendar = false;
_.isGroupItemValue = false;
_.isPeriodOverPeriod = false;
_.lastRowSort = 0;
_.lastRowSortDesc = false;
_.numFilteredCols = 0;
_.numFilteredRows = 0;
_.numProjectedRows = 0;
_.numVisibleCols = -1;
_.numVisibleRows = -1;
_.orderedColumnList = false;
_.preSorted = false;
var SORT_COUNT = 3, SORT_DATE = 4, SORT_NAME = 2, SORT_NAME_AS_INT = 5, SORT_SUM = 1, SORT_SUM_ORIG = 6;
var Lcom_domo_charting_data_DataGrid_2_classLit = createForClass('com.domo.charting.data', 'DataGrid', 61);
function $compare_1(o1, o2){
  return o1.origIndex - o2.origIndex;
}

function DataGrid$1(){
}

defineClass(296, 1, {}, DataGrid$1);
_.compare = function compare_2(o1, o2){
  return $compare_1(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_3(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$1_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/1', 296);
function $compare_2(o1, o2){
  var o1Sum, o2Sum;
  o1Sum = (isNaN_0(o1.sumWithProjections) && (o1.sumWithProjections = $calcSum(o1, true, true, true)) , o1.sumWithProjections);
  isNaN(o1Sum) && (o1Sum = $intern_20);
  o2Sum = (isNaN_0(o2.sumWithProjections) && (o2.sumWithProjections = $calcSum(o2, true, true, true)) , o2.sumWithProjections);
  isNaN(o2Sum) && (o2Sum = $intern_20);
  return $compareTo_1(o1Sum, o2Sum);
}

function DataGrid$2(){
}

defineClass(297, 1, {}, DataGrid$2);
_.compare = function compare_3(o1, o2){
  return $compare_2(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_4(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$2_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/2', 297);
function $compare_3(o1, o2){
  var o1Sum, o2Sum;
  o1Sum = (isNaN_0(o1.sumWithProjections) && (o1.sumWithProjections = $calcSum(o1, true, true, false)) , o1.sumWithProjections);
  isNaN(o1Sum) && (o1Sum = $intern_20);
  o2Sum = (isNaN_0(o2.sumWithProjections) && (o2.sumWithProjections = $calcSum(o2, true, true, false)) , o2.sumWithProjections);
  isNaN(o2Sum) && (o2Sum = $intern_20);
  return $compareTo_1(o1Sum, o2Sum);
}

function DataGrid$3(){
}

defineClass(298, 1, {}, DataGrid$3);
_.compare = function compare_4(o1, o2){
  return $compare_3(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_5(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$3_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/3', 298);
function $compare_4(o1, o2){
  var o1Sum, o2Sum;
  o1Sum = (isNaN_0(o1.sumWithProjections) && (o1.sumWithProjections = $calcSum(o1, true, false, false)) , o1.sumWithProjections);
  isNaN(o1Sum) && (o1Sum = $intern_20);
  o2Sum = (isNaN_0(o2.sumWithProjections) && (o2.sumWithProjections = $calcSum(o2, true, false, false)) , o2.sumWithProjections);
  isNaN(o2Sum) && (o2Sum = $intern_20);
  return $compareTo_1(o1Sum, o2Sum);
}

function DataGrid$4(){
}

defineClass(299, 1, {}, DataGrid$4);
_.compare = function compare_5(o1, o2){
  return $compare_4(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_6(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$4_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/4', 299);
function $compare_5(o1, o2){
  return $compareTo_4(o1.name_0, o2.name_0);
}

function DataGrid$5(){
}

defineClass(300, 1, {}, DataGrid$5);
_.compare = function compare_6(o1, o2){
  return $compare_5(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_7(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$5_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/5', 300);
function $compare_6(o1, o2){
  var o1Int, o2Int;
  o1Int = __parseAndValidateInt(o1.name_0, 10);
  o2Int = __parseAndValidateInt(o2.name_0, 10);
  return o1Int - o2Int;
}

function DataGrid$6(){
}

defineClass(301, 1, {}, DataGrid$6);
_.compare = function compare_7(o1, o2){
  return $compare_6(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_8(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$6_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/6', 301);
function $compare_7(o1, o2){
  return o1.count - o2.count;
}

function DataGrid$7(){
}

defineClass(302, 1, {}, DataGrid$7);
_.compare = function compare_8(o1, o2){
  return $compare_7(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_9(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$7_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/7', 302);
function $compare_8(o1, o2){
  var result;
  result = sub_1(o1.timeMS, o2.timeMS);
  if (compare_22(result, 0) < 0)
    return -1;
  else if (compare_22(result, 0) > 0)
    return 1;
  return 0;
}

function DataGrid$8(){
}

defineClass(303, 1, {}, DataGrid$8);
_.compare = function compare_9(o1, o2){
  return $compare_8(castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_10(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$8_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/8', 303);
function $compare_9(o1, o2){
  var o1XVal, o2XVal;
  if (neq(o1.timeMS, 0)) {
    o1XVal = valueOf_0(o1.timeMS);
    o2XVal = valueOf_0(o2.timeMS);
    return compare_26(o1XVal.value_0, o2XVal.value_0);
  }
  return 0;
}

function DataGrid$9(){
}

defineClass(304, 1, {}, DataGrid$9);
_.compare = function compare_10(o1, o2){
  return $compare_9(castTo(o1, 16), castTo(o2, 16));
}
;
_.equals_0 = function equals_11(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataGrid$9_2_classLit = createForClass('com.domo.charting.data', 'DataGrid/9', 304);
function addDateGrainIfAllDataAndDate(dg){
  var hasDateData, row, row$iterator;
  if (dg.dateGrain == null) {
    hasDateData = false;
    if (!!dg.rows_0 && dg.rows_0.size_1() > 0 && castTo(dg.rows_0.get_1(0), 7).type_0.indexOf('DATE') != -1) {
      hasDateData = true;
      for (row$iterator = dg.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        if (eq(row.timeMS, 0)) {
          hasDateData = false;
          break;
        }
      }
    }
    hasDateData && (dg.dateGrain = 'DAY');
  }
}

function addExtraPointsForForecast(graph, extraIncrements, points, regData, resultPoints, lastX, dateGrain){
  var dayOfWeek, i, i0, newY, possibleSkipDays, skipSaturdays, skipSundays, tmpDate;
  if (dateGrain != null) {
    skipSundays = true;
    skipSaturdays = true;
    possibleSkipDays = false;
    if (graph.hasTimeScale() && $equals_2(dateGrain, 'DAY') && points.array.length >= 7) {
      possibleSkipDays = true;
      for (i0 = 0; i0 < points.array.length && (skipSaturdays || skipSundays); i0++) {
        tmpDate = new Date_4(fromDouble_0((checkCriticalElementIndex(i0, points.array.length) , castTo(points.array[i0], 10)).x_0));
        dayOfWeek = tmpDate.jsdate.getDay();
        dayOfWeek == 0 && (skipSundays = false);
        dayOfWeek == 6 && (skipSaturdays = false);
      }
    }
    for (i = 0; i < extraIncrements;) {
      (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).x_0 == 0?(lastX = lastX + 1):(lastX = getNextXForDateGrain(dateGrain, lastX));
      points.array.length == 1?(newY = (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).y_0):(newY = lastX * regData.m_0 + regData.b);
      if (possibleSkipDays && (skipSaturdays || skipSundays)) {
        tmpDate = new Date_4(fromDouble_0(lastX));
        dayOfWeek = tmpDate.jsdate.getDay();
        if (dayOfWeek > 0 && dayOfWeek < 6 || dayOfWeek == 0 && !skipSundays || dayOfWeek == 6 && !skipSaturdays) {
          $add_1(resultPoints, new CFPoint(lastX, newY));
          ++i;
        }
      }
       else {
        $add_1(resultPoints, new CFPoint(lastX, newY));
        ++i;
      }
    }
  }
}

function addProjectionData(rnd, grid){
  var colList, colName, e, i, j, projValAryJson, projValue, projectionsObj, rowList, rowName, valAry;
  rowList = grid.rows_0;
  colList = grid.cols_0;
  projectionsObj = grid.projectionJSON;
  if (grid.originalDataType != null && $equals_2(grid.originalDataType, 'group-item-value')) {
    try {
      if (grid.valueColumnName != null && $has(projectionsObj, grid.valueColumnName)) {
        projValAryJson = $getJSONArray_0(projectionsObj, grid.valueColumnName);
        for (j = 0; j < $length(projValAryJson); j++) {
          valAry = $getJSONArray(projValAryJson, j);
          if (!!valAry && $length(valAry) > 2) {
            colName = toString_24($get(valAry, 0));
            rowName = toString_24($get(valAry, 1));
            projValue = $getDouble_0(valAry, 2);
            colName != null && colName.length > 0 && rowName != null && rowName.length > 0 && !isNaN(projValue) && !(!isNaN(projValue) && !isFinite(projValue)) && setProjectedValueOnCell(rowList, colName, rowName, projValue);
          }
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && rnd.log_0(getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
   else {
    try {
      for (i = 0; i < colList.size_1(); i++) {
        colName = castTo(colList.get_1(i), 7).name_0;
        if (colName != null && $containsKey_1(projectionsObj.myHashMap, colName)) {
          projValAryJson = $getJSONArray_0(projectionsObj, colName);
          for (j = 0; j < $length(projValAryJson); j++) {
            valAry = $getJSONArray(projValAryJson, j);
            if (!!valAry && $length(valAry) > 1) {
              rowName = toString_24($get(valAry, 0));
              projValue = $getDouble_0(valAry, 1);
              rowName != null && rowName.length > 0 && !isNaN(projValue) && !(!isNaN(projValue) && !isFinite(projValue)) && setProjectedValueOnCell(rowList, colName, rowName, projValue);
            }
          }
        }
      }
    }
     catch ($e1) {
      $e1 = toJava($e1);
      if (instanceOf($e1, 35)) {
        e = $e1;
        !!rnd && rnd.log_0(getExceptionStackTrace(e));
      }
       else 
        throw toJs($e1);
    }
  }
}

function addProjectionDataToGrid(rnd, grid){
  !!grid && !!grid.projectionJSON && addProjectionData(rnd, grid);
}

function adjustExtraForecastPointsPeriodOffsetDiff(periodOffset, points, resultPoints, lastActualValIndex, dateGrain){
  var actualValue, curIndex, dateMS, dateMap, diffFromRegression, i, indexOfValueToDiff, lastActualValTime, periodAdjustedRegressionValue, regressionValue;
  dateMap = new HashMap;
  for (i = lastActualValIndex - 1; i >= lastActualValIndex - periodOffset; i--)
    $put_0(dateMap, (checkCriticalElementIndex(i, resultPoints.array.length) , castTo(resultPoints.array[i], 10)).x_0, valueOf(i));
  curIndex = lastActualValIndex;
  lastActualValTime = (checkCriticalElementIndex(lastActualValIndex, resultPoints.array.length) , castTo(resultPoints.array[lastActualValIndex], 10)).x_0;
  while (curIndex < resultPoints.array.length) {
    dateMS = getPreviousXForDateGrainWithOffset(dateGrain, (checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10)).x_0, periodOffset);
    while (dateMS >= lastActualValTime)
      dateMS = getPreviousXForDateGrainWithOffset(dateGrain, dateMS, periodOffset);
    indexOfValueToDiff = castTo($get_1(dateMap, dateMS), 29);
    if (indexOfValueToDiff) {
      actualValue = castTo($get_2(points, indexOfValueToDiff.value_0), 10).y_0;
      regressionValue = castTo($get_2(resultPoints, indexOfValueToDiff.value_0), 10).y_0;
      diffFromRegression = regressionValue - actualValue;
      periodAdjustedRegressionValue = (checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10)).y_0 - diffFromRegression;
      $setY((checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10)), periodAdjustedRegressionValue);
    }
     else {
      (checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10)).y_0 = 0;
    }
    ++curIndex;
  }
}

function adjustExtraForecastPointsPeriodOffsetRegression(periodOffset, points, resultPoints, lastActualValIndex, dateGrain){
  var curIndex, curOffset, dateMS, dateMap, dateMapRegData, firstDate, firstDateBeforeLastActualMS, i, i0, lastActualValTime, lastActualValTime0, periodPoints, periodRegData, regData, regressionY, resultPoint, tmpPoint;
  dateMap = new HashMap;
  dateMapRegData = new HashMap;
  firstDate = (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).x_0;
  for (i0 = lastActualValIndex - 1; i0 >= 0; i0--)
    $put_0(dateMap, (checkCriticalElementIndex(i0, points.array.length) , castTo(points.array[i0], 10)).x_0, (checkCriticalElementIndex(i0, points.array.length) , castTo(points.array[i0], 10)));
  for (i = 1; i <= periodOffset; i++) {
    periodPoints = new ArrayList;
    curOffset = i;
    lastActualValTime0 = (checkCriticalElementIndex(lastActualValIndex, resultPoints.array.length) , castTo(resultPoints.array[lastActualValIndex], 10)).x_0;
    dateMS = getPreviousXForDateGrainWithOffset(dateGrain, lastActualValTime0, i);
    firstDateBeforeLastActualMS = dateMS;
    while (dateMS >= firstDate) {
      tmpPoint = castTo($get_1(dateMap, dateMS), 10);
      !!tmpPoint && (checkCriticalPositionIndex(0, periodPoints.array.length) , insertTo(periodPoints.array, 0, tmpPoint));
      curOffset += periodOffset;
      dateMS = getPreviousXForDateGrainWithOffset(dateGrain, lastActualValTime0, curOffset);
    }
    if (periodPoints.array.length > 1) {
      periodRegData = calcAndGetRegressionDataForPoints(periodPoints);
      $put_0(dateMapRegData, firstDateBeforeLastActualMS, periodRegData);
    }
  }
  curIndex = lastActualValIndex;
  lastActualValTime = (checkCriticalElementIndex(lastActualValIndex, resultPoints.array.length) , castTo(resultPoints.array[lastActualValIndex], 10)).x_0;
  while (curIndex < resultPoints.array.length) {
    resultPoint = (checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10));
    dateMS = getPreviousXForDateGrainWithOffset(dateGrain, (checkCriticalElementIndex(curIndex, resultPoints.array.length) , castTo(resultPoints.array[curIndex], 10)).x_0, periodOffset);
    while (dateMS >= lastActualValTime)
      dateMS = getPreviousXForDateGrainWithOffset(dateGrain, dateMS, periodOffset);
    regData = castTo($get_1(dateMapRegData, dateMS), 209);
    if (regData) {
      regressionY = resultPoint.x_0 * regData.m_0 + regData.b;
      resultPoint.y_0 = regressionY;
    }
     else {
      resultPoint.y_0 = 0;
    }
    ++curIndex;
  }
}

function applySort(rnd, dataGrid, sort_0){
  var e, sort1, sort2, sortJsonObject;
  if (!!dataGrid && !!sort_0 && $length(sort_0) >= 2) {
    sort1 = null;
    sort2 = null;
    try {
      sortJsonObject = castTo($get(sort_0, 0), 69);
      !!sortJsonObject && (sort1 = getDataGrid(rnd, sortJsonObject, 'item-value'));
      sortJsonObject = castTo($get(sort_0, 1), 69);
      !!sortJsonObject && (sort2 = getDataGrid(rnd, sortJsonObject, 'item-value'));
      if (!!sort1 && !!sort2) {
        sort2 = removeDuplicateRows(sort2);
        sort1 = removeDuplicateRows(sort1);
        dataGrid = sortRowsUsingList(dataGrid, sort2.rows_0);
        dataGrid = sortColumnsUsingList(dataGrid, sort1.rows_0);
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && $log_0(rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
  return dataGrid;
}

function checkDataGridForDataSortedNotByTime(dg){
  var curTime, row, row$iterator;
  if (!!dg && $hasTimeData(dg)) {
    curTime = valueOf_0({l:1, m:0, h:$intern_32});
    for (row$iterator = dg.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (lt(row.timeMS, curTime.value_0)) {
        dg.preSorted = true;
        break;
      }
      curTime = valueOf_0(row.timeMS);
    }
  }
}

function checkStringColumnsForDates(dg){
  var allCellsDates, column, column$iterator, entry, i, i$iterator, outerIter, size_0;
  if (dg) {
    for (column$iterator = dg.cols_0.iterator(); column$iterator.hasNext_0();) {
      column = castTo(column$iterator.next_1(), 7);
      if ($equals_2(column.type_0, 'STRING') && $size(column.cellMap) > 0) {
        allCellsDates = true;
        size_0 = $size(column.cellMap);
        for (i$iterator = (outerIter = (new AbstractMap$1(column.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); i$iterator.val$outerIter2.hasNext_0();) {
          i = (entry = castTo(i$iterator.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
          if ($get_1(column.cellMap, i) != null && eq(castTo($get_1(column.cellMap, i), 16).timeMS, 0)) {
            allCellsDates = false;
            break;
          }
        }
        allCellsDates && size_0 > 0 && (column.type_0 = 'DATE');
      }
    }
  }
}

function fillColorRanges(rnd, palette, colorRanges, colorRuleAry){
  var colorRange, e, index_0, maxSeriesColors, rangeJson;
  try {
    maxSeriesColors = 0;
    for (index_0 = 0; index_0 < $length(colorRuleAry); index_0++) {
      rangeJson = castTo($get(colorRuleAry, index_0), 69);
      if (!!rangeJson && $containsKey_1(rangeJson.myHashMap, 'values')) {
        colorRange = new ColorRange;
        $containsKey_1(rangeJson.myHashMap, 'min')?(colorRange.min_0 = $getInt_0(rangeJson, 'min')):(colorRange.min_0 = 0);
        $containsKey_1(rangeJson.myHashMap, 'max')?(colorRange.max_0 = $getInt_0(rangeJson, 'max')):(colorRange.max_0 = 0);
        colorRange.colors = getCFColorAry(palette, rangeJson, 'values');
        !!colorRange.colors && colorRange.colors.array.length > maxSeriesColors && (maxSeriesColors = colorRange.colors.array.length);
        colorRanges.array[colorRanges.array.length] = colorRange;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function fillColorTable(rnd, palette, colorRangeAry){
  var color_0, colorAry, e, i, index_0, rangeJson, rngColors;
  try {
    for (index_0 = 0; index_0 < $length(colorRangeAry); index_0++) {
      rangeJson = castTo($get(colorRangeAry, index_0), 69);
      if (!!rangeJson && $containsKey_1(rangeJson.myHashMap, 'values')) {
        rngColors = new ArrayList;
        colorAry = $getJSONArray_0(rangeJson, 'values');
        for (i = 0; i < $length(colorAry); i++) {
          color_0 = new CFColor_2('#' + toString_24($get(colorAry, i)));
          rngColors.array[rngColors.array.length] = color_0;
        }
        $add_1(palette.colorTable, rngColors);
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function fillGradients(rnd, palette, gradientsAry){
  var e, gradientColors, gradientJSON, index_0;
  try {
    for (index_0 = 0; index_0 < $length(gradientsAry); index_0++) {
      gradientJSON = castTo($get(gradientsAry, index_0), 69);
      if (!!gradientJSON && $containsKey_1(gradientJSON.myHashMap, 'values')) {
        gradientColors = getCFColorAry(palette, gradientJSON, 'values');
        $add_1(palette.gradients, gradientColors);
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function getAnnotation(rnd, annotJson){
  var annotation, colorStr, dataPoint, e, entry, grains, key, key$iterator, keys_0, outerIter, value_0;
  annotation = new Annotation;
  try {
    annotation.id_0 = $getLong(annotJson, 'id');
    annotation.cardId = $getLong(annotJson, 'cardId');
    annotation.userId = $getLong(annotJson, 'userId');
    annotation.createdDate = __parseAndValidateLong(toString_24($get_0(annotJson, 'createdDate')));
    annotation.content_0 = toString_24($get_0(annotJson, 'content'));
    annotation.userName = toString_24($get_0(annotJson, 'userName'));
    annotation.canDelete = $getBoolean(annotJson, 'canDelete');
    $containsKey_1(annotJson.myHashMap, 'threadId') && (annotation.threadId = toString_24($get_0(annotJson, 'threadId')));
    $containsKey_1(annotJson.myHashMap, 'channelId') && (annotation.channelId = toString_24($get_0(annotJson, 'channelId')));
    $containsKey_1(annotJson.myHashMap, 'label') && (annotation.label_0 = toString_24($get_0(annotJson, 'label')));
    if ($containsKey_1(annotJson.myHashMap, 'color')) {
      colorStr = toString_24($get_0(annotJson, 'color'));
      annotation.hintColor = new CFColor_2(colorStr);
    }
    dataPoint = $getJSONObject_0(annotJson, 'dataPoint');
    if (dataPoint) {
      annotation.point1 = toString_24($get_0(dataPoint, 'point1'));
      if ($containsKey_1(dataPoint.myHashMap, 'p1Grains')) {
        grains = $getJSONObject_0(dataPoint, 'p1Grains');
        keys_0 = new AbstractMap$1(grains.myHashMap);
        for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
          key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
          if (instanceOfString(key)) {
            value_0 = toString_24($get_0(grains, castToString(key)));
            $putStringValue(annotation.p1Grains, castToString(key), value_0);
          }
        }
      }
      $containsKey_1(dataPoint.myHashMap, 'point2') && (annotation.point2 = toString_24($get_0(dataPoint, 'point2')));
      if ($containsKey_1(dataPoint.myHashMap, 'p2Grains')) {
        grains = $getJSONObject_0(dataPoint, 'p2Grains');
        keys_0 = new AbstractMap$1(grains.myHashMap);
        for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
          key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
          if (instanceOfString(key)) {
            value_0 = toString_24($get_0(grains, castToString(key)));
            $putStringValue(annotation.p2Grains, castToString(key), value_0);
          }
        }
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return annotation;
}

function getAreaComponent(areaObj, layer, customMap, rnd){
  var altCode, altName, areaComp, bnds, code_0, e, i, longName, name_0, origStroke, poly, polyAry;
  areaComp = null;
  try {
    if (areaObj) {
      bnds = getBounds(rnd, areaObj, 'ThisObj');
      name_0 = toString_24($get_0(areaObj, 'name'));
      longName = null;
      $containsKey_1(areaObj.myHashMap, 'longname') && (longName = toString_24($get_0(areaObj, 'longname')));
      altName = null;
      $containsKey_1(areaObj.myHashMap, 'altname') && (altName = toString_24($get_0(areaObj, 'altname')));
      code_0 = null;
      $containsKey_1(areaObj.myHashMap, 'code') && (code_0 = toString_24($get_0(areaObj, 'code')));
      altCode = null;
      $containsKey_1(areaObj.myHashMap, 'altcode') && (altCode = toString_24($get_0(areaObj, 'altcode')));
      areaComp = new MapComponent_1(name_0, bnds, longName, altName, code_0, altCode);
      if (customMap) {
        areaComp.drillMap = name_0;
        areaComp.altDrillMap = longName;
      }
      if ($containsKey_1(areaObj.myHashMap, 'drillmap')) {
        $setDrillMap(areaComp, toString_24($get_0(areaObj, 'drillmap')));
        areaComp.altDrillMap = null;
      }
      areaComp.layer = layer;
      $containsKey_1(areaObj.myHashMap, 'logicalcenterx') && $setLogicalCenterX(areaComp, $getDouble_1(areaObj, 'logicalcenterx'));
      $containsKey_1(areaObj.myHashMap, 'logicalcentery') && $setLogicalCenterY(areaComp, $getDouble_1(areaObj, 'logicalcentery'));
      if ($containsKey_1(areaObj.myHashMap, 'rect')) {
        $addOrigPath(areaComp, getRectPathFromVals(toString_24($get_0(areaObj, 'rect'))));
      }
       else if ($containsKey_1(areaObj.myHashMap, 'circle')) {
        $addOrigPath(areaComp, getCirclePathFromVals(toString_24($get_0(areaObj, 'circle'))));
      }
       else if ($containsKey_1(areaObj.myHashMap, 'polys')) {
        polyAry = $getJSONArray_0(areaObj, 'polys');
        if (!!polyAry && $length(polyAry) > 0) {
          for (i = 0; i < $length(polyAry); i++) {
            poly = $getJSONObject(polyAry, i);
            !!poly && $containsKey_1(poly.myHashMap, 'path') && $addOrigPath(areaComp, new CFPath_8(toString_24($get_0(poly, 'path'))));
          }
        }
      }
      $containsKey_1(areaObj.myHashMap, 'fill') && new CFColor_2(toString_24($get_0(areaObj, 'fill')));
      if ($containsKey_1(areaObj.myHashMap, 'stroke')) {
        origStroke = new CFStroke_1(toString_24($get_0(areaObj, 'stroke')), 1);
        $containsKey_1(areaObj.myHashMap, 'strokewidth') && $setWidth_0(origStroke, $getDouble_2(areaObj, 'strokewidth', 1));
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return areaComp;
}

function getBounds(rnd, jsonObj, bndsKey){
  var bndsObj, e, height, width_0, x_0, y_0;
  try {
    bndsObj = null;
    $equalsIgnoreCase(bndsKey, 'ThisObj')?(bndsObj = jsonObj):$get_0(jsonObj, bndsKey) != null && (bndsObj = $getJSONObject_0(jsonObj, bndsKey));
    if (bndsObj) {
      x_0 = 0;
      y_0 = 0;
      width_0 = 0;
      height = 0;
      $containsKey_1(bndsObj.myHashMap, 'x') && (x_0 = $getDouble_2(bndsObj, 'x', 0));
      $containsKey_1(bndsObj.myHashMap, 'y') && (y_0 = $getDouble_2(bndsObj, 'y', 0));
      $containsKey_1(bndsObj.myHashMap, 'left') && (x_0 = $getDouble_2(bndsObj, 'left', 0));
      $containsKey_1(bndsObj.myHashMap, 'top') && (y_0 = $getDouble_2(bndsObj, 'top', 0));
      $containsKey_1(bndsObj.myHashMap, 'width') && (width_0 = $getDouble_2(bndsObj, 'width', 0));
      $containsKey_1(bndsObj.myHashMap, 'height') && (height = $getDouble_2(bndsObj, 'height', 0));
      return new CFRect(x_0, y_0, width_0, height);
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getCFColorAry(palette, jsonObject, aryName){
  var color_0, colorAry, colorAryJson, colorRef, i;
  colorAry = new ArrayList;
  colorAryJson = $getJSONArray_0(jsonObject, aryName);
  for (i = 0; i < $length(colorAryJson); i++) {
    colorRef = $getJSONArray(colorAryJson, i);
    color_0 = $getColorForRowCol(palette, $getInt(colorRef, 0), $getInt(colorRef, 1));
    colorAry.array[colorAry.array.length] = color_0;
  }
  return colorAry;
}

function getCellForValue(type_0, valueStr){
  var cell, value_0;
  if ($equals_2(type_0, 'STRING') || type_0.indexOf('DATE') != -1) {
    cell = new Cell_1(valueStr, type_0);
    return cell;
  }
   else {
    value_0 = getDouble_0(valueStr, NaN);
    cell = new Cell((checkCriticalNotNull(value_0) , value_0));
    return cell;
  }
}

function getCellForValueAndSetValueStr(type_0, valueStr){
  var cell;
  cell = getCellForValue(type_0, valueStr);
  cell.valueStr = valueStr;
  return cell;
}

function getChangePercentVal(col, changeFromPreviousVal){
  var curValue, firstCell, lastCell, nextToLastCell, prevValue;
  prevValue = 0;
  curValue = 0;
  firstCell = $getFirstCell(col);
  !!firstCell && (prevValue = $getValue(firstCell));
  lastCell = $getLastCell(col);
  !!lastCell && (curValue = $getValue(lastCell));
  if (changeFromPreviousVal) {
    nextToLastCell = $getNextToLastCell(col);
    !!nextToLastCell && (prevValue = $getValue(nextToLastCell));
  }
  return getPercentValue(prevValue, curValue);
}

function getChangeVal(getPercentChange, col, graph, changeFromPreviousVal){
  var curValue, firstCell, lastCell, nextToLastCell, percentFormatter, percentValue, prevValue, valStr;
  prevValue = 0;
  curValue = 0;
  firstCell = $getFirstCell(col);
  !!firstCell && (prevValue = $getValue(firstCell));
  lastCell = $getLastCell(col);
  !!lastCell && (curValue = $getValue(lastCell));
  if (changeFromPreviousVal) {
    nextToLastCell = $getNextToLastCell(col);
    !!nextToLastCell && (prevValue = $getValue(nextToLastCell));
  }
  percentValue = getPercentValue(prevValue, curValue);
  percentFormatter = new NumberFormatter_0(graph.numberFormatter);
  $applyValueFormatOverride(percentFormatter, 'Percentage');
  valStr = $formatNumber_1(percentFormatter, percentValue);
  prevValue == 0?(valStr = $formatNumber_1(graph.hoverNumberFormatter, curValue - prevValue)):getPercentChange || (valStr = $formatNumber_1(graph.numberFormatter, curValue - prevValue));
  return valStr;
}

function getChartDefinition(rnd, jsonObject){
  var chartDef, e;
  chartDef = new ChartDef;
  if (jsonObject) {
    try {
      $containsKey_1(jsonObject.myHashMap, 'chart') && (jsonObject = $getJSONObject_0(jsonObject, 'chart'));
      $containsKey_1(jsonObject.myHashMap, 'bridge') && (jsonObject = $getJSONObject_0(jsonObject, 'bridge'));
      $containsKey_1(jsonObject.myHashMap, 'csrJson') && (jsonObject = $getJSONObject_0(jsonObject, 'csrJson'));
      if ($containsKey_1(jsonObject.myHashMap, 'datasources')) {
        chartDef.datasourceMap = getDataSources(rnd, jsonObject);
        chartDef.pivotTableTotals = getPivotTableTotals(rnd, jsonObject);
      }
      $containsKey_1(jsonObject.myHashMap, 'components') && (chartDef.componentDefMap = getComponentDefinitions(rnd, jsonObject));
      $containsKey_1(jsonObject.myHashMap, 'palette') && (chartDef.palette = getPalette(rnd, $getJSONObject_0(jsonObject, 'palette')));
      $containsKey_1(jsonObject.myHashMap, 'backgroundColor') && (chartDef.backgroundColor = new CFColor_2(toString_24($get_0(jsonObject, 'backgroundColor'))));
      $containsKey_1(jsonObject.myHashMap, 'scaleLineColor') && (chartDef.scaleLineColor = new CFColor_2(toString_24($get_0(jsonObject, 'scaleLineColor'))));
      $containsKey_1(jsonObject.myHashMap, 'textColor') && (chartDef.textColor = new CFColor_2(toString_24($get_0(jsonObject, 'textColor'))));
      $containsKey_1(jsonObject.myHashMap, 'defaultFont') && (chartDef.defaultFont = toString_24($get_0(jsonObject, 'defaultFont')));
      $containsKey_1(jsonObject.myHashMap, 'version') && processVersion(chartDef, toString_24($get_0(jsonObject, 'version')));
      $containsKey_1(jsonObject.myHashMap, 'dp19Sizzle') && (chartDef.sizzle = $getBoolean(jsonObject, 'dp19Sizzle'));
      $containsKey_1(jsonObject.myHashMap, 'pageLayout') && (chartDef.isPageLayout = $getBoolean(jsonObject, 'pageLayout'));
      $containsKey_1(jsonObject.myHashMap, 'mobile') && (chartDef.mobile = $getBoolean(jsonObject, 'mobile'));
      $containsKey_1(jsonObject.myHashMap, 'phoenixZoom') && (chartDef.mapZoomEnabled = $getBoolean(jsonObject, 'phoenixZoom'));
      $containsKey_1(jsonObject.myHashMap, 'locale') && (chartDef.locale = toString_24($get_0(jsonObject, 'locale')));
      $containsKey_1(jsonObject.myHashMap, 'timeZone') && (chartDef.timeZone = toString_24($get_0(jsonObject, 'timeZone')));
      $containsKey_1(jsonObject.myHashMap, 'timeZoneOffset') && (chartDef.timeZoneOffset = toString_24($get_0(jsonObject, 'timeZoneOffset')));
      $containsKey_1(jsonObject.myHashMap, 'cardURN') && (chartDef.cardURN = toString_24($get_0(jsonObject, 'cardURN')));
      $containsKey_1(jsonObject.myHashMap, 'editMode') && (chartDef.editMode = $getBoolean(jsonObject, 'editMode'));
      $containsKey_1(jsonObject.myHashMap, 'disableDueToSize') && (chartDef.disableDueToSize = $getBoolean(jsonObject, 'disableDueToSize'));
      $containsKey_1(jsonObject.myHashMap, 'conditionalFormats') && (chartDef.conditionalFormatList = getConditionalColors(rnd, $getJSONArray_0(jsonObject, 'conditionalFormats')));
      $containsKey_1(jsonObject.myHashMap, 'allowEmbeddedHTML') && toString_24($get_0(jsonObject, 'allowEmbeddedHTML'));
      $containsKey_1(jsonObject.myHashMap, 'cardLinking') && ($clinit_Boolean() , $getBoolean(jsonObject, 'cardLinking')?true:false);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && $log_0(rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
  return chartDef;
}

function getCirclePathFromVals(rectStr){
  var diameter, vals, x_0, y_0;
  vals = $split(rectStr, ' ', 0);
  x_0 = getDouble_0(vals[0], 0);
  y_0 = getDouble_0(vals[1], 0);
  diameter = getDouble_0(vals[2], 0);
  return new CFPath_0(x_0, y_0, diameter);
}

function getColorForProperty(rnd, jsonObject, property, palette){
  var colorRef, e;
  try {
    if ($containsKey_1(jsonObject.myHashMap, property)) {
      colorRef = $getJSONArray_0(jsonObject, property);
      return $getColorForRowCol(palette, $getInt(colorRef, 0), $getInt(colorRef, 1));
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getColumnFormats(rnd, jsonObject){
  var columnFormatMap, e, entry, entry0, innerKey, innerKey$iterator, innerKeys, innerMap, innerObject, key, key$iterator, keys_0, outerIter, outerIter0;
  try {
    if (jsonObject) {
      columnFormatMap = new LinkedHashMap;
      keys_0 = new AbstractMap$1(jsonObject.myHashMap);
      for (key$iterator = (outerIter0 = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter0)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry0 = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry0.getKey());
        innerObject = $getJSONObject_0(jsonObject, castToString(key));
        innerMap = new HashMap;
        innerKeys = new AbstractMap$1(innerObject.myHashMap);
        for (innerKey$iterator = (outerIter = innerKeys.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); innerKey$iterator.val$outerIter2.hasNext_0();) {
          innerKey = (entry = castTo(innerKey$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
          $putStringValue(innerMap, castToString(innerKey), toString_24($get_0(innerObject, castToString(innerKey))));
        }
        $put_3(columnFormatMap, castToString(key), innerMap);
      }
      if ($size(columnFormatMap.map_0) > 0)
        return columnFormatMap;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getColumnMetadata(rnd, numCols, jsonObject){
  var cmd, col, colMetaData, columnMetadataList, datatype, e, metaData, type_0;
  columnMetadataList = new ArrayList;
  try {
    metaData = $getJSONArray_0(jsonObject, 'metadata');
    for (col = 0; col < numCols; col++) {
      colMetaData = $getJSONObject(metaData, col);
      type_0 = 'STRING';
      datatype = 'string';
      if ($containsKey_1(colMetaData.myHashMap, 'type')) {
        type_0 = toString_24($get_0(colMetaData, 'type'));
        datatype = getDataTypeFromType(toString_24($get_0(colMetaData, 'type')));
      }
      cmd = new ColumnMetadata_1(type_0);
      cmd.dataType = datatype;
      $containsKey_1(colMetaData.myHashMap, 'calendarColumn') && $setCalendarColumn(cmd, $getBoolean(colMetaData, 'calendarColumn'));
      $containsKey_1(colMetaData.myHashMap, 'filterType') && $setFilterType(cmd, toString_24($get_0(colMetaData, 'filterType')));
      $containsKey_1(colMetaData.myHashMap, 'dataSourceId') && $setDataSourceId(cmd, toString_24($get_0(colMetaData, 'dataSourceId')));
      $containsKey_1(colMetaData.myHashMap, 'column') && $setColumn(cmd, toString_24($get_0(colMetaData, 'column')));
      $containsKey_1(colMetaData.myHashMap, 'label') && $setLabel(cmd, toString_24($get_0(colMetaData, 'label')));
      $containsKey_1(colMetaData.myHashMap, 'cardURN') && $setCardURN(cmd, toString_24($get_0(colMetaData, 'cardURN')));
      columnMetadataList.array[columnMetadataList.array.length] = cmd;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return columnMetadataList;
}

function getComponentDefinitions(rnd, jsonObject){
  var allMapsDefJson, annot, annotAry, annotJson, compDef, compJsonObject, componentDefMap, componentName, componentsJsonObject, e, entry, i, index_0, key, key$iterator, keys_0, mapDefJson, mapDefName, mapDefObject, markerAry, markerJson, outerIter, propsArray;
  componentDefMap = new LinkedHashMap;
  try {
    componentsJsonObject = $getJSONObject_0(jsonObject, 'components');
    if (componentsJsonObject) {
      keys_0 = new AbstractMap$1(componentsJsonObject.myHashMap);
      for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
        componentName = castToString(key);
        compJsonObject = $getJSONObject_0(componentsJsonObject, componentName);
        if (compJsonObject) {
          compDef = new ComponentDef;
          $containsKey_1(compJsonObject.myHashMap, 'type') && (compDef.type_0 = toString_24($get_0(compJsonObject, 'type')));
          $containsKey_1(compJsonObject.myHashMap, 'subtype') && (compDef.subtype = toString_24($get_0(compJsonObject, 'subtype')));
          $containsKey_1(compJsonObject.myHashMap, 'datasource') && (compDef.datasource = toString_24($get_0(compJsonObject, 'datasource')));
          $containsKey_1(compJsonObject.myHashMap, 'badgetype') && (compDef.badgeType = compDef.originalBadgeType = $trim(toString_24($get_0(compJsonObject, 'badgetype'))));
          $containsKey_1(compJsonObject.myHashMap, 'columnFormats') && (compDef.columnFormats = getColumnFormats(rnd, $getJSONObject_0(compJsonObject, 'columnFormats')));
          $containsKey_1(compJsonObject.myHashMap, 'goal') && $addScaleMarker(compDef, getScaleMarker(rnd, $getJSONObject_0(compJsonObject, 'goal'), true));
          $containsKey_1(compJsonObject.myHashMap, 'overrides') && (compDef.overrides = getOverrides(rnd, $getJSONObject_0(compJsonObject, 'overrides')));
          if ($containsKey_1(compJsonObject.myHashMap, 'scaleMarkers')) {
            markerAry = $getJSONArray_0(compJsonObject, 'scaleMarkers');
            for (index_0 = 0; index_0 < $length(markerAry); index_0++) {
              markerJson = castTo($get(markerAry, index_0), 69);
              $addScaleMarker(compDef, getScaleMarker(rnd, markerJson, false));
            }
          }
          if ($containsKey_1(compJsonObject.myHashMap, 'annotations')) {
            compDef.annotations = new ArrayList;
            annotAry = $getJSONArray_0(compJsonObject, 'annotations');
            for (index_0 = 0; index_0 < $length(annotAry); index_0++) {
              annotJson = castTo($get(annotAry, index_0), 69);
              annot = getAnnotation(rnd, annotJson);
              annot.label_0 == null && (annot.label_0 = '' + (compDef.annotations.size_1() + 1));
              compDef.annotations.add_0(annot);
            }
          }
          if ($containsKey_1(compJsonObject.myHashMap, 'properties')) {
            compDef.properties = new TreeSet;
            propsArray = $getJSONArray_0(compJsonObject, 'properties');
            for (i = 0; i < $length(propsArray); i++)
              compDef.properties.add_0(toString_24($get(propsArray, i)));
          }
          if ($containsKey_1(compJsonObject.myHashMap, 'mapdef')) {
            try {
              mapDefObject = $getJSONObject_0(compJsonObject, 'mapdef');
              isGeoJson(mapDefObject) && (compDef.mapDef = parse_0(null, mapDefObject));
            }
             catch ($e0) {
              $e0 = toJava($e0);
              if (instanceOf($e0, 38)) {
                mapDefName = toString_24($get_0(compJsonObject, 'mapdef'));
                allMapsDefJson = $getJSONObject_0(jsonObject, 'maps');
                mapDefJson = null;
                !!allMapsDefJson && mapDefName != null && (mapDefJson = $getJSONObject_0(allMapsDefJson, mapDefName));
                !!mapDefJson && (compDef.mapDef = getMapAreaForMapName(compDef, mapDefJson, mapDefName, rnd));
              }
               else 
                throw toJs($e0);
            }
          }
          $containsKey_1(compJsonObject.myHashMap, 'bounds') && (compDef.bounds = getBounds(rnd, compJsonObject, 'bounds'));
          processScaleMarkers(compDef);
          $put_3(componentDefMap, componentName, compDef);
        }
      }
    }
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 35)) {
      e = $e1;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e1);
  }
  return componentDefMap;
}

function getConditionalColors(rnd, jsonArray){
  var applyRow, applyToRowStr, colorList, colorStr, conditionalFormat, conditionalObject, e, filter, filterObject, formatObject, i, o, o0, o1, o2, textColor, textStyle, txtColorStr, txtStyleStr;
  colorList = new ArrayList;
  if (jsonArray) {
    for (i = 0; i < $length(jsonArray); i++) {
      try {
        conditionalObject = $getJSONObject(jsonArray, i);
        if (conditionalObject) {
          if ($containsKey_1(conditionalObject.myHashMap, 'condition')) {
            filterObject = $getJSONObject_0(conditionalObject, 'condition');
            filter = getFilter(filterObject);
            if ($containsKey_1(conditionalObject.myHashMap, 'format')) {
              formatObject = $getJSONObject_0(conditionalObject, 'format');
              colorStr = (o0 = $get_4(formatObject.myHashMap, 'color') , o0 != null?toString_24(o0):'');
              txtColorStr = (o1 = $get_4(formatObject.myHashMap, 'textColor') , o1 != null?toString_24(o1):'');
              textColor = $equals_2('', txtColorStr)?null:new CFColor_2(txtColorStr);
              txtStyleStr = (o2 = $get_4(formatObject.myHashMap, 'textStyle') , o2 != null?toString_24(o2):'');
              textStyle = $equals_2('', txtStyleStr)?null:txtStyleStr;
              applyToRowStr = (o = $get_4(formatObject.myHashMap, 'applyToRow') , o != null?toString_24(o):'');
              applyRow = isTrue(applyToRowStr);
              conditionalFormat = new ConditionalFormat(filter, colorStr, textColor, textStyle, applyRow);
              colorList.array[colorList.array.length] = conditionalFormat;
            }
          }
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 35)) {
          e = $e0;
          !!rnd && $log_0(rnd, getExceptionStackTrace(e));
        }
         else 
          throw toJs($e0);
      }
    }
  }
  return colorList;
}

function getDataGrid(rnd, jsonObject, type_0){
  var columnNames, dateGrain, dateJoinColumn, e, isFiscal, originalColumnNameList, retGrid;
  retGrid = null;
  dateGrain = null;
  dateJoinColumn = null;
  isFiscal = false;
  try {
    !!jsonObject && $containsKey_1(jsonObject.myHashMap, 'dateGrain') && (dateGrain = toString_24($get_0(jsonObject, 'dateGrain')));
    !!jsonObject && $containsKey_1(jsonObject.myHashMap, 'fiscal') && (isFiscal = $getBoolean(jsonObject, 'fiscal'));
    !!jsonObject && $containsKey_1(jsonObject.myHashMap, 'dateJoinColumn') && (dateJoinColumn = toString_24($get_0(jsonObject, 'dateJoinColumn')));
    columnNames = null;
    $containsKey_1(jsonObject.myHashMap, 'columns') && (columnNames = $getJSONArray_0(jsonObject, 'columns'));
    originalColumnNameList = getListOfColumnsFromColumnArray(rnd, columnNames);
    switch (type_0) {
      case 'item-value':
        !!columnNames && $length(columnNames) > 3 && $equals_2(toString_24($get(columnNames, 2)), '__domo_period') && $equals_2(toString_24($get(columnNames, 3)), '__domo_period_index')?(retGrid = getPeriodOverPeriodData(rnd, jsonObject, 0, 1, 2, 3)):!!columnNames && $length(columnNames) > 2?(retGrid = getLegacyData(rnd, jsonObject, 0, null)):(retGrid = getItemValueData(rnd, jsonObject, 'item-value', 0, 1, -1, -1));
        break;
      case 'group-item-value':
        retGrid = getGroupItemValueData(rnd, jsonObject, 0, 1, 2);
        break;
      case 'nogroup-item-value':
        retGrid = getNoGroupItemValueDataWithSeries(rnd, 'nogroup-item-value', dateGrain, jsonObject, false);
        break;
      case 'line-xybubble':
      case 'line-timey':
        retGrid = getNoGroupItemValueDataWithSeries(rnd, type_0, dateGrain, jsonObject, true);
        break;
      case 'ordered-column-list':
        retGrid = processOrderedColumnListData(rnd, jsonObject);
        originalColumnNameList = null;
        break;
      case 'legacy':
      case '':
        retGrid = getLegacyData(rnd, jsonObject, 0, null);
    }
    if (retGrid) {
      if (dateGrain != null) {
        retGrid.dateGrain = dateGrain;
        retGrid.isFiscalCalendar = isFiscal;
      }
      !!originalColumnNameList && (retGrid.origColNameList = originalColumnNameList);
      retGrid.dateJoinColumn = dateJoinColumn;
    }
    return retGrid;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getDataSources(rnd, jsonObject){
  var dataGridMap, dataSourcesJsonObject, dataType, datasourceName, dg, dsDataJsonObject, dsJsonObject, e, entry, errorCode, key, key$iterator, keys_0, locale, outerIter;
  dataGridMap = new HashMap;
  try {
    dataSourcesJsonObject = $getJSONObject_0(jsonObject, 'datasources');
    if (dataSourcesJsonObject) {
      keys_0 = new AbstractMap$1(dataSourcesJsonObject.myHashMap);
      locale = null;
      $containsKey_1(jsonObject.myHashMap, 'locale') && (locale = toString_24($get_0(jsonObject, 'locale')));
      for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
        datasourceName = castToString(key);
        dsJsonObject = $getJSONObject_0(dataSourcesJsonObject, datasourceName);
        if (dsJsonObject) {
          dataType = toString_24($get_0(dsJsonObject, 'type'));
          dsDataJsonObject = $getJSONObject_0(dsJsonObject, 'data');
          if (dsDataJsonObject) {
            dg = getDataGrid(rnd, dsDataJsonObject, dataType);
            postProcessTimeMSValues(dg, locale);
            checkStringColumnsForDates(dg);
            ($equals_2('group-item-value', dataType) || $equals_2('group-item-value', dg.originalDataType)) && $containsKey_1(dsJsonObject.myHashMap, 'sort') && !hasGroupColumn(dsDataJsonObject) && (dg = applySort(rnd, dg, $getJSONArray_0(dsJsonObject, 'sort')));
            checkDataGridForDataSortedNotByTime(dg);
            addDateGrainIfAllDataAndDate(dg);
            datasourceName == null?$put_1(dataGridMap.hashCodeMap, null, dg):$put_2(dataGridMap.stringMap, datasourceName, dg);
            if (dg) {
              dg.isPeriodOverPeriod && setPeriodNames(rnd, dg, dsJsonObject);
              $containsKey_1(dsJsonObject.myHashMap, 'limited') && $getBoolean(dsJsonObject, 'limited') && (dg.dataHasBeenLimited = true);
              errorCode = getNotificationCode(rnd, dsDataJsonObject);
              errorCode != 0 && (dg.errorCode = errorCode);
            }
          }
        }
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return dataGridMap;
}

function getDataTypeFromType(type_0){
  if (type_0 == null) {
    return 'string';
  }
  switch (type_0.toLocaleUpperCase()) {
    case 'DATE':
      return 'date';
    case 'DATETIME':
      return 'datetime';
    case 'DOUBLE':
    case 'LONG':
    case 'DECIMAL':
    case 'INTEGER':
    case 'NUMERIC':
      return 'numeric';
    case 'STRING':
    default:return 'string';
  }
}

function getDateNameForDateGroupedTrellis(level, timeMS, dateGrain, locale, includeYear){
  var firstLevelTrellisGrain, newDateStr, secondLevelTrellisGrain;
  newDateStr = '';
  if (compare_22(timeMS, 0) != 0 && dateGrain != null) {
    firstLevelTrellisGrain = null;
    secondLevelTrellisGrain = null;
    if ($equals_2(dateGrain, 'DAY')) {
      firstLevelTrellisGrain = 'MONTH';
      secondLevelTrellisGrain = 'QUARTER';
    }
    if ($equals_2(dateGrain, 'WEEK')) {
      firstLevelTrellisGrain = 'MONTH';
      secondLevelTrellisGrain = 'QUARTER';
    }
     else if ($equals_2(dateGrain, 'MONTH')) {
      firstLevelTrellisGrain = 'QUARTER';
      secondLevelTrellisGrain = 'YEAR';
    }
     else if ($equals_2(dateGrain, 'QUARTER')) {
      firstLevelTrellisGrain = 'YEAR';
      secondLevelTrellisGrain = null;
    }
     else if ($equals_2(dateGrain, 'YEAR')) {
      firstLevelTrellisGrain = null;
      secondLevelTrellisGrain = null;
    }
    level == 1 && firstLevelTrellisGrain != null?(newDateStr = getTimeDisplayStrForTimeMS(timeMS, firstLevelTrellisGrain, false, 0, locale, null, includeYear)):secondLevelTrellisGrain != null && (newDateStr = getTimeDisplayStrForTimeMS(timeMS, secondLevelTrellisGrain, false, 0, locale, null, includeYear));
  }
  return newDateStr;
}

function getFilter(filterJson){
  var filter, i, valuesAry;
  filter = new Filter;
  $containsKey_1(filterJson.myHashMap, 'column') && (filter.column = toString_24($get_0(filterJson, 'column')));
  $containsKey_1(filterJson.myHashMap, 'operand') && (filter.operand = toString_24($get_0(filterJson, 'operand')).toLowerCase());
  filter.operand != null && $equals_2(filter.operand, 'null') && (filter.operand = null);
  if ($containsKey_1(filterJson.myHashMap, 'values') && !$equals_2(toString_24($get_0(filterJson, 'values')), 'null')) {
    valuesAry = $getJSONArray_0(filterJson, 'values');
    for (i = 0; i < $length(valuesAry); i++)
      $add_1(filter.values, toString_24($get(valuesAry, i)));
  }
  return filter;
}

function getForecastPoints(colIndex, graph, extraIncrements, method, periodOffset){
  var regressionInfo;
  if (method == 3) {
    regressionInfo = getRegressionVals(colIndex, graph, false, extraIncrements, 0, 3, false);
    return regressionInfo.regressionValues;
  }
   else if (method == 5) {
    regressionInfo = getRegressionVals(colIndex, graph, false, extraIncrements, periodOffset, 5, false);
    return regressionInfo.regressionValues;
  }
   else if (method == 6) {
    regressionInfo = getRegressionVals(colIndex, graph, false, extraIncrements, periodOffset, 6, false);
    return regressionInfo.regressionValues;
  }
  return null;
}

function getFormats(rnd, jsonObject){
  var columnFormats, e, entry, format, formats, i, innerKey, innerKey$iterator, innerKeys, innerMap, outerIter;
  try {
    if ($containsKey_1(jsonObject.myHashMap, 'formats')) {
      formats = $getJSONArray_0(jsonObject, 'formats');
      columnFormats = new ArrayList;
      for (i = 0; i < $length(formats); i++) {
        innerMap = null;
        if (instanceOf($get(formats, i), 69)) {
          format = $getJSONObject(formats, i);
          innerMap = new HashMap;
          innerKeys = new AbstractMap$1(format.myHashMap);
          for (innerKey$iterator = (outerIter = innerKeys.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); innerKey$iterator.val$outerIter2.hasNext_0();) {
            innerKey = (entry = castTo(innerKey$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
            $putStringValue(innerMap, castToString(innerKey), toString_24($get_0(format, castToString(innerKey))));
          }
        }
        columnFormats.array[columnFormats.array.length] = innerMap;
      }
      return columnFormats;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getGroupItemValueData(rnd, jsonObject, groupCol, itemCol, valueCol){
  var cell, colAliases, colIndex, colInfo, colList, colMap, colName, columnMDList, columnNames, curColIndex, curRowIndex, e, formats, i, index_0, isPeriodOverPeriod, mappingVals, mdCell, mdColInfo, mdIndex, metaValStr, metaValue, metadataList, name_0, numRows, retGrid, row, rowIndex, rowInfo, rowList, rowMap, rowName, rows_0, valStr, value_0;
  rows_0 = null;
  try {
    colMap = new HashMap;
    rowMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    metadataList = new ArrayList;
    mappingVals = null;
    colIndex = 0;
    rowIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    mappingVals = getMappingValAry(jsonObject);
    isPeriodOverPeriod = false;
    if (numRows > 0) {
      columnNames = $getJSONArray_0(jsonObject, 'columns');
      columnMDList = getColumnMetadata(rnd, $length(columnNames), jsonObject);
      rows_0 = castTo($get_0(jsonObject, 'rows'), 92);
      colAliases = null;
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      formats = getFormats(rnd, jsonObject);
      for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
        row = castTo($get(rows_0, index_0), 92);
        colName = toString_24($get(row, groupCol));
        rowName = toString_24($get(row, itemCol));
        valStr = toString_24($get(row, valueCol));
        value_0 = getDouble_0(valStr, NaN);
        if (!isNaN_0((checkCriticalNotNull(value_0) , value_0)) || valStr != null && valStr.length == 0) {
          cell = new Cell((checkCriticalNotNull(value_0) , value_0));
          colInfo = castTo(colName == null?getEntryValueOrNull($getEntry(colMap.hashCodeMap, null)):$get_3(colMap.stringMap, colName), 7);
          rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7);
          curRowIndex = rowIndex;
          !!rowInfo && (curRowIndex = rowInfo.origIndex);
          curColIndex = colIndex;
          !!colInfo && (curColIndex = colInfo.origIndex);
          if (!colInfo) {
            colInfo = new ColRowInfo_3(toString_24($get(columnNames, groupCol)), colName, (checkCriticalElementIndex(groupCol, columnMDList.array.length) , castTo(columnMDList.array[groupCol], 49)).type_0, colIndex++, cell, false, curRowIndex);
            $setMetadata(colInfo, (checkCriticalElementIndex(groupCol, columnMDList.array.length) , castTo(columnMDList.array[groupCol], 49)));
            !!formats && formats.array.length > valueCol && (checkCriticalElementIndex(valueCol, formats.array.length) , formats.array[valueCol] != null) && $setFormat(colInfo, (checkCriticalElementIndex(valueCol, formats.array.length) , castTo(formats.array[valueCol], 68)));
            colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
            colList.array[colList.array.length] = colInfo;
          }
           else {
            $addItem_0(colInfo, cell, false, curRowIndex);
          }
          if (!rowInfo) {
            rowInfo = new ColRowInfo_3(toString_24($get(columnNames, itemCol)), rowName, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)).type_0, rowIndex++, cell, true, curColIndex);
            $setMetadata(rowInfo, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)));
            rowName == null?$put_1(rowMap.hashCodeMap, null, rowInfo):$put_2(rowMap.stringMap, rowName, rowInfo);
            rowList.array[rowList.array.length] = rowInfo;
          }
           else {
            $addItem_0(rowInfo, cell, true, curColIndex);
          }
          if ($length(columnNames) > 3 && toString_24($get(columnNames, 3)) != null && $equals_2(toString_24($get(columnNames, 3)), '__domo_period') && toString_24($get(columnNames, 4)) != null && $equals_2(toString_24($get(columnNames, 4)), '__domo_period_index')) {
            isPeriodOverPeriod = true;
            if (index_0 == 0) {
              mdColInfo = new ColRowInfo_2('__domo_period', 'DOUBLE');
              metadataList.array[metadataList.array.length] = mdColInfo;
              mdColInfo = new ColRowInfo_2('__domo_period_index', 'DOUBLE');
              metadataList.array[metadataList.array.length] = mdColInfo;
            }
            cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 2, 0, 1);
            for (i = 3; i < 5; i++) {
              metaValStr = toString_24($get(row, i));
              metaValue = getDouble_0(metaValStr, NaN);
              $addMetaData(cell, i - 3, (checkCriticalNotNull(metaValue) , metaValue));
            }
          }
           else if ($length(columnNames) > 3) {
            mdIndex = 0;
            for (i = 0; i < $length(columnNames); i++) {
              if (i != groupCol && i != itemCol && i != valueCol) {
                if (index_0 == 0) {
                  mdColInfo = new ColRowInfo_2(toString_24($get(columnNames, i)), (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0);
                  mdColInfo.mapping = mappingVals[i];
                  !!formats && i < formats.array.length && (checkCriticalElementIndex(i, formats.array.length) , formats.array[i] != null) && $setFormat(mdColInfo, (checkCriticalElementIndex(i, formats.array.length) , castTo(formats.array[i], 68)));
                  metadataList.array[metadataList.array.length] = mdColInfo;
                }
                cell.metaData == null && $addMetaDataCells(cell, $length(columnNames) - 3);
                if (typeIsNumericValue((checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0)) {
                  try {
                    mdCell = new Cell($getDouble(row, i));
                  }
                   catch ($e0) {
                    $e0 = toJava($e0);
                    if (instanceOf($e0, 38)) {
                      mdCell = new Cell(NaN);
                    }
                     else 
                      throw toJs($e0);
                  }
                }
                 else 
                  mdCell = new Cell_1(toString_24($get(row, i)), (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0);
                $addMetaData_0(cell, mdIndex++, mdCell);
              }
            }
          }
        }
      }
      metadataList.array.length == 0 && (metadataList = null);
      $reset_5(colMap);
      $reset_5(rowMap);
      retGrid = new DataGrid_0(name_0, 'group-item-value', rowList, colList, metadataList);
      $setValueColumnName(retGrid, toString_24($get(columnNames, valueCol)));
      !!colAliases && toString_24($get(colAliases, valueCol)) != null && $setAltValueColumnName(retGrid, toString_24($get(colAliases, valueCol)));
      retGrid.isGroupItemValue = true;
      $containsKey_1(jsonObject.myHashMap, 'projections') && $setProjectionJSON(retGrid, $getJSONObject_0(jsonObject, 'projections'));
      isPeriodOverPeriod && (retGrid.isPeriodOverPeriod = true);
      return retGrid;
    }
     else 
      return new DataGrid_0(name_0, 'group-item-value', rowList, colList, null);
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 35)) {
      e = $e1;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e1);
  }
  return null;
}

function getHighlightFilters(rnd, filters){
  var e, filter, filterObject, i, jsonArray, jsonObject, list;
  jsonObject = getJsonObject(filters);
  list = null;
  if (!!jsonObject && $containsKey_1(jsonObject.myHashMap, 'filters')) {
    try {
      jsonArray = $getJSONArray_0(jsonObject, 'filters');
      list = new ArrayList;
      for (i = 0; i < $length(jsonArray); i++) {
        filterObject = $getJSONObject(jsonArray, i);
        filter = getFilter(filterObject);
        list.array[list.array.length] = filter;
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && $log_0(rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
  return list;
}

function getItemValueData(rnd, jsonObject, origDataType, itemCol, valueCol, group1Col, group2Col){
  var altColName, cell, cm, cm$iterator, colAliases, colInfo, colList, colName, columnMDList, columnNames, curRowIndex, currentColumnMD, dataType, e, formats, group1Name, group2Name, i, index_0, isTrellis, mappings, mdCol, mdColInfo, mdIndex, metaDataIndicies, metaDataIsDouble, metaDataList, metaDataNames, metaDataTypes, name_0, numCols, numRows, result, row, rowIndex, rowInfo, rowList, rowMap, rowName, rows_0, trellisCell, value_0, valueStr;
  isTrellis = false;
  (group1Col != -1 || group2Col != -1) && (isTrellis = true);
  try {
    colInfo = null;
    columnNames = null;
    colAliases = null;
    mappings = null;
    metaDataIndicies = null;
    metaDataTypes = null;
    metaDataIsDouble = null;
    $containsKey_1(jsonObject.myHashMap, 'columns') && (columnNames = $getJSONArray_0(jsonObject, 'columns'));
    $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
    $containsKey_1(jsonObject.myHashMap, 'mappings') && $equals_2(origDataType, 'ordered-column-list') && (mappings = $getJSONArray_0(jsonObject, 'mappings'));
    formats = getFormats(rnd, jsonObject);
    getMappingValAry(jsonObject);
    rowMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    metaDataList = null;
    rowIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    numCols = $getInt_0(jsonObject, 'numColumns');
    columnMDList = getColumnMetadata(rnd, numCols, jsonObject);
    if (!!mappings && $length(mappings) > 2) {
      mdIndex = 0;
      metaDataIndicies = initUnidimensionalArray(I_classLit, $intern_33, 41, $length(mappings) - 2, 15, 1);
      metaDataNames = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, $length(mappings) - 2, 6, 1);
      metaDataTypes = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, $length(mappings) - 2, 6, 1);
      metaDataList = new ArrayList;
      metaDataIsDouble = initUnidimensionalArray(Z_classLit, $intern_24, 41, $length(mappings) - 2, 16, 1);
      for (i = 0; i < $length(mappings); i++) {
        if (!$equalsIgnoreCase(toString_24($get(mappings, i)), 'item') && !$equalsIgnoreCase(toString_24($get(mappings, i)), 'value')) {
          currentColumnMD = (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49));
          metaDataTypes[mdIndex] = currentColumnMD.type_0;
          metaDataIndicies[mdIndex] = i;
          metaDataNames[mdIndex] = toString_24($get(mappings, i));
          typeIsNumericValue(metaDataTypes[mdIndex]) && (metaDataIsDouble[mdIndex] = true);
          mdColInfo = new ColRowInfo_2(toString_24($get(columnNames, i)), metaDataTypes[mdIndex]);
          !!colAliases && toString_24($get(colAliases, i)) != null && $setAltName(mdColInfo, toString_24($get(colAliases, i)));
          mdColInfo.mapping = metaDataNames[mdIndex];
          !!formats && (checkCriticalElementIndex(i, formats.array.length) , formats.array[i] != null) && $setFormat(mdColInfo, (checkCriticalElementIndex(i, formats.array.length) , castTo(formats.array[i], 68)));
          metaDataList.array[metaDataList.array.length] = mdColInfo;
          ++mdIndex;
        }
      }
    }
     else if (columnMDList.array.length > 0 && $containsKey_1(jsonObject.myHashMap, 'datasource')) {
      for (cm$iterator = new ArrayList$1(columnMDList); cm$iterator.i < cm$iterator.this$01.array.length;) {
        cm = castTo($next_3(cm$iterator), 49);
        $setDataSourceId(cm, toString_24($get_0(jsonObject, 'datasource')));
      }
    }
    if (columnNames) {
      colName = '';
      altColName = null;
      dataType = 'STRING';
      $length(columnNames) > 1 && (colName = toString_24($get(columnNames, valueCol)));
      !!colAliases && $length(colAliases) > 1 && (altColName = toString_24($get(colAliases, valueCol)));
      checkCriticalElementIndex(valueCol, columnMDList.array.length);
      columnMDList.array[valueCol] != null && (dataType = (checkCriticalElementIndex(valueCol, columnMDList.array.length) , castTo(columnMDList.array[valueCol], 49)).type_0);
      if (numRows == 0) {
        colInfo = new ColRowInfo_3(null, colName, '', 0, null, false, 0);
        $setMetadata(colInfo, (checkCriticalElementIndex(valueCol, columnMDList.array.length) , castTo(columnMDList.array[valueCol], 49)));
        colInfo.type_0 = dataType;
        altColName != null && (colInfo.altName = altColName);
        !!formats && formats.array.length > valueCol && (checkCriticalElementIndex(valueCol, formats.array.length) , formats.array[valueCol] != null) && $setFormat(colInfo, (checkCriticalElementIndex(valueCol, formats.array.length) , castTo(formats.array[valueCol], 68)));
        colList.array[colList.array.length] = colInfo;
      }
       else {
        rows_0 = castTo($get_0(jsonObject, 'rows'), 92);
        for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
          row = castTo($get(rows_0, index_0), 92);
          rowName = toString_24($get(row, itemCol));
          group1Name = '';
          group1Col != -1 && (group1Name = toString_24($get(row, group1Col)));
          group2Name = '';
          group2Col != -1 && (group2Name = toString_24($get(row, group2Col)));
          cell = null;
          value_0 = getDouble_0(toString_24($get(row, valueCol)), NaN);
          isNaN_0((checkCriticalNotNull(value_0) , value_0))?dataType != null && $equals_2(dataType, 'STRING')?(cell = new Cell_1(toString_24($get(row, valueCol)), 'STRING')):(cell = new Cell((checkCriticalNotNull(value_0) , value_0))):(cell = new Cell((checkCriticalNotNull(value_0) , value_0)));
          rowInfo = null;
          isTrellis && (rowInfo = castTo($get_3(rowMap.stringMap, rowName + ':' + group1Name + ':' + group2Name), 7));
          curRowIndex = rowIndex;
          !!rowInfo && (curRowIndex = rowInfo.origIndex);
          if (!colInfo) {
            colInfo = new ColRowInfo_3(null, colName, '', 0, cell, false, curRowIndex);
            $setMetadata(colInfo, (checkCriticalElementIndex(valueCol, columnMDList.array.length) , castTo(columnMDList.array[valueCol], 49)));
            colInfo.type_0 = dataType;
            altColName != null && (colInfo.altName = altColName);
            !!formats && formats.array.length > valueCol && (checkCriticalElementIndex(valueCol, formats.array.length) , formats.array[valueCol] != null) && $setFormat(colInfo, (checkCriticalElementIndex(valueCol, formats.array.length) , castTo(formats.array[valueCol], 68)));
            colList.array[colList.array.length] = colInfo;
          }
           else {
            isTrellis && !!rowInfo || $addItem_0(colInfo, cell, false, curRowIndex);
          }
          if (!rowInfo) {
            rowInfo = new ColRowInfo_3(toString_24($get(columnNames, itemCol)), rowName, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)).type_0, rowIndex++, cell, true, 0);
            !!colAliases && $setParentDisplayName(rowInfo, toString_24($get(colAliases, itemCol)));
            $setMetadata(rowInfo, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)));
            $put_2(rowMap.stringMap, rowName + ':' + group1Name + ':' + group2Name, rowInfo);
            rowList.array[rowList.array.length] = rowInfo;
          }
           else {
            if (isTrellis) {
              trellisCell = castTo($get_1(rowInfo.cellMap, valueOf(0)), 16);
              !!trellisCell && (isNaN_0($getValue(trellisCell))?$setValue(trellisCell, $getValue(cell)):isNaN_0($getValue(cell)) || $setValue(trellisCell, $getValue(trellisCell) + $getValue(cell)));
            }
             else {
              $addItem_0(rowInfo, cell, true, $size(rowInfo.cellMap));
            }
          }
          if (metaDataIndicies != null) {
            $addMetaDataCells(cell, metaDataIndicies.length);
            for (i = 0; i < metaDataIndicies.length; i++) {
              if (metaDataIsDouble[i]) {
                try {
                  $addMetaData(cell, i, $getDouble(row, metaDataIndicies[i]));
                }
                 catch ($e0) {
                  $e0 = toJava($e0);
                  if (instanceOf($e0, 38)) {
                    $addMetaData(cell, i, NaN);
                  }
                   else 
                    throw toJs($e0);
                }
              }
               else {
                valueStr = toString_24($get(row, metaDataIndicies[i]));
                metaDataIndicies[i] == group1Col && $trim(group1Name).length > 0 && (valueStr = group1Name);
                metaDataIndicies[i] == group2Col && $trim(group2Name).length > 0 && (valueStr = group2Name);
                $addMetaData_1(cell, i, valueStr, metaDataTypes[i]);
              }
              if ($getMetaDataCell(cell, i)) {
                mdCol = (checkCriticalElementIndex(i, metaDataList.array.length) , castTo(metaDataList.array[i], 7));
                $put_0(mdCol.cellMap, valueOf(index_0), $getMetaDataCell(cell, i));
              }
            }
          }
        }
      }
      (checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).mapping = 'VALUE';
      result = new DataGrid_0(name_0, 'item-value', rowList, colList, metaDataList);
      $setValueColumnName(result, toString_24($get(columnNames, valueCol)));
      !!colAliases && toString_24($get(colAliases, valueCol)) != null && $setAltValueColumnName(result, toString_24($get(colAliases, valueCol)));
      $containsKey_1(jsonObject.myHashMap, 'projections') && $setProjectionJSON(result, $getJSONObject_0(jsonObject, 'projections'));
    }
     else {
      result = new DataGrid_0(name_0, 'item-value', rowList, colList, metaDataList);
    }
    $reset_5(rowMap);
    return result;
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 35)) {
      e = $e1;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e1);
  }
  return null;
}

function getJsonObject(jsonData){
  var jsonObject;
  jsonObject = null;
  try {
    jsonObject = new JSONObject_0(jsonData);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 35))
      throw toJs($e0);
  }
  return jsonObject;
}

function getLatLongProjector(mapDefJson, rnd){
  var e, i, projection, projectionType, projections, projector, scale, type_0, xmax, xmin, xscalemin, ymax, ymin, yscalemin;
  try {
    if ($containsKey_1(mapDefJson.myHashMap, 'projections')) {
      projections = $getJSONArray_0(mapDefJson, 'projections');
      for (; 0 < $length(projections); i++) {
        projection = $getJSONObject(projections, 0);
        projectionType = toString_24($get_0(projection, 'type'));
        type_0 = translateProjection(projectionType);
        xmin = $getDouble_2(projection, 'xmin', 0);
        xmax = $getDouble_2(projection, 'xmax', 0);
        ymin = $getDouble_2(projection, 'ymin', 0);
        ymax = $getDouble_2(projection, 'ymax', 0);
        scale = $getDouble_2(projection, 'scale', 0);
        $getDouble_2(projection, 'xoffset', 0);
        $getDouble_2(projection, 'yoffset', 0);
        xscalemin = $getDouble_2(projection, 'xscalemin', 0);
        yscalemin = $getDouble_2(projection, 'yscalemin', 0);
        projector = getProjector(type_0, xmin, ymin, xmax, ymax, scale, xscalemin, yscalemin);
        return projector;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getLegacyData(rnd, jsonObject, itemCol, seriesColumns){
  var c, cell, cm, cm$iterator, col, colAliases, colIndex, colInfo, colList, colName, cols_0, columnMDList, curRowIndex, e, formats, index_0, isSeriesCol, mappings, mdIndex, mdList, name_0, numCols, numRows, result, row, rowIndex, rowInfo, rowList, rowMap, rowName, rows_0;
  colAliases = null;
  mappings = null;
  try {
    rowMap = new HashMap;
    colList = new ArrayList;
    mdList = new ArrayList;
    rowList = new ArrayList;
    colIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    numCols = $getInt_0(jsonObject, 'numColumns');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    if (numRows > 0 && numCols > 1) {
      cols_0 = $getJSONArray_0(jsonObject, 'columns');
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      $containsKey_1(jsonObject.myHashMap, 'mappings') && (mappings = $getJSONArray_0(jsonObject, 'mappings'));
      rows_0 = $getJSONArray_0(jsonObject, 'rows');
      formats = getFormats(rnd, jsonObject);
      if (!seriesColumns) {
        seriesColumns = new ArrayList;
        for (c = 1; c < $length(cols_0); c++)
          $add_1(seriesColumns, valueOf(c));
      }
      columnMDList = getColumnMetadata(rnd, numCols, jsonObject);
      if (columnMDList.array.length > 0 && $containsKey_1(jsonObject.myHashMap, 'datasource')) {
        for (cm$iterator = new ArrayList$1(columnMDList); cm$iterator.i < cm$iterator.this$01.array.length;) {
          cm = castTo($next_3(cm$iterator), 49);
          $setDataSourceId(cm, toString_24($get_0(jsonObject, 'datasource')));
        }
      }
      mdIndex = 0;
      for (col = 0; col < numCols; col++) {
        isSeriesCol = false;
        if (col == itemCol)
          continue;
        else 
          $indexOf_1(seriesColumns, new Integer(col), 0) != -1 && (isSeriesCol = true);
        colName = toString_24($get(cols_0, col));
        if (!$equals_2(colName, '?column?')) {
          rowIndex = 0;
          colInfo = new ColRowInfo_4(null, colName, (checkCriticalElementIndex(col, columnMDList.array.length) , castTo(columnMDList.array[col], 49)).type_0, colIndex);
          $setMetadata(colInfo, (checkCriticalElementIndex(col, columnMDList.array.length) , castTo(columnMDList.array[col], 49)));
          !!colAliases && $length(colAliases) > col && $get(colAliases, col) != null && toString_24($get(colAliases, col)).length > 0 && $setAltName(colInfo, toString_24($get(colAliases, col)));
          !!formats && formats.array.length > col && (checkCriticalElementIndex(col, formats.array.length) , formats.array[col] != null) && $setFormat(colInfo, (checkCriticalElementIndex(col, formats.array.length) , castTo(formats.array[col], 68)));
          if (isSeriesCol) {
            colList.array[colList.array.length] = colInfo;
          }
           else {
            mdList.array[mdList.array.length] = colInfo;
            !!mappings && $length(mappings) == numCols && $setMapping(colInfo, toString_24($get(mappings, col)));
          }
          for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
            row = castTo($get(rows_0, index_0), 92);
            rowName = toString_24($get(row, itemCol));
            cell = getCellForValue((checkCriticalElementIndex(col, columnMDList.array.length) , castTo(columnMDList.array[col], 49)).type_0, toString_24($get(row, col)));
            rowInfo = castTo($get_3(rowMap.stringMap, '' + index_0), 7);
            curRowIndex = rowIndex;
            !!rowInfo && (curRowIndex = rowInfo.origIndex);
            $addItem_0(colInfo, cell, false, curRowIndex);
            if (!rowInfo) {
              rowInfo = new ColRowInfo_3(toString_24($get(cols_0, itemCol)), rowName, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)).type_0, rowIndex++, cell, true, colIndex);
              $setMetadata(rowInfo, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)));
              $put_2(rowMap.stringMap, '' + index_0, rowInfo);
              rowList.array[rowList.array.length] = rowInfo;
            }
             else {
              if (isSeriesCol) {
                $addItem_0(rowInfo, cell, true, colIndex);
              }
               else {
                $getCellByCellIndex(rowInfo, 0).metaData == null && $addMetaDataCells($getCellByCellIndex(rowInfo, 0), numCols - (seriesColumns.array.length + 1));
                $addMetaData_0($getCellByCellIndex(rowInfo, 0), mdIndex, cell);
              }
            }
          }
          ++colIndex;
          isSeriesCol || ++mdIndex;
        }
      }
      result = new DataGrid_0(name_0, 'legacy', rowList, colList, mdList);
      $containsKey_1(jsonObject.myHashMap, 'projections') && $setProjectionJSON(result, $getJSONObject_0(jsonObject, 'projections'));
    }
     else {
      result = new DataGrid_0(name_0, 'legacy', rowList, colList, null);
    }
    $reset_5(rowMap);
    return result;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getListOfColumnsFromColumnArray(rnd, columnNames){
  var colList, e, i;
  colList = null;
  try {
    if (columnNames) {
      colList = new ArrayList;
      for (i = 0; i < $length(columnNames); i++)
        $add_1(colList, toString_24($get(columnNames, i)));
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return colList;
}

function getMapAreaForMapName(compDef, mapDefJson, name_0, rnd){
  var area, areaObj, areas_0, bnds, customMap, e, i, j, layer, layerName, layers, map_0, mapLayer, mapPoint, pointObj, points, shape_0, shapeObj, shapes;
  map_0 = null;
  customMap = false;
  try {
    bnds = getBounds(rnd, mapDefJson, 'ThisObj');
    if (compDef.badgeType != null && compDef.badgeType.indexOf('latlong') != -1) {
      compDef.badgeType.indexOf('route') != -1?(map_0 = new MapAreaLatLongRoute(name_0, bnds)):(map_0 = new MapAreaLatLong(name_0, bnds));
      $setProjector(castTo(map_0, 144), getLatLongProjector(mapDefJson, rnd));
    }
     else {
      map_0 = new MapArea_1(name_0, bnds);
      if (compDef.badgeType != null && compDef.badgeType.indexOf('custom') != -1) {
        map_0.customMap = true;
        customMap = true;
      }
    }
    if ($containsKey_1(mapDefJson.myHashMap, 'layers')) {
      layers = $getJSONArray_0(mapDefJson, 'layers');
      for (i = 0; i < $length(layers); i++) {
        layer = $getJSONObject(layers, i);
        layerName = toString_24($get_0(layer, 'name'));
        mapLayer = new MapLayer_0(layerName, toString_24($get_0(layer, 'type')), NaN);
        if (mapLayer.type_0 == 0) {
          areas_0 = $getJSONArray_0(layer, 'areas');
          if (!!areas_0 && $length(areas_0) > 0) {
            for (j = 0; j < $length(areas_0); j++) {
              areaObj = $getJSONObject(areas_0, j);
              area = getAreaComponent(areaObj, mapLayer, customMap, rnd);
              !!area && $addMapShape(mapLayer, area);
            }
          }
        }
         else if (mapLayer.type_0 == 1) {
          points = $getJSONArray_0(layer, 'points');
          if (!!points && $length(points) > 0) {
            for (j = 0; j < $length(points); j++) {
              pointObj = $getJSONObject(points, j);
              mapPoint = getPointComponent(pointObj, mapLayer, rnd);
              !!mapPoint && $addMapShape(mapLayer, mapPoint);
            }
          }
        }
         else if (mapLayer.type_0 == 2) {
          shapes = $getJSONArray_0(layer, 'shapes');
          if (!!shapes && $length(shapes) > 0) {
            for (j = 0; j < $length(shapes); j++) {
              shapeObj = $getJSONObject(shapes, j);
              shape_0 = getShapeComponent(shapeObj, mapLayer, rnd);
              !!shape_0 && $add_1(mapLayer.shapeAry, shape_0);
            }
          }
        }
         else if (mapLayer.type_0 == 3) {
          shapes = $getJSONArray_0(layer, 'shapes');
          if (!!shapes && $length(shapes) > 0) {
            for (j = 0; j < $length(shapes); j++) {
              shapeObj = $getJSONObject(shapes, j);
              if ($containsKey_1(shapeObj.myHashMap, 'name') && toString_24($get_0(shapeObj, 'name')) != null) {
                area = getAreaComponent(shapeObj, mapLayer, customMap, rnd);
                if (area) {
                  $add_1(mapLayer.shapeAry, area);
                  $addMapShape(mapLayer, area);
                }
              }
               else {
                shape_0 = getShapeComponent(shapeObj, mapLayer, rnd);
                !!shape_0 && $add_1(mapLayer.shapeAry, shape_0);
              }
            }
          }
        }
        !map_0.layers && (map_0.layers = new ArrayList);
        $add_1(map_0.layers, mapLayer);
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return map_0;
}

function getMappingValAry(jsonObject){
  var i, mappingVals, mappings;
  mappingVals = null;
  if ($containsKey_1(jsonObject.myHashMap, 'mappings')) {
    mappings = $getJSONArray_0(jsonObject, 'mappings');
    if (!!mappings && $length(mappings) > 0) {
      mappingVals = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, $length(mappings), 6, 1);
      for (i = 0; i < $length(mappings); i++)
        mappingVals[i] = toString_24($get(mappings, i));
    }
  }
  return mappingVals;
}

function getMultiGroupItemValueData(rnd, jsonObject, groupCol, itemCol, valueCol, group1Col, group2Col){
  var cell, colAliases, colIndex, colInfo, colList, colMD, colMap, colName, columnMDList, columnNames, curColIndex, curRowIndex, e, formats, group1Name, group2Name, i, index_0, isPeriodOverPeriod, mappingVals, mdCell, mdCol, mdColInfo, mdIndex, metaValStr, metaValue, metadataList, name_0, numRows, retGrid, row, rowIndex, rowInfo, rowList, rowMap, rowName, rows_0, trellisCell, trellisInfo, trellisMap, valMD, valStr, value_0, valueStr;
  rows_0 = null;
  try {
    colMap = new HashMap;
    rowMap = new HashMap;
    trellisMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    metadataList = new ArrayList;
    mappingVals = null;
    colIndex = 0;
    rowIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    mappingVals = getMappingValAry(jsonObject);
    isPeriodOverPeriod = false;
    if (numRows > 0) {
      columnNames = $getJSONArray_0(jsonObject, 'columns');
      columnMDList = getColumnMetadata(rnd, $length(columnNames), jsonObject);
      valMD = (checkCriticalElementIndex(valueCol, columnMDList.array.length) , castTo(columnMDList.array[valueCol], 49));
      rows_0 = castTo($get_0(jsonObject, 'rows'), 92);
      colAliases = null;
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      formats = getFormats(rnd, jsonObject);
      for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
        row = castTo($get(rows_0, index_0), 92);
        colName = toString_24($get(row, groupCol));
        rowName = toString_24($get(row, itemCol));
        valStr = toString_24($get(row, valueCol));
        group1Name = '';
        group1Col != -1 && (group1Name = toString_24($get(row, group1Col)));
        group2Name = '';
        group2Col != -1 && (group2Name = toString_24($get(row, group2Col)));
        value_0 = getDouble_0(valStr, NaN);
        if (!isNaN_0((checkCriticalNotNull(value_0) , value_0)) || valStr != null && valStr.length == 0) {
          cell = new Cell((checkCriticalNotNull(value_0) , value_0));
          colInfo = castTo(colName == null?getEntryValueOrNull($getEntry(colMap.hashCodeMap, null)):$get_3(colMap.stringMap, colName), 7);
          if (!!valMD && !!colInfo && !!colInfo.metadata) {
            $setType(colInfo.metadata, valMD.type_0);
            $setDataType(colInfo.metadata, valMD.dataType);
          }
          rowInfo = castTo($get_3(rowMap.stringMap, rowName + ':' + group1Name + ':' + group2Name), 7);
          trellisInfo = null;
          (group1Col != -1 || group2Col != -1) && (trellisInfo = castTo($get_3(trellisMap.stringMap, rowName + ':' + colName + ':' + group1Name + ':' + group2Name), 7));
          curRowIndex = rowIndex;
          !!rowInfo && (curRowIndex = rowInfo.origIndex);
          curColIndex = colIndex;
          !!colInfo && (curColIndex = colInfo.origIndex);
          if (!colInfo) {
            colInfo = new ColRowInfo_3(toString_24($get(columnNames, groupCol)), colName, (checkCriticalElementIndex(valueCol, columnMDList.array.length) , castTo(columnMDList.array[valueCol], 49)).type_0, colIndex++, cell, false, curRowIndex);
            colMD = (checkCriticalElementIndex(groupCol, columnMDList.array.length) , castTo(columnMDList.array[groupCol], 49));
            $setType(colMD, valMD.type_0);
            $setDataType(colMD, valMD.dataType);
            colInfo.metadata = colMD;
            !!formats && formats.array.length > valueCol && (checkCriticalElementIndex(valueCol, formats.array.length) , formats.array[valueCol] != null) && $setFormat(colInfo, (checkCriticalElementIndex(valueCol, formats.array.length) , castTo(formats.array[valueCol], 68)));
            colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
            colList.array[colList.array.length] = colInfo;
          }
           else {
            !trellisInfo && $addItem_0(colInfo, cell, false, curRowIndex);
          }
          if (!rowInfo) {
            rowInfo = new ColRowInfo_3(toString_24($get(columnNames, itemCol)), rowName, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)).type_0, rowIndex++, cell, true, curColIndex);
            $setMetadata(rowInfo, (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49)));
            $put_2(rowMap.stringMap, rowName + ':' + group1Name + ':' + group2Name, rowInfo);
            (group1Col != -1 || group2Col != -1) && $put_2(trellisMap.stringMap, rowName + ':' + colName + ':' + group1Name + ':' + group2Name, rowInfo);
            rowList.array[rowList.array.length] = rowInfo;
          }
           else {
            if (trellisInfo) {
              trellisCell = castTo($get_1(rowInfo.cellMap, valueOf(curColIndex)), 16);
              !!trellisCell && (isNaN_0($getValue(trellisCell))?$setValue(trellisCell, $getValue(cell)):isNaN_0($getValue(cell)) || $setValue(trellisCell, $getValue(trellisCell) + $getValue(cell)));
            }
             else {
              $addItem_0(rowInfo, cell, true, curColIndex);
              (group1Col != -1 || group2Col != -1) && $put_2(trellisMap.stringMap, rowName + ':' + colName + ':' + group1Name + ':' + group2Name, rowInfo);
            }
          }
          if ($length(columnNames) > 3 && toString_24($get(columnNames, 3)) != null && $equals_2(toString_24($get(columnNames, 3)), '__domo_period') && toString_24($get(columnNames, 4)) != null && $equals_2(toString_24($get(columnNames, 4)), '__domo_period_index')) {
            isPeriodOverPeriod = true;
            if (index_0 == 0) {
              mdColInfo = new ColRowInfo_2('__domo_period', 'DOUBLE');
              metadataList.array[metadataList.array.length] = mdColInfo;
              mdColInfo = new ColRowInfo_2('__domo_period_index', 'DOUBLE');
              metadataList.array[metadataList.array.length] = mdColInfo;
            }
            cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 2, 0, 1);
            for (i = 3; i < 5; i++) {
              metaValStr = toString_24($get(row, i));
              metaValue = getDouble_0(metaValStr, NaN);
              $addMetaData(cell, i - 3, (checkCriticalNotNull(metaValue) , metaValue));
            }
          }
           else if ($length(columnNames) > 3) {
            mdIndex = 0;
            for (i = 0; i < $length(columnNames); i++) {
              if (i != groupCol && i != itemCol && i != valueCol) {
                if (index_0 == 0) {
                  mdColInfo = new ColRowInfo_2(toString_24($get(columnNames, i)), (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0);
                  $setMetadata(mdColInfo, (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)));
                  mdColInfo.mapping = mappingVals[i];
                  !!formats && i < formats.array.length && (checkCriticalElementIndex(i, formats.array.length) , formats.array[i] != null) && $setFormat(mdColInfo, (checkCriticalElementIndex(i, formats.array.length) , castTo(formats.array[i], 68)));
                  metadataList.array[metadataList.array.length] = mdColInfo;
                }
                cell.metaData == null && $addMetaDataCells(cell, $length(columnNames) - 3);
                if (typeIsNumericValue((checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0)) {
                  try {
                    mdCell = new Cell($getDouble(row, i));
                  }
                   catch ($e0) {
                    $e0 = toJava($e0);
                    if (instanceOf($e0, 38)) {
                      mdCell = new Cell(NaN);
                    }
                     else 
                      throw toJs($e0);
                  }
                }
                 else {
                  valueStr = toString_24($get(row, i));
                  i == group1Col && $trim(group1Name).length > 0 && (valueStr = group1Name);
                  i == group2Col && $trim(group2Name).length > 0 && (valueStr = group2Name);
                  mdCell = new Cell_1(valueStr, (checkCriticalElementIndex(i, columnMDList.array.length) , castTo(columnMDList.array[i], 49)).type_0);
                }
                mdCol = (checkCriticalElementIndex(mdIndex, metadataList.array.length) , castTo(metadataList.array[mdIndex], 7));
                mdCell.column = mdCol;
                $put_0(mdCol.cellMap, valueOf(index_0), mdCell);
                $addMetaData_0(cell, mdIndex++, mdCell);
              }
            }
          }
        }
      }
      metadataList.array.length == 0 && (metadataList = null);
      $reset_5(colMap);
      $reset_5(rowMap);
      retGrid = new DataGrid_0(name_0, 'group-item-value', rowList, colList, metadataList);
      $setValueColumnName(retGrid, toString_24($get(columnNames, valueCol)));
      !!colAliases && toString_24($get(colAliases, valueCol)) != null && $setAltValueColumnName(retGrid, toString_24($get(colAliases, valueCol)));
      retGrid.isGroupItemValue = true;
      $containsKey_1(jsonObject.myHashMap, 'projections') && $setProjectionJSON(retGrid, $getJSONObject_0(jsonObject, 'projections'));
      isPeriodOverPeriod && (retGrid.isPeriodOverPeriod = true);
      return retGrid;
    }
     else 
      return new DataGrid_0(name_0, 'group-item-value', rowList, colList, null);
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (instanceOf($e1, 35)) {
      e = $e1;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e1);
  }
  return null;
}

function getNameColorMap(rnd, jsonObject, palette){
  var color_0, colorName, colorRef, e, entry, key, key$iterator, keys_0, nameMap, outerIter;
  try {
    nameMap = $getJSONObject_0(jsonObject, 'nameColorMap');
    keys_0 = new AbstractMap$1(nameMap.myHashMap);
    for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
      colorName = castToString(key);
      colorRef = $getJSONArray_0(nameMap, colorName);
      if (colorRef) {
        color_0 = $getColorForRowCol(palette, $getInt(colorRef, 0), $getInt(colorRef, 1));
        $putStringValue(palette.nameToColorMap, colorName, color_0);
      }
    }
    $size(palette.nameToColorMap) > 0 && $getStringValue(palette.nameToColorMap, 'White') == null && $putStringValue(palette.nameToColorMap, 'White', ($clinit_CFColor() , WHITE));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function getNextXForDateGrain(dateGrain, lastX){
  dateGrain != null && ($equals_2(dateGrain, 'DAY')?(lastX = lastX + $intern_34):$equals_2(dateGrain, 'WEEK')?(lastX = lastX + 604800000):$equals_2(dateGrain, 'MONTH')?(lastX = toDouble_0(getNextMonth(fromDouble_0(lastX)))):$equals_2(dateGrain, 'QUARTER')?(lastX = toDouble_0(getNextQuarter(fromDouble_0(lastX)))):$equals_2(dateGrain, 'YEAR') && (lastX = toDouble_0(getNextYear(fromDouble_0(lastX)))));
  return lastX;
}

function getNoGroupItemValueDataWithSeries(rnd, dataType, dateGrain, jsonObject, addRowIndex){
  var cc, cell, colAlias, colAliases, colIndex, colInfo, colList, colMap, colName, cols_0, columnMDList, curColIndex, curRowIndex, e, formats, index_0, isYearData, mdCell, mdColAlias, mdColInfo, mdColName, metadataList, name_0, numCols, numMDCells, numRows, row, rowIndex, rowInfo, rowList, rowMap, rowName, rows_0, valueStr;
  colAliases = null;
  isYearData = false;
  dateGrain != null && $equalsIgnoreCase(dateGrain, 'year') && !$equalsIgnoreCase(dataType, 'nogroup-item-value') && (isYearData = true);
  try {
    colMap = new HashMap;
    rowMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    metadataList = new ArrayList;
    colIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    numCols = $getInt_0(jsonObject, 'numColumns');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    if (numRows > 0 && numCols > 1) {
      columnMDList = getColumnMetadata(rnd, numCols, jsonObject);
      cols_0 = $getJSONArray_0(jsonObject, 'columns');
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      rows_0 = $getJSONArray_0(jsonObject, 'rows');
      formats = getFormats(rnd, jsonObject);
      colName = toString_24($get(cols_0, 1));
      colAlias = null;
      !!colAliases && (colAlias = toString_24($get(colAliases, 1)));
      if (!$equals_2(colName, '?column?')) {
        rowIndex = 0;
        for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
          row = castTo($get(rows_0, index_0), 92);
          rowName = toString_24($get(row, 0));
          if ((rowName == null || rowName.length == 0) && rowIsEmpty(row, cols_0))
            continue;
          cell = getCellForValue((checkCriticalElementIndex(1, columnMDList.array.length) , castTo(columnMDList.array[1], 49)).type_0, toString_24($get(row, 1)));
          isYearData && (cell.valueStr == null && !isNaN_0(cell.value_0) && (cell.valueStr = $formatNumber_1(($clinit_Cell() , stringFromYearValueFormatter), cell.value_0)) , cell.value_0 = NaN);
          colInfo = castTo(colName == null?getEntryValueOrNull($getEntry(colMap.hashCodeMap, null)):$get_3(colMap.stringMap, colName), 7);
          rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7);
          curRowIndex = rowIndex;
          !!rowInfo && (curRowIndex = rowInfo.origIndex);
          curColIndex = colIndex;
          !!colInfo && (curColIndex = colInfo.origIndex);
          if (!colInfo) {
            colInfo = new ColRowInfo_3(null, colName, (checkCriticalElementIndex(1, columnMDList.array.length) , castTo(columnMDList.array[1], 49)).type_0, colIndex++, cell, false, curRowIndex);
            $setMetadata(colInfo, (checkCriticalElementIndex(1, columnMDList.array.length) , castTo(columnMDList.array[1], 49)));
            colAlias != null && (colInfo.altName = colAlias);
            !!formats && formats.array.length > 1 && (checkCriticalElementIndex(1, formats.array.length) , formats.array[1] != null) && $setFormat(colInfo, (checkCriticalElementIndex(1, formats.array.length) , castTo(formats.array[1], 68)));
            colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
            colList.array[colList.array.length] = colInfo;
          }
           else {
            $addItem_0(colInfo, cell, false, index_0);
          }
          if (!rowInfo) {
            rowInfo = new ColRowInfo_3(toString_24($get(cols_0, 0)), rowName, (checkCriticalElementIndex(0, columnMDList.array.length) , castTo(columnMDList.array[0], 49)).type_0, rowIndex++, cell, true, curColIndex);
            $setMetadata(rowInfo, (checkCriticalElementIndex(0, columnMDList.array.length) , castTo(columnMDList.array[0], 49)));
            !!colAliases && toString_24($get(colAliases, 0)) != null && $setParentDisplayName(rowInfo, toString_24($get(colAliases, 0)));
            rowName == null?$put_1(rowMap.hashCodeMap, null, rowInfo):$put_2(rowMap.stringMap, rowName, rowInfo);
            rowList.array[rowList.array.length] = rowInfo;
          }
           else {
            $addItem_0(rowInfo, cell, true, index_0);
          }
          if (numCols > 2) {
            numMDCells = numCols - 2;
            addRowIndex && ++numMDCells;
            cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, numMDCells, 0, 1);
            for (cc = 2; cc < $length(cols_0); cc++) {
              mdColName = toString_24($get(cols_0, cc));
              mdColAlias = null;
              !!colAliases && (mdColAlias = toString_24($get(colAliases, cc)));
              if (!$equals_2(colName, '?column?')) {
                if (index_0 == 0) {
                  mdColInfo = new ColRowInfo_2(mdColName, (checkCriticalElementIndex(cc, columnMDList.array.length) , castTo(columnMDList.array[cc], 49)).type_0);
                  metadataList.array[metadataList.array.length] = mdColInfo;
                  mdColAlias != null && (mdColInfo.altName = mdColAlias);
                  !!formats && formats.array.length > cc && (checkCriticalElementIndex(cc, formats.array.length) , formats.array[cc] != null) && $setFormat(mdColInfo, (checkCriticalElementIndex(cc, formats.array.length) , castTo(formats.array[cc], 68)));
                }
                valueStr = toString_24($get(row, cc));
                mdCell = getCellForValue((checkCriticalElementIndex(cc, columnMDList.array.length) , castTo(columnMDList.array[cc], 49)).type_0, valueStr);
                mdCell.valueStr = valueStr;
                cell.metaData[cc - 2] = mdCell;
              }
            }
            if (addRowIndex) {
              if (index_0 == 0) {
                mdColInfo = new ColRowInfo_2('RowIndex', 'LONG');
                metadataList.array[metadataList.array.length] = mdColInfo;
              }
              mdCell = getCellForValue('LONG', '' + $size(cell.row.cellMap));
              cell.metaData[cell.metaData.length - 1] = mdCell;
            }
          }
        }
      }
      $reset_5(colMap);
      $reset_5(rowMap);
      isYearData && ((checkCriticalElementIndex(0, colList.array.length) , castTo(colList.array[0], 7)).type_0 = 'STRING');
      return new DataGrid_0(name_0, dataType, rowList, colList, metadataList);
    }
     else {
      $reset_5(colMap);
      $reset_5(rowMap);
      return new DataGrid_0(name_0, dataType, rowList, colList, null);
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getNotificationCode(rnd, jsonObject){
  var e, errorCode, notificationAry, notifications;
  errorCode = 0;
  if ($containsKey_1(jsonObject.myHashMap, 'notifications')) {
    try {
      notificationAry = $getJSONArray_0(jsonObject, 'notifications');
      if (!!notificationAry && $length(notificationAry) > 0 && !!$getJSONObject(notificationAry, 0)) {
        notifications = $getJSONObject(notificationAry, 0);
        $containsKey_1(notifications.myHashMap, 'code') && (errorCode = $getInt_0(notifications, 'code'));
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && $log_0(rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
  }
  return errorCode;
}

function getOrderedColumnListData(rnd, jsonObject){
  var c, cell, colAliases, colIndex, colInfo, colList, colName, cols_0, columnMDList, e, formats, index_0, mappings, name_0, numCols, numRows, result, row, rowInfo, rowList, rowMap, rows_0;
  colAliases = null;
  mappings = null;
  result = null;
  try {
    rowMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    colIndex = 0;
    numRows = $getInt_0(jsonObject, 'numRows');
    numCols = $getInt_0(jsonObject, 'numColumns');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    if (numRows > 0 && numCols > 0) {
      columnMDList = getColumnMetadata(rnd, numCols, jsonObject);
      cols_0 = $getJSONArray_0(jsonObject, 'columns');
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      $containsKey_1(jsonObject.myHashMap, 'mappings') && (mappings = $getJSONArray_0(jsonObject, 'mappings'));
      rows_0 = $getJSONArray_0(jsonObject, 'rows');
      formats = getFormats(rnd, jsonObject);
      for (c = 0; c < $length(cols_0); c++) {
        colName = toString_24($get(cols_0, c));
        if (!$equals_2(colName, '?column?')) {
          colInfo = new ColRowInfo_4(null, colName, (checkCriticalElementIndex(c, columnMDList.array.length) , castTo(columnMDList.array[c], 49)).type_0, colIndex);
          $setMetadata(colInfo, (checkCriticalElementIndex(c, columnMDList.array.length) , castTo(columnMDList.array[c], 49)));
          !!colAliases && $length(colAliases) > c && $get(colAliases, c) != null && toString_24($get(colAliases, c)).length > 0 && $setAltName(colInfo, toString_24($get(colAliases, c)));
          !!mappings && $length(mappings) > c && $get(mappings, c) != null && toString_24($get(mappings, c)).length > 0 && $setMapping(colInfo, toString_24($get(mappings, c)));
          !!formats && formats.array.length > c && (checkCriticalElementIndex(c, formats.array.length) , formats.array[c] != null) && $setFormat(colInfo, (checkCriticalElementIndex(c, formats.array.length) , castTo(formats.array[c], 68)));
          colList.array[colList.array.length] = colInfo;
          for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
            row = castTo($get(rows_0, index_0), 92);
            colInfo.mapping != null && ($equalsIgnoreCase(colInfo.mapping, 'SERIES') || !mappingsHas(mappings) && $equalsIgnoreCase(colInfo.mapping, 'VALUE1'))?(cell = getCellForValue('STRING', toString_24($get(row, c)))):(cell = getCellForValueAndSetValueStr((checkCriticalElementIndex(c, columnMDList.array.length) , castTo(columnMDList.array[c], 49)).type_0, toString_24($get(row, c))));
            cell.column = colInfo;
            $addItem_0(colInfo, cell, false, index_0);
            rowInfo = castTo($get_3(rowMap.stringMap, '' + index_0), 7);
            if (!rowInfo) {
              rowInfo = new ColRowInfo_3(null, '' + index_0, 'STRING', index_0, cell, true, colIndex);
              $setMetadata(rowInfo, (checkCriticalElementIndex(c, columnMDList.array.length) , castTo(columnMDList.array[c], 49)));
              $put_2(rowMap.stringMap, '' + index_0, rowInfo);
              rowList.array[rowList.array.length] = rowInfo;
            }
             else 
              $addItem_0(rowInfo, cell, true, colIndex);
          }
          ++colIndex;
        }
      }
      result = new DataGrid_0(name_0, 'ordered-column-list', rowList, colList, null);
      result.orderedColumnList = true;
      $containsKey_1(jsonObject.myHashMap, 'projections') && $setProjectionJSON(result, $getJSONObject_0(jsonObject, 'projections'));
    }
     else {
      result = new DataGrid_0(name_0, 'ordered-column-list', rowList, colList, null);
      result.orderedColumnList = true;
    }
    $reset_5(rowMap);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return result;
}

function getOverrides(rnd, jsonObject){
  var e, entry, key, key$iterator, keys_0, object, outerIter, overrideMap, value_0;
  try {
    if (jsonObject) {
      overrideMap = new HashMap;
      keys_0 = new AbstractMap$1(jsonObject.myHashMap);
      for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
        object = $get_0(jsonObject, castToString(key));
        if (instanceOfString(object)) {
          value_0 = toString_24(object);
          $equals_2(value_0, 'Default') || $putStringValue(overrideMap, castToString(key), value_0);
        }
         else 
          $putStringValue(overrideMap, castToString(key), object);
      }
      return overrideMap;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getPalette(rnd, jsonObject){
  var e, palette;
  palette = new Palette;
  try {
    $containsKey_1(jsonObject.myHashMap, 'colorRanges') && fillColorTable(rnd, palette, $getJSONArray_0(jsonObject, 'colorRanges'));
    $containsKey_1(jsonObject.myHashMap, 'colorRules') && fillColorRanges(rnd, palette, palette.colorRanges, $getJSONArray_0(jsonObject, 'colorRules'));
    $containsKey_1(jsonObject.myHashMap, 'lineColors') && (palette.lineColors = getCFColorAry(palette, jsonObject, 'lineColors'));
    $containsKey_1(jsonObject.myHashMap, 'latLongMapColors') && (palette.latLongMapColors = getCFColorAry(palette, jsonObject, 'latLongMapColors'));
    $containsKey_1(jsonObject.myHashMap, 'popVarColors') && (palette.popVarColors = getCFColorAry(palette, jsonObject, 'popVarColors'));
    $containsKey_1(jsonObject.myHashMap, 'popVarLineColors') && (palette.popVarLineColors = getCFColorAry(palette, jsonObject, 'popVarLineColors'));
    if ($containsKey_1(jsonObject.myHashMap, 'popColors')) {
      palette.popColors = getCFColorAry(palette, jsonObject, 'popColors');
      $containsKey_1(jsonObject.myHashMap, 'popLineColors') && toString_24($get_0(jsonObject, 'popLineColors')) != null && !$equalsIgnoreCase(toString_24($get_0(jsonObject, 'popLineColors')), 'null')?(palette.popLineColors = getCFColorAry(palette, jsonObject, 'popLineColors')):(palette.popLineColors = getCFColorAry(palette, jsonObject, 'popColors'));
    }
    $containsKey_1(jsonObject.myHashMap, 'selector') && getSelectorColors(rnd, jsonObject, palette);
    $containsKey_1(jsonObject.myHashMap, 'nameColorMap') && getNameColorMap(rnd, jsonObject, palette);
    $containsKey_1(jsonObject.myHashMap, 'gradients') && fillGradients(rnd, palette, $getJSONArray_0(jsonObject, 'gradients'));
    palette.backgroundColor = getColorForProperty(rnd, jsonObject, 'backgroundColor', palette);
    palette.scaleLineColor = getColorForProperty(rnd, jsonObject, 'scaleLineColor', palette);
    palette.textColor = getColorForProperty(rnd, jsonObject, 'textColor', palette);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return palette;
}

function getPalette_0(rnd, jsonStr){
  var e, jsonObject, palette;
  palette = null;
  try {
    jsonObject = new JSONObject_0(jsonStr);
    palette = getPalette(rnd, jsonObject);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return palette;
}

function getPeriodOverPeriodData(rnd, jsonObject, itemCol, valueCol, popPeriodCol, popIndexCol){
  var actualRowName, cell, colAliases, colIndex, colInfo, colList, colMap, colName, columnMDList, columnNames, curColIndex, curRowIndex, dateGrain, dateJoinColumn, e, formats, index_0, mdCell, name_0, numCols, numRows, retGrid, row, row$iterator, rowIndex, rowInfo, rowList, rowMap, rowMetadata, rowName, rowType, rows_0, value_0;
  try {
    colMap = new HashMap;
    rowMap = new HashMap;
    colList = new ArrayList;
    rowList = new ArrayList;
    colIndex = 0;
    rowIndex = 0;
    rowMetadata = null;
    numRows = $getInt_0(jsonObject, 'numRows');
    name_0 = toString_24($get_0(jsonObject, 'datasource'));
    dateGrain = null;
    dateJoinColumn = null;
    $containsKey_1(jsonObject.myHashMap, 'dateGrain') && (dateGrain = toString_24($get_0(jsonObject, 'dateGrain')));
    !!jsonObject && $containsKey_1(jsonObject.myHashMap, 'dateJoinColumn') && (dateJoinColumn = toString_24($get_0(jsonObject, 'dateJoinColumn')));
    numCols = $getInt_0(jsonObject, 'numColumns');
    columnMDList = getColumnMetadata(rnd, numCols, jsonObject);
    rowType = '';
    if (columnMDList.array.length > itemCol) {
      rowMetadata = (checkCriticalElementIndex(itemCol, columnMDList.array.length) , castTo(columnMDList.array[itemCol], 49));
      rowType = rowMetadata.type_0;
    }
    if (numRows > 0) {
      columnNames = $getJSONArray_0(jsonObject, 'columns');
      rows_0 = castTo($get_0(jsonObject, 'rows'), 92);
      colAliases = null;
      $containsKey_1(jsonObject.myHashMap, 'aliases') && (colAliases = $getJSONArray_0(jsonObject, 'aliases'));
      formats = getFormats(rnd, jsonObject);
      for (index_0 = 0; index_0 < $length(rows_0); index_0++) {
        row = castTo($get(rows_0, index_0), 92);
        colName = toString_24($get(row, popPeriodCol));
        rowName = toString_24($get(row, popIndexCol));
        actualRowName = toString_24($get(row, itemCol));
        value_0 = getDouble_0(toString_24($get(row, valueCol)), NaN);
        cell = new Cell((checkCriticalNotNull(value_0) , value_0));
        cell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
        $addMetaData_1(cell, 0, actualRowName, rowType);
        colInfo = castTo(colName == null?getEntryValueOrNull($getEntry(colMap.hashCodeMap, null)):$get_3(colMap.stringMap, colName), 7);
        rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7);
        curRowIndex = rowIndex;
        !!rowInfo && (curRowIndex = rowInfo.origIndex);
        curColIndex = colIndex;
        !!colInfo && (curColIndex = colInfo.origIndex);
        if (!colInfo) {
          colInfo = new ColRowInfo_3(toString_24($get(columnNames, itemCol)), colName, rowType, colIndex++, cell, false, curRowIndex);
          colName == null?$put_1(colMap.hashCodeMap, null, colInfo):$put_2(colMap.stringMap, colName, colInfo);
          colList.array[colList.array.length] = colInfo;
          !!formats && (checkCriticalElementIndex(valueCol, formats.array.length) , formats.array[valueCol] != null) && $setFormat(colInfo, (checkCriticalElementIndex(valueCol, formats.array.length) , castTo(formats.array[valueCol], 68)));
        }
         else {
          $addItem_0(colInfo, cell, false, curRowIndex);
        }
        if (!rowInfo) {
          rowInfo = new ColRowInfo_3(toString_24($get(columnNames, itemCol)), rowName, rowType, rowIndex++, cell, true, curColIndex);
          rowInfo.metadata = rowMetadata;
          rowName == null?$put_1(rowMap.hashCodeMap, null, rowInfo):$put_2(rowMap.stringMap, rowName, rowInfo);
          rowList.array[rowList.array.length] = rowInfo;
        }
         else {
          $addItem_0(rowInfo, cell, true, curColIndex);
        }
      }
      retGrid = new DataGrid_0(name_0, 'period-over-period', rowList, colList, null);
      $setValueColumnName(retGrid, toString_24($get(columnNames, valueCol)));
      !!colAliases && toString_24($get(colAliases, valueCol)) != null && $setAltValueColumnName(retGrid, toString_24($get(colAliases, valueCol)));
      retGrid.dateGrain = dateGrain;
      retGrid.dateJoinColumn = dateJoinColumn;
      $sortRows(retGrid, SORT_NAME_AS_INT);
      for (row$iterator = new ArrayList$1(rowList); row$iterator.i < row$iterator.this$01.array.length;) {
        row = castTo($next_3(row$iterator), 7);
        if (!!row.cellMap && $get_1(row.cellMap, valueOf(0)) != null && !!$getMetaDataCell(castTo($get_1(row.cellMap, valueOf(0)), 16), 0)) {
          mdCell = $getMetaDataCell(castTo($get_1(row.cellMap, valueOf(0)), 16), 0);
          if (mdCell) {
            row.name_0 = mdCell.valueStr;
            row.timeMS = mdCell.timeMS;
          }
        }
      }
      retGrid.isPeriodOverPeriod = true;
      $reset_5(colMap);
      $reset_5(rowMap);
      return retGrid;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getPivotTableTotals(rnd, jsonObject){
  var dataSourcesJsonObject, datasourceName, dg, dsArray, dsDataJsonObject, dsJsonObject, e, entry, i, key, key$iterator, keys_0, outerIter, pivotTotals;
  pivotTotals = new ArrayList;
  try {
    dataSourcesJsonObject = $getJSONObject_0(jsonObject, 'datasources');
    if (dataSourcesJsonObject) {
      keys_0 = new AbstractMap$1(dataSourcesJsonObject.myHashMap);
      for (key$iterator = (outerIter = keys_0.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
        key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
        datasourceName = castToString(key);
        dsJsonObject = $getJSONObject_0(dataSourcesJsonObject, datasourceName);
        if (dsJsonObject) {
          if ($containsKey_1(dsJsonObject.myHashMap, 'pivottotals')) {
            dsArray = $getJSONArray_0(dsJsonObject, 'pivottotals');
            if (dsArray) {
              for (i = 0; i < $length(dsArray); i++) {
                dsDataJsonObject = $getJSONObject(dsArray, i);
                dg = getDataGrid(rnd, dsDataJsonObject, 'ordered-column-list');
                !!dg && (pivotTotals.array[pivotTotals.array.length] = dg , true);
              }
            }
          }
        }
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return pivotTotals;
}

function getPoint(rnd, jsonObj){
  var e, x_0, y_0;
  try {
    if (jsonObj) {
      x_0 = 0;
      y_0 = 0;
      if ($containsKey_1(jsonObj.myHashMap, 'x')) {
        x_0 = $getDouble_1(jsonObj, 'x');
        y_0 = $getDouble_1(jsonObj, 'y');
      }
      return new CFRect(x_0, y_0, 1, 1);
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getPointComponent(ptObj, layer, rnd){
  var e, name_0, point, ptComp;
  ptComp = null;
  try {
    if (ptObj) {
      point = getPoint(rnd, ptObj);
      name_0 = toString_24($get_0(ptObj, 'name'));
      ptComp = new MapPointComponent(name_0, point);
      ptComp.layer = layer;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return ptComp;
}

function getPreviousXForDateGrainWithOffset(dateGrain, lastX, offset){
  dateGrain != null && ($equals_2(dateGrain, 'DAY')?(lastX = lastX + $intern_34 * -offset):$equals_2(dateGrain, 'WEEK')?(lastX = lastX + 604800000 * -offset):$equals_2(dateGrain, 'MONTH')?(lastX = toDouble_0(getMonthWithOffset(fromDouble_0(lastX), -offset))):$equals_2(dateGrain, 'QUARTER')?(lastX = toDouble_0(getQuarterWithOffset(fromDouble_0(lastX), -offset))):$equals_2(dateGrain, 'YEAR') && (lastX = toDouble_0(getYearWithOffset(fromDouble_0(lastX), -offset))));
  return lastX;
}

function getRectPathFromVals(rectStr){
  var height, vals, width_0, x_0, y_0;
  vals = $split(rectStr, ' ', 0);
  x_0 = getDouble_0(vals[0], 0);
  y_0 = getDouble_0(vals[1], 0);
  width_0 = getDouble_0(vals[2], 0);
  height = getDouble_0(vals[3], 0);
  return new CFPath_3(new CFRect(x_0, y_0, width_0, height));
}

function getRegressionVals(colIndex, graph, includeLast, extraIncrements, periodOffset, method, forRegressionLine){
  var dateGrain, i, lastActualValIndex, lastIndex, lastPoint, lastX, nextX, nextY, point, points, ratio, regData, resultPoints, xDiff, yDiff;
  points = getValuesAsPoints(colIndex, graph, forRegressionLine);
  $sort(points, new DataUtils$1);
  if (points.array.length < 2 && extraIncrements == 0)
    return new RegressionInfo(0, null);
  lastPoint = null;
  points.array.length > 0 && (lastPoint = castTo($get_2(points, points.array.length - 1), 10));
  if (!lastPoint)
    return new RegressionInfo(0, null);
  if ((checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).x_0 > 0 && graph.data_0.isFiscalCalendar && graph.data_0.dateGrain != null && $equals_2(graph.data_0.dateGrain, 'MONTH')) {
    nextX = toDouble_0(getPreviousMonth(fromDouble_0(lastPoint.x_0)));
    for (i = points.array.length - 2; i >= 0; i--) {
      point = (checkCriticalElementIndex(i, points.array.length) , castTo(points.array[i], 10));
      point.x_0 = nextX;
      nextX = toDouble_0(getPreviousMonth(fromDouble_0(nextX)));
    }
  }
  !includeLast && points.array.length > 0 && $remove_2(points, points.array.length - 1);
  regData = calcAndGetRegressionDataForPoints(points);
  if (!!regData.regressionPoints && regData.regressionPoints.array.length < 2)
    return new RegressionInfo(0, null);
  resultPoints = regData.regressionPoints;
  lastX = castTo($get_2(resultPoints, resultPoints.array.length - 1), 10).x_0;
  if (!includeLast) {
    if (points.array.length == 1) {
      $add_1(resultPoints, new CFPoint(lastPoint.x_0, (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).y_0));
      lastX = lastPoint.x_0;
    }
     else {
      lastIndex = resultPoints.array.length - 1;
      xDiff = (checkCriticalElementIndex(lastIndex, resultPoints.array.length) , castTo(resultPoints.array[lastIndex], 10)).x_0 - (checkCriticalElementIndex(0, resultPoints.array.length) , castTo(resultPoints.array[0], 10)).x_0;
      yDiff = (checkCriticalElementIndex(lastIndex, resultPoints.array.length) , castTo(resultPoints.array[lastIndex], 10)).y_0 - (checkCriticalElementIndex(0, resultPoints.array.length) , castTo(resultPoints.array[0], 10)).y_0;
      xDiff == 0 && (xDiff = 0.5);
      ratio = yDiff / xDiff;
      if (lastPoint) {
        nextX = lastPoint.x_0;
        nextY = (checkCriticalElementIndex(lastIndex, resultPoints.array.length) , castTo(resultPoints.array[lastIndex], 10)).y_0 + (lastPoint.x_0 - castTo($get_2(points, points.array.length - 1), 10).x_0) * ratio;
        $add_1(resultPoints, new CFPoint(nextX, nextY));
        lastX = nextX;
      }
    }
  }
  lastActualValIndex = resultPoints.array.length - 1;
  dateGrain = graph.data_0.dateGrain;
  extraIncrements > 0 && addExtraPointsForForecast(graph, extraIncrements, points, regData, resultPoints, lastX, dateGrain);
  periodOffset > 1 && periodOffset <= lastActualValIndex && (method == 5 && lastActualValIndex >= periodOffset?adjustExtraForecastPointsPeriodOffsetDiff(periodOffset, points, resultPoints, lastActualValIndex, dateGrain):method == 6 && lastActualValIndex >= periodOffset * 2 && adjustExtraForecastPointsPeriodOffsetRegression(periodOffset, points, resultPoints, lastActualValIndex, dateGrain));
  return new RegressionInfo(lastActualValIndex, resultPoints);
}

function getScaleMarker(rnd, jsonObject, isGoal){
  var color_0, colorStr, e, highValue, lowValue, name_0, sm, value_0;
  try {
    if (jsonObject) {
      name_0 = null;
      $containsKey_1(jsonObject.myHashMap, 'name') && (name_0 = toString_24($get_0(jsonObject, 'name')));
      color_0 = null;
      if ($containsKey_1(jsonObject.myHashMap, 'color')) {
        colorStr = toString_24($get_0(jsonObject, 'color'));
        color_0 = new CFColor_2(colorStr);
      }
      if ($containsKey_1(jsonObject.myHashMap, 'high')) {
        lowValue = $getDouble_2(jsonObject, 'low', 0);
        highValue = $getDouble_2(jsonObject, 'high', 0);
        return new ScaleMarker(lowValue, highValue, color_0, name_0);
      }
       else if ($containsKey_1(jsonObject.myHashMap, 'value')) {
        value_0 = $getDouble_2(jsonObject, 'value', 0);
        sm = new ScaleMarker_0(value_0, color_0, name_0);
        sm.isGoal = isGoal;
        sm.goalDisplay = 2;
        return sm;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return null;
}

function getSelectorColors(rnd, jsonObject, palette){
  var color_0, colorAry, colorRangeAry, colorRef, e, i, j, selectorAry;
  try {
    selectorAry = $getJSONArray_0(jsonObject, 'selector');
    for (i = 0; i < $length(selectorAry); i++) {
      colorAry = new ArrayList;
      $add_1(palette.selectorColors, colorAry);
      colorRangeAry = $getJSONArray(selectorAry, i);
      for (j = 0; j < $length(colorRangeAry); j++) {
        colorRef = $getJSONArray(colorRangeAry, j);
        color_0 = $getColorForRowCol(palette, $getInt(colorRef, 0), $getInt(colorRef, 1));
        colorAry.array[colorAry.array.length] = color_0;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function getShapeComponent(shapeObj, layer, rnd){
  var bnds, e, i, origFillColor, origFont, origStroke, poly, polyAry, shapeComp;
  shapeComp = null;
  try {
    if (shapeObj) {
      bnds = getBounds(rnd, shapeObj, 'ThisObj');
      origFillColor = null;
      $containsKey_1(shapeObj.myHashMap, 'fill') && (origFillColor = new CFColor_2(toString_24($get_0(shapeObj, 'fill'))));
      origStroke = null;
      if ($containsKey_1(shapeObj.myHashMap, 'stroke')) {
        origStroke = new CFStroke_1(toString_24($get_0(shapeObj, 'stroke')), 1);
        $containsKey_1(shapeObj.myHashMap, 'strokewidth') && $setWidth_0(origStroke, $getDouble_2(shapeObj, 'strokewidth', 1));
      }
      if ($containsKey_1(shapeObj.myHashMap, 'text')) {
        bnds.x_0 = 0;
        bnds.y_0 = 0;
      }
      shapeComp = new ShapeComponent_1(bnds, origFillColor, origStroke);
      shapeComp.layer = layer;
      if ($containsKey_1(shapeObj.myHashMap, 'rect')) {
        $addOrigPath(shapeComp, getRectPathFromVals(toString_24($get_0(shapeObj, 'rect'))));
      }
       else if ($containsKey_1(shapeObj.myHashMap, 'circle')) {
        $addOrigPath(shapeComp, getCirclePathFromVals(toString_24($get_0(shapeObj, 'circle'))));
      }
       else if ($containsKey_1(shapeObj.myHashMap, 'text')) {
        $addOrigPath(shapeComp, new CFPath_3(new CFRect($getDouble_1(shapeObj, 'x'), $getDouble_1(shapeObj, 'y'), 0, 0)));
        $containsKey_1(shapeObj.myHashMap, 'fill')?$setOrigFillColor(shapeComp, new CFColor_2(toString_24($get_0(shapeObj, 'fill')))):$setOrigFillColor(shapeComp, ($clinit_CFColor() , BLACK));
        $setText(shapeComp, toString_24($get_0(shapeObj, 'text')));
        if ($containsKey_1(shapeObj.myHashMap, 'fontsize') || $containsKey_1(shapeObj.myHashMap, 'fontface')) {
          origFont = new CFFont_0(null, 16, shapeComp.origFillColor);
          $containsKey_1(shapeObj.myHashMap, 'fontsize') && $setSize_0(origFont, $getDouble_2(shapeObj, 'fontsize', 16));
          $containsKey_1(shapeObj.myHashMap, 'fontface') && $setFace(origFont, $getInt_0(shapeObj, 'fontface'));
          shapeComp.origFont = origFont;
        }
        $containsKey_1(shapeObj.myHashMap, 'textrotation') && $setTextRotation(shapeComp, $getDouble_2(shapeObj, 'textrotation', 0));
      }
       else {
        if ($containsKey_1(shapeObj.myHashMap, 'polys')) {
          polyAry = $getJSONArray_0(shapeObj, 'polys');
          if (!!polyAry && $length(polyAry) > 0) {
            for (i = 0; i < $length(polyAry); i++) {
              poly = $getJSONObject(polyAry, i);
              !!poly && $containsKey_1(poly.myHashMap, 'path') && $addOrigPath(shapeComp, new CFPath_8(toString_24($get_0(poly, 'path'))));
            }
          }
        }
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return shapeComp;
}

function getSingleFilter(rnd, jsonFilter){
  var e, filter, jsonObject;
  if (jsonFilter != null && jsonFilter.length > 0) {
    jsonObject = getJsonObject(jsonFilter);
    if (jsonObject) {
      try {
        filter = getFilter(jsonObject);
        return filter;
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 35)) {
          e = $e0;
          !!rnd && $log_0(rnd, getExceptionStackTrace(e));
        }
         else 
          throw toJs($e0);
      }
    }
  }
  return null;
}

function getTimeDisplayStrForTimeMS(timeMS, dateGrain, isFiscal, index_0, locale, comp, includeYear){
  var date, month, quarter, year;
  if (dateGrain != null) {
    if (dateGrain != null && ($equals_2(dateGrain, 'DAY') || $equals_2(dateGrain, 'WEEK'))) {
      return $equals_2(dateGrain, 'WEEK') && isFiscal?getString('PROJECTED', locale) + '+' + index_0:FormatDate(timeMS, 'yyyy-MM-dd', locale, comp.chart.timeZone);
    }
     else {
      date = new Date_4(timeMS);
      year = date.jsdate.getFullYear() - $intern_14;
      month = date.jsdate.getMonth();
      date.jsdate.getDate();
      if ($equals_2(dateGrain, 'MONTH')) {
        return isFiscal?getString('PROJECTED', locale) + '+' + index_0:locale != null && $equals_2(locale, 'zh-CN')?includeYear?'' + ($intern_14 + year) + getString('MONTHSHORTNAMESTDCAL_' + month, locale):getString('MONTHSHORTNAMESTDCAL_' + month, locale):includeYear?'' + ($intern_14 + year) + '-' + getString('MONTHSHORTNAMESTDCAL_' + month, locale):getString('MONTHSHORTNAMESTDCAL_' + month, locale);
      }
       else if ($equals_2(dateGrain, 'QUARTER')) {
        month <= 2?(quarter = 1):month > 2 && month < 6?(quarter = 2):month > 5 && month < 9?(quarter = 3):(quarter = 4);
        return locale != null && $equals_2(locale, 'fr-FR')?includeYear?'' + ($intern_14 + year) + '-' + 'T' + quarter:'T' + quarter:locale != null && $equals_2(locale, 'zh-CN')?includeYear?'' + ($intern_14 + year) + '\u5E74' + quarter + '\u5B63\u5EA6':'' + quarter + '\u5B63\u5EA6':includeYear?'' + ($intern_14 + year) + '-' + 'Q' + quarter:'Q' + quarter;
      }
       else if ($equals_2(dateGrain, 'YEAR')) {
        return '' + ($intern_14 + year);
      }
    }
  }
  return getString('PROJECTED', locale) + '+' + index_0;
}

function getTimeMSForDateString(dateStr, type_0, monthNames, locale){
  var date, day, dayStr, hourStr, hours, inter1, inter2, length_0, milliStr, minStr, minutes, month, monthStr, secStr, seconds, timeMS, year, yearStr;
  timeMS = valueOf_0(0);
  if (dateStr != null) {
    length_0 = dateStr.length;
    if (type_0 != null && $equals_2(type_0, 'CalendarMonth') && !!monthNames && monthNames.hashCodeMap.size_0 + monthNames.stringMap.size_0 == 12) {
      timeMS = getTimeMSForMonth(dateStr, monthNames, locale);
    }
     else if (type_0 != null && $equals_2(type_0, 'CalendarQuarter')) {
      timeMS = getTimeMSForQuarter(dateStr, locale);
    }
     else {
      try {
        if (length_0 == 10 || length_0 == 19 || length_0 == 23) {
          yearStr = dateStr.substr(0, 4);
          monthStr = dateStr.substr(5, 2);
          dayStr = dateStr.substr(8, 2);
          inter1 = dateStr.substr(4, 1);
          inter2 = dateStr.substr(7, 1);
          if (!$equals_2(inter1, '-') || !$equals_2(inter2, '-'))
            return valueOf_0(0);
          year = __parseAndValidateInt(yearStr, 10) - $intern_14;
          month = __parseAndValidateInt(monthStr, 10) - 1;
          day = __parseAndValidateInt(dayStr, 10);
          hours = 0;
          minutes = 0;
          seconds = 0;
          if (dateStr.length == 19 || dateStr.length == 23) {
            hourStr = dateStr.substr(11, 2);
            minStr = dateStr.substr(14, 2);
            secStr = dateStr.substr(17, 2);
            hours = __parseAndValidateInt(hourStr, 10);
            minutes = __parseAndValidateInt(minStr, 10);
            seconds = __parseAndValidateInt(secStr, 10);
            if (dateStr.length == 23) {
              milliStr = dateStr.substr(21, 2);
              __parseAndValidateInt(milliStr, 10);
            }
          }
          date = new Date_3(year, month, day, hours, minutes, seconds);
          timeMS = valueOf_0(fromDouble_0(date.jsdate.getTime()));
        }
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (!instanceOf($e0, 38))
          throw toJs($e0);
      }
    }
  }
  return timeMS;
}

function getTimeMSForMonth(dateStr, monthNames, locale){
  var date, inter, length_0, month, monthNameStr, year, yearStr;
  if (dateStr != null) {
    length_0 = dateStr.length;
    try {
      if (length_0 >= 7 && length_0 <= 9) {
        yearStr = dateStr.substr(0, 4);
        monthNameStr = dateStr.substr(5, dateStr.length - 5);
        inter = dateStr.substr(4, 1);
        if (locale != null && $equals_2(locale, 'zh-CN')) {
          monthNameStr = dateStr.substr(4, dateStr.length - 4);
        }
         else {
          if (!$equals_2(inter, '-'))
            return valueOf_0(0);
        }
        year = __parseAndValidateInt(yearStr, 10) - $intern_14;
        month = castTo($getStringValue(monthNames, monthNameStr.toLowerCase()), 29);
        !month && (month = castTo($getStringValue(monthNames, monthNameStr.substr(0, 3).toLowerCase()), 29));
        if (!month)
          return valueOf_0(0);
        date = new Date_1(year, month.value_0, 1);
        return valueOf_0(fromDouble_0(date.jsdate.getTime()));
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 38))
        throw toJs($e0);
    }
  }
  return valueOf_0(0);
}

function getTimeMSForQuarter(dateStr, locale){
  var date, inter, length_0, month, quarter, quarterChar, quarterStr, year, yearStr;
  if (dateStr != null) {
    length_0 = dateStr.length;
    quarterChar = 'Q';
    try {
      locale != null && $equals_2(locale, 'fr-FR') && (quarterChar = 'T');
      if (locale != null && $equals_2(locale, 'zh-CN')) {
        if (length_0 == 8) {
          yearStr = dateStr.substr(0, 4);
          quarterStr = dateStr.substr(5, 1);
          inter = dateStr.substr(4, 1);
          if (!$equals_2(inter, '\u5E74'))
            return valueOf_0(0);
          year = __parseAndValidateInt(yearStr, 10) - $intern_14;
          quarter = __parseAndValidateInt(quarterStr, 10);
          if (quarter > 4 || quarter < 1)
            return valueOf_0(0);
          month = (quarter - 1) * 3;
          date = new Date_1(year, month, 1);
          return valueOf_0(fromDouble_0(date.jsdate.getTime()));
        }
      }
       else {
        if (length_0 == 7) {
          yearStr = dateStr.substr(0, 4);
          quarterStr = dateStr.substr(6, 1);
          inter = dateStr.substr(4, 2);
          if (!$equals_2(inter, '-' + quarterChar))
            return valueOf_0(0);
          year = __parseAndValidateInt(yearStr, 10) - $intern_14;
          quarter = __parseAndValidateInt(quarterStr, 10);
          if (quarter > 4 || quarter < 1)
            return valueOf_0(0);
          month = (quarter - 1) * 3;
          date = new Date_1(year, month, 1);
          return valueOf_0(fromDouble_0(date.jsdate.getTime()));
        }
      }
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 38))
        throw toJs($e0);
    }
  }
  return valueOf_0(0);
}

function getTimeMSForYear(dateStr){
  var date, timeMS, year;
  timeMS = valueOf_0(0);
  try {
    year = __parseAndValidateInt(dateStr, 10) - $intern_14;
    date = new Date_1(year, 0, 1);
    timeMS = valueOf_0(fromDouble_0(date.jsdate.getTime()));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 38))
      throw toJs($e0);
  }
  return timeMS;
}

function getValuesAsPoints(colIndex, graph, forRegressionLine){
  var cell, cell$iterator, col, data_0, entry, hasTimeScale, i, index_0, numRows, outerIter, points, rowsHaveTimeData;
  data_0 = graph.data_0;
  points = new ArrayList;
  hasTimeScale = false;
  instanceOf(graph, 40) && $hasTimeScale(castTo(graph, 40)) && (hasTimeScale = true);
  if (graph.graphType == 12) {
    col = $getColumn(data_0, colIndex);
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!$getMetaDataCell(cell, 0) && !cell.hidden && (neq(cell.timeMS, 0) && hasTimeScale?$add_1(points, new CFPoint(toDouble_0(cell.timeMS), $getValue($getMetaDataCell(cell, 0)))):$add_1(points, new CFPoint($getValue(cell), $getValue($getMetaDataCell(cell, 0)))));
    }
  }
   else {
    index_0 = 0;
    numRows = $getNumRows(data_0);
    data_0.numProjectedRows > 0 && (numRows -= data_0.numProjectedRows);
    rowsHaveTimeData = false;
    for (i = 0; i < numRows; i++) {
      cell = $getCell(data_0, i, colIndex);
      if (!!cell && !isNaN_0(cell.value_0) && !cell.row.hidden) {
        if (!!cell.row && neq(cell.row.timeMS, 0) && (hasTimeScale || !forRegressionLine)) {
          $add_1(points, new CFPoint(toDouble_0(cell.row.timeMS), cell.value_0));
          rowsHaveTimeData = true;
        }
         else 
          data_0.hasHiddenRows?$add_1(points, new CFPoint(index_0, cell.value_0)):$add_1(points, new CFPoint(i, cell.value_0));
        ++index_0;
      }
    }
    rowsHaveTimeData && points.array.length < numRows && castTo($get_2(points, points.array.length - 1), 10).x_0 != toDouble_0($getRow(graph.data_0, numRows - 1).timeMS) && $add_1(points, new CFPoint(toDouble_0($getRow(graph.data_0, numRows - 1).timeMS), 0));
  }
  return points;
}

function hasGroupColumn(jsonObject){
  var i, mappings, type_0;
  try {
    mappings = null;
    $containsKey_1(jsonObject.myHashMap, 'mappings') && (mappings = $getJSONArray_0(jsonObject, 'mappings'));
    if (!!mappings && $length(mappings) > 0) {
      for (i = 0; i < $length(mappings); i++) {
        type_0 = toString_24($get(mappings, i));
        if ($equals_2('GROUP1', type_0) || $equals_2('GROUP2', type_0))
          return true;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 35))
      throw toJs($e0);
  }
  return false;
}

function isColumnNameInDataSet(columnName, dataGrid){
  var i, metaCol;
  if (!!dataGrid && columnName != null) {
    if (dataGrid.valueColumnName != null && $equals_2(dataGrid.valueColumnName, columnName))
      return true;
    if ($getColumnByOriginalName(dataGrid, columnName))
      return true;
    if ($getColumnByName(dataGrid, columnName))
      return true;
    if (dataGrid.isPeriodOverPeriod && !!dataGrid.rows_0 && dataGrid.rows_0.size_1() > 0 && castTo(dataGrid.rows_0.get_1(0), 7).parentName != null && $equals_2(castTo(dataGrid.rows_0.get_1(0), 7).parentName, columnName))
      return true;
    if ($getNumRows(dataGrid) > 0 && $equals_2($getRow(dataGrid, 0).parentName, columnName))
      return true;
    if ($getMetaDataSize(dataGrid) > 0) {
      for (i = 0; i < $getMetaDataSize(dataGrid); i++) {
        metaCol = $getMetadataInfo(dataGrid, i);
        if ($equals_2(columnName, metaCol.name_0))
          return true;
      }
    }
  }
  return false;
}

function isGeoJson(jsonObject){
  if (jsonObject) {
    try {
      $containsKey_1(jsonObject.myHashMap, 'chart') && (jsonObject = $getJSONObject_0(jsonObject, 'chart'));
      if ($containsKey_1(jsonObject.myHashMap, 'type') && $containsKey_1(jsonObject.myHashMap, 'features') && $equalsIgnoreCase(toString_24($get_0(jsonObject, 'type')), 'FeatureCollection'))
        return true;
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 35))
        throw toJs($e0);
    }
  }
  return false;
}

function isMapBadgeType(chartType){
  if (chartType != null && $equals_2(chartType.substr(0, 9), 'badge_map') || $equals_2(chartType.substr(0, 11), 'badge_world'))
    return true;
  return false;
}

function mappingsHas(mappings){
  var i, mapping;
  try {
    if (mappings) {
      for (i = 0; i < $length(mappings); i++) {
        mapping = $get(mappings, i);
        if (mapping != null && instanceOfString(mapping) && $equalsIgnoreCase(castToString(mapping), 'DATE'))
          return true;
      }
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (!instanceOf($e0, 35))
      throw toJs($e0);
  }
  return false;
}

function mergeChartDefinitionWithCurrentState(rnd, chartDef, currentStateJSON, currentComp){
  var chartType, e, graph, jsonObject, map_0, overrides;
  try {
    jsonObject = new JSONObject_0(currentStateJSON);
    overrides = null;
    chartType = null;
    $containsKey_1(jsonObject.myHashMap, 'chartType') && (chartType = toString_24($get_0(jsonObject, 'chartType')));
    $containsKey_1(jsonObject.myHashMap, 'overrides') && (overrides = getOverrides(rnd, $getJSONObject_0(jsonObject, 'overrides')));
    if (chartDef.componentDefMap) {
      graph = castTo($get_4(chartDef.componentDefMap, 'graph'), 137);
      if (graph) {
        chartType != null && (graph.badgeType = chartType);
        !!overrides && (!graph.overrides?(graph.overrides = overrides):graph.overrides.putAll(overrides));
      }
       else {
        map_0 = castTo($get_4(chartDef.componentDefMap, 'map'), 137);
        if (map_0) {
          !!overrides && (!map_0.overrides?(map_0.overrides = overrides):map_0.overrides.putAll(overrides));
          if (chartType != null && !isMapBadgeType(chartType)) {
            graph = new ComponentDef;
            graph.type_0 = map_0.type_0;
            graph.subtype = map_0.subtype;
            graph.properties = map_0.properties;
            graph.datasource = map_0.datasource;
            graph.badgeType = map_0.badgeType;
            graph.originalBadgeType = map_0.originalBadgeType;
            graph.bounds = map_0.bounds;
            graph.mapDef = map_0.mapDef;
            graph.columnFormats = map_0.columnFormats;
            graph.overrides = map_0.overrides;
            graph.annotations = map_0.annotations;
            graph.type_0 = 'graph';
            graph.badgeType = chartType;
            graph.mapDef = null;
            $put_3(chartDef.componentDefMap, 'graph', graph);
            $remove_7(chartDef.componentDefMap, 'map');
          }
        }
      }
    }
     else 
      !!currentComp && !!overrides && (currentComp.chartOptions?currentComp.chartOptions.putAll(overrides):(currentComp.chartOptions = overrides));
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
}

function postProcessTimeMSValues(dg, locale){
  var cell, cell$iterator, col, col$iterator, entry, monthShortNameMap, outerIter, row, row$iterator, timeMS;
  if (!!dg && dg.dateGrain != null && $equals_2(dg.dateGrain, 'MONTH')) {
    monthShortNameMap = getStdCalMonthShortNameMap(locale);
    for (row$iterator = dg.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if ($equals_2(row.type_0, 'STRING') && row.parentName != null && $equals_2(row.parentName, 'CalendarMonth')) {
        timeMS = getTimeMSForDateString($getName(row), row.parentName, monthShortNameMap, locale);
        neq(timeMS.value_0, 0) && $setTimeMS_0(row, timeMS.value_0);
      }
    }
    for (col$iterator = dg.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2(col.type_0, 'STRING') && col.name_0 != null && $equals_2(col.name_0, 'CalendarMonth') && col.mapping != null && $equals_2(col.mapping, 'XTIME') && !!col.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          timeMS = getTimeMSForDateString(cell.valueStr, 'CalendarMonth', monthShortNameMap, locale);
          neq(timeMS.value_0, 0) && $setTimeMS(cell, timeMS.value_0);
        }
      }
    }
  }
   else if (!!dg && dg.dateGrain != null && $equals_2(dg.dateGrain, 'QUARTER')) {
    if (locale != null && ($equals_2(locale, 'fr-FR') || $equals_2(locale, 'zh-CN'))) {
      for (row$iterator = dg.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        if ($equals_2(row.type_0, 'STRING') && row.parentName != null && $equals_2(row.parentName, 'CalendarQuarter')) {
          timeMS = getTimeMSForDateString($getName(row), row.parentName, null, locale);
          neq(timeMS.value_0, 0) && $setTimeMS_0(row, timeMS.value_0);
        }
      }
    }
    for (col$iterator = dg.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2(col.type_0, 'STRING') && col.name_0 != null && $equals_2(col.name_0, 'CalendarQuarter') && col.mapping != null && $equals_2(col.mapping, 'XTIME') && !!col.cellMap) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          timeMS = getTimeMSForDateString(cell.valueStr, 'CalendarQuarter', null, locale);
          neq(timeMS.value_0, 0) && $setTimeMS(cell, timeMS.value_0);
        }
      }
    }
  }
  setDataGridDateGrainIfUnset(dg);
}

function processOrderedColumnListData(rnd, jsonObject){
  var e, group1Column, group2Column, hasCategory, hasGroup1, hasGroup2, hasItem, hasPoPIndex, hasPoPPeriod, hasSeries, hasValue, i, itemColumn, mappings, popIndexColumn, popPeriodColumn, seriesColumns, type_0, valueColumn;
  mappings = null;
  try {
    hasItem = false;
    hasSeries = false;
    hasValue = false;
    hasCategory = false;
    hasPoPPeriod = false;
    hasPoPIndex = false;
    hasGroup1 = false;
    hasGroup2 = false;
    itemColumn = 0;
    valueColumn = 0;
    popPeriodColumn = 0;
    popIndexColumn = 0;
    group1Column = -1;
    group2Column = -1;
    seriesColumns = new ArrayList;
    $containsKey_1(jsonObject.myHashMap, 'mappings') && (mappings = $getJSONArray_0(jsonObject, 'mappings'));
    if (!!mappings && $length(mappings) > 0) {
      for (i = 0; i < $length(mappings); i++) {
        type_0 = toString_24($get(mappings, i));
        if ($equals_2('SERIES', type_0)) {
          hasSeries = true;
          $add_1(seriesColumns, valueOf(i));
        }
         else if ($equals_2('ITEM', type_0)) {
          hasItem = true;
          itemColumn = i;
        }
         else if ($equals_2('VALUE', type_0)) {
          hasValue = true;
          valueColumn = i;
        }
         else if ($equals_2('CATEGORY', type_0)) {
          hasCategory = true;
        }
         else if ($equals_2('POP_PERIOD', type_0)) {
          hasPoPPeriod = true;
          popPeriodColumn = i;
        }
         else if ($equals_2('POP_INDEX', type_0)) {
          hasPoPIndex = true;
          popIndexColumn = i;
        }
         else if ($equals_2('GROUP1', type_0)) {
          hasGroup1 = true;
          group1Column = i;
        }
         else if ($equals_2('GROUP2', type_0)) {
          hasGroup2 = true;
          group2Column = i;
        }
         else if ($equals_2('XTIME', type_0) || $equals_2('BUBBLESIZE', type_0))
          return getOrderedColumnListData(rnd, jsonObject);
        else if ($equals_2('LATITUDE', type_0))
          return getOrderedColumnListData(rnd, jsonObject);
      }
    }
    if (hasItem && hasSeries && hasValue && (hasGroup1 || hasGroup2))
      return getMultiGroupItemValueData(rnd, jsonObject, (checkCriticalElementIndex(0, seriesColumns.array.length) , castTo(seriesColumns.array[0], 29)).value_0, itemColumn, valueColumn, group1Column, group2Column);
    else if (hasItem && hasSeries && hasValue)
      return getGroupItemValueData(rnd, jsonObject, (checkCriticalElementIndex(0, seriesColumns.array.length) , castTo(seriesColumns.array[0], 29)).value_0, itemColumn, valueColumn);
    else if (hasItem && hasValue && !hasCategory) {
      return hasPoPPeriod && hasPoPIndex?getPeriodOverPeriodData(rnd, jsonObject, itemColumn, valueColumn, popPeriodColumn, popIndexColumn):getItemValueData(rnd, jsonObject, 'ordered-column-list', itemColumn, valueColumn, group1Column, group2Column);
    }
     else if (hasItem && hasSeries)
      return getLegacyData(rnd, jsonObject, itemColumn, seriesColumns);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      e = $e0;
      !!rnd && $log_0(rnd, getExceptionStackTrace(e));
    }
     else 
      throw toJs($e0);
  }
  return getOrderedColumnListData(rnd, jsonObject);
}

function processVersion(chartDef, version){
  var decimalIndex;
  decimalIndex = $indexOf(version, fromCodePoint(46));
  if (decimalIndex > -1) {
    chartDef.showPoweredBy = true;
    version = version.substr(0, decimalIndex);
  }
  chartDef.version_0 = getInt(version, 0);
}

function removeDuplicateRows(dataGrid){
  var newGrid, newRows, row, row$iterator, rowInfo, rowMap, rowName, rows_0;
  rows_0 = dataGrid.rows_0;
  newRows = new ArrayList;
  rowMap = new HashMap;
  for (row$iterator = rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    rowName = row.name_0;
    rowInfo = castTo(rowName == null?getEntryValueOrNull($getEntry(rowMap.hashCodeMap, null)):$get_3(rowMap.stringMap, rowName), 7);
    if (!rowInfo) {
      newRows.array[newRows.array.length] = row;
      rowName == null?$put_1(rowMap.hashCodeMap, null, row):$put_2(rowMap.stringMap, rowName, row);
    }
     else {
      $freeCellMap(row.cellMap);
      row.cellMap = null;
    }
  }
  newGrid = new DataGrid_0(dataGrid.name_0, dataGrid.originalDataType, newRows, dataGrid.cols_0, null);
  $setDateGrain(newGrid, dataGrid.dateGrain);
  $reset_5(rowMap);
  dataGrid.rows_0 = null;
  dataGrid.cols_0 = null;
  dataGrid.metadata = null;
  return newGrid;
}

function removeNonExistentColumnNamesFromColumnFormats(chartDef, graph){
  var compDef, compName, compName$iterator, entry, outerIter;
  if (chartDef.componentDefMap) {
    for (compName$iterator = (outerIter = (new AbstractMap$1(chartDef.componentDefMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); compName$iterator.val$outerIter2.hasNext_0();) {
      compName = (entry = castTo(compName$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      compDef = castTo($get_4(chartDef.componentDefMap, compName), 137);
      !!compDef && !!compDef.columnFormats && compDef.datasource != null && !!chartDef.datasourceMap && $size(chartDef.datasourceMap) > 0 && removeStrayColumnsFromColumnFormats(compDef.columnFormats, castTo($getStringValue(chartDef.datasourceMap, compDef.datasource), 61));
      !!compDef && !!compDef.columnFormats && compDef.datasource == null && !!graph && removeStrayColumnsFromColumnFormats(compDef.columnFormats, graph.data_0);
    }
  }
}

function removeStrayColumnsFromColumnFormats(columnFormats, dataGrid){
  var columnsToRemove, key, key$iterator, key$iterator0;
  if (!!columnFormats && columnFormats.size_1() > 0) {
    columnsToRemove = new ArrayList;
    for (key$iterator0 = columnFormats.keySet_0().iterator(); key$iterator0.hasNext_0();) {
      key = castToString(key$iterator0.next_1());
      isColumnNameInDataSet(key, dataGrid) || (columnsToRemove.array[columnsToRemove.array.length] = key , true);
    }
    if (columnsToRemove.array.length > 0) {
      for (key$iterator = new ArrayList$1(columnsToRemove); key$iterator.i < key$iterator.this$01.array.length;) {
        key = castToString($next_3(key$iterator));
        columnFormats.remove_0(key);
      }
    }
  }
}

function rowIsEmpty(row, cols_0){
  var i;
  try {
    for (i = 0; i < $length(cols_0); i++) {
      if (toString_24($get(row, i)) != null && toString_24($get(row, i)).length > 0)
        return false;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      return false;
    }
     else 
      throw toJs($e0);
  }
  return true;
}

function setDataGridDateGrainIfUnset(dg){
  var rowInfo;
  if (!!dg && dg.dateGrain == null) {
    rowInfo = $getRow(dg, 0);
    if (!!rowInfo && neq(rowInfo.timeMS, 0)) {
      if (rowInfo.parentName != null) {
        $equals_2(rowInfo.parentName, 'CalendarWeek') && (dg.dateGrain = 'WEEK');
        $equals_2(rowInfo.parentName, 'CalendarMonth') && (dg.dateGrain = 'MONTH');
        $equals_2(rowInfo.parentName, 'CalendarQuarter') && (dg.dateGrain = 'QUARTER');
        $equals_2(rowInfo.parentName, 'Year') && (dg.dateGrain = 'YEAR');
      }
    }
  }
}

function setPeriodNames(rnd, dg, dsJsonObject){
  var e, i, i0, periodAlias, periodAliases, periodName, periodNames, periods;
  if ($containsKey_1(dsJsonObject.myHashMap, 'periodNames')) {
    periods = null;
    try {
      periods = $getJSONArray_0(dsJsonObject, 'periodNames');
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 35)) {
        e = $e0;
        !!rnd && $log_0(rnd, getExceptionStackTrace(e));
      }
       else 
        throw toJs($e0);
    }
    if (!periods)
      return;
    periodNames = new ArrayList_0($length(periods));
    for (i0 = 0; i0 < $length(periods); i0++) {
      try {
        periodName = toString_24($get(periods, i0));
        periodNames.array[periodNames.array.length] = periodName;
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (instanceOf($e1, 35)) {
          e = $e1;
          !!rnd && $log_0(rnd, getExceptionStackTrace(e));
        }
         else 
          throw toJs($e1);
      }
    }
    periodAliases = null;
    if ($containsKey_1(dsJsonObject.myHashMap, 'periodAliases')) {
      try {
        periods = $getJSONArray_0(dsJsonObject, 'periodAliases');
      }
       catch ($e2) {
        $e2 = toJava($e2);
        if (instanceOf($e2, 35)) {
          e = $e2;
          !!rnd && $log_0(rnd, getExceptionStackTrace(e));
        }
         else 
          throw toJs($e2);
      }
      if (periods) {
        periodAliases = new ArrayList_0($length(periods));
        for (i = 0; i < $length(periods); i++) {
          try {
            periodAlias = toString_24($get(periods, i));
            periodAliases.array[periodAliases.array.length] = periodAlias;
          }
           catch ($e3) {
            $e3 = toJava($e3);
            if (instanceOf($e3, 35)) {
              e = $e3;
              !!rnd && $log_0(rnd, getExceptionStackTrace(e));
            }
             else 
              throw toJs($e3);
          }
        }
      }
    }
    $setPeriodNames(dg, periodNames, periodAliases);
  }
}

function setProjectedValOnLastPoint(projectedValue, colIndex, graph, projectedIsActual){
  var cell, cell$iterator, col, data_0, entry, lastCell, newCell, newCellCol, newCellRow, outerIter, projRowIndex;
  data_0 = graph.data_0;
  if (graph.graphType == 12) {
    lastCell = null;
    col = $getColumn(data_0, colIndex);
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      !!$getMetaDataCell(cell, 0) && (lastCell = cell);
    }
    !!lastCell && $setProjectedValue($getMetaDataCell(lastCell, 0), projectedValue);
  }
   else {
    projRowIndex = $getNumRows(data_0) - 1;
    data_0.numProjectedRows > 0 && (projRowIndex -= data_0.numProjectedRows);
    cell = $getCell(data_0, projRowIndex, colIndex);
    if (!!cell && !cell.row.hidden) {
      isNaN_0($getValue(cell)) && (cell.value_0 = 0);
      cell.projectedValue = projectedValue;
      cell.projectedIsActual = projectedIsActual;
      if (!!cell.row && (!isNaN_0(cell.row.sumWithProjections) || !isNaN_0(cell.row.primarySum))) {
        cell.row.sumWithProjections = NaN;
        cell.row.primarySum = NaN;
        cell.row.secondarySum = NaN;
      }
    }
     else if (!cell && !!$getRow(data_0, projRowIndex) && !$getRow(data_0, projRowIndex).hidden) {
      newCellRow = $getRow(data_0, projRowIndex);
      newCellCol = $getColumn(data_0, colIndex);
      newCell = new Cell(0);
      newCell.projectedValue = projectedValue;
      newCell.projectedIsActual = projectedIsActual;
      newCell.row = newCellRow;
      newCell.column = newCellCol;
      $put_0(newCellCol.cellMap, valueOf(projRowIndex), newCell);
      $put_0(newCellRow.cellMap, valueOf(colIndex), newCell);
      if (!!newCell.row && (!isNaN_0(newCell.row.sumWithProjections) || !isNaN_0(newCell.row.primarySum))) {
        newCell.row.sumWithProjections = NaN;
        newCell.row.primarySum = NaN;
        newCell.row.secondarySum = NaN;
      }
    }
  }
}

function setProjectedValueOnCell(rowList, colName, rowName, projValue){
  var cell, cell$iterator, entry, outerIter, rowCellMap;
  if ($equals_2(rowName, castTo(rowList.get_1(rowList.size_1() - 1), 7).name_0)) {
    rowCellMap = castTo(rowList.get_1(rowList.size_1() - 1), 7).cellMap;
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowCellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (!!cell && !!cell.column && cell.column.name_0 != null && $equals_2(cell.column.name_0, colName)) {
        cell.projectedValue = projValue;
        break;
      }
    }
  }
   else if ($equals_2(rowName, castTo(rowList.get_1(0), 7).name_0)) {
    rowCellMap = castTo(rowList.get_1(rowList.size_1() - 1), 7).cellMap;
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowCellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (!!cell && !!cell.column && cell.column.name_0 != null && $equals_2(cell.column.name_0, colName)) {
        cell.projectedValue = projValue;
        break;
      }
    }
  }
}

function sortColumnsUsingList(dataGrid, cols_0){
  var dataCol, dataCol$iterator, dataCols, grid, newCol, newCols, parentName, sortCol, sortCol$iterator, sortOrder, type_0;
  grid = dataGrid;
  newCols = new ArrayList;
  dataCols = dataGrid.cols_0;
  if (dataCols.size_1() > 0) {
    parentName = castTo(dataCols.get_1(0), 7).parentName;
    type_0 = castTo(dataCols.get_1(0), 7).type_0;
    sortOrder = 0;
    for (sortCol$iterator = cols_0.iterator(); sortCol$iterator.hasNext_0();) {
      sortCol = castTo(sortCol$iterator.next_1(), 7);
      dataCol = $getColumnByName(dataGrid, sortCol.name_0);
      if (dataCol) {
        dataCol.origIndex = sortOrder++;
        newCols.array[newCols.array.length] = dataCol;
        dataCols.remove(dataCol);
      }
       else {
        newCol = new ColRowInfo_4(parentName, sortCol.name_0, type_0, 1);
        newCol.origIndex = sortOrder++;
        newCols.array[newCols.array.length] = newCol;
      }
    }
    for (dataCol$iterator = dataCols.iterator(); dataCol$iterator.hasNext_0();) {
      dataCol = castTo(dataCol$iterator.next_1(), 7);
      dataCol.origIndex = sortOrder++;
      newCols.array[newCols.array.length] = dataCol;
    }
    grid = new DataGrid_0(dataGrid.name_0, dataGrid.originalDataType, dataGrid.rows_0, newCols, dataGrid.metadata);
    $setValueColumnName(grid, dataGrid.valueColumnName);
    $setAltValueColumnName(grid, $getAltValueColumnName(dataGrid));
    $setDateGrain(grid, dataGrid.dateGrain);
    $setDateJoinColumn(grid, dataGrid.dateJoinColumn);
    $setIsFiscalCalendar(grid, dataGrid.isFiscalCalendar);
    updateColIndexsForAllRows(grid);
    dataGrid.rows_0 = null;
    dataGrid.cols_0 = null;
    dataGrid.metadata = null;
  }
  return grid;
}

function sortRowsUsingList(dataGrid, rows_0){
  var dataRow, dataRow$iterator, dataRows, grid, newRow, newRows, parentName, sortOrder, sortRow, sortRow$iterator, type_0;
  grid = dataGrid;
  newRows = new ArrayList;
  dataRows = dataGrid.rows_0;
  if (dataRows.size_1() > 0) {
    parentName = castTo(dataRows.get_1(0), 7).parentName;
    type_0 = castTo(dataRows.get_1(0), 7).type_0;
    sortOrder = 0;
    for (sortRow$iterator = rows_0.iterator(); sortRow$iterator.hasNext_0();) {
      sortRow = castTo(sortRow$iterator.next_1(), 7);
      dataRow = $getRowByName(dataGrid, sortRow.name_0);
      if (dataRow) {
        dataRow.origIndex = sortOrder++;
        newRows.array[newRows.array.length] = dataRow;
        dataRows.remove(dataRow);
      }
       else {
        newRow = new ColRowInfo_4(parentName, sortRow.name_0, type_0, 1);
        newRow.origIndex = sortOrder++;
        newRows.array[newRows.array.length] = newRow;
      }
    }
    for (dataRow$iterator = dataRows.iterator(); dataRow$iterator.hasNext_0();) {
      dataRow = castTo(dataRow$iterator.next_1(), 7);
      dataRow.origIndex = sortOrder++;
      newRows.array[newRows.array.length] = dataRow;
    }
    grid = new DataGrid_0(dataGrid.name_0, dataGrid.originalDataType, newRows, dataGrid.cols_0, dataGrid.metadata);
    $setValueColumnName(grid, dataGrid.valueColumnName);
    $setAltValueColumnName(grid, $getAltValueColumnName(dataGrid));
    $setDateGrain(grid, dataGrid.dateGrain);
    $setDateJoinColumn(grid, dataGrid.dateJoinColumn);
    $setIsFiscalCalendar(grid, dataGrid.isFiscalCalendar);
    updateRowIndexsForAllColumns(grid);
    dataGrid.rows_0 = null;
    dataGrid.cols_0 = null;
    dataGrid.metadata = null;
  }
  return grid;
}

function typeIsNumericValue(type_0){
  if (type_0 != null) {
    if ($equals_2(type_0, 'DOUBLE') || $equals_2(type_0, 'LONG') || $equals_2(type_0, 'DECIMAL') || $equals_2(type_0, 'INTEGER'))
      return true;
  }
  return false;
}

function updateColIndexsForAllRows(dataGrid){
  var row, row$iterator;
  for (row$iterator = dataGrid.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    $updateColIndexsForAllCells(row);
  }
}

function updateRowIndexsForAllColumns(dataGrid){
  var col, col$iterator;
  for (col$iterator = dataGrid.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    $updateRowIndexsForAllCells(col);
  }
}

function $compare_10(o1, o2){
  if (o1.x_0 > o2.x_0)
    return 1;
  else if (o1.x_0 == o2.x_0)
    return 0;
  return -1;
}

function DataUtils$1(){
}

defineClass(294, 1, {}, DataUtils$1);
_.compare = function compare_11(o1, o2){
  return $compare_10(castTo(o1, 10), castTo(o2, 10));
}
;
_.equals_0 = function equals_12(other){
  return this === other;
}
;
var Lcom_domo_charting_data_DataUtils$1_2_classLit = createForClass('com.domo.charting.data', 'DataUtils/1', 294);
function $$init_6(this$static){
  this$static.values = new ArrayList;
}

function $addValue(this$static, value_0){
  !this$static.values && (this$static.values = new ArrayList);
  $add_1(this$static.values, value_0);
}

function $setDataJoinColumn(this$static, dateJoinColumn){
  this$static.dateJoinColumn = dateJoinColumn;
}

function $setDataSourceId_0(this$static, dataSourceId){
  this$static.dataSourceId = dataSourceId;
}

function $setFiscal(this$static, value_0){
  this$static.fiscal = value_0;
}

function FilterBase(col, op, colRowInfo){
  var name_0;
  $$init_6(this);
  this.column = col;
  this.operand = op;
  if (colRowInfo) {
    this.dataSourceId = $getDataSourceId(colRowInfo);
    this.columnType = colRowInfo.type_0;
    this.dataType = $getDataType(colRowInfo);
    this.cardURN = $getCardURN(colRowInfo);
    this.dateGrainFilter = $isCalendarColumn(colRowInfo);
    this.filterType = $getFilterType(colRowInfo);
    this.label_0 = $getColumnLabel(colRowInfo);
    name_0 = $getColumnName(colRowInfo);
    name_0 != null && (this.column = name_0);
  }
}

defineClass(55, 1, {55:1}, FilterBase);
_.equals_0 = function equals_13(o){
  var filter;
  if (this === o)
    return true;
  if (o == null || this.___clazz != getClass__Ljava_lang_Class___devirtual$(o))
    return false;
  filter = castTo(o, 55);
  return equals_41(this.column, filter.column) && equals_41(this.values, filter.values) && equals_41(this.operand, filter.operand) && equals_41(this.dateJoinColumn, filter.dateJoinColumn) && equals_41(this.filterType, filter.filterType) && equals_41(($clinit_Boolean() , this.fiscal?true:false), filter.fiscal?true:false) && equals_41(this.label_0, filter.label_0) && equals_41(this.dataType, filter.dataType) && equals_41(this.cardURN, filter.cardURN) && equals_41(($clinit_Boolean() , this.dateGrainFilter?true:false), filter.dateGrainFilter?true:false) && equals_41(this.dataSourceId, filter.dataSourceId);
}
;
_.hashCode_0 = function hashCode_1(){
  return hashCode_12(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_9, 1, 5, [this.column, this.values, this.operand, this.dataSourceId, this.dateJoinColumn, this.filterType, ($clinit_Boolean() , this.fiscal?(null , true):(null , false)), this.label_0, this.dataType, this.dateGrainFilter?(null , true):(null , false), this.cardURN]));
}
;
_.dateGrainFilter = false;
_.fiscal = false;
var Lcom_domo_charting_data_FilterBase_2_classLit = createForClass('com.domo.charting.data', 'FilterBase', 55);
function $ensureConvertedToDoubles(this$static){
  var doubleValue, value_0, value$iterator;
  if (this$static.convertedToDoubles)
    return;
  this$static.doubleValues = new ArrayList;
  if (!!this$static.values && this$static.values.array.length > 0) {
    for (value$iterator = new ArrayList$1(this$static.values); value$iterator.i < value$iterator.this$01.array.length;) {
      value_0 = castToString($next_3(value$iterator));
      doubleValue = getDouble_0(value_0, NaN);
      isNaN_0((checkCriticalNotNull(doubleValue) , doubleValue))?$add_1(this$static.doubleValues, null):$add_1(this$static.doubleValues, doubleValue);
    }
  }
  this$static.convertedToDoubles = true;
}

function $ensureConvertedToTimes(this$static){
  var timeValue, value_0, value$iterator;
  if (this$static.convertedToTimes)
    return;
  this$static.timeValues = new ArrayList;
  if (!!this$static.values && this$static.values.array.length > 0) {
    for (value$iterator = new ArrayList$1(this$static.values); value$iterator.i < value$iterator.this$01.array.length;) {
      value_0 = castToString($next_3(value$iterator));
      timeValue = getTimeMSForDateString(value_0, null, null, null);
      $add_1(this$static.timeValues, timeValue);
    }
  }
  this$static.convertedToTimes = true;
}

function $getAsLegendName(this$static, altColumnName, numberFormatter){
  var temp, val1, val2, value1, value2;
  if (this$static.values.array.length == 0)
    return altColumnName;
  $ensureConvertedToDoubles(this$static);
  val1 = null;
  val2 = null;
  value2 = '';
  !!this$static.doubleValues && this$static.doubleValues.array.length > 0 && (val1 = castToDouble($get_2(this$static.doubleValues, 0)));
  !!this$static.doubleValues && this$static.doubleValues.array.length > 1 && (val2 = castToDouble($get_2(this$static.doubleValues, 1)));
  this$static.values.array.length > 1 && (value2 = castToString($get_2(this$static.values, 1)));
  val1 != null?(value1 = $formatNumber_1(numberFormatter, (checkCriticalNotNull(val1) , val1))):(value1 = castToString($get_2(this$static.values, 0)));
  val2 != null?(value2 = $formatNumber_1(numberFormatter, (checkCriticalNotNull(val2) , val2))):this$static.values.array.length > 1 && (value2 = castToString($get_2(this$static.values, 1)));
  switch (this$static.operand) {
    case 'greater_than':
      return altColumnName + ' > ' + value1;
    case 'great_than_equals_to':
      return altColumnName + ' >= ' + value1;
    case 'less_than':
      return altColumnName + ' < ' + value1;
    case 'less_than_equals_to':
      return altColumnName + ' <= ' + value1;
    case 'equals':
      return altColumnName + ' = ' + value1;
    case 'not_equals':
      return altColumnName + ' \u2260 ' + value1;
    case 'between':
      if (val1 != null && val2 != null) {
        if ((checkCriticalNotNull(val2) , val2) < (checkCriticalNotNull(val1) , val1)) {
          temp = value1;
          value1 = value2;
          value2 = temp;
        }
      }

      return value1 + ' <= ' + altColumnName + ' <= ' + value2;
    case 'in':
      return $getSetNotationForValues(this$static, true, altColumnName, numberFormatter);
    case 'not_in':
      return $getSetNotationForValues(this$static, false, altColumnName, numberFormatter);
  }
  return altColumnName;
}

function $getSetNotationForValues(this$static, equals, altColumnName, numberFormatter){
  var i, sb;
  sb = new StringBuilder_1(altColumnName);
  equals?(sb.string += ' = {' , sb):(sb.string += ' \u2260 {' , sb);
  if (!!this$static.doubleValues && this$static.doubleValues.array.length > 0) {
    for (i = 0; i < this$static.doubleValues.array.length; i++) {
      if (i == 3 && this$static.doubleValues.array.length > 4) {
        sb.string += ' ..';
        break;
      }
      if ($get_2(this$static.doubleValues, i) != null) {
        $append_3(sb, $formatNumber_1(numberFormatter, checkNotNull(castToDouble($get_2(this$static.doubleValues, i)))));
        i < this$static.doubleValues.array.length - 1 && (sb.string += ', ' , sb);
      }
    }
  }
   else {
    for (i = 0; i < this$static.values.array.length; i++) {
      if (i == 3 && this$static.values.array.length > 4) {
        sb.string += ' ..';
        break;
      }
      $append_3(sb, castToString($get_2(this$static.values, i)));
      i < this$static.values.array.length - 1 && (sb.string += ', ' , sb);
    }
  }
  sb.string += '}';
  return sb.string;
}

function $isMatchForAltName(this$static, altName){
  var matchValue, matchValue$iterator, matchValue$iterator0, value0;
  if ($equals_2(this$static.column, altName)) {
    if (!this$static.values || this$static.values.array.length == 0)
      return true;
    $ensureConvertedToTimes(this$static);
    value0 = castToString($get_2(this$static.values, 0));
    if (value0 != null) {
      switch (this$static.operand) {
        case 'equals':
          if ($equals_2(value0, altName))
            return true;
          break;
        case 'not_equals':
          if (!$equals_2(value0, altName))
            return true;
          break;
        case 'in':
          for (matchValue$iterator0 = new ArrayList$1(this$static.values); matchValue$iterator0.i < matchValue$iterator0.this$01.array.length;) {
            matchValue = castToString($next_3(matchValue$iterator0));
            if ($equals_2(matchValue, altName))
              return true;
          }

          return false;
        case 'not_in':
          for (matchValue$iterator = new ArrayList$1(this$static.values); matchValue$iterator.i < matchValue$iterator.this$01.array.length;) {
            matchValue = castToString($next_3(matchValue$iterator));
            if ($equals_2(matchValue, altName))
              return false;
          }

          return true;
      }
    }
  }
  return false;
}

function $isMatchForDouble(this$static, columnName, origColumnName, value_0){
  var doubleValue, doubleValue$iterator, doubleValue$iterator0, high, low, temp;
  if ($equals_2(this$static.column, columnName) || origColumnName != null && $equals_2(this$static.column, origColumnName)) {
    if (this$static.values.array.length == 0)
      return true;
    $ensureConvertedToDoubles(this$static);
    if (this$static.doubleValues.array.length > 0 && $get_2(this$static.doubleValues, 0) != null) {
      switch (this$static.operand) {
        case 'greater_than':
          if ($get_2(this$static.doubleValues, 0) != null && (checkCriticalNotNull(value_0) , value_0) > checkNotNull(castToDouble($get_2(this$static.doubleValues, 0))))
            return true;
          break;
        case 'great_than_equals_to':
          if ((checkCriticalNotNull(value_0) , value_0) >= checkNotNull(castToDouble($get_2(this$static.doubleValues, 0))))
            return true;
          break;
        case 'less_than':
          if ((checkCriticalNotNull(value_0) , value_0) < checkNotNull(castToDouble($get_2(this$static.doubleValues, 0))))
            return true;
          break;
        case 'less_than_equals_to':
          if ((checkCriticalNotNull(value_0) , value_0) <= checkNotNull(castToDouble($get_2(this$static.doubleValues, 0))))
            return true;
          break;
        case 'equals':
          if (doublesEqualWithinTolerance((checkCriticalNotNull(value_0) , value_0), checkNotNull(castToDouble($get_2(this$static.doubleValues, 0)))))
            return true;
          break;
        case 'not_equals':
          if (!doublesEqualWithinTolerance((checkCriticalNotNull(value_0) , value_0), checkNotNull(castToDouble($get_2(this$static.doubleValues, 0)))))
            return true;
          break;
        case 'between':
          if (this$static.doubleValues.array.length > 1) {
            low = checkNotNull(castToDouble($get_2(this$static.doubleValues, 0)));
            high = checkNotNull(castToDouble($get_2(this$static.doubleValues, 1)));
            if (high < low) {
              temp = high;
              high = low;
              low = temp;
            }
            if ((checkCriticalNotNull(value_0) , value_0) >= low && (checkCriticalNotNull(value_0) , value_0) <= high)
              return true;
          }

          break;
        case 'in':
          for (doubleValue$iterator0 = new ArrayList$1(this$static.doubleValues); doubleValue$iterator0.i < doubleValue$iterator0.this$01.array.length;) {
            doubleValue = castToDouble($next_3(doubleValue$iterator0));
            if (doublesEqualWithinTolerance((checkCriticalNotNull(value_0) , value_0), (checkCriticalNotNull(doubleValue) , doubleValue)))
              return true;
          }

          return false;
        case 'not_in':
          for (doubleValue$iterator = new ArrayList$1(this$static.doubleValues); doubleValue$iterator.i < doubleValue$iterator.this$01.array.length;) {
            doubleValue = castToDouble($next_3(doubleValue$iterator));
            if (doublesEqualWithinTolerance((checkCriticalNotNull(value_0) , value_0), (checkCriticalNotNull(doubleValue) , doubleValue)))
              return false;
          }

          return true;
      }
    }
     else 
      return false;
  }
  return false;
}

function $isMatchForName(this$static, name_0, origName, columnName){
  var doubleValue, matchValue, matchValue$iterator, matchValue$iterator0, value0;
  if ($equals_2(this$static.column, columnName) || $equals_2(this$static.column, origName)) {
    if (!this$static.values || this$static.values.array.length == 0)
      return true;
    value0 = castToString($get_2(this$static.values, 0));
    if (value0 != null) {
      switch (this$static.operand) {
        case 'equals':
          if ($equals_2(value0, name_0) || origName != null && $equals_2(value0, origName))
            return true;
          break;
        case 'not_equals':
          if (!$equals_2(value0, name_0) && (origName == null || !$equals_2(value0, origName)))
            return true;
          break;
        case 'in':
          for (matchValue$iterator0 = new ArrayList$1(this$static.values); matchValue$iterator0.i < matchValue$iterator0.this$01.array.length;) {
            matchValue = castToString($next_3(matchValue$iterator0));
            if ($equals_2(matchValue, name_0) || origName != null && $equals_2(matchValue, origName))
              return true;
          }

          return false;
        case 'not_in':
          for (matchValue$iterator = new ArrayList$1(this$static.values); matchValue$iterator.i < matchValue$iterator.this$01.array.length;) {
            matchValue = castToString($next_3(matchValue$iterator));
            if ($equals_2(matchValue, name_0) || origName != null && $equals_2(matchValue, origName))
              return false;
          }

          return true;
      }
    }
    $ensureConvertedToDoubles(this$static);
    if (this$static.doubleValues.array.length > 0) {
      doubleValue = getDouble_0(name_0, NaN);
      if (!isNaN_0((checkCriticalNotNull(doubleValue) , doubleValue)) && $isMatchForDouble(this$static, columnName, null, doubleValue))
        return true;
    }
  }
   else if ($equals_2(this$static.column, name_0) && (!this$static.values || this$static.values.array.length == 0))
    return true;
  return false;
}

function $isMatchForNameRegardlessOfColumn(this$static, name_0){
  var matchValue, matchValue$iterator, matchValue$iterator0, value0;
  if (!this$static.values || this$static.values.array.length == 0)
    return false;
  value0 = castToString($get_2(this$static.values, 0));
  if (value0 != null) {
    switch (this$static.operand) {
      case 'equals':
        if ($equals_2(value0, name_0))
          return true;
        break;
      case 'not_equals':
        if (!$equals_2(value0, name_0))
          return true;
        break;
      case 'in':
        for (matchValue$iterator0 = new ArrayList$1(this$static.values); matchValue$iterator0.i < matchValue$iterator0.this$01.array.length;) {
          matchValue = castToString($next_3(matchValue$iterator0));
          if ($equals_2(matchValue, name_0))
            return true;
        }

        return false;
      case 'not_in':
        for (matchValue$iterator = new ArrayList$1(this$static.values); matchValue$iterator.i < matchValue$iterator.this$01.array.length;) {
          matchValue = castToString($next_3(matchValue$iterator));
          if ($equals_2(matchValue, name_0))
            return false;
        }

        return true;
    }
  }
  return false;
}

function $isMatchForTime(this$static, timeMS, columnName){
  var high, low, temp, timeValue, timeValue$iterator, timeValue$iterator0;
  if ($equals_2(this$static.column, columnName)) {
    if (!this$static.values || this$static.values.array.length == 0)
      return true;
    $ensureConvertedToTimes(this$static);
    if (this$static.timeValues.array.length > 0 && $get_2(this$static.timeValues, 0) != null) {
      switch (this$static.operand) {
        case 'greater_than':
          if (gt(timeMS, castTo($get_2(this$static.timeValues, 0), 78).value_0))
            return true;
          break;
        case 'great_than_equals_to':
          if (gte_0(timeMS, castTo($get_2(this$static.timeValues, 0), 78).value_0))
            return true;
          break;
        case 'less_than':
          if (lt(timeMS, castTo($get_2(this$static.timeValues, 0), 78).value_0))
            return true;
          break;
        case 'less_than_equals_to':
          if (lte(timeMS, castTo($get_2(this$static.timeValues, 0), 78).value_0))
            return true;
          break;
        case 'equals':
          if (eq(castTo($get_2(this$static.timeValues, 0), 78).value_0, timeMS))
            return true;
          break;
        case 'not_equals':
          if (neq(castTo($get_2(this$static.timeValues, 0), 78).value_0, timeMS))
            return true;
          break;
        case 'between':
          if (this$static.timeValues.array.length > 1) {
            low = castTo($get_2(this$static.timeValues, 0), 78).value_0;
            high = castTo($get_2(this$static.timeValues, 1), 78).value_0;
            if (compare_22(high, low) < 0) {
              temp = high;
              high = low;
              low = temp;
            }
            if (compare_22(timeMS, low) >= 0 && compare_22(timeMS, high) <= 0)
              return true;
          }

          break;
        case 'in':
          for (timeValue$iterator0 = new ArrayList$1(this$static.timeValues); timeValue$iterator0.i < timeValue$iterator0.this$01.array.length;) {
            timeValue = castTo($next_3(timeValue$iterator0), 78);
            if (eq(timeValue.value_0, timeMS))
              return true;
          }

          return false;
        case 'not_in':
          for (timeValue$iterator = new ArrayList$1(this$static.timeValues); timeValue$iterator.i < timeValue$iterator.this$01.array.length;) {
            timeValue = castTo($next_3(timeValue$iterator), 78);
            if (eq(timeValue.value_0, timeMS))
              return false;
          }

          return true;
      }
    }
  }
  return false;
}

function Filter(){
  $$init_6(this);
}

defineClass(148, 55, {148:1, 55:1}, Filter);
_.equals_0 = function equals_14(o){
  var filter;
  if (this === o)
    return true;
  if (o == null || Lcom_domo_charting_data_Filter_2_classLit != getClass__Ljava_lang_Class___devirtual$(o))
    return false;
  filter = castTo(o, 148);
  return equals_41(this.column, filter.column) && equals_41(this.values, filter.values) && equals_41(this.operand, filter.operand);
}
;
_.hashCode_0 = function hashCode_2(){
  return hashCode_12(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_9, 1, 5, [this.column, this.values, this.operand]));
}
;
_.convertedToDoubles = false;
_.convertedToTimes = false;
var Lcom_domo_charting_data_Filter_2_classLit = createForClass('com.domo.charting.data', 'Filter', 148);
function getNameID(properties){
  var entry, outerIter, outerIter0, outerIter1, outerIter2, outerIter3, outerIter4, prop, prop$iterator, prop$iterator0, prop$iterator1, prop$iterator2, prop$iterator3, prop$iterator4;
  if ((new AbstractMap$1(properties)).this$01.size_1() > 0) {
    for (prop$iterator0 = (outerIter0 = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter0)); prop$iterator0.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator0.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      if (prop.toLowerCase().indexOf('name') != -1)
        return prop;
    }
    for (prop$iterator1 = (outerIter1 = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter1)); prop$iterator1.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator1.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      if (prop.toLowerCase().indexOf('code') != -1)
        return prop;
    }
    for (prop$iterator2 = (outerIter2 = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter2)); prop$iterator2.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator2.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      if (prop.toLowerCase().indexOf('iso') != -1)
        return prop;
    }
    for (prop$iterator3 = (outerIter3 = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter3)); prop$iterator3.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator3.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      if (prop.toLowerCase().indexOf('county') != -1)
        return prop;
    }
    for (prop$iterator4 = (outerIter4 = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter4)); prop$iterator4.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator4.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      if (prop.toLowerCase().indexOf('state') != -1)
        return prop;
    }
    for (prop$iterator = (outerIter = (new AbstractMap$1(properties)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); prop$iterator.val$outerIter2.hasNext_0();) {
      prop = (entry = castTo(prop$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      return prop;
    }
  }
  return null;
}

function getPathFromCoords(coordAry){
  var coord, k, longitude, path;
  path = new CFPath;
  for (k = 0; k < $length(coordAry); k++) {
    coord = $getJSONArray(coordAry, k);
    if (!!coord && $length(coord) == 2) {
      longitude = $getDouble(coord, 0);
      longitude < 0 && (longitude += 360);
      k == 0?$add(path, new CFPathElement_0(0, longitude, -$getDouble(coord, 1))):$add(path, new CFPathElement_0(1, longitude, -$getDouble(coord, 1)));
    }
  }
  path.pathAry.size_1() > 1 && $add(path, new CFPathElement);
  return path;
}

function parse_0(chart, json){
  var bkgLayer, compGE, coordAry, coordAry2, coords, entry, feature, featureAry, geometry, i, j, k, mapArea, mapComp, name_0, nameId, obj, obj$iterator, outerIter, path, properties, propsObj, shape_0;
  try {
    mapArea = new MapArea(chart);
    featureAry = $getJSONArray_0(json, 'features');
    if (!!featureAry && $length(featureAry) > 0) {
      bkgLayer = new MapLayer_0('Background', 'Area', NaN);
      for (i = 0; i < $length(featureAry); i++) {
        feature = $getJSONObject(featureAry, i);
        if (!!feature && $containsKey_1(feature.myHashMap, 'type') && $equalsIgnoreCase(toString_24($get_0(feature, 'type')), 'Feature') && $containsKey_1(feature.myHashMap, 'geometry')) {
          geometry = $getJSONObject_0(feature, 'geometry');
          if (!!geometry && $containsKey_1(geometry.myHashMap, 'type') && ($equalsIgnoreCase(toString_24($get_0(geometry, 'type')), 'Polygon') || $equalsIgnoreCase(toString_24($get_0(geometry, 'type')), 'MultiPolygon')) && $containsKey_1(geometry.myHashMap, 'coordinates')) {
            properties = new HashMap;
            if ($containsKey_1(feature.myHashMap, 'properties')) {
              propsObj = $getJSONObject_0(feature, 'properties');
              for (obj$iterator = (outerIter = (new AbstractMap$1(propsObj.myHashMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); obj$iterator.val$outerIter2.hasNext_0();) {
                obj = (entry = castTo(obj$iterator.val$outerIter2.next_1(), 44) , entry.getKey());
                $putStringValue(properties, castToString(obj), toString_24($get_0(propsObj, castToString(obj))));
              }
            }
            coords = $getJSONArray_0(geometry, 'coordinates');
            nameId = getNameID(properties);
            if (!!coords && $length(coords) > 0 && properties.hashCodeMap.size_0 + properties.stringMap.size_0 > 0 && nameId != null && (nameId == null?getEntryValueOrNull($getEntry(properties.hashCodeMap, null)):$get_3(properties.stringMap, nameId)) != null) {
              name_0 = castToString(nameId == null?getEntryValueOrNull($getEntry(properties.hashCodeMap, null)):$get_3(properties.stringMap, nameId));
              mapComp = new MapComponent(chart, name_0, properties);
              compGE = new GraphicElement;
              mapComp.legendStr = name_0;
              $equalsIgnoreCase(toString_24($get_0(geometry, 'type')), 'MultiPolygon') && ($clinit_System() , out_0);
              for (j = 0; j < $length(coords); j++) {
                coordAry = $getJSONArray(coords, j);
                if (!!coordAry && $length(coordAry) > 0) {
                  if ($equalsIgnoreCase(toString_24($get_0(geometry, 'type')), 'MultiPolygon')) {
                    for (k = 0; k < $length(coordAry); k++) {
                      coordAry2 = $getJSONArray(coordAry, k);
                      if (!!coordAry2 && $length(coordAry2) > 0) {
                        path = getPathFromCoords(coordAry2);
                        shape_0 = new CFShape_0(path, null, new CFStroke_1('#FFFFFF', 1));
                        !compGE.shapeAry && (compGE.shapeAry = new ArrayList);
                        $add_1(compGE.shapeAry, shape_0);
                      }
                    }
                  }
                   else {
                    path = getPathFromCoords(coordAry);
                    shape_0 = new CFShape_0(path, null, new CFStroke_1('#FFFFFF', 1));
                    !compGE.shapeAry && (compGE.shapeAry = new ArrayList);
                    $add_1(compGE.shapeAry, shape_0);
                  }
                }
              }
              !!mapComp.clipPath && (compGE.clipPath = mapComp.clipPath);
              mapComp.geAry.add_0(compGE);
              mapComp.layer = bkgLayer;
              $addMapShape(bkgLayer, mapComp);
            }
          }
        }
      }
      !mapArea.layers && (mapArea.layers = new ArrayList);
      $add_1(mapArea.layers, bkgLayer);
    }
    $moveAndScaleToRect(mapArea, new CFRect(0, 0, 730, 570));
    return mapArea;
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 35)) {
      return null;
    }
     else 
      throw toJs($e0);
  }
}

function MinMax(min_0, max_0){
  this.min_0 = min_0;
  this.max_0 = max_0;
}

function MinMax_0(min_0, max_0, values){
  this.min_0 = min_0;
  this.max_0 = max_0;
  this.valueList = values;
}

defineClass(48, 1, {48:1}, MinMax, MinMax_0);
_.max_0 = 0;
_.min_0 = 0;
var Lcom_domo_charting_data_MinMax_2_classLit = createForClass('com.domo.charting.data', 'MinMax', 48);
function MinMaxTime(){
}

function MinMaxTime_0(min_0, max_0){
  this.minTimeMS = min_0;
  this.maxTimeMS = max_0;
}

defineClass(81, 1, {81:1}, MinMaxTime, MinMaxTime_0);
_.hasMonthDaysThatAreDifferent = false;
_.hasSubHourTime = false;
_.maxTimeMS = 0;
_.minTimeMS = 0;
var Lcom_domo_charting_data_MinMaxTime_2_classLit = createForClass('com.domo.charting.data', 'MinMaxTime', 81);
function $$init_7(this$static){
}

function $setColor(this$static, color_0){
  color_0?(this$static.color_0 = new CFColor_0(color_0.red, color_0.green, color_0.blue, color_0.alpha_0)):(this$static.color_0 = null);
}

function $setMax(this$static, max_0){
  this$static.max_0 = max_0;
}

function $setMin(this$static, min_0){
  this$static.min_0 = min_0;
}

function $setText_0(this$static, text_0){
  this$static.text_0 = text_0;
}

function Range_0(){
  $$init_7(this);
}

function Range_1(min_0, max_0){
  $$init_7(this);
  this.min_0 = min_0;
  this.max_0 = max_0;
}

function getSortedAndCompletedRanges(rangeMap, manualRanges, maxValue){
  var i, ranges, rng;
  ranges = new ArrayList;
  if (rangeMap) {
    for (i = 1; i <= 9; i++) {
      rng = castTo($get_1(rangeMap, valueOf(i)), 58);
      !!rng && (!manualRanges || !isNaN_0(rng.max_0) || !isNaN_0(rng.min_0)) && (ranges.array[ranges.array.length] = rng , true);
    }
  }
  if (manualRanges && ranges.array.length > 0) {
    $sort(ranges, new Range$1);
    for (i = 0; i < ranges.array.length; i++) {
      isNaN_0((checkCriticalElementIndex(i, ranges.array.length) , castTo(ranges.array[i], 58)).max_0) && i < ranges.array.length - 1 && !isNaN_0((checkCriticalElementIndex(i + 1, ranges.array.length) , castTo(ranges.array[i + 1], 58)).min_0) && ((checkCriticalElementIndex(i, ranges.array.length) , castTo(ranges.array[i], 58)).max_0 = (checkCriticalElementIndex(i + 1, ranges.array.length) , castTo(ranges.array[i + 1], 58)).min_0);
    }
    isNaN_0(castTo($get_2(ranges, ranges.array.length - 1), 58).max_0) && !isNaN(maxValue) && (castTo($get_2(ranges, ranges.array.length - 1), 58).max_0 = maxValue);
  }
  ranges.array.length == 0 && $add_1(ranges, new Range_1(0, 0));
  return ranges;
}

defineClass(58, 1, {58:1}, Range_0, Range_1);
_.max_0 = NaN;
_.min_0 = NaN;
var Lcom_domo_charting_data_Range_2_classLit = createForClass('com.domo.charting.data', 'Range', 58);
function $compare_11(o1, o2){
  var o1Val, o2Val;
  o1Val = NaN;
  o2Val = NaN;
  if (!isNaN_0(o1.min_0) && !isNaN_0(o2.min_0)) {
    o1Val = o1.min_0;
    o2Val = o2.min_0;
  }
   else if (!isNaN_0(o1.max_0) && !isNaN_0(o2.max_0)) {
    o1Val = o1.max_0;
    o2Val = o2.max_0;
  }
  return $compareTo_1(o1Val, o2Val);
}

function Range$1(){
}

defineClass(342, 1, {}, Range$1);
_.compare = function compare_12(o1, o2){
  return $compare_11(castTo(o1, 58), castTo(o2, 58));
}
;
_.equals_0 = function equals_15(other){
  return this === other;
}
;
var Lcom_domo_charting_data_Range$1_2_classLit = createForClass('com.domo.charting.data', 'Range/1', 342);
function $getLegendText(this$static, numberFormatter){
  if (!isNaN_0(this$static.min_0) && !isNaN_0(this$static.max_0)) {
    return this$static.min_0 == this$static.max_0?$formatNumber_1(numberFormatter, this$static.min_0):$formatNumber_1(numberFormatter, this$static.min_0) + ' - ' + $formatNumber_1(numberFormatter, this$static.max_0);
  }
  return '';
}

function $setBubbleSize(this$static, bubbleSize){
  this$static.bubbleSize = bubbleSize;
}

function RangeLatLong(min_0, max_0){
  Range_1.call(this, min_0, max_0);
}

defineClass(134, 58, {58:1, 134:1}, RangeLatLong);
_.bubbleSize = 0;
var Lcom_domo_charting_data_RangeLatLong_2_classLit = createForClass('com.domo.charting.data', 'RangeLatLong', 134);
function SumoProperties(dataGrid){
  var colRowInfo, colRowInfo$iterator, mapping;
  if (!!dataGrid && $getNumCols(dataGrid) > 0) {
    this.pivotRows = new ArrayList;
    this.pivotColumns = new ArrayList;
    this.pivotValues = new ArrayList;
    for (colRowInfo$iterator = dataGrid.cols_0.iterator(); colRowInfo$iterator.hasNext_0();) {
      colRowInfo = castTo(colRowInfo$iterator.next_1(), 7);
      mapping = colRowInfo.mapping;
      mapping != null && (mapping = mapping.toLowerCase());
      $equals_2('row', mapping)?$add_1(this.pivotRows, colRowInfo.name_0):$equals_2('column', mapping)?$add_1(this.pivotColumns, colRowInfo.name_0):$equals_2('value', mapping) && $add_1(this.pivotValues, colRowInfo.name_0);
    }
  }
}

defineClass(359, 1, {}, SumoProperties);
var Lcom_domo_charting_data_SumoProperties_2_classLit = createForClass('com.domo.charting.data', 'SumoProperties', 359);
function UniqueValInfo(value_0, count){
  this.value_0 = value_0;
  this.count = count;
}

defineClass(131, 1, {131:1}, UniqueValInfo);
_.count = 0;
_.value_0 = 0;
var Lcom_domo_charting_data_UniqueValInfo_2_classLit = createForClass('com.domo.charting.data', 'UniqueValInfo', 131);
function AnnotationItemInfo(left, width_0, height, textInfo, annotation){
  this.left_0 = left;
  this.width_0 = width_0;
  this.height_0 = height;
  this.textInfo = textInfo;
  this.annotation = annotation;
}

defineClass(124, 1, {124:1}, AnnotationItemInfo);
_.height_0 = 0;
_.left_0 = 0;
_.width_0 = 0;
var Lcom_domo_charting_graphs_AnnotationItemInfo_2_classLit = createForClass('com.domo.charting.graphs', 'AnnotationItemInfo', 124);
function $annotationsHidden(this$static){
  if (!!this$static.chart && this$static.chart.hideAnnotations || !!this$static.component && !!this$static.component && this$static.component.hideAnnotations)
    return true;
  return false;
}

function $createDrawObjects(this$static){
  var annotation, annotation$iterator, closeBtnRect, closeBtnRect0;
  this$static.hasNonSelectedItems = false;
  if ($annotationsHidden(this$static) || !this$static.bnds || !this$static.component.annotations)
    return;
  clearGraphicElementArray(this$static.geAry);
  for (annotation$iterator = this$static.component.annotations.iterator(); annotation$iterator.hasNext_0();) {
    annotation = castTo(annotation$iterator.next_1(), 46);
    if (annotation.isGrayedForSelection) {
      this$static.hasNonSelectedItems = true;
      break;
    }
  }
  this$static.position == 2 || this$static.position == 0?this$static.isOpen?$createSideAnnotationListDrawObjects(this$static):(closeBtnRect0 = new CFRect(this$static.bnds.x_0, this$static.bnds.y_0 + 5, 19, 19) , $drawOpenCloseButton(this$static, closeBtnRect0, false)):this$static.isOpen?$createTopBottomAnnotationListDrawObjects(this$static):(closeBtnRect = new CFRect($getRight(this$static.bnds) - 24, this$static.bnds.y_0, 19, 19) , $drawOpenCloseButton(this$static, closeBtnRect, false));
}

function $createSideAnnotationListDrawObjects(this$static){
  var aii, aii$iterator, closeBtnRect, hoverList, hoverShape, left, lineHeight, selBkg, top_0;
  top_0 = this$static.bnds.y_0 + 45;
  left = this$static.bnds.x_0 + 10;
  closeBtnRect = new CFRect(this$static.bnds.x_0, this$static.bnds.y_0 + 5, 19, 19);
  this$static.geAry.add_0(new GraphicElement_0(new CFShape_0(new CFPath_1(toDouble_0(fromDouble_0($wnd.Math.round(closeBtnRect.x_0 + closeBtnRect.width_0 / 2))), this$static.bnds.y_0, toDouble_0(fromDouble_0($wnd.Math.round(closeBtnRect.x_0 + closeBtnRect.width_0 / 2))), $getBottom(this$static.bnds)), null, new CFStroke(this$static.dividerColor, 1))));
  $drawOpenCloseButton(this$static, closeBtnRect, true);
  this$static.geAry.add_0(($clinit_StrUtil() , drawTextInBounds(this$static.rnd, new CFRect(this$static.bnds.x_0 + 32, this$static.bnds.y_0 + 7, this$static.bnds.width_0, 40), getString('ANNOTATIONS', this$static.chart.locale), this$static.hdrFont, 0, 0, 5, null, null)));
  this$static.geAry.add_0(drawTextInBounds(this$static.rnd, new CFRect(this$static.bnds.x_0 + 32, this$static.bnds.y_0 + 23, this$static.bnds.width_0, 40), getString('RECENTLY_ADDED', this$static.chart.locale), this$static.hdrSubFont, 0, 0, 5, null, null));
  lineHeight = $getLineHeight(this$static.listFont, this$static.rnd);
  for (aii$iterator = new ArrayList$1(this$static.annotationListItems); aii$iterator.i < aii$iterator.this$01.array.length;) {
    aii = castTo($next_3(aii$iterator), 124);
    if (top_0 + aii.height_0 >= $getBottom(this$static.bnds) - 5)
      break;
    if (this$static.hasNonSelectedItems && !aii.annotation.isGrayedForSelection) {
      selBkg = new CFRect(closeBtnRect.x_0 + closeBtnRect.width_0 / 2 + 1, top_0 - 4, $getRight(this$static.bnds) - (closeBtnRect.x_0 + closeBtnRect.width_0 / 2 + 1), aii.height_0 + 8);
      this$static.geAry.add_0(new GraphicElement_0(new CFShape_1(selBkg, new CFFill(this$static.selectedBkgColor), null)));
    }
    $drawSideAnnotation(this$static, this$static.rnd, left, top_0, aii.annotation, aii.textInfo, lineHeight);
    hoverShape = new CFShape_1(new CFRect(closeBtnRect.x_0 + closeBtnRect.width_0 / 2 + 1, top_0 - 4, $getRight(this$static.bnds) - (closeBtnRect.x_0 + closeBtnRect.width_0 / 2 + 1), aii.height_0 + 8), new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
    hoverList = new ArrayList;
    $add_1(hoverList, aii.annotation);
    this$static.geAry.add_0(new GraphicElement_1(hoverShape, hoverList));
    top_0 += aii.height_0 + 8;
  }
}

function $createTopBottomAnnotationListDrawObjects(this$static){
  var aii, aii$iterator, anotRect, bndsLeft, bndsRight, closeBtnRect, dim, hoverList, hoverShape, i, lastLeft, left, lineHeight, maxTextWidth, nextAii, prevAii, selBkg, text_0, top_0;
  lineHeight = $getLineHeight(this$static.listFont, this$static.rnd);
  top_0 = this$static.bnds.y_0 + 20;
  closeBtnRect = new CFRect($getRight(this$static.bnds) - 24, this$static.bnds.y_0, 19, 19);
  this$static.geAry.add_0(new GraphicElement_0(new CFShape_0(new CFPath_1(this$static.bnds.x_0, this$static.bnds.y_0 + 10, $getRight(this$static.bnds), this$static.bnds.y_0 + 10), null, new CFStroke(this$static.dividerColor, 1))));
  if (!!this$static.chart && this$static.chart.mobile) {
    $drawOpenCloseButton(this$static, closeBtnRect, true);
    top_0 += 2;
  }
  if (this$static.bottomItemWrapping) {
    lastLeft = 0;
    for (i = 0; i < this$static.annotationListItems.array.length; i++) {
      prevAii = null;
      i > 0 && (prevAii = castTo($get_2(this$static.annotationListItems, i - 1), 124));
      aii = castTo($get_2(this$static.annotationListItems, i), 124);
      nextAii = null;
      i < this$static.annotationListItems.array.length - 1 && (nextAii = castTo($get_2(this$static.annotationListItems, i + 1), 124));
      aii.left_0 < lastLeft && (top_0 += lineHeight + 4);
      this$static.rnd.measureText_0(aii.annotation.content_0, this$static.listFont);
      bndsLeft = aii.left_0;
      (!prevAii || prevAii.left_0 > aii.left_0) && (bndsLeft = this$static.bnds.x_0);
      bndsRight = aii.left_0 + 40 + aii.width_0 + 20;
      (!nextAii || nextAii.left_0 < aii.left_0) && (bndsRight = $getRight(this$static.bnds));
      anotRect = new CFRect(bndsLeft, top_0 - 2, bndsRight - bndsLeft, lineHeight + 4);
      this$static.hasNonSelectedItems && !aii.annotation.isGrayedForSelection && this$static.geAry.add_0(new GraphicElement_0(new CFShape_1(anotRect, new CFFill(this$static.selectedBkgColor), null)));
      $drawBottomAnnotation(this$static, this$static.rnd, aii.left_0, top_0, aii.annotation.content_0, aii.annotation);
      hoverShape = new CFShape_1(anotRect, new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
      hoverList = new ArrayList;
      $add_1(hoverList, aii.annotation);
      this$static.geAry.add_0(new GraphicElement_1(hoverShape, hoverList));
      lastLeft = aii.left_0;
    }
  }
   else {
    left = this$static.bnds.x_0 + 20;
    maxTextWidth = $getRight(this$static.bnds) - (left + 40 + 5);
    for (aii$iterator = new ArrayList$1(this$static.annotationListItems); aii$iterator.i < aii$iterator.this$01.array.length;) {
      aii = castTo($next_3(aii$iterator), 124);
      dim = this$static.rnd.measureText_0(aii.annotation.content_0, this$static.listFont);
      text_0 = aii.annotation.content_0;
      dim.width_0 > maxTextWidth && (text_0 = truncateString(this$static.rnd, text_0, maxTextWidth, this$static.listFont));
      if (this$static.hasNonSelectedItems && !aii.annotation.isGrayedForSelection) {
        selBkg = new CFRect(this$static.bnds.x_0, top_0 - 2, this$static.bnds.width_0, lineHeight + 4);
        this$static.geAry.add_0(new GraphicElement_0(new CFShape_1(selBkg, new CFFill(this$static.selectedBkgColor), null)));
      }
      $drawBottomAnnotation(this$static, this$static.rnd, left, top_0, text_0, aii.annotation);
      hoverShape = new CFShape_1(new CFRect(this$static.bnds.x_0, top_0 - 2, this$static.bnds.width_0, lineHeight + 4), new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
      hoverList = new ArrayList;
      $add_1(hoverList, aii.annotation);
      this$static.geAry.add_0(new GraphicElement_1(hoverShape, hoverList));
      top_0 += lineHeight + 4;
    }
  }
}

function $drawAnnotationKey(this$static, rnd, left, top_0, annotation){
  var bubbleColor, dim, keyBkg, keyPath, keyRect, lineHeight, textRect;
  dim = rnd.measureText_0(annotation.label_0, this$static.labelFont);
  lineHeight = $getLineHeight(this$static.labelFont, rnd);
  keyRect = new CFRect(left + 10, top_0, 16, lineHeight + 2);
  keyPath = new CFPath_4(keyRect, 3);
  bubbleColor = ($clinit_Annotation() , DEFAULT_HINT_COLOR);
  annotation.isGrayedForSelection?(bubbleColor = new CFColor_2('#CDCDCD')):!!annotation.hintColor && (bubbleColor = annotation.hintColor);
  keyBkg = new CFShape_0(keyPath, new CFFill(bubbleColor), null);
  this$static.geAry.add_0(new GraphicElement_0(keyBkg));
  textRect = new CFRect(keyRect.x_0 + (keyRect.width_0 - dim.width_0) / 2 + 0.5, top_0 + 1, dim.width_0 + 5, lineHeight + 5);
  this$static.geAry.add_0(($clinit_StrUtil() , drawTextInBounds(rnd, textRect, annotation.label_0, this$static.labelFont, 0, 0, 5, null, null)));
}

function $drawBottomAnnotation(this$static, rnd, left, top_0, text_0, annotation){
  var font;
  $drawAnnotationKey(this$static, rnd, left, top_0, annotation);
  left += 40;
  font = this$static.listFont;
  this$static.hasNonSelectedItems && !annotation.isGrayedForSelection && (font = this$static.selListFont);
  this$static.geAry.add_0(($clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(left, top_0, this$static.bnds.width_0, 40), text_0, font, 0, 0, 5, null, null)));
}

function $drawOpenCloseButton(this$static, btnRect, drawClose){
  var arrowPath, arrowShape, geBtn, hoverShape, mobileHitRect;
  if (this$static.chart.includeJsonMap)
    return;
  geBtn = new GraphicElement;
  $addShape(geBtn, new CFShape_0(new CFPath_0(btnRect.x_0, btnRect.y_0, btnRect.width_0), ($clinit_CFFill() , WHITE_0), new CFStroke(this$static.dividerColor, 1)));
  arrowPath = new ArrayList;
  if (drawClose) {
    if (this$static.position == 2) {
      $add_1(arrowPath, new CFPathElement_0(0, btnRect.x_0 + 9, btnRect.y_0 + 6.5));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + 12, btnRect.y_0 + btnRect.height_0 / 2));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + 9, btnRect.y_0 + btnRect.height_0 - 6.5));
    }
     else {
      $add_1(arrowPath, new CFPathElement_0(0, btnRect.x_0 + 6.5, btnRect.y_0 + 9));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + btnRect.width_0 / 2, btnRect.y_0 + 12));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + btnRect.width_0 - 6.5, btnRect.y_0 + 9));
    }
  }
   else {
    if (this$static.position == 2) {
      $add_1(arrowPath, new CFPathElement_0(0, btnRect.x_0 + 10, btnRect.y_0 + 6.5));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + 7, btnRect.y_0 + btnRect.height_0 / 2));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + 10, btnRect.y_0 + btnRect.height_0 - 6.5));
    }
     else {
      $add_1(arrowPath, new CFPathElement_0(0, btnRect.x_0 + 6.5, btnRect.y_0 + 10));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + btnRect.width_0 / 2, btnRect.y_0 + 7));
      $add_1(arrowPath, new CFPathElement_0(1, btnRect.x_0 + btnRect.width_0 - 6.5, btnRect.y_0 + 10));
    }
  }
  arrowShape = new CFShape_0(new CFPath_9(arrowPath), null, new CFStroke(this$static.dividerColor, 1.5));
  !!arrowShape.path && (arrowShape.path.shouldAntiAlias = true);
  !geBtn.shapeAry && (geBtn.shapeAry = new ArrayList);
  $add_1(geBtn.shapeAry, arrowShape);
  hoverShape = new CFShape_0(new CFPath_0(btnRect.x_0, btnRect.y_0, btnRect.width_0), new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
  if (!!this$static.chart && this$static.chart.mobile) {
    mobileHitRect = new CFRect(0, 0, 30, 30);
    $setCenterX(mobileHitRect, btnRect.x_0 + btnRect.width_0 / 2);
    $setCenterY(mobileHitRect, btnRect.y_0 + btnRect.height_0 / 2);
    hoverShape = new CFShape_1(mobileHitRect, new CFFill(TRANSPARENT), new CFStroke(TRANSPARENT, 1));
  }
  hoverShape.drillFilter = '{"internal": "toggle annotation list"}';
  !geBtn.shapeAry && (geBtn.shapeAry = new ArrayList);
  $add_1(geBtn.shapeAry, hoverShape);
  geBtn.dataObject = this$static;
  this$static.geAry.add_0(geBtn);
}

function $drawSideAnnotation(this$static, rnd, left, top_0, annotation, txtInfo, lineHeight){
  var font, ge, line, line$iterator;
  $drawAnnotationKey(this$static, rnd, left, top_0, annotation);
  ge = new GraphicElement;
  for (line$iterator = new ArrayList$1(txtInfo.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
    line = castToString($next_3(line$iterator));
    font = this$static.listFont;
    this$static.hasNonSelectedItems && !annotation.isGrayedForSelection && (font = this$static.selListFont);
    $addTextItem(ge, new CFTextItem(rnd, new CFRect(left + 40, top_0, $intern_10, $intern_10), line, font, 0, 0));
    top_0 += lineHeight;
  }
  this$static.geAry.add_0(ge);
}

function $formatFromGraph(this$static, rnd){
  var annotations;
  if ($annotationsHidden(this$static) || !this$static.bnds)
    return;
  this$static.rnd = rnd;
  clearGraphicElementArray(this$static.geAry);
  this$static.annotationListItems.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  if (this$static.component) {
    annotations = this$static.component.annotations;
    annotations = ($clinit_Annotation() , annotations.sort_0(new Annotation$1) , annotations);
    this$static.position == 2 || this$static.position == 0?this$static.isOpen?$formatSideAnnotationList(this$static, annotations, rnd):(this$static.bnds.width_0 = 20 , undefined):this$static.isOpen?$formatTopBottomAnnotationList(this$static, annotations, rnd):(this$static.bnds.height_0 = 20 , undefined);
  }
  this$static.needsFormat = false;
}

function $formatSideAnnotationList(this$static, annotations, rnd){
  var annotation, annotation$iterator, annotation$iterator0, curTextInfo, dim, hdr2Dim, hdrDim, itemHeight, left, maxAllowableWidth, maxHeight, maxTextWidth, minHdrWidth, minWidth, top_0, txtBnds;
  maxTextWidth = 0;
  hdrDim = rnd.measureText_0(getString('ANNOTATIONS', this$static.chart.locale), this$static.hdrFont);
  hdr2Dim = rnd.measureText_0(getString('RECENTLY_ADDED', this$static.chart.locale), this$static.hdrSubFont);
  minHdrWidth = hdrDim.width_0;
  hdr2Dim.width_0 > minHdrWidth && (minHdrWidth = hdr2Dim.width_0);
  minWidth = 32 + minHdrWidth;
  for (annotation$iterator0 = annotations.iterator(); annotation$iterator0.hasNext_0();) {
    annotation = castTo(annotation$iterator0.next_1(), 46);
    if (annotation.isVisible) {
      dim = rnd.measureText_0(annotation.content_0, this$static.listFont);
      dim.width_0 > maxTextWidth && (maxTextWidth = dim.width_0);
    }
  }
  maxAllowableWidth = this$static.component.bnds.width_0 / 4;
  if (maxTextWidth + 40 + 20 > maxAllowableWidth) {
    maxTextWidth = maxAllowableWidth - 60;
    $setWidth(this$static.bnds, maxAllowableWidth);
  }
   else {
    minWidth > maxTextWidth + 40 + 20?$setWidth(this$static.bnds, minWidth + 2):$setWidth(this$static.bnds, maxTextWidth + 40 + 20);
  }
  top_0 = this$static.bnds.y_0 + 35;
  left = this$static.bnds.x_0 + 10;
  maxHeight = $getBottom(this$static.bnds) - 5 - top_0;
  for (annotation$iterator = annotations.iterator(); annotation$iterator.hasNext_0();) {
    annotation = castTo(annotation$iterator.next_1(), 46);
    if (annotation.isVisible) {
      txtBnds = new CFRect(left + 40, top_0, maxTextWidth, maxHeight);
      curTextInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, annotation.content_0, this$static.listFont, txtBnds.width_0, txtBnds.height_0, -1));
      itemHeight = curTextInfo.textDimension.height_0;
      $add_1(this$static.annotationListItems, new AnnotationItemInfo(0, 0, itemHeight, curTextInfo, annotation));
      if (top_0 + itemHeight >= $getBottom(this$static.bnds) - 5)
        break;
      top_0 += itemHeight + 8;
    }
  }
}

function $formatTopBottomAnnotationList(this$static, annotations, rnd){
  var annotation, annotation$iterator, annotation$iterator0, dim, height, left, lineHeight, maxAllowableHeight, maxWidth, top_0;
  maxWidth = 0;
  this$static.bottomItemWrapping = false;
  for (annotation$iterator0 = annotations.iterator(); annotation$iterator0.hasNext_0();) {
    annotation = castTo(annotation$iterator0.next_1(), 46);
    if (annotation.isVisible) {
      dim = rnd.measureText_0(annotation.content_0, this$static.listFont);
      dim.width_0 > maxWidth && (maxWidth = dim.width_0);
    }
  }
  maxAllowableHeight = this$static.component.bnds.height_0 / 4 - 5;
  lineHeight = $getLineHeight(this$static.listFont, rnd);
  height = 20;
  top_0 = this$static.bnds.y_0 + 20;
  left = this$static.bnds.x_0 + 20;
  if (maxWidth < (this$static.bnds.width_0 - 140) / 2) {
    this$static.bottomItemWrapping = true;
    for (annotation$iterator = annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      if (annotation.isVisible) {
        dim = rnd.measureText_0(annotation.content_0, this$static.listFont);
        if (left + 40 + dim.width_0 <= $getRight(this$static.bnds) - 20) {
          $add_1(this$static.annotationListItems, new AnnotationItemInfo(left, dim.width_0, 0, null, annotation));
          left += 40 + dim.width_0 + 20;
        }
         else {
          if (top_0 + lineHeight > this$static.bnds.y_0 + maxAllowableHeight)
            break;
          height += lineHeight + 4;
          top_0 += lineHeight + 4;
          left = this$static.bnds.x_0 + 20;
          $add_1(this$static.annotationListItems, new AnnotationItemInfo(left, dim.width_0, 0, null, annotation));
          left += 40 + dim.width_0 + 20;
        }
      }
    }
    height += lineHeight;
  }
   else {
    for (annotation$iterator = annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      if (annotation.isVisible) {
        $add_1(this$static.annotationListItems, new AnnotationItemInfo(0, 0, 0, null, annotation));
        height += lineHeight + 4;
        top_0 += lineHeight + 4;
        if (top_0 + lineHeight > this$static.bnds.y_0 + maxAllowableHeight)
          break;
      }
    }
  }
  $setHeight(this$static.bnds, height + 5);
}

function $freeResources_12(this$static, dataToKeep){
  $freeResources_2(this$static, dataToKeep);
  this$static.component = null;
  this$static.hdrFont = null;
  this$static.labelFont = null;
  this$static.listFont = null;
  this$static.selListFont = null;
  this$static.dividerColor = null;
  this$static.selectedBkgColor = null;
  this$static.annotationListItems = null;
  this$static.lastBnds = null;
}

function $getBndsOrLastBnds(this$static){
  if (this$static.bnds)
    return this$static.bnds;
  return this$static.lastBnds;
}

function $moveRelativeToGraphBounds(this$static){
  var grphBnds;
  if ($annotationsHidden(this$static))
    return;
  grphBnds = this$static.component.bnds;
  !!this$static.component && this$static.component.textAndTicksInBounds?!!this$static.bnds && (this$static.position == 1?$setY_0(this$static.bnds, grphBnds.y_0 + grphBnds.height_0 - this$static.bnds.height_0):this$static.position == 0?$setX_0(this$static.bnds, grphBnds.x_0):this$static.position == 3?$setY_0(this$static.bnds, grphBnds.y_0):this$static.position == 2 && $setX_0(this$static.bnds, grphBnds.x_0 + grphBnds.width_0 - this$static.bnds.width_0)):this$static.position == 0?$setX_0(this$static.bnds, grphBnds.x_0 - this$static.bnds.width_0):this$static.position == 3 && $setY_0(this$static.bnds, grphBnds.y_0 - this$static.bnds.height_0);
}

function $setInitialBounds(this$static){
  var grphBnds;
  if ($annotationsHidden(this$static))
    return;
  grphBnds = this$static.component.bnds;
  this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2 && (this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0));
}

function $setIsOpen(this$static, isOpen){
  this$static.isOpen = isOpen;
}

function $setNeedsFormat(this$static, value_0){
  this$static.needsFormat = value_0;
  if (this$static.needsFormat) {
    clearGraphicElementArray(this$static.geAry);
    this$static.lastBnds = this$static.bnds;
    this$static.bnds = null;
  }
}

function AnnotationListView(theChart, component){
  ComponentCSR.call(this, theChart, 'annotationListView');
  this.isOpen = true;
  this.hdrFont = new CFFont_0(null, 13, ($clinit_CFColor() , BLACK));
  this.hdrSubFont = new CFFont_0(null, 9, TEXT_DARK_GRAY);
  this.labelFont = new CFFont_0(null, 9, WHITE);
  this.listFont = new CFFont_0(null, 9, TEXT_DARK_GRAY);
  this.selListFont = new CFFont_0(null, 9, BLACK);
  this.dividerColor = new CFColor_2('#ABABAB');
  this.selectedBkgColor = new CFColor_2('#F5F5F5');
  this.annotationListItems = new ArrayList;
  this.component = component;
  this.position = 1;
  this.hdrSubFont = new CFFont_0(null, 9, $getTextColor(component.chart.palette));
  this.listFont = new CFFont_0(null, 9, $getTextColor(component.chart.palette));
  this.labelFont.face_0 = 1;
  !!component && !!component && $hasTextColorOverride(component) && $setColor_1(this.hdrFont, $getTextColor(component.chart.palette));
}

defineClass(173, 63, {23:1, 63:1, 173:1}, AnnotationListView);
_.freeResources = function freeResources_7(dataToKeep){
  $freeResources_12(this, dataToKeep);
}
;
_.handleClick = function handleClick_2(shapeClicked){
  var drillFilter, graph;
  if (shapeClicked) {
    drillFilter = shapeClicked.drillFilter;
    if (drillFilter != null && drillFilter.indexOf('toggle') > 0) {
      this.isOpen = !this.isOpen;
      graph = this.component;
      if (graph) {
        $setNeedsFormat_2(graph, true);
        graph.frontGeAry.clear_0();
        !graph.animInfo && (graph.animInfo = new AnimInfo(0, 500, 'Transition', 'linear'));
      }
      $setAnimateDrawNeeded(this.chart);
      return true;
    }
  }
  return false;
}
;
_.setHoverData = function setHoverData_5(data_0, rnd){
  if (!!this.component && data_0 != null)
    return $setHoverData(this.component, data_0, rnd);
  return false;
}
;
_.setNeedsFormat = function setNeedsFormat_2(value_0){
  $setNeedsFormat(this, value_0);
}
;
_.bottomItemWrapping = false;
_.hasNonSelectedItems = false;
_.isOpen = false;
_.position = 0;
var Lcom_domo_charting_graphs_AnnotationListView_2_classLit = createForClass('com.domo.charting.graphs', 'AnnotationListView', 173);
function $addCells(this$static, row){
  var $tmp, cellMap, i, value_0;
  cellMap = row.cellMap;
  for (i = valueOf(0); i.value_0 < $size(row.cellMap); $tmp = i , i = valueOf(i.value_0 + 1) , $tmp) {
    value_0 = $getValue(castTo(getEntryValueOrNull($getEntry(cellMap.hashCodeMap, i)), 16));
    isNaN(value_0) || $add_1(this$static.values, value_0);
  }
}

function $calcBoxPlotValues(this$static){
  $sort(this$static.values, null);
  if (this$static.values.array.length == 0)
    return;
  this$static.median = $calcMedian(this$static, 0, this$static.values.array.length - 1);
  if (this$static.values.array.length == 1) {
    this$static.lowQ = this$static.median;
    this$static.highQ = this$static.median;
  }
   else if (this$static.values.array.length % 2 == 0) {
    this$static.lowQ = $calcMedian(this$static, 0, (this$static.values.array.length / 2 | 0) - 1);
    this$static.highQ = $calcMedian(this$static, this$static.values.array.length / 2 | 0, this$static.values.array.length - 1);
  }
   else {
    this$static.lowQ = $calcMedian(this$static, 0, ((this$static.values.array.length - 1) / 2 | 0) - 1);
    this$static.highQ = $calcMedian(this$static, (this$static.values.array.length + 1) / 2 | 0, this$static.values.array.length - 1);
  }
  this$static.low = checkNotNull(castToDouble($get_2(this$static.values, 0)));
  this$static.high = checkNotNull(castToDouble($get_2(this$static.values, this$static.values.array.length - 1)));
}

function $calcMedian(this$static, lower, upper){
  var index_0, value_0;
  if ((upper - lower) % 2 == 0)
    return checkNotNull(castToDouble($get_2(this$static.values, lower + ((upper - lower) / 2 | 0))));
  else {
    index_0 = lower + ((upper - lower - 1) / 2 | 0);
    value_0 = (checkNotNull(castToDouble($get_2(this$static.values, index_0))) + checkNotNull(castToDouble($get_2(this$static.values, index_0 + 1)))) / 2;
    return value_0;
  }
}

function BoxPlotInfo(row){
  this.values = new ArrayList;
  this.firstCell = castTo($get_1(row.cellMap, valueOf(0)), 16);
  $addCells(this, row);
  $calcBoxPlotValues(this);
  $setValue(this.firstCell, this.high);
  $addMetaDataCells(this.firstCell, 4);
  $addMetaData(this.firstCell, 0, this.low);
  $addMetaData(this.firstCell, 1, this.lowQ);
  $addMetaData(this.firstCell, 2, this.highQ);
  $addMetaData(this.firstCell, 3, this.median);
}

defineClass(183, 1, {183:1}, BoxPlotInfo);
_.high = NaN;
_.highQ = NaN;
_.low = NaN;
_.lowQ = NaN;
_.median = NaN;
var Lcom_domo_charting_graphs_BoxPlotInfo_2_classLit = createForClass('com.domo.charting.graphs', 'BoxPlotInfo', 183);
function CalEvent(text_0, dateStr){
  this.text_0 = text_0;
  this.dateStr = dateStr;
}

function CalEvent_0(text_0, dateStr, value_0){
  this.text_0 = text_0;
  this.dateStr = dateStr;
  this.value_0 = value_0;
}

defineClass(120, 1, {120:1}, CalEvent, CalEvent_0);
_.value_0 = 0;
var Lcom_domo_charting_graphs_CalEvent_2_classLit = createForClass('com.domo.charting.graphs', 'CalEvent', 120);
function CompGaugeColors(lightClr, darkClr, arrowClr){
  this.lightClr = lightClr;
  this.darkClr = darkClr;
  this.arrowClr = arrowClr;
}

defineClass(180, 1, {}, CompGaugeColors);
var Lcom_domo_charting_graphs_CompGaugeColors_2_classLit = createForClass('com.domo.charting.graphs', 'CompGaugeColors', 180);
function $freeResources_13(this$static){
  this$static.graph = null;
  this$static.sGraph = null;
  this$static.font_0 = null;
  this$static.formatString = null;
}

function $getColName_0(cell){
  if (!!cell && !!cell.column)
    return $getColName(cell);
  return '';
}

function $getFormattedText(this$static, text_0, cell, numberFormatter, component, isHover){
  var result;
  if (!cell)
    return '';
  result = text_0;
  if (this$static.graph.graphType == 16) {
    result = $replaceAll(text_0, '%_SERIES_NAME', '%_TMP');
    result = $replaceAll(result, '%_CATEGORY_NAME', '%_SERIES_NAME');
    result = $replaceAll(result, '%_TMP', '%_CATEGORY_NAME');
    result = $replaceAll(result, '%_SERIES_NUMBER', '%_TMP');
    result = $replaceAll(result, '%_CATEGORY_NUMBER', '%_SERIES_NUMBER');
    result = $replaceAll(result, '%_TMP', '%_CATEGORY_NUMBER');
  }
  result = $replaceVALUE(this$static, cell, numberFormatter, result);
  result = $replaceORIG_VALUE(cell, numberFormatter, result);
  result = $replaceCATEGORY_NAME(this$static, cell, result);
  result = $replaceCATEGORY2_NAME(this$static, cell, result);
  result = $replaceCATEGORY3_NAME(this$static, cell, result);
  result = $replaceNAME(this$static, cell, result);
  result = $replaceSERIES_NAME(this$static, cell, result);
  result = $replaceHIGH_VALUE(cell, numberFormatter, result);
  result = $replaceLOW_VALUE(cell, numberFormatter, result);
  result = $replaceOPEN_VALUE(cell, numberFormatter, result);
  result = $replaceCLOSE_VALUE(cell, numberFormatter, result);
  result = $replacePERCENT_COMPLETE(cell, numberFormatter, result);
  result = $replaceITEM_NAME(this$static, cell, result);
  result = $replaceGROUP_NAME(this$static, cell, result);
  result = $replaceITEM(this$static, cell, result);
  result = $replaceCATEGORY(this$static, cell, result);
  result = $replaceSTARTDATE(cell, result);
  result = $replaceENDDATE(cell, result);
  result = $replaceXVALUE(this$static, cell, result);
  result = $replaceYVALUE(this$static, cell, result);
  result = $replaceBUBBLE_VALUE(this$static, cell, result);
  result = $replaceMEDIAN_VALUE(cell, numberFormatter, result);
  result = $replaceQ1_VALUE(cell, numberFormatter, result);
  result = $replaceQ3_VALUE(cell, numberFormatter, result);
  result = $replaceORIG_PERCENT_OF_TOTAL(this$static, component, cell, numberFormatter, result);
  result = $replacePERCENT_OF_TOTAL(this$static, component, cell, numberFormatter, result);
  result = $replacePERCENT_OF_CATEGORY(this$static, component, cell, numberFormatter, result);
  result = $replaceCATEGORY_TOTAL(component, cell, numberFormatter, result);
  result = $replaceCATEGORY_AVERAGE(component, cell, numberFormatter, result);
  result = $replaceCATEGORY_NUMBER(cell, result);
  result = $replaceSERIES_NUMBER(cell, result);
  result = $replaceSERIES_TOTAL(cell, numberFormatter, result);
  result = $replaceSERIES_FIRST_VALUE(this$static, cell, numberFormatter, result);
  result = $replaceSERIES_LAST_VALUE(this$static, cell, numberFormatter, result);
  result = $replaceSERIES_MAX_VALUE(cell, numberFormatter, result);
  result = $replaceSERIES_MIN_VALUE(cell, numberFormatter, result);
  result = $replaceGRAPH_TOTAL(component, cell, numberFormatter, result);
  result = $replacePERCENT_OF_PREVIOUS(this$static, component, cell, numberFormatter, result);
  result = $replacePOINT_NUMBER(this$static, cell, numberFormatter, result);
  result = $replaceRANGENAME(this$static, cell, result);
  result = $replacePERCENT_OF_100_0(component, cell, result);
  result = $replaceORIG_CATEGORY_TOTAL(component, cell, numberFormatter, result);
  result = $replaceTF1_VALUE(cell, numberFormatter, result);
  result = $replaceTF1_NAME(component, result);
  result = $replaceTF2_VALUE(cell, numberFormatter, result);
  result = $replaceTF2_NAME(component, result);
  result = $replaceTF3_VALUE(cell, numberFormatter, result);
  result = $replaceTF3_NAME(component, result);
  result = $replaceTF4_VALUE(cell, numberFormatter, result);
  result = $replaceTF4_NAME(component, result);
  result = $replaceTF5_VALUE(cell, numberFormatter, result);
  result = $replaceTF5_NAME(component, result);
  result = $replaceTF6_VALUE(cell, numberFormatter, result);
  result = $replaceTF6_NAME(component, result);
  result = $replaceTF7_VALUE(cell, numberFormatter, result);
  result = $replaceTF7_NAME(component, result);
  result = $replaceTF8_VALUE(cell, numberFormatter, result);
  result = $replaceTF8_NAME(component, result);
  result = $replaceTF9_VALUE(cell, numberFormatter, result);
  result = $replaceTF9_NAME(component, result);
  result = replaceTOOLTIP('%_TOOLTIP1', 'EXTRAINFO1', cell, component, isHover, result);
  result = replaceTOOLTIP('%_TOOLTIP2', 'EXTRAINFO2', cell, component, isHover, result);
  result = replaceTOOLTIP('%_TOOLTIP3', 'EXTRAINFO3', cell, component, isHover, result);
  result = $replaceFORECAST_VALUE(cell, numberFormatter, result);
  return result;
}

function $getNameAsFormattedDateStrIfDate(this$static, cell, valueStr){
  var catScale;
  if (!!cell.column && neq(cell.column.timeMS, 0)) {
    if (!!$getCategoryScale(this$static.sGraph) && instanceOf($getCategoryScale(this$static.sGraph), 36)) {
      catScale = castTo($getCategoryScale(this$static.sGraph), 36);
      !!catScale && (valueStr = $getOutputFormattedRowName(catScale, cell.column, null, null));
    }
  }
  return valueStr;
}

function $getPositionOverride(this$static, cell, position){
  var value_0;
  if (this$static.graph.typeAttributes.isCategoryScatter || !!this$static.sGraph && this$static.sGraph.isHorizontal && (this$static.graph.typeAttributes.isSymbolOverlay || this$static.graph.typeAttributes.isSymbol)) {
    value_0 = 0;
    !!cell && (value_0 = $getValue(cell));
    value_0 >= 0?(position = 10):(position = 11);
  }
   else if (!!this$static.sGraph && !this$static.sGraph.isHorizontal && (this$static.graph.typeAttributes.isSymbolOverlay || this$static.graph.typeAttributes.isSymbol)) {
    value_0 = 0;
    !!cell && (value_0 = $getValue(cell));
    value_0 < 0 && (position = 2);
  }
  return position;
}

function $getRectForPosition(this$static, rnd, rect, text_0){
  var dimension, retRect, textInfo;
  retRect = new CFRect(rect.x_0, rect.y_0, rect.width_0, rect.height_0);
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, this$static.font_0, 300, -1, -1);
  textInfo.wrappedLines.array.length > 1?(dimension = textInfo.textDimension):(dimension = getVisbleDimensionForText(rnd, text_0, this$static.font_0));
  if (!!this$static.sGraph && !this$static.sGraph.isHorizontal && this$static.rotated) {
    $setHeight(retRect, dimension.width_0);
    $setWidth(retRect, dimension.height_0);
  }
   else {
    $setHeight(retRect, dimension.height_0);
    $setWidth(retRect, dimension.width_0);
  }
  $setCenterX(retRect, rect.x_0 + rect.width_0 / 2);
  $setCenterY(retRect, $wnd.Math.ceil(rect.y_0 + rect.height_0 / 2));
  switch (this$static.position) {
    case 0:
    case 4:
    case 8:
      !!this$static.sGraph && this$static.sGraph.isHorizontal?$setX_0(retRect, rect.x_0 + rect.width_0 + 5):this$static.rotated?$setBottom(retRect, rect.y_0 - 5):$setBottom(retRect, rect.y_0 - 2);
      break;
    case 10:
      $setCenterX(retRect, rect.x_0 + rect.width_0);
      $setBottom(retRect, rect.y_0 - 3);
      break;
    case 11:
      $setCenterX(retRect, rect.x_0);
      $setBottom(retRect, rect.y_0 - 3);
      break;
    case 1:
    case 5:
      !!this$static.sGraph && this$static.sGraph.isHorizontal?$setRight(retRect, rect.x_0 + rect.width_0 - 5):$setY_0(retRect, rect.y_0 + 5);
      break;
    case 2:
    case 7:
      !!this$static.sGraph && this$static.sGraph.isHorizontal?$setX_0(retRect, rect.x_0 + 5):$setBottom(retRect, rect.y_0 + rect.height_0 - 5);
      break;
    case 6:
      $setRight(retRect, rect.x_0 - 5);
      break;
    case 9:
      !!this$static.sGraph && this$static.sGraph.isHorizontal?$setRight(retRect, rect.x_0 - 5):$setY_0(retRect, rect.y_0 + rect.height_0);
      break;
    case 12:
      $setRight(retRect, rect.x_0);
      break;
    case 13:
    case 14:
      $setX_0(retRect, rect.x_0 + rect.width_0);
  }
  $keepRectInsideOtherRect(retRect, this$static.graph.getInnerBounds());
  return retRect;
}

function $getRowName_0(this$static, cell){
  var result;
  if (!!this$static.graph.data_0 && this$static.graph.data_0.isPeriodOverPeriod && !!$getMetaDataCell(cell, 0))
    return $getMetaDataCell(cell, 0).valueStr;
  if (!!cell.row && neq(cell.row.timeMS, 0) && ($getRowName(cell).indexOf('T') != -1 || $getRowName(cell).indexOf(':') != -1)) {
    result = $replaceAll($getRowName(cell), 'T', ' ');
    this$static.graph.chart.timeZone != null && (result += ' ' + this$static.graph.chart.timeZone);
    return result;
  }
  if (cell.altName != null)
    return cell.altName;
  return $getRowName(cell);
}

function $getTextItemForPosition(this$static, rnd, font, text_0, rect, position){
  var hAlign, textInfo, vAlign;
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, font, 300, -1, -1);
  hAlign = 0;
  vAlign = VALIGN_BOTTOM;
  !!this$static.sGraph && !this$static.sGraph.isHorizontal && this$static.rotated && (vAlign = VALIGN_MIDDLE);
  switch (position) {
    case 0:
    case 2:
    case 8:
      (!!this$static.sGraph && this$static.sGraph.isHorizontal || !this$static.rotated) && (hAlign = HALIGN_CENTER);
      break;
    case 4:
    case 7:
      vAlign = VALIGN_MIDDLE;
      break;
    case 6:
      vAlign = VALIGN_MIDDLE;
      hAlign = 0;
      break;
    case 1:
    case 9:
      if (!!this$static.sGraph && !this$static.sGraph.isHorizontal && this$static.rotated) {
        hAlign = HALIGN_RIGHT;
      }
       else {
        hAlign = HALIGN_CENTER;
        vAlign = 0;
      }

      break;
    case 5:
      hAlign = HALIGN_RIGHT;
      vAlign = VALIGN_MIDDLE;
      break;
    case 3:
      hAlign = HALIGN_CENTER;
      vAlign = VALIGN_MIDDLE;
  }
  this$static.justificationOverride != -1 && (hAlign = this$static.justificationOverride);
  if (!!this$static.sGraph && !this$static.sGraph.isHorizontal && !$isLineOnly(this$static.sGraph) && this$static.rotated)
    return $getCFTextItemsForWrappedLinesRotated(textInfo, rnd, rect, font, hAlign, vAlign);
  return $getCFTextItemsForWrappedLines(textInfo, rnd, rect, font, hAlign, vAlign);
}

function $getTextPointForRect(rect, position){
  var X, Y, point;
  X = 100;
  Y = 100;
  if (rect) {
    X = rect.x_0 + rect.width_0 / 2;
    Y = rect.y_0 + rect.height_0 / 2;
    switch (position) {
      case 0:
      case 1:
      case 8:
        Y = rect.y_0;
        break;
      case 10:
        Y = rect.y_0;
        X = rect.x_0 + rect.width_0;
        break;
      case 11:
        Y = rect.y_0;
        X = rect.x_0;
        break;
      case 4:
      case 5:
        X = rect.x_0 + rect.width_0;
        break;
      case 2:
      case 9:
        Y = rect.y_0 + rect.height_0;
        break;
      case 6:
      case 12:
      case 7:
        X = rect.x_0;
        break;
      case 13:
      case 14:
        X = rect.x_0 + rect.width_0;
    }
  }
  point = new CFPoint(X, Y);
  return point;
}

function $getTextRectForPoint(this$static, rnd, font, point, text_0, position, captionStyle, keepInInnerBnds){
  var X, Y, bounds, dimension, origRetRect, retRect, textInfo;
  X = point.x_0;
  Y = point.y_0;
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, font, 300, -1, -1);
  dimension = textInfo.textDimension;
  retRect = new CFRect(0, 0, 0, 0);
  if (!!this$static.sGraph && !this$static.sGraph.isHorizontal && !$isLineOnly(this$static.sGraph) && this$static.rotated) {
    $setHeight(retRect, dimension.width_0);
    $setWidth(retRect, dimension.height_0);
  }
   else {
    $setHeight(retRect, dimension.height_0);
    $setWidth(retRect, dimension.width_0);
  }
  retRect.x_0 = X - retRect.width_0 / 2;
  retRect.y_0 = Y - retRect.height_0 / 2;
  switch (position) {
    case 0:
      captionStyle?(retRect.y_0 = Y - 12 - retRect.height_0):(retRect.y_0 = Y - retRect.height_0);
      break;
    case 10:
    case 11:
      captionStyle?(retRect.y_0 = Y - 4 - retRect.height_0):(retRect.y_0 = Y - retRect.height_0);
      break;
    case 2:
    case 8:
      retRect.y_0 = Y - retRect.height_0;
      break;
    case 13:
    case 4:
      captionStyle?(retRect.x_0 = X + 18):(retRect.x_0 = X + 5);
      !!this$static.sGraph && this$static.sGraph.typeAttributes.showSymbols && this$static.sGraph.isHorizontal && $setX_0(retRect, retRect.x_0 + 4);
      break;
    case 12:
    case 6:
      captionStyle?(retRect.x_0 = X - 18 - retRect.width_0):(retRect.x_0 = X - 5 - retRect.width_0);
      !!this$static.sGraph && this$static.sGraph.typeAttributes.showSymbols && this$static.sGraph.isHorizontal && $setX_0(retRect, retRect.x_0 - 4);
      break;
    case 7:
      retRect.x_0 = X + 5;
      break;
    case 1:
    case 9:
      retRect.y_0 = Y;
      break;
    case 5:
      retRect.x_0 = X - 5 - retRect.width_0;
  }
  if (this$static.graph) {
    bounds = this$static.graph.bnds;
    keepInInnerBnds && (bounds = this$static.graph.getInnerBounds());
    origRetRect = new CFRect(retRect.x_0, retRect.y_0, retRect.width_0, retRect.height_0);
    retRect = $keepRectInBounds(retRect, bounds, captionStyle);
    !!this$static.sGraph && this$static.sGraph.isHorizontal && !!$getCategoryScale(this$static.sGraph) && $getCategoryScale(this$static.sGraph).getIsLineType() && (position == 13 || position == 12) && !this$static.sGraph.treatAsSmall && $setY_0(retRect, origRetRect.y_0);
  }
  return retRect;
}

function $keepRectInBounds(rect, bnds, captionStyle){
  var bounds;
  bounds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  captionStyle && $inflate(bounds, -8);
  rect.y_0 + rect.height_0 > bounds.y_0 + bounds.height_0 && $setBottom(rect, bounds.y_0 + bounds.height_0);
  rect.x_0 + rect.width_0 > bounds.x_0 + bounds.width_0 && $setRight(rect, bounds.x_0 + bounds.width_0);
  rect.y_0 < bounds.y_0 && $setY_0(rect, bounds.y_0);
  rect.x_0 < bounds.x_0 && $setX_0(rect, bounds.x_0);
  return rect;
}

function $replaceBUBBLE_VALUE(this$static, cell, result){
  var numFormatter;
  if (contains(result, '%_BUBBLE_VALUE')) {
    if (instanceOf(this$static.sGraph.handler, 121)) {
      numFormatter = $getBubbleValueFormatter(castTo(this$static.sGraph.handler, 121), instanceOf(this$static, 122));
      result = $replaceMetadataValue(cell, '%_BUBBLE_VALUE', 1, numFormatter, result);
    }
     else {
      numFormatter = this$static.graph.dataLabelNumberFormatter;
      instanceOf(this$static, 122) && (numFormatter = this$static.graph.hoverNumberFormatter);
      result = $replaceMetadataValue(cell, '%_BUBBLE_VALUE', 1, numFormatter, result);
    }
  }
  return result;
}

function $replaceCATEGORY(this$static, cell, result){
  var catIndex;
  if (contains(result, '%_CATEGORY')) {
    if (instanceOf(this$static.graph.handler, 160)) {
      catIndex = castTo(this$static.graph.handler, 160).CATEGORY;
      return $replaceMetadataValueStr(cell, '%_CATEGORY', catIndex, result);
    }
  }
  return result;
}

function $replaceCATEGORY2_NAME(this$static, cell, result){
  var grp1Index, rowCell, valueStr;
  valueStr = '';
  if (contains(result, '%_CATEGORY2_NAME')) {
    grp1Index = $getMetDataIndexForName(this$static.sGraph.data_0, 'GROUP1');
    if (grp1Index != -1) {
      if ($equalsIgnoreCase(this$static.sGraph.data_0.originalDataType, 'legacy')) {
        rowCell = $getCellByCellIndex(cell.row, 0);
        valueStr = $getValueStrOrValue($getMetaDataCell(rowCell, grp1Index));
      }
       else 
        valueStr = $getValueStrOrValue($getMetaDataCell(cell, grp1Index));
    }
    result = replaceMacroWithValue(result, '%_CATEGORY2_NAME', valueStr);
  }
  return result;
}

function $replaceCATEGORY3_NAME(this$static, cell, result){
  var grp2Index, rowCell, valueStr;
  valueStr = '';
  if (contains(result, '%_CATEGORY3_NAME')) {
    grp2Index = $getMetDataIndexForName(this$static.sGraph.data_0, 'GROUP2');
    if (grp2Index != -1) {
      if ($equalsIgnoreCase(this$static.sGraph.data_0.originalDataType, 'legacy')) {
        rowCell = $getCellByCellIndex(cell.row, 0);
        valueStr = $getValueStrOrValue($getMetaDataCell(rowCell, grp2Index));
      }
       else 
        valueStr = $getValueStrOrValue($getMetaDataCell(cell, grp2Index));
    }
    result = replaceMacroWithValue(result, '%_CATEGORY3_NAME', valueStr);
  }
  return result;
}

function $replaceCATEGORY_AVERAGE(component, cell, numberFormatter, result){
  var avgValue, graphType, secondScaleNumFormatter, useSecondaryScale, valueStr;
  if (contains(result, '%_CATEGORY_AVERAGE') && !!component.getData()) {
    useSecondaryScale = false;
    if (instanceOf(component, 40)) {
      graphType = castTo(component, 40).graphType;
      if (graphType == 4 || graphType == 5) {
        useSecondaryScale = true;
        secondScaleNumFormatter = $getValueScaleByNumber(castTo(component, 40), 1).numberFormatter;
        if (secondScaleNumFormatter) {
          numberFormatter = new NumberFormatter_0(secondScaleNumFormatter);
          numberFormatter.autoAbbreviate = false;
          numberFormatter.needsNewNumFormat = true;
        }
      }
       else if ((graphType == 0 || graphType == 1) && !!$getValueScaleByNumber(castTo(component, 40), 1))
        return $replaceCATEGORY_AVERAGE_forDualScaleBar(component, cell, numberFormatter, result);
    }
    avgValue = $getRowSum(cell, useSecondaryScale) / $getNumVisibleCols(component.getData(), useSecondaryScale);
    valueStr = $formatNumber_1(numberFormatter, avgValue);
    result = replaceMacroWithValue(result, '%_CATEGORY_AVERAGE', valueStr);
  }
  return result;
}

function $replaceCATEGORY_AVERAGE_forDualScaleBar(component, cell, numberFormatter, result){
  var avgValue, valueStr;
  if (instanceOf(component, 40)) {
    avgValue = ($getRowSum(cell, false) + $getRowSum(cell, true)) / component.getData().numVisibleCols;
    valueStr = $formatNumber_1(numberFormatter, avgValue);
    result = replaceMacroWithValue(result, '%_CATEGORY_AVERAGE', valueStr);
    return result;
  }
  return result;
}

function $replaceCATEGORY_NAME(this$static, cell, result){
  var scale, valueStr;
  if (contains(result, '%_CATEGORY_NAME')) {
    valueStr = $getRowName_0(this$static, cell);
    if (this$static.sGraph) {
      scale = $getCategoryScale(this$static.sGraph);
      !!scale && instanceOf(scale, 36) && (valueStr = $getOutputFormattedRowName(castTo(scale, 36), cell.row, valueStr, cell));
    }
    result = replaceMacroWithValue(result, '%_CATEGORY_NAME', valueStr);
  }
  return result;
}

function $replaceCATEGORY_NUMBER(cell, result){
  contains(result, '%_CATEGORY_NUMBER') && (result = replaceMacroWithValue(result, '%_CATEGORY_NUMBER', '' + ($getCurRowIndex(cell) + 1)));
  return result;
}

function $replaceCATEGORY_TOTAL(component, cell, numberFormatter, result){
  var graphType, secondScaleNumFormatter, useSecondaryScale, valueStr;
  if (contains(result, '%_CATEGORY_TOTAL') && !!component.getData()) {
    useSecondaryScale = false;
    if (instanceOf(component, 40)) {
      graphType = castTo(component, 40).graphType;
      if (graphType == 4 || graphType == 5) {
        useSecondaryScale = true;
        secondScaleNumFormatter = $getValueScaleByNumber(castTo(component, 40), 1).numberFormatter;
        if (secondScaleNumFormatter) {
          numberFormatter = new NumberFormatter_0(secondScaleNumFormatter);
          numberFormatter.autoAbbreviate = false;
          numberFormatter.needsNewNumFormat = true;
        }
      }
       else if ((graphType == 0 || graphType == 1) && !!$getValueScaleByNumber(castTo(component, 40), 1))
        return $replaceCATEGORY_TOTAL_forDualScaleBar(component, cell, numberFormatter, result);
    }
    valueStr = $formatNumber_1(numberFormatter, $getRowSum(cell, useSecondaryScale));
    result = replaceMacroWithValue(result, '%_CATEGORY_TOTAL', valueStr);
  }
  return result;
}

function $replaceCATEGORY_TOTAL_forDualScaleBar(component, cell, numberFormatter, result){
  var valueStr;
  if (instanceOf(component, 40)) {
    valueStr = $formatNumber_1(numberFormatter, $getRowSum(cell, false) + $getRowSum(cell, true));
    result = replaceMacroWithValue(result, '%_CATEGORY_TOTAL', valueStr);
    return result;
  }
  return result;
}

function $replaceCLOSE_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_CLOSE_VALUE'))
    return $replaceMetadataValue(cell, '%_CLOSE_VALUE', 2, numberFormatter, result);
  return result;
}

function $replaceENDDATE(cell, result){
  if (contains(result, '%_ENDDATE'))
    return $replaceMetadataValueStr(cell, '%_ENDDATE', 0, result);
  return result;
}

function $replaceFORECAST_VALUE(cell, numberFormatter, result){
  var value_0, valueStr;
  if (contains(result, '%_FORECAST_VALUE')) {
    value_0 = cell.projectedValue;
    valueStr = $formatNumber_1(numberFormatter, value_0);
    result = replaceMacroWithValue(result, '%_FORECAST_VALUE', valueStr);
  }
  return result;
}

function $replaceGRAPH_TOTAL(component, cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_GRAPH_TOTAL') && !!component.getData()) {
    valueStr = $formatNumber_1(numberFormatter, $getGridTotal_0(component.getData(), $isOnSecondaryScale(cell)));
    result = replaceMacroWithValue(result, '%_GRAPH_TOTAL', valueStr);
  }
  return result;
}

function $replaceGROUP_NAME(this$static, cell, result){
  var valueStr;
  if (contains(result, '%_GROUP_NAME')) {
    valueStr = cell.altName;
    (valueStr == null || valueStr.length == 0) && (valueStr = $getColName_0(cell));
    (valueStr == null || valueStr.length == 0 && !this$static.sGraph) && (valueStr = $getRowName_0(this$static, cell));
    result = replaceMacroWithValue(result, '%_GROUP_NAME', valueStr);
  }
  return result;
}

function $replaceHIGH_VALUE(cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_HIGH_VALUE')) {
    valueStr = $formatNumber_1(numberFormatter, $getValue(cell));
    result = replaceMacroWithValue(result, '%_HIGH_VALUE', valueStr);
  }
  return result;
}

function $replaceITEM(this$static, cell, result){
  var valueStr;
  if (contains(result, '%_ITEM')) {
    valueStr = $getRowName_0(this$static, cell);
    result = replaceMacroWithValue(result, '%_ITEM', valueStr);
  }
  return result;
}

function $replaceITEM_NAME(this$static, cell, result){
  var valueStr;
  if (contains(result, '%_ITEM_NAME')) {
    valueStr = $getRowName_0(this$static, cell);
    result = replaceMacroWithValue(result, '%_ITEM_NAME', valueStr);
  }
  return result;
}

function $replaceLOW_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_LOW_VALUE'))
    return $replaceMetadataValue(cell, '%_LOW_VALUE', 0, numberFormatter, result);
  return result;
}

function $replaceMEDIAN_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_MEDIAN'))
    return $replaceMetadataValue(cell, '%_MEDIAN', 3, numberFormatter, result);
  return result;
}

function $replaceMetadataPercentValue(baseCell, numberFormatter, result){
  var mdCell, valueStr;
  mdCell = $getMetaDataCell(baseCell, 1);
  if (mdCell) {
    valueStr = $formatPercentNumber(numberFormatter, $getValue(mdCell), true);
    result = replaceMacroWithValue(result, '%_PERCENT_COMPLETE', valueStr);
  }
   else {
    result = replaceMacroWithValue(result, '%_PERCENT_COMPLETE', '');
  }
  return result;
}

function $replaceMetadataValue(baseCell, macro, metadataIndex, numberFormatter, result){
  var mdCell, valueStr;
  mdCell = $getMetaDataCell(baseCell, metadataIndex);
  if (mdCell) {
    valueStr = $formatNumber_1(numberFormatter, $getValue(mdCell));
    result = replaceMacroWithValue(result, macro, valueStr);
  }
   else {
    result = replaceMacroWithValue(result, macro, '');
  }
  return result;
}

function $replaceMetadataValueStr(baseCell, macro, metadataIndex, result){
  var mdCell;
  mdCell = $getMetaDataCell(baseCell, metadataIndex);
  mdCell?(result = replaceMacroWithValue(result, macro, mdCell.valueStr)):(result = replaceMacroWithValue(result, macro, ''));
  return result;
}

function $replaceNAME(this$static, cell, result){
  var valueStr;
  if (contains(result, '%_NAME')) {
    valueStr = cell.altName;
    (valueStr == null || valueStr.length == 0 && !this$static.sGraph) && (valueStr = $getRowName_0(this$static, cell));
    result = replaceMacroWithValue(result, '%_NAME', valueStr);
  }
  return result;
}

function $replaceOPEN_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_OPEN_VALUE'))
    return $replaceMetadataValue(cell, '%_OPEN_VALUE', 1, numberFormatter, result);
  return result;
}

function $replaceORIG_CATEGORY_TOTAL(component, cell, numberFormatter, result){
  var row, valueStr;
  if (contains(result, '%_ORIG_CATEGORY_TOTAL') && !!component.getData()) {
    row = cell.row;
    valueStr = '';
    !!row && (valueStr = $formatNumber_1(numberFormatter, $getOriginalVisibleSum(row)));
    result = replaceMacroWithValue(result, '%_ORIG_CATEGORY_TOTAL', valueStr);
  }
  return result;
}

function $replaceORIG_PERCENT_OF_TOTAL(this$static, component, cell, numberFormatter, result){
  var compTotal, pctOfTotal, value_0, valueStr;
  if (contains(result, '%_ORIG_PERCENT_OF_TOTAL') && !!component.getData()) {
    compTotal = $getGridTotal_0(component.getData(), $isOnSecondaryScale(cell));
    value_0 = cell.value_0;
    valueStr = '';
    if (compTotal != 0) {
      pctOfTotal = value_0 / compTotal;
      instanceOf(component, 43) && castTo(component, 43).typeAttributes.percentOfSeriesData && $getNumCols(this$static.graph.data_0) == 1 && (pctOfTotal = value_0);
      valueStr = $formatPercentNumber(numberFormatter, pctOfTotal, true);
    }
    result = replaceMacroWithValue(result, '%_ORIG_PERCENT_OF_TOTAL', valueStr);
  }
  return result;
}

function $replaceORIG_VALUE(cell, numberFormatter, result){
  var valueStr;
  if (!!cell && contains(result, '%_ORIG_VALUE')) {
    valueStr = $formatNumber_1(numberFormatter, cell.value_0);
    result = replaceMacroWithValue(result, '%_ORIG_VALUE', valueStr);
  }
  return result;
}

function $replacePERCENT_COMPLETE(cell, numberFormatter, result){
  if (contains(result, '%_PERCENT_COMPLETE')) {
    return $replaceMetadataPercentValue(cell, numberFormatter, result);
  }
  return result;
}

function $replacePERCENT_OF_100_0(component, cell, result){
  var valueStr;
  if (contains(result, '%_PERCENT_OF_100_0') && !!component.getData()) {
    valueStr = '100%';
    $getValue(cell) == 0 && (valueStr = '0%');
    result = replaceMacroWithValue(result, '%_PERCENT_OF_100_0', valueStr);
  }
  return result;
}

function $replacePERCENT_OF_CATEGORY(this$static, component, cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_PERCENT_OF_CATEGORY') && !!component.getData()) {
    valueStr = $formatPercentNumber(numberFormatter, $getPctOfRowValue_0(cell, $isOnSecondaryScale(cell)), true);
    this$static.graph.graphType == 16?(valueStr = $formatPercentNumber(numberFormatter, $getPctOfColValue(cell), true)):($isBarOnly(this$static.graph) || $isLineBar(this$static.graph)) && (valueStr = $formatPercentNumber(numberFormatter, $getPctOfAbsRowValue(cell, $isOnSecondaryScale(cell)), true));
    result = replaceMacroWithValue(result, '%_PERCENT_OF_CATEGORY', valueStr);
  }
  return result;
}

function $replacePERCENT_OF_PREVIOUS(this$static, component, cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_PERCENT_OF_PREVIOUS') && !!component.getData()) {
    valueStr = $formatPercentNumber(numberFormatter, $getPercentOfPreviousVal(this$static.graph.data_0, $getCurRowIndex(cell)), true);
    result = replaceMacroWithValue(result, '%_PERCENT_OF_PREVIOUS', valueStr);
  }
  return result;
}

function $replacePERCENT_OF_TOTAL(this$static, component, cell, numberFormatter, result){
  var compTotal, pctOfTotal, value_0, valueStr;
  if (contains(result, '%_PERCENT_OF_TOTAL') && !!component.getData()) {
    instanceOf(this$static.graph.handler, 143)?(compTotal = castTo(this$static.graph.handler, 143).graphTotal):(compTotal = $getGridTotal_0(component.getData(), $isOnSecondaryScale(cell)));
    value_0 = $getValue(cell);
    valueStr = '';
    if (compTotal != 0) {
      pctOfTotal = value_0 / compTotal;
      instanceOf(component, 43) && castTo(component, 43).typeAttributes.percentOfSeriesData && $getNumCols(this$static.graph.data_0) == 1 && (pctOfTotal = value_0 / 100);
      valueStr = $formatPercentNumber(numberFormatter, pctOfTotal, true);
    }
    result = replaceMacroWithValue(result, '%_PERCENT_OF_TOTAL', valueStr);
  }
  return result;
}

function $replacePOINT_NUMBER(this$static, cell, numberFormatter, result){
  if (contains(result, '%_POINT_NUMBER'))
    return $replaceMetadataValue(cell, '%_POINT_NUMBER', $getMetaDataSize(this$static.graph.data_0) - 1, numberFormatter, result);
  return result;
}

function $replaceQ1_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_FIRST_QUARTILE'))
    return $replaceMetadataValue(cell, '%_FIRST_QUARTILE', 1, numberFormatter, result);
  return result;
}

function $replaceQ3_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_THIRD_QUARTILE'))
    return $replaceMetadataValue(cell, '%_THIRD_QUARTILE', 2, numberFormatter, result);
  return result;
}

function $replaceRANGENAME(this$static, cell, result){
  var handler;
  if (contains(result, '%_RANGENAME')) {
    if (this$static.graph.graphType == 16) {
      handler = castTo(this$static.graph.handler, 151);
      result = replaceMacroWithValue(result, '%_RANGENAME', $getRangeNameForValue(handler, cell));
    }
  }
  return result;
}

function $replaceSERIES_FIRST_VALUE(this$static, cell, numberFormatter, result){
  var col, firstCell, firstRow, index_0, valueStr;
  if (contains(result, '%_SERIES_FIRST_VALUE')) {
    valueStr = '';
    if (!!this$static.graph && !!this$static.graph.data_0) {
      col = cell.column;
      index_0 = this$static.graph.data_0.cols_0.indexOf_0(col);
      firstRow = $getFirstVisibleRow(this$static.graph.data_0);
      firstCell = castTo($get_1(firstRow.cellMap, valueOf(index_0)), 16);
      !!firstCell && (valueStr = $formatNumber_1(numberFormatter, $getValue(firstCell)));
    }
    result = replaceMacroWithValue(result, '%_SERIES_FIRST_VALUE', valueStr);
  }
  return result;
}

function $replaceSERIES_LAST_VALUE(this$static, cell, numberFormatter, result){
  var col, index_0, lastCell, lastRow, valueStr;
  if (contains(result, '%_SERIES_LAST_VALUE')) {
    valueStr = '';
    if (!!this$static.graph && !!this$static.graph.data_0) {
      col = cell.column;
      index_0 = this$static.graph.data_0.cols_0.indexOf_0(col);
      lastRow = $getLastVisibleRow(this$static.graph.data_0);
      lastCell = castTo($get_1(lastRow.cellMap, valueOf(index_0)), 16);
      !!lastCell && (valueStr = $formatNumber_1(numberFormatter, $getValue(lastCell)));
    }
    result = replaceMacroWithValue(result, '%_SERIES_LAST_VALUE', valueStr);
  }
  return result;
}

function $replaceSERIES_MAX_VALUE(cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_SERIES_MAX_VALUE')) {
    valueStr = $formatNumber_1(numberFormatter, $getColMax(cell));
    result = replaceMacroWithValue(result, '%_SERIES_MAX_VALUE', valueStr);
  }
  return result;
}

function $replaceSERIES_MIN_VALUE(cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_SERIES_MIN_VALUE')) {
    valueStr = $formatNumber_1(numberFormatter, $getColMin(cell));
    result = replaceMacroWithValue(result, '%_SERIES_MIN_VALUE', valueStr);
  }
  return result;
}

function $replaceSERIES_NAME(this$static, cell, result){
  var valueStr;
  if (contains(result, '%_SERIES_NAME')) {
    valueStr = cell.altName;
    if (valueStr == null || valueStr.length == 0) {
      valueStr = $getColName_0(cell);
      valueStr != null && this$static.graph.graphType == 16 && (valueStr = $getNameAsFormattedDateStrIfDate(this$static, cell, valueStr));
    }
    (valueStr == null || valueStr.length == 0 && !this$static.sGraph) && (valueStr = $getRowName_0(this$static, cell));
    result = replaceMacroWithValue(result, '%_SERIES_NAME', valueStr);
  }
  return result;
}

function $replaceSERIES_NUMBER(cell, result){
  contains(result, '%_SERIES_NUMBER') && (result = replaceMacroWithValue(result, '%_SERIES_NUMBER', '' + ($getCurColIndex(cell) + 1)));
  return result;
}

function $replaceSERIES_TOTAL(cell, numberFormatter, result){
  var valueStr;
  if (contains(result, '%_SERIES_TOTAL')) {
    valueStr = $formatNumber_1(numberFormatter, $getColSum(cell));
    result = replaceMacroWithValue(result, '%_SERIES_TOTAL', valueStr);
  }
  return result;
}

function $replaceSTARTDATE(cell, result){
  var valueStr;
  if (contains(result, '%_STARTDATE')) {
    valueStr = cell.valueStr;
    result = replaceMacroWithValue(result, '%_STARTDATE', valueStr);
  }
  return result;
}

function $replaceTF1_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF1_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 0);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF1_NAME', valueStr);
  }
  return result;
}

function $replaceTF1_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF1_VALUE'))
    return $replaceMetadataValue(cell, '%_TF1_VALUE', 0, numberFormatter, result);
  return result;
}

function $replaceTF2_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF2_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 1);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF2_NAME', valueStr);
  }
  return result;
}

function $replaceTF2_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF2_VALUE'))
    return $replaceMetadataValue(cell, '%_TF2_VALUE', 1, numberFormatter, result);
  return result;
}

function $replaceTF3_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF3_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 2);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF3_NAME', valueStr);
  }
  return result;
}

function $replaceTF3_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF3_VALUE'))
    return $replaceMetadataValue(cell, '%_TF3_VALUE', 2, numberFormatter, result);
  return result;
}

function $replaceTF4_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF4_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 3);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF4_NAME', valueStr);
  }
  return result;
}

function $replaceTF4_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF4_VALUE'))
    return $replaceMetadataValue(cell, '%_TF4_VALUE', 3, numberFormatter, result);
  return result;
}

function $replaceTF5_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF5_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 4);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF5_NAME', valueStr);
  }
  return result;
}

function $replaceTF5_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF5_VALUE'))
    return $replaceMetadataValue(cell, '%_TF5_VALUE', 4, numberFormatter, result);
  return result;
}

function $replaceTF6_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF6_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 5);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF6_NAME', valueStr);
  }
  return result;
}

function $replaceTF6_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF6_VALUE'))
    return $replaceMetadataValue(cell, '%_TF6_VALUE', 5, numberFormatter, result);
  return result;
}

function $replaceTF7_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF7_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 6);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF7_NAME', valueStr);
  }
  return result;
}

function $replaceTF7_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF7_VALUE'))
    return $replaceMetadataValue(cell, '%_TF7_VALUE', 6, numberFormatter, result);
  return result;
}

function $replaceTF8_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF8_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 7);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF8_NAME', valueStr);
  }
  return result;
}

function $replaceTF8_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF8_VALUE'))
    return $replaceMetadataValue(cell, '%_TF8_VALUE', 7, numberFormatter, result);
  return result;
}

function $replaceTF9_NAME(component, result){
  var mdInfo, valueStr;
  if (contains(result, '%_TF9_NAME') && !!component.getData()) {
    mdInfo = $getMetadataInfo(component.getData(), 8);
    valueStr = '';
    !!mdInfo && $getName(mdInfo) != null && (valueStr = $getName(mdInfo));
    result = replaceMacroWithValue(result, '%_TF9_NAME', valueStr);
  }
  return result;
}

function $replaceTF9_VALUE(cell, numberFormatter, result){
  if (contains(result, '%_TF9_VALUE'))
    return $replaceMetadataValue(cell, '%_TF9_VALUE', 8, numberFormatter, result);
  return result;
}

function $replaceVALUE(this$static, cell, numberFormatter, result){
  var value_0, valueStr;
  if (contains(result, '%_VALUE')) {
    value_0 = $getValueOrProjection(cell, true);
    $isLineOnly(this$static.graph) && (value_0 = $getValue(cell));
    !isNaN_0(cell.altValue) && !!cell.column && cell.column.isRunningTotal && (value_0 = cell.altValue);
    valueStr = $formatNumber_1(numberFormatter, value_0);
    result = replaceMacroWithValue(result, '%_VALUE', valueStr);
  }
  return result;
}

function $replaceXVALUE(this$static, cell, result){
  var numberFormatter, oldAutoAbbrevState, scale, temp, valueStr;
  if (contains(result, '%_XVALUE')) {
    if (instanceOf(this$static.sGraph.handler, 121)) {
      numberFormatter = $getXValueFormatter(castTo(this$static.sGraph.handler, 121), instanceOf(this$static, 122));
      if (cell.valueStr != null) {
        temp = cell.valueStr;
        neq(cell.timeMS, 0) && (temp = $stripTfromTimeNameAndAddTimeZone(this$static, temp));
        isNaN_0($getValue(cell)) || (temp = $formatNumber_1(numberFormatter, $getValue(cell)));
        result = replaceMacroWithValue(result, '%_XVALUE', temp);
      }
       else {
        valueStr = $formatNumber_1(numberFormatter, $getValue(cell));
        result = replaceMacroWithValue(result, '%_XVALUE', valueStr);
      }
    }
     else {
      numberFormatter = this$static.graph.numberFormatter;
      scale = $getXScale(this$static.sGraph, false);
      !!scale && instanceOf(scale, 27) && !instanceOf(scale, 56) && (numberFormatter = castTo(scale, 27).numberFormatter);
      oldAutoAbbrevState = numberFormatter.autoAbbreviate;
      numberFormatter.autoAbbreviate = false;
      numberFormatter.needsNewNumFormat = true;
      if (cell.valueStr != null)
        result = replaceMacroWithValue(result, '%_XVALUE', cell.valueStr);
      else {
        valueStr = $formatNumber_1(numberFormatter, $getValue(cell));
        result = replaceMacroWithValue(result, '%_XVALUE', valueStr);
      }
      numberFormatter.autoAbbreviate = oldAutoAbbrevState;
      numberFormatter.needsNewNumFormat = true;
    }
  }
  return result;
}

function $replaceYVALUE(this$static, cell, result){
  var numberFormatter, oldAutoAbbrevState, scale;
  if (contains(result, '%_YVALUE')) {
    if (instanceOf(this$static.sGraph.handler, 121)) {
      numberFormatter = $getYValueFormatter(castTo(this$static.sGraph.handler, 121), instanceOf(this$static, 122));
      result = $replaceMetadataValue(cell, '%_YVALUE', 0, numberFormatter, result);
    }
     else {
      numberFormatter = this$static.graph.numberFormatter;
      scale = $getYScale(this$static.sGraph, false);
      !!scale && instanceOf(scale, 27) && (numberFormatter = castTo(scale, 27).numberFormatter);
      oldAutoAbbrevState = numberFormatter.autoAbbreviate;
      numberFormatter.autoAbbreviate = false;
      numberFormatter.needsNewNumFormat = true;
      result = $replaceMetadataValue(cell, '%_YVALUE', 0, numberFormatter, result);
      numberFormatter.autoAbbreviate = oldAutoAbbrevState;
      numberFormatter.needsNewNumFormat = true;
    }
  }
  return result;
}

function $setFormatString(this$static, formatString){
  this$static.formatString = formatString;
}

function $setJustificationByString(this$static, justificationStr){
  this$static.justificationOverride = getHorizontalAlignFromString(justificationStr);
}

function $setPositionByString(this$static, positionStr){
  this$static.position = getPositionByString(positionStr);
}

function $setRotated(this$static, rotated){
  this$static.rotated = rotated;
}

function $setShowLabelsOn(this$static, showLabelsOnStr){
  showLabelsOnStr != null && ($equalsIgnoreCase(showLabelsOnStr, 'lines only') || $equalsIgnoreCase(showLabelsOnStr, 'symbols only'))?(this$static.showLabelsOn = 2):showLabelsOnStr != null && $equalsIgnoreCase(showLabelsOnStr, 'bars only')?(this$static.showLabelsOn = 1):(this$static.showLabelsOn = 0);
}

function $setShowOne(this$static, showOneLabel){
  this$static.showOneLabel = showOneLabel;
}

function $setShowTotal(this$static, showTotal){
  this$static.showTotal = showTotal;
}

function $stripTfromTimeNameAndAddTimeZone(this$static, label_0){
  if (label_0.indexOf('T') != -1 || label_0.indexOf(':') != -1) {
    label_0 = $replaceAll(label_0, 'T', ' ');
    this$static.graph.chart.timeZone != null && (label_0 += ' ' + this$static.graph.chart.timeZone);
  }
  return label_0;
}

function DataLabelBase(component){
  if (!!component && instanceOf(component, 43)) {
    this.graph = castTo(component, 43);
    instanceOf(this.graph, 40) && (this.sGraph = castTo(this.graph, 40));
  }
  this.font_0 = new CFFont_0(null, 11, $getTextColor(component.chart.palette));
}

function getPositionByString(positionStr){
  var position;
  position = 0;
  if (positionStr != null) {
    positionStr = positionStr.toLowerCase();
    switch (positionStr) {
      case 'outside top':
        position = 0;
        break;
      case 'outside right':
        position = 4;
        break;
      case 'inside top':
        position = 1;
        break;
      case 'inside right':
        position = 5;
        break;
      case 'inside bottom':
        position = 2;
        break;
      case 'outside left':
        position = 6;
        break;
      case 'inside left':
        position = 7;
        break;
      case 'center':
        position = 3;
        break;
      case 'above':
        position = 8;
        break;
      case 'below':
        position = 9;
        break;
      case 'left':
        position = 12;
        break;
      case 'right':
        position = 13;
        break;
      case 'right leader':
        position = 14;
    }
  }
  return position;
}

function replaceTOOLTIP(macro, mapping, cell, component, isHover, result){
  var firstRowCell, mdCell, mdIndex, mdInfo, mdNumFormatter, row, type_0, value_0, valueStr;
  if (contains(result, macro) && !!component.getData()) {
    valueStr = '';
    mdIndex = $getMetDataIndexForName(component.getData(), mapping);
    if (mdIndex != -1) {
      mdInfo = $getMetadataInfo(component.getData(), mdIndex);
      type_0 = mdInfo.type_0;
      mdCell = $getMetaDataCell(cell, mdIndex);
      if (!mdCell) {
        row = cell.row;
        if (!!row && !!$getFirstCell(row)) {
          firstRowCell = $getFirstCell(row);
          !!firstRowCell && (mdCell = $getMetaDataCell(firstRowCell, mdIndex));
        }
      }
      if (mdCell) {
        if ($equals_2(type_0, 'STRING')) {
          valueStr = mdCell.valueStr;
        }
         else if ($equals_2(type_0, 'LONG') || $equals_2(type_0, 'DOUBLE') || $equals_2(type_0, 'DECIMAL')) {
          value_0 = $getValue(mdCell);
          if (mdInfo.format) {
            mdNumFormatter = new NumberFormatter;
            $applyColumnFormat(mdNumFormatter, mdInfo.format);
            isHover && (mdNumFormatter.autoAbbreviate = false , mdNumFormatter.needsNewNumFormat = true);
            valueStr = $formatNumber_1(mdNumFormatter, value_0);
          }
           else {
            valueStr = '' + value_0;
          }
        }
         else {
          valueStr = mdCell.valueStr;
        }
      }
    }
    result = replaceMacroWithValue(result, macro, valueStr);
  }
  return result;
}

function replaceTOOLTIPMap(macro, cell, component, result){
  var numFormatter, type_0, value_0, valueStr;
  if (contains(result, macro) && !!component.data_0) {
    valueStr = '';
    if (cell) {
      type_0 = 'STRING';
      !!cell.column && (type_0 = cell.column.type_0);
      if ($equals_2(type_0, 'STRING')) {
        valueStr = cell.valueStr;
      }
       else if ($equals_2(type_0, 'LONG') || $equals_2(type_0, 'DOUBLE') || $equals_2(type_0, 'DECIMAL')) {
        value_0 = $getValue(cell);
        if (cell.column.format) {
          numFormatter = new NumberFormatter;
          $applyColumnFormat(numFormatter, cell.column.format);
          numFormatter.autoAbbreviate = false;
          numFormatter.needsNewNumFormat = true;
          valueStr = $formatNumber_1(numFormatter, value_0);
        }
         else {
          valueStr = '' + value_0;
        }
      }
       else {
        valueStr = cell.valueStr;
      }
    }
    result = replaceMacroWithValue(result, macro, valueStr);
  }
  return result;
}

defineClass(175, 1, {}, DataLabelBase);
_.allowOverlap = false;
_.bkgFillAlpha = 255;
_.justificationOverride = -1;
_.position = 0;
_.rotated = false;
_.showBackground = false;
_.showIfZeroValue = false;
_.showLabelsOn = 0;
_.showOneLabel = false;
_.showTotal = false;
var Lcom_domo_charting_graphs_DataLabelBase_2_classLit = createForClass('com.domo.charting.graphs', 'DataLabelBase', 175);
function $addDataLabelIfNotOverlapping(this$static, rnd, text_0, textPosRect, primaryExistingRects, secondaryExistingRects){
  var bkgFill, bkgRect, bkgShape, ge, withWhiteSpace;
  withWhiteSpace = $getRectWithWhiteSpace(this$static, textPosRect);
  if (this$static.allowOverlap || !$intersectsWithList(withWhiteSpace, secondaryExistingRects)) {
    if ((this$static.allowOverlap || !$intersectsWithList(withWhiteSpace, primaryExistingRects)) && textPosRect.width_0 > 0 && textPosRect.height_0 > 0) {
      ge = new GraphicElement;
      if (this$static.showBackground) {
        bkgRect = new CFRect(textPosRect.x_0, textPosRect.y_0, textPosRect.width_0, textPosRect.height_0);
        if (this$static.rotated) {
          textPosRect = new CFRect(textPosRect.x_0, textPosRect.y_0, textPosRect.width_0, textPosRect.height_0);
          $offset(textPosRect, $getDescender(this$static.font_0, rnd), 0);
          bkgRect.height_0 = bkgRect.height_0 + 6;
          bkgRect.y_0 -= 3;
        }
         else {
          bkgRect.width_0 = bkgRect.width_0 + 6;
          bkgRect.x_0 -= 3;
        }
        bkgFill = new CFFill_1('FFFFFFB0');
        !!this$static.bkgFillColor && $setColor_0(bkgFill, new CFColor_0(this$static.bkgFillColor.red, this$static.bkgFillColor.green, this$static.bkgFillColor.blue, this$static.bkgFillAlpha));
        bkgShape = new CFShape_0(new CFPath_4(bkgRect, 2), bkgFill, null);
        $addShape_0(ge, bkgShape, null);
      }
      $addTextItems(ge, $getTextItemForPosition(this$static, rnd, this$static.font_0, text_0, textPosRect, this$static.position));
      $addFrontGraphicElement_0(this$static.graph, ge);
      $add_1(this$static.labels, ge);
      primaryExistingRects.array[primaryExistingRects.array.length] = withWhiteSpace;
      return true;
    }
  }
  return false;
}

function $drawDataLabels(this$static, rnd, rotateIfSkipped){
  var allDisplayed, preDLFrontCount, preDLRotated;
  preDLFrontCount = this$static.graph.frontGeAry.size_1();
  preDLRotated = this$static.rotated;
  allDisplayed = $drawDataLabelsAndReportDrawn(this$static, rnd);
  if (!allDisplayed && !this$static.rotated && rotateIfSkipped) {
    this$static.rotated = true;
    this$static.labels.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    preDLFrontCount == 0?clearGraphicElementArray(this$static.graph.frontGeAry):(this$static.graph.frontGeAry = this$static.graph.frontGeAry.subList(0, preDLFrontCount - 1));
    allDisplayed = $drawDataLabelsAndReportDrawn(this$static, rnd);
    if (!allDisplayed) {
      this$static.rotated = false;
      this$static.labels.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      preDLFrontCount == 0?clearGraphicElementArray(this$static.graph.frontGeAry):(this$static.graph.frontGeAry = this$static.graph.frontGeAry.subList(0, preDLFrontCount - 1));
      $drawDataLabelsAndReportDrawn(this$static, rnd);
    }
  }
  this$static.rotated = preDLRotated;
}

function $drawDataLabelsAndReportDrawn(this$static, rnd){
  var allDisplayed, existingLableRects, i, index_0, shpInfo, shpInfo$iterator, shpInfoAry, srsInfo, srsInfo$iterator, tmpShowTotal, value_0;
  allDisplayed = true;
  existingLableRects = new ArrayList;
  if (!!this$static.graph && (this$static.formatString != null || this$static.showTotal) && !this$static.isHidden) {
    if (this$static.showOneLabel || this$static.showTotal) {
      shpInfoAry = initUnidimensionalArray(Lcom_domo_charting_graphs_SrsShapeInfo_2_classLit, $intern_9, 18, $getNumRows(this$static.graph.data_0), 0, 1);
      for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 19);
        for (shpInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
          shpInfo = castTo($next_3(shpInfo$iterator), 18);
          !!shpInfo.cell && (shpInfoAry[$getCurRowIndex(shpInfo.cell)] = shpInfo);
        }
      }
      for (i = 0; i < shpInfoAry.length; i++) {
        if (shpInfoAry[i]) {
          value_0 = 0;
          !!shpInfoAry[i].cell && (value_0 = $getValue(shpInfoAry[i].cell));
          (value_0 != 0 || this$static.showIfZeroValue || this$static.showOneLabel || this$static.showTotal) && (this$static.graph.handler.drawDataLabel(this$static, rnd, existingLableRects, shpInfoAry[i], null) || (allDisplayed = false));
        }
      }
    }
    if (!this$static.showOneLabel && this$static.formatString != null) {
      tmpShowTotal = this$static.showTotal;
      this$static.showTotal = false;
      for (index_0 = this$static.graph.seriesShapes.array.length - 1; index_0 >= 0; index_0--) {
        srsInfo = castTo($get_2(this$static.graph.seriesShapes, index_0), 19);
        allDisplayed = $drawDatalabelsForASeries(this$static, rnd, allDisplayed, existingLableRects, srsInfo, null);
      }
      this$static.showTotal = tmpShowTotal;
    }
  }
  return allDisplayed;
}

function $drawDatalabelsForASeries(this$static, rnd, allDisplayed, existingLableRects, srsInfo, data_0){
  var shpInfo, shpInfo$iterator, value_0;
  if (srsInfo) {
    for (shpInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      value_0 = 0;
      !!shpInfo.cell && (value_0 = $getValue(shpInfo.cell));
      (value_0 != 0 || this$static.showIfZeroValue || this$static.graph.graphType == 12 || this$static.showOneLabel) && (this$static.graph.handler.drawDataLabel(this$static, rnd, existingLableRects, shpInfo, data_0) || (allDisplayed = false));
    }
  }
  return allDisplayed;
}

function $getFormattedDataLabel(this$static, cell){
  var dlText, numberFormatter;
  numberFormatter = this$static.graph.getDataLabelFormatterForCell(cell);
  dlText = $getFormattedText(this$static, this$static.formatString, cell, numberFormatter, this$static.graph, false);
  return dlText;
}

function $getRectForPositionFromPoint(this$static, rnd, currentPoint, text_0){
  return $getTextRectForPoint(this$static, rnd, this$static.font_0, currentPoint, text_0, this$static.position, false, true);
}

function $getRectWithWhiteSpace(this$static, textPosRect){
  var withWhiteSpace;
  withWhiteSpace = new CFRect_0(textPosRect);
  if (this$static.rotated) {
    $setY_0(withWhiteSpace, withWhiteSpace.y_0 - 3);
    $setHeight(withWhiteSpace, withWhiteSpace.height_0 + 6);
  }
   else {
    $setX_0(withWhiteSpace, withWhiteSpace.x_0 - 3);
    $setWidth(withWhiteSpace, withWhiteSpace.width_0 + 6);
  }
  return withWhiteSpace;
}

function $hideDataLabels(this$static){
  var ge, ge$iterator;
  for (ge$iterator = new ArrayList$1(this$static.labels); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 12);
    $removeElementFromFrontGeAry(this$static.graph, ge);
  }
}

function $removeDataLabels(this$static){
  $hideDataLabels(this$static);
  this$static.labels.array.length > 0 && (this$static.labels.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
}

function $showDataLabels(this$static){
  var ge, ge$iterator;
  for (ge$iterator = new ArrayList$1(this$static.labels); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 12);
    $addFrontGraphicElement_0(this$static.graph, ge);
  }
}

function DataLabel(graph){
  DataLabelBase.call(this, graph);
  this.labels = new ArrayList;
}

defineClass(161, 175, {}, DataLabel);
_.isHidden = false;
var Lcom_domo_charting_graphs_DataLabel_2_classLit = createForClass('com.domo.charting.graphs', 'DataLabel', 161);
function $createDrawObjects_0(this$static){
  var bottomScale, buttonColor, graph, hoverShape, minusPath, plusPath, rect;
  clearGraphicElementArray(this$static.geAry);
  buttonColor = this$static.buttonStrokeColor;
  this$static.disabled && (buttonColor = this$static.disabledButtonStrokeColor);
  if (this$static.component) {
    graph = this$static.component;
    bottomScale = $getScaleByPosition(graph, 1);
    if (!!bottomScale && !!bottomScale.bnds && !!this$static.bnds) {
      rect = new CFRect(this$static.bnds.x_0 + (DEFAULT_WIDTH - (BUTTON_SIZE + 1)), bottomScale.bnds.y_0 - BUTTON_SIZE, BUTTON_SIZE, BUTTON_SIZE);
      new CFPath_4(rect, 3);
      this$static.geMinus = new GraphicElement_0(new CFShape_1(rect, null, new CFStroke(buttonColor, 1)));
      minusPath = new CFPath;
      $add(minusPath, new CFPathElement_0(0, rect.x_0 + 5, rect.y_0 + rect.height_0 / 2));
      $add(minusPath, new CFPathElement_0(1, rect.x_0 + rect.width_0 - 5, rect.y_0 + rect.height_0 / 2));
      $addShape(this$static.geMinus, new CFShape_0(minusPath, null, new CFStroke(buttonColor, 1)));
      this$static.geAry.add_0(this$static.geMinus);
      if (!this$static.disabled) {
        if (graph.chart.mobile) {
          rect.width_0 = 40;
          rect.height_0 = 40;
        }
        hoverShape = new CFShape_1(rect, new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
        hoverShape.drillFilter = '{"internal": "forecast minus"}';
        this$static.geAry.add_0(new GraphicElement_1(hoverShape, this$static));
      }
      rect = new CFRect(this$static.bnds.x_0 + (DEFAULT_WIDTH - (BUTTON_SIZE + 1)), bottomScale.bnds.y_0 - (BUTTON_SIZE * 2 + 4), BUTTON_SIZE, BUTTON_SIZE);
      new CFPath_4(rect, 3);
      this$static.gePlus = new GraphicElement_0(new CFShape_1(rect, null, new CFStroke(buttonColor, 1)));
      plusPath = new CFPath;
      $add(plusPath, new CFPathElement_0(0, rect.x_0 + 5, rect.y_0 + rect.height_0 / 2));
      $add(plusPath, new CFPathElement_0(1, rect.x_0 + rect.width_0 - 5, rect.y_0 + rect.height_0 / 2));
      $add(plusPath, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2, rect.y_0 + 5));
      $add(plusPath, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0 - 5));
      $addShape(this$static.gePlus, new CFShape_0(plusPath, null, new CFStroke(buttonColor, 1)));
      this$static.geAry.add_0(this$static.gePlus);
      if (!this$static.disabled) {
        if (graph.chart.mobile) {
          rect.width_0 = 40;
          $setY_0(rect, rect.y_0 + rect.height_0 - 40);
          rect.height_0 = 40;
        }
        hoverShape = new CFShape_1(rect, new CFFill(($clinit_CFColor() , TRANSPARENT)), null);
        hoverShape.drillFilter = '{"internal": "forecast plus"}';
        this$static.geAry.add_0(new GraphicElement_1(hoverShape, this$static));
      }
    }
  }
}

function $formatFromGraph_0(this$static, rnd){
  if (!this$static.graph || !supportsForecastFromScale(this$static.graph, true) || !!this$static.graph.data_0 && ($hasADateTimeField(this$static.graph.data_0) || !$hasTimeData(this$static.graph.data_0)) || $isTrellis(this$static.graph))
    return;
  if (!this$static.bnds)
    return;
  this$static.rnd = rnd;
  clearGraphicElementArray(this$static.geAry);
  !!this$static.component && $setWidth(this$static.bnds, DEFAULT_WIDTH);
  this$static.needsFormat = false;
}

function $freeResources_14(this$static, dataToKeep){
  $freeResources_2(this$static, dataToKeep);
  this$static.component = null;
}

function $moveRelativeToGraphBounds_0(this$static, annotationView, legend){
  var annotLegendRight, grphBnds;
  annotLegendRight = 0;
  !!annotationView && !!annotationView.bnds && annotationView.position == 2 && (annotLegendRight += annotationView.bnds.width_0);
  !!legend && !!legend.bnds && legend.position == 2 && (annotLegendRight += legend.bnds.width_0);
  grphBnds = this$static.component.bnds;
  !!this$static.component && this$static.component.textAndTicksInBounds && !!this$static.bnds && $setX_0(this$static.bnds, grphBnds.x_0 + grphBnds.width_0 - (this$static.bnds.width_0 + annotLegendRight));
}

function $setButtonStrokeColor(geBtn, color_0){
  var shape_0, shape$iterator;
  if (!!geBtn && !!color_0) {
    for (shape$iterator = new ArrayList$1(geBtn.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
      shape_0 = castTo($next_3(shape$iterator), 6);
      !!shape_0.stroke_0 && !!shape_0.stroke_0.color_0 && $setColor_2(shape_0.stroke_0, color_0);
    }
  }
}

function $setEnabled(this$static, value_0){
  if (this$static.disabled != !value_0) {
    this$static.disabled = !value_0;
    $createDrawObjects_0(this$static);
  }
}

function $setInitialBounds_0(this$static){
  var grphBnds;
  if (!this$static.graph || !supportsForecastFromScale(this$static.graph, true) || !!this$static.graph.data_0 && ($hasADateTimeField(this$static.graph.data_0) || !$hasTimeData(this$static.graph.data_0)) || $isTrellis(this$static.graph))
    return;
  grphBnds = this$static.component.bnds;
  this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, DEFAULT_WIDTH, grphBnds.height_0);
}

function ForecastUIPanel(chart, component){
  ComponentCSR.call(this, chart, 'forecastUIPanel');
  this.buttonStrokeColor = new CFColor_2('#CDCDCD');
  this.disabledButtonStrokeColor = new CFColor_2('#EEEEEE');
  this.hoveredButtonStrokeColor = new CFColor_2('#000000');
  this.component = component;
  !!component && (this.graph = component);
}

function supportsForecastFromScale(graph, forUIControls){
  var badgeType;
  badgeType = getBadgeNameFromComponent(graph);
  if (graph.chart.sizzle && !$dataIsSorted(castTo(graph.handler, 64)) && !($supportsDrag(graph) && $hasFilteredData(graph)) && !$isTrellis(graph) && ($equals_2(badgeType, 'badge_curved_symbolline') || $equals_2(badgeType, 'badge_curvedline') || $equals_2(badgeType, 'badge_rttrendline') || $equals_2(badgeType, 'badge_symbolline') || $equals_2(badgeType, 'badge_trendline') || $equals_2(badgeType, 'badge_two_trendline') || $equals_2(badgeType, 'badge_vert_bar') || $equals_2(badgeType, 'badge_vert_stackedbar') || $equals_2(badgeType, 'badge_vert_multibar') || $equals_2(badgeType, 'badge_vert_rtbar') || $equals_2(badgeType, 'badge_vert_rtstackedbar') || $equals_2(badgeType, 'badge_vert_rtmultibar'))) {
    if (!forUIControls || !graph.chart.staticImage)
      return true;
  }
  return false;
}

defineClass(150, 63, {23:1, 63:1, 150:1}, ForecastUIPanel);
_.freeResources = function freeResources_8(dataToKeep){
  $freeResources_14(this, dataToKeep);
}
;
_.handleClick = function handleClick_3(shapeClicked){
  var defaultMultiProjectionMethod, drillFilter, graph, minMaxScale, multiProjValMethod, numExtra, projValMethod, update;
  if (shapeClicked) {
    graph = null;
    !!this.component && !!this.component && (graph = this.component);
    if (graph) {
      drillFilter = shapeClicked.drillFilter;
      if (drillFilter != null && drillFilter.indexOf('forecast plus') > 0) {
        numExtra = $getNumExtraProjectedItems(graph);
        projValMethod = $getChartOptionAsString(graph, 'project_val_method');
        if (numExtra == 0 && projValMethod == null) {
          defaultMultiProjectionMethod = 'Linear Regression Recent Periods';
          multiProjValMethod = $getChartOptionAsString(graph, 'multi_projection_method');
          multiProjValMethod != null && (defaultMultiProjectionMethod = multiProjValMethod);
          graph.chartOptions.put('project_val_method', defaultMultiProjectionMethod);
        }
         else {
          ++numExtra;
          minMaxScale = castTo($getScaleByTypeNumber(graph, ST_MINMAX, 0), 67);
          !!minMaxScale && (minMaxScale.extraProjectionIncrements = numExtra);
          graph.chartOptions.put('num_forecast_items', '' + numExtra);
          $setData_0(graph, graph.data_0);
        }
        $setNeedsFormat_2(graph, true);
        graph.frontGeAry.clear_0();
        !graph.animInfo && (graph.animInfo = new AnimInfo(0, 500, 'Transition', 'linear'));
        $setAnimateDrawNeeded(this.chart);
        return true;
      }
       else if (drillFilter != null && drillFilter.indexOf('forecast minus') > 0) {
        update = false;
        numExtra = $getNumExtraProjectedItems(graph);
        projValMethod = $getChartOptionAsString(graph, 'project_val_method');
        if (numExtra == 0 && projValMethod != null && $equalsIgnoreCase(projValMethod, 'Linear Regression')) {
          $clearProjectionValues(graph.data_0);
          graph.chartOptions.remove_0('project_val_method');
          update = true;
        }
         else if (numExtra > 0) {
          --numExtra;
          minMaxScale = castTo($getScaleByTypeNumber(graph, ST_MINMAX, 0), 67);
          !!minMaxScale && (minMaxScale.extraProjectionIncrements = numExtra);
          if (numExtra > 0) {
            graph.chartOptions.put('num_forecast_items', '' + numExtra);
          }
           else {
            graph.chartOptions.remove_0('num_forecast_items');
            $clearProjectionRows(graph.data_0);
          }
          $setData_0(graph, graph.data_0);
          update = true;
        }
        if (update) {
          $setNeedsFormat_2(graph, true);
          graph.frontGeAry.clear_0();
          !graph.animInfo && (graph.animInfo = new AnimInfo(0, 500, 'Transition', 'linear'));
          $setAnimateDrawNeeded(this.chart);
          return true;
        }
      }
    }
  }
  return false;
}
;
_.setHoverData = function setHoverData_6(data_0, rnd){
  var drillFilter, fPnl;
  if (data_0 != null && instanceOf(data_0, 150)) {
    fPnl = castTo(data_0, 150);
    drillFilter = fPnl.drillFilter;
    if (drillFilter != null && drillFilter.indexOf('minus') != -1 && !this.disabled) {
      this.minusHovered = true;
      $setButtonStrokeColor(this.geMinus, this.hoveredButtonStrokeColor);
      this.plusHovered = false;
      $setButtonStrokeColor(this.gePlus, this.buttonStrokeColor);
      return true;
    }
     else if (drillFilter != null && drillFilter.indexOf('plus') != -1 && !this.disabled) {
      this.minusHovered = false;
      $setButtonStrokeColor(this.geMinus, this.buttonStrokeColor);
      this.plusHovered = true;
      $setButtonStrokeColor(this.gePlus, this.hoveredButtonStrokeColor);
      return true;
    }
     else if (this.minusHovered || this.plusHovered) {
      this.minusHovered = false;
      this.plusHovered = false;
      $setButtonStrokeColor(this.geMinus, this.buttonStrokeColor);
      $setButtonStrokeColor(this.gePlus, this.buttonStrokeColor);
      return true;
    }
  }
   else if (this.minusHovered || this.plusHovered) {
    this.minusHovered = false;
    this.plusHovered = false;
    $setButtonStrokeColor(this.geMinus, this.buttonStrokeColor);
    $setButtonStrokeColor(this.gePlus, this.buttonStrokeColor);
    return true;
  }
  return false;
}
;
_.disabled = false;
_.minusHovered = false;
_.plusHovered = false;
var BUTTON_SIZE = 20, DEFAULT_WIDTH = 25;
var Lcom_domo_charting_graphs_ForecastUIPanel_2_classLit = createForClass('com.domo.charting.graphs', 'ForecastUIPanel', 150);
function $addAllValuesFromOtherRowsToList(this$static, filterBase, rowInfo){
  var curIndex, dataGrid, row;
  dataGrid = this$static.data_0;
  curIndex = rowInfo.curIndex;
  while (curIndex < $getNumRows(dataGrid)) {
    row = $getRow(dataGrid, curIndex++);
    $addValue(filterBase, row.name_0);
  }
}

function $addBackGraphicElement(this$static, ge){
  $add_1(this$static.backGeAry, ge);
}

function $addFrontGraphicElement(this$static, ge){
  this$static.frontGeAry.add_1(0, ge);
}

function $addFrontGraphicElement_0(this$static, ge){
  this$static.frontGeAry.add_0(ge);
}

function $addLegendComponents(this$static, chartOptions){
  var comp, comp$iterator;
  this$static.chartOptions = chartOptions;
  this$static.isThumbnail || $addLegendsOrSubComponents(this$static, this$static.chart);
  $addDependentCompsToCompArray(this$static);
  if (this$static.dependentComps) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      instanceOf(comp, 63) && $setChartOptions(castTo(comp, 63), chartOptions);
    }
  }
}

function $addLegendsOrSubComponents(this$static, chart){
  if (chart.graphPickerPanelOpen)
    return;
  !!this$static.handler && !!this$static.bnds && this$static.handler.addLegendsOrSubComponents(chart);
}

function $addNoDataExistsMessage(this$static){
  var chartBnds, comp, comp$iterator, ge, noDataStr, ti;
  noDataStr = this$static.getLocalizedString('NO_DATA_EXISTS');
  if (!this$static.chart || !this$static.chart.dimension)
    return;
  chartBnds = new CFRect(0, 0, this$static.chart.dimension.width_0, this$static.chart.dimension.height_0);
  ti = new CFTextItem(this$static.rnd, chartBnds, noDataStr, new CFFont_0(null, 14, $getTextColor(this$static.chart.palette)), HALIGN_CENTER, VALIGN_MIDDLE);
  ge = new GraphicElement_2(ti);
  !!this$static.clipPath && (ge.clipPath = this$static.clipPath);
  this$static.geAry.add_0(ge);
  if (!!this$static.dependentComps && this$static.dependentComps.array.length > 0) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      !!comp && comp.reset_0();
    }
  }
}

function $addOrRemoveHiddenRowsIndicator(this$static){
  var cancelZoom, cancelZoomPath, closeZoomArrowBnds, closeZoomBnds, left, legend, rect, rnd, scaleFactor, theBounds, top_0;
  rnd = this$static.rnd;
  if (this$static.supportsDrag_0() && !this$static.chart.graphPickerPanelOpen && !!this$static.data_0 && $hasFilteredData(this$static) && !this$static.chart.staticImage && this$static.supportsDrag && this$static.handler.showCancelZoomIndicatorWhenFiltered()) {
    if (rnd.supportsNativeCancelZoom()) {
      rnd.showCancelZoomIndicator(true);
    }
     else {
      if (!this$static.resetHiddenRowsButton) {
        this$static.resetHiddenRowsButton = new GraphicElement;
        theBounds = this$static.bnds;
        !!this$static.getInnerBounds() && (theBounds = this$static.getInnerBounds());
        left = theBounds.x_0 + theBounds.width_0 - (this$static.zoomFilterCloseSize + 2);
        top_0 = theBounds.y_0 + this$static.zoomFilterMargin;
        scaleFactor = $getZoomButtonScaleFactor(this$static);
        legend = $getLegend(this$static);
        !!legend && instanceOf(legend, 66) && !!legend.bnds && legend.bnds.width_0 > this$static.zoomFilterCloseSize + castTo(legend, 66).sideLegendOutsideMargin && castTo(legend, 66).rightLegendLastTop > top_0 + this$static.zoomFilterCloseSize + this$static.zoomFilterMargin && (left = theBounds.x_0 + theBounds.width_0 + castTo(legend, 66).sideLegendOutsideMargin);
        closeZoomBnds = new CFRect(left, top_0, this$static.zoomFilterCloseSize, this$static.zoomFilterCloseSize);
        closeZoomArrowBnds = new CFRect(closeZoomBnds.x_0 + this$static.zoomFilterMargin, closeZoomBnds.y_0 + this$static.zoomFilterMargin, this$static.zoomFilterCloseSize - this$static.zoomFilterMargin * 2, this$static.zoomFilterCloseSize - this$static.zoomFilterMargin * 2);
        rect = new CFShape_0(new CFPath_4(closeZoomBnds, toInt_0(fromDouble_0($wnd.Math.round(4 * scaleFactor)))), new CFFill(($clinit_CFColor() , DOMO_BLUE_TRANSPARENT)), null);
        !!rect.path && (rect.path.shouldAntiAlias = true);
        rect.drillFilter = '{"internal": "close zoom"}';
        $addShape_0(this$static.resetHiddenRowsButton, rect, 'filteredClose');
        cancelZoomPath = new CFPath_7(zoomFilterClosePath);
        cancelZoomPath = $scaleAndPositionToRect(cancelZoomPath, closeZoomArrowBnds);
        cancelZoomPath.shouldAntiAlias = true;
        cancelZoom = new CFShape_0(cancelZoomPath, new CFFill(WHITE), null);
        cancelZoom.drillFilter = '{"internal": "close zoom"}';
        $addShape_0(this$static.resetHiddenRowsButton, cancelZoom, 'filteredClose');
      }
      this$static.frontGeAry.remove(this$static.resetHiddenRowsButton);
      this$static.frontGeAry.add_0(this$static.resetHiddenRowsButton);
    }
  }
   else if (this$static.supportsDrag_0()) {
    if (rnd.supportsNativeCancelZoom()) {
      rnd.showCancelZoomIndicator(false);
    }
     else {
      if (this$static.resetHiddenRowsButton) {
        this$static.frontGeAry.remove(this$static.resetHiddenRowsButton);
        this$static.resetHiddenRowsButton = null;
      }
    }
  }
}

function $addScaleMarkers(this$static, scaleMarkers){
  var i, sm, valScale, valScale2;
  this$static.scaleMarkers = scaleMarkers;
  if (!!scaleMarkers && instanceOf(this$static, 40)) {
    valScale = $getValueScaleByNumber(castTo(this$static, 40), 0);
    if (valScale) {
      valScale.scaleMarkers = null;
      for (i = 0; i < scaleMarkers.size_1(); i++) {
        sm = castTo(scaleMarkers.get_1(i), 86);
        sm.onSecondaryScale || (!valScale.scaleMarkers && (valScale.scaleMarkers = new ArrayList) , $add_1(valScale.scaleMarkers, sm));
      }
    }
    valScale2 = $getValueScaleByNumber(castTo(this$static, 40), 1);
    if (valScale2) {
      valScale2.scaleMarkers = null;
      for (i = 0; i < scaleMarkers.size_1(); i++) {
        sm = castTo(scaleMarkers.get_1(i), 86);
        sm.onSecondaryScale && (!valScale2.scaleMarkers && (valScale2.scaleMarkers = new ArrayList) , $add_1(valScale2.scaleMarkers, sm));
      }
    }
  }
}

function $addTrellisFiltersIfSpecified(this$static, cell, filters){
  var colName, colValue, grp1Index, grp2Index, mdCol;
  if ($isTrellis(this$static) && !!cell) {
    grp1Index = $getMetDataIndexForName(this$static.data_0, 'GROUP1');
    if (grp1Index != -1) {
      mdCol = $getMetadataInfo(this$static.data_0, grp1Index);
      colName = $getName(mdCol);
      colValue = $getMetaDataCell(cell, grp1Index).valueStr;
      $add_1(filters, $getFilterForColOrRow(this$static, colName, colValue, mdCol));
    }
    grp2Index = $getMetDataIndexForName(this$static.data_0, 'GROUP2');
    if (grp2Index != -1) {
      mdCol = $getMetadataInfo(this$static.data_0, grp2Index);
      colName = $getName(mdCol);
      colValue = $getMetaDataCell(cell, grp2Index).valueStr;
      $add_1(filters, $getFilterForColOrRow(this$static, colName, colValue, mdCol));
    }
  }
}

function $cancelZoom(this$static){
  $closeZoomInFilter(this$static);
  $setDrillFromDataBasedOnShowAsFiltered(this$static, true);
  this$static.annotationList = null;
  this$static.setNeedsFormat(true);
  !this$static.animInfo && (this$static.animInfo = new AnimInfo(0, 500, 'Transition', 'circleOut'));
  $setAnimateDrawNeeded(this$static.chart);
  $logZoomState(this$static.chart, false);
}

function $chartOptionHasAValue(this$static, key){
  return this$static.hasChartOptions() && this$static.getChartOptionAsString(key) != null;
}

function $checkForBothHiddenSeriesAndSeriesFilter(this$static){
  var hideSeries, seriesFilter;
  if (this$static.getChartOptionAsString('hide_series') != null && this$static.getChartOptionAsString('series_filter') != null) {
    hideSeries = this$static.chartOptions.get_0('hide_series');
    seriesFilter = this$static.chartOptions.get_0('series_filter');
    $equals_2('none', hideSeries)?$equals_2('none', seriesFilter) || this$static.chartOptions.remove_0('hide_series'):$equals_2('none', seriesFilter) && ($equals_2('none', hideSeries) || this$static.chartOptions.remove_0('series_filter'));
  }
}

function $clearAllGeArrays(this$static){
  clearGraphicElementArray(this$static.backGeAry);
  this$static.frontGeAry.clear_0();
  clearGraphicElementArray(this$static.geAry);
}

function $closeZoomInFilter(this$static){
  if ($hasHiddenData(this$static.data_0)) {
    this$static.handler.closeZoomInFilter() || (!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('row_filter', 'none'));
  }
   else if ((this$static.graphType == 8 || this$static.graphType == 27 || this$static.graphType == 13 || this$static.graphType == 29 || this$static.graphType == 22) && this$static.data_0.dataHasAlreadyBeenTransposed && this$static.data_0.numVisibleCols < $getNumCols(this$static.data_0)) {
    this$static.data_0.summaryColumn = null;
    $clearHiddenCols(this$static.data_0, true);
    !this$static.chartOptions && (this$static.chartOptions = new HashMap);
    this$static.chartOptions.put('hide_series', 'none');
  }
}

function $combineAnnotationsIntoMap(this$static){
  var annotValue, annotation, annotation$iterator, annotsByValue, dateGrain, oldAnnotValue;
  this$static.annotationMap = new HashMap;
  for (annotation$iterator = this$static.annotations.iterator(); annotation$iterator.hasNext_0();) {
    annotation = castTo(annotation$iterator.next_1(), 46);
    dateGrain = this$static.data_0.dateGrain;
    annotValue = annotation.point1;
    dateGrain != null && dateGrain.length > 0 && $size(annotation.p1Grains) > 0 && $hasStringValue(annotation.p1Grains, dateGrain) && (annotValue = castToString($getStringValue(annotation.p1Grains, dateGrain)));
    if (this$static.data_0.isPeriodOverPeriod && annotValue != null) {
      oldAnnotValue = annotValue;
      annotValue = $getCurPeriodDateStrForPOPDateStr(this$static, annotValue);
      $equals_2(oldAnnotValue, annotValue) || $putStringValue(annotation.p1Grains, dateGrain, annotValue);
    }
    if (annotValue != null && annotValue.length > 0) {
      annotsByValue = castTo($getStringValue(this$static.annotationMap, annotValue), 42);
      if (annotsByValue)
        annotsByValue.add_0(annotation);
      else {
        annotsByValue = new ArrayList;
        annotsByValue.add_0(annotation);
        $putStringValue(this$static.annotationMap, annotValue, annotsByValue);
      }
    }
  }
}

function $convertDatalabelAndHoverMacros(this$static, fromMacro, toMacro){
  var dlText, hoverText, labelText, newStr;
  dlText = this$static.getChartOptionAsString('datalabel_text');
  if (dlText != null && dlText.indexOf(fromMacro) != -1) {
    newStr = replace_0(dlText, fromMacro, toMacro, false);
    !!this$static.chartOptions && this$static.chartOptions.put('datalabel_text', newStr);
    !!this$static.dataLabel && $setDataLabelFormatString(this$static, newStr);
  }
  hoverText = this$static.getChartOptionAsString('hover_text');
  if (hoverText != null && hoverText.indexOf(fromMacro) != -1) {
    newStr = replace_0(hoverText, fromMacro, toMacro, false);
    !!this$static.chartOptions && this$static.chartOptions.put('hover_text', newStr);
    if (this$static.hoverLabelText != null) {
      this$static.hoverLabelText = ($clinit_StrUtil() , entityDecodeString(newStr));
      this$static.hoverLabelText = convertBrToNewLine(this$static.hoverLabelText);
    }
  }
  labelText = this$static.getChartOptionAsString('label_text');
  if (labelText != null && labelText.indexOf(fromMacro) != -1) {
    newStr = replace_0(labelText, fromMacro, toMacro, false);
    !!this$static.chartOptions && this$static.chartOptions.put('label_text', newStr);
  }
}

function $draw_4(this$static, rnd){
  this$static.needsFormat && this$static.format_0(rnd);
  !!this$static.handler && this$static.handler.draw_1(rnd);
  $addOrRemoveHiddenRowsIndicator(this$static);
  (!!this$static.annotations && this$static.annotations.size_1() > 0 || this$static.chart.inAddAnnotationMode) && this$static.drawAnnotations();
  this$static.drawSupportingBgLayer(rnd);
  drawGEAry(rnd, this$static.backGeAry);
  this$static.drawSupportingMainLayer(rnd);
  drawGEAry(rnd, this$static.geAry);
  this$static.drawSupportingFgLayer(rnd);
  drawGEAry(rnd, this$static.frontGeAry);
  !!this$static.annotationIndicatorShape && $draw_2(this$static.annotationIndicatorShape, rnd);
  !!this$static.curDisplayedAnnotation && !!this$static.curDisplayedAnnotation.popup && $draw_2(this$static.curDisplayedAnnotation.popup, rnd);
}

function $drawAnnotationHints(this$static, annotations, point){
  var ai, annotHint, annotation, dataObj, hasSelected, index_0, label_0, numAnnotations, rnd, shape_0, shape$iterator, tmpAnot, tmpAnot$iterator;
  if (!annotations || annotations.size_1() == 0 || !$graphTypeSupportsAnnotations(this$static))
    return;
  rnd = this$static.rnd;
  label_0 = castTo(annotations.get_1(0), 46).label_0;
  if (!!annotations && annotations.size_1() > 0) {
    if (!castTo(annotations.get_1(0), 46).annotInfo) {
      ai = createAndGetAnnotationHint(this$static, label_0, point, annotations, rnd);
      if (ai) {
        castTo(annotations.get_1(0), 46).annotInfo = ai;
        $addPopupsForList(castTo(annotations.get_1(0), 46), this$static, rnd, ai.hoverRect, annotations);
        $addFrontGraphicElement(this$static, ai.ge);
      }
    }
     else {
      ai = castTo(annotations.get_1(0), 46).annotInfo;
      annotation = castTo(annotations.get_1(0), 46);
      hasSelected = false;
      for (tmpAnot$iterator = annotations.iterator(); tmpAnot$iterator.hasNext_0();) {
        tmpAnot = castTo(tmpAnot$iterator.next_1(), 46);
        if (!tmpAnot.isGrayedForSelection) {
          hasSelected = true;
          break;
        }
      }
      annotHint = ai.ge;
      if (!!annotHint && !!annotHint.shapeAry && annotHint.shapeAry.array.length > 0) {
        dataObj = $getDataObjectForGE_0(this$static, annotHint);
        numAnnotations = 0;
        dataObj != null && instanceOf(dataObj, 42) && (numAnnotations = castTo(dataObj, 42).size_1());
        index_0 = 0;
        for (shape$iterator = new ArrayList$1(annotHint.shapeAry); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 6);
          !!shape_0.fill_0 && shape_0.fill_0.color_0 != ($clinit_CFColor() , TRANSPARENT) && (hasSelected?this$static.chart.inAddAnnotationMode?$setColor_0(shape_0.fill_0, new CFColor_2('#EEEEEE')):index_0 == 0 && numAnnotations > 1?$setColor_0(shape_0.fill_0, ($clinit_Annotation() , DEFAULT_SECOND_HINT_COLOR)):annotation.hintColor?$setColor_0(shape_0.fill_0, annotation.hintColor):$setColor_0(shape_0.fill_0, ($clinit_Annotation() , DEFAULT_HINT_COLOR)):$setColor_0(shape_0.fill_0, new CFColor_2('#CDCDCD')));
          ++index_0;
        }
      }
      this$static.frontGeAry.contains_0(annotHint) || this$static.frontGeAry.add_1(0, annotHint);
    }
  }
}

function $drawCenteredAnnotationThumb(this$static){
  var linePos, rect;
  rect = castTo(this$static, 40).innerBounds;
  if (!!rect && !!this$static.chart) {
    linePos = $drawAddAnnotationIndicator(this$static.chart, round_int(rect.x_0 + rect.width_0 / 2), round_int(rect.y_0 + rect.height_0 / 2));
    !!linePos && $drawSelectionThumbForXY(this$static.chart, round_int(linePos.x_0), round_int(linePos.y_0));
  }
}

function $freeResources_15(this$static, dataToKeep){
  var seriesInfo, seriesInfo$iterator;
  $freeResources_2(this$static, dataToKeep);
  this$static.colorAry = null;
  !!this$static.colorMgr && $freeResources_0(this$static.colorMgr);
  this$static.colorMgr = null;
  this$static.backGeAry = null;
  this$static.frontGeAry = null;
  !!this$static.handler && this$static.handler.freeResources(dataToKeep);
  this$static.handler = null;
  !!this$static.dataLabel && $freeResources_13(this$static.dataLabel);
  this$static.dataLabel = null;
  !!this$static.hoverLabel && $freeResources_13(this$static.hoverLabel);
  this$static.hoverLabel = null;
  this$static.legend = null;
  this$static.resetHiddenRowsButton = null;
  this$static.scaleMarkers = null;
  if (!!this$static.seriesShapes && this$static.seriesShapes.array.length > 0) {
    for (seriesInfo$iterator = new ArrayList$1(this$static.seriesShapes); seriesInfo$iterator.i < seriesInfo$iterator.this$01.array.length;) {
      seriesInfo = castTo($next_3(seriesInfo$iterator), 19);
      $freeResources_25(seriesInfo);
    }
    this$static.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.seriesShapes = null;
  if (!!this$static.lastShapes && this$static.lastShapes.array.length > 0) {
    for (seriesInfo$iterator = new ArrayList$1(this$static.lastShapes); seriesInfo$iterator.i < seriesInfo$iterator.this$01.array.length;) {
      seriesInfo = castTo($next_3(seriesInfo$iterator), 19);
      $freeResources_25(seriesInfo);
    }
    this$static.lastShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.lastShapes = null;
  !!this$static.lastShapesMap && $reset_5(this$static.lastShapesMap);
  this$static.lastShapesMap = null;
  !!this$static.lastShapesFullSeriesMap && $reset_5(this$static.lastShapesFullSeriesMap);
  this$static.lastShapesFullSeriesMap = null;
}

function $getColor(this$static, name_0, defaultRGB){
  var color_0;
  color_0 = $getColorForName(this$static.colorMgr, name_0);
  if (color_0)
    return color_0;
  return new CFColor_2(defaultRGB);
}

function $getColorAry(this$static){
  !this$static.colorAry && $initColors(this$static, false);
  return this$static.colorAry;
}

function $getColorForCategoryName_0(this$static, cell){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorCategory(this$static.colorMgr, cell));
  return color_0;
}

function $getColorForCellValue_0(this$static, cell, valueColumnName){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForCell(this$static.colorMgr, cell, valueColumnName));
  return color_0;
}

function $getColorForCellValueCategoryNameAndIndex(this$static, cell, valueColumnName, index_0){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForCell(this$static.colorMgr, cell, valueColumnName));
  !color_0 && (color_0 = $getColorForIndex_0(this$static, index_0));
  return color_0;
}

function $getColorForCellValueSeriesName(this$static, cell, valueColumnName, previousFill){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForCell(this$static.colorMgr, cell, valueColumnName));
  if (color_0)
    return new CFFill(color_0);
  return previousFill;
}

function $getColorForIndex_0(this$static, index_0){
  if (index_0 < this$static.colorAry.array.length)
    return castTo($get_2(this$static.colorAry, index_0), 15);
  else {
    index_0 = index_0 % this$static.colorAry.array.length;
    return castTo($get_2(this$static.colorAry, index_0), 15);
  }
}

function $getColorForNameInColumnOrIndex(this$static, name_0, column, index_0){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForNameInColumn(this$static.colorMgr, name_0, column));
  !color_0 && (color_0 = $getColorForIndex_0(this$static, index_0));
  return color_0;
}

function $getColorForSeriesNameOrIndex_0(this$static, column, index_0){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorSeries(this$static.colorMgr, column));
  !color_0 && (color_0 = $getColorForIndex_0(this$static, index_0));
  return color_0;
}

function $getColorForValueAndColumnName(this$static, value_0, originalColumnName, valueColumnName){
  var color_0;
  color_0 = null;
  this$static.colorMgr.conditionalColors && (color_0 = $getConditionalColorForValueAndColumnName(this$static.colorMgr, value_0, originalColumnName, valueColumnName));
  return color_0;
}

function $getCurFontSize(this$static){
  if (!!$getLegend(this$static) && !!$getLegend(this$static).font_0)
    return $getLegend(this$static).font_0.size_0;
  if (!!this$static.dataLabel && !!this$static.dataLabel.font_0)
    return this$static.dataLabel.font_0.size_0;
  if (!!this$static.hoverLabel && !!this$static.hoverLabel.font_0)
    return this$static.hoverLabel.font_0.size_0;
  return -1;
}

function $getCurPeriodDateStrForPOPDateStr(this$static, value_0){
  var c, cell, curCell, data_0, dateStr, numCols, numRows, r, retValue, row;
  retValue = null;
  data_0 = this$static.data_0;
  numCols = $getNumCols(data_0);
  numRows = $getNumRows(data_0);
  for (c = 0; c < numCols && retValue == null; c++) {
    for (r = 0; r < numRows; r++) {
      row = $getRow(data_0, r);
      cell = $getCellByCellIndex(row, c);
      if (!!cell && !!$getMetaDataCell(cell, 0)) {
        dateStr = $getMetaDataCell(cell, 0).valueStr;
        if (dateStr != null && $equals_2(dateStr, value_0)) {
          if (c == 0) {
            retValue = value_0;
          }
           else {
            curCell = $getCellByCellIndex(row, 0);
            !!curCell && !!$getMetaDataCell(curCell, 0) && (retValue = $getMetaDataCell(curCell, 0).valueStr);
          }
          break;
        }
      }
    }
  }
  return retValue;
}

function $getEncodedChartOption(this$static){
  var optionVal;
  optionVal = null;
  if (this$static.hasChartOptions()) {
    optionVal = this$static.getChartOptionAsString('hover_text');
    if (optionVal != null) {
      optionVal = ($clinit_StrUtil() , entityDecodeString(optionVal));
      optionVal = convertBrToNewLine(optionVal);
    }
  }
  return optionVal;
}

function $getExistingLegendItemInfoForSeries(legend, colInfo){
  if (legend)
    return $getExistingLegendItemInfoForSeries_0(legend, colInfo);
  return null;
}

function $getFilterForColOrRow(this$static, headerName, colOrRowName, colOrRow){
  var filterBase;
  filterBase = new FilterBase(headerName, 'EQUALS', colOrRow);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, colOrRowName);
  $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
  $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
  return getDrillFilterFromValues(filterBase);
}

function $getHitBounds(this$static){
  if (this$static.playControl)
    return new CFRect(this$static.bnds.x_0, this$static.bnds.y_0, this$static.bnds.width_0, this$static.bnds.height_0 + 30);
  return this$static.bnds;
}

function $getLastShapeForCell(this$static, cell, getFullSeriesItem){
  var entry, key, key0, seriesInfo;
  if (!this$static.lastShapesMap || !cell)
    return null;
  if (getFullSeriesItem) {
    key0 = $getColName(cell);
    seriesInfo = castTo($getStringValue(this$static.lastShapesFullSeriesMap, key0), 19);
    if (seriesInfo)
      return seriesInfo.fullSeriesInfo;
  }
  key = this$static.handler.getSeriesShapeKeyFromCell(cell);
  entry = $getStringValue(this$static.lastShapesMap, key);
  if (instanceOf(entry, 18))
    return castTo(entry, 18);
  return null;
}

function $getLastShapeHoldingFullSeriesInfoForCell(this$static, cell){
  var key, seriesInfo;
  if (!this$static.lastShapesFullSeriesMap || !cell)
    return null;
  key = $getColName(cell);
  seriesInfo = castTo($getStringValue(this$static.lastShapesFullSeriesMap, key), 19);
  return seriesInfo;
}

function $getOptions(this$static){
  var optionStr, options, seriesFilterAdded;
  options = new ArrayList;
  !!this$static.annotationView && !this$static.annotationView.isOpen && (options.array[options.array.length] = '"annotation_view_state": "Closed"' , true);
  $isLineBar(this$static) && this$static.typeAttributes.curvedLines && this$static.typeAttributes.showSymbols?(options.array[options.array.length] = '"line_style": "Curved with Symbols"' , true):$isLineBar(this$static) && this$static.typeAttributes.curvedLines && (options.array[options.array.length] = '"line_style": "Curved"' , true);
  this$static.getChartOptionAsString('total_sort') != null && $add_1(options, '"total_sort": "' + this$static.getChartOptionAsString('total_sort') + '"');
  this$static.getChartOptionAsString('num_forecast_items') != null && $add_1(options, '"num_forecast_items": "' + this$static.getChartOptionAsString('num_forecast_items') + '"');
  seriesFilterAdded = false;
  if (this$static.getChartOptionAsString('hide_series') != null && !$equals_2('none', this$static.getChartOptionAsString('hide_series'))) {
    $add_1(options, '"hide_series": "' + jsonStringify(this$static.getChartOptionAsString('hide_series')) + '"');
    seriesFilterAdded = true;
  }
  if (!seriesFilterAdded && this$static.getChartOptionAsString('series_filter') != null && !$equals_2('none', this$static.getChartOptionAsString('series_filter'))) {
    $add_1(options, '"series_filter": "' + jsonStringify(this$static.getChartOptionAsString('series_filter')) + '"');
    seriesFilterAdded = true;
  }
  if (!seriesFilterAdded) {
    options.array[options.array.length] = '"hide_series": "none"';
    options.array[options.array.length] = '"series_filter": "none"';
  }
  this$static.getChartOptionAsString('row_filter') != null?$add_1(options, '"row_filter": "' + jsonStringify(this$static.getChartOptionAsString('row_filter')) + '"'):(options.array[options.array.length] = '"row_filter": "none"' , true);
  this$static.getChartOptionAsString('range_filter_y') != null?$add_1(options, '"range_filter_y": "' + jsonStringify(this$static.getChartOptionAsString('range_filter_y')) + '"'):(options.array[options.array.length] = '"range_filter_y": "none"' , true);
  this$static.getChartOptionAsString('range_filter_x') != null?$add_1(options, '"range_filter_x": "' + jsonStringify(this$static.getChartOptionAsString('range_filter_x')) + '"'):(options.array[options.array.length] = '"range_filter_x": "none"' , true);
  this$static.getChartOptionAsString('range_filter_cat_x') != null?$add_1(options, '"range_filter_cat_x": "' + jsonStringify(this$static.getChartOptionAsString('range_filter_cat_x')) + '"'):(options.array[options.array.length] = '"range_filter_cat_x": "none"' , true);
  this$static.getChartOptionAsString('range_filter_time') != null?$add_1(options, '"range_filter_time": "' + jsonStringify(this$static.getChartOptionAsString('range_filter_time')) + '"'):(options.array[options.array.length] = '"range_filter_time": "none"' , true);
  if (!!this$static.handler && instanceOf(this$static.handler, 174)) {
    this$static.getChartOptionAsString('date_selection_view') != null && $add_1(options, '"date_selection_view": "' + this$static.getChartOptionAsString('date_selection_view') + '"');
    this$static.getChartOptionAsString('preset_selected') != null && $add_1(options, '"preset_selected": "' + this$static.getChartOptionAsString('preset_selected') + '"');
  }
  if (!!this$static.handler && instanceOf(this$static.handler, 149)) {
    this$static.getChartOptionAsString('cur_page_start_index') != null && $add_1(options, '"cur_page_start_index": "' + this$static.getChartOptionAsString('cur_page_start_index') + '"');
    this$static.getChartOptionAsString('show_selected_only') != null && $add_1(options, '"show_selected_only": "' + this$static.getChartOptionAsString('show_selected_only') + '"');
  }
  if ($usingCardBus(this$static.chart)) {
    this$static.getChartOptionAsString('row_show_as_unfiltered') != null && $add_1(options, '"row_show_as_unfiltered": "' + jsonStringify(this$static.getChartOptionAsString('row_show_as_unfiltered')) + '"');
    this$static.getChartOptionAsString('column_show_as_unfiltered') != null && $add_1(options, '"column_show_as_unfiltered": "' + jsonStringify(this$static.getChartOptionAsString('column_show_as_unfiltered')) + '"');
  }
  optionStr = flattenOptions(options);
  return optionStr;
}

function $getOrCreateDataLabel(this$static){
  !this$static.dataLabel && (this$static.dataLabel = new DataLabel(this$static));
  this$static.dataLabelVisible && !!this$static.dataLabel && this$static.dataLabelText != null && this$static.dataLabelText.length > 0 && $setFormatString(this$static.dataLabel, this$static.dataLabelText);
  return this$static.dataLabel;
}

function $getOrCreateHoverLabel(this$static){
  !this$static.hoverLabel && (this$static.hoverLabel = new HoverLabel_0(this$static));
  !!this$static.hoverLabel && this$static.hoverLabelText != null && this$static.hoverLabelText.length > 0 && $setFormatString(this$static.hoverLabel, this$static.hoverLabelText);
  this$static.dataLabel?$setSize_0(this$static.hoverLabel.font_0, this$static.dataLabel.font_0.size_0):instanceOf(this$static, 40) && $setSize_0(this$static.hoverLabel.font_0, castTo($get_2(castTo(this$static, 40).scales, 0), 53).labelFont.size_0);
  return this$static.hoverLabel;
}

function $getOriginalData(this$static){
  if (this$static.handler)
    return this$static.handler.getOriginalData();
  return this$static.data_0;
}

function $getPreviousGraphType(this$static){
  this$static.previousGraphType == -1 && (this$static.previousGraphType = this$static.graphType);
  return this$static.previousGraphType;
}

function $getPreviousTypeAttributes(this$static){
  if (this$static.previousTypeAttributes)
    return this$static.previousTypeAttributes;
  return this$static.typeAttributes;
}

function $getScaleMarkerWithOutlierFillColor(this$static){
  var outlierColor, sm, sm$iterator;
  if (this$static.scaleMarkers) {
    for (sm$iterator = this$static.scaleMarkers.iterator(); sm$iterator.hasNext_0();) {
      sm = castTo(sm$iterator.next_1(), 86);
      if (sm.type_0 == 1) {
        outlierColor = $getOutlierFillColor(sm);
        if (outlierColor)
          return sm;
      }
    }
  }
  return null;
}

function $getSeriesNames_1(this$static){
  var seriesNameDataGrid;
  seriesNameDataGrid = this$static.data_0;
  !!this$static.handler && (!seriesNameDataGrid || !$equals_2('period-over-period', seriesNameDataGrid.originalDataType)) && (seriesNameDataGrid = this$static.handler.getOriginalData());
  if (seriesNameDataGrid)
    return $getSeriesNames_0(seriesNameDataGrid, this$static.graphType);
  return null;
}

function $getSortFromString(value_0){
  if (value_0 != null) {
    switch (value_0) {
      case 'Descending':
        return 1;
      case 'Ascending':
        return 2;
      case 'A-Z':
        return 3;
      case 'Z-A':
        return 4;
      default:return 0;
    }
  }
  return 0;
}

function $getSrsShapeInfoForHvrDataStr(this$static, hvrDataStr){
  var index_0, indexStr, separator2Pos, separatorPos, srsInfo;
  if (hvrDataStr != null && $equals_2(hvrDataStr.substr(0, 12), 'srsShapeInfo') && hvrDataStr.indexOf(':') != -1) {
    separatorPos = hvrDataStr.indexOf(':');
    separator2Pos = hvrDataStr.indexOf(':', separatorPos + 1);
    indexStr = hvrDataStr.substr(separatorPos + 1, separator2Pos - (separatorPos + 1));
    index_0 = getInt(indexStr, -1);
    if (index_0 != -1 && !!this$static.seriesShapes && index_0 < this$static.seriesShapes.array.length) {
      srsInfo = castTo($get_2(this$static.seriesShapes, index_0), 19);
      indexStr = hvrDataStr.substr(separator2Pos + 1, hvrDataStr.length - (separator2Pos + 1));
      index_0 = getInt(indexStr, -1);
      if (index_0 != -1 && !!srsInfo.srsShapeList && index_0 < srsInfo.srsShapeList.array.length)
        return castTo($get_2(srsInfo.srsShapeList, index_0), 18);
    }
  }
  return null;
}

function $getTotalSort(value_0){
  if (value_0 != null) {
    if ($equalsIgnoreCase(value_0, 'Ascending'))
      return SORT_SUM;
    else if ($equalsIgnoreCase(value_0, 'Descending'))
      return -SORT_SUM;
    else if ($equalsIgnoreCase(value_0, 'A-Z'))
      return SORT_NAME;
    else if ($equalsIgnoreCase(value_0, 'Z-A'))
      return -SORT_NAME;
  }
  return 0;
}

function $getZoomButtonScaleFactor(this$static){
  var chartScaleFactor, scaleFactor;
  scaleFactor = 1;
  chartScaleFactor = this$static.chart.scaleFactor;
  chartScaleFactor > 1 && (scaleFactor = 1 / $wnd.Math.sqrt(chartScaleFactor));
  return scaleFactor;
}

function $graphTypeSupportsAnnotations(this$static){
  if (!!this$static.handler && instanceOf(this$static.handler, 64) && this$static.graphType != 28 && this$static.graphType != 26 && this$static.graphType != 16 && !(this$static.graphType == 19 || this$static.graphType == 21) && !instanceOf(this$static.handler, 121) && !instanceOf(this$static.handler, 160))
    return true;
  return false;
}

function $handleClick_0(this$static, shapeClicked){
  var dataObj, dataObject, firstAnnotation, hintRect, needsRepaint, openedAnnotation, result;
  needsRepaint = false;
  openedAnnotation = false;
  result = -1;
  !!this$static.handler && (result = this$static.handler.handleClick_0(shapeClicked));
  result == 1 && (needsRepaint = true);
  if (!!shapeClicked && result == -1) {
    dataObj = $getDataObjectForShape(shapeClicked, this$static);
    if (instanceOfString(dataObj) && $equals_2(castToString(dataObj), 'filteredClose')) {
      $cancelZoom(this$static);
      needsRepaint = true;
    }
    if (instanceOfString(dataObj) && $equals_2(castToString(dataObj), 'deleteAnnotation')) {
      !!this$static.curDisplayedAnnotation && this$static.curDisplayedAnnotation.canDelete && this$static.rnd.deleteAnnotation_0(this$static.curDisplayedAnnotation.id_0);
      needsRepaint = true;
    }
     else if (instanceOf(dataObj, 132)) {
      needsRepaint = $handleClick_4(castTo(dataObj, 132));
    }
     else if (instanceOf(dataObj, 27)) {
      needsRepaint = $handleClick_5(castTo(dataObj, 27), shapeClicked);
      this$static.drillFilter = null;
    }
     else if (instanceOf(dataObj, 46)) {
      if (!this$static.rnd.supportsNativeAnnotations_0() && !!castTo(dataObj, 46).popup) {
        this$static.curDisplayedAnnotation = castTo(dataObj, 46);
        openedAnnotation = true;
        needsRepaint = true;
      }
      this$static.drillFilter = null;
    }
     else if (shapeClicked.dataObject != null && instanceOf(shapeClicked.dataObject, 42) && castTo(shapeClicked.dataObject, 42).size_1() > 0 && instanceOf(castTo(shapeClicked.dataObject, 42).get_1(0), 46)) {
      dataObject = $getDataObjectForShape_0(this$static, shapeClicked);
      this$static.annotationList = castTo(dataObject, 42);
      if (this$static.rnd.supportsNativeAnnotations_0()) {
        firstAnnotation = castTo(this$static.annotationList.get_1(0), 46);
        hintRect = firstAnnotation.hintRect;
        this$static.rnd.displayAnnotations(hintRect, getJSONForList(this$static.annotationList));
      }
       else {
        firstAnnotation = castTo(this$static.annotationList.get_1(0), 46);
        if (firstAnnotation.popup) {
          this$static.curDisplayedAnnotation = firstAnnotation;
          openedAnnotation = true;
          needsRepaint = true;
        }
      }
      this$static.drillFilter = null;
    }
     else {
      this$static.setDrillFilter(shapeClicked, true);
      this$static.annotationList = null;
    }
  }
  if (!openedAnnotation && !!this$static.curDisplayedAnnotation) {
    this$static.curDisplayedAnnotation = null;
    needsRepaint = true;
  }
  return needsRepaint;
}

function $handleClickOnOtherInCardBusMode(this$static, rowInfo, itemsBeforeOther){
  var curIndex, dataGrid, row;
  if (!!rowInfo && rowInfo.curIndex == itemsBeforeOther) {
    dataGrid = this$static.data_0;
    curIndex = rowInfo.curIndex;
    while (curIndex < $getNumRows(dataGrid)) {
      row = $getRow(dataGrid, curIndex++);
      $toggleRowShowAsFilter(dataGrid, row);
      dataGrid.numFilteredRows == $getNumRows(dataGrid) && $clearFilteredRows(dataGrid);
    }
    dataGrid.hasFilteredRows = false;
    dataGrid.numFilteredRows > 0 && (dataGrid.hasFilteredRows = true);
    $setDrillFromDataBasedOnShowAsFiltered(this$static, true);
    this$static.setNeedsFormat(true);
    return true;
  }
  return false;
}

function $handleRowFiltersHiddenSeries(this$static, data_0){
  var dataFiltered, object;
  if (!data_0)
    return;
  dataFiltered = data_0.hasHiddenRows || data_0.hasHiddenCells;
  if (this$static.hasChartOptions()) {
    $checkForBothHiddenSeriesAndSeriesFilter(this$static);
    if (this$static.getChartOptionAsString('hide_series') != null && !!this$static.handler && instanceOf(this$static.handler, 64)) {
      object = this$static.chartOptions.get_0('hide_series');
      $hideSeries(data_0, object);
      data_0.numVisibleCols != $getNumCols(data_0)?(dataFiltered = true):this$static.chartOptions.remove_0('hide_series');
    }
    if (this$static.getChartOptionAsString('series_filter') != null) {
      object = this$static.chartOptions.get_0('series_filter');
      $filterSeries(data_0, object, $usingCardBus(this$static.chart));
      data_0.numVisibleCols != $getNumCols(data_0)?(dataFiltered = true):this$static.chartOptions.remove_0('series_filter');
    }
    if (this$static.getChartOptionAsString('row_filter') != null) {
      if ($usingCardBus(this$static.chart) && !this$static.chart.staticImage && !instanceOf(this$static.handler, 64))
        this$static.chartOptions.remove_0('row_filter');
      else {
        object = this$static.chartOptions.get_0('row_filter');
        $filterRows(data_0, object);
        data_0.numVisibleRows != $getNumRows(data_0)?(dataFiltered = true):!instanceOf(this$static.handler, 174) && !instanceOf(this$static.handler, 195) && this$static.chartOptions.remove_0('row_filter');
      }
    }
    if (this$static.getChartOptionAsString('show_as_filtered') != null) {
      object = this$static.chartOptions.get_0('show_as_filtered');
      $applyShowAsFiltered(data_0, object);
      this$static.chartOptions.remove_0('show_as_filtered');
    }
     else {
      if (this$static.getChartOptionAsString('row_show_as_unfiltered') != null) {
        object = this$static.chartOptions.get_0('row_show_as_unfiltered');
        $applyRowShowAsUnFiltered(data_0, object);
      }
      if (this$static.getChartOptionAsString('column_show_as_unfiltered') != null) {
        object = this$static.chartOptions.get_0('column_show_as_unfiltered');
        $applyColumnShowAsUnFiltered(data_0, object);
      }
    }
    dataFiltered && this$static.typeAttributes.percentOfCategoryData && ($setToPercentOfRowOrColumn(data_0, data_0.rows_0, false) , $hasSecondaryScaleData(data_0) && $setToPercentOfRowOrColumn(data_0, data_0.rows_0, true));
  }
}

function $hasDataLabels(this$static){
  return !!this$static.dataLabel && (this$static.dataLabel.formatString != null || this$static.dataLabel.showTotal) && !this$static.dataLabel.isHidden;
}

function $hasFilteredData(this$static){
  if ($hasHiddenData(this$static.data_0))
    return true;
  if ((this$static.graphType == 8 || this$static.graphType == 27 || this$static.graphType == 13 || this$static.graphType == 29 || this$static.graphType == 22) && this$static.data_0.dataHasAlreadyBeenTransposed && this$static.data_0.numVisibleCols < $getNumCols(this$static.data_0))
    return true;
  return false;
}

function $hasInteractions(this$static){
  if (this$static.typeAttributes.isXYForecast)
    return false;
  return this$static.hasInteractions;
}

function $hasLegends(this$static){
  var comp, comp$iterator;
  if (this$static.dependentComps) {
    for (comp$iterator = new ArrayList$1(this$static.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
      comp = castTo($next_3(comp$iterator), 23);
      if (instanceOf(comp, 104) || instanceOf(comp, 106))
        return true;
    }
  }
  return false;
}

function $hideDataLabels_0(this$static){
  !!this$static.dataLabel && $hideDataLabels(this$static.dataLabel);
}

function $initColors(this$static, useLineColors){
  if (this$static.data_0) {
    if (this$static.data_0.isPeriodOverPeriod && this$static.typeAttributes.isPopPlay)
      this$static.colorAry = $getSeriesColors(this$static.colorMgr, 1, 1, useLineColors);
    else if (this$static.data_0.isPeriodOverPeriod && $hasPopColors(this$static.colorMgr)) {
      this$static.colorAry = $getPeriodOverPeriodColors(this$static.colorMgr, this$static.graphType, $getNumCols(this$static.data_0));
      (!this$static.colorAry || this$static.colorAry.array.length == 0) && (this$static.colorAry = $getSeriesColors(this$static.colorMgr, $getNumCols(this$static.data_0), $getNumCols(this$static.data_0), useLineColors));
    }
     else 
      this$static.colorAry = $getSeriesColors(this$static.colorMgr, $getNumCols(this$static.data_0), $getNumCols(this$static.data_0), useLineColors);
  }
}

function $isBarOnly(this$static){
  return this$static.graphType == 0 || this$static.graphType == 1;
}

function $isLineBar(this$static){
  switch (this$static.graphType) {
    case 4:
    case 5:
    case 30:
    case 31:
    case 26:
      return true;
    default:return false;
  }
}

function $isLineOnly(this$static){
  return this$static.graphType == 2 || this$static.graphType == 3;
}

function $isTrellis(this$static){
  var grp1Index, grp2Index;
  if (this$static.data_0) {
    grp1Index = $getMetDataIndexForName(this$static.data_0, 'GROUP1');
    grp2Index = $getMetDataIndexForName(this$static.data_0, 'GROUP2');
    if (grp1Index != -1 || grp2Index != -1)
      return true;
  }
  return false;
}

function $limitSeries(this$static){
  if (!!this$static.data_0 && $getNumCols(this$static.data_0) > $intern_21) {
    $truncateColumns(this$static.data_0);
    $warnNotAllDataShown(this$static.chart);
  }
}

function $processChartOptions_2(this$static){
  this$static.colorMgr = new ColorManager(this$static.chart.palette, this$static);
  if (this$static.dataLabel) {
    this$static.dataLabel.rotated = false;
    this$static.dataLabel.showLabelsOn = 0;
  }
  this$static.handleRowFiltersHiddenSeriesAndSort();
  this$static.typeAttributes.isPopPlay && !!this$static.playControl && $selectCurrentColumn(this$static.playControl);
  $processChartOptions(this$static);
  !!this$static.handler && this$static.handler.processChartOptions();
}

function $processSeriesInfoForJsonMap(this$static){
  var srsInfo, srsInfo$iterator, srsShapeInfo, srsShapeInfo$iterator;
  if (!!this$static.handler && !this$static.isThumbnail) {
    for (srsInfo$iterator = new ArrayList$1(this$static.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 19);
      if (srsInfo.srsShapeList) {
        for (srsShapeInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
          srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
          this$static.handler.setHoverEffects_0(srsShapeInfo, this$static.rnd);
        }
      }
    }
  }
}

function $removeElementFromFrontGeAry(this$static, element){
  this$static.frontGeAry.remove(element);
}

function $removeFrontGraphicElement(this$static, ge){
  this$static.frontGeAry.remove(ge);
}

function $removeHints(this$static){
  !!this$static.hoverLabel && $removeAll(this$static.hoverLabel);
  this$static.hoverLabel = null;
}

function $reset_2(this$static){
  $reset_0(this$static);
  this$static.backGeAry = new ArrayList;
  this$static.frontGeAry = new ArrayList;
  this$static.dataLabel = null;
  this$static.hoverLabel = null;
  this$static.dataLabelVisible = true;
  this$static.hoverLabelText = null;
  this$static.dataLabelText = null;
  this$static.colorMgr = new ColorManager(this$static.chart.palette, this$static);
  this$static.colorAry = null;
  this$static.typeAttributes = new TypeAttributes;
  this$static.textAndTicksInBounds = true;
  this$static.currentColumn = -1;
  !this$static.seriesShapes && (this$static.seriesShapes = new ArrayList);
  this$static.hoverFormatNumTypeOverride = null;
  this$static.hoverFormatDivideValByOverride = null;
  this$static.hoverFormatDecimalPlacesOverride = null;
  this$static.currentSort = 0;
  this$static.currentSortSetFromChartOptions = false;
  this$static.curDisplayedAnnotation = null;
}

function $resetAnnotations(this$static){
  var annotation, annotation$iterator;
  if (this$static.annotations) {
    for (annotation$iterator = this$static.annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      annotation.annotInfo = null;
    }
  }
  this$static.annotationsFormatted = false;
}

function $resetDataForTypeChange(this$static){
  !!this$static.handler && this$static.handler.resetForTypeChange();
  if (this$static.data_0) {
    $clearProjectionValues(this$static.data_0);
    $clearHasRunningTotals(this$static.data_0);
  }
}

function $resetDataLabel(this$static){
  this$static.dataLabel = new DataLabel(this$static);
  this$static.dataLabelText != null && this$static.dataLabelVisible && $setFormatString(this$static.dataLabel, this$static.dataLabelText);
}

function $resetForTypeChange(this$static){
  var depComp, depComp$iterator;
  $resetDataForTypeChange(this$static);
  clearGraphicElementArray(this$static.backGeAry);
  clearGraphicElementArray(this$static.geAry);
  this$static.frontGeAry.clear_0();
  this$static.setNeedsFormat(true);
  this$static.previousGraphType = this$static.graphType;
  this$static.previousTypeAttributes = this$static.typeAttributes;
  if (this$static.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this$static.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.setNeedsFormat(true);
    }
  }
}

function $resizeable(this$static){
  if (!this$static.isThumbnail && !this$static.treatAsSmall && !this$static.simplifiedForMobile && !!this$static.rnd && this$static.rnd.supportsCanvasResize() != 0 && !!this$static.data_0) {
    if (this$static.isHorizontal_0() && !this$static.hasTimeScale() && (!instanceOf(this$static.handler, 60) || !castTo(this$static.handler, 60).isFlexTableChart))
      return true;
    if (this$static.graphType == 16 || this$static.graphType == 10)
      return true;
    if (this$static.typeAttributes.isSpark && this$static.typeAttributes.isGrid)
      return true;
    if (this$static.hasDataTable())
      return true;
  }
  return false;
}

function $setCategoryIsHidden(this$static, categoryIndex, value_0){
  var handled;
  handled = this$static.handler.setCategoryIsHidden(categoryIndex, value_0);
  if (!handled) {
    if (categoryIndex >= 0 && categoryIndex < $getNumRows(this$static.data_0) && (!value_0 || this$static.data_0.numVisibleRows > 1)) {
      $setRowHiddenValue(this$static.data_0, categoryIndex, value_0);
      this$static.data_0.hasHiddenRows || (!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('row_filter', 'none'));
      this$static.typeAttributes.percentOfSeriesData && $setToPercentOfSeriesValues(this$static.data_0);
      this$static.previousGraphType = this$static.graphType;
      this$static.setNeedsFormat(true);
      !this$static.animInfo && (this$static.animInfo = new AnimInfo(0, 500, 'Transition', 'circleOut'));
      $setAnimateDrawNeeded(this$static.chart);
    }
  }
}

function $setCloseZoomSize(this$static){
  var scaleFactor;
  scaleFactor = $getZoomButtonScaleFactor(this$static);
  if (this$static.treatAsSmall) {
    this$static.zoomFilterCloseSize = 18 * scaleFactor;
    this$static.zoomFilterMargin = 3 * scaleFactor;
  }
   else {
    this$static.zoomFilterCloseSize = 25 * scaleFactor;
    this$static.zoomFilterMargin = 5 * scaleFactor;
  }
}

function $setCurrentColumn(this$static, value_0){
  this$static.currentColumn = value_0;
}

function $setData_0(this$static, dataGrid){
  var depComp, depComp$iterator, numberFormatter;
  this$static.data_0 = dataGrid;
  if (!dataGrid || dataGrid.numVisibleRows == 0 || dataGrid.numVisibleCols == 0) {
    !!this$static.seriesShapes && (this$static.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
    $addNoDataExistsMessage(this$static);
    return;
  }
  this$static.setNeedsFormat(true);
  $limitSeries(this$static);
  if (this$static.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this$static.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.setNeedsFormat(true);
    }
  }
  $clearAlternateValues_0(this$static.data_0);
  $hasTimeData(this$static.data_0) && !this$static.data_0.preSorted?$sortRows(this$static.data_0, SORT_DATE):$sortRows(this$static.data_0, 0);
  if (this$static.typeAttributes) {
    this$static.typeAttributes.percentOfCategoryData?$setToPercentOfCategoryValues(this$static.data_0):addProjectionDataToGrid(this$static.rnd, this$static.data_0);
    this$static.typeAttributes.percentOfSeriesData && $setToPercentOfSeriesValues(this$static.data_0);
    this$static.typeAttributes.isPopPlay && !!this$static.playControl && $selectCurrentColumn(this$static.playControl);
  }
  if (this$static.handler) {
    this$static.handler.setData(dataGrid);
    if (!this$static.handler.numberFormattingProcessed()) {
      numberFormatter = this$static.getFirstColumnFormat();
      !!numberFormatter && (this$static.numberFormatter = numberFormatter);
      this$static.updateNumberFormats(true);
    }
  }
}

function $setDataLabelFormatString(this$static, formatString){
  this$static.dataLabelText = ($clinit_StrUtil() , entityDecodeString(formatString));
  this$static.dataLabelText = convertBrToNewLine(this$static.dataLabelText);
  !this$static.dataLabel && (this$static.dataLabel = new DataLabel(this$static));
  this$static.dataLabelVisible && !!this$static.dataLabel && this$static.dataLabelText != null && this$static.dataLabelText.length > 0 && $setFormatString(this$static.dataLabel, this$static.dataLabelText);
}

function $setDisplayLimit(this$static, value_0){
  $isTrellis(this$static)?(this$static.displayLimit = 0):(this$static.displayLimit = value_0);
}

function $setDrillForList(this$static, list, clicked){
  var obj, obj$iterator;
  for (obj$iterator = list.iterator(); obj$iterator.hasNext_0();) {
    obj = obj$iterator.next_1();
    instanceOf(obj, 7) && (clicked && $usingCardBus(this$static.chart)?$setDrillFromDataBasedOnShowAsFiltered(this$static, true):$setHighlightDrillForRow(this$static, castTo(obj, 7)));
  }
}

function $setDrillForShape(this$static, shapeInfo, clicked){
  var cell, colHeaderName, columnName, filters, rowHeaderName, rowName;
  if ($usingCardBus(this$static.chart) && clicked) {
    $setDrillForShapeUsingShowAsFiltered(this$static, shapeInfo, true);
    return;
  }
  !!this$static.handler && (this$static.drillFilter = this$static.handler.getDrillFilter(shapeInfo, clicked));
  if (this$static.drillFilter == null) {
    cell = shapeInfo.cell;
    if (!!cell && !shapeInfo.neverDrill) {
      columnName = $getColOrigName(cell);
      rowName = $getRowOrigName(cell);
      rowHeaderName = $getRowParentName(cell);
      colHeaderName = $getColParentName(cell);
      filters = new ArrayList;
      if (!!this$static.data_0 && this$static.data_0.isPeriodOverPeriod && !!$getMetaDataCell(cell, 0)) {
        rowName = $getMetaDataCell(cell, 0).valueStr;
        rowHeaderName = colHeaderName;
        colHeaderName = null;
      }
      if (shapeInfo.drillOnColOnly && $isGroupItemValue(this$static.data_0))
        $add_1(filters, $getFilterForColOrRow(this$static, colHeaderName, columnName, cell.column));
      else if (shapeInfo.drillOnColOnly && !$isGroupItemValue(this$static.data_0) && $usingCardBus(this$static.chart) && $getNumCols(this$static.data_0) > 1)
        $add_1(filters, $getFilterForColOrRow(this$static, colHeaderName, null, cell.column));
      else if ($equals_2('legacy', this$static.data_0.originalDataType) || $getNumCols(this$static.data_0) == 1 && !$isGroupItemValue(this$static.data_0) || this$static.graphType == 26 || this$static.typeAttributes.isBullet) {
        $add_1(filters, $getFilterForColOrRow(this$static, rowHeaderName, rowName, cell.row));
        $equals_2('legacy', this$static.data_0.originalDataType) && (cell = $getCellByCellIndex(cell.row, 0));
        $addTrellisFiltersIfSpecified(this$static, cell, filters);
      }
       else {
        $add_1(filters, $getFilterForColOrRow(this$static, rowHeaderName, rowName, cell.row));
        $add_1(filters, $getFilterForColOrRow(this$static, colHeaderName, columnName, cell.column));
        $addTrellisFiltersIfSpecified(this$static, cell, filters);
      }
      filters.array.length > 0 && (this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFiltersAndPassThrough_0(filters)));
    }
  }
  $equals_2('none', this$static.drillFilter) && (this$static.drillFilter = null);
}

function $setDrillForShapeUsingShowAsFiltered(this$static, shapeInfo, clicked){
  var cell;
  !!this$static.handler && (this$static.drillFilter = this$static.handler.getDrillFilter(shapeInfo, clicked));
  if (this$static.drillFilter == null) {
    cell = shapeInfo.cell;
    if (!!cell && !shapeInfo.neverDrill) {
      shapeInfo.drillOnColOnly?$equals_2('item-value', this$static.data_0.originalDataType)?$toggleRowShowAsFilterAndClearIfAllFiltered(this$static.data_0, cell.row):$toggleColumnShowAsFilter(this$static.data_0, cell.column):$equals_2('item-value', this$static.data_0.originalDataType) || this$static.graphType == 8?$toggleRowShowAsFilterAndClearIfAllFiltered(this$static.data_0, cell.row):($isXYBubble(this$static.data_0) || instanceOf(this$static.handler, 162)) && $toggleColumnShowAsFilter(this$static.data_0, cell.column);
      this$static.setNeedsFormat(true);
      $setDrillFromDataBasedOnShowAsFiltered(this$static, clicked);
    }
  }
}

function $setHighlightDrillForRow(this$static, row){
  var cell, cell$iterator, entry, filter1, filterBase, filters, firstCell, outerIter, rowHeaderName, rowName;
  this$static.drillFilter = null;
  if (row) {
    filters = new ArrayList;
    rowName = row.name_0;
    rowHeaderName = row.parentName;
    filterBase = new FilterBase(rowHeaderName, 'EQUALS', row);
    row.isOtherRow?$addAllValuesFromOtherRowsToList(this$static, filterBase, row):(!filterBase.values && (filterBase.values = new ArrayList) , $add_1(filterBase.values, rowName));
    $setDataJoinColumn(filterBase, this$static.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.data_0.isFiscalCalendar);
    filter1 = getDrillFilterFromValues(filterBase);
    filters.array[filters.array.length] = filter1;
    firstCell = null;
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      firstCell = cell;
      break;
    }
    $addTrellisFiltersIfSpecified(this$static, firstCell, filters);
    this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFiltersAndPassThrough_0(filters));
  }
}

function $setHoverData(this$static, hoverData, rnd){
  if (this$static.handler)
    return this$static.handler.setHoverData(hoverData, rnd);
  return false;
}

function $setHoverFormatOverrides(this$static, numberFormatter){
  var dupFormatter;
  if (this$static.hoverFormatNumTypeOverride != null || this$static.hoverFormatDecimalPlacesOverride != null || this$static.hoverFormatDivideValByOverride != null) {
    dupFormatter = new NumberFormatter_0(numberFormatter);
    this$static.hoverFormatNumTypeOverride != null && $applyValueFormatOverride(dupFormatter, this$static.hoverFormatNumTypeOverride);
    this$static.hoverFormatDecimalPlacesOverride != null && $applyDecimalPlaces(dupFormatter, this$static.hoverFormatDecimalPlacesOverride);
    this$static.hoverFormatDivideValByOverride != null && $setDivideScaleBy(dupFormatter, this$static.hoverFormatDivideValByOverride, true);
    return dupFormatter;
  }
  return numberFormatter;
}

function $setLastShapes(this$static, shapes){
  var cell, key, shape_0, shape$iterator, srsShapeInfo, srsShapeInfo$iterator;
  this$static.lastShapes = shapes;
  this$static.lastShapesMap = new HashMap;
  this$static.lastShapesFullSeriesMap = new HashMap;
  for (shape$iterator = new ArrayList$1(shapes); shape$iterator.i < shape$iterator.this$01.array.length;) {
    shape_0 = castTo($next_3(shape$iterator), 19);
    if (shape_0.fullSeriesInfo) {
      $createSeriesShapeMap(shape_0, this$static, this$static.lastShapesMap);
      cell = shape_0.fullSeriesInfo.cell;
      if (cell) {
        key = $getColName(cell);
        $putStringValue(this$static.lastShapesFullSeriesMap, key, shape_0);
      }
    }
     else {
      for (srsShapeInfo$iterator = new ArrayList$1(shape_0.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
        srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
        cell = srsShapeInfo.cell;
        if (cell) {
          key = this$static.handler.getSeriesShapeKeyFromCell(cell);
          $putStringValue(this$static.lastShapesMap, key, srsShapeInfo);
        }
      }
    }
  }
}

function $setNextSort(this$static){
  this$static.currentSort += 1;
  if (this$static.currentSort == 5) {
    this$static.currentSort = 0;
    !this$static.chartOptions && (this$static.chartOptions = new HashMap);
    this$static.chartOptions.put('total_sort', 'none');
  }
   else 
    this$static.currentSort == 1?(!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('total_sort', 'Descending')):this$static.currentSort == 2?(!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('total_sort', 'Ascending')):this$static.currentSort == 3?(!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('total_sort', 'A-Z')):this$static.currentSort == 4 && (!this$static.chartOptions && (this$static.chartOptions = new HashMap) , this$static.chartOptions.put('total_sort', 'Z-A'));
  $setNeedsFormat_2(this$static, true);
  !this$static.animInfo && (this$static.animInfo = new AnimInfo(0, 500, 'Transition', 'linear'));
  $setAnimateDrawNeeded(this$static.chart);
}

function $setSeriesIsFiltered(this$static, seriesIndex, value_0){
  if (seriesIndex >= 0 && seriesIndex < $getNumCols(this$static.data_0) && (!value_0 || this$static.data_0.numVisibleCols > 1)) {
    $setColumnFilterValue(this$static.data_0, seriesIndex, value_0);
    this$static.data_0.numVisibleCols == this$static.data_0.numFilteredCols && $clearFilteredCols(this$static.data_0);
    $setDrillFromDataBasedOnShowAsFiltered(this$static, true);
    this$static.previousGraphType = this$static.graphType;
    this$static.setNeedsFormat(true);
    !!$getLegend(this$static) && $getLegend(this$static).setNeedsFormat(true);
    $logSeriesState(this$static.chart, value_0);
  }
}

function $setSeriesIsHidden(this$static, seriesIndex, value_0){
  if (seriesIndex >= 0 && seriesIndex < $getNumCols(this$static.data_0) && (!value_0 || this$static.data_0.numVisibleCols > 1)) {
    $setColumnHiddenValue(this$static.data_0, seriesIndex, value_0);
    this$static.typeAttributes.percentOfCategoryData && $setToPercentOfCategoryValues(this$static.data_0);
    if ($equals_2('legacy', this$static.data_0.originalDataType)) {
      $addChartOption(this$static, 'hide_series', $getHiddenColumns(this$static.data_0));
      !!this$static.chartOptions && this$static.chartOptions.remove_0('series_filter');
    }
     else {
      $addChartOption(this$static, 'series_filter', $getDynamicSeriesFilter(this$static.data_0));
      !!this$static.chartOptions && this$static.chartOptions.remove_0('hide_series');
    }
    this$static.previousGraphType = this$static.graphType;
    this$static.setNeedsFormat(true);
    !!$getLegend(this$static) && $getLegend(this$static).setNeedsFormat(true);
    !this$static.animInfo && (this$static.animInfo = new AnimInfo(0, 500, 'Transition', 'circleOut'));
    $setAnimateDrawNeeded(this$static.chart);
    $logSeriesState(this$static.chart, value_0);
  }
}

function $showDataLabels_0(this$static){
  !!this$static.dataLabel && $showDataLabels(this$static.dataLabel);
}

function $supportsDrag(this$static){
  if (this$static.supportsDrag && this$static.hasInteractions)
    return true;
  return false;
}

function $supportsSortingFromScale(this$static){
  if (this$static.handler)
    return this$static.handler.supportsSortingFromScale();
  return false;
}

function $updateWithDefinition_0(this$static, compDef, datasourceMap, oldDataGrid, fromCreation){
  var dataGrid, dataSet, dateGrouping, graphType, typeAttrs;
  dataSet = false;
  $setWarningMessage(this$static.chart, null);
  if (compDef) {
    if (!fromCreation) {
      typeAttrs = getTypeAttributes(compDef);
      graphType = getGraphType(compDef);
      changeToGraphType(this$static, graphType, typeAttrs, false, false);
    }
    this$static.removeDependentCompsFromCompArray();
    !!this$static.dependentComps && (this$static.dependentComps.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
    $addLegendComponents(this$static, compDef.overrides);
    $setAnnotations(this$static, compDef.annotations);
    $setColumnFormats(this$static, compDef.columnFormats);
    if (compDef.datasource != null && compDef.datasource.length > 0 && !!datasourceMap) {
      dataGrid = castTo($getStringValue(datasourceMap, compDef.datasource), 61);
      if (dataGrid) {
        if (!!compDef.overrides && compDef.overrides.get_0('date_grouping') != null && !!dataGrid) {
          dateGrouping = castToString(compDef.overrides.get_0('date_grouping'));
          $equals_2(dateGrouping.substr(0, 1), '2') && $setDateGrouping(dataGrid, 1, this$static.chart.locale);
          $equals_2(dateGrouping.substr(0, 1), '3') && $setDateGrouping(dataGrid, 2, this$static.chart.locale);
        }
        this$static.setData(dataGrid);
        dataSet = true;
      }
    }
     else if (oldDataGrid) {
      this$static.setData(oldDataGrid);
      dataSet = true;
    }
    !!compDef.scaleMarkers && $addScaleMarkers(this$static, compDef.scaleMarkers);
    this$static.setNeedsFormat(true);
  }
  if (!dataSet && !!this$static.data_0 && !!datasourceMap) {
    dataGrid = castTo($getStringValue(datasourceMap, this$static.data_0.name_0), 61);
    if (dataGrid) {
      !!this$static.handler && (this$static.handler.originalData = null);
      this$static.setData(dataGrid);
      this$static.setNeedsFormat(true);
      !this$static.animInfo && (this$static.animInfo = new AnimInfo(0, 500, 'Transition', 'circleOut'));
    }
  }
  !!this$static.data_0 && (this$static.data_0.errorCode != 0?$setWarningMessage(this$static.chart, getErrorCodeString(this$static.data_0.errorCode, this$static.chart.locale)):this$static.data_0.dataHasBeenLimited && $warnNotAllDataShown(this$static.chart));
}

function Graph(theChart, name_0, type_0){
  ComponentCSR.call(this, theChart, name_0);
  this.currentSort = 0;
  this.popVarDisplayType = 0;
  this.graphType = type_0;
}

defineClass(43, 63, $intern_35, Graph);
_.adjustLayout = function adjustLayout_1(){
  if ((this.treatAsSmall || this.simplifiedForMobile) && this.graphType != 22) {
    this.dataLabelVisible = false;
    this.hasInteractions = this.allowInteractions;
  }
   else {
    this.hasChartOptions() && this.getChartOptionAsString('datalabel_text') != null && (this.dataLabelVisible = true);
    this.hasInteractions = this.allowInteractions;
  }
}
;
_.cancelDrag_0 = function cancelDrag_1(){
  if (this.supportsDrag)
    return this.handler.cancelDrag_0();
  return false;
}
;
_.cancelHighlighting = function cancelHighlighting_1(){
  if (!!this.handler && this.handler.hasHandlerSpecificHighlightUsingFilters())
    return this.handler.highlightUsingFilters(null);
  return this.setHoverData(null, this.rnd);
}
;
_.checkAndSetChainedAnimations = function checkAndSetChainedAnimations_0(){
  if (this.typeAttributes.isPopPlay && !!this.playControl) {
    return $setNextState(this.playControl);
  }
  return false;
}
;
_.clearRowFilter = function clearRowFilter_0(){
  $clearRowFilter(this);
  $cancelZoom(this);
}
;
_.draw_1 = function draw_5(rnd){
  $draw_4(this, rnd);
}
;
_.drawAnnotations = function drawAnnotations(){
}
;
_.drawSupportingBgLayer = function drawSupportingBgLayer(rnd){
  !!this.playControl && $draw_1(this.playControl, rnd);
}
;
_.drawSupportingFgLayer = function drawSupportingFgLayer(rnd){
}
;
_.drawSupportingMainLayer = function drawSupportingMainLayer(rnd){
}
;
_.format_0 = function format_3(rnd){
  this.rnd = rnd;
  clearGraphicElementArray(this.backGeAry);
  clearGraphicElementArray(this.geAry);
  this.frontGeAry.clear_0();
  this.dataLabel = new DataLabel(this);
  this.dataLabelText != null && this.dataLabelVisible && $setFormatString(this.dataLabel, this.dataLabelText);
  $resetAnnotations(this);
  $setCloseZoomSize(this);
  this.resetHiddenRowsButton = null;
  if (!!this.playControl && !this.treatAsSmall && !this.isThumbnail && !this.typeAttributes.isPopPlay) {
    $setHeight(this.bnds, this.chart.dimension.height_0);
    $setWidth(this.bnds, this.chart.dimension.width_0);
  }
  if (!this.data_0 || this.data_0.numVisibleRows == 0 || this.data_0.numVisibleCols == 0) {
    !!this.handler && !this.handler.handleNoDataState(this.rnd) && $addNoDataExistsMessage(this);
    if (!this.data_0 || this.data_0.numVisibleRows == 0 || this.data_0.numVisibleCols == 0)
      return;
  }
  this.processChartOptions();
  this.graphType == 38 && $setVerticalSizeOnly(this.chart, 1500);
  if (this.typeAttributes.isPopPlay && !this.playControl) {
    $setHeight(this.bnds, this.bnds.height_0 - 30);
    this.playControl = new PlayControl(this.chart, this);
    $format_4(this.playControl, round_int(this.bnds.x_0), round_int($getBottom(this.bnds)), round_int(this.bnds.width_0));
  }
  !!this.handler && this.handler.format_0(rnd);
  !!this.chart && this.chart.includeJsonMap && $processSeriesInfoForJsonMap(this);
  !!this.annotations && this.annotations.size_1() > 0 && $combineAnnotationsIntoMap(this);
}
;
_.freeResources = function freeResources_9(dataToKeep){
  $freeResources_15(this, dataToKeep);
}
;
_.getColorAry = function getColorAry_1(){
  return $getColorAry(this);
}
;
_.getCompositeFilters = function getCompositeFilters_1(filters){
  var filter, filter1, filter2;
  if (this.getChartOptionAsString('row_filter') != null && !$equals_2(this.getChartOptionAsString('row_filter'), 'none') && this.getChartOptionAsString('row_show_as_unfiltered') != null && !$equals_2(this.getChartOptionAsString('row_show_as_unfiltered'), 'none')) {
    filter1 = this.getChartOptionAsString('row_filter');
    filter2 = this.getChartOptionAsString('row_show_as_unfiltered');
    filter = getRowFilterIntersection(filter1, filter2);
    filter != null && (filters.array[filters.array.length] = filter , true);
  }
   else 
    this.getChartOptionAsString('row_filter') != null && !$equals_2(this.getChartOptionAsString('row_filter'), 'none')?$add_1(filters, this.getChartOptionAsString('row_filter')):this.getChartOptionAsString('row_show_as_unfiltered') != null && !$equals_2(this.getChartOptionAsString('row_show_as_unfiltered'), 'none') && $add_1(filters, this.getChartOptionAsString('row_show_as_unfiltered'));
  this.getChartOptionAsString('column_show_as_unfiltered') != null && !$equals_2(this.getChartOptionAsString('column_show_as_unfiltered'), 'none') && $add_1(filters, this.getChartOptionAsString('column_show_as_unfiltered'));
  this.getChartOptionAsString('range_filter_y') != null && !$equals_2(this.getChartOptionAsString('range_filter_y'), 'none') && $add_1(filters, this.getChartOptionAsString('range_filter_y'));
  this.getChartOptionAsString('range_filter_x') != null && !$equals_2(this.getChartOptionAsString('range_filter_x'), 'none') && $add_1(filters, this.getChartOptionAsString('range_filter_x'));
  this.getChartOptionAsString('range_filter_time') != null && !$equals_2(this.getChartOptionAsString('range_filter_time'), 'none') && $add_1(filters, this.getChartOptionAsString('range_filter_time'));
}
;
_.getCurFontSize = function getCurFontSize(){
  return $getCurFontSize(this);
}
;
_.getData = function getData_1(){
  return this.data_0;
}
;
_.getDataLabelFormatterForCell = function getDataLabelFormatterForCell(cell){
  return this.dataLabelNumberFormatter;
}
;
_.getEstimateOfNumberOfShapesToDraw = function getEstimateOfNumberOfShapesToDraw_0(){
  var size_0;
  size_0 = $getEstimateOfNumberOfShapesToDraw(this);
  size_0 += this.backGeAry.array.length;
  size_0 += this.frontGeAry.size_1();
  return size_0;
}
;
_.getHitBounds = function getHitBounds_0(){
  return $getHitBounds(this);
}
;
_.getHoverFormatterForCell = function getHoverFormatterForCell(cell){
  return this.hoverNumberFormatter;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_3(x_0, y_0, rnd){
  var shape_0;
  shape_0 = null;
  !!this.handler && (shape_0 = this.handler.getShapeUnderPoint(x_0, y_0, rnd));
  !shape_0 && !!this.playControl && (shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this.playControl.geAry, rnd, this));
  !shape_0 && (shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this.frontGeAry, rnd, this));
  !shape_0 && (shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this.geAry, rnd, this));
  return shape_0;
}
;
_.handleClick = function handleClick_4(shapeClicked){
  return $handleClick_0(this, shapeClicked);
}
;
_.handleDrag_0 = function handleDrag_2(startX, startY, curX, curY){
  if (this.supportsDrag)
    return this.handler.handleDrag_0(startX, startY, curX, curY);
  return false;
}
;
_.handleDragEnd_0 = function handleDragEnd_2(startX, startY, curX, curY){
  if (this.supportsDrag)
    return this.handler.handleDragEnd_0(startX, startY, curX, curY);
  return false;
}
;
_.handleRowFiltersHiddenSeriesAndSort = function handleRowFiltersHiddenSeriesAndSort(){
  this.hasChartOptions() && $handleRowFiltersHiddenSeries(this, this.data_0);
}
;
_.hasDataTable = function hasDataTable(){
  return false;
}
;
_.hasInteractions_0 = function hasInteractions_0(){
  return $hasInteractions(this);
}
;
_.hasTimeScale = function hasTimeScale_0(){
  return false;
}
;
_.highlightUsingFilters = function highlightUsingFilters_1(filters){
  var highlightManager, myHoverData, seriesInfo, seriesInfo$iterator, seriesInfo$iterator0, srsShapeInfo, srsShapeInfo$iterator;
  if (!!this.handler && this.handler.hasHandlerSpecificHighlightUsingFilters())
    return this.handler.highlightUsingFilters(filters);
  else {
    this.highlightFromExternal = true;
    myHoverData = null;
    if (!!filters && filters.array.length > 0) {
      highlightManager = new HighlightManager(filters);
      if (!!this.seriesShapes && this.seriesShapes.array.length > 0) {
        for (seriesInfo$iterator0 = new ArrayList$1(this.seriesShapes); seriesInfo$iterator0.i < seriesInfo$iterator0.this$01.array.length;) {
          seriesInfo = castTo($next_3(seriesInfo$iterator0), 19);
          if (seriesInfo.srsShapeList) {
            for (srsShapeInfo$iterator = new ArrayList$1(seriesInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
              srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
              !!srsShapeInfo.cell && ($matchForName(highlightManager, $getColName(srsShapeInfo.cell))?(myHoverData = srsShapeInfo):$matchForColumnName(highlightManager, $getColName(srsShapeInfo.cell)) && (myHoverData = $getExistingLegendItemInfoForSeries($getLegend(this), srsShapeInfo.cell.column)));
              if (myHoverData != null)
                break;
            }
          }
          if (myHoverData != null)
            break;
        }
        if (myHoverData == null) {
          for (seriesInfo$iterator = new ArrayList$1(this.seriesShapes); seriesInfo$iterator.i < seriesInfo$iterator.this$01.array.length;) {
            seriesInfo = castTo($next_3(seriesInfo$iterator), 19);
            if (seriesInfo.srsShapeList) {
              for (srsShapeInfo$iterator = new ArrayList$1(seriesInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
                srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
                !!srsShapeInfo.cell && $matchForName(highlightManager, $getRowName(srsShapeInfo.cell)) && (myHoverData = srsShapeInfo.cell.row);
                if (myHoverData != null)
                  break;
              }
            }
            if (myHoverData != null)
              break;
          }
        }
      }
      if (myHoverData != null) {
        return this.setHoverData(myHoverData, this.rnd);
      }
    }
  }
  return false;
}
;
_.isHorizontal_0 = function isHorizontal_0(){
  return false;
}
;
_.onResize = function onResize(){
  this.resetHiddenRowsButton = null;
}
;
_.processChartOption = function processChartOption_0(key){
  var handled, position, showOneOn, value_0;
  this.overrideLayout = false;
  if ($processChartOption(this, key))
    return true;
  value_0 = this.getChartOptionAsString(key);
  handled = true;
  switch (key) {
    case 'hide_interactivity':
      this.allowInteractions = this.allowInteractions && !isTrue(value_0);
      this.hasInteractions = this.allowInteractions;
      break;
    case 'series_1_color':
    case 'series_2_color':
    case 'series_3_color':
    case 'series_4_color':
    case 'series_5_color':
    case 'series_6_color':
    case 'series_7_color':
    case 'series_8_color':
    case 'series_9_color':
    case 'series_10_color':
    case 'series_11_color':
    case 'series_12_color':
    case 'series_13_color':
    case 'series_14_color':
    case 'series_15_color':
    case 'series_16_color':
      $setChartOptionOverride_0(this.colorMgr, key, value_0);
      $clearConditionalFormats(this.colorMgr);
      break;
    case 'hover_text':
      this.hoverLabelText = ($clinit_StrUtil() , entityDecodeString(value_0));
      this.hoverLabelText = convertBrToNewLine(this.hoverLabelText);
      break;
    case 'hover_format':
    case 'change_hvr_value_format':
      $initHoverFormatterIfNeeded(this);
      $applyValueFormatOverride(this.hoverNumberFormatter, value_0);
      this.hoverFormatNumTypeOverride = value_0;
      break;
    case 'divide_value_scale_by_hvr':
    case 'change_hvr_divide_value_by':
      $initHoverFormatterIfNeeded(this);
      $setDivideScaleBy(this.hoverNumberFormatter, value_0, true);
      this.hoverFormatDivideValByOverride = value_0;
      break;
    case 'decimal_places_hvr':
    case 'change_hvr_decimal_places':
      $initHoverFormatterIfNeeded(this);
      $applyDecimalPlaces(this.hoverNumberFormatter, value_0);
      this.hoverFormatDecimalPlacesOverride = value_0;
      break;
    case 'percent_decimal_places_hvr':
      $initHoverFormatterIfNeeded(this);
      $applyPercentDecimalPlaces(this.hoverNumberFormatter, value_0);
      break;
    case 'negative_numbers_hvr':
      $initHoverFormatterIfNeeded(this);
      $applyNegativeFormat(this.hoverNumberFormatter, value_0);
      break;
    case 'datalabel_text':
      showOneOn = this.getChartOptionAsString('datalabel_show_one');
      (showOneOn == null || !$equalsIgnoreCase(showOneOn, 'true') || !!this.typeAttributes && (this.typeAttributes.isStacked || !!this.data_0 && $getNumCols(this.data_0) == 1)) && $setDataLabelFormatString(this, value_0);
      break;
    case 'datalabel_format':
      !!this.dataLabelNumberFormatter && $applyValueFormatOverride(this.dataLabelNumberFormatter, value_0);
      break;
    case 'decimal_places_dl':
      !!this.dataLabelNumberFormatter && $applyDecimalPlaces(this.dataLabelNumberFormatter, value_0);
      break;
    case 'datalabel_position_funnel':
    case 'datalabel_position':
      !!this.dataLabel && $setPositionByString(this.dataLabel, value_0);
      break;
    case 'datalabel_show_zero':
      !!this.dataLabel && (this.dataLabel.showIfZeroValue = isTrue(value_0));
      break;
    case 'datalabel_justification':
      !!this.dataLabel && $setJustificationByString(this.dataLabel, value_0);
      break;
    case 'datalabel_fill':
      !!this.dataLabel && (this.dataLabel.showBackground = isTrue(value_0));
      break;
    case 'datalabel_fill_color':
      !!this.dataLabel && (this.dataLabel.bkgFillColor = $getColorForName(this.colorMgr, value_0));
      break;
    case 'datalabel_fill_trans_pct':
      !!this.dataLabel && (this.dataLabel.bkgFillAlpha = getFillTransparencyPct(value_0));
      break;
    case 'datalabel_allow_overlap':
      !!this.dataLabel && (this.dataLabel.allowOverlap = isTrue(value_0));
      break;
    case 'datalabel_negative_numbers':
      !!this.dataLabelNumberFormatter && $applyNegativeFormat(this.dataLabelNumberFormatter, value_0);
      break;
    case 'percent_decimal_places':
      !!this.dataLabelNumberFormatter && $applyPercentDecimalPlaces(this.dataLabelNumberFormatter, value_0);
      break;
    case 'pv_decimal_places':
      $applyPercentDecimalPlaces(this.numberFormatter, value_0);
      break;
    case 'rotate_datalabel':
      !!this.dataLabel && $setRotated(this.dataLabel, isTrue(value_0));
      break;
    case 'datalabel_show_total':
      if (this.dataLabel) {
        $setShowTotal(this.dataLabel, isTrue(value_0));
        if (this.dataLabel.showTotal) {
          position = this.getChartOptionAsString('datalabel_position');
          (position == null || $equalsIgnoreCase(position, 'default')) && (this.dataLabel.position = getPositionByString('center') , undefined);
        }
      }

      break;
    case 'datalabel_show_one':
      if (!!this.typeAttributes && this.typeAttributes.isStacked && !this.typeAttributes.isNestedBar && !!this.dataLabel) {
        $setShowOne(this.dataLabel, isTrue(value_0));
      }
       else if (this.dataLabel) {
        this.dataLabel.showOneLabel = false;
        this.dataLabel = null;
      }

      break;
    case 'datalabel_showon':
      !!this.dataLabel && $setShowLabelsOn(this.dataLabel, value_0);
      break;
    case 'override_layout':
      this.overrideLayout = isTrue(value_0);
      break;
    default:handled = false;
  }
  return handled;
}
;
_.processChartOptions = function processChartOptions_2(){
  $processChartOptions_2(this);
}
;
_.removeFilter_1 = function removeFilter_1(filterToRemove){
  var redrawNeeded;
  redrawNeeded = false;
  !!this.handler && (redrawNeeded = this.handler.removeFilter_1(filterToRemove));
  redrawNeeded = redrawNeeded | $removeFilter_0(this, filterToRemove);
  return redrawNeeded;
}
;
_.reset_0 = function reset_3(){
  $reset_2(this);
}
;
_.resetForTypeChange = function resetForTypeChange(){
  $resetForTypeChange(this);
}
;
_.setData = function setData_1(dataGrid){
  $setData_0(this, dataGrid);
}
;
_.setDrillFilter = function setDrillFilter_1(shape_0, clicked){
  var dataObj;
  if (shape_0) {
    dataObj = $getDataObjectForShape(shape_0, this);
    instanceOf(dataObj, 18)?$setDrillForShape(this, castTo(dataObj, 18), clicked):instanceOf(dataObj, 87) && !!castTo(dataObj, 87).srsShapeInfo?$setDrillForShape(this, castTo(dataObj, 87).srsShapeInfo, clicked):instanceOf(dataObj, 42)?$setDrillForList(this, castTo(dataObj, 42), clicked):instanceOf(dataObj, 7)?instanceOf(dataObj, 7) && (clicked && $usingCardBus(this.chart)?$setDrillFromDataBasedOnShowAsFiltered(this, true):$setHighlightDrillForRow(this, castTo(dataObj, 7))):shape_0.drillFilter != null?(this.drillFilter = shape_0.drillFilter):(this.drillFilter = null);
  }
}
;
_.setEditAnnotationMode_0 = function setEditAnnotationMode_1(inAddState){
  if (!inAddState && !!this.annotationIndicatorShape) {
    this.annotationIndicatorShape = null;
    this.annotationIndicatorHitShape = null;
  }
   else 
    inAddState && instanceOf(this, 40) && $drawCenteredAnnotationThumb(this);
}
;
_.setFrame = function setFrame_2(type_0, easingType, startTime, curTime, endTime, rnd){
  if (!!this.data_0 && $getNumRows(this.data_0) > 0) {
    !!this.dataLabel && $removeDataLabels(this.dataLabel);
    !!this.handler && this.handler.setFrame(type_0, easingType, startTime, curTime, endTime, rnd);
  }
}
;
_.setHoverData = function setHoverData_7(hoverData, rnd){
  return $setHoverData(this, hoverData, rnd);
}
;
_.setHoverEffects = function setHoverEffects_0(hoverData, rnd){
  !!this.handler && this.handler.setHoverEffects_0(hoverData, rnd);
}
;
_.stripAllReferencesForThumbnail = function stripAllReferencesForThumbnail_0(){
  $stripAllReferencesForThumbnail(this);
  this.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  !!this.lastShapes && (this.lastShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  !!this.lastShapesFullSeriesMap && $reset_5(this.lastShapesFullSeriesMap);
  !!this.lastShapesMap && $reset_5(this.lastShapesMap);
  removeDataObjectsFromShapesInGEAry(this.backGeAry);
  removeDataObjectsFromShapesInGEAry(this.frontGeAry);
}
;
_.supportsDrag_0 = function supportsDrag_2(){
  return $supportsDrag(this);
}
;
_.updateWithDefinition = function updateWithDefinition_2(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
  $updateWithDefinition_0(this, compDef, datasourceMap, oldDataGrid, fromCreation);
}
;
_.allowAnnotationSpaceWithHiddenScales = false;
_.annotationsFormatted = false;
_.currentColumn = 0;
_.currentSort = 0;
_.currentSortSetFromChartOptions = false;
_.dataLabelVisible = false;
_.displayLimit = 0;
_.graphType = 0;
_.hideOtherCategory = false;
_.hidePoPVarNonCurrent = false;
_.highlightFromExternal = false;
_.outlineStyle = false;
_.popVarDisplayType = 0;
_.previousGraphType = 0;
_.textAndTicksInBounds = false;
_.zoomFilterCloseSize = 0;
_.zoomFilterMargin = 0;
var zoomFilterClosePath = 'M 20 11 L 7.83 11 L 13.42 5.41 L 12 4 L 4 12 L 12 20 L 13.41 18.59 L 7.83 13 L 20 13 L 20 11 Z';
var Lcom_domo_charting_graphs_Graph_2_classLit = createForClass('com.domo.charting.graphs', 'Graph', 43);
function addGraphTypeIfNotCurrent(supportedGraphTypes, current, graphType, typeAttributes){
  (current.type_0 != graphType || !$equals(current.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(graphType, typeAttributes));
}

function addPieVariants(supportedGraphTypes, currentState){
  var nautilus, rose;
  addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 9, new TypeAttributes);
  addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 8, new TypeAttributes);
  nautilus = new TypeAttributes;
  nautilus.isNautilus = true;
  (currentState.type_0 != 8 || !$equals(currentState.typeAttributes, nautilus)) && $add_1(supportedGraphTypes, new GraphType(8, nautilus));
  nautilus = new TypeAttributes;
  nautilus.isNautilus = true;
  (currentState.type_0 != 9 || !$equals(currentState.typeAttributes, nautilus)) && $add_1(supportedGraphTypes, new GraphType(9, nautilus));
  rose = new TypeAttributes;
  rose.isNightingale = true;
  (currentState.type_0 != 8 || !$equals(currentState.typeAttributes, rose)) && $add_1(supportedGraphTypes, new GraphType(8, rose));
}

function changeToGraphType(grph, graphType, typeAttributes, forceUpdateAll, thumbnail){
  var oldData, oldGraphType, oldTypeAttrs;
  oldGraphType = grph.graphType;
  oldTypeAttrs = grph.typeAttributes;
  if (oldGraphType != graphType || !(oldTypeAttrs.isStacked == typeAttributes.isStacked && oldTypeAttrs.curvedLines == typeAttributes.curvedLines && oldTypeAttrs.stepLines == typeAttributes.stepLines && oldTypeAttrs.isRunningTotal == typeAttributes.isRunningTotal && oldTypeAttrs.isNestedBar == typeAttributes.isNestedBar && oldTypeAttrs.isBullet == typeAttributes.isBullet && oldTypeAttrs.isSymbol == typeAttributes.isSymbol && oldTypeAttrs.isSymbolOverlay == typeAttributes.isSymbolOverlay && oldTypeAttrs.isGroupedStacked == typeAttributes.isGroupedStacked && oldTypeAttrs.isAdvancedCompGauge == typeAttributes.isAdvancedCompGauge && oldTypeAttrs.isCompNoFillGauge == typeAttributes.isCompNoFillGauge && oldTypeAttrs.isHighLow == typeAttributes.isHighLow && oldTypeAttrs.isHighLowOpenClose == typeAttributes.isHighLowOpenClose && oldTypeAttrs.isGanttPercent == typeAttributes.isGanttPercent && oldTypeAttrs.isBubble == typeAttributes.isBubble && oldTypeAttrs.isFaceGauge == typeAttributes.isFaceGauge && oldTypeAttrs.isSingleValue == typeAttributes.isSingleValue && oldTypeAttrs.isProgressBar == typeAttributes.isProgressBar && oldTypeAttrs.isTextbox == typeAttributes.isTextbox && oldTypeAttrs.isRadial == typeAttributes.isRadial && oldTypeAttrs.isCategoryScatter == typeAttributes.isCategoryScatter && oldTypeAttrs.showSymbols == typeAttributes.showSymbols && oldTypeAttrs.symbolsOnly == typeAttributes.symbolsOnly && oldTypeAttrs.percentOfSeriesData == typeAttributes.percentOfSeriesData && oldTypeAttrs.percentOfCategoryData == typeAttributes.percentOfCategoryData && oldTypeAttrs.isNautilus == typeAttributes.isNautilus && oldTypeAttrs.isNightingale == typeAttributes.isNightingale && oldTypeAttrs.isPoPVariance == typeAttributes.isPoPVariance && oldTypeAttrs.isPeriodOverPeriod == typeAttributes.isPeriodOverPeriod && oldTypeAttrs.originallyStacked == typeAttributes.originallyStacked && oldTypeAttrs.isMarimekko == typeAttributes.isMarimekko && oldTypeAttrs.isDotPlot == typeAttributes.isDotPlot && oldTypeAttrs.isPopPlay == typeAttributes.isPopPlay && oldTypeAttrs.isOverlay == typeAttributes.isOverlay && oldTypeAttrs.isXYLine == typeAttributes.isXYLine && oldTypeAttrs.isXYForecast == typeAttributes.isXYForecast && oldTypeAttrs.isXYOutlier == typeAttributes.isXYOutlier && oldTypeAttrs.isStream == typeAttributes.isStream && oldTypeAttrs.isSpark == typeAttributes.isSpark && oldTypeAttrs.isNonAggregatedVersion == typeAttributes.isNonAggregatedVersion && oldTypeAttrs.isSelector == typeAttributes.isSelector && oldTypeAttrs.isDynamic == typeAttributes.isDynamic && oldTypeAttrs.isGrid == typeAttributes.isGrid && oldTypeAttrs.isRadio == typeAttributes.isRadio) || forceUpdateAll) {
    $setWarningMessage(grph.chart, null);
    grph.chart.goalShape = null;
    oldData = resetGraph(grph, graphType, typeAttributes, true, thumbnail);
    !!oldData && grph.setData(oldData);
  }
  return grph;
}

function createGraph(name_0, graphType, typeAttributes, chart, thumbnail, overrides){
  var grph;
  isScaleGraphType(graphType, typeAttributes)?(grph = new ScaleGraph(chart, name_0, graphType)):isTableGraphType(graphType)?(grph = new TableCSR(chart, name_0, graphType)):isPivotTableGraphType(graphType)?(grph = new PivotTableCSR(chart, name_0, graphType)):(grph = new Graph(chart, name_0, graphType));
  !!overrides && (grph.chartOptions = overrides);
  grph.isThumbnail = true;
  grph.graphType = -1;
  return changeToGraphType(grph, graphType, typeAttributes, false, thumbnail);
}

function getBadgeNameFromComponent(comp){
  var graphType, typeAttributes;
  if (comp) {
    graphType = comp.graphType;
    typeAttributes = comp.typeAttributes;
    return getBadgeNameFromTypeAndAttributes(graphType, typeAttributes, comp.data_0);
  }
  return '';
}

function getBadgeNameFromTypeAndAttributes(graphType, typeAttributes, dataGrid){
  if (typeAttributes.isPeriodOverPeriod) {
    if (typeAttributes.isPoPVariance) {
      switch (graphType) {
        case 30:
          return 'badge_pop_bar_line_var';
        case 4:
          return 'badge_pop_line_bar_var';
        case 2:
          return 'badge_pop_trendline_var';
      }
    }
    switch (graphType) {
      case 30:
        return 'badge_pop_bar_line';
      case 4:
        return 'badge_pop_line_bar';
      case 2:
        if (typeAttributes.isPopPlay)
          return 'badge_pop_trendline_play';
        return 'badge_pop_trendline';
      case 0:
        if (typeAttributes.isPopPlay)
          return 'badge_pop_vert_bar_play';
        return 'badge_pop_vert_multibar';
    }
  }
  switch (graphType) {
    case 0:
      if (typeAttributes.isNestedBar)
        return 'badge_vert_nestedbar';
      else if (typeAttributes.percentOfSeriesData)
        return 'badge_vert_percentbar';
      else if (typeAttributes.isSymbol)
        return 'badge_vert_symbol';
      else if (typeAttributes.isSymbolOverlay)
        return 'badge_vert_symbol_overlay';
      else if (typeAttributes.isOverlay) {
        if (typeAttributes.isDotPlot)
          return 'badge_vert_dotplot_overlay';
        return 'badge_vert_bar_overlay';
      }
       else if (typeAttributes.isBullet)
        return 'badge_vert_bullet';
      return typeAttributes.isStacked?typeAttributes.isRunningTotal?'badge_vert_rtstackedbar':typeAttributes.isDotPlot?'badge_vert_stacked_dotplot':typeAttributes.percentOfCategoryData?typeAttributes.isMarimekko?'badge_vert_marimekko':'badge_vert_100pct':typeAttributes.isGroupedStacked?'badge_vert_dual_stackedbar':'badge_vert_stackedbar':typeAttributes.isDotPlot?'badge_vert_multi_dotplot':typeAttributes.isGrid && typeAttributes.isSpark?'badge_flex_table':!!dataGrid && $getNumCols(dataGrid) > 1?typeAttributes.isRunningTotal?'badge_vert_rtmultibar':'badge_vert_multibar':typeAttributes.isRunningTotal?'badge_vert_rtbar':typeAttributes.isSpark?'badge_spark_bar':'badge_vert_bar';
    case 1:
      if (typeAttributes.isNestedBar)
        return 'badge_horiz_nestedbar';
      else if (typeAttributes.percentOfSeriesData)
        return 'badge_horiz_percentbar';
      else if (typeAttributes.isCategoryScatter)
        return 'badge_category_scatter';
      else if (typeAttributes.isSymbol)
        return 'badge_horiz_symbol';
      else if (typeAttributes.isSymbolOverlay)
        return 'badge_horiz_symbol_overlay';
      else if (typeAttributes.isOverlay) {
        if (typeAttributes.isDotPlot)
          return 'badge_horiz_dotplot_overlay';
        return 'badge_horiz_bar_overlay';
      }
       else if (typeAttributes.isBullet)
        return 'badge_bullet';
      return typeAttributes.isStacked?typeAttributes.isRunningTotal?'badge_horiz_rtstackedbar':typeAttributes.isDotPlot?'badge_horiz_stacked_dotplot':typeAttributes.percentOfCategoryData?typeAttributes.isMarimekko?'badge_horiz_marimekko':'badge_horiz_100pct':typeAttributes.isGroupedStacked?'badge_horiz_dual_stackedbar':'badge_horiz_stackedbar':typeAttributes.isGrid && typeAttributes.isSpark?'badge_flex_table':typeAttributes.isDotPlot?'badge_horiz_multi_dotplot':!!dataGrid && $getNumCols(dataGrid) > 1?typeAttributes.isRunningTotal?'badge_horiz_rtmultibar':'badge_horiz_multibar':typeAttributes.isRunningTotal?'badge_horiz_rtbar':'badge_horiz_bar';
    case 2:
      if (typeAttributes.stepLines)
        return 'badge_stepline';
      if (typeAttributes.curvedLines) {
        if (typeAttributes.showSymbols) {
          if (typeAttributes.isRunningTotal)
            return 'badge_curved_rt_symbolline';
          return 'badge_curved_symbolline';
        }
         else 
          return typeAttributes.isRunningTotal?'badge_curved_rttrendline':typeAttributes.isSpark && typeAttributes.isGrid?'badge_flex_table':typeAttributes.isSpark?'badge_spark_line':'badge_curvedline';
      }
       else {
        if (typeAttributes.showSymbols) {
          if (typeAttributes.isRunningTotal)
            return 'badge_rttrendline';
          return 'badge_symbolline';
        }
        return typeAttributes.isRunningTotal?'badge_rttrendline':typeAttributes.isSpark && typeAttributes.isGrid?'badge_flex_table':typeAttributes.isSpark?'badge_spark_line':'badge_trendline';
      }

    case 3:
      if (typeAttributes.stepLines)
        return 'badge_horiz_stepline';
      return typeAttributes.curvedLines?typeAttributes.showSymbols?'badge_horiz_curved_symbolline':'badge_horiz_curvedline':typeAttributes.showSymbols?'badge_horiz_symbolline':'badge_horiz_trendline';
    case 4:
      if (typeAttributes.isNestedBar)
        return 'badge_vert_nested_linebar';
      else if (typeAttributes.isGroupedStacked)
        return 'badge_line_clusterbar';
      return typeAttributes.isStacked?typeAttributes.percentOfCategoryData?'badge_vert_100pct_linebar':typeAttributes.showSymbols && typeAttributes.symbolsOnly?'badge_symbol_stackedbar':typeAttributes.isDotPlot?'badge_vert_line_stacked_dotplot':'badge_line_stackedbar':typeAttributes.showSymbols && typeAttributes.symbolsOnly?'badge_symbol_bar':typeAttributes.isDotPlot?'badge_vert_line_multi_dotplot':'badge_line_bar';
    case 30:
      return typeAttributes.isStacked?'badge2_stackedbar_line':'badge_vert_bar_line';
    case 5:
      if (typeAttributes.isNestedBar)
        return 'badge_horiz_nested_linebar';
      else if (typeAttributes.isGroupedStacked)
        return 'badge_horiz_line_clusterbar';
      return typeAttributes.isStacked?typeAttributes.percentOfCategoryData?'badge_horiz_100pct_linebar':typeAttributes.showSymbols && typeAttributes.symbolsOnly?'badge_horiz_symbol_stackedbar':typeAttributes.isDotPlot?'badge_horiz_line_stacked_dotplot':'badge_horiz_line_stackedbar':typeAttributes.showSymbols && typeAttributes.symbolsOnly?'badge_horiz_symbol_bar':typeAttributes.isDotPlot?'badge_horiz_line_multi_dotplot':'badge_horiz_line_bar';
    case 31:
      return typeAttributes.isStacked?'badge2_horiz_stackedbar_line':'badge_horiz_bar_line';
    case 6:
      return typeAttributes.isStacked || typeAttributes.originallyStacked || !!dataGrid && $getNumCols(dataGrid) == 1?typeAttributes.percentOfCategoryData?typeAttributes.curvedLines?'badge_vert_curved_100pct_area':typeAttributes.stepLines?'badge_vert_step_100pct_area':'badge_vert_100pct_area':typeAttributes.curvedLines?typeAttributes.isStream?'badge_stream':'badge_vert_curved_stacked_area':typeAttributes.stepLines?'badge_vert_step_stacked_area':'badge_stackedtrend':typeAttributes.curvedLines?'badge_vert_curved_area_overlay':typeAttributes.stepLines?'badge_vert_step_area_overlay':'badge_vert_area_overlay';
    case 7:
      if (typeAttributes.isStacked) {
        if (typeAttributes.percentOfCategoryData) {
          return typeAttributes.curvedLines?'badge_horiz_curved_100pct_area':typeAttributes.stepLines?'badge_horiz_step_100pct_area':'badge_horiz_100pct_area';
        }
         else if (typeAttributes.curvedLines) {
          if (typeAttributes.isStream)
            return 'badge_stream_funnel';
          return 'badge_horiz_curved_stacked_area';
        }
         else 
          return typeAttributes.stepLines?'badge_horiz_step_stacked_area':'badge_horiz_stackedtrend';
      }
       else {
        return typeAttributes.curvedLines?'badge_horiz_curved_area_overlay':typeAttributes.stepLines?'badge_horiz_step_area_overlay':'badge_horiz_area_overlay';
      }

    case 8:
      if (typeAttributes.isNautilus)
        return 'badge_nautilus';
      else if (typeAttributes.isNightingale)
        return 'badge_nightingale_rose';
      else if (typeAttributes.isPopPlay)
        return 'badge_pop_pie_play';
      return 'badge_pie';
    case 32:
      return 'badge_sunburst';
    case 9:
      if (typeAttributes.isPopPlay)
        return 'badge_pop_donut_play';
      else if (typeAttributes.isNautilus)
        return 'badge_nautilus_donut';
      return 'badge_donut';
    case 10:
      return typeAttributes.isGanttPercent?'badge_gantt_percent':'badge_gantt';
    case 11:
      return typeAttributes.isHighLow?'badge_highlow':'badge_stock_candlestick';
    case 12:
      if (typeAttributes.isXYLine && typeAttributes.isXYForecast)
        return 'badge_ds_forecasting';
      else if (typeAttributes.isXYLine && typeAttributes.isXYOutlier)
        return 'badge_ds_outliers';
      else if (typeAttributes.isXYLine)
        return 'badge_xy_line';
      else if (typeAttributes.isBubble) {
        if (typeAttributes.isNonAggregatedVersion)
          return 'badge_xybubble';
        return 'badge_bubble';
      }
       else 
        return typeAttributes.isNonAggregatedVersion?'badge_xyscatterplot_basic':'badge_xyscatterplot';
    case 13:
      return 'badge_funnel';
    case 14:
      return typeAttributes.isFaceGauge?'badge_facegauge':typeAttributes.isSingleValue?'badge_singlevalue':typeAttributes.isProgressBar?'badge_progressbar':typeAttributes.isTextbox && typeAttributes.isDynamic?'badge_dynamic_textbox':typeAttributes.isTextbox?'badge_textbox':'badge_gauge';
    case 15:
      return typeAttributes.isAdvancedCompGauge?'badge_compfillgauge_adv':typeAttributes.isCompNoFillGauge?'badge_compgauge':typeAttributes.isFilledGauge?'badge_filledgauge':'badge_compfillgauge_basic';
    case 25:
      if (typeAttributes.isSelector)
        return 'badge_date_selector';
      return 'badge_calendar';
    case 16:
      return 'badge_heatmap';
    case 17:
      return 'badge_word_cloud';
    case 33:
      if (typeAttributes.isSelector && typeAttributes.isRadio)
        return 'badge_radio_selector';
      else if (typeAttributes.isSelector)
        return 'badge_checkbox_selector';
      return 'badge_slicer';
    case 18:
      return 'badge_vert_boxplot';
    case 19:
      return 'badge_vert_histogram';
    case 20:
      return 'badge_horiz_boxplot';
    case 21:
      return 'badge_horiz_histogram';
    case 22:
      return 'badge_treemap';
    case 23:
      return 'badge_vert_waterfall';
    case 24:
      return 'badge_horiz_waterfall';
    case 26:
      return 'badge_pareto';
    case 27:
      return 'badge_funnel_swing';
    case 28:
      return 'badge_radar';
    case 29:
      return 'badge_funnel_bars';
    case 34:
      return 'badge_range_selector';
    case 38:
      return 'badge_palette';
    case 35:
      return 'badge_basic_table';
    case 36:
      return 'badge_pivot_table';
  }
  return '';
}

function getChartTypeForFlexTable(overrides){
  if (!!overrides && overrides.containsKey('grid_graph_type')) {
    if (instanceOfString(overrides.get_0('grid_graph_type')) && $equalsIgnoreCase(castToString(overrides.get_0('grid_graph_type')), 'Vertical Bar'))
      return 0;
    if (instanceOfString(overrides.get_0('grid_graph_type')) && castToString(overrides.get_0('grid_graph_type')).toLowerCase().indexOf('horizontal') != -1)
      return 1;
  }
  return 2;
}

function getChartTypeFromBadgeType(badgeType, overrides){
  var isVarianceChart;
  isVarianceChart = isVarianceChart_0(overrides);
  switch (badgeType) {
    case 'badge_flex_table':
      return getChartTypeForFlexTable(overrides);
    case 'badge_curved_symbolline':
    case 'badge_curvedline':
    case 'badge_rttrendline':
    case 'badge_stepline':
    case 'badge_symbolline':
    case 'badge_trendline':
    case 'badge_spark_line':
    case 'badge_pop_trendline':
    case 'badge_pop_trendline_var':
    case 'badge_pop_trendline_play':
    case 'badge_two_trendline':
    case 'badge_curved_rttrendline':
    case 'badge_curved_rt_symbolline':
      return 2;
    case 'badge_horiz_curved_symbolline':
    case 'badge_horiz_curvedline':
    case 'badge_horiz_stepline':
    case 'badge_horiz_symbolline':
    case 'badge_horiz_trendline':
      return 3;
    case 'badge_horiz_100pct_area':
    case 'badge_horiz_area_overlay':
    case 'badge_horiz_curved_100pct_area':
    case 'badge_horiz_curved_area_overlay':
    case 'badge_horiz_curved_stacked_area':
    case 'badge_stream_funnel':
    case 'badge_horiz_stackedtrend':
    case 'badge_horiz_step_area_overlay':
    case 'badge_horiz_step_stacked_area':
    case 'badge_horiz_step_100pct_area':
      return 7;
    case 'badge_vert_100pct_area':
    case 'badge_vert_area_overlay':
    case 'badge_vert_curved_100pct_area':
    case 'badge_vert_curved_area_overlay':
    case 'badge_vert_curved_stacked_area':
    case 'badge_vert_step_area_overlay':
    case 'badge_vert_step_stacked_area':
    case 'badge_vert_step_100pct_area':
    case 'badge_stackedtrend':
    case 'badge_stream':
      return 6;
    case 'badge_vert_100pct_linebar':
    case 'badge_line_bar':
    case 'badge_line_clusterbar':
    case 'badge_line_stackedbar':
    case 'badge_symbol_bar':
    case 'badge_symbol_stackedbar':
    case 'badge_vert_nested_linebar':
    case 'badge_curved_line_bar':
    case 'badge_curved_line_stackedbar':
    case 'badge_pop_line_bar':
    case 'badge_pop_line_bar_var':
    case 'badge_vert_line_multi_dotplot':
    case 'badge_vert_line_stacked_dotplot':
      return 4;
    case 'badge_vert_bar_line':
    case 'badge_pop_bar_line':
    case 'badge_pop_bar_line_var':
    case 'badge2_stackedbar_line':
      return 30;
    case 'badge_horiz_100pct_linebar':
    case 'badge_horiz_line_bar':
    case 'badge_horiz_line_clusterbar':
    case 'badge_horiz_line_stackedbar':
    case 'badge_horiz_symbol_bar':
    case 'badge_horiz_symbol_stackedbar':
    case 'badge_horiz_nested_linebar':
    case 'badge_horiz_line_multi_dotplot':
    case 'badge_horiz_line_stacked_dotplot':
      return 5;
    case 'badge_horiz_bar_line':
    case 'badge2_horiz_stackedbar_line':
      return 31;
    case 'badge_vert_multibar':
    case 'badge_vert_multi_dotplot':
      if (isVarianceChart)
        return 30;
      return 0;
    case 'badge_vert_100pct':
    case 'badge_vert_bullet':
    case 'badge_vert_bar':
    case 'badge_spark_bar':
    case 'badge_vert_dual_stackedbar':
    case 'badge_pop_vert_multibar':
    case 'badge_pop_vert_bar_play':
    case 'badge_vert_nestedbar':
    case 'badge_vert_percentbar':
    case 'badge_vert_rtbar':
    case 'badge_vert_rtmultibar':
    case 'badge_vert_rtstackedbar':
    case 'badge_vert_stackedbar':
    case 'badge_vert_symbol':
    case 'badge_vert_symbol_overlay':
    case 'badge_vert_bar_overlay':
    case 'badge_vert_dotplot_overlay':
    case 'badge_vert_marimekko':
    case 'badge_vert_stacked_dotplot':
      return 0;
    case 'badge_horiz_100pct':
    case 'badge_horiz_marimekko':
    case 'badge_bullet':
    case 'badge_horiz_bar':
    case 'badge_horiz_dual_stackedbar':
    case 'badge_horiz_multibar':
    case 'badge_horiz_nestedbar':
    case 'badge_horiz_percentbar':
    case 'badge_horiz_stackedbar':
    case 'badge_horiz_symbol':
    case 'badge_horiz_symbol_overlay':
    case 'badge_horiz_bar_overlay':
    case 'badge_horiz_dotplot_overlay':
    case 'badge_category_scatter':
    case 'badge_horiz_rtstackedbar':
    case 'badge_horiz_rtmultibar':
    case 'badge_horiz_rtbar':
    case 'badge_horiz_multi_dotplot':
    case 'badge_horiz_stacked_dotplot':
      return 1;
    case 'badge_pie':
    case 'badge_pop_pie_play':
    case 'badge_nautilus':
    case 'badge_nightingale_rose':
      return 8;
    case 'badge_sunburst':
      return 32;
    case 'badge_donut':
    case 'badge_pop_donut_play':
    case 'badge_nautilus_donut':
      return 9;
    case 'badge_compfillgauge_adv':
    case 'badge_compfillgauge_basic':
    case 'badge_compgauge':
    case 'badge_filledgauge':
      return 15;
    case 'badge_gantt':
    case 'badge_gantt_percent':
      return 10;
    case 'badge_stock_candlestick':
    case 'badge_highlow':
      return 11;
    case 'badge_xyscatterplot':
    case 'badge_xyscatterplot_basic':
    case 'badge_xy_line':
    case 'badge_ds_pred_modeling':
    case 'badge_ds_forecasting':
    case 'badge_ds_outliers':
    case 'badge_bubble':
    case 'badge_xybubble':
      return 12;
    case 'badge_heatmap':
      return 16;
    case 'badge_vert_boxplot':
      return 18;
    case 'badge_horiz_boxplot':
      return 20;
    case 'badge_vert_histogram':
      return 19;
    case 'badge_horiz_histogram':
      return 21;
    case 'badge_vert_waterfall':
      return 23;
    case 'badge_horiz_waterfall':
      return 24;
    case 'badge_progressbar':
    case 'badge_singlevalue':
    case 'badge_facegauge':
    case 'badge_textbox':
    case 'badge_dynamic_textbox':
    case 'badge_gauge':
      return 14;
    case 'badge_palette':
      return 38;
    case 'badge_funnel':
      return 13;
    case 'badge_funnel_bars':
      return 29;
    case 'badge_funnel_swing':
      return 27;
    case 'badge_word_cloud':
      return 17;
    case 'badge_slicer':
    case 'badge_checkbox_selector':
    case 'badge_radio_selector':
      return 33;
    case 'badge_treemap':
      return 22;
    case 'badge_calendar':
    case 'badge_date_selector':
      return 25;
    case 'badge_pareto':
      return 26;
    case 'badge_radar':
      return 28;
    case 'badge_range_selector':
      return 34;
    case 'badge_basic_table':
      return 35;
    case 'badge_pivot_table':
      return 36;
  }
  return 0;
}

function getClassOfGraph(graphType){
  switch (graphType) {
    case 0:
    case 1:
    case 6:
    case 7:
    case 2:
    case 3:
    case 4:
    case 5:
    case 30:
    case 31:
    case 28:
      return 0;
    case 8:
    case 9:
    case 13:
    case 27:
    case 29:
    case 22:
      return 1;
    case 10:
      return 2;
    case 11:
      return 3;
    case 15:
      return 4;
    case 12:
      return 5;
    case 14:
      return 6;
    case 16:
      return 7;
    case 23:
    case 24:
      return 8;
    case 25:
      return 9;
    case 26:
      return 10;
    case 32:
      return 11;
    case 34:
      return 12;
  }
  return -1;
}

function getGraphType(compDef){
  var type_0;
  if (compDef.subtype != null) {
    type_0 = compDef.subtype;
    return getGraphTypeForString(type_0);
  }
   else if (compDef.badgeType != null)
    return getChartTypeFromBadgeType(compDef.badgeType, compDef.overrides);
  return 0;
}

function getGraphTypeForString(type_0){
  type_0 = type_0.toLowerCase();
  if (type_0.indexOf('pie') != -1)
    return 8;
  else if (type_0.indexOf('donut') != -1)
    return 9;
  else if (type_0.indexOf('hlinebar') != -1)
    return 5;
  else if (type_0.indexOf('linebar') != -1)
    return 4;
  else if (type_0.indexOf('hbar') != -1)
    return 1;
  else if (type_0.indexOf('bar') != -1)
    return 0;
  else if (type_0.indexOf('hline') != -1)
    return 3;
  else if (type_0.indexOf('line') != -1)
    return 2;
  else if (type_0.indexOf('harea') != -1)
    return 7;
  else if (type_0.indexOf('area') != -1)
    return 6;
  else if (type_0.indexOf('comp') != -1)
    return 15;
  else if (type_0.indexOf('scatter') != -1)
    return 12;
  else if (type_0.indexOf('xy') != -1)
    return 12;
  else if (type_0.indexOf('bubble') != -1)
    return 12;
  else if (type_0.indexOf('progress') != -1)
    return 14;
  else if (type_0.indexOf('single') != -1)
    return 14;
  else if (type_0.indexOf('face') != -1)
    return 14;
  else if (type_0.indexOf('textbox') != -1)
    return 14;
  else if (type_0.indexOf('radial') != -1)
    return 14;
  else if (type_0.indexOf('foldedfunnel') != -1)
    return 27;
  else if (type_0.indexOf('funnelbar') != -1)
    return 29;
  else if (type_0.indexOf('funnel') != -1)
    return 13;
  else if (type_0.indexOf('heatmap') != -1)
    return 16;
  else if (type_0.indexOf('slicer') != -1)
    return 33;
  else if (type_0.indexOf('wordcloud') != -1)
    return 17;
  else if (type_0.indexOf('hhistogram') != -1)
    return 21;
  else if (type_0.indexOf('hboxplot') != -1)
    return 20;
  else if (type_0.indexOf('histogram') != -1)
    return 19;
  else if (type_0.indexOf('boxplot') != -1)
    return 18;
  else if (type_0.indexOf('treemap') != -1)
    return 22;
  else if (type_0.indexOf('hwaterfall') != -1)
    return 24;
  else if (type_0.indexOf('waterfall') != -1)
    return 23;
  else if (type_0.indexOf('calendar') != -1)
    return 25;
  else if (type_0.indexOf('pareto') != -1)
    return 26;
  else if (type_0.indexOf('radar') != -1)
    return 28;
  return 0;
}

function getPriorityListOfSupportedGraphTypes(graph, savedMap){
  var currentState, currentState0, currentTypeAttributes, dataGrid, graphType, supportedGraphTypes, typeAttributes, typeAttributes0;
  supportedGraphTypes = new ArrayList;
  if (savedMap) {
    typeAttributes0 = new TypeAttributes;
    currentState0 = new GraphType(-1, typeAttributes0);
    supportedGraphTypes.array[supportedGraphTypes.array.length] = currentState0;
  }
  if (!graph || !graph.data_0)
    return supportedGraphTypes;
  dataGrid = graph.data_0;
  graphType = graph.graphType;
  currentTypeAttributes = graph.typeAttributes;
  currentState = graph.originalSettings;
  if (!currentState) {
    currentState = new GraphType(graphType, currentTypeAttributes);
    !!currentState && !currentState.typeAttributes.isStacked && (currentState.type_0 == 0 || currentState.type_0 == 1) && !!graph.data_0 && $getNumCols(graph.data_0) == 1 && (currentState.typeAttributes.isStacked = true);
    graph.originalSettings = currentState;
  }
  !!currentState && !currentState.typeAttributes.isStacked && (currentState.type_0 == 0 || currentState.type_0 == 1) && !!graph.data_0 && $getNumCols(graph.data_0) == 1 && (currentState.typeAttributes.isStacked = true);
  supportedGraphTypes.array[supportedGraphTypes.array.length] = currentState;
  if (graphType == 14 && (currentTypeAttributes.isTextbox || currentTypeAttributes.isProgressBar) || graphType == 15 && !currentTypeAttributes.isFilledGauge || graphType == 11 || graphType == 12 || graphType == 25 || graphType == 10 || graphType == 26 || graphType == 33 || graphType == 2 && currentTypeAttributes.isSpark || graphType == 0 && currentTypeAttributes.isSpark || graphType == 34 || graphType == 32)
  ;
  else if (currentTypeAttributes.isPeriodOverPeriod) {
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    (currentState.type_0 != 30 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(30, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    typeAttributes.isPoPVariance = true;
    (currentState.type_0 != 30 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(30, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    typeAttributes.isPoPVariance = true;
    (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isPeriodOverPeriod = true;
    typeAttributes.isPoPVariance = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
  }
   else if (graphType == 23 || graphType == 24) {
    addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 23, new TypeAttributes);
    addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 24, new TypeAttributes);
  }
   else if (!dataGrid || !dataGrid.cols_0 || dataGrid.numVisibleCols == 1) {
    if (graphType == 18 || graphType == 20 || graphType == 19 || graphType == 21) {
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 18, new TypeAttributes);
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 20, new TypeAttributes);
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 19, new TypeAttributes);
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 21, new TypeAttributes);
    }
     else {
      (graphType == 8 || graphType == 9) && addPieVariants(supportedGraphTypes, currentState);
      typeAttributes = new TypeAttributes;
      $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
      (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
      typeAttributes = new TypeAttributes;
      $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
      (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
      typeAttributes = new TypeAttributes;
      $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
      typeAttributes.isDotPlot = true;
      (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
      typeAttributes = new TypeAttributes;
      $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
      typeAttributes.isDotPlot = true;
      (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 2, new TypeAttributes);
      typeAttributes = new TypeAttributes;
      typeAttributes.curvedLines = true;
      (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
      typeAttributes = new TypeAttributes;
      typeAttributes.curvedLines = true;
      typeAttributes.isStacked = true;
      (currentState.type_0 != 6 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(6, typeAttributes));
      if ($getNumCols(dataGrid) == 1 && dataGrid.numVisibleRows > 1 && dataGrid.numVisibleRows <= $intern_10) {
        graphType != 8 && graphType != 9 && addPieVariants(supportedGraphTypes, currentState);
        addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 22, new TypeAttributes);
        dataGrid.numVisibleRows <= 300 && addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 13, new TypeAttributes);
      }
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 17, new TypeAttributes);
      typeAttributes = new TypeAttributes;
      typeAttributes.isFilledGauge = true;
      (currentState.type_0 != 15 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(15, typeAttributes));
      if (graphType == 14 || graphType == 15 && currentTypeAttributes.isFilledGauge) {
        typeAttributes = new TypeAttributes;
        typeAttributes.isRadial = true;
        (currentState.type_0 != 14 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(14, typeAttributes));
        typeAttributes = new TypeAttributes;
        typeAttributes.isSingleValue = true;
        (currentState.type_0 != 14 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(14, typeAttributes));
        typeAttributes = new TypeAttributes;
        typeAttributes.isFaceGauge = true;
        (currentState.type_0 != 14 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(14, typeAttributes));
      }
    }
  }
   else {
    typeAttributes = new TypeAttributes;
    $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    $getNumCols(graph.data_0) == 1 && (typeAttributes.isStacked = true);
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    typeAttributes.isStacked = true;
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 4 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(4, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    typeAttributes.percentOfCategoryData = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isStacked = true;
    typeAttributes.percentOfCategoryData = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isNestedBar = true;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isNestedBar = true;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isMarimekko = true;
    typeAttributes.isStacked = true;
    typeAttributes.percentOfCategoryData = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.isMarimekko = true;
    typeAttributes.isStacked = true;
    typeAttributes.percentOfCategoryData = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    if (!!graph.chart && graph.chart.sizzle && $getNumCols(graph.data_0) > 1) {
      typeAttributes = new TypeAttributes;
      typeAttributes.isSpark = true;
      typeAttributes.isGrid = true;
      (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
    }
    if (!instanceOf(graph, 40) || instanceOf(graph, 40) && !$getValueScaleByNumber(castTo(graph, 40), 1)) {
      typeAttributes = new TypeAttributes;
      typeAttributes.curvedLines = true;
      typeAttributes.isStacked = true;
      (currentState.type_0 != 6 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(6, typeAttributes));
    }
    if (dataGrid.isGroupItemValue | $equals_2('group-item-value', dataGrid.originalDataType) && dataGrid.numVisibleCols > 1) {
      addPieVariants(supportedGraphTypes, currentState);
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 22, new TypeAttributes);
    }
    (!instanceOf(graph, 40) || instanceOf(graph, 40) && !$getValueScaleByNumber(castTo(graph, 40), 1)) && addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 28, new TypeAttributes);
  }
  return supportedGraphTypes;
}

function getPriorityListOfSupportedGraphTypesForMapData(dataGrid){
  var currentState, currentTypeAttributes, supportedGraphTypes, typeAttributes;
  supportedGraphTypes = new ArrayList;
  currentTypeAttributes = new TypeAttributes;
  currentState = new GraphType(-1, currentTypeAttributes);
  supportedGraphTypes.array[supportedGraphTypes.array.length] = currentState;
  if (!!dataGrid && dataGrid.numVisibleCols == 1) {
    typeAttributes = new TypeAttributes;
    $getNumCols(dataGrid) == 1 && (typeAttributes.isStacked = true);
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    $getNumCols(dataGrid) == 1 && (typeAttributes.isStacked = true);
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    typeAttributes = new TypeAttributes;
    $getNumCols(dataGrid) == 1 && (typeAttributes.isStacked = true);
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 0 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(0, typeAttributes));
    typeAttributes = new TypeAttributes;
    $getNumCols(dataGrid) == 1 && (typeAttributes.isStacked = true);
    typeAttributes.isDotPlot = true;
    (currentState.type_0 != 1 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(1, typeAttributes));
    addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 2, new TypeAttributes);
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    (currentState.type_0 != 2 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(2, typeAttributes));
    typeAttributes = new TypeAttributes;
    typeAttributes.curvedLines = true;
    typeAttributes.isStacked = true;
    (currentState.type_0 != 6 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(6, typeAttributes));
    if ($getNumCols(dataGrid) == 1 && dataGrid.numVisibleRows > 1 && dataGrid.numVisibleRows <= $intern_10) {
      addPieVariants(supportedGraphTypes, currentState);
      addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 22, new TypeAttributes);
      dataGrid.numVisibleRows <= 300 && addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 13, new TypeAttributes);
    }
    addGraphTypeIfNotCurrent(supportedGraphTypes, currentState, 17, new TypeAttributes);
    typeAttributes = new TypeAttributes;
    typeAttributes.isFilledGauge = true;
    (currentState.type_0 != 15 || !$equals(currentState.typeAttributes, typeAttributes)) && $add_1(supportedGraphTypes, new GraphType(15, typeAttributes));
  }
  return supportedGraphTypes;
}

function getShortNameFromTypeAndAttributes(component){
  var dataGrid, graph, graphType, typeAttributes;
  if (!instanceOf(component, 43))
    return '';
  graph = castTo(component, 43);
  graphType = graph.graphType;
  typeAttributes = graph.typeAttributes;
  dataGrid = graph.data_0;
  if (typeAttributes.isPeriodOverPeriod) {
    if (typeAttributes.isPoPVariance) {
      switch (graphType) {
        case 30:
          return getString('variance bar line', graph.chart.locale);
        case 4:
          return getString('variance line bar', graph.chart.locale);
        case 2:
          return getString('variance line', graph.chart.locale);
      }
    }
    switch (graphType) {
      case 30:
        return getString('bar line', graph.chart.locale);
      case 4:
        return getString('line bar', graph.chart.locale);
      case 2:
        return getString('line', graph.chart.locale);
      case 0:
        return getString('grouped', graph.chart.locale);
    }
  }
  switch (graphType) {
    case 0:
      if (typeAttributes.isNestedBar)
        return getString('nested', graph.chart.locale);
      else if (typeAttributes.percentOfSeriesData)
        return getString('% bar', graph.chart.locale);
      else if (typeAttributes.isSymbol)
        return getString('symbol', graph.chart.locale);
      else if (typeAttributes.isSymbolOverlay)
        return getString('symbol overlay', graph.chart.locale);
      else if (typeAttributes.isOverlay)
        return getString('overlay', graph.chart.locale);
      else if (typeAttributes.isBullet)
        return getString('bullet', graph.chart.locale);
      else if (typeAttributes.isMarimekko)
        return getString('vert_marimekko', graph.chart.locale);
      else if (typeAttributes.isGrid && typeAttributes.isSpark)
        return getString('flex_table', graph.chart.locale);
      if (typeAttributes.isStacked) {
        if (typeAttributes.isDotPlot)
          return getString('vert_stacked_dotplot', graph.chart.locale);
        return typeAttributes.isRunningTotal?getString('running total stacked', graph.chart.locale):typeAttributes.percentOfCategoryData?getString('100%', graph.chart.locale):typeAttributes.isGroupedStacked?getString('grouped stacked', graph.chart.locale):getString('stacked', graph.chart.locale);
      }
       else {
        if (typeAttributes.isDotPlot)
          return getString('vert_multi_dotplot', graph.chart.locale);
        return !!dataGrid && $getNumCols(dataGrid) > 1?typeAttributes.isRunningTotal?getString('running total grouped', graph.chart.locale):getString('grouped', graph.chart.locale):typeAttributes.isRunningTotal?getString('vert_rtbar', graph.chart.locale):getString('bar', graph.chart.locale);
      }

    case 1:
      if (typeAttributes.isNestedBar)
        return getString('h nested', graph.chart.locale);
      else if (typeAttributes.percentOfSeriesData)
        return getString('h % bar', graph.chart.locale);
      else if (typeAttributes.isCategoryScatter)
        return getString('category scatter', graph.chart.locale);
      else if (typeAttributes.isSymbol)
        return getString('h symbol', graph.chart.locale);
      else if (typeAttributes.isSymbolOverlay)
        return getString('h symbol overlay', graph.chart.locale);
      else if (typeAttributes.isOverlay)
        return getString('h overlay', graph.chart.locale);
      else if (typeAttributes.isBullet)
        return getString('bullet', graph.chart.locale);
      else if (typeAttributes.isMarimekko)
        return getString('horiz_marimekko', graph.chart.locale);
      else if (typeAttributes.isGrid && typeAttributes.isSpark)
        return getString('flex_table', graph.chart.locale);
      if (typeAttributes.isStacked) {
        return typeAttributes.percentOfCategoryData?getString('h 100%', graph.chart.locale):typeAttributes.isGroupedStacked?getString('h grouped stacked', graph.chart.locale):typeAttributes.isRunningTotal?getString('horiz_rtstackedbar', graph.chart.locale):typeAttributes.isDotPlot?getString('horiz_stacked_dotplot', graph.chart.locale):getString('h stacked', graph.chart.locale);
      }
       else {
        if (typeAttributes.isDotPlot)
          return getString('horiz_multi_dotplot', graph.chart.locale);
        if (typeAttributes.isRunningTotal)
          return getString('horiz_rtmultibar', graph.chart.locale);
        return !!dataGrid && $getNumCols(dataGrid) > 1?getString('h grouped', graph.chart.locale):getString('h bar', graph.chart.locale);
      }

    case 2:
      if (typeAttributes.stepLines)
        return getString('step', graph.chart.locale);
      if (typeAttributes.isGrid && typeAttributes.isSpark)
        return getString('flex_table', graph.chart.locale);
      if (typeAttributes.curvedLines) {
        return typeAttributes.showSymbols?getString('curved symbol', graph.chart.locale):typeAttributes.isRunningTotal?'badge_curved_rttrendline':getString('curved line', graph.chart.locale);
      }
       else {
        if (typeAttributes.showSymbols)
          return getString('symbol', graph.chart.locale);
        return typeAttributes.isRunningTotal?getString('running total line', graph.chart.locale):getString('line', graph.chart.locale);
      }

    case 3:
      if (typeAttributes.stepLines)
        return getString('horiz_stepline', graph.chart.locale);
      return typeAttributes.curvedLines?typeAttributes.showSymbols?getString('horiz_curved_symbolline', graph.chart.locale):getString('horiz_curvedline', graph.chart.locale):typeAttributes.showSymbols?getString('horiz_symbolline', graph.chart.locale):getString('horiz_trendline', graph.chart.locale);
    case 4:
      if (typeAttributes.isNestedBar)
        return getString('vert_nested_linebar', graph.chart.locale);
      else if (typeAttributes.isGroupedStacked)
        return getString('line grouped stacked', graph.chart.locale);
      return typeAttributes.isStacked?typeAttributes.showSymbols?getString('symbol stacked', graph.chart.locale):typeAttributes.curvedLines?getString('curved_line_stackedbar', graph.chart.locale):typeAttributes.isDotPlot?getString('vert_line_stacked_dotplot', graph.chart.locale):getString('line stacked', graph.chart.locale):typeAttributes.showSymbols?getString('symbol bar', graph.chart.locale):typeAttributes.curvedLines?getString('curved_line_bar', graph.chart.locale):typeAttributes.isDotPlot?getString('vert_line_multi_dotplot', graph.chart.locale):getString('line bar', graph.chart.locale);
    case 30:
      return typeAttributes.isStacked?'badge2_stackedbar_line':getString('vert_bar_line', graph.chart.locale);
    case 5:
      if (typeAttributes.isNestedBar)
        return getString('horiz_nested_linebar', graph.chart.locale);
      else if (typeAttributes.isGroupedStacked)
        return getString('horiz_line_clusterbar', graph.chart.locale);
      return typeAttributes.isStacked?typeAttributes.showSymbols?getString('horiz_symbol_stackedbar', graph.chart.locale):typeAttributes.isDotPlot?getString('horiz_line_stacked_dotplot', graph.chart.locale):getString('horiz_line_stackedbar', graph.chart.locale):typeAttributes.showSymbols?getString('horiz_symbol_bar', graph.chart.locale):typeAttributes.isDotPlot?getString('horiz_line_multi_dotplot', graph.chart.locale):getString('horiz_line_bar', graph.chart.locale);
    case 31:
      return typeAttributes.isStacked?'badge2_horiz_stackedbar_line':getString('horiz_bar_line', graph.chart.locale);
    case 6:
      if (typeAttributes.isStacked || typeAttributes.originallyStacked || !!dataGrid && $getNumCols(dataGrid) == 1) {
        if (typeAttributes.percentOfCategoryData) {
          return typeAttributes.curvedLines?getString('vert_curved_100pct_area', graph.chart.locale):typeAttributes.stepLines?getString('vert_step_100pct_area', graph.chart.locale):getString('vert_100pct_area', graph.chart.locale);
        }
        return typeAttributes.isStream?getString('stream', graph.chart.locale):typeAttributes.stepLines?getString('vert_step_stacked_area', graph.chart.locale):typeAttributes.curvedLines?getString('vert_curved_stacked_area', graph.chart.locale):getString('area', graph.chart.locale);
      }
       else {
        return typeAttributes.curvedLines?getString('vert_curved_area_overlay', graph.chart.locale):typeAttributes.stepLines?getString('vert_step_area_overlay', graph.chart.locale):getString('vert_area_overlay', graph.chart.locale);
      }

    case 7:
      return typeAttributes.isStacked?typeAttributes.percentOfCategoryData?typeAttributes.curvedLines?getString('horiz_curved_100pct_area', graph.chart.locale):typeAttributes.stepLines?getString('horiz_step_100pct_area', graph.chart.locale):getString('horiz_100pct_area', graph.chart.locale):typeAttributes.isStream?getString('stream_funnel', graph.chart.locale):typeAttributes.curvedLines?getString('horiz_curved_stacked_area', graph.chart.locale):typeAttributes.stepLines?getString('horiz_step_stacked_area', graph.chart.locale):getString('horiz_stackedtrend', graph.chart.locale):typeAttributes.curvedLines?getString('horiz_curved_area_overlay', graph.chart.locale):typeAttributes.stepLines?getString('horiz_step_area_overlay', graph.chart.locale):getString('horiz_area_overlay', graph.chart.locale);
    case 8:
      return typeAttributes.isNautilus?getString('nautilus', graph.chart.locale):typeAttributes.isNightingale?getString('nightingale_rose', graph.chart.locale):getString('pie', graph.chart.locale);
    case 9:
      return typeAttributes.isNautilus?getString('nautilus_donut', graph.chart.locale):getString('donut', graph.chart.locale);
    case 10:
      return typeAttributes.isGanttPercent?getString('gantt %', graph.chart.locale):getString('gantt', graph.chart.locale);
    case 11:
      return typeAttributes.isHighLow?getString('high low', graph.chart.locale):getString('candlestick', graph.chart.locale);
    case 12:
      if (typeAttributes.isXYLine && typeAttributes.isXYForecast)
        return getString('ds_forecasting', graph.chart.locale);
      else if (typeAttributes.isXYLine && typeAttributes.isXYOutlier)
        return getString('ds_outliers', graph.chart.locale);
      else if (typeAttributes.isXYLine)
        return getString('xy_line', graph.chart.locale);
      return typeAttributes.isBubble?getString('bubble', graph.chart.locale):getString('scatter', graph.chart.locale);
    case 13:
      return getString('funnel', graph.chart.locale);
    case 14:
      return typeAttributes.isFaceGauge?getString('face', graph.chart.locale):typeAttributes.isSingleValue?getString('value', graph.chart.locale):typeAttributes.isProgressBar?getString('progress', graph.chart.locale):typeAttributes.isTextbox?getString('text', graph.chart.locale):getString('gauge', graph.chart.locale);
    case 15:
      return typeAttributes.isAdvancedCompGauge?getString('gauge advanced', graph.chart.locale):typeAttributes.isCompNoFillGauge?getString('gauge', graph.chart.locale):typeAttributes.isFilledGauge?getString('filled', graph.chart.locale):getString('gauge basic', graph.chart.locale);
    case 16:
      return getString('heatmap', graph.chart.locale);
    case 17:
      return getString('word cloud', graph.chart.locale);
    case 33:
      return getString('slicer', graph.chart.locale);
    case 18:
      return getString('boxplot', graph.chart.locale);
    case 19:
      return getString('histogram', graph.chart.locale);
    case 20:
      return getString('h boxplot', graph.chart.locale);
    case 21:
      return getString('h histogram', graph.chart.locale);
    case 22:
      return getString('treemap', graph.chart.locale);
    case 23:
      return getString('waterfall', graph.chart.locale);
    case 24:
      return getString('h waterfall', graph.chart.locale);
    case 25:
      return getString('calendar', graph.chart.locale);
    case 26:
      return getString('pareto', graph.chart.locale);
    case 27:
      return getString('folded funnel', graph.chart.locale);
    case 28:
      return getString('radar', graph.chart.locale);
    case 29:
      return getString('funnel bars', graph.chart.locale);
  }
  return '';
}

function getTypeAttributes(compDef){
  var properties, typeAttributes;
  typeAttributes = null;
  if (compDef.properties) {
    properties = compDef.properties;
    if (properties) {
      typeAttributes = new TypeAttributes;
      properties.contains_0('stacked') && (typeAttributes.isStacked = true);
      properties.contains_0('runnningtotal') && (typeAttributes.isRunningTotal = true);
      properties.contains_0('curved') && (typeAttributes.curvedLines = true);
      properties.contains_0('barsymbol') && (typeAttributes.isSymbol = true);
      properties.contains_0('symboloverlay') && (typeAttributes.isSymbolOverlay = true);
      properties.contains_0('symbolsonly') && (typeAttributes.symbolsOnly = true);
      properties.contains_0('symbols') && (typeAttributes.showSymbols = true);
      properties.contains_0('percentoftotal') && (typeAttributes.percentOfSeriesData = true);
      properties.contains_0('100%') && (typeAttributes.percentOfCategoryData = true);
      properties.contains_0('bullet') && (typeAttributes.isBullet = true);
      properties.contains_0('progress') && (typeAttributes.isProgressBar = true);
      properties.contains_0('single') && (typeAttributes.isSingleValue = true);
      properties.contains_0('face') && (typeAttributes.isFaceGauge = true);
      properties.contains_0('textbox') && (typeAttributes.isTextbox = true);
      properties.contains_0('radial') && (typeAttributes.isRadial = true);
      if (properties.contains_0('grouped')) {
        typeAttributes.isGroupedStacked = true;
        typeAttributes.isStacked = true;
      }
      if (properties.contains_0('nested')) {
        typeAttributes.isStacked = true;
        typeAttributes.isNestedBar = true;
      }
      properties.contains_0('step') && (typeAttributes.stepLines = true);
    }
  }
   else 
    compDef.badgeType != null && (typeAttributes = getTypeAttributesFromBadgeType(compDef.badgeType));
  isVarianceChart_0(compDef.overrides) && (typeAttributes.isPoPVariance = true);
  return typeAttributes;
}

function getTypeAttributesFromBadgeType(badgeType){
  var typeAttributes;
  typeAttributes = new TypeAttributes;
  switch (badgeType) {
    case 'badge_line_clusterbar':
    case 'badge_line_stackedbar':
    case 'badge_symbol_stackedbar':
    case 'badge_stackedtrend':
    case 'badge_vert_dual_stackedbar':
    case 'badge_vert_rtstackedbar':
    case 'badge_horiz_rtstackedbar':
    case 'badge_vert_bar':
    case 'badge_vert_stackedbar':
    case 'badge_vert_100pct':
    case 'badge_vert_100pct_linebar':
    case 'badge_vert_marimekko':
    case 'badge_vert_nestedbar':
    case 'badge_horiz_100pct':
    case 'badge_horiz_100pct_linebar':
    case 'badge_horiz_marimekko':
    case 'badge_horiz_dual_stackedbar':
    case 'badge_horiz_bar':
    case 'badge_horiz_stackedbar':
    case 'badge_horiz_nestedbar':
    case 'badge_horiz_line_clusterbar':
    case 'badge_horiz_line_stackedbar':
    case 'badge_horiz_100pct_area':
    case 'badge_horiz_curved_100pct_area':
    case 'badge_horiz_curved_stacked_area':
    case 'badge_stream_funnel':
    case 'badge_horiz_stackedtrend':
    case 'badge_horiz_step_stacked_area':
    case 'badge_horiz_step_100pct_area':
    case 'badge_horiz_symbol_stackedbar':
    case 'badge_vert_100pct_area':
    case 'badge_vert_curved_stacked_area':
    case 'badge_vert_curved_100pct_area':
    case 'badge_vert_step_stacked_area':
    case 'badge_vert_step_100pct_area':
    case 'badge_curved_line_stackedbar':
    case 'badge2_stackedbar_line':
    case 'badge2_horiz_stackedbar_line':
    case 'badge_vert_nested_linebar':
    case 'badge_horiz_nested_linebar':
    case 'badge_vert_stacked_dotplot':
    case 'badge_horiz_stacked_dotplot':
    case 'badge_vert_line_stacked_dotplot':
    case 'badge_horiz_line_stacked_dotplot':
    case 'badge_stream':
      typeAttributes.isStacked = true;
      break;
    default:typeAttributes.isStacked = false;
  }
  switch (badgeType) {
    case 'badge_vert_stacked_dotplot':
    case 'badge_horiz_stacked_dotplot':
    case 'badge_vert_line_stacked_dotplot':
    case 'badge_horiz_line_stacked_dotplot':
    case 'badge_vert_multi_dotplot':
    case 'badge_horiz_multi_dotplot':
    case 'badge_vert_line_multi_dotplot':
    case 'badge_horiz_line_multi_dotplot':
    case 'badge_vert_dotplot_overlay':
    case 'badge_horiz_dotplot_overlay':
      typeAttributes.isDotPlot = true;
      break;
    default:typeAttributes.isDotPlot = false;
  }
  switch (badgeType) {
    case 'badge_rttrendline':
    case 'badge_vert_rtbar':
    case 'badge_vert_rtmultibar':
    case 'badge_vert_rtstackedbar':
    case 'badge_horiz_rtbar':
    case 'badge_horiz_rtstackedbar':
    case 'badge_horiz_rtmultibar':
    case 'badge_curved_rttrendline':
    case 'badge_curved_rt_symbolline':
      typeAttributes.isRunningTotal = true;
      break;
    default:typeAttributes.isRunningTotal = false;
  }
  switch (badgeType) {
    case 'badge_vert_bullet':
    case 'badge_bullet':
      typeAttributes.isBullet = true;
      break;
    default:typeAttributes.isBullet = false;
  }
  switch (badgeType) {
    case 'badge_vert_marimekko':
    case 'badge_horiz_marimekko':
      typeAttributes.isMarimekko = true;
      break;
    default:typeAttributes.isMarimekko = false;
  }
  switch (badgeType) {
    case 'badge_vert_symbol':
    case 'badge_horiz_symbol':
      typeAttributes.isSymbol = true;
      break;
    default:typeAttributes.isSymbol = false;
  }
  switch (badgeType) {
    case 'badge_vert_symbol_overlay':
    case 'badge_horiz_symbol_overlay':
      typeAttributes.isSymbolOverlay = true;
      break;
    default:typeAttributes.isSymbolOverlay = false;
  }
  switch (badgeType) {
    case 'badge_vert_bar_overlay':
    case 'badge_horiz_bar_overlay':
    case 'badge_vert_dotplot_overlay':
    case 'badge_horiz_dotplot_overlay':
      typeAttributes.isOverlay = true;
      break;
    default:typeAttributes.isOverlay = false;
  }
  switch (badgeType) {
    case 'badge_curvedline':
    case 'badge_curved_symbolline':
    case 'badge_horiz_curvedline':
    case 'badge_horiz_curved_100pct_area':
    case 'badge_horiz_curved_area_overlay':
    case 'badge_horiz_curved_stacked_area':
    case 'badge_stream_funnel':
    case 'badge_horiz_curved_symbolline':
    case 'badge_vert_curved_stacked_area':
    case 'badge_vert_curved_100pct_area':
    case 'badge_vert_curved_area_overlay':
    case 'badge_curved_line_bar':
    case 'badge_curved_line_stackedbar':
    case 'badge_stream':
    case 'badge_curved_rttrendline':
    case 'badge_curved_rt_symbolline':
      typeAttributes.curvedLines = true;
      break;
    default:typeAttributes.curvedLines = false;
  }
  switch (badgeType) {
    case 'badge_symbol_bar':
    case 'badge_symbol_stackedbar':
    case 'badge_horiz_symbol_bar':
    case 'badge_horiz_symbol_stackedbar':
      typeAttributes.symbolsOnly = true;
      break;
    default:typeAttributes.symbolsOnly = false;
  }
  switch (badgeType) {
    case 'badge_symbol_bar':
    case 'badge_symbol_stackedbar':
    case 'badge_curved_symbolline':
    case 'badge_symbolline':
    case 'badge_horiz_symbol_bar':
    case 'badge_horiz_symbol_stackedbar':
    case 'badge_horiz_curved_symbolline':
    case 'badge_horiz_symbolline':
    case 'badge_curved_rt_symbolline':
      typeAttributes.showSymbols = true;
      break;
    default:typeAttributes.showSymbols = false;
  }
  switch (badgeType) {
    case 'badge_vert_percentbar':
    case 'badge_horiz_percentbar':
      typeAttributes.percentOfSeriesData = true;
      break;
    default:typeAttributes.percentOfSeriesData = false;
  }
  switch (badgeType) {
    case 'badge_vert_100pct_linebar':
    case 'badge_horiz_100pct_linebar':
    case 'badge_vert_100pct':
    case 'badge_horiz_100pct':
    case 'badge_vert_marimekko':
    case 'badge_horiz_marimekko':
    case 'badge_horiz_100pct_area':
    case 'badge_horiz_curved_100pct_area':
    case 'badge_horiz_step_100pct_area':
    case 'badge_vert_100pct_area':
    case 'badge_vert_curved_100pct_area':
    case 'badge_vert_step_100pct_area':
      typeAttributes.percentOfCategoryData = true;
      break;
    default:typeAttributes.percentOfCategoryData = false;
  }
  switch (badgeType) {
    case 'badge_line_clusterbar':
    case 'badge_vert_dual_stackedbar':
    case 'badge_horiz_dual_stackedbar':
    case 'badge_horiz_line_clusterbar':
      typeAttributes.isGroupedStacked = true;
      break;
    default:typeAttributes.isGroupedStacked = false;
  }
  switch (badgeType) {
    case 'badge_vert_nestedbar':
    case 'badge_horiz_nestedbar':
    case 'badge_horiz_nested_linebar':
    case 'badge_vert_nested_linebar':
      typeAttributes.isNestedBar = true;
      break;
    default:typeAttributes.isNestedBar = false;
  }
  switch (badgeType) {
    case 'badge_stepline':
    case 'badge_horiz_stepline':
    case 'badge_horiz_step_area_overlay':
    case 'badge_horiz_step_stacked_area':
    case 'badge_horiz_step_100pct_area':
    case 'badge_vert_step_area_overlay':
    case 'badge_vert_step_stacked_area':
    case 'badge_vert_step_100pct_area':
      typeAttributes.stepLines = true;
      break;
    default:typeAttributes.stepLines = false;
  }
  switch (badgeType) {
    case 'badge_pop_trendline':
    case 'badge_pop_trendline_var':
    case 'badge_pop_trendline_play':
    case 'badge_pop_bar_line':
    case 'badge_pop_bar_line_var':
    case 'badge_pop_vert_multibar':
    case 'badge_pop_line_bar':
    case 'badge_pop_line_bar_var':
    case 'badge_pop_vert_bar_play':
      typeAttributes.isPeriodOverPeriod = true;
      break;
    default:typeAttributes.isPeriodOverPeriod = false;
  }
  switch (badgeType) {
    case 'badge_spark_bar':
    case 'badge_spark_line':
    case 'badge_flex_table':
      typeAttributes.isSpark = true;
      break;
    default:typeAttributes.isSpark = false;
  }
  $equals_2(badgeType, 'badge_flex_table')?(typeAttributes.isGrid = true):(typeAttributes.isGrid = false);
  $equals_2(badgeType, 'badge_stream') || $equals_2(badgeType, 'badge_stream_funnel')?(typeAttributes.isStream = true):(typeAttributes.isStream = false);
  $equals_2(badgeType, 'badge_pop_vert_bar_play') || $equals_2(badgeType, 'badge_pop_trendline_play') || $equals_2(badgeType, 'badge_pop_pie_play') || $equals_2(badgeType, 'badge_pop_donut_play')?(typeAttributes.isPopPlay = true):(typeAttributes.isPopPlay = false);
  $equals_2(badgeType, 'badge_xy_line') || $equals_2(badgeType, 'badge_ds_forecasting') || $equals_2(badgeType, 'badge_ds_outliers')?(typeAttributes.isXYLine = true):(typeAttributes.isXYLine = false);
  $equals_2(badgeType, 'badge_ds_outliers')?(typeAttributes.isXYOutlier = true):(typeAttributes.isXYOutlier = false);
  $equals_2(badgeType, 'badge_ds_forecasting')?(typeAttributes.isXYForecast = true):(typeAttributes.isXYForecast = false);
  $equals_2(badgeType, 'badge_nautilus') || $equals_2(badgeType, 'badge_nautilus_donut')?(typeAttributes.isNautilus = true):(typeAttributes.isNautilus = false);
  $equals_2(badgeType, 'badge_nightingale_rose')?(typeAttributes.isNightingale = true):(typeAttributes.isNightingale = false);
  $equals_2(badgeType, 'badge_compfillgauge_adv')?(typeAttributes.isAdvancedCompGauge = true):(typeAttributes.isAdvancedCompGauge = false);
  $equals_2(badgeType, 'badge_compgauge')?(typeAttributes.isCompNoFillGauge = true):(typeAttributes.isCompNoFillGauge = false);
  $equals_2(badgeType, 'badge_filledgauge')?(typeAttributes.isFilledGauge = true):(typeAttributes.isFilledGauge = false);
  $equals_2(badgeType, 'badge_highlow')?(typeAttributes.isHighLow = true):(typeAttributes.isHighLow = false);
  $equals_2(badgeType, 'badge_gantt_percent')?(typeAttributes.isGanttPercent = true):(typeAttributes.isGanttPercent = false);
  $equals_2(badgeType, 'badge_bubble') || $equals_2(badgeType, 'badge_xybubble')?(typeAttributes.isBubble = true):(typeAttributes.isBubble = false);
  $equals_2(badgeType, 'badge_xybubble') || $equals_2(badgeType, 'badge_xyscatterplot_basic')?(typeAttributes.isNonAggregatedVersion = true):(typeAttributes.isNonAggregatedVersion = false);
  $equals_2(badgeType, 'badge_progressbar')?(typeAttributes.isProgressBar = true):(typeAttributes.isProgressBar = false);
  $equals_2(badgeType, 'badge_singlevalue')?(typeAttributes.isSingleValue = true):(typeAttributes.isSingleValue = false);
  $equals_2(badgeType, 'badge_facegauge')?(typeAttributes.isFaceGauge = true):(typeAttributes.isFaceGauge = false);
  $equals_2(badgeType, 'badge_textbox') || $equals_2(badgeType, 'badge_dynamic_textbox')?(typeAttributes.isTextbox = true):(typeAttributes.isTextbox = false);
  $equals_2(badgeType, 'badge_dynamic_textbox')?(typeAttributes.isDynamic = true):(typeAttributes.isDynamic = false);
  $equals_2(badgeType, 'badge_gauge')?(typeAttributes.isRadial = true):(typeAttributes.isRadial = false);
  $equals_2(badgeType, 'badge_category_scatter')?(typeAttributes.isCategoryScatter = true):(typeAttributes.isCategoryScatter = false);
  $equals_2(badgeType, 'badge_date_selector') || $equals_2(badgeType, 'badge_checkbox_selector') || $equals_2(badgeType, 'badge_radio_selector')?(typeAttributes.isSelector = true):(typeAttributes.isSelector = false);
  $equals_2(badgeType, 'badge_radio_selector')?(typeAttributes.isRadio = true):(typeAttributes.isRadio = false);
  $equals_2(badgeType, 'badge_pop_bar_line_var') || $equals_2(badgeType, 'badge_pop_trendline_var') || $equals_2(badgeType, 'badge_pop_line_bar_var')?(typeAttributes.isPoPVariance = true):(typeAttributes.isPoPVariance = false);
  return typeAttributes;
}

function graphCreationNeeded(oldGraphType, newGraphType, typeAttributes){
  var newClass, oldClass;
  oldClass = getClassOfGraph(oldGraphType);
  newClass = getClassOfGraph(newGraphType);
  return oldClass != newClass || !!typeAttributes && typeAttributes.isGrid;
}

function graphHasSymbols(typeAttributes, graphType){
  return typeAttributes.showSymbols || typeAttributes.symbolsOnly || typeAttributes.isSymbolOverlay || typeAttributes.isSymbol || typeAttributes.isCategoryScatter || graphType == 26;
}

function isHorzGraph_0(graphType){
  switch (graphType) {
    case 1:
    case 3:
    case 7:
    case 5:
    case 31:
    case 10:
    case 20:
    case 21:
    case 24:
      return true;
  }
  return false;
}

function isPivotTableGraphType(graphType){
  if (graphType == 36)
    return true;
  return false;
}

function isScaleGraphType(graphType, typeAttributes){
  switch (graphType) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 3:
    case 5:
    case 30:
    case 31:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 26:
    case 28:
      if (!typeAttributes.isGrid)
        return true;
  }
  return false;
}

function isTableGraphType(graphType){
  if (graphType == 35) {
    return true;
  }
  return false;
}

function isVarianceChart_0(overrides){
  var isVarianceChart;
  isVarianceChart = false;
  !!overrides && overrides.containsKey('show_variance') && (instanceOfString(overrides.get_0('show_variance')) && $equalsIgnoreCase(castToString(overrides.get_0('show_variance')), 'true')?(isVarianceChart = true):instanceOfBoolean(overrides.get_0('show_variance')) && checkNotNull(castToBoolean(overrides.get_0('show_variance'))) && (isVarianceChart = true));
  return isVarianceChart;
}

function resetGraph(grph, graphType, typeAttributes, keepGoal, thumbnail){
  var handler, oldAnnotations, oldChartOptions, oldColumnFormats, oldData, oldScaleMarkers, sGraph;
  oldChartOptions = grph.chartOptions;
  grph.resetForTypeChange();
  oldData = $getOriginalData(grph);
  oldAnnotations = grph.annotations;
  oldScaleMarkers = grph.scaleMarkers;
  oldColumnFormats = grph.columnFormats;
  grph.reset_0();
  grph.graphType = graphType;
  grph.typeAttributes = typeAttributes;
  grph.isThumbnail = thumbnail;
  grph.chartOptions = oldChartOptions;
  sGraph = null;
  instanceOf(grph, 40) && (sGraph = castTo(grph, 40));
  if (grph.handler) {
    grph.handler.freeResources(oldData);
    grph.handler = null;
  }
  handler = setupGraphHandler(graphType, typeAttributes, null);
  if (sGraph) {
    setupGraphScales(graphType, typeAttributes, sGraph);
    setupForAreaGraph(graphType, handler);
  }
  !!handler && handler.setGraph(grph);
  grph.handler = handler;
  grph.annotations = oldAnnotations;
  $addLegendComponents(grph, oldChartOptions);
  keepGoal && $addScaleMarkers(grph, oldScaleMarkers);
  !!oldColumnFormats && $size(oldColumnFormats.map_0) > 0?(grph.columnFormats = new LinkedHashMap_0(oldColumnFormats)):(grph.columnFormats = null);
  return oldData;
}

function setupForAreaGraph(graphType, handler){
  if (instanceOf(handler, 60)) {
    switch (graphType) {
      case 6:
      case 7:
        castTo(handler, 60).isArea = true;
    }
  }
}

function setupGraphHandler(graphType, typeAttributes, handler){
  switch (graphType) {
    case 0:
    case 1:
      typeAttributes.isSpark && typeAttributes.isGrid?(handler = new HandlerGrid):typeAttributes.isCategoryScatter?(handler = new HandlerCatScatter):typeAttributes.isGroupedStacked?(handler = new HandlerGroupedStacked):typeAttributes.isMarimekko?(handler = new HandlerMarimekko):typeAttributes.isStacked?(handler = new HandlerStackedBar):typeAttributes.isBullet?(handler = new HandlerBullet):typeAttributes.isSpark?(handler = new HandlerSparkBar):(handler = new HandlerBar);
      break;
    case 6:
    case 7:
      handler = new HandlerArea;
      break;
    case 2:
    case 3:
      typeAttributes.isSpark && typeAttributes.isGrid?(handler = new HandlerGrid):typeAttributes.isSpark?(handler = new HandlerSparkLine):(handler = new HandlerLine);
      break;
    case 4:
    case 5:
    case 30:
    case 31:
    case 26:
      handler = new HandlerLineBar;
      break;
    case 28:
      handler = new HandlerRadar;
      break;
    case 8:
    case 9:
      if (typeAttributes.isNightingale) {
        handler = new HandlerNightingale;
      }
       else {
        handler = new HandlerPie;
        graphType == 9 && castTo(handler, 128).setInnerRadius(0.57);
      }

      break;
    case 32:
      handler = new HandlerSunburst;
      break;
    case 10:
      handler = new HandlerGantt;
      break;
    case 11:
      handler = new HandlerStock;
      break;
    case 18:
    case 20:
      handler = new HandlerBoxPlot;
      break;
    case 19:
    case 21:
      handler = new HandlerHistogram;
      break;
    case 23:
    case 24:
      handler = new HandlerWaterfall;
      break;
    case 16:
      handler = new HandlerHeatmap;
      break;
    case 12:
      handler = new HandlerXY;
      break;
    case 15:
      handler = new HandlerCompGauge;
      break;
    case 14:
    case 38:
      handler = new HandlerGauge;
      break;
    case 13:
      handler = new HandlerFunnel;
      break;
    case 27:
      handler = new HandlerFoldedFunnel;
      break;
    case 29:
      handler = new HandlerFunnelBar;
      break;
    case 17:
      handler = new HandlerWordCloud;
      break;
    case 33:
      typeAttributes.isSelector?(handler = new HandlerCheckboxSelector):(handler = new HandlerSlicer);
      break;
    case 22:
      handler = new HandlerTreeMap;
      break;
    case 25:
      typeAttributes.isSelector?(handler = new HandlerDateSelector):(handler = new HandlerCalendar);
      break;
    case 34:
      handler = new HandlerRangeSelector;
  }
  return handler;
}

function setupGraphScales(graphType, typeAttributes, sGraph){
  var catScale, categoryScale, valueScale, valueScale1;
  sGraph.scales.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  switch (graphType) {
    case 0:
    case 2:
      $addScale_0(sGraph, new ValueScale(0, sGraph, false));
      typeAttributes.isMarimekko?$addScale_0(sGraph, new CategoryScaleMarimekko(1, sGraph)):$addScale_0(sGraph, new CategoryScale(1, sGraph, false));
      $addScale_0(sGraph, new MinMaxBufferScale(2, sGraph));
      break;
    case 6:
    case 11:
    case 18:
    case 19:
    case 23:
      $addScale_0(sGraph, new ValueScale(0, sGraph, false));
      $addScale_0(sGraph, new CategoryScale(1, sGraph, false));
      break;
    case 1:
    case 3:
      $addScale_0(sGraph, new ValueScale(3, sGraph, false));
      typeAttributes.isMarimekko?$addScale_0(sGraph, new CategoryScaleMarimekko(0, sGraph)):$addScale_0(sGraph, new CategoryScale(0, sGraph, false));
      $addScale_0(sGraph, new MinMaxBufferScale(1, sGraph));
      break;
    case 7:
    case 20:
    case 21:
    case 24:
      $addScale_0(sGraph, new ValueScale(3, sGraph, false));
      $addScale_0(sGraph, new CategoryScale(0, sGraph, false));
      break;
    case 4:
    case 30:
    case 26:
      $addScale_0(sGraph, new ValueScale(0, sGraph, false));
      $addScale_0(sGraph, new CategoryScale(1, sGraph, false));
      $addScale_0(sGraph, new ValueScale(2, sGraph, true));
      $addScale_0(sGraph, new MinMaxBufferScale(2, sGraph));
      break;
    case 28:
      $addScale_0(sGraph, new RadarScale(sGraph));
      $addScale_0(sGraph, new BufferScale(3, sGraph));
      $addScale_0(sGraph, new BufferScale(1, sGraph));
      $addScale_0(sGraph, new BufferScale(2, sGraph));
      break;
    case 5:
    case 31:
      $addScale_0(sGraph, new ValueScale(3, sGraph, false));
      $addScale_0(sGraph, new CategoryScale(0, sGraph, false));
      $addScale_0(sGraph, new ValueScale(1, sGraph, true));
      break;
    case 10:
      $addScale_0(sGraph, new TimeScale(1, sGraph));
      $addScale_0(sGraph, new CategoryScale(0, sGraph, false));
      break;
    case 12:
      $addScale_0(sGraph, new ValueScale(0, sGraph, false));
      valueScale = new ValueScale(1, sGraph, false);
      $setType_1(valueScale, ST_CATEGORY);
      $add_1(sGraph.scales, valueScale);
      sGraph.treatAsSmall && (valueScale.isHidden = true);
      $addScale_0(sGraph, new MinMaxBufferScale(2, sGraph));
      break;
    case 16:
      valueScale1 = new CategoryScale(0, sGraph, false);
      valueScale1.type_0 = 0;
      $add_1(sGraph.scales, valueScale1);
      sGraph.treatAsSmall && (valueScale1.isHidden = true);
      catScale = new CategoryScale(1, sGraph, false);
      catScale.useColData = true;
      $add_1(sGraph.scales, catScale);
      sGraph.treatAsSmall && (catScale.isHidden = true);
  }
  !!sGraph.data_0 && $hasTimeData(sGraph.data_0) && $setCategoryScaleToCorrectScaleType(sGraph);
  typeAttributes.showSymbols || typeAttributes.symbolsOnly || typeAttributes.isSymbolOverlay || typeAttributes.isSymbol || typeAttributes.isCategoryScatter || graphType == 26?$setScalesMinSize(sGraph, 10):$setScalesMinSize(sGraph, 0);
  sGraph.isHorizontal = isHorzGraph_0(graphType);
  $setLayoutFlagsBasedOnSize(sGraph);
  switch (graphType) {
    case 19:
    case 21:
      if (!sGraph.typeAttributes || !sGraph.typeAttributes.stepLines) {
        categoryScale = $getCategoryScale(sGraph);
        !!categoryScale && instanceOf(categoryScale, 36) && $setIsLineType(castTo(categoryScale, 36), true);
      }

      break;
    case 2:
    case 6:
    case 3:
    case 7:
      if ((!sGraph.typeAttributes || !sGraph.typeAttributes.stepLines) && (!sGraph.data_0 || $getNumRows(sGraph.data_0) > 1)) {
        categoryScale = $getCategoryScale(sGraph);
        !!categoryScale && instanceOf(categoryScale, 36) && !$getShowDataTable(castTo(categoryScale, 36), true) && !$isTrellis(sGraph) && $setIsLineType(castTo(categoryScale, 36), true);
      }

  }
}

function $clinit_GraphPickerPanel(){
  $clinit_GraphPickerPanel = emptyMethod;
  fill_1 = new CFFill_1('#ffffff');
  backgroundFill = new CFFill_1('#f8f8f8');
  selectedStroke_0 = new CFStroke_1('#9BCCEC', 2);
  unselectedStroke = new CFStroke_1('#DDDDDD', 1);
  originalChartStroke = new CFStroke_1('#999999', 1);
  badgeFont = new CFFont_0(null, 10, ($clinit_CFColor() , TEXT_DARK_GRAY));
}

function $addBackground(this$static){
  var background, bgRect, ge;
  bgRect = new CFRect(0, 0, this$static.bnds.width_0, this$static.bnds.height_0);
  background = new CFShape_1(bgRect, backgroundFill, null);
  ge = new GraphicElement_0(background);
  this$static.geAry.add_0(ge);
}

function $addShapeOverGraph(this$static){
  var box, chartDimension, overShape, rect;
  !!this$static.shapeOverGraph && $removeComponent(this$static.chart, this$static.shapeOverGraph);
  this$static.shapeOverGraph = null;
  rect = (chartDimension = this$static.chart.dimension , this$static.bnds.x_0 == 0?new CFRect(0, 0, chartDimension.width_0, chartDimension.height_0 - this$static.bnds.height_0 - this$static.thumbNailMargin * 2):new CFRect(0, 0, chartDimension.width_0 - this$static.bnds.width_0 - this$static.thumbNailMargin * 2, chartDimension.height_0));
  this$static.shapeOverGraph = new Component(this$static.chart, 'shapeOverGraph');
  $setBounds(this$static.shapeOverGraph, rect);
  overShape = new CFShape_1(rect, ($clinit_CFFill() , TRANSPARENT_0), ($clinit_CFStroke() , TRANSPARENT_1));
  overShape.drillFilter = '{"internal": "close graph picker"}';
  $setDataObject_0(overShape, this$static.shapeOverGraph);
  box = new GraphicElement_0(overShape);
  $addGraphicElement_0(this$static.shapeOverGraph, box);
  $addComponent(this$static.chart, this$static.shapeOverGraph);
}

function $addShapesForThumbnails(this$static){
  var box, boxRect, boxShape, compBounds, component, component$iterator, overBox, overShape, roundedBox, stroke, textItem;
  if (this$static.dependentComps) {
    for (component$iterator = new ArrayList$1(this$static.dependentComps); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      compBounds = component.bnds;
      boxRect = new CFRect(compBounds.x_0 - this$static.thumbNailInnerMargin, compBounds.y_0 - this$static.thumbNailInnerMargin, compBounds.width_0 + this$static.thumbNailInnerMargin * 2, compBounds.height_0 + this$static.thumbNailInnerMargin * 2);
      stroke = unselectedStroke;
      this$static.currentSelection == component?(stroke = selectedStroke_0):this$static.originalSelection == component && (stroke = originalChartStroke);
      roundedBox = new CFPath_4(boxRect, this$static.thumbNailMargin);
      boxShape = new CFShape_0(roundedBox, fill_1, stroke);
      box = new GraphicElement_0(boxShape);
      $setHeight(boxRect, boxRect.height_0 + nameYOffset);
      textItem = $getNameForThumbnail(this$static, component, boxRect);
      !!textItem && (!box.textAry && (box.textAry = new ArrayList) , $add_1(box.textAry, textItem));
      this$static.geAry.add_0(box);
      overShape = new CFShape_1(boxRect, ($clinit_CFFill() , TRANSPARENT_0), ($clinit_CFStroke() , TRANSPARENT_1));
      overShape.drillFilter = '{"internal": "change chart"}';
      overShape.dataObject = component;
      overBox = new GraphicElement_0(overShape);
      $add_1(this$static.frontGeAry, overBox);
    }
  }
}

function $addThumbnail(this$static, rnd, thumbnail, selected){
  var first, nextLocation;
  first = !this$static.dependentComps;
  nextLocation = $getNextThumbnailLocation(this$static);
  if (nextLocation) {
    thumbnail.setBounds(nextLocation);
    $setLayoutFlagsBasedOnComponentSize(thumbnail);
    !this$static.dependentComps && (this$static.dependentComps = new ArrayList);
    $add_1(this$static.dependentComps, thumbnail);
    thumbnail.setNeedsFormat(true);
    thumbnail.format_0(rnd);
    thumbnail.shortName = getShortNameFromTypeAndAttributes(thumbnail);
    thumbnail.stripAllReferencesForThumbnail();
    first && (this$static.originalSelection = thumbnail);
    selected && (this$static.currentSelection = thumbnail);
  }
}

function $changeToGraphType(this$static, thumbNail){
  !!this$static.shapeOverGraph && $removeComponent(this$static.chart, this$static.shapeOverGraph);
  this$static.shapeOverGraph = null;
  if (this$static.dependentComps) {
    this$static.currentSelection = thumbNail;
    clearGraphicElementArray(this$static.geAry);
    this$static.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    $addBackground(this$static);
    $addShapesForThumbnails(this$static);
    $changeGraphToNewType(this$static.chart, thumbNail);
  }
  $addShapeOverGraph(this$static);
}

function $freeResources_16(this$static, dataToKeep){
  $freeResources_2(this$static, dataToKeep);
  !!this$static.currentSelection && this$static.currentSelection.freeResources(dataToKeep);
  this$static.currentSelection = null;
  this$static.originalSelection = null;
  this$static.frontGeAry = null;
  !!this$static.shapeOverGraph && $freeResources_1(this$static.shapeOverGraph);
  this$static.shapeOverGraph = null;
}

function $getColsForWidth(this$static, width_0, cellWidth){
  var maxCols, numCols;
  width_0 -= this$static.thumbNailSideMargin * 2;
  maxCols = width_0 / (cellWidth + this$static.thumbNailMargin + 2 * this$static.thumbNailInnerMargin);
  numCols = round_int(maxCols);
  numCols < 0 && (numCols = 0);
  return numCols;
}

function $getNameForThumbnail(this$static, component, boxRect){
  var X, name_0, nameDim, textInfo, textItem, truncatedName;
  if (instanceOf(component, 43)) {
    name_0 = castTo(component, 43).shortName;
    textInfo = getWrappedTextForWidthWithMaxLines(this$static.rnd, name_0, badgeFont, boxRect.width_0, -1, 1);
    truncatedName = castToString($get_2(textInfo.wrappedLines, 0));
    nameDim = this$static.rnd.measureText_0(truncatedName, badgeFont);
    X = round_int((boxRect.width_0 - nameDim.width_0) / 2 + boxRect.x_0);
    textItem = new CFTextItem_0(truncatedName, badgeFont, X, round_int(boxRect.y_0 + boxRect.height_0) - 2);
    return textItem;
  }
  return null;
}

function $getNextThumbnailLocation(this$static){
  var column, index_0, row, x_0, y_0;
  index_0 = 0;
  !!this$static.dependentComps && (index_0 = this$static.dependentComps.array.length);
  if (index_0 + 1 > this$static.rows_0 * this$static.cols_0)
    return null;
  if (this$static.cols_0 == 0)
    return null;
  column = index_0 % this$static.cols_0;
  row = index_0 / this$static.cols_0 | 0;
  return x_0 = this$static.thumbNailSideMargin + this$static.thumbNailInnerMargin + column * (this$static.cellSize + this$static.thumbNailInnerMargin * 2) + column * this$static.thumbNailMargin , y_0 = this$static.thumbNailTopMargin + this$static.thumbNailInnerMargin + row * (this$static.cellSize + this$static.thumbNailInnerMargin * 2) + row * this$static.thumbNailVerticalMargin , new CFRect(x_0, y_0, this$static.cellSize, this$static.cellSize);
}

function $getRemainingBounds(this$static){
  var chartDimension;
  chartDimension = this$static.chart.dimension;
  return this$static.bnds.x_0 == 0?new CFRect(0, 0, chartDimension.width_0, chartDimension.height_0 - this$static.bnds.height_0 - this$static.thumbNailMargin * 2):new CFRect(0, 0, chartDimension.width_0 - this$static.bnds.width_0 - this$static.thumbNailMargin * 2, chartDimension.height_0);
}

function $getRowsForHeight(this$static, height, cellHeight){
  var maxRows, numRows;
  height -= this$static.thumbNailTopMargin;
  maxRows = height / (cellHeight + this$static.thumbNailVerticalMargin + 2 * this$static.thumbNailInnerMargin);
  numRows = round_int(maxRows);
  numRows < 0 && (numRows = 0);
  return numRows;
}

function $setActiveState(this$static, value_0){
  this$static.active = value_0;
  this$static.active?$addShapeOverGraph(this$static):(!!this$static.shapeOverGraph && $removeComponent(this$static.chart, this$static.shapeOverGraph) , this$static.shapeOverGraph = null);
}

function $setRenderer(this$static, renderer){
  this$static.rnd = renderer;
  if (!spaceDim_0 && !!this$static.rnd) {
    spaceDim_0 = this$static.rnd.measureText_0(' ', badgeFont);
    nameYOffset = spaceDim_0.height_0;
  }
}

function $setRowColsForBottomLayout(this$static, chartDimension, numberOfItems){
  var currentCellSize, currentCols, currentRows, maxCols, maxHeight, maxRows, width_0;
  maxHeight = round_int(chartDimension.height_0 * this$static.pickerSizePercent);
  width_0 = chartDimension.width_0;
  maxRows = $getRowsForHeight(this$static, maxHeight, minThumbNailSize);
  maxCols = $getColsForWidth(this$static, width_0, minThumbNailSize);
  numberOfItems > maxRows * maxCols && (numberOfItems = maxRows * maxCols);
  currentCellSize = minThumbNailSize;
  currentRows = $getRowsForHeight(this$static, maxHeight, currentCellSize);
  currentCols = $getColsForWidth(this$static, width_0, currentCellSize);
  while (currentCellSize <= maxThumbNailSize && numberOfItems <= currentRows * currentCols) {
    ++currentCellSize;
    currentRows = $getRowsForHeight(this$static, maxHeight, currentCellSize);
    currentCols = $getColsForWidth(this$static, width_0, currentCellSize);
  }
  this$static.cellSize = currentCellSize - 1;
  this$static.rows_0 = $getRowsForHeight(this$static, maxHeight, this$static.cellSize);
  this$static.cols_0 = $getColsForWidth(this$static, width_0, this$static.cellSize);
  while ((this$static.rows_0 - 1) * this$static.cols_0 >= numberOfItems)
    --this$static.rows_0;
}

function $setRowColsForRightLayout(this$static, chartDimension, numberOfItems){
  var currentCellSize, currentCols, currentRows, height, maxCols, maxRows, maxWidth;
  maxWidth = round_int(chartDimension.width_0 * this$static.pickerSizePercent);
  height = chartDimension.height_0;
  maxRows = $getRowsForHeight(this$static, height, minThumbNailSize);
  maxCols = $getColsForWidth(this$static, maxWidth, minThumbNailSize);
  numberOfItems > maxRows * maxCols && (numberOfItems = maxRows * maxCols);
  currentCellSize = minThumbNailSize;
  currentRows = $getRowsForHeight(this$static, height, currentCellSize);
  currentCols = $getColsForWidth(this$static, maxWidth, currentCellSize);
  while (currentCellSize <= maxThumbNailSize && numberOfItems <= currentRows * currentCols) {
    ++currentCellSize;
    currentRows = $getRowsForHeight(this$static, height, currentCellSize);
    currentCols = $getColsForWidth(this$static, maxWidth, currentCellSize);
  }
  this$static.cellSize = currentCellSize - 1;
  this$static.rows_0 = $getRowsForHeight(this$static, height, this$static.cellSize);
  this$static.cols_0 = $getColsForWidth(this$static, maxWidth, this$static.cellSize);
  while ((this$static.cols_0 - 1) * this$static.rows_0 >= numberOfItems)
    --this$static.cols_0;
}

function $setSizeBasedOnChart(this$static, numberOfItems){
  var chartDimension, height, height_0, width_0, width_1;
  chartDimension = this$static.chart.originalDimension;
  !chartDimension && (chartDimension = this$static.chart.dimension);
  if (chartDimension.width_0 < chartDimension.height_0 && chartDimension.height_0 < 600) {
    this$static.thumbNailMargin = 4;
    this$static.verticalLabelPadding = 14;
    this$static.thumbNailVerticalMargin = this$static.thumbNailMargin + this$static.verticalLabelPadding;
    this$static.thumbNailInnerMargin = 4;
    this$static.thumbNailTopMargin = 10;
    this$static.thumbNailSideMargin = 6;
  }
  chartDimension.width_0 < chartDimension.height_0?($setRowColsForBottomLayout(this$static, chartDimension, numberOfItems) , height = (height_0 = this$static.cellSize , height_0 += 2 * this$static.thumbNailInnerMargin , height_0 = height_0 * this$static.rows_0 , height_0 += (this$static.rows_0 - 1) * this$static.thumbNailVerticalMargin , height_0 += this$static.thumbNailTopMargin + this$static.thumbNailVerticalMargin , height_0) , this$static.bnds = new CFRect(0, chartDimension.height_0 - height, chartDimension.width_0, height) , this$static.activeOrigin = new CFPoint(0, chartDimension.height_0 - height) , this$static.inactiveOrigin = new CFPoint(0, chartDimension.height_0 + 1) , undefined):($setRowColsForRightLayout(this$static, chartDimension, numberOfItems) , width_0 = (width_1 = this$static.cellSize , width_1 += 2 * this$static.thumbNailInnerMargin , width_1 = width_1 * this$static.cols_0 , width_1 += (this$static.cols_0 - 1) * this$static.thumbNailMargin , width_1 += this$static.thumbNailSideMargin * 2 , width_1) , this$static.bnds = new CFRect(chartDimension.width_0 - width_0, 0, width_0, chartDimension.height_0) , this$static.activeOrigin = new CFPoint(chartDimension.width_0 - width_0, 0) , this$static.inactiveOrigin = new CFPoint(chartDimension.width_0 + 1, 0) , undefined);
  this$static.currentOrigin = new CFPoint_0(this$static.activeOrigin);
  this$static.needsFormat = true;
}

function GraphPickerPanel(theChart){
  $clinit_GraphPickerPanel();
  ComponentCSR.call(this, theChart, 'graphPicker');
  this.thumbNailMargin = 6;
  this.verticalLabelPadding = 16;
  this.thumbNailVerticalMargin = this.thumbNailMargin + this.verticalLabelPadding;
  this.thumbNailInnerMargin = 7;
  this.thumbNailTopMargin = 20;
  this.thumbNailSideMargin = 8;
  this.pickerSizePercent = 0.5;
}

function isChartBigEnough(dimension){
  $clinit_GraphPickerPanel();
  if (!!dimension && (dimension.height_0 >= 270 && dimension.width_0 >= 120 || dimension.width_0 >= 270 && dimension.height_0 >= 120))
    return true;
  return false;
}

defineClass(315, 63, $intern_13, GraphPickerPanel);
_.clearAnimation = function clearAnimation_1(){
  var pctComplete;
  this.animInfo = null;
  pctComplete = 1;
  this.active || (pctComplete = 0);
  this.thumbnailsVisible = pctComplete != 0;
  this.currentOrigin = getAnimPoint(this.inactiveOrigin, this.activeOrigin, pctComplete);
  pctComplete != 0 && ($addBackground(this) , $addShapesForThumbnails(this));
}
;
_.draw_1 = function draw_6(rnd){
  var component, component$iterator;
  rnd.setOrigin(round_int(this.currentOrigin.x_0), round_int(this.currentOrigin.y_0));
  $draw_1(this, rnd);
  if (this.thumbnailsVisible && !!this.dependentComps) {
    for (component$iterator = new ArrayList$1(this.dependentComps); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      component.draw_1(rnd);
    }
  }
  drawGEAry(rnd, this.frontGeAry);
  rnd.setOrigin(0, 0);
}
;
_.format_0 = function format_4(rnd){
  var component, component$iterator;
  this.rnd = rnd;
  if (this.dependentComps) {
    for (component$iterator = new ArrayList$1(this.dependentComps); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      component.getNeedsFormat() && component.format_0(rnd);
    }
  }
  this.needsFormat = false;
}
;
_.freeResources = function freeResources_10(dataToKeep){
  $freeResources_16(this, dataToKeep);
}
;
_.getEstimateOfNumberOfShapesToDraw = function getEstimateOfNumberOfShapesToDraw_1(){
  var component, component$iterator, size_0;
  size_0 = $getEstimateOfNumberOfShapesToDraw(this);
  size_0 += this.frontGeAry.array.length;
  if (this.dependentComps) {
    for (component$iterator = new ArrayList$1(this.dependentComps); component$iterator.i < component$iterator.this$01.array.length;) {
      component = castTo($next_3(component$iterator), 23);
      size_0 += component.getEstimateOfNumberOfShapesToDraw();
    }
  }
  return size_0;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_4(x_0, y_0, rnd){
  x_0 = x_0 - round_int(this.currentOrigin.x_0);
  y_0 = y_0 - round_int(this.currentOrigin.y_0);
  return getShapeUnderPointForGEAry(x_0, y_0, this.frontGeAry, rnd, this);
}
;
_.handleClick = function handleClick_5(shapeClicked){
  var comp;
  if (shapeClicked) {
    comp = castTo(shapeClicked.dataObject, 23);
    if (comp) {
      $changeToGraphType(this, comp);
      this.drillFilter = null;
    }
    return true;
  }
  return false;
}
;
_.reset_0 = function reset_4(){
  $reset_0(this);
  this.frontGeAry = new ArrayList;
}
;
_.setFrame = function setFrame_3(type_0, easingType, startTime, curTime, endTime, rnd){
  var pctComplete;
  if (this.animInfo) {
    pctComplete = $getPercentComplete(this.animInfo, curTime);
    this.active || (pctComplete = 1 - pctComplete);
    this.thumbnailsVisible = pctComplete != 0;
    this.currentOrigin = getAnimPoint(this.inactiveOrigin, this.activeOrigin, pctComplete);
    clearGraphicElementArray(this.geAry);
    this.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    pctComplete > 0 && ($addBackground(this) , $addShapesForThumbnails(this));
  }
}
;
_.active = false;
_.cellSize = 0;
_.cols_0 = 0;
_.pickerSizePercent = 0;
_.rows_0 = 0;
_.thumbNailInnerMargin = 0;
_.thumbNailMargin = 0;
_.thumbNailSideMargin = 0;
_.thumbNailTopMargin = 0;
_.thumbNailVerticalMargin = 0;
_.thumbnailsVisible = false;
_.verticalLabelPadding = 0;
var backgroundFill, badgeFont, fill_1, maxThumbNailSize = 120, minThumbNailSize = 32, nameYOffset = 0, originalChartStroke, selectedStroke_0, spaceDim_0, unselectedStroke;
var Lcom_domo_charting_graphs_GraphPickerPanel_2_classLit = createForClass('com.domo.charting.graphs', 'GraphPickerPanel', 315);
function GraphType(graphType, attributes){
  this.type_0 = graphType;
  this.typeAttributes = attributes;
}

defineClass(50, 1, {50:1}, GraphType);
_.type_0 = 0;
var Lcom_domo_charting_graphs_GraphType_2_classLit = createForClass('com.domo.charting.graphs', 'GraphType', 50);
function GridCell(day, date, dayOfWeek, isPrePostCell){
  this.day = day;
  this.date = date;
  this.dayOfWeek = dayOfWeek;
  this.events = null;
  this.value_0 = 0;
  this.hasValue = false;
  this.isPrePostCell = isPrePostCell;
}

defineClass(75, 1, {75:1}, GridCell);
_.day = 0;
_.dayOfWeek = 0;
_.hasValue = false;
_.isPrePostCell = false;
_.value_0 = 0;
var Lcom_domo_charting_graphs_GridCell_2_classLit = createForClass('com.domo.charting.graphs', 'GridCell', 75);
function $freeResources_17(this$static, dataToKeep){
  !!this$static.originalData && this$static.originalData != this$static.graph.data_0 && this$static.originalData != dataToKeep && $freeResources_11(this$static.originalData);
  this$static.hoverData = null;
  this$static.originalData = null;
  !!this$static.currentViewDataGrid && this$static.currentViewDataGrid != this$static.graph.data_0 && this$static.currentViewDataGrid != dataToKeep && $freeResources_11(this$static.currentViewDataGrid);
  this$static.currentViewDataGrid = null;
  this$static.graph = null;
}

function $setGraph(this$static, graph){
  this$static.graph = graph;
}

function $showElementInGray(this$static, ge){
  var labelFont, shape_0, shapeAry, ti, ti$iterator;
  shapeAry = ge.shapeAry;
  shape_0 = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
  $setFill_0(shape_0, new CFFill(($clinit_CFColor() , DISABLED_LIGHT_GRAY)));
  this$static.graph.outlineStyle && $setFill_0(shape_0, getOutlineFill(shape_0.fill_0));
  $setStroke(shape_0, new CFStroke(WHITE, 1));
  if (!!ge.textAry && ge.textAry.array.length >= 1) {
    for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      labelFont = ti.font_0;
      $setColor_1(labelFont, WHITE);
    }
  }
}

function buildReverseRowMap(rows_0){
  var counter, row, row$iterator, rowMap;
  rowMap = new HashMap;
  if (rows_0) {
    counter = 0;
    for (row$iterator = rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      $put_0(rowMap, row, valueOf(counter++));
    }
  }
  return rowMap;
}

function buildRowMap(rows_0){
  var row, row$iterator, rowMap;
  rowMap = new HashMap;
  if (rows_0) {
    for (row$iterator = rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      $put_0(rowMap, valueOf(row.origIndex), row);
    }
  }
  return rowMap;
}

function getRowsToDisplay(rowMap, rows_0, curCol){
  var cell, currentRowOrderMap, entry, key, key$iterator, key$iterator0, list, outerIter, row, rowsToReturn;
  rowsToReturn = rows_0;
  if (!!curCol && !!curCol.cellMap) {
    $size(curCol.cellMap);
    rowsToReturn = new ArrayList;
    currentRowOrderMap = new HashMap;
    for (key$iterator0 = (outerIter = (new AbstractMap$1(curCol.cellMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator0.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator0.val$outerIter2.next_1(), 44) , castTo(entry.getKey(), 29));
      cell = castTo($get_1(curCol.cellMap, key), 16);
      row = cell.row;
      !!row && !row.hidden && $get_1(rowMap, valueOf(row.origIndex)) != null && $put_0(currentRowOrderMap, valueOf(row.curIndex), row);
    }
    list = new ArrayList_1(new AbstractMap$1(currentRowOrderMap));
    list.array.length > 1 && sort_4(list.array, list.array.length, null);
    for (key$iterator = new ArrayList$1(list); key$iterator.i < key$iterator.this$01.array.length;) {
      key = castTo($next_3(key$iterator), 29);
      rowsToReturn.add_0(castTo(getEntryValueOrNull($getEntry(currentRowOrderMap.hashCodeMap, key)), 7));
    }
  }
  return rowsToReturn;
}

defineClass(118, 1, {});
_.addDataFilterIfNeeded = function addDataFilterIfNeeded(dragRect){
}
;
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_1(chart){
}
;
_.adjustDataAfterRowsHidden = function adjustDataAfterRowsHidden(){
}
;
_.allowSetDataObjectWhenUsingCardBus = function allowSetDataObjectWhenUsingCardBus(dataObject){
  return true;
}
;
_.calcMinMaxOverride = function calcMinMaxOverride(scale, curMin, curMax){
  return null;
}
;
_.cancelDrag_0 = function cancelDrag_2(){
  return false;
}
;
_.closeZoomInFilter = function closeZoomInFilter(){
  return false;
}
;
_.draw_1 = function draw_7(rnd){
}
;
_.drawDataLabel = function drawDataLabel(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  return false;
}
;
_.freeResources = function freeResources_11(dataToKeep){
  $freeResources_17(this, dataToKeep);
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems(){
  return null;
}
;
_.getDragShadeRect = function getDragShadeRect(xScale, yScale, startX, startY, curX, curY){
  return null;
}
;
_.getDrillFilter = function getDrillFilter(shapeInfo, clicked){
  return null;
}
;
_.getFinalDragRectFromShadeRect = function getFinalDragRectFromShadeRect(shadeRect){
  return null;
}
;
_.getHintTextOverride = function getHintTextOverride(){
  return null;
}
;
_.getHoverTextOverride = function getHoverTextOverride(cell, formatString){
  return formatString;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries(legend, colInfo){
  return null;
}
;
_.getOriginalData = function getOriginalData(){
  return this.graph.data_0;
}
;
_.getPaddingX = function getPaddingX(){
  return new CFDimension(0, 0);
}
;
_.getPaddingY = function getPaddingY(){
  return new CFDimension(0, 0);
}
;
_.getSeriesShapeKeyFromCell = function getSeriesShapeKeyFromCell(cell){
  if (cell) {
    return !!this.graph && !!this.graph.typeAttributes && this.graph.typeAttributes.isPopPlay?$getRowName(cell) + '|^|^|':$getRowName(cell) + '|^|^|' + $getColName(cell);
  }
  return null;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_5(x_0, y_0, rnd){
  return null;
}
;
_.getValueScaleForCell = function getValueScaleForCell(cell){
  return null;
}
;
_.handleClick_0 = function handleClick_6(shapeClicked){
  return -1;
}
;
_.handleDrag_0 = function handleDrag_3(startX, startY, curX, curY){
  return false;
}
;
_.handleDragEnd_0 = function handleDragEnd_3(startX, startY, curX, curY){
  return false;
}
;
_.handleNoDataState = function handleNoDataState(rnd){
  return false;
}
;
_.hasHandlerSpecificHighlightUsingFilters = function hasHandlerSpecificHighlightUsingFilters(){
  return false;
}
;
_.highlightUsingFilters = function highlightUsingFilters_2(filters){
  return false;
}
;
_.initColors = function initColors(){
}
;
_.isLegendItemSameSeries = function isLegendItemSameSeries(legendItemInfo, srsShapeInfo){
  return false;
}
;
_.limitDataRowsForCatScaleIfSpecified = function limitDataRowsForCatScaleIfSpecified(rows_0){
  return rows_0;
}
;
_.numberFormattingProcessed = function numberFormattingProcessed(){
  return false;
}
;
_.onBeforeSort = function onBeforeSort(){
  return;
}
;
_.preScaleLegendFormat = function preScaleLegendFormat(){
  return;
}
;
_.removeFilter_1 = function removeFilter_2(filterToRemove){
  return false;
}
;
_.resetForTypeChange = function resetForTypeChange_0(){
}
;
_.setCategoryIsHidden = function setCategoryIsHidden(categoryIndex, value_0){
  return false;
}
;
_.setData = function setData_2(data_0){
}
;
_.setGraph = function setGraph(graph){
  $setGraph(this, graph);
}
;
_.setHoverData = function setHoverData_8(data_0, rnd){
  return false;
}
;
_.setNeedsFormat = function setNeedsFormat_3(value_0){
  return;
}
;
_.shapeIsValidAnnotationPoint = function shapeIsValidAnnotationPoint(shape_0){
  return true;
}
;
_.showCancelZoomIndicatorWhenFiltered = function showCancelZoomIndicatorWhenFiltered(){
  return true;
}
;
_.supportsSortingFromScale = function supportsSortingFromScale(){
  return false;
}
;
_.supportsWarning = function supportsWarning(warningMessage){
  return true;
}
;
_.hoverData = null;
var Lcom_domo_charting_graphs_HandlerBase_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBase', 118);
function $addAnnotationListIfNeeded(this$static, chart){
  var annotState;
  if (!this$static.sGraph.annotationView && $hasAnnotations(this$static.sGraph) && !this$static.sGraph.chart.hideAnnotations && !this$static.sGraph.hideAnnotations && !this$static.sGraph.treatAsSmall && $graphTypeSupportsAnnotations(this$static.sGraph)) {
    if (this$static.sGraph.treatAsSmall || this$static.sGraph.hideAnnotationList) {
      !!this$static.sGraph.annotationView && (this$static.sGraph.annotationView = null);
    }
     else {
      this$static.sGraph.annotationView = new AnnotationListView(chart, this$static.sGraph);
      this$static.sGraph.bnds.width_0 * 2 / 3 >= this$static.sGraph.bnds.height_0 && (this$static.sGraph.bnds.width_0 > 750 || chart.mobile && this$static.sGraph.bnds.width_0 > 550) && (this$static.sGraph.annotationView.position = 2);
      $addDependentComp(this$static.sGraph, this$static.sGraph.annotationView);
      $addDependentCompsToCompArray(this$static.sGraph);
      if ($getChartOptionAsString(this$static.sGraph, 'annotation_view_state') != null) {
        annotState = $getChartOptionAsString(this$static.sGraph, 'annotation_view_state');
        $equalsIgnoreCase(annotState, 'Closed') && (this$static.sGraph.annotationView.isOpen = false , undefined);
      }
    }
  }
}

function $addExtraForecastItemsIfSpecified(this$static, data_0, hasDisplayLimit){
  var forecastMethod, lastRowSort, lastRowSortDesc, minMaxScale, periodOffset, tempSortNeeded;
  if ($getNumExtraProjectedItems(this$static.sGraph) > 0 && data_0.dateGrain != null && !hasDisplayLimit) {
    tempSortNeeded = false;
    lastRowSort = data_0.lastRowSort;
    lastRowSortDesc = data_0.lastRowSortDesc;
    if (lastRowSort != SORT_DATE || lastRowSortDesc) {
      tempSortNeeded = true;
      $sortRows(this$static.graph.data_0, SORT_DATE);
    }
    minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
    if (minMaxScale) {
      $processChartOptions_14(minMaxScale);
      forecastMethod = $getMultiProjectionMethod(minMaxScale);
      periodOffset = 0;
      (forecastMethod == 5 || forecastMethod == 6) && (periodOffset = $getProjectionPeriodsPattern(minMaxScale, data_0.dateGrain));
      periodOffset == 0 && (forecastMethod = 3);
      $addExtraForcastItems(data_0, $getNumExtraProjectedItems(this$static.sGraph), this$static.graph, forecastMethod, periodOffset);
    }
    tempSortNeeded && (lastRowSortDesc?$sortRowsDesc(this$static.graph.data_0, lastRowSort, false):$sortRows(this$static.graph.data_0, lastRowSort));
  }
}

function $addForecastUIPanelIfNeeded(this$static, chart){
  $getChartOptionAsString(this$static.sGraph, 'remove_forecast_ctrls') != null && (this$static.sGraph.hideForecastUI = isTrue($getChartOptionAsString(this$static.sGraph, 'remove_forecast_ctrls')));
  if (!this$static.sGraph.forecastUIPanel && !this$static.sGraph.isHorizontal && !this$static.sGraph.treatAsSmall && !this$static.sGraph.hideForecastUI) {
    this$static.sGraph.forecastUIPanel = new ForecastUIPanel(chart, this$static.sGraph);
    $addDependentComp(this$static.sGraph, this$static.sGraph.forecastUIPanel);
    $addDependentCompsToCompArray(this$static.sGraph);
  }
   else 
    (this$static.sGraph.treatAsSmall || this$static.sGraph.isHorizontal || this$static.sGraph.hideForecastUI) && !!this$static.sGraph.forecastUIPanel && (this$static.sGraph.forecastUIPanel = null);
}

function $addInnerBoundsClip(this$static, useJaggedClip, addClipToBackground, addClipToForeground){
  var clipPath, clipShape, geClip, innerBounds;
  if (this$static.graph.isHorizontal_0() && this$static.graph.getInnerBounds().height_0 > 16000)
    return;
  if (useJaggedClip)
    clipPath = $getJaggedInnerBoundsClipShape(this$static);
  else {
    innerBounds = $duplicate_5(this$static.graph.getInnerBounds());
    this$static.graph.isThumbnail && $inflate(innerBounds, 3);
    clipPath = new CFPath_3(innerBounds);
  }
  clipShape = new CFShape_0(clipPath, null, null);
  clipShape.isClip = true;
  geClip = new GraphicElement;
  !geClip.shapeAry && (geClip.shapeAry = new ArrayList);
  $add_1(geClip.shapeAry, clipShape);
  addClipToBackground?$addBackGraphicElement(this$static.graph, geClip):addClipToForeground?$addFrontGraphicElement_0(this$static.graph, geClip):$addGraphicElement_0(this$static.graph, geClip);
  $setClipPath(this$static.graph, clipPath);
}

function $addLegendsOrSubComponents_0(this$static, chart){
  $getChartOptionAsString(this$static.sGraph, 'hide_annotation_list') != null && (this$static.sGraph.hideAnnotationList = isTrue($getChartOptionAsString(this$static.sGraph, 'hide_annotation_list')));
  if (this$static.graph.graphType != 24 && this$static.graph.graphType != 23 && !this$static.sGraph.legend) {
    this$static.sGraph.legend = new LegendScaledGraph(chart, this$static.graph.name_0 + '_legend', this$static.sGraph, 2);
    $addDependentComp(this$static.sGraph, this$static.sGraph.legend);
    $setChartOptions(this$static.sGraph.legend, this$static.graph.chartOptions);
  }
  $addForecastUIPanelIfNeeded(this$static, chart);
  $addAnnotationListIfNeeded(this$static, chart);
  !!this$static.graph.playControl && (this$static.graph.playControl = null);
}

function $addOrRemoveSecondScale(this$static){
  var hasSecondScale, lineCountVal, sclMinMax, secondScale, setLineCountVal;
  lineCountVal = 0;
  hasSecondScale = false;
  secondScale = $getValueScaleByNumber(this$static.sGraph, 1);
  if ($shouldHaveSecondScale(this$static)) {
    if (!!this$static.graph.data_0 && $getNumCols(this$static.graph.data_0) > 1) {
      $setDataLabelUseScaleFormat(this$static, 'true');
      $setHoverUseScaleFormat(this$static, 'true');
      if (!secondScale) {
        $addScale_0(this$static.sGraph, new ValueScale(getOppositePosition($getValueScale(this$static.sGraph).position), this$static.sGraph, true));
        sclMinMax = $getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0);
        if (sclMinMax) {
          $remove_3(this$static.sGraph.scales, sclMinMax);
          $addScale_0(this$static.sGraph, sclMinMax);
        }
      }
      lineCountVal = 1;
      hasSecondScale = true;
    }
  }
   else 
    !!secondScale && ($isLineOnly(this$static.graph) || $isBarOnly(this$static.graph)) && $remove_3(this$static.sGraph.scales, secondScale);
  setLineCountVal = this$static.graph.getChartOptionAsString('lines_on_left_scale');
  setLineCountVal != null && (lineCountVal = getInt(setLineCountVal, 1));
  lineCountVal != 0 && hasSecondScale?$setPrimaryScaleCount(this$static, lineCountVal):!hasSecondScale && ($isBarOnly(this$static.graph) || $isLineOnly(this$static.graph)) && $setPrimaryScaleCount(this$static, $getNumCols(this$static.graph.data_0));
  return hasSecondScale;
}

function $addRegressionAndProjectionDataToSrsInfo(this$static, minMaxScale, valueScale, curCol, srsInfo){
  if (!!minMaxScale && !this$static.graph.typeAttributes.percentOfSeriesData && !this$static.sGraph.isHorizontal && !this$static.graph.typeAttributes.isDotPlot) {
    $showLinearRegressionLine(minMaxScale) && $addRegressionLinePoints(srsInfo, $getRegressionInfo(minMaxScale, curCol.curIndex).regressionValues);
    $showProjectionVal(minMaxScale, curCol, valueScale) && $addProjectionValPoint(srsInfo, $getProjectionValPoint(minMaxScale, curCol.curIndex, srsInfo));
  }
}

function $adjustValueScalePositionForHorizontalGraphs(this$static, valScale){
  if (this$static.sGraph.isHorizontal && !$getValueScaleByNumber(this$static.sGraph, 1)) {
    if (valScale.positionOverride != -1)
      return true;
    if (this$static.sGraph.horizontalLayout)
      return false;
    if (this$static.sGraph.originalHeight != -1)
      return false;
    return true;
  }
  return false;
}

function $allowDataLabelRotate(this$static){
  if (!!this$static.graph.dataLabel && this$static.graph.dataLabel.allowOverlap)
    return false;
  if (this$static.graph.graphType == 0 && !this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isSymbolOverlay)
    return true;
  return false;
}

function $applyRunningTotalToDataGrid(this$static){
  var cell, col, col$iterator, col$iterator0, colIndex, colIndex0, cumVals, dataGrid, i, row, value_0;
  dataGrid = this$static.graph.data_0;
  dataGrid.isFiscalCalendar && dataGrid.lastRowSort == SORT_DATE && $equals_2(dataGrid.dateGrain, 'MONTH') && $sortRows(dataGrid, 0);
  cumVals = initUnidimensionalArray(D_classLit, $intern_24, 41, $getNumCols(dataGrid), 15, 1);
  for (i = 0; i < cumVals.length; i++)
    cumVals[i] = NaN;
  row = $getFirstVisibleRow(dataGrid);
  while (row) {
    colIndex0 = 0;
    for (col$iterator0 = dataGrid.cols_0.iterator(); col$iterator0.hasNext_0();) {
      col = castTo(col$iterator0.next_1(), 7);
      if (col.isRunningTotal) {
        cell = castTo($get_1(row.cellMap, valueOf(col.origIndex)), 16);
        if (cell) {
          value_0 = $getValueOrProjection(cell, false);
          isNaN(value_0) && !isNaN(cumVals[colIndex0]) && (value_0 = 0);
          isNaN(cumVals[colIndex0])?(cumVals[colIndex0] = value_0):(cumVals[colIndex0] += value_0);
          cell.altValue = cumVals[colIndex0];
        }
         else if (!isNaN(cumVals[colIndex0]) && !$showGapsForRunningTotalNulls(this$static)) {
          cell = new Cell(NaN);
          cell.altValue = cumVals[colIndex0];
          cell.row = row;
          cell.column = col;
          $put_0(row.cellMap, valueOf(col.origIndex), cell);
          $put_0(col.cellMap, valueOf(row.origIndex), cell);
        }
      }
      ++colIndex0;
    }
    row = $getNextVisibleRow(dataGrid, row);
  }
  colIndex = 0;
  for (col$iterator = dataGrid.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    col.isRunningTotal && (col.sum = cumVals[colIndex] , undefined);
    ++colIndex;
  }
}

function $clearAnnotationSelectionsIfNeeded(this$static, redrawNeeded){
  var annotation, annotation$iterator, newRedrawNeeded;
  newRedrawNeeded = redrawNeeded;
  if (!!this$static.sGraph.annotations && this$static.sGraph.annotations.size_1() > 0) {
    for (annotation$iterator = this$static.sGraph.annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      annotation.isGrayedForSelection && (newRedrawNeeded = true);
      annotation.isGrayedForSelection = false;
    }
  }
  if (!!this$static.sGraph.annotationView && this$static.sGraph.annotationView.hasNonSelectedItems) {
    newRedrawNeeded = true;
    !!this$static.sGraph.annotationView && $createDrawObjects(this$static.sGraph.annotationView);
  }
  return newRedrawNeeded;
}

function $clearInnerBoundsClip(this$static, removeClipFromBackground, removeClipFromForeground){
  var endClip, geClip;
  if (this$static.graph.isHorizontal_0() && this$static.graph.getInnerBounds().height_0 > 16000)
    return;
  endClip = new CFShape;
  endClip.isClip = true;
  geClip = new GraphicElement;
  !geClip.shapeAry && (geClip.shapeAry = new ArrayList);
  $add_1(geClip.shapeAry, endClip);
  this$static.graph.clipPath = null;
  removeClipFromBackground?$addBackGraphicElement(this$static.graph, geClip):removeClipFromForeground?$addFrontGraphicElement_0(this$static.graph, geClip):$addGraphicElement_0(this$static.graph, geClip);
}

function $dataIsSorted(this$static){
  if (this$static.graph.data_0.lastRowSort != 0 && this$static.graph.data_0.lastRowSort != SORT_DATE)
    return true;
  return false;
}

function $dontUseTimeScale(this$static){
  var catScale, dateOutputFormat, newCatScale, scale;
  catScale = $getCategoryScale(this$static.sGraph);
  if (instanceOf(catScale, 56)) {
    $setCategoryScaleToNonTimeScale(this$static.sGraph);
    this$static.sGraph.hadTimeScaleBeforeSort = true;
    newCatScale = $getCategoryScale(this$static.sGraph);
    catScale.title_0 != null && $setTitle(newCatScale, catScale.title_0);
  }
  this$static.sGraph.neverUseTimeScale = true;
  !!this$static.sGraph.data_0 && $hasTimeData(this$static.sGraph.data_0) && this$static.sGraph.currentSort == 0 && $getChartOptionAsString(this$static.sGraph, 'total_sort') == null && !this$static.sGraph.data_0.isPeriodOverPeriod && $sortRows(this$static.sGraph.data_0, 0);
  dateOutputFormat = this$static.sGraph.dateOutputFormat;
  if (dateOutputFormat != null) {
    scale = $getCategoryScale(this$static.sGraph);
    instanceOf(scale, 36) && $setDateOutputFormat_0(castTo(scale, 36), dateOutputFormat);
  }
}

function $filterDataFromSrsShapes(this$static, shapeInfoList){
  var data_0, firstRowIndex, index_0, lastRowIndex, rowIndex, setList, shapeInfo, shapeInfo$iterator;
  if (shapeInfoList.array.length > 0 && !!this$static.sGraph && !!this$static.sGraph.data_0) {
    data_0 = this$static.sGraph.data_0;
    $hideAllRows(data_0);
    if (!$selectRowsFromSrsShapesForTime(this$static, shapeInfoList)) {
      firstRowIndex = $getFirstRowIndex(shapeInfoList);
      lastRowIndex = firstRowIndex;
      for (shapeInfo$iterator = new ArrayList$1(shapeInfoList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
        shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
        if (shapeInfo.cell) {
          rowIndex = $getCurRowIndex(shapeInfo.cell);
          rowIndex < firstRowIndex && (firstRowIndex = rowIndex);
          rowIndex > lastRowIndex && (lastRowIndex = rowIndex);
        }
      }
      setList = new ArrayList;
      for (index_0 = firstRowIndex; index_0 <= lastRowIndex; index_0++)
        $add_1(setList, valueOf(index_0));
      $setRowHiddenValueBulk(data_0, setList, false);
    }
    this$static.adjustDataAfterRowsHidden();
    this$static.graph.setNeedsFormat(true);
  }
}

function $forceScaleToPercent(this$static, primary){
  var valueScale;
  valueScale = $getValueScaleByNumber(this$static.sGraph, 0);
  primary || (valueScale = $getValueScaleByNumber(this$static.sGraph, 1));
  if (!!valueScale && !!valueScale.numberFormatter) {
    $applyValueFormatOverride(valueScale.numberFormatter, 'percentage');
    $setMultiplyBy100(valueScale.numberFormatter, false);
  }
}

function $format_0(this$static, rnd){
  var baseScale, rows_0, valueScale, valueScale2;
  this$static.sGraph = castTo(this$static.graph, 40);
  if (!this$static.graph.data_0 || $getNumRows(this$static.graph.data_0) == 0)
    return;
  if (this$static.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this$static.graph, this$static.graph.seriesShapes);
    this$static.graph.seriesShapes = new ArrayList;
  }
  valueScale = $getValueScale(this$static.sGraph);
  baseScale = $getCategoryScale(this$static.sGraph);
  valueScale2 = $getScaleByTypeNumber(this$static.sGraph, 0, 1);
  rows_0 = null;
  instanceOf(this$static, 151) && instanceOf(valueScale, 36)?(rows_0 = valueScale.rowsToDisplay):!!baseScale && (rows_0 = baseScale.rowsToDisplay);
  this$static.createSeriesInfoObjs(this$static.sGraph, rows_0, baseScale, valueScale, valueScale2);
  !!this$static.graph.dataLabel && $drawDataLabels(this$static.graph.dataLabel, rnd, $allowDataLabelRotate(this$static));
  this$static.graph.setNeedsFormat(false);
}

function $getAdditionalLegendItems(this$static){
  var i, i0, lii, liiList, sm;
  liiList = new ArrayList;
  if (!!this$static.graph.scaleMarkers && this$static.graph.scaleMarkers.size_1() > 0) {
    for (i0 = 0; i0 < this$static.graph.scaleMarkers.size_1(); i0++) {
      sm = castTo(this$static.graph.scaleMarkers.get_1(i0), 86);
      if (sm.type_0 == 1) {
        lii = $getLegendItem(sm, this$static.graph);
        !!lii && (liiList.array[liiList.array.length] = lii , true);
      }
    }
    for (i = 0; i < this$static.graph.scaleMarkers.size_1(); i++) {
      sm = castTo(this$static.graph.scaleMarkers.get_1(i), 86);
      if (sm.type_0 == 0) {
        lii = $getLegendItem(sm, this$static.graph);
        !!lii && (liiList.array[liiList.array.length] = lii , true);
      }
    }
  }
  if (liiList.array.length > 0)
    return liiList;
  return null;
}

function $getFirstCellFromList(shpList){
  var shapeInfo, shapeInfo$iterator;
  for (shapeInfo$iterator = new ArrayList$1(shpList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    if (shapeInfo.cell)
      return shapeInfo.cell;
  }
  return null;
}

function $getFirstRowIndex(shapeInfoList){
  var shapeInfo, shapeInfo$iterator;
  for (shapeInfo$iterator = new ArrayList$1(shapeInfoList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    if (shapeInfo.cell)
      return $getCurRowIndex(shapeInfo.cell);
  }
  return 0;
}

function $getJaggedInnerBoundsClipShape(this$static){
  var drawingOut, innerBounds, paddingDim, path, x_0, y_0;
  innerBounds = $duplicate_5(this$static.graph.getInnerBounds());
  if (!this$static.graph.isHorizontal_0()) {
    paddingDim = this$static.getPaddingY();
    if (this$static.shouldIncludePaddingInClip(paddingDim.width_0)) {
      $setY_0(innerBounds, innerBounds.y_0 + paddingDim.width_0);
      $setHeight(innerBounds, innerBounds.height_0 - paddingDim.width_0);
    }
  }
  this$static.graph.typeAttributes.isSymbolOverlay?$inflate(innerBounds, 10):this$static.graph.typeAttributes.isSpark?$inflate(innerBounds, 5):this$static.sGraph.isHorizontal && (innerBounds.width_0 = innerBounds.width_0 + 4 , innerBounds.x_0 -= 2);
  if (innerBounds.height_0 > 4096 || innerBounds.width_0 > 4096)
    return new CFPath_3(innerBounds);
  path = new CFPath;
  x_0 = innerBounds.x_0 + 1.5;
  y_0 = innerBounds.y_0;
  drawingOut = true;
  $add(path, new CFPathElement_0(0, x_0, y_0));
  if (this$static.sGraph.isHorizontal) {
    x_0 -= 2.5;
    while (y_0 <= innerBounds.y_0 + innerBounds.height_0) {
      if (drawingOut) {
        x_0 -= 3;
        y_0 += 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = false;
      }
       else {
        x_0 += 3;
        y_0 += 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = true;
      }
    }
    x_0 += 2.5;
  }
   else {
    $add(path, new CFPathElement_0(1, x_0 - 10, y_0));
    $add(path, new CFPathElement_0(1, x_0 - 10, innerBounds.y_0 + innerBounds.height_0 - 1.5));
    y_0 = innerBounds.y_0 + innerBounds.height_0;
  }
  $add(path, new CFPathElement_0(1, innerBounds.x_0, innerBounds.y_0 + innerBounds.height_0 - 1.5));
  drawingOut = true;
  if (this$static.sGraph.isHorizontal) {
    $add(path, new CFPathElement_0(1, innerBounds.x_0 - 10, innerBounds.y_0 + innerBounds.height_0 + 10));
    $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0 - 1.5, innerBounds.y_0 + innerBounds.height_0 + 10));
    x_0 = innerBounds.x_0 + innerBounds.width_0;
  }
   else {
    while (x_0 <= innerBounds.x_0 + innerBounds.width_0) {
      y_0 += 2.5;
      if (drawingOut) {
        x_0 += 3;
        y_0 += 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = false;
      }
       else {
        x_0 += 3;
        y_0 -= 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = true;
      }
      y_0 -= 2.5;
    }
  }
  $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0 - 1.5, innerBounds.y_0 + innerBounds.height_0));
  drawingOut = true;
  if (this$static.sGraph.isHorizontal) {
    while (y_0 >= innerBounds.y_0) {
      if (drawingOut) {
        x_0 += 3;
        y_0 -= 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = false;
      }
       else {
        x_0 -= 3;
        y_0 -= 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = true;
      }
    }
  }
   else {
    $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0 + 10, innerBounds.y_0 + innerBounds.height_0));
    $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0 + 10, innerBounds.y_0 + 1.5));
    y_0 = innerBounds.y_0;
  }
  $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0, innerBounds.y_0 + 1.5));
  drawingOut = true;
  if (this$static.sGraph.isHorizontal) {
    $add(path, new CFPathElement_0(1, innerBounds.x_0 + innerBounds.width_0, innerBounds.y_0 - 10));
    $add(path, new CFPathElement_0(1, innerBounds.x_0, innerBounds.y_0 - 10));
  }
   else {
    while (x_0 >= innerBounds.x_0) {
      if (drawingOut) {
        x_0 -= 3;
        y_0 -= 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = false;
      }
       else {
        x_0 -= 3;
        y_0 += 3;
        $add(path, new CFPathElement_0(1, x_0, y_0));
        drawingOut = true;
      }
    }
  }
  $add(path, new CFPathElement);
  return path;
}

function $getLabelPosition(isHorizontal){
  var labelPosition;
  labelPosition = 0;
  isHorizontal && (labelPosition = 4);
  return labelPosition;
}

function $getLastState(this$static, cell, getFullSeriesItem){
  return $getLastShapeForCell(this$static.sGraph, cell, getFullSeriesItem);
}

function $getPeriodOverPeriodVarianceData(this$static, data_0){
  var compColIndex, curCell, curVal, dupGrid, enVarianceText, i, initColCount, prevCell, prevVal, row, showPopVarValue, varCell, varColIndex, variance, varianceCol, varianceText;
  dupGrid = $clone(data_0);
  initColCount = $getNumCols(dupGrid);
  enVarianceText = getString('VARIANCE', 'en-US');
  varianceText = this$static.graph.getLocalizedString('VARIANCE');
  showPopVarValue = false;
  this$static.graph.getChartOptionAsString('show_pop_var_as_value') != null && isTrue(this$static.graph.getChartOptionAsString('show_pop_var_as_value')) && (showPopVarValue = true);
  for (compColIndex = 1; compColIndex < initColCount; compColIndex++) {
    varColIndex = $getNumCols(dupGrid);
    varianceCol = new ColRowInfo_4(null, enVarianceText, '', varColIndex);
    varianceCol.altName = varianceText;
    if (initColCount > 2) {
      $setName(varianceCol, enVarianceText + ' - ' + castTo(dupGrid.cols_0.get_1(compColIndex), 7).name_0);
      $setAltName(varianceCol, varianceText + ' - ' + $getName(castTo(dupGrid.cols_0.get_1(compColIndex), 7)));
    }
    varianceCol.curIndex = varColIndex;
    $getNumRows(dupGrid) > 0 && $setParentName(varianceCol, $getRow(dupGrid, 0).parentName);
    for (i = 0; i < $getNumRows(dupGrid); i++) {
      row = $getRow(dupGrid, i);
      curCell = castTo($get_1(row.cellMap, valueOf(0)), 16);
      prevCell = castTo($get_1(row.cellMap, valueOf(compColIndex)), 16);
      variance = 0;
      if (!!curCell && !!prevCell) {
        curVal = $getValue(curCell);
        prevVal = $getValue(prevCell);
        prevVal == 0?(variance = NaN):!isNaN(curVal) && !isNaN(prevVal) && this$static.graph.typeAttributes.isPeriodOverPeriod?showPopVarValue?(variance = curVal - prevVal):(variance = curVal / prevVal - 1):!isNaN(curVal) && !isNaN(prevVal) && !this$static.graph.typeAttributes.isPeriodOverPeriod && (showPopVarValue?(variance = prevVal - curVal):(variance = prevVal / curVal - 1));
        varCell = new Cell(variance);
        if ($getMetaDataCell(prevCell, 0)) {
          varCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
          $addMetaData_0(varCell, 0, $getMetaDataCell(prevCell, 0));
        }
        $put_0(row.cellMap, valueOf(varColIndex), varCell);
        $addItem_0(varianceCol, varCell, false, i);
        varCell.row = row;
      }
    }
    dupGrid.cols_0.add_1(varColIndex, varianceCol);
  }
  return dupGrid;
}

function $getSeriesIndexForDataObject(this$static, dataObject){
  var i, i0, shpInfo, srsInfo;
  if (dataObject != null) {
    for (i0 = 0; i0 < this$static.graph.seriesShapes.array.length; i0++) {
      srsInfo = castTo($get_2(this$static.graph.seriesShapes, i0), 19);
      if (srsInfo.fullSeriesInfo) {
        if (maskUndefined(srsInfo.fullSeriesInfo) === maskUndefined(dataObject))
          return i0;
        else if (instanceOf(dataObject, 37) && !!srsInfo.fullSeriesInfo.cell && srsInfo.fullSeriesInfo.cell.column == castTo(dataObject, 37).colInfo)
          return i0;
        else if (instanceOf(dataObject, 16) && !!srsInfo.fullSeriesInfo.cell && srsInfo.fullSeriesInfo.cell.column == castTo(dataObject, 16).column)
          return i0;
      }
       else if (instanceOf(dataObject, 37)) {
        if (!!this$static.graph.seriesShapes && this$static.graph.seriesShapes.array.length > i0 && $get_2(this$static.graph.seriesShapes, i0) != null && !!castTo($get_2(this$static.graph.seriesShapes, i0), 19).srsShapeList && castTo($get_2(this$static.graph.seriesShapes, i0), 19).srsShapeList.array.length > 0) {
          shpInfo = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, i0), 19).srsShapeList, 0), 18);
          if (!!shpInfo && !!shpInfo.cell && shpInfo.cell.column == castTo(dataObject, 37).colInfo)
            return i0;
          else if (!!shpInfo && !shpInfo.cell && castTo(dataObject, 37).type_0 == 6 && instanceOf(shpInfo, 25) && castTo(shpInfo, 25).groupedRow != -1)
            return i0;
        }
      }
    }
    for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
      srsInfo = castTo($get_2(this$static.graph.seriesShapes, i), 19);
      if ($indexOf_1(srsInfo.srsShapeList, dataObject, 0) != -1)
        return i;
    }
  }
  return -1;
}

function $getValueScaleFromKey(this$static, key){
  var keyLowerCase, linesBarsReversed, scale, scl, suffixlength, suffixlength0;
  scale = $getValueScaleByNumber(this$static.sGraph, 0);
  linesBarsReversed = false;
  $isLineBar(this$static.sGraph) && castTo(this$static.sGraph.handler, 111).barsOnLeftScale && (linesBarsReversed = true);
  scl = null;
  keyLowerCase = key.toLowerCase();
  keyLowerCase.indexOf('right') != -1?(scale = $getValueScaleByNumber(this$static.sGraph, 1)):keyLowerCase.indexOf('bar') != -1 && !linesBarsReversed?(scale = $getValueScaleByNumber(this$static.sGraph, 1)):keyLowerCase.indexOf('line') != -1 && linesBarsReversed?(scale = $getValueScaleByNumber(this$static.sGraph, 1)):(suffixlength0 = '_y'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength0, suffixlength0), '_y')?(scl = $getYScale(this$static.sGraph, false)):(suffixlength = '_x'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength, suffixlength), '_x') && (scl = $getXScale(this$static.sGraph, false))));
  !!scl && instanceOf(scl, 27) && (scale = castTo(scl, 27));
  return scale;
}

function $isAnimInfoNull(this$static){
  var srsInfo, srsInfo$iterator, srsShapeInfo, srsShapeInfo$iterator;
  for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 19);
    if (srsInfo.srsShapeList.array.length > 0) {
      for (srsShapeInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
        srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
        if (srsShapeInfo.animInfo)
          return false;
      }
    }
  }
  return true;
}

function $limitDataRows(this$static, data_0, rowLimit){
  if (data_0) {
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    if ($getNumRows(data_0) > rowLimit) {
      !this$static.originalData && (this$static.originalData = data_0);
      !!this$static.currentViewDataGrid && this$static.currentViewDataGrid != data_0 && this$static.currentViewDataGrid != this$static.originalData && $freeResources_11(this$static.currentViewDataGrid);
      this$static.currentViewDataGrid = $clone_0(data_0, rowLimit, $getNumCols(data_0));
      data_0 = this$static.currentViewDataGrid;
      !!this$static.sGraph.data_0 && this$static.sGraph.data_0 != this$static.originalData && this$static.sGraph.data_0 != data_0 && $freeResources_11(this$static.sGraph.data_0);
      this$static.sGraph.data_0 = data_0;
      $warnNotAllDataShown(this$static.graph.chart);
    }
    $setOriginalData(this$static, data_0);
  }
  return data_0;
}

function $limitDataSeries(this$static, data_0, seriesLimit){
  if (data_0) {
    if ($getNumCols(data_0) > seriesLimit) {
      !this$static.originalData && (this$static.originalData = data_0);
      !!this$static.currentViewDataGrid && this$static.currentViewDataGrid != data_0 && this$static.currentViewDataGrid != this$static.originalData && $freeResources_11(this$static.currentViewDataGrid);
      this$static.currentViewDataGrid = $clone_0(data_0, $getNumRows(data_0), seriesLimit);
      data_0 = this$static.currentViewDataGrid;
      !!this$static.sGraph.data_0 && this$static.sGraph.data_0 != this$static.originalData && this$static.sGraph.data_0 != data_0 && $freeResources_11(this$static.sGraph.data_0);
      this$static.sGraph.data_0 = data_0;
      $warnNotAllDataShown(this$static.graph.chart);
    }
    $setOriginalData(this$static, data_0);
  }
  return data_0;
}

function $limitNoGroupItemValueSeries(this$static, data_0, cellLimit){
  this$static.currentViewDataGrid = $cloneNoGroupItemValueSeries(data_0, cellLimit);
}

function $processChartOptions_3(this$static){
  var barHandler, barScale, cScale, firstBarSeriesCount, key, key$iterator, lineHandler, lineScale, minMax, neverUseTimeScaleVal, newValueScale, numRTSeries, scale, scale0, scale1, scale10, scale2, scale3, scale4, scale5, scale6, scale7, scale8, scale9, scaleX, scaleY, secondScale, secondValueScale, timeScaleFirstAndLastLabelsOnly, value_0, valueScale, widthOverride, secondScale_0, primary;
  barHandler = $getBarHandler(this$static.sGraph);
  lineHandler = $getLineHandler(this$static.sGraph);
  $setFontSizeOverride(this$static, 'default');
  $setForecastUIPanelState(this$static.sGraph);
  timeScaleFirstAndLastLabelsOnly = false;
  this$static.sGraph.neverUseTimeScale = false;
  this$static.neverUseTimeScaleOverridden = false;
  this$static.sGraph.hideAnnotations = false;
  this$static.sGraph.hideAnnotationList = false;
  this$static.sGraph.gridBkgColor = null;
  $processRunningTotalChartOptions(this$static);
  neverUseTimeScaleVal = this$static.graph.getChartOptionAsString('never_use_time_scale');
  neverUseTimeScaleVal != null && ($equals_2(neverUseTimeScaleVal.toLowerCase(), 'default') || $equals_2(neverUseTimeScaleVal.toLowerCase(), 'auto')) && (neverUseTimeScaleVal = null);
  if (neverUseTimeScaleVal != null) {
    if (!!this$static.graph.data_0 && this$static.graph.data_0.dateGrain != null && ($equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'QUARTER') || $equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'YEAR')))
    ;
    else {
      this$static.neverUseTimeScaleOverridden = true;
      if (isTrue(neverUseTimeScaleVal)) {
        $dontUseTimeScale(this$static);
        this$static.sGraph.hadTimeScaleBeforeSort = false;
      }
    }
  }
  if (!this$static.sGraph.neverUseTimeScale && this$static.graph.data_0.dateGrain != null && !this$static.neverUseTimeScaleOverridden && ($equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'WEEK') || $equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'MONTH') || $equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'QUARTER') || $equalsIgnoreCase(this$static.graph.data_0.dateGrain, 'YEAR'))) {
    this$static.graph.data_0.isPeriodOverPeriod && $sortRows(this$static.graph.data_0, 0);
    $dontUseTimeScale(this$static);
  }
  $processHideNonCurrentPopSeries(this$static);
  if (barHandler) {
    this$static.graph.graphType != 18 && this$static.graph.graphType != 20 && (barHandler.barWidthPercent = ($clinit_HandlerBar() , DEFAULT_BAR_WIDTH_PERCENT));
    barHandler.fixedBarWidth = -1;
    barHandler.nonStackedInteractivity = false;
    barHandler.variableWidth = false;
    if ($is100pctStacked(this$static.sGraph)) {
      valueScale = $getValueScaleByNumber(this$static.sGraph, 0);
      !!valueScale && $applyValueFormatOverride(valueScale.numberFormatter, 'percentage');
      (this$static.graph.hoverLabelText == null || this$static.graph.hoverLabelText.length == 0) && (this$static.graph.hoverLabelText = '%_CATEGORY_NAME %_SERIES_NAME : %_ORIG_VALUE');
    }
  }
  !!this$static.graph && !!this$static.graph.typeAttributes && this$static.graph.typeAttributes.isPeriodOverPeriod && (this$static.graph.hoverLabelText == null || this$static.graph.hoverLabelText.length == 0) && (this$static.graph.hoverLabelText = '%_SERIES_NAME : %_CATEGORY_NAME : %_ORIG_VALUE');
  $addOrRemoveSecondScale(this$static);
  $setValueScalePosForHorizontal(this$static);
  if (this$static.graph.hasChartOptions()) {
    valueScale = $getValueScaleByNumber(this$static.sGraph, 0);
    secondValueScale = $getValueScaleByNumber(this$static.sGraph, 1);
    $setScaleDateOutputFormat(this$static, 'default');
    scaleX = $getXScale(this$static.sGraph, false);
    scaleY = $getYScale(this$static.sGraph, false);
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'grid_bkg_color':
          this$static.sGraph.gridBkgColor = new CFColor_2(value_0);
          break;
        case 'outline_style':
          this$static.sGraph.outlineStyle = isTrue(value_0);
          break;
        case 'hide_annotations':
          this$static.sGraph.hideAnnotations = isTrue(value_0);
          break;
        case 'hide_annotation_list':
          this$static.sGraph.hideAnnotationList = isTrue(value_0);
          break;
        case 'bar_width_percentage':
        case 'width_percentage':
        case 'height_percentage':
        case 'percent_width':
          !!barHandler && getInt(value_0, 0) > 0 && (barHandler.barWidthPercentOverride = getInt(value_0, 0));
          break;
        case 'fixed_bar_width':
        case 'fixed_bar_height':
          !!barHandler && getInt(value_0, -1) > 0 && (barHandler.fixedBarWidth = getInt(value_0, -1));
          break;
        case 'line_width':
          !!lineHandler && (widthOverride = getInt(value_0, 2) , widthOverride < 1 && (widthOverride = 1) , widthOverride > 8 && (widthOverride = 8) , lineHandler.lineWidthOverride = widthOverride , undefined);
          break;
        case 'vert_nonstacked_interactivity':
        case 'nonstacked_interactivity':
          !!barHandler && (barHandler.nonStackedInteractivity = isTrue(value_0));
          break;
        case 'variable_width':
        case 'variable_height':
          !!barHandler && (barHandler.variableWidth = isTrue(value_0));
          break;
        case 'category_sort_method':
          !!barHandler && (value_0 != null?$startsWith(value_0.toLowerCase(), 'a')?(barHandler.categorySortType = ($clinit_HandlerBar() , CAT_SORT_ASC)):$startsWith(value_0.toLowerCase(), 'd')?(barHandler.categorySortType = ($clinit_HandlerBar() , CAT_SORT_DSC)):(barHandler.categorySortType = 0):(barHandler.categorySortType = 0));
          break;
        case 'datalabel_position':
          $setPositionByString($getOrCreateDataLabel(this$static.graph), value_0.toLowerCase());
          break;
        case 'font_size':
          $setFontSizeOverride(this$static, value_0.toLowerCase());
          break;
        case 'first_bar_series_count':
          firstBarSeriesCount = getInt(value_0, 1);
          firstBarSeriesCount < 1 && (firstBarSeriesCount = 1);
          !!barHandler && (barHandler.groupedStackedFirstBarCount = firstBarSeriesCount);
          break;
        case 'grp_legend_text':
          !!barHandler && (barHandler.nestedGroupText = ($clinit_StrUtil() , entityDecodeString(value_0)));
          break;
        case 'hide_grp_in_legend':
          !!barHandler && $setHideGroupInLegend(barHandler, isTrue(value_0));
          break;
        case 'num_rt_series':
          numRTSeries = getInt(value_0, 0);
          numRTSeries > 0 && $setNumRTSeries(this$static, numRTSeries);
          break;
        case 'x_cat_scale_pos':
          !!scaleX && instanceOf(scaleX, 36) && $setPosition(scaleX, $getPositionForString(value_0));
          break;
        case 'x_time_scale_pos':
          !!scaleX && instanceOf(scaleX, 56) && $setPosition(scaleX, $getPositionForString(value_0));
          break;
        case 'title_y':
        case 'cat_scale_y_title':
          scale0 = $getYScale(this$static.sGraph, false);
          this$static.sGraph.isHorizontal && (scale0 = $getXScale(this$static.sGraph, false));
          !!scale0 && (scale0.title_0 = value_0);
          break;
        case 'title_y_right':
          scale0 = $getYScale(this$static.sGraph, true);
          this$static.sGraph.isHorizontal && (scale0 = $getXScale(this$static.sGraph, true));
          !!scale0 && (scale0.title_0 = value_0);
          break;
        case 'title_x':
        case 'cat_scale_x_title':
          scale0 = $getXScale(this$static.sGraph, false);
          this$static.sGraph.isHorizontal && (scale0 = $getYScale(this$static.sGraph, false));
          !!scale0 && (scale0.title_0 = value_0);
          break;
        case 'title_line':
          if (this$static.sGraph.isHorizontal) {
            lineScale = $getXScale(this$static.sGraph, false);
            this$static.graph.graphType == 30 && (lineScale = $getXScale(this$static.sGraph, true));
            !!lineScale && (lineScale.title_0 = value_0);
          }
           else {
            lineScale = $getYScale(this$static.sGraph, false);
            this$static.graph.graphType == 26 && (lineScale = $getYScale(this$static.sGraph, true));
            !!lineScale && (lineScale.title_0 = value_0);
          }

          break;
        case 'title_bar':
          if (this$static.sGraph.isHorizontal) {
            barScale = $getXScale(this$static.sGraph, true);
            this$static.graph.graphType == 30 && (barScale = $getXScale(this$static.sGraph, false));
            !!barScale && (barScale.title_0 = value_0);
          }
           else {
            barScale = $getYScale(this$static.sGraph, true);
            this$static.graph.graphType == 26 && (barScale = $getYScale(this$static.sGraph, false));
            !!barScale && (barScale.title_0 = value_0);
          }

          break;
        case 'total_sort':
          $supportsSortingFromScale(this$static.sGraph) && ($equalsIgnoreCase(value_0, 'none')?this$static.sGraph.hadTimeScaleBeforeSort && $setCategoryScaleToCorrectScaleType(this$static.sGraph):$dontUseTimeScale(this$static));
          break;
        case 'sync_line_and_bar_scales':
          isTrue(value_0) && $syncAndReplaceValueScales(this$static, true);
          break;
        case 'hide_second_scale':
          secondScale = $getValueScaleByNumber(this$static.sGraph, 1);
          !!secondScale && $setHiddenLabels(secondScale, isTrue(value_0));
          break;
        case 'sync_zero_lines':
          secondScale_0 = $getValueScaleByNumber(this$static.sGraph, 1);
          !!secondScale_0 && $setSyncedZeroLineState(secondScale_0, isTrue(value_0));
          primary = $getValueScaleByNumber(this$static.sGraph, 0);
          !!primary && $setSyncedZeroLineState(primary, isTrue(value_0));
          break;
        case 'include_zero_y':
        case 'include_zero_line':
        case 'include_zero_y_right':
        case 'include_zero_bar':
        case 'include_zero_x':
          $setAlwaysIncludeZero(this$static, key, value_0);
          break;
        case 'cat_scale_show_labels':
        case 'val_scale_show_labels':
        case 'val_scale_show_labels_line':
        case 'val_scale_show_labels_right':
        case 'val_scale_show_labels_bar':
        case 'val_scale_show_labels_y':
        case 'val_scale_show_labels_x':
        case 'gantt_time_scale_show_labels':
          this$static.setShowScaleLabels(key, value_0);
          break;
        case 'cat_scale_justification':
          $setCatScaleJustification(this$static, 'cat_scale_justification', value_0);
          break;
        case 'cat_scale_date_output_format':
          (!this$static.graph.data_0.isFiscalCalendar || !$equals_2(this$static.graph.data_0.dateGrain, 'QUARTER') && !$equals_2(this$static.graph.data_0.dateGrain, 'MONTH')) && $setScaleDateOutputFormat(this$static, value_0);
          break;
        case 'max_label_length':
          scale1 = $getCategoryScale(this$static.sGraph);
          !!scale1 && (instanceOf(scale1, 36)?$setMaxCatLen(castTo(scale1, 36), getInt(value_0, -1)):instanceOf(scale1, 95) && $setMaxCatLen_0(castTo(scale1, 95), getInt(value_0, -1)));
          break;
        case 'max_rotated_label_length':
          scale2 = $getCategoryScale(this$static.sGraph);
          !!scale2 && instanceOf(scale2, 36) && $setMaxCatLenRotated(castTo(scale2, 36), getInt(value_0, 30));
          break;
        case 'horz_cat_fixed_width':
          scale3 = $getCategoryScale(this$static.sGraph);
          !!scale3 && instanceOf(scale3, 36) && this$static.sGraph.isHorizontal && $setHorzCatFixedWidth(castTo(scale3, 36), getInt(value_0, -1));
          break;
        case 'cat_scale_fixed_margin':
          scale4 = $getCategoryScale(this$static.sGraph);
          !!scale4 && instanceOf(scale4, 36) && this$static.sGraph.isHorizontal && $setHorzCatFixedMargin(castTo(scale4, 36), getInt(value_0, -1));
          break;
        case 'show_data_table':
          scale5 = $getCategoryScale(this$static.sGraph);
          !!scale5 && instanceOf(scale5, 36) && !this$static.sGraph.isHorizontal && $setShowDataTable(castTo(scale5, 36), isTrue(value_0));
          break;
        case 'show_extra_categories':
          scale6 = $getCategoryScale(this$static.sGraph);
          !!scale6 && instanceOf(scale6, 36) && !this$static.sGraph.isHorizontal && $setGroupedScaleCombined(castTo(scale6, 36), $equalsIgnoreCase(value_0, 'Below'));
          break;
        case 'hide_chart_data':
          scale7 = $getCategoryScale(this$static.sGraph);
          !!scale7 && instanceOf(scale7, 36) && !this$static.sGraph.isHorizontal && $setHideChartData(castTo(scale7, 36), isTrue(value_0));
          break;
        case 'auto_abbrev_table_data':
          scale8 = $getCategoryScale(this$static.sGraph);
          !!scale8 && instanceOf(scale8, 36) && !this$static.sGraph.isHorizontal && $setAutoAbbrevTableData(castTo(scale8, 36), isTrue(value_0));
          break;
        case 'label_format_y':
        case 'label_format_x':
        case 'label_format_line':
        case 'label_format_y_right':
        case 'label_format_bar':
          scale9 = $getValueScaleFromKey(this$static, key);
          !!scale9 && ($applyValueFormatOverride(scale9.numberFormatter, value_0) , !!scale9.numberFormatterForScaleLabels && $applyValueFormatOverride(scale9.numberFormatterForScaleLabels, value_0));
          $equals_2(key, 'label_format_y') && this$static.sGraph.isHorizontal && (scale10 = $getValueScaleFromKey(this$static, 'label_format_x') , !!scale10 && ($applyValueFormatOverride(scale10.numberFormatter, value_0) , !!scale10.numberFormatterForScaleLabels && $applyValueFormatOverride(scale10.numberFormatterForScaleLabels, value_0)));
          break;
        case 'label_interval_x':
        case 'label_interval_y':
          scale = $getCategoryScale(this$static.sGraph);
          !!scale && instanceOf(scale, 36) && $setLabelInterval(castTo(scale, 36), getInt(value_0, 0));
          break;
        case 'divide_value_scale_by_y':
        case 'divide_value_scale_by_x':
        case 'divide_value_scale_by':
        case 'divide_value_scale_by_y_right':
        case 'divide_value_scale_by_bar':
        case 'divide_value_scale_by_line':
          $setDivideScaleBy_0(this$static, key, value_0);
          break;
        case 'decimal_places':
        case 'decimal_places_line':
        case 'decimal_places_right':
        case 'decimal_places_bar':
        case 'decimal_places_y':
        case 'decimal_places_x':
          $setScaleDecimalPlaces(this$static, key, value_0);
          break;
        case 'negative_numbers':
        case 'negative_numbers_line':
        case 'negative_numbers_right':
        case 'negative_numbers_bar':
        case 'negative_numbers_y':
        case 'negative_numbers_x':
          $setNegativeFormat(this$static, key, value_0);
          $equals_2(key, 'negative_numbers') && $applyNegativeFormat(this$static.graph.numberFormatter, value_0);
          break;
        case 'value_scale_min':
        case 'value_scale_min_line':
        case 'value_scale_min_right':
        case 'value_scale_min_bar':
        case 'value_scale_min_y':
        case 'value_scale_min_x':
          $setScaleMin(this$static, key, value_0);
          break;
        case 'value_scale_max':
        case 'value_scale_max_line':
        case 'value_scale_max_right':
        case 'value_scale_max_bar':
        case 'value_scale_max_y':
        case 'value_scale_max_x':
          $setScaleMax(this$static, key, value_0);
          break;
        case 'divisions_y':
        case 'divisions_line':
        case 'divisions_y_right':
        case 'divisions_bar':
        case 'divisions_x':
          $setScaleDivisions(this$static, key, value_0);
          $equals_2(key, 'divisions_y') && this$static.sGraph.isHorizontal && $setScaleDivisions(this$static, 'divisions_x', value_0);
          break;
        case 'log_scale_y':
        case 'log_scale_line':
          valueScale = this$static.handleLogScaleChartOption(valueScale, value_0);
          break;
        case 'log_scale_y_right':
        case 'log_scale_bar':
          if (isTrue(value_0)) {
            secondValueScale = $getValueScaleByNumber(this$static.sGraph, 1);
            if (secondValueScale) {
              $removeScale(this$static.sGraph, secondValueScale);
              newValueScale = new ValueScaleLog(secondValueScale);
              $addScale_0(this$static.sGraph, newValueScale);
              $syncAndReplaceValueScales(this$static, valueScale.syncedScales);
              minMax = $getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0);
              !!minMax && $removeScale(this$static.sGraph, minMax);
            }
          }
           else if (!!secondValueScale && instanceOf(secondValueScale, 73)) {
            $removeScale(this$static.sGraph, secondValueScale);
            newValueScale = new ValueScale_0(secondValueScale);
            $addScale_0(this$static.sGraph, newValueScale);
            $syncAndReplaceValueScales(this$static, valueScale.syncedScales);
            minMax = $getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0);
            !!minMax && $removeScale(this$static.sGraph, minMax);
          }

          break;
        case 'log_scale_x':
          if (instanceOf(this$static, 121)) {
            cScale = $getCategoryScale(this$static.sGraph);
            if (instanceOf(cScale, 27) && !instanceOf(cScale, 56)) {
              if (isTrue(value_0)) {
                $removeScale(this$static.sGraph, cScale);
                newValueScale = new ValueScaleLog(castTo(cScale, 27));
                $setType_1(newValueScale, ST_CATEGORY);
                $addScale(this$static.sGraph, 1, newValueScale);
              }
               else if (instanceOf(valueScale, 73)) {
                $removeScale(this$static.sGraph, cScale);
                newValueScale = new ValueScale_0(castTo(cScale, 27));
                $setType_1(newValueScale, ST_CATEGORY);
                $addScale(this$static.sGraph, 1, newValueScale);
              }
            }
          }

          break;
        case 'remove_hints':
          this$static.suppressHints = isTrue(value_0);
          break;
        case 'hint_style':
          this$static.tooltipHints = $equalsIgnoreCase(value_0, 'tooltip');
          break;
        case 'hover_use_scale_format':
          $setHoverUseScaleFormat(this$static, value_0);
          break;
        case 'hover_use_scale_abbrev':
          $setHoverUseScaleAbbreviation(this$static, value_0);
          break;
        case 'datalabel_use_scale_format':
          $setDataLabelUseScaleFormat(this$static, value_0);
          break;
        case 'datalabel_use_scale_abbrev':
          $setDataLabelUseScaleAbbreviation(this$static, value_0);
          break;
        case 'zero_line_color':
          !!valueScale && $setZeroLineColor(valueScale, new CFColor_2(value_0));
          break;
        case 'zero_line_color_x':
          !!scaleX && instanceOf(scaleX, 27) && $setZeroLineColor(castTo(scaleX, 27), new CFColor_2(value_0));
          break;
        case 'zero_line_color_y':
          !!scaleY && instanceOf(scaleY, 27) && $setZeroLineColor(castTo(scaleY, 27), new CFColor_2(value_0));
          break;
        case 'zero_line_width':
          if (valueScale) {
            this$static.graph.getChartOptionAsString('zero_line_width_y') != null && (value_0 = this$static.graph.getChartOptionAsString('zero_line_width_y'));
            $setZeroLineWidth(valueScale, getInt(value_0, 1));
          }

          break;
        case 'zero_line_width_y':
          !!valueScale && $setZeroLineWidth(valueScale, getInt(value_0, 1));
          break;
        case 'zero_line_width_x':
          !!scaleX && instanceOf(scaleX, 27) && $setZeroLineWidth(castTo(scaleX, 27), getInt(value_0, 1));
          break;
        case 'hide_non_current_pop_series':
          this$static.graph.hidePoPVarNonCurrent = isTrue(value_0);
          break;
        case 'show_pop_var_as_value':
          isTrue(value_0)?(this$static.graph.popVarDisplayType = 1):(this$static.graph.popVarDisplayType = 0);
          break;
        case 'show_first_last_labels_time_scale':
          timeScaleFirstAndLastLabelsOnly = true;
          break;
        case 'remove_forecast_ctrls':
          this$static.sGraph.hideForecastUI = isTrue(value_0);
      }
    }
  }
  this$static.graph.typeAttributes.isStream && this$static.sGraph.isHorizontal && !!this$static.graph.dataLabel && this$static.graph.getChartOptionAsString('datalabel_position') == null && (this$static.graph.dataLabel.position = getPositionByString('center') , undefined);
  if (this$static.graph.typeAttributes.isPeriodOverPeriod && !this$static.graph.typeAttributes.isPoPVariance) {
    isTrue('true') && $syncAndReplaceValueScales(this$static, true);
    secondScale = $getValueScaleByNumber(this$static.sGraph, 1);
    !!secondScale && $setHiddenLabels(secondScale, isTrue('true'));
    $syncValueScaleManualMinMaxValues(this$static);
  }
  $hasTimeScale(this$static.sGraph) && $setFirstAndLastLabelOnly($getTimeScale(this$static.sGraph), timeScaleFirstAndLastLabelsOnly);
}

function $processHideNonCurrentPopSeries(this$static){
  var column, compColIndex, dataGrid, enVarianceText, hideNonCurrentPopSeries;
  hideNonCurrentPopSeries = false;
  this$static.graph.getChartOptionAsString('hide_non_current_pop_series') != null && isTrue(this$static.graph.getChartOptionAsString('hide_non_current_pop_series')) && (hideNonCurrentPopSeries = true);
  if (hideNonCurrentPopSeries && this$static.graph.typeAttributes.isPeriodOverPeriod && this$static.graph.typeAttributes.isPoPVariance) {
    enVarianceText = getString('VARIANCE', 'en-US');
    dataGrid = this$static.graph.data_0;
    for (compColIndex = 1; compColIndex < $getNumCols(dataGrid); compColIndex++) {
      column = castTo(dataGrid.cols_0.get_1(compColIndex), 7);
      if ($startsWith(column.name_0, enVarianceText))
        break;
      column.hidden = true;
    }
    $recalcVisibleColumns(dataGrid);
  }
}

function $processRunningTotalChartOptions(this$static){
  if (this$static.graph.typeAttributes.isRunningTotal || $hasRunningTotals(this$static.graph.data_0)) {
    $setNumRTSeriesFromOption(this$static);
    $applyRunningTotalToDataGrid(this$static);
  }
}

function $removeItemsFromDrawArray(this$static){
  var ge, geAry, i;
  geAry = this$static.graph.geAry;
  for (i = geAry.size_1() - 1; i >= 0; i--) {
    ge = castTo(geAry.get_1(i), 12);
    !!ge && ge.dataObject != null && geAry.remove_2(i);
  }
}

function $selectAnnotation(this$static){
  var annotation, annotation$iterator, annotation$iterator0, annotations;
  if (this$static.hoverData != null && this$static.hoverData != null && instanceOf(this$static.hoverData, 3) && castTo(this$static.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this$static.hoverData, 3), 0), 46)) {
    for (annotation$iterator0 = this$static.sGraph.annotations.iterator(); annotation$iterator0.hasNext_0();) {
      annotation = castTo(annotation$iterator0.next_1(), 46);
      annotation.isGrayedForSelection = true;
    }
    annotations = castTo(this$static.hoverData, 42);
    for (annotation$iterator = annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      annotation.isGrayedForSelection = false;
    }
    !!this$static.sGraph.annotationView && $createDrawObjects(this$static.sGraph.annotationView);
  }
}

function $selectRowsFromSrsShapesForTime(this$static, shapeInfoList){
  var cell, count, data_0, endTime, i, row, rowTime, rows_0, setList, shapeInfo, shapeInfo$iterator, startTime, time;
  data_0 = this$static.sGraph.data_0;
  if (this$static.sGraph.neverUseTimeScale || this$static.sGraph.graphType == 26 || data_0.dateGrain != null && ($equals_2(data_0.dateGrain, 'MONTH') || $equals_2(data_0.dateGrain, 'QUARTER') || $equals_2(data_0.dateGrain, 'YEAR')))
    return false;
  startTime = {l:3817472, m:2870337, h:5};
  endTime = 0;
  for (shapeInfo$iterator = new ArrayList$1(shapeInfoList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    cell = shapeInfo.cell;
    if (cell) {
      time = cell.row.timeMS;
      if (compare_22(time, 0) == 0)
        break;
      compare_22(time, startTime) < 0 && (startTime = time);
      compare_22(time, endTime) > 0 && (endTime = time);
    }
  }
  if (compare_22(startTime, 0) != 0 && compare_22(endTime, 0) != 0 && !!this$static.sGraph.data_0) {
    count = $getNumRows(data_0);
    rows_0 = data_0.rows_0;
    setList = new ArrayList;
    for (i = 0; i < count; i++) {
      row = castTo(rows_0.get_1(i), 7);
      rowTime = row.timeMS;
      compare_22(rowTime, startTime) >= 0 && compare_22(rowTime, endTime) <= 0 && $add_1(setList, valueOf(i));
    }
    $setRowHiddenValueBulk(data_0, setList, false);
    return true;
  }
  return false;
}

function $setAlwaysIncludeZero(this$static, key, value_0){
  var scale, theValue;
  scale = $getValueScaleFromKey(this$static, key);
  theValue = isTrue(value_0) || isYes(value_0);
  !!scale && (scale.alwaysIncludeZero = theValue);
}

function $setCatScaleJustification(this$static, key, value_0){
  var keyLowerCase, scale, suffixlength, suffixlength0, valLower;
  scale = (keyLowerCase = key.toLowerCase() , keyLowerCase.indexOf('cat_') != -1?$getCategoryScale(this$static.sGraph):(suffixlength0 = '_y'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength0, suffixlength0), '_y')?$getYScale(this$static.sGraph, false):(suffixlength = '_x'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength, suffixlength), '_x')?$getXScale(this$static.sGraph, false):$getValueScaleFromKey(this$static, key))));
  if (!!scale && instanceOf(scale, 36) && this$static.sGraph.isHorizontal) {
    valLower = value_0.toLowerCase();
    $equals_2(valLower, 'left')?(castTo(scale, 36).hAlign = 0 , undefined):$equals_2(valLower, 'right')?$setHAlign(castTo(scale, 36), HALIGN_RIGHT):$equals_2(valLower, 'center')?$setHAlign(castTo(scale, 36), HALIGN_CENTER):(castTo(scale, 36).hAlign = -1 , undefined);
  }
}

function $setData_1(this$static, dataGrid){
  $setDisplayLimit(this$static.sGraph, 0);
  $setCategoryScaleToCorrectScaleType(this$static.sGraph);
  $setColIndicesIfNeeded(dataGrid);
}

function $setDataLabelUseScaleAbbreviation(this$static, value_0){
  var catScale, scale, state;
  state = isTrue(value_0);
  scale = $getValueScaleByNumber(this$static.sGraph, 0);
  !!scale && (scale.datalabelUseScaleAbbreviation = state);
  scale = $getValueScaleByNumber(this$static.sGraph, 1);
  !!scale && (scale.datalabelUseScaleAbbreviation = state);
  catScale = $getCategoryScale(this$static.sGraph);
  if (instanceOf(catScale, 27)) {
    scale = castTo(catScale, 27);
    scale.datalabelUseScaleAbbreviation = state;
  }
}

function $setDataLabelUseScaleFormat(this$static, value_0){
  var catScale, scale, state;
  state = isTrue(value_0);
  scale = $getValueScaleByNumber(this$static.sGraph, 0);
  !!scale && (scale.datalabelUseScaleFormat = state);
  scale = $getValueScaleByNumber(this$static.sGraph, 1);
  !!scale && (scale.datalabelUseScaleFormat = state);
  catScale = $getCategoryScale(this$static.sGraph);
  if (instanceOf(catScale, 27)) {
    scale = castTo(catScale, 27);
    scale.datalabelUseScaleFormat = state;
  }
}

function $setDivideScaleBy_0(this$static, key, value_0){
  var numberFormatter, scale;
  scale = $getValueScaleFromKey(this$static, key);
  if (scale) {
    numberFormatter = scale.numberFormatter;
    $setDivideScaleBy(numberFormatter, value_0, true);
  }
}

function $setFontSizeOverride(this$static, value_0){
  var fontSize, scale, scale$iterator;
  fontSize = 11;
  $equals_2(value_0, 'largest')?(fontSize = 18):$equals_2(value_0, 'larger')?(fontSize = 14):$equals_2(value_0, 'smaller') && (fontSize = 10);
  for (scale$iterator = new ArrayList$1(this$static.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    $setSize_0(scale.labelFont, fontSize);
  }
  !!$getLegend(this$static.graph) && $setSize_0($getLegend(this$static.graph).font_0, fontSize);
  !!this$static.graph.dataLabel && $setSize_0(this$static.graph.dataLabel.font_0, fontSize);
  !!this$static.graph.hoverLabel && $setSize_0(this$static.graph.hoverLabel.font_0, fontSize);
}

function $setGraph_0(this$static, graph){
  this$static.graph = graph;
  instanceOf(graph, 40) && (this$static.sGraph = castTo(graph, 40));
}

function $setHoverData_0(this$static, data_0, rnd){
  var annotation, catScale, hoverFromAnnotation, redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this$static.hoverData) !== maskUndefined(data_0)) {
    if ($usingCardBus(this$static.graph.chart) && ($equals_2('legacy', this$static.graph.data_0.originalDataType) || this$static.graph.data_0.isPeriodOverPeriod) && instanceOf(data_0, 37))
      return false;
    hoverFromAnnotation = false;
    this$static.hoverData != null && instanceOf(this$static.hoverData, 3) && castTo(this$static.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this$static.hoverData, 3), 0), 46) && data_0 != null && instanceOf(data_0, 7) && (hoverFromAnnotation = true);
    instanceOf(this$static.hoverData, 86) && $setToHoverState(castTo(this$static.hoverData, 86), false);
    this$static.hoverData = data_0;
    $clearScaleHover(this$static.sGraph, rnd);
    if (this$static.hoverData != null && instanceOf(this$static.hoverData, 3) && castTo(this$static.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this$static.hoverData, 3), 0), 46)) {
      annotation = castTo($get_2(castTo(this$static.hoverData, 3), 0), 46);
      $selectAnnotation(this$static);
      $setHoverData(this$static.sGraph, annotation.row, rnd);
      hoverFromAnnotation = true;
    }
     else if (this$static.hoverData != null && instanceOf(this$static.hoverData, 86)) {
      $setToHoverState(castTo(this$static.hoverData, 86), true);
      redrawNeeded = true;
    }
     else if (this$static.hoverData != null && instanceOf(this$static.hoverData, 27)) {
      redrawNeeded = $setHoverEffects(this$static, null, rnd);
      redrawNeeded = redrawNeeded | $setHoverEffects_9(castTo(this$static.hoverData, 27), this$static.hoverData, -1);
    }
     else if (this$static.hoverData != null && instanceOf(this$static.hoverData, 36)) {
      redrawNeeded = $setHoverEffects(this$static, null, rnd);
      redrawNeeded = redrawNeeded | $setHoverEffects_8(castTo(this$static.hoverData, 36), this$static.hoverData, rnd);
    }
     else if (this$static.hoverData != null && instanceOf(this$static.hoverData, 16)) {
      redrawNeeded = $setHoverEffects(this$static, this$static.hoverData, rnd);
      catScale = $getCategoryScale(this$static.sGraph);
      !!catScale && instanceOf(catScale, 36) && $getShowDataTable(castTo(catScale, 36), false) && (redrawNeeded = redrawNeeded | $setHoverEffects_8(castTo(catScale, 36), this$static.hoverData, rnd));
    }
     else {
      data_0 != null && !instanceOf(data_0, 36) && !instanceOf(this$static, 151) && !instanceOf(this$static, 162) && $hideDataLabels_0(this$static.graph);
      redrawNeeded = $setHoverEffects(this$static, this$static.hoverData, rnd);
      data_0 == null && !instanceOf(this$static, 151) && !instanceOf(this$static, 162) && $showDataLabels_0(this$static.graph);
    }
    !(this$static.hoverData != null && instanceOf(this$static.hoverData, 3) && castTo(this$static.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this$static.hoverData, 3), 0), 46)) && !hoverFromAnnotation && (redrawNeeded = $clearAnnotationSelectionsIfNeeded(this$static, redrawNeeded));
  }
   else 
    (data_0 == null || !(this$static.hoverData != null && instanceOf(this$static.hoverData, 3) && castTo(this$static.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this$static.hoverData, 3), 0), 46))) && (redrawNeeded = $clearAnnotationSelectionsIfNeeded(this$static, false));
  return redrawNeeded;
}

function $setHoverEffects(this$static, hoverData, rnd){
  var projInfo, redrawNeeded;
  redrawNeeded = false;
  if ($hasInteractions(this$static.graph) && (hoverData == null || !instanceOf(hoverData, 87))) {
    $setHoverEffectsForASeriesItem(this$static, hoverData, rnd);
    redrawNeeded = true;
  }
   else if (hoverData != null && instanceOf(hoverData, 87)) {
    projInfo = castTo(hoverData, 87);
    !!projInfo.srsShapeInfo && $setHoverEffectsForASeriesItem(this$static, projInfo.srsShapeInfo, rnd);
    this$static.handlerSpecificHoverTextOnly(hoverData);
    redrawNeeded = true;
  }
   else {
    this$static.handlerSpecificHoverTextOnly(hoverData);
    !$hasInteractions(this$static.graph) && !this$static.graph.rnd.supportsNativeHover() && (redrawNeeded = true);
  }
  return redrawNeeded;
}

function $setHoverEffectsForASeriesItem(this$static, hoverData, rnd){
  var depComp, depComp$iterator, index_0, scale, scale$iterator;
  $removeItemsFromDrawArray(this$static);
  $removeHints(this$static.graph);
  index_0 = $getSeriesIndexForDataObject(this$static, hoverData);
  for (scale$iterator = new ArrayList$1(this$static.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.setHoverEffects_1(hoverData, rnd, index_0);
  }
  this$static.handlerSpecificHoverEffects(hoverData, rnd, index_0);
  if (this$static.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this$static.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.setHoverEffects(hoverData, rnd);
    }
  }
}

function $setHoverUseScaleAbbreviation(this$static, value_0){
  var catScale, scale, state;
  state = isTrue(value_0);
  scale = $getValueScaleByNumber(this$static.sGraph, 0);
  !!scale && (scale.hoverUseScaleAbbreviation = state);
  scale = $getValueScaleByNumber(this$static.sGraph, 1);
  !!scale && (scale.hoverUseScaleAbbreviation = state);
  catScale = $getCategoryScale(this$static.sGraph);
  if (instanceOf(catScale, 27)) {
    scale = castTo(catScale, 27);
    scale.hoverUseScaleAbbreviation = state;
  }
}

function $setHoverUseScaleFormat(this$static, value_0){
  var catScale, scale, state;
  state = isTrue(value_0);
  scale = $getValueScaleByNumber(this$static.sGraph, 0);
  !!scale && (scale.hoverUseScaleFormat = state);
  scale = $getValueScaleByNumber(this$static.sGraph, 1);
  !!scale && (scale.hoverUseScaleFormat = state);
  catScale = $getCategoryScale(this$static.sGraph);
  if (instanceOf(catScale, 27)) {
    scale = castTo(catScale, 27);
    scale.hoverUseScaleFormat = state;
  }
}

function $setNegativeFormat(this$static, key, value_0){
  var numberFormatter, scale;
  scale = $getValueScaleFromKey(this$static, key);
  if (scale) {
    numberFormatter = scale.numberFormatter;
    $applyNegativeFormat(numberFormatter, value_0);
  }
}

function $setNumRTPrimaryScale(this$static, numRTPrimary, ignoreScale){
  var col, i, primaryCount;
  if (numRTPrimary > 0) {
    primaryCount = 0;
    for (i = 0; i < $getNumCols(this$static.graph.data_0); i++) {
      col = $getColumn(this$static.graph.data_0, i);
      if (ignoreScale || !col.usesSecondaryScale) {
        if (primaryCount < numRTPrimary) {
          col.isRunningTotal = true;
          ++primaryCount;
        }
      }
       else {
        break;
      }
    }
  }
}

function $setNumRTSeries(this$static, numRTSeries){
  var col, i, srsCount;
  if (numRTSeries > 0) {
    srsCount = 0;
    for (i = 0; i < $getNumCols(this$static.graph.data_0); i++) {
      col = $getColumn(this$static.graph.data_0, i);
      if (srsCount < numRTSeries) {
        col.isRunningTotal = true;
        ++srsCount;
      }
       else {
        col.isRunningTotal = false;
      }
    }
  }
}

function $setNumRTSeriesFromOption(this$static){
  var numRTSeries;
  if (this$static.graph.hasChartOptions() && $chartOptionHasAValue(this$static.graph, 'num_rt_series')) {
    numRTSeries = getInt(this$static.graph.getChartOptionAsString('num_rt_series'), 0);
    numRTSeries > 0 && $setNumRTSeries(this$static, numRTSeries);
  }
}

function $setOriginalData(this$static, data_0){
  !this$static.originalData && (this$static.originalData = data_0);
  !!this$static.sGraph.data_0 && this$static.sGraph.data_0 != this$static.originalData && this$static.sGraph.data_0 != data_0 && $freeResources_11(this$static.sGraph.data_0);
  this$static.sGraph.data_0 = data_0;
  this$static.currentViewDataGrid = data_0;
}

function $setPrimaryScaleCount(this$static, numSrs){
  var col, i;
  this$static.lineCount = numSrs;
  for (i = 0; i < $getNumCols(this$static.graph.data_0); i++) {
    col = $getColumn(this$static.graph.data_0, i);
    i < numSrs?(col.usesSecondaryScale = false):(col.usesSecondaryScale = true);
  }
}

function $setScaleDateOutputFormat(this$static, value_0){
  var scale;
  $setDateOutputFormat(this$static.sGraph, value_0);
  value_0 = this$static.sGraph.dateOutputFormat;
  if (value_0 != null) {
    scale = $getCategoryScale(this$static.sGraph);
    instanceOf(scale, 36)?$setDateOutputFormat_0(castTo(scale, 36), value_0):instanceOf(scale, 56) && castTo(scale, 56);
  }
}

function $setScaleDecimalPlaces(this$static, key, value_0){
  var numberFormatter, scale;
  scale = $getValueScaleFromKey(this$static, key);
  if (scale) {
    numberFormatter = scale.numberFormatter;
    $applyDecimalPlaces(numberFormatter, value_0);
  }
}

function $setScaleDivisions(this$static, key, value_0){
  var scale, theValue;
  scale = $getValueScaleFromKey(this$static, key);
  theValue = getInt(value_0, 11);
  !!scale && (scale.manualDivisions = theValue);
  scale == $getValueScaleByNumber(this$static.sGraph, 0) && !!$getValueScaleByNumber(this$static.sGraph, 1) && $setManualDivisions($getValueScaleByNumber(this$static.sGraph, 1), theValue);
}

function $setScaleMax(this$static, key, value_0){
  var scale, theValue;
  if ($is100pctStacked(this$static.sGraph))
    return;
  scale = $getValueScaleFromKey(this$static, key);
  theValue = getDouble(value_0);
  !!scale && theValue != null && $setManualMax(scale, (checkCriticalNotNull(theValue) , theValue));
}

function $setScaleMin(this$static, key, value_0){
  var scale, theValue;
  if ($is100pctStacked(this$static.sGraph))
    return;
  scale = $getValueScaleFromKey(this$static, key);
  theValue = getDouble(value_0);
  !!scale && theValue != null && $setManualMin(scale, (checkCriticalNotNull(theValue) , theValue));
}

function $setSecondaryScaleFormatting(this$static){
  var primaryValueScale, secondaryValueScale;
  primaryValueScale = $getValueScaleByNumber(this$static.sGraph, 0);
  secondaryValueScale = $getValueScaleByNumber(this$static.sGraph, 1);
  if (!!secondaryValueScale && !!secondaryValueScale.numberFormatter) {
    if (this$static.graph.popVarDisplayType == 1) {
      $setNumberFormatter_0(secondaryValueScale, primaryValueScale.numberFormatter);
    }
     else {
      $applyValueFormatOverride(secondaryValueScale.numberFormatter, 'percentage');
      $setMultiplyBy100(secondaryValueScale.numberFormatter, true);
    }
  }
}

function $setUpAnimInfoFirstTime(this$static, type_0, easingType, startTime, endTime){
  var animInfo, bar, bar$iterator, srsInfo, srsInfo$iterator, startOffset, totalOffset;
  if (!!this$static.graph.seriesShapes && this$static.graph.seriesShapes.array.length > 0) {
    for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 19);
      if (srsInfo.fullSeriesInfo) {
        animInfo = new AnimInfoSrs(startTime, endTime, easingType);
        $setAnimInfo(srsInfo.fullSeriesInfo, animInfo);
      }
      if ($equals_2(type_0, 'VBar2')) {
        startOffset = 0;
        totalOffset = srsInfo.srsShapeList.array.length * 50;
        for (bar$iterator = new ArrayList$1(srsInfo.srsShapeList); bar$iterator.i < bar$iterator.this$01.array.length;) {
          bar = castTo($next_3(bar$iterator), 18);
          animInfo = new AnimInfoSrs(add_1(startTime, startOffset), sub_1(endTime, totalOffset), easingType);
          bar.animInfo = animInfo;
          startOffset += 50;
          totalOffset -= 50;
        }
      }
       else {
        for (bar$iterator = new ArrayList$1(srsInfo.srsShapeList); bar$iterator.i < bar$iterator.this$01.array.length;) {
          bar = castTo($next_3(bar$iterator), 18);
          animInfo = new AnimInfoSrs(startTime, endTime, easingType);
          bar.animInfo = animInfo;
        }
      }
    }
  }
}

function $setValueScalePosForHorizontal(this$static){
  var minMaxScale, valScale;
  valScale = $getValueScaleByNumber(this$static.sGraph, 0);
  !!valScale && !!valScale.graph && $hasChartOptions(valScale.graph) && $getChartOptionAsString(valScale.graph, 'primary_x_scale_pos') != null && valScale.graph.isHorizontal && $setPostionOverride(valScale, $getChartOptionAsString(valScale.graph, 'primary_x_scale_pos'));
  if ($adjustValueScalePositionForHorizontalGraphs(this$static, valScale)) {
    if (valScale.positionOverride == -1) {
      valScale.position == 3 && (valScale.position = 1);
      minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
      !!minMaxScale && minMaxScale.position == 1 && (minMaxScale.position = 3);
    }
     else {
      if (valScale.positionOverride == 3) {
        valScale.position = 3;
        minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
        !!minMaxScale && (minMaxScale.position = 1);
      }
       else {
        valScale.position = 1;
        minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
        !!minMaxScale && (minMaxScale.position = 3);
      }
    }
  }
}

function $shouldHaveSecondScale(this$static){
  if (isTrue(this$static.graph.getChartOptionAsString('dual_y_scales')) || this$static.graph.data_0.isPeriodOverPeriod && $isLineOnly(this$static.graph) && this$static.graph.typeAttributes.isPoPVariance)
    return true;
  return false;
}

function $showGapsForRunningTotalNulls(this$static){
  if (instanceOf(this$static, 110) && castTo(this$static, 110).hideNullDataGaps)
    return true;
  return false;
}

function $supportsSortingFromScale_0(this$static){
  var typeAttrs;
  typeAttrs = this$static.graph.typeAttributes;
  if ((this$static.graph.graphType == 0 || this$static.graph.graphType == 1 || this$static.graph.graphType == 2 || this$static.graph.graphType == 3 || this$static.graph.graphType == 6 || this$static.graph.graphType == 7) && !typeAttrs.isGroupedStacked && !typeAttrs.isCategoryScatter && !typeAttrs.isSymbol && !typeAttrs.isSymbolOverlay && !typeAttrs.isPeriodOverPeriod && !typeAttrs.isRunningTotal && !typeAttrs.isBullet && $getNumExtraProjectedItems(this$static.sGraph) == 0) {
    return true;
  }
  return false;
}

function $syncAndReplaceValueScales(this$static, state){
  var primary, sclMinMax, secondScale;
  if (state) {
    secondScale = $getValueScaleByNumber(this$static.sGraph, 1);
    !!secondScale && (secondScale.syncedScales = true);
    primary = $getValueScaleByNumber(this$static.sGraph, 0);
    if (primary) {
      primary.syncedScales = true;
      if (instanceOf(primary, 73) && !!secondScale && !instanceOf(secondScale, 73)) {
        $removeScale(this$static.sGraph, secondScale);
        secondScale = new ValueScaleLog(secondScale);
        $addScale_0(this$static.sGraph, secondScale);
      }
      if (!instanceOf(primary, 73) && !!secondScale && instanceOf(secondScale, 73)) {
        $removeScale(this$static.sGraph, secondScale);
        secondScale = new ValueScale_0(secondScale);
        $addScale_0(this$static.sGraph, secondScale);
      }
      sclMinMax = $getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0);
      if (sclMinMax) {
        $remove_3(this$static.sGraph.scales, sclMinMax);
        $addScale_0(this$static.sGraph, sclMinMax);
      }
    }
  }
}

function $syncValueScaleManualMinMaxValues(this$static){
  var manualMax, manualMin, valScale0, valScale1;
  manualMax = NaN;
  manualMin = NaN;
  valScale0 = $getValueScaleByNumber(this$static.sGraph, 0);
  valScale1 = $getValueScaleByNumber(this$static.sGraph, 1);
  if (valScale0) {
    isNaN_0(valScale0.manualMax) || (manualMax = valScale0.manualMax);
    isNaN_0(valScale0.manualMin) || (manualMin = valScale0.manualMin);
  }
  if (valScale1) {
    isNaN(manualMax) && !isNaN_0(valScale1.manualMax) && (manualMax = valScale1.manualMax);
    isNaN(manualMin) && !isNaN_0(valScale1.manualMin) && (manualMin = valScale1.manualMin);
  }
  if (!isNaN(manualMax)) {
    !!valScale0 && (valScale0.manualMax = manualMax , valScale0.manualMax < 0 && (valScale0.alwaysIncludeZero = false));
    !!valScale1 && (valScale1.manualMax = manualMax , valScale1.manualMax < 0 && (valScale1.alwaysIncludeZero = false));
  }
  if (!isNaN(manualMin)) {
    !!valScale0 && (valScale0.manualMin = manualMin , valScale0.manualMin > 0 && (valScale0.alwaysIncludeZero = false));
    !!valScale1 && (valScale1.manualMin = manualMin , valScale1.manualMin > 0 && (valScale1.alwaysIncludeZero = false));
  }
}

function $updateDataGridForVariance(this$static){
  var theData;
  !this$static.currentViewDataGrid && (this$static.currentViewDataGrid = this$static.originalData);
  theData = $getPeriodOverPeriodVarianceData(this$static, this$static.currentViewDataGrid);
  this$static.currentViewDataGrid != this$static.originalData && this$static.currentViewDataGrid != theData && this$static.currentViewDataGrid != this$static.graph.data_0 && $freeResources_11(this$static.currentViewDataGrid);
  this$static.currentViewDataGrid = theData;
  this$static.sGraph.data_0 = this$static.currentViewDataGrid;
}

function HandlerScaleBase(){
}

defineClass(64, 118, {64:1});
_.addDataFilterIfNeeded = function addDataFilterIfNeeded_0(dragRect){
  var data_0, filter, selectedSeriesShapes;
  if (dragRect) {
    selectedSeriesShapes = this.getItemsInDragRect(dragRect);
    this.filterDataFromSrsShapes(selectedSeriesShapes);
  }
  if (!!this.sGraph && !!this.sGraph.data_0) {
    data_0 = this.sGraph.data_0;
    if (data_0.hasHiddenRows) {
      filter = $getDynamicRowFilter(data_0, $hasTimeScale(this.sGraph));
      $addChartOption(this.sGraph, 'row_filter', filter);
      $setCategoryScaleToCorrectScaleType(this.sGraph);
    }
  }
}
;
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_2(chart){
  $addLegendsOrSubComponents_0(this, chart);
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame(sGraph, type_0, curTime, valueScale){
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs(sGraph, rows_0, baseScale, valueScale, valueScale2){
}
;
_.filterDataFromSrsShapes = function filterDataFromSrsShapes(shapeInfoList){
  $filterDataFromSrsShapes(this, shapeInfoList);
}
;
_.format_0 = function format_5(rnd){
  $format_0(this, rnd);
}
;
_.freeResources = function freeResources_12(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.sGraph = null;
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems_0(){
  return $getAdditionalLegendItems(this);
}
;
_.getDefaultLegendPosition = function getDefaultLegendPosition(){
  return 2;
}
;
_.getDragShadeRect = function getDragShadeRect_0(xScale, yScale, startX, startY, curX, curY){
  var rect, xRect, yRect;
  yRect = $getInnerBoundsRect(yScale);
  xRect = $getInnerBoundsRect(xScale);
  rect = this.sGraph.innerBounds;
  startX < rect.x_0 && (startX = rect.x_0);
  startX > rect.x_0 + rect.width_0 && (startX = rect.x_0 + rect.width_0);
  startY < rect.y_0 && (startY = rect.y_0);
  startY > rect.y_0 + rect.height_0 && (startY = rect.y_0 + rect.height_0);
  curX < rect.x_0 && (curX = rect.x_0);
  curX > rect.x_0 + rect.width_0 && (curX = rect.x_0 + rect.width_0);
  curY < rect.y_0 && (curY = rect.y_0);
  curY > rect.y_0 + rect.height_0 && (curY = rect.y_0 + rect.height_0);
  if (!!xRect && !!yRect && curX >= xRect.x_0 && curX <= xRect.x_0 + xRect.width_0 && curY >= yRect.y_0 && curY <= yRect.y_0 + yRect.height_0) {
    if (this.sGraph.isHorizontal) {
      startX = xRect.x_0 + xRect.width_0;
      curY < yRect.y_0?(curY = yRect.y_0):curY > yRect.y_0 + yRect.height_0 && (curY = yRect.y_0 + yRect.height_0);
      curX = xRect.x_0;
      if (curY != startY)
        return new CFRect(startX, startY, curX - startX, curY - startY);
    }
     else {
      startY = yRect.y_0;
      curX < xRect.x_0?(curX = xRect.x_0):curX > xRect.x_0 + xRect.width_0 && (curX = xRect.x_0 + xRect.width_0);
      curY = yRect.y_0 + yRect.height_0;
      if (curX != startX)
        return new CFRect(startX, startY, curX - startX, curY - startY);
    }
  }
  return null;
}
;
_.getFinalDragRectFromShadeRect = function getFinalDragRectFromShadeRect_0(shadeRect){
  var dragRect, xFirst, xLast, yFirst, yLast;
  if (this.sGraph.isHorizontal) {
    yFirst = shadeRect.y_0;
    yLast = shadeRect.y_0 + shadeRect.height_0;
    if (shadeRect.height_0 < 0) {
      yFirst = shadeRect.y_0 + shadeRect.height_0;
      yLast = shadeRect.y_0;
    }
    dragRect = new CFRect(this.sGraph.innerBounds.x_0, yFirst, this.sGraph.innerBounds.width_0, yLast - yFirst);
  }
   else {
    xFirst = shadeRect.x_0;
    xLast = shadeRect.x_0 + shadeRect.width_0;
    if (shadeRect.width_0 < 0) {
      xFirst = shadeRect.x_0 + shadeRect.width_0;
      xLast = shadeRect.x_0;
    }
    dragRect = new CFRect(xFirst, this.sGraph.innerBounds.y_0, xLast - xFirst, this.sGraph.innerBounds.height_0);
  }
  return dragRect;
}
;
_.getItemsInDragRect = function getItemsInDragRect(dragRect){
  var selectedSrsShapes, seriesInfo, seriesInfo$iterator, shapeInfo, shapeInfo$iterator;
  selectedSrsShapes = new ArrayList;
  for (seriesInfo$iterator = new ArrayList$1(this.sGraph.seriesShapes); seriesInfo$iterator.i < seriesInfo$iterator.this$01.array.length;) {
    seriesInfo = castTo($next_3(seriesInfo$iterator), 19);
    for (shapeInfo$iterator = new ArrayList$1(seriesInfo.srsShapeList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
      shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
      shapeInfo.inDragRect(dragRect) && (selectedSrsShapes.array[selectedSrsShapes.array.length] = shapeInfo , true);
    }
  }
  return selectedSrsShapes;
}
;
_.getLastState = function getLastState(cell, getFullSeriesItem){
  return $getLastState(this, cell, getFullSeriesItem);
}
;
_.getLegendColumns = function getLegendColumns(){
  var cols_0, halfCount, i;
  if (this.graph.data_0) {
    if (this.graph.typeAttributes.isPeriodOverPeriod && this.graph.typeAttributes.isPoPVariance && this.graph.hidePoPVarNonCurrent) {
      cols_0 = new ArrayList;
      halfCount = (this.graph.data_0.cols_0.size_1() - 1) / 2 | 0;
      $add_1(cols_0, $getColumn(this.graph.data_0, 0));
      for (i = halfCount + 1; i < this.graph.data_0.cols_0.size_1(); i++) {
        $add_1(cols_0, $getColumn(this.graph.data_0, i));
      }
      return cols_0;
    }
     else {
      return this.graph.data_0.cols_0;
    }
  }
  return null;
}
;
_.getMinMaxTimeValues = function getMinMaxTimeValues(scale){
  var hasMonthDaysThatAreDifferent, hasSubHourData, mmTime, row, testDay;
  mmTime = new MinMaxTime;
  hasSubHourData = false;
  hasMonthDaysThatAreDifferent = false;
  testDay = 0;
  row = $getFirstVisibleRow(this.graph.data_0);
  if (!this.includeEmptyCellsInTimeScaleMinMax) {
    while (!!row && !$oneOrMoreCellsHaveValue(row))
      row = $getNextVisibleRow(this.graph.data_0, row);
  }
  if (row) {
    mmTime.maxTimeMS = mmTime.minTimeMS = row.timeMS;
    hasSubHourData = containsSubHourTime(mmTime.minTimeMS);
    testDay = getDayOfMonth(mmTime.minTimeMS);
  }
  while (row) {
    if ($oneOrMoreCellsHaveValue(row) || this.includeEmptyCellsInTimeScaleMinMax) {
      hasSubHourData || (hasSubHourData = containsSubHourTime(row.timeMS));
      hasMonthDaysThatAreDifferent || (hasMonthDaysThatAreDifferent = containsMonthDaysOtherThanTestDay(row.timeMS, testDay));
      gt(row.timeMS, mmTime.maxTimeMS) && (mmTime.maxTimeMS = row.timeMS);
    }
    row = $getNextVisibleRow(this.graph.data_0, row);
  }
  mmTime.hasSubHourTime = hasSubHourData;
  mmTime.hasMonthDaysThatAreDifferent = hasMonthDaysThatAreDifferent;
  return mmTime;
}
;
_.getOriginalData = function getOriginalData_0(){
  if (this.originalData)
    return this.originalData;
  return this.graph.data_0;
}
;
_.handleClick_0 = function handleClick_7(shapeClicked){
  var dataObject, obj, obj$iterator, row;
  dataObject = $getDataObjectForShape_0(this.graph, shapeClicked);
  if (!!shapeClicked && !!this.graph.chart && $usingCardBus(this.graph.chart) && dataObject != null) {
    if (instanceOf(dataObject, 42)) {
      for (obj$iterator = castTo(dataObject, 42).iterator(); obj$iterator.hasNext_0();) {
        obj = obj$iterator.next_1();
        if (instanceOf(obj, 7)) {
          row = castTo(obj, 7);
          row.isOtherRow?$handleClickOnOtherInCardBusMode(this.graph, row, row.curIndex):$toggleRowShowAsFilterAndClearIfAllFiltered(this.currentViewDataGrid, castTo(obj, 7));
          this.graph.setNeedsFormat(true);
          shapeClicked.drillFilter = null;
        }
      }
    }
     else if (instanceOf(dataObject, 7)) {
      $toggleRowShowAsFilterAndClearIfAllFiltered(this.currentViewDataGrid, castTo(dataObject, 7));
      this.graph.setNeedsFormat(true);
      shapeClicked.drillFilter = null;
    }
     else if (instanceOf(dataObject, 18)) {
      if ($equals_2('legacy', this.currentViewDataGrid.originalDataType) || this.currentViewDataGrid.isPeriodOverPeriod) {
        $toggleColumnShowAsFilter(this.currentViewDataGrid, castTo(dataObject, 18).cell.column);
        this.graph.setNeedsFormat(true);
        shapeClicked.drillFilter = null;
      }
    }
  }
  return -1;
}
;
_.handleLogScaleChartOption = function handleLogScaleChartOption(valueScale, value_0){
  var newValueScale;
  if (isTrue(value_0)) {
    $removeScale(this.sGraph, valueScale);
    newValueScale = new ValueScaleLog(valueScale);
    $addScale(this.sGraph, 0, newValueScale);
    valueScale = newValueScale;
    $syncAndReplaceValueScales(this, valueScale.syncedScales);
  }
   else if (instanceOf(valueScale, 73)) {
    $removeScale(this.sGraph, valueScale);
    newValueScale = new ValueScale_0(valueScale);
    $addScale(this.sGraph, 0, newValueScale);
    valueScale = newValueScale;
    $syncAndReplaceValueScales(this, valueScale.syncedScales);
  }
  return valueScale;
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects(hoverData, rnd, seriesIndex){
}
;
_.handlerSpecificHoverTextOnly = function handlerSpecificHoverTextOnly(hoverData){
  this.setHoverText(hoverData);
}
;
_.isLegendItemSameSeries = function isLegendItemSameSeries_0(legendItemInfo, srsShapeInfo){
  if (!!srsShapeInfo && !!legendItemInfo) {
    if (!!srsShapeInfo.cell && srsShapeInfo.cell.column == legendItemInfo.colInfo)
      return true;
    else if (instanceOf(srsShapeInfo, 25) && castTo(srsShapeInfo, 25).groupedRow != -1 && legendItemInfo.type_0 == 6)
      return true;
  }
  return false;
}
;
_.processChartOptions = function processChartOptions_3(){
  $processChartOptions_3(this);
}
;
_.setData = function setData_3(dataGrid){
  $setData_1(this, dataGrid);
}
;
_.setFrame = function setFrame_4(type_0, easingType, startTime, curTime, endTime, rnd){
  var valueScale;
  if (this.graph.seriesShapes.array.length > 0) {
    $isAnimInfoNull(this) && $setUpAnimInfoFirstTime(this, type_0, easingType, startTime, endTime);
    $removeItemsFromDrawArray(this);
    valueScale = $getValueScale(this.sGraph);
    this.createDrawObjectsForFrame(this.sGraph, type_0, curTime, valueScale);
    if (compare_22(curTime, endTime) >= 0) {
      $hasDataLabels(this.graph) && $drawDataLabels(this.graph.dataLabel, rnd, $allowDataLabelRotate(this));
      $hasAnnotations(this.graph) && this.graph.drawAnnotations();
    }
  }
}
;
_.setGraph = function setGraph_0(graph){
  $setGraph_0(this, graph);
}
;
_.setHoverData = function setHoverData_9(data_0, rnd){
  return $setHoverData_0(this, data_0, rnd);
}
;
_.setHoverEffects_0 = function setHoverEffects_1(hoverData, rnd){
  return $setHoverEffects(this, hoverData, rnd);
}
;
_.setHoverText = function setHoverText(hoverData){
}
;
_.setShowScaleLabels = function setShowScaleLabels(key, value_0){
  var keyLowerCase, scale, suffixlength, suffixlength0, theValue;
  scale = (keyLowerCase = key.toLowerCase() , keyLowerCase.indexOf('cat_') != -1?$getCategoryScale(this.sGraph):(suffixlength0 = '_y'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength0, suffixlength0), '_y')?$getYScale(this.sGraph, false):(suffixlength = '_x'.length , $equals_2(keyLowerCase.substr(keyLowerCase.length - suffixlength, suffixlength), '_x')?$getXScale(this.sGraph, false):$getValueScaleFromKey(this, key))));
  theValue = isNever(value_0);
  !!scale && (scale.hideLabels = theValue);
}
;
_.shapeIsValidAnnotationPoint = function shapeIsValidAnnotationPoint_0(shape_0){
  var cell, dataObj;
  dataObj = $getDataObjectForShape_0(this.graph, shape_0);
  if (!!shape_0 && dataObj != null && instanceOf(dataObj, 18)) {
    cell = castTo(dataObj, 18).cell;
    if (!!cell && !!cell.row && cell.row.isForecastRow)
      return false;
  }
  return true;
}
;
_.shouldIncludePaddingInClip = function shouldIncludePaddingInClip(padding){
  return false;
}
;
_.supportsSortingFromScale = function supportsSortingFromScale_0(){
  return $supportsSortingFromScale_0(this);
}
;
_.includeEmptyCellsInTimeScaleMinMax = false;
_.lineCount = 0;
_.neverUseTimeScaleOverridden = false;
_.suppressHints = false;
_.tooltipHints = false;
var Lcom_domo_charting_graphs_HandlerScaleBase_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerScaleBase', 64);
function $clinit_HandlerBar(){
  $clinit_HandlerBar = emptyMethod;
  noPadding = new CFDimension(0, 0);
}

function $addBarShapeToGEAry(this$static, bar, shape_0){
  var ge;
  ge = new GraphicElement;
  this$static.graph.graphType == 18 && $addShape(ge, new CFShape_1(castTo(bar, 210).boxRect, ($clinit_CFFill() , WHITE_0), null));
  bar.projectionInfo?$addShape_0(ge, shape_0, bar.projectionInfo):$addShape_0(ge, shape_0, bar);
  $addGraphicElement_0(this$static.graph, ge);
}

function $addFirstLastLargestSmallestHints(this$static, rnd, hoverLabel, srsItem, currentCell, hoverData){
  var firstBar, firstInfo, labelPosition, largest, largestBar, lastBar, numberFormatter, smallest, smallestBar, srsInfo, srsInfo$iterator, testValue, thisBar;
  firstInfo = castTo($get_2(srsItem.srsShapeList, 0), 18);
  if (firstInfo) {
    if (firstInfo.isBar()) {
      thisBar = castTo(firstInfo, 25);
      firstBar = thisBar;
      lastBar = thisBar;
      largestBar = thisBar;
      smallestBar = thisBar;
      smallest = $intern_19;
      largest = $intern_20;
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        thisBar = castTo(srsInfo, 25);
        if (thisBar.cell) {
          if ((this$static.graph.graphType == 18 || this$static.graph.graphType == 20) && !!thisBar.cell.row && thisBar.cell.row.hidden)
            continue;
          lastBar = thisBar;
          testValue = $getValue(thisBar.cell);
          if (testValue < smallest) {
            smallest = testValue;
            smallestBar = thisBar;
          }
           else if (testValue >= largest) {
            largest = testValue;
            largestBar = thisBar;
          }
        }
      }
      numberFormatter = $getHoverFormatterForCell(this$static.sGraph, lastBar.cell);
      labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
      labelPosition = $getPositionOverride(hoverLabel, lastBar.cell, labelPosition);
      lastBar.cell != currentCell && $isValidHintCell(this$static, lastBar.cell) && $addHint(hoverLabel, rnd, numberFormatter, lastBar.cell, lastBar, labelPosition, this$static.tooltipHints, hoverData);
      firstBar.cell != currentCell && $isValidHintCell(this$static, firstBar.cell) && $addHint(hoverLabel, rnd, numberFormatter, firstBar.cell, firstBar, labelPosition, this$static.tooltipHints, hoverData);
      largestBar.cell != currentCell && $isValidHintCell(this$static, largestBar.cell) && $addHint(hoverLabel, rnd, numberFormatter, largestBar.cell, largestBar, labelPosition, this$static.tooltipHints, hoverData);
      smallestBar.cell != currentCell && $isValidHintCell(this$static, smallestBar.cell) && $addHint(hoverLabel, rnd, numberFormatter, smallestBar.cell, smallestBar, labelPosition, this$static.tooltipHints, hoverData);
    }
  }
}

function $addGroupBarForNested(this$static, rowIndex, rowInfo, barWidth, baseScale, valueScale, minValuePos, zeroValuePos, barList, barMap){
  var barInfo, barRect, catScalePos, cell, groupCell, minCatPos, value_0, valueScalePos;
  cell = $getFirstCell(rowInfo);
  if (cell) {
    catScalePos = baseScale.getPositionForValue(rowIndex);
    value_0 = (isNaN_0(rowInfo.sum) && (rowInfo.sum = $calcSum(rowInfo, false, true, false)) , rowInfo.sum);
    instanceOf(this$static.graph.handler, 111) && (value_0 = $getSumForSecondary(rowInfo));
    valueScalePos = valueScale.getPositionForValue(value_0);
    minCatPos = baseScale.getMinPosition();
    barRect = $getBarRect(this$static, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, barWidth);
    groupCell = new Cell(value_0);
    groupCell.row = rowInfo;
    barInfo = new SrsBarInfo_1(this$static, groupCell, barRect, null, new CFFill((!this$static.groupColor && (this$static.groupColor = $getColor(this$static.graph, 'NestedBar', '#C4C5C560')) , this$static.groupColor)), null, rowIndex, null);
    barList.array[barList.array.length] = barInfo;
    $put_1(barMap.hashCodeMap, rowInfo, barInfo);
  }
}

function $addToStackedShape(retPath, rect, isHorizontal, isMoveTo, isReturn){
  if (isHorizontal) {
    isMoveTo?$add(retPath, new CFPathElement_0(0, rect.x_0 + rect.width_0, rect.y_0)):isReturn?$add(retPath, new CFPathElement_0(1, rect.x_0, rect.y_0 + rect.height_0)):$add(retPath, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0));
    isReturn?$add(retPath, new CFPathElement_0(1, rect.x_0, rect.y_0)):$add(retPath, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0));
  }
   else {
    isMoveTo?$add(retPath, new CFPathElement_0(0, rect.x_0, rect.y_0)):isReturn?$add(retPath, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0)):$add(retPath, new CFPathElement_0(1, rect.x_0, rect.y_0));
    isReturn?$add(retPath, new CFPathElement_0(1, rect.x_0, rect.y_0 + rect.height_0)):$add(retPath, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0));
  }
}

function $adjustForMultiColumn(this$static, barRect, numCols, colIndex, lastRect, value_0){
  var height, width_0, x_0, y_0;
  if (this$static.sGraph.isHorizontal) {
    if (!this$static.sGraph.typeAttributes.isStacked || this$static.graph.typeAttributes.isNestedBar) {
      height = barRect.height_0 / numCols;
      y_0 = barRect.y_0 + colIndex * height;
      barRect = new CFRect(barRect.x_0, y_0, barRect.width_0, height);
    }
     else {
      !!lastRect && value_0 >= 0?(barRect = new CFRect(lastRect.x_0 + lastRect.width_0, barRect.y_0, barRect.width_0, barRect.height_0)):!!lastRect && (barRect = new CFRect(lastRect.x_0 - barRect.width_0, barRect.y_0, barRect.width_0, barRect.height_0));
    }
    barRect.height_0 < 1 && (barRect.height_0 = 1);
  }
   else {
    if (!this$static.sGraph.typeAttributes.isStacked || this$static.graph.typeAttributes.isNestedBar) {
      width_0 = barRect.width_0 / numCols;
      if (this$static.reverseMultibarLayoutOrder) {
        x_0 = barRect.x_0 + (numCols - 1 - colIndex) * width_0;
        barRect = new CFRect(x_0, barRect.y_0, width_0, barRect.height_0);
      }
       else {
        x_0 = barRect.x_0 + colIndex * width_0;
        barRect = new CFRect(x_0, barRect.y_0, width_0, barRect.height_0);
      }
    }
     else {
      !!lastRect && value_0 >= 0?(barRect = new CFRect(barRect.x_0, lastRect.y_0 - barRect.height_0, barRect.width_0, barRect.height_0)):!!lastRect && (barRect = new CFRect(barRect.x_0, lastRect.y_0 + lastRect.height_0, barRect.width_0, barRect.height_0));
    }
    barRect.width_0 < 1 && (barRect.width_0 = 1);
  }
  return barRect;
}

function $adjustLabelPosForHorizontalBars(this$static, rect, labelPosition){
  var midPoint;
  if (!!this$static.sGraph && this$static.sGraph.isHorizontal && !this$static.graph.typeAttributes.isCategoryScatter && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isSymbol) {
    midPoint = $getCenterX(this$static.graph.bnds);
    rect.x_0 > midPoint && (labelPosition = 12);
  }
  return labelPosition;
}

function $calculateGroupedStackedSecondBarSeriesIndex(this$static){
  var col, col$iterator, index_0, numBars;
  if (instanceOf(this$static.graph.handler, 111)) {
    index_0 = 0;
    numBars = 0;
    for (col$iterator = this$static.graph.data_0.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (col.usesSecondaryScale) {
        ++numBars;
        if (numBars > this$static.groupedStackedFirstBarCount)
          return index_0;
      }
      ++index_0;
    }
    return $getNumCols(this$static.graph.data_0);
  }
   else {
    return this$static.groupedStackedFirstBarCount;
  }
}

function $checkAndGetBarWidthForTimeScaleWidth(this$static, baseScale, lastVal, firstVal, barWidth){
  var baseRect, halfWidth, overlap, overlapBottom, overlapLeft, overlapRight, overlapTop;
  halfWidth = barWidth / 2;
  baseRect = $getInnerBoundsRect(baseScale);
  if (this$static.sGraph.isHorizontal) {
    overlapTop = halfWidth - firstVal;
    overlapBottom = lastVal + baseRect.y_0 - (baseRect.y_0 + baseRect.height_0 - halfWidth);
    overlap = $wnd.Math.max(overlapTop, overlapBottom);
  }
   else {
    overlapLeft = halfWidth - firstVal;
    overlapRight = lastVal + baseRect.x_0 - (baseRect.x_0 + baseRect.width_0 - halfWidth);
    overlap = $wnd.Math.max(overlapLeft, overlapRight);
  }
  overlap > 0 && (barWidth -= 2 * overlap + 2);
  return barWidth;
}

function $createDrawObjectsForFrame(this$static, sGraph, type_0, curTime, valueScale){
  var bar, hitShape, lastBar, minMaxScale, minMaxScale0, pctComplete, projBarGE, seriesShapes, shape_0, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator, transRectOrShape, transitionRect, zeroPos;
  zeroPos = valueScale.getZeroPosition();
  instanceOf(valueScale, 56) && (zeroPos = valueScale.getMinPosition());
  seriesShapes = this$static.getDrawingOrderedSeriesShapes();
  $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
  for (srsItem$iterator = new ArrayList$1(seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    $drawStackedBarHoverShape(this$static, srsItem.fullSeriesInfo);
    lastBar = null;
    srsItem.srsShapeList.array.length > 0 && (lastBar = castTo($get_2(srsItem.srsShapeList, srsItem.srsShapeList.array.length - 1), 18));
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 25)) {
        bar = castTo(srsInfo, 25);
        if (bar.animInfo) {
          pctComplete = $getPercentComplete(bar.animInfo, curTime);
          transitionRect = null;
          transRectOrShape = $getRectPctOrShape(bar, type_0, sGraph, pctComplete, zeroPos);
          instanceOf(transRectOrShape, 4) && (transitionRect = castTo(transRectOrShape, 4));
          if (!!bar.cell && $isForecastItem(bar.cell)) {
            projBarGE = $getProjBarGE(bar, transitionRect, false);
            $addGraphicElement_0(this$static.graph, projBarGE);
          }
           else {
            shape_0 = bar.getDrawShapeForRect(transitionRect);
            this$static.dontAntiAliasBars || !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
            this$static.addBarShapeToGEAry(bar, shape_0);
          }
          if (pctComplete > 0.99) {
            if (this$static.graph.typeAttributes.isDotPlot) {
              hitShape = bar.getHitShape();
              !!hitShape && this$static.addBarShapeToGEAry(bar, hitShape);
            }
            if (!!srsItem.projectionInfo && srsInfo == lastBar) {
              minMaxScale0 = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
              $drawProjectionBar_0(minMaxScale0, srsItem, false);
            }
          }
        }
      }
    }
  }
  minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
  this$static.graph.graphType == 3 || this$static.graph.graphType == 2?!!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).fullSeriesInfo && $addMinMaxAvgLines(minMaxScale, castTo($get_2(this$static.graph.seriesShapes, 0), 19).fullSeriesInfo.stroke_0):this$static.graph.graphType != 12 && !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!this$static.graph.seriesShapes && this$static.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && $addMinMaxAvgLines(minMaxScale, new CFStroke(castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).fill_0.color_0, 1));
  $clearInnerBoundsClip(this$static, false, false);
  this$static.graph.typeAttributes.isOverlay && $sortOverlayBars(this$static);
}

function $drawAllBars(this$static, index_0, hoverData){
  var obj, obj$iterator;
  if (hoverData != null && instanceOf(hoverData, 42) && castTo(hoverData, 42).size_1() > 0) {
    for (obj$iterator = castTo(hoverData, 42).iterator(); obj$iterator.hasNext_0();) {
      obj = obj$iterator.next_1();
      this$static.drawAllBarsForOneHoverData(index_0, obj);
    }
  }
   else 
    this$static.drawAllBarsForOneHoverData(index_0, hoverData);
}

function $drawAreaPointFromSrsInfo(this$static, srsInfo, previous){
  var barInfo, ge, point, point$index, point$max, points, shape_0, areaPoints;
  if (instanceOf(srsInfo, 25)) {
    barInfo = castTo(srsInfo, 25);
    castTo(previous, 25);
    ge = new GraphicElement;
    points = (areaPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 1, 0, 1) , this$static.sGraph.isHorizontal?(areaPoints[0] = new CFPoint($getRight(barInfo.rect), barInfo.rect.y_0)):(areaPoints[0] = new CFPoint(barInfo.rect.x_0, barInfo.rect.y_0)) , areaPoints);
    for (point$index = 0 , point$max = points.length; point$index < point$max; ++point$index) {
      point = points[point$index];
      shape_0 = new CFShape_0(getSymbolPath(1, point.x_0, point.y_0), ($clinit_CFFill() , TRANSPARENT_0), null);
      $addShape_0(ge, shape_0, barInfo);
    }
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $drawBarsForASeries(this$static, srsItem, drawGrayBars, selectedIndex, hoverData){
  var barInfo, barsForRow, drawInGray, drawTransparent, fullBarInfo, shape_0, srsInfo, srsInfo$iterator;
  if ($isBar(srsItem)) {
    barsForRow = new ArrayList;
    if (srsItem.fullSeriesInfo) {
      fullBarInfo = castTo(srsItem.fullSeriesInfo, 25);
      drawTransparent = drawGrayBars;
      selectedIndex == -1 && (drawTransparent = true);
      if ($drawHoverBarsOnBaseline(this$static, selectedIndex, drawGrayBars, hoverData))
      ;
      else 
        $drawStackedSeriesAreaFromSrsInfo(this$static, fullBarInfo, drawTransparent);
    }
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 25)) {
        barInfo = castTo(srsInfo, 25);
        if (hoverData != null && instanceOf(hoverData, 7)) {
          if (!!srsInfo.cell && maskUndefined(srsInfo.cell.row) === maskUndefined(hoverData)) {
            this$static.drawBarFromSrsInfo(barInfo, false, selectedIndex, false);
            barsForRow.array[barsForRow.array.length] = barInfo;
          }
           else 
            this$static.drawBarFromSrsInfo(barInfo, drawGrayBars, selectedIndex, false);
        }
         else if ($drawHoverBarsOnBaseline(this$static, selectedIndex, drawGrayBars, hoverData)) {
          this$static.drawBarFromSrsInfo(barInfo, true, selectedIndex, false);
          shape_0 = barInfo.getDrawShapeForRect($getOrigRect(barInfo));
          if (shape_0) {
            this$static.dontAntiAliasBars || !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
            this$static.addBarShapeToGEAry(barInfo, shape_0);
          }
        }
         else {
          drawInGray = drawGrayBars;
          hoverData != null && !!this$static.colorRulesLegendMap && maskUndefined(hoverData) === maskUndefined($get_1(this$static.colorRulesLegendMap, srsInfo.cell)) && (drawInGray = false);
          this$static.drawBarFromSrsInfo(barInfo, drawInGray, selectedIndex, false);
        }
      }
    }
    $drawProjectionBar(this$static, srsItem, drawGrayBars);
    barsForRow.array.length > 0 && $drawHintsForList(this$static, this$static.graph.rnd, barsForRow);
  }
}

function $drawDataLabel(this$static, dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var barInfo, categoryRects, datalabelDisplayed, displayed, dlRect, dlText, oldPosition, textPosRect, tmpFormatStr, tmpPosition;
  datalabelDisplayed = false;
  textPosRect = null;
  if (!!shpInfo && instanceOf(shpInfo, 25) && (dataLabel.showLabelsOn != 2 || this$static.showNestedGroupDatalabel && !shpInfo.cell.column)) {
    if (dataLabel.showTotal) {
      tmpFormatStr = dataLabel.formatString;
      tmpPosition = dataLabel.position;
      dataLabel.formatString = '%_CATEGORY_TOTAL';
      this$static.graph.typeAttributes.percentOfCategoryData && (dataLabel.formatString = '%_ORIG_CATEGORY_TOTAL');
      this$static.sGraph.isHorizontal?(dataLabel.position = 4):(dataLabel.position = 0);
      categoryRects = $getStackedBarRects(this$static);
      barInfo = castTo(shpInfo, 25);
      dlText = $getFormattedDataLabel(dataLabel, barInfo.cell);
      dataLabel.position = $getPositionOverride(dataLabel, barInfo.cell, dataLabel.position);
      textPosRect = $getRectForPosition(dataLabel, rnd, categoryRects[$getCurRowIndex(barInfo.cell)], dlText);
      displayed = $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
      dataLabel.formatString = tmpFormatStr;
      dataLabel.position = tmpPosition;
      datalabelDisplayed = displayed;
    }
     else if (dataLabel.showOneLabel) {
      categoryRects = $getStackedBarRects(this$static);
      barInfo = castTo(shpInfo, 25);
      dlText = $getFormattedDataLabel(dataLabel, barInfo.cell);
      dataLabel.position = $getPositionOverride(dataLabel, barInfo.cell, dataLabel.position);
      textPosRect = $getRectForPosition(dataLabel, rnd, categoryRects[$getCurRowIndex(barInfo.cell)], dlText);
      datalabelDisplayed = $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
    }
     else if ((this$static.graph.graphType == 18 || this$static.graph.graphType == 20) && !!shpInfo.cell && !!shpInfo.cell.row && shpInfo.cell.row.hidden)
    ;
    else {
      barInfo = castTo(shpInfo, 25);
      if (this$static.graph.typeAttributes.isNestedBar) {
        if (barInfo.groupedRow >= 0 && !this$static.showNestedGroupDatalabel)
          return false;
        else if (this$static.showNestedGroupDatalabel && this$static.graph.getChartOptionAsString('datalabel_text') == null && barInfo.groupedRow == -1)
          return false;
        else if (this$static.graph.treatAsSmall)
          return false;
      }
      if ($shouldProcessDataLabel(this$static, barInfo, dataLabel)) {
        dlText = $getFormattedDataLabel(dataLabel, barInfo.cell);
        if (dlText != null && dlText.length > 0) {
          oldPosition = dataLabel.position;
          dlRect = new CFRect_0($getRectForDisplay(barInfo, barInfo.rect));
          data_0 != null && instanceOf(data_0, 37) && castTo(this$static.hoverData, 37).type_0 != 13 && !this$static.graph.typeAttributes.isStream && (dlRect = new CFRect_0($getOrigRect(barInfo)));
          dataLabel.position = $getPositionOverride(dataLabel, barInfo.cell, dataLabel.position);
          (this$static.graph.typeAttributes.isSymbolOverlay || this$static.graph.typeAttributes.isSymbol) && !this$static.sGraph.isHorizontal && $setY_0(dlRect, dlRect.y_0 - dlRect.width_0 / 2);
          textPosRect = $getRectForPosition(dataLabel, rnd, dlRect, dlText);
          datalabelDisplayed = $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
          dataLabel.position = oldPosition;
        }
      }
       else 
        return true;
    }
  }
  if (!datalabelDisplayed && !!textPosRect && !this$static.graph.isHorizontal_0() && instanceOf(shpInfo, 25) && castTo(shpInfo, 25).rect.width_0 >= textPosRect.width_0)
    return true;
  return datalabelDisplayed;
}

function $drawHints(this$static, rnd, hoverData, seriesIndex){
  var cell, current, hoverLabel, hoverRect, justSelected, labelPosition, srsInfo, srsInfo$iterator, srsItem, thisBar;
  srsItem = $getSeriesInfoToUseForHoverHints(this$static, hoverData, seriesIndex);
  if (!srsItem)
    return;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  cell = null;
  instanceOf(hoverData, 25) && (cell = castTo(hoverData, 18).cell);
  $setFormatString(hoverLabel, $getHoverLabelTextForCell(this$static.sGraph, cell, hoverLabel.formatString));
  justSelected = false;
  srsItem.srsShapeList.array.length > 100 && (justSelected = true);
  current = null;
  labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
  if (instanceOf(hoverData, 25)) {
    current = castTo(hoverData, 25);
    if (!!current && !!current.rect) {
      hoverRect = $getRectForDisplay(current, current.rect);
      if (this$static.graph.typeAttributes.isCategoryScatter) {
        labelPosition = $getPositionOverride(hoverLabel, current.cell, labelPosition);
        hoverRect = $duplicate_5(current.rect);
        $setY_0(hoverRect, current.rect.y_0 - 5);
      }
      labelPosition = $adjustLabelPosForHorizontalBars(this$static, hoverRect, labelPosition);
      !!current.cell && $isForecastItem(current.cell);
      $addPrimary_0(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, current.cell), current.cell, hoverRect, labelPosition);
    }
  }
  if (!this$static.suppressHints && this$static.graph.graphType != 10) {
    $addFirstLastLargestSmallestHints(this$static, rnd, hoverLabel, srsItem, cell, hoverData);
    if (!justSelected) {
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        if (srsInfo.isBar()) {
          thisBar = castTo(srsInfo, 25);
          if ((this$static.graph.graphType == 18 || this$static.graph.graphType == 20) && !!thisBar.cell.row && thisBar.cell.row.hidden)
            continue;
          labelPosition = $getPositionOverride(hoverLabel, thisBar.cell, labelPosition);
          thisBar != current && $addHint(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, thisBar.cell), thisBar.cell, thisBar, labelPosition, this$static.tooltipHints, hoverData);
        }
      }
    }
  }
}

function $drawHintsForList(this$static, rnd, bars){
  var barInfo, barInfo$iterator, cell, hoverLabel, labelPosition;
  if (this$static.suppressHints)
    return;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  for (barInfo$iterator = new ArrayList$1(bars); barInfo$iterator.i < barInfo$iterator.this$01.array.length;) {
    barInfo = castTo($next_3(barInfo$iterator), 25);
    cell = barInfo.cell;
    $setFormatString(hoverLabel, $getHoverLabelTextForCell(this$static.sGraph, cell, hoverLabel.formatString));
    labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
    $addHint(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, barInfo.cell), barInfo.cell, barInfo, labelPosition, this$static.tooltipHints, null);
  }
}

function $drawHoverBarsOnBaseline(this$static, selectedIndex, drawGrayBars, hoverData){
  if (!$usingCardBus(this$static.graph.chart) && hoverData != null && selectedIndex != -1 && !drawGrayBars && (instanceOf(hoverData, 37) || instanceOf(hoverData, 16)) && !this$static.graph.typeAttributes.isStream && !$hasProjections(this$static.sGraph))
    return true;
  return false;
}

function $drawProjectionBar(this$static, srsItem, drawGray){
  var minMaxScale;
  if (srsItem.projectionInfo) {
    minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
    $drawProjectionBar_0(minMaxScale, srsItem, drawGray);
  }
}

function $drawSingleBarHovers(this$static, hoverData){
  var barInfo, innerBnds, linePath, projBarIndex, projInfo, projShape, value_0, x_0, y_0;
  if (hoverData != null && instanceOf(hoverData, 25)) {
    barInfo = castTo(hoverData, 25);
    this$static.drawBarFromSrsInfo(barInfo, false, 0, true);
    if (!this$static.graph.typeAttributes.isCategoryScatter && this$static.graph.graphType != 10 && this$static.graph.graphType != 11 && this$static.graph.graphType != 23 && this$static.graph.graphType != 24) {
      innerBnds = this$static.graph.getInnerBounds();
      value_0 = $getValue(barInfo.cell);
      if (!!barInfo && !!barInfo.getRect()) {
        if (this$static.sGraph.isHorizontal) {
          x_0 = round_int($getRight(barInfo.getRect()));
          value_0 < 0 && (x_0 = round_int(barInfo.getRect().x_0));
          linePath = new CFPath_1(x_0, innerBnds.y_0, x_0, innerBnds.y_0 + innerBnds.height_0);
        }
         else {
          y_0 = round_int(barInfo.getRect().y_0);
          value_0 < 0 && (y_0 = round_int($getBottom(barInfo.getRect())));
          linePath = new CFPath_1(innerBnds.x_0, y_0, innerBnds.x_0 + innerBnds.width_0, y_0);
        }
        $addGraphicElement_0(this$static.graph, new GraphicElement_0(new CFShape_0(linePath, null, new CFStroke(barInfo.fill_0.color_0, 1))));
      }
    }
    projBarIndex = -1;
    projInfo = castTo($get_2(this$static.graph.seriesShapes, 0), 19).projectionInfo;
    !!projInfo && !!projInfo.valuePoint && (projBarIndex = round_int(projInfo.valuePoint.x_0));
    if (projBarIndex != -1) {
      projShape = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, projBarIndex), 18);
      maskUndefined(hoverData) === maskUndefined(projShape)?$drawProjectionBar(this$static, castTo($get_2(this$static.graph.seriesShapes, 0), 19), false):$drawProjectionBar(this$static, castTo($get_2(this$static.graph.seriesShapes, 0), 19), true);
    }
  }
}

function $drawStackedBarHoverShape(this$static, hoverShapeInfo){
  var fullBarInfo;
  if (!!hoverShapeInfo && instanceOf(hoverShapeInfo, 25)) {
    fullBarInfo = castTo(hoverShapeInfo, 25);
    $drawStackedSeriesAreaFromSrsInfo(this$static, fullBarInfo, true);
  }
}

function $drawStackedSeriesAreaFromSrsInfo(this$static, fullBarInfo, drawTransparent){
  var ge, transColor;
  ge = new GraphicElement;
  if (drawTransparent) {
    $addShape_0(ge, new CFShape_0(fullBarInfo.hoverPath, null, null), fullBarInfo);
  }
   else {
    transColor = $duplicate_0(fullBarInfo.fill_0.color_0);
    transColor.alpha_0 = 64;
    $addShape_0(ge, new CFShape_0(fullBarInfo.hoverPath, new CFFill(transColor), null), fullBarInfo);
  }
  $addGraphicElement_0(this$static.graph, ge);
}

function $freeResources_18(this$static, dataToKeep){
  $freeResources_17(this$static, dataToKeep);
  this$static.sGraph = null;
  this$static.groupColor = null;
  if (this$static.colorRulesLegendMap) {
    $reset_5(this$static.colorRulesLegendMap);
    this$static.colorRulesLegendMap = null;
  }
}

function $getAdditionalLegendItems_0(this$static){
  var groupLegendItem, liiList;
  liiList = $getAdditionalLegendItems(this$static);
  !liiList && (liiList = new ArrayList);
  if (this$static.graph.typeAttributes.isNestedBar && !this$static.hideNestedGroupInLegend) {
    this$static.nestedGroupText == null && (this$static.nestedGroupText = getString('GROUP_TOTAL', this$static.graph.chart.locale));
    groupLegendItem = new LegendItemInfo_1($getLegend(this$static.graph), this$static.nestedGroupText, new CFFill((!this$static.groupColor && (this$static.groupColor = $getColor(this$static.graph, 'NestedBar', '#C4C5C560')) , this$static.groupColor)), null);
    groupLegendItem.type_0 = 6;
    checkCriticalPositionIndex(0, liiList.array.length);
    insertTo(liiList.array, 0, groupLegendItem);
  }
  $getLegendItemsForConditionalValuesInUse(this$static, liiList);
  if (liiList.array.length > 0)
    return liiList;
  return null;
}

function $getBarRect(this$static, minCatPos, catPos, minValPos, valPos, zeroValuePos, barWidth){
  var height, length_0, x_0, y_0, zero;
  this$static.isArea && (barWidth = 0);
  if (this$static.sGraph.isHorizontal) {
    x_0 = minValPos + zeroValuePos;
    valPos < zeroValuePos && (x_0 = minValPos + valPos);
    length_0 = valPos - zeroValuePos;
    valPos < zeroValuePos && (length_0 = zeroValuePos - valPos);
    y_0 = minCatPos + catPos - barWidth / 2;
    return new CFRect(x_0, y_0, length_0, barWidth);
  }
   else {
    x_0 = minCatPos + catPos - barWidth / 2;
    y_0 = minValPos - valPos;
    zero = minValPos - zeroValuePos;
    height = zero - y_0;
    if (height < 0) {
      height = y_0 - zero;
      y_0 = zero;
    }
    return new CFRect(x_0, y_0, barWidth, height);
  }
}

function $getBarWidth(this$static, numRows){
  var barWidth, barWidthRatio, baseScale, curBarWidthPercent, curRow, dayWidth, firstVal, lastVal, maxBarWidth, maxWidth, minPixelsBetweenBars, minSpaceBetweenPoints, recommendedBarWidth, retBarWidth, sGraph, spaceBetweenPoints, val;
  maxBarWidth = $getMaxBarWidth(this$static);
  retBarWidth = 0;
  sGraph = castTo(this$static.graph, 40);
  baseScale = $getCategoryScale(sGraph);
  if (instanceOf(baseScale, 56)) {
    barWidthRatio = this$static.barWidthPercent / 100;
    (barWidthRatio > 1 || this$static.graph.graphType == 18 || this$static.graph.graphType == 20) && (barWidthRatio = 1);
    lastVal = -1000;
    minSpaceBetweenPoints = $intern_10;
    firstVal = NaN;
    curRow = $getFirstVisibleRow(this$static.graph.data_0);
    while (curRow) {
      if ($oneOrMoreCellsHaveValue(curRow)) {
        val = baseScale.getPositionForValue(curRow.curIndex);
        spaceBetweenPoints = val - lastVal;
        spaceBetweenPoints < minSpaceBetweenPoints && (minSpaceBetweenPoints = spaceBetweenPoints);
        lastVal = val;
        isNaN(firstVal) && (firstVal = val);
      }
      curRow = $getNextVisibleRow(this$static.graph.data_0, curRow);
    }
    dayWidth = $getDayWidth(castTo(baseScale, 56));
    barWidth = minSpaceBetweenPoints * barWidthRatio;
    minPixelsBetweenBars = minSpaceBetweenPoints - barWidth;
    !this$static.graph.typeAttributes.isStacked && !this$static.graph.typeAttributes.isGanttPercent && !this$static.graph.typeAttributes.isCategoryScatter && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isGroupedStacked && !this$static.graph.typeAttributes.isBullet && !this$static.graph.typeAttributes.isOverlay && !this$static.graph.typeAttributes.isNestedBar && (maxBarWidth = this$static.graph.data_0.numVisibleCols * maxBarWidth);
    barWidth > maxBarWidth && (barWidth = maxBarWidth);
    (this$static.graph.typeAttributes.isSymbolOverlay || this$static.graph.typeAttributes.isSymbol) && barWidth < 2 && (barWidth = 2);
    this$static.graph.typeAttributes.isCategoryScatter && barWidth < 12 && (barWidth = 12);
    if (barWidth < 1)
      return 1;
    if (!(this$static.graph.graphType == 18 || this$static.graph.graphType == 20)) {
      recommendedBarWidth = $getMaxDayWidthOfBarBasedOnScaleMinIncs(castTo(baseScale, 56)) * dayWidth;
      recommendedBarWidth > 0 && barWidth > recommendedBarWidth && barWidth > 12 && (barWidth = recommendedBarWidth);
    }
    this$static.graph.typeAttributes.isCategoryScatter || (barWidth = $checkAndGetBarWidthForTimeScaleWidth(this$static, baseScale, lastVal, firstVal, barWidth));
    barWidth < 1?(retBarWidth = 1):(retBarWidth = barWidth);
    if (this$static.barWidthPercentOverride > 0) {
      barWidthRatio = this$static.barWidthPercentOverride / 100;
      barWidthRatio > 1 && (barWidthRatio = 1);
      retBarWidth *= barWidthRatio;
      retBarWidth < 1 && (retBarWidth = 1);
    }
    minPixelsBetweenBars < 10 && (this$static.nonStackedInteractivity = true);
  }
   else {
    curBarWidthPercent = this$static.barWidthPercent;
    this$static.barWidthPercentOverride > 0 && (curBarWidthPercent = this$static.barWidthPercentOverride);
    maxWidth = baseScale.getLength() / numRows;
    if (this$static.fixedBarWidth != -1) {
      this$static.fixedBarWidth > maxWidth?(retBarWidth = maxWidth):(retBarWidth = this$static.fixedBarWidth);
    }
     else {
      barWidthRatio = curBarWidthPercent / 100;
      barWidthRatio > 1 && (barWidthRatio = 1);
      if (baseScale) {
        barWidth = baseScale.getLength() / numRows * barWidthRatio;
        this$static.graph.typeAttributes.isSymbol || this$static.graph.typeAttributes.isSymbolOverlay || this$static.graph.typeAttributes.isCategoryScatter?barWidth < 2 && (barWidth = 2):barWidth < 1 && (barWidth = 1);
        (!this$static.graph.typeAttributes.isStacked && !this$static.graph.typeAttributes.isGanttPercent && !this$static.graph.typeAttributes.isCategoryScatter && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isGroupedStacked && !this$static.graph.typeAttributes.isBullet && !this$static.graph.typeAttributes.isOverlay && !this$static.graph.typeAttributes.isNestedBar || this$static.graph.typeAttributes.isNestedBar) && (maxBarWidth = this$static.graph.data_0.numVisibleCols * maxBarWidth);
        barWidth > maxBarWidth && this$static.barWidthPercentOverride == 0 && (barWidth = maxBarWidth);
        retBarWidth = barWidth;
      }
    }
    retBarWidth > 0 && maxWidth - retBarWidth < 10 && (this$static.nonStackedInteractivity = true);
  }
  return retBarWidth;
}

function $getCellValueForGraphType(this$static, cell){
  if (!!cell && !isNaN_0($getValue(cell)))
    return $getValue(cell);
  if (this$static.graph.graphType == 6 || this$static.graph.graphType == 7)
    return 0;
  return NaN;
}

function $getDataLabelTextForOutsideLabel(this$static, cell){
  var label_0, tmpFormatStr;
  if (this$static.sGraph.dataLabel.showTotal) {
    tmpFormatStr = this$static.sGraph.dataLabel.formatString;
    this$static.sGraph.dataLabel.formatString = '%_CATEGORY_TOTAL';
    this$static.graph.typeAttributes.percentOfCategoryData && (this$static.graph.dataLabel.formatString = '%_ORIG_CATEGORY_TOTAL');
    label_0 = $getFormattedDataLabel(this$static.sGraph.dataLabel, cell);
    this$static.sGraph.dataLabel.formatString = tmpFormatStr;
  }
   else 
    label_0 = $getFormattedDataLabel(this$static.sGraph.dataLabel, cell);
  return label_0;
}

function $getDayWidth(scale){
  var todayMillis, val, val2;
  todayMillis = fromDouble_0((new Date_0).jsdate.getTime());
  val = toDouble_0(sub_1(todayMillis, scale.adjustedMinTime)) * scale.ratio;
  val2 = toDouble_0(sub_1(add_1(todayMillis, $intern_34), scale.adjustedMinTime)) * scale.ratio;
  return $wnd.Math.abs(val2 - val);
}

function $getGroupStackedSecondBarSeriesIndex(this$static){
  this$static.groupedStackedSecondBarSeriesIndex == -1 && (this$static.groupedStackedSecondBarSeriesIndex = $calculateGroupedStackedSecondBarSeriesIndex(this$static));
  return this$static.groupedStackedSecondBarSeriesIndex;
}

function $getLegendItemsForConditionalValuesInUse(this$static, legendItemInfoList){
  var baseScale, cell, colLabel, colNumFormatter, colorRuleLegendItem, curCol, curRow, i, rowMap, rows_0, rowstoDisplay, value_0;
  if (this$static.graph.colorMgr.conditionalColors && !this$static.isArea) {
    this$static.colorRulesLegendMap = new HashMap;
    this$static.graph.colorMgr.additionalLegendItemsConditionalFormatMap = new HashMap;
    baseScale = $getCategoryScale(this$static.sGraph);
    rows_0 = null;
    !!baseScale && (rows_0 = baseScale.rowsToDisplay);
    if (!!rows_0 && rows_0.size_1() > 0) {
      rowMap = buildRowMap(rows_0);
      curCol = $getFirstVisibleCol(this$static.graph.data_0);
      while (curCol) {
        colNumFormatter = null;
        rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol);
        for (i = 0; i < rowstoDisplay.size_1(); i++) {
          curRow = castTo(rowstoDisplay.get_1(i), 7);
          if (!curRow)
            continue;
          cell = $getCell(this$static.graph.data_0, curRow.curIndex, curCol.curIndex);
          if (cell) {
            !colNumFormatter && (colNumFormatter = $getDataLabelFormatterForCell(this$static.sGraph, cell));
            value_0 = $getCellValueForGraphType(this$static, cell);
            colLabel = $getColName(cell);
            this$static.graph.data_0.isPeriodOverPeriod || (colLabel = $getAltValueColumnName(this$static.graph.data_0));
            if (!isNaN(value_0)) {
              colorRuleLegendItem = $getAdditionalLegendItemsForCell(this$static.graph.colorMgr, cell, this$static.graph.data_0.valueColumnName, colLabel, legendItemInfoList, $getLegend(this$static.graph), colNumFormatter);
              !!colorRuleLegendItem && $put_0(this$static.colorRulesLegendMap, cell, colorRuleLegendItem);
            }
          }
        }
        curCol = $getNextVisibleCol(this$static.graph.data_0, curCol);
      }
    }
  }
}

function $getMaxBarWidth(this$static){
  var maxBarWidth, xScale, yScale;
  maxBarWidth = 60;
  if (this$static.graph.graphType == 18 || this$static.graph.graphType == 20) {
    maxBarWidth = 100;
  }
   else if (!this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isCategoryScatter) {
    if (this$static.sGraph.isHorizontal) {
      yScale = $getYScale(this$static.sGraph, false);
      !!yScale && (maxBarWidth = round_int($getInnerBoundsRect(yScale).height_0 * 0.3));
    }
     else {
      xScale = $getXScale(this$static.sGraph, false);
      !!xScale && (maxBarWidth = round_int($getInnerBoundsRect(xScale).width_0 * 0.3));
    }
  }
  this$static.graph.hasTimeScale() && maxBarWidth > 150 && (maxBarWidth = 150);
  return maxBarWidth;
}

function $getMinimumTicksBetweenBars(this$static, maxRows){
  var baseScale, curRow, curTicks, data_0, lastTicks, minTicksBetweenPoints, numRows, rowIndex, sGraph;
  sGraph = castTo(this$static.graph, 40);
  baseScale = $getCategoryScale(sGraph);
  if (instanceOf(baseScale, 56)) {
    data_0 = this$static.graph.data_0;
    numRows = data_0.numVisibleRows;
    lastTicks = 0;
    minTicksBetweenPoints = 1557628928;
    maxRows > numRows && (maxRows = numRows);
    curRow = $getFirstVisibleRow(data_0);
    for (rowIndex = 0; rowIndex < maxRows; rowIndex++) {
      if (curRow) {
        curTicks = curRow.timeMS;
        lt(sub_1(curTicks, lastTicks), minTicksBetweenPoints) && (minTicksBetweenPoints = sub_1(curTicks, lastTicks));
        lastTicks = curTicks;
        curRow = $getNextVisibleRow(data_0, curRow);
      }
    }
    return minTicksBetweenPoints;
  }
  return 0;
}

function $getPaddingForOutsideRightDataLabels(this$static, width_0){
  var cell, colIndex, column, curRow, curWidth, label_0, labelDim, maxWidth, rnd;
  if (!this$static.sGraph.data_0)
    return new CFDimension(0, 0);
  rnd = this$static.sGraph.rnd;
  maxWidth = round_int(width_0 / 3);
  curWidth = 0;
  colIndex = 0;
  curRow = $getFirstVisibleRow(this$static.sGraph.data_0);
  column = $getLastVisibleCol(this$static.sGraph.data_0);
  !!column && (colIndex = column.origIndex);
  while (curRow) {
    cell = $getCellByCellIndex(curRow, colIndex);
    if (cell) {
      label_0 = $getDataLabelTextForOutsideLabel(this$static, cell);
      if (label_0 != null) {
        labelDim = rnd.measureText_0(label_0, this$static.sGraph.dataLabel.font_0);
        labelDim.width_0 > curWidth && (curWidth = labelDim.width_0);
      }
    }
    curRow = $getNextVisibleRow(this$static.graph.data_0, curRow);
  }
  curWidth > 0 && (curWidth += 4);
  curWidth > maxWidth && (curWidth = maxWidth);
  return new CFDimension(0, curWidth);
}

function $getPaddingForOutsideTopDataLabels(this$static){
  var cell, colIndex, column, curHeight, curRow, horizDim, label_0, labelDim, maxHeight, rnd;
  if (!this$static.sGraph.data_0)
    return new CFDimension(0, 0);
  if (this$static.sGraph.dataLabel.rotated) {
    horizDim = $getPaddingForOutsideRightDataLabels(this$static, this$static.sGraph.bnds.height_0);
    return new CFDimension(horizDim.height_0, 0);
  }
  rnd = this$static.sGraph.rnd;
  maxHeight = round_int(this$static.sGraph.bnds.height_0 / 5);
  curHeight = 0;
  colIndex = 0;
  curRow = $getFirstVisibleRow(this$static.sGraph.data_0);
  column = $getLastVisibleCol(this$static.sGraph.data_0);
  !!column && (colIndex = column.origIndex);
  while (curRow) {
    cell = $getCellByCellIndex(curRow, colIndex);
    if (cell) {
      label_0 = $getDataLabelTextForOutsideLabel(this$static, cell);
      if (label_0 != null) {
        labelDim = rnd.measureText_0(label_0, this$static.sGraph.dataLabel.font_0);
        labelDim.height_0 > curHeight && (curHeight = labelDim.height_0);
      }
    }
    curRow = $getNextVisibleRow(this$static.graph.data_0, curRow);
  }
  curHeight > maxHeight && (curHeight = maxHeight);
  return new CFDimension(curHeight, 0);
}

function $getProjBarGE(barInfo, rect, drawGrayBars){
  var fillColor, minMaxScale, projBarGE;
  !rect && (rect = $getRectForDisplay(barInfo, null));
  fillColor = barInfo.fill_0.color_0;
  drawGrayBars && (fillColor = ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
  minMaxScale = castTo($getScaleByTypeNumber(barInfo.handler.sGraph, ST_MINMAX, 0), 67);
  projBarGE = $getPatternProjBarGE(minMaxScale, fillColor, rect);
  $addShape(projBarGE, $getDottedRectShape(rect, ($clinit_CFColor() , BLACK)));
  projBarGE.dataObject = barInfo;
  return projBarGE;
}

function $getSeriesInfoToUseForHoverHints(this$static, hoverData, seriesIndex){
  if (seriesIndex >= 0)
    return castTo($get_2(this$static.graph.seriesShapes, seriesIndex), 19);
  return $getSingleUseSeriesInfoForConditionalRuleHoverHints(this$static, hoverData);
}

function $getSingleUseSeriesInfoForConditionalRuleHoverHints(this$static, hoverData){
  var indexInfo, indexInfo$iterator, list, shapeInfo, shapeInfo$iterator;
  if (hoverData != null && instanceOf(hoverData, 37) && castTo(hoverData, 37).type_0 == 13 && !!this$static.colorRulesLegendMap && $size(this$static.colorRulesLegendMap) > 0 && this$static.graph.seriesShapes.array.length > 0) {
    list = new ArrayList;
    for (indexInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); indexInfo$iterator.i < indexInfo$iterator.this$01.array.length;) {
      indexInfo = castTo($next_3(indexInfo$iterator), 19);
      if (!indexInfo.srsShapeList || indexInfo.srsShapeList.array.length == 0)
        continue;
      for (shapeInfo$iterator = new ArrayList$1(indexInfo.srsShapeList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
        shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
        shapeInfo.isBar() && maskUndefined($get_1(this$static.colorRulesLegendMap, shapeInfo.cell)) === maskUndefined(hoverData) && (list.array[list.array.length] = shapeInfo , true);
      }
    }
    if (list.array.length > 0)
      return new SeriesInfo(list, null);
  }
  return null;
}

function $getStackedBarRects(this$static){
  var catRectAry, curIndex, curRect, shpInfo, shpInfo$iterator, srsInfo, srsInfo$iterator;
  catRectAry = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, $getNumRows(this$static.graph.data_0), 0, 1);
  for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 19);
    for (shpInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      if (!!shpInfo.cell && instanceOf(shpInfo, 25)) {
        curIndex = $getCurRowIndex(shpInfo.cell);
        curRect = castTo(shpInfo, 25).getRect();
        !catRectAry[curIndex]?(catRectAry[curIndex] = new CFRect(curRect.x_0, curRect.y_0, curRect.width_0, curRect.height_0)):this$static.sGraph.isHorizontal?curRect.x_0 > catRectAry[curIndex].x_0?$setWidth(catRectAry[curIndex], catRectAry[curIndex].width_0 + curRect.width_0):(catRectAry[curIndex] = new CFRect(curRect.x_0, curRect.y_0, curRect.width_0 + catRectAry[curIndex].width_0, curRect.height_0)):curRect.y_0 < catRectAry[curIndex].y_0?(catRectAry[curIndex] = new CFRect(curRect.x_0, curRect.y_0, curRect.width_0, curRect.height_0 + catRectAry[curIndex].height_0)):$setHeight(catRectAry[curIndex], catRectAry[curIndex].height_0 + curRect.height_0);
      }
    }
  }
  return catRectAry;
}

function $getStackedSeriesShape(barList, isHorizontal){
  var barInfo, curBarInfo, curIndex, i, i0, moveTo_0, nextIndex, rect, rect$iterator, rects, retPath, shpInfo, shpInfo$iterator, startIndex, tmpRect;
  retPath = new CFPath;
  rects = new ArrayList;
  if (barList.array.length > 0) {
    curBarInfo = (checkCriticalElementIndex(0, barList.array.length) , castTo(barList.array[0], 25));
    nextIndex = $getCurRowIndex(curBarInfo.cell);
    for (shpInfo$iterator = new ArrayList$1(barList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      barInfo = castTo(shpInfo, 25);
      if ($getCurRowIndex(barInfo.cell) == nextIndex) {
        $add_1(rects, barInfo.getRect());
        nextIndex = nextIndex + 1;
      }
       else {
        rects.array[rects.array.length] = null;
        $add_1(rects, barInfo.getRect());
        nextIndex = $getCurRowIndex(barInfo.cell) + 1;
      }
    }
  }
  startIndex = 0;
  curIndex = 0;
  moveTo_0 = true;
  for (rect$iterator = new ArrayList$1(rects); rect$iterator.i < rect$iterator.this$01.array.length;) {
    rect = castTo($next_3(rect$iterator), 4);
    if (!rect) {
      moveTo_0 = true;
      for (i0 = curIndex - 1; i0 >= startIndex; i0--) {
        tmpRect = (checkCriticalElementIndex(i0, rects.array.length) , castTo(rects.array[i0], 4));
        $addToStackedShape(retPath, tmpRect, isHorizontal, false, true);
      }
      $add(retPath, new CFPathElement);
      startIndex = curIndex + 1;
    }
     else {
      $addToStackedShape(retPath, rect, isHorizontal, moveTo_0, false);
      moveTo_0 = false;
    }
    ++curIndex;
  }
  for (i = curIndex - 1; i >= startIndex; i--) {
    tmpRect = (checkCriticalElementIndex(i, rects.array.length) , castTo(rects.array[i], 4));
    $addToStackedShape(retPath, tmpRect, isHorizontal, false, true);
  }
  $add(retPath, new CFPathElement);
  return retPath;
}

function $getValueScalePadding(this$static){
  var barWidth, cell, cell$iterator, entry, halfWidth, maxX, minX, numRows, outerIter, paddingEnd, paddingStart, pos, retDim, row, scale, scaleMaxValue, scaleMinValue;
  retDim = null;
  this$static.graph.typeAttributes.isDotPlot && (this$static.sGraph.isHorizontal?(retDim = new CFDimension(0, 3)):(retDim = new CFDimension(3, 0)));
  if (this$static.graph.typeAttributes.isSymbol || this$static.graph.typeAttributes.isSymbolOverlay) {
    numRows = this$static.graph.data_0.numVisibleRows;
    barWidth = this$static.getBarWidth(numRows);
    halfWidth = $wnd.Math.ceil(barWidth / 2);
    scale = $getValueScaleByNumber(this$static.sGraph, 0);
    if (scale) {
      paddingEnd = 0;
      paddingStart = 0;
      scaleMinValue = scale.min_0;
      scaleMaxValue = scale.max_0;
      minX = scale.getPositionForValue(scaleMinValue);
      maxX = scale.getPositionForValue(scaleMaxValue);
      row = $getFirstVisibleRow(this$static.graph.data_0);
      while (row) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          if (!!cell && $getValue(cell) >= scaleMinValue && $getValue(cell) <= scaleMaxValue) {
            pos = scale.getPositionForValue($getValue(cell));
            pos - halfWidth < minX - paddingStart && (paddingStart = minX - (pos - halfWidth));
            pos + halfWidth > maxX + paddingEnd && (paddingEnd = pos + halfWidth - maxX);
          }
        }
        row = $getNextVisibleRow(this$static.graph.data_0, row);
      }
      this$static.sGraph.isHorizontal?(retDim = new CFDimension($wnd.Math.ceil(paddingStart), $wnd.Math.ceil(paddingEnd))):(retDim = new CFDimension($wnd.Math.ceil(paddingEnd), $wnd.Math.ceil(paddingStart)));
    }
  }
   else 
    $isHoriz100pctDLoutsideRight(this$static)?(retDim = $getPaddingForOutsideRightDataLabels(this$static, this$static.sGraph.bnds.width_0)):$isVertDLOutsideTop(this$static) && (retDim = $getPaddingForOutsideTopDataLabels(this$static));
  this$static.sGraph.isHorizontal && $hasAnnotations(this$static.sGraph) && !this$static.sGraph.hideAnnotations && !this$static.sGraph.chart.hideAnnotations && (retDim?(retDim = new CFDimension(retDim.width_0, retDim.height_0 + 32)):(retDim = new CFDimension(0, 32)));
  if (retDim)
    return retDim;
  return noPadding;
}

function $handlerSpecificHoverEffects(this$static, hoverData, rnd, seriesIndex){
  if ($hasInteractions(this$static.graph)) {
    if (!$isLineBar(this$static.graph)) {
      $clearAllGeArrays(this$static.sGraph);
      this$static.sGraph.currentHoverString = null;
    }
    this$static.drawAllBars(seriesIndex, hoverData);
    if (this$static.isArea && seriesIndex != -1) {
      $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
      this$static.drawBarsForASeries(castTo($get_2(this$static.graph.seriesShapes, seriesIndex), 19), false, seriesIndex, hoverData);
      $clearInnerBoundsClip(this$static, false, false);
    }
    this$static.drawHoverEffectsAfterBars();
    $drawHints(this$static, rnd, hoverData, seriesIndex);
    this$static.graph.drawAnnotations();
  }
}

function $isDatalabelOutside(this$static, position){
  if (position == 4 || position == 0 || !!this$static.graph.dataLabel && this$static.graph.dataLabel.showTotal)
    return true;
  return false;
}

function $isHoriz100pctDLoutsideRight(this$static){
  if (!!this$static.sGraph.dataLabel && (this$static.sGraph.dataLabelText != null || this$static.sGraph.dataLabel.showTotal) && this$static.sGraph.isHorizontal && $isDatalabelOutside(this$static, this$static.sGraph.dataLabel.position) && this$static.sGraph.typeAttributes.percentOfCategoryData && this$static.sGraph.typeAttributes.isStacked)
    return true;
  return false;
}

function $isMultiBar(this$static){
  return !this$static.graph.typeAttributes.isStacked && !this$static.graph.typeAttributes.isGanttPercent && !this$static.graph.typeAttributes.isCategoryScatter && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isGroupedStacked && !this$static.graph.typeAttributes.isBullet && !this$static.graph.typeAttributes.isOverlay && !this$static.graph.typeAttributes.isNestedBar;
}

function $isValidHintCell(this$static, cell){
  if ((this$static.graph.graphType == 18 || this$static.graph.graphType == 20) && !!cell.row && cell.row.hidden)
    return false;
  return true;
}

function $isVertDLOutsideTop(this$static){
  if (!!this$static.sGraph.dataLabel && (this$static.sGraph.dataLabelText != null || this$static.sGraph.dataLabel.showTotal) && !this$static.sGraph.isHorizontal && $isDatalabelOutside(this$static, this$static.sGraph.dataLabel.position))
    return true;
  return false;
}

function $processChartOptions_4(this$static){
  var secondValueScale;
  this$static.graph.typeAttributes.percentOfSeriesData && (this$static.graph.hoverLabelText = '%_NAME : %_ORIG_VALUE : %_PERCENT_OF_TOTAL');
  $processChartOptions_3(this$static);
  if (this$static.graph.typeAttributes.percentOfSeriesData) {
    $convertDatalabelAndHoverMacros(this$static.graph, '%_VALUE', '%_ORIG_VALUE');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_CATEGORY_TOTAL', '%_ORIG_VALUE');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_PERCENT_OF_CATEGORY', '%_PERCENT_OF_100_0');
    $forceScaleToPercent(this$static, true);
  }
   else if (this$static.graph.typeAttributes.percentOfCategoryData) {
    $convertDatalabelAndHoverMacros(this$static.graph, '%_VALUE', '%_ORIG_VALUE');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_CATEGORY_TOTAL', '%_ORIG_CATEGORY_TOTAL');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_PERCENT_OF_TOTAL', '%_ORIG_PERCENT_OF_TOTAL');
    $forceScaleToPercent(this$static, true);
  }
   else if (this$static.graph.graphType != 23 && this$static.graph.graphType != 24) {
    $convertDatalabelAndHoverMacros(this$static.graph, '%_ORIG_VALUE', '%_VALUE');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_ORIG_CATEGORY_TOTAL', '%_CATEGORY_TOTAL');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_PERCENT_OF_100_0', '%_PERCENT_OF_CATEGORY');
    $convertDatalabelAndHoverMacros(this$static.graph, '%_ORIG_PERCENT_OF_TOTAL', '%_PERCENT_OF_TOTAL');
  }
  if (this$static.graph.typeAttributes.isNestedBar && this$static.graph.hasChartOptions()) {
    this$static.showNestedGroupDatalabel = isTrue(this$static.graph.getChartOptionAsString('datalabel_show_group_total'));
    if (this$static.showNestedGroupDatalabel && this$static.graph.getChartOptionAsString('datalabel_text') == null) {
      $getOrCreateDataLabel(this$static.graph);
      this$static.graph.dataLabel.formatString = '%_VALUE';
    }
  }
  if ($is100pctStacked(this$static.sGraph) && $hasDualValueScales(this$static.sGraph)) {
    secondValueScale = $getValueScaleByNumber(this$static.sGraph, 1);
    $removeScale(this$static.sGraph, secondValueScale);
    if (this$static.sGraph.data_0) {
      $clearColumnsUsingSecondScale(this$static.sGraph.data_0);
      $setToPercentOfCategoryValues(this$static.sGraph.data_0);
    }
  }
}

function $reorderHorzBarRects(this$static, catBarList, numColsInCategory, catPos){
  var barInfo, height, i, shpInfo, y_0;
  for (i = 0; i < catBarList.array.length; i++) {
    shpInfo = (checkCriticalElementIndex(i, catBarList.array.length) , castTo(catBarList.array[i], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      height = barInfo.rect.height_0;
      y_0 = catPos + (numColsInCategory - 1 - i) * height;
      this$static.categorySortType == CAT_SORT_DSC && (y_0 = catPos + i * height);
      $setY_0(barInfo.rect, y_0);
    }
  }
}

function $reorderVertBarRects(this$static, catBarList, numColsInCategory, catPos){
  var barInfo, i, shpInfo, width_0, x_0;
  for (i = 0; i < catBarList.array.length; i++) {
    shpInfo = (checkCriticalElementIndex(i, catBarList.array.length) , castTo(catBarList.array[i], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      width_0 = barInfo.rect.width_0;
      x_0 = catPos + (numColsInCategory - 1 - i) * width_0;
      this$static.categorySortType == CAT_SORT_DSC && (x_0 = catPos + i * width_0);
      $setX_0(barInfo.rect, x_0);
    }
  }
}

function $setData_2(this$static, data_0){
  var hasDisplayLimit, theData;
  hasDisplayLimit = false;
  if ($getNumCols(data_0) == 1 && this$static.sGraph.typeAttributes.isStacked && !this$static.sGraph.typeAttributes.isDotPlot) {
    this$static.graph.previousTypeAttributes = $duplicate(this$static.graph.typeAttributes);
    this$static.graph.previousTypeAttributes.originallyStacked = true;
    this$static.graph.typeAttributes.isStacked = false;
  }
   else 
    $getNumCols(data_0) > 1 && !this$static.sGraph.typeAttributes.isStacked && !!this$static.graph.previousTypeAttributes && this$static.graph.previousTypeAttributes.originallyStacked && (this$static.graph.typeAttributes.isStacked = true);
  data_0 = $limitDataSeries(this$static, data_0, $getMobileLimit(this$static.graph, 250, $intern_36));
  $setData_1(this$static, data_0);
  this$static.graph.typeAttributes.isRunningTotal && $setNumRTPrimaryScale(this$static, $intern_12, true);
  this$static.graph.getChartOptionAsString('num_forecast_items') != null && supportsForecastFromScale(this$static.sGraph, false) && !$hasADateTimeField(this$static.sGraph.data_0) && $setNumExtraProjectedItems(this$static.sGraph, getInt(this$static.graph.getChartOptionAsString('num_forecast_items'), 0));
  this$static.graph.getChartOptionAsString('display_limit') != null && (hasDisplayLimit = true);
  $addExtraForecastItemsIfSpecified(this$static, data_0, hasDisplayLimit);
  if (this$static.graph.typeAttributes.isRunningTotal) {
    $setNumRTSeriesFromOption(this$static);
    this$static.currentViewDataGrid = null;
    theData = $clone(data_0);
    !!this$static.currentViewDataGrid && this$static.currentViewDataGrid != this$static.originalData && this$static.currentViewDataGrid != theData && this$static.currentViewDataGrid != this$static.graph.data_0 && $freeResources_11(this$static.currentViewDataGrid);
    this$static.currentViewDataGrid = theData;
    this$static.sGraph.data_0 = this$static.currentViewDataGrid;
  }
  this$static.graph.typeAttributes.percentOfSeriesData && this$static.graph.chart.version_0 < 4 && $sortRowsDesc(this$static.graph.data_0, SORT_SUM, false);
  $addOrRemoveSecondScale(this$static) && $setupColumnNumberFormats(this$static);
  this$static.graph.typeAttributes.percentOfCategoryData && $hasNegativeValues(this$static.graph.data_0) && $setWarningMessage(this$static.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this$static.graph.chart.locale));
}

function $setHideGroupInLegend(this$static, value_0){
  this$static.hideNestedGroupInLegend = value_0;
}

function $setHitShapesForBarsWithShapeList(this$static, shapeList){
  var bottom, i, innerBnds, left, nextSrsShpInfo, right, roundedBottom, roundedLeft, roundedRight, roundedTop, srsShapeInfo, top_0;
  innerBnds = this$static.graph.getInnerBounds();
  if (shapeList.array.length > 0) {
    if (this$static.sGraph.isHorizontal) {
      top_0 = (checkCriticalElementIndex(0, shapeList.array.length) , castTo(shapeList.array[0], 25)).getRect().y_0;
      roundedTop = toDouble_0(fromDouble_0($wnd.Math.round(top_0)));
      for (i = 0; i < shapeList.array.length; i++) {
        bottom = innerBnds.y_0 + innerBnds.height_0;
        srsShapeInfo = (checkCriticalElementIndex(i, shapeList.array.length) , castTo(shapeList.array[i], 18));
        if (i < shapeList.array.length - 1) {
          nextSrsShpInfo = (checkCriticalElementIndex(i + 1, shapeList.array.length) , castTo(shapeList.array[i + 1], 18));
          if (instanceOf(srsShapeInfo, 25) && instanceOf(nextSrsShpInfo, 25)) {
            bottom = $getBottom(castTo(srsShapeInfo, 25).getRect());
            bottom += (castTo(nextSrsShpInfo, 25).getRect().y_0 - bottom) / 2;
          }
        }
         else {
          bottom = $getBottom((checkCriticalElementIndex(i, shapeList.array.length) , castTo(shapeList.array[i], 25)).getRect());
        }
        roundedBottom = toDouble_0(fromDouble_0($wnd.Math.round(bottom)));
        if (roundedBottom > roundedTop) {
          $setHitShape(srsShapeInfo, new CFShape_1(new CFRect(innerBnds.x_0, roundedTop, innerBnds.width_0, roundedBottom - roundedTop), ($clinit_CFFill() , TRANSPARENT_0), null));
          roundedTop = roundedBottom;
        }
      }
    }
     else {
      left = (checkCriticalElementIndex(0, shapeList.array.length) , castTo(shapeList.array[0], 25)).getRect().x_0;
      roundedLeft = toDouble_0(fromDouble_0($wnd.Math.round(left)));
      for (i = 0; i < shapeList.array.length; i++) {
        right = innerBnds.x_0 + innerBnds.width_0;
        srsShapeInfo = (checkCriticalElementIndex(i, shapeList.array.length) , castTo(shapeList.array[i], 18));
        if (i < shapeList.array.length - 1) {
          nextSrsShpInfo = (checkCriticalElementIndex(i + 1, shapeList.array.length) , castTo(shapeList.array[i + 1], 18));
          if (instanceOf(srsShapeInfo, 25) && instanceOf(nextSrsShpInfo, 25)) {
            right = $getRight(castTo(srsShapeInfo, 25).getRect());
            right += (castTo(nextSrsShpInfo, 25).getRect().x_0 - right) / 2;
          }
        }
         else {
          right = $getRight((checkCriticalElementIndex(i, shapeList.array.length) , castTo(shapeList.array[i], 25)).getRect());
        }
        roundedRight = toDouble_0(fromDouble_0($wnd.Math.round(right)));
        if (roundedRight > roundedLeft) {
          $setHitShape(srsShapeInfo, new CFShape_1(new CFRect(roundedLeft, innerBnds.y_0, roundedRight - roundedLeft, innerBnds.height_0), ($clinit_CFFill() , TRANSPARENT_0), null));
          roundedLeft = roundedRight;
        }
      }
    }
  }
}

function $setHitShapesForMultibar(this$static){
  var i, j, shapeList, srsInfo, tmpShapeList;
  if (!this$static.graph.typeAttributes.isStacked && !this$static.graph.typeAttributes.isGanttPercent && !this$static.graph.typeAttributes.isCategoryScatter && !this$static.graph.typeAttributes.isSymbolOverlay && !this$static.graph.typeAttributes.isSymbol && !this$static.graph.typeAttributes.isGroupedStacked && !this$static.graph.typeAttributes.isBullet && !this$static.graph.typeAttributes.isOverlay && !this$static.graph.typeAttributes.isNestedBar && $hasInteractions(this$static.graph)) {
    if (this$static.graph.seriesShapes.array.length == 1) {
      srsInfo = castTo($get_2(this$static.graph.seriesShapes, 0), 19);
      shapeList = srsInfo.srsShapeList;
      $setHitShapesForBarsWithShapeList(this$static, shapeList);
    }
     else {
      shapeList = new ArrayList;
      for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
        srsInfo = castTo($get_2(this$static.graph.seriesShapes, i), 19);
        tmpShapeList = srsInfo.srsShapeList;
        if (tmpShapeList.array.length > 0 && instanceOf((checkCriticalElementIndex(0, tmpShapeList.array.length) , tmpShapeList.array[0]), 25)) {
          for (j = 0; j < srsInfo.srsShapeList.array.length; j++) {
            $add_1(shapeList, castTo($get_2(srsInfo.srsShapeList, j), 18));
          }
        }
      }
      $sort(shapeList, new HandlerBar$2(this$static));
      $setHitShapesForBarsWithShapeList(this$static, shapeList);
    }
  }
}

function $setHoverText_1(this$static, hoverData){
  var current, hoverLabel, hoverRect, labelPosition, numberFormatter, projInfo;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 25)) {
      current = castTo(hoverData, 25);
      if (!!current && !!current.rect && !!current.cell) {
        numberFormatter = $getHoverFormatterForCell(this$static.sGraph, current.cell);
        $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, numberFormatter, current.cell));
        $setHoverText(this$static.graph, current.hoverText);
        if (!$hasInteractions(this$static.graph) && !this$static.graph.rnd.supportsNativeHover()) {
          labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
          if (instanceOf(hoverData, 25)) {
            current = castTo(hoverData, 25);
            if (!!current && !!current.rect) {
              hoverRect = current.rect;
              if (this$static.graph.typeAttributes.isCategoryScatter) {
                labelPosition = $getPositionOverride(hoverLabel, current.cell, labelPosition);
                hoverRect = $duplicate_5(current.rect);
                $setY_0(hoverRect, current.rect.y_0 - 5);
              }
              $addPrimary_1(hoverLabel, this$static.graph.rnd, current.hoverText, current.cell, hoverRect, labelPosition);
            }
          }
        }
      }
    }
     else if (instanceOf(hoverData, 87)) {
      projInfo = castTo(hoverData, 87);
      $addPrimary_2(hoverLabel, this$static.graph.rnd, projInfo.hoverText, projInfo.drawPoint, projInfo.hoverPosition, true);
    }
  }
}

function $setupColumnNumberFormats(this$static){
  $setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 0, 0, this$static.lineCount - 1);
  $isGroupItemValue(this$static.sGraph.data_0)?$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, 0, 0):$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, this$static.lineCount, $getNumCols(this$static.sGraph.data_0));
  $updateNumberFormats_0(this$static.sGraph, false);
  this$static.numberFormatHandled = true;
}

function $shouldProcessDataLabel(this$static, barInfo, dataLabel){
  if (!this$static.graph.typeAttributes.isStacked || dataLabel.showIfZeroValue || !this$static.graph.isHorizontal_0() && barInfo.rect.height_0 >= 2 || this$static.graph.isHorizontal_0() && barInfo.rect.width_0 >= 2)
    return true;
  if (!!barInfo.cell && !!barInfo.cell.row && !!barInfo.cell.row.cellMap && $size(barInfo.cell.row.cellMap) == 1)
    return true;
  return false;
}

function $sortBarsByCategory(this$static, rowBarList, numColsInCategory, catPosList, barWidth){
  var catBarList, i;
  for (i = 0; i < rowBarList.length; i++) {
    catBarList = rowBarList[i];
    if (!!catBarList && catBarList.array.length > 0) {
      $sort(catBarList, new HandlerBar$1);
      (!this$static.graph.typeAttributes.isStacked || this$static.categorySortType == CAT_SORT_DSC || this$static.graph.typeAttributes.isNestedBar) && reverse(catBarList);
      instanceOf((checkCriticalElementIndex(0, catBarList.array.length) , catBarList.array[0]), 25) && (this$static.sGraph.isHorizontal?this$static.reorderHorzBarRects(catBarList, numColsInCategory, catPosList[i] - barWidth / 2):this$static.reorderVertBarRects(catBarList, numColsInCategory, catPosList[i] - barWidth / 2));
    }
  }
}

function $sortOverlayBars(this$static){
  var endClip, geAry, startClip;
  geAry = this$static.graph.geAry;
  startClip = null;
  endClip = null;
  if (geAry.size_1() > 0) {
    if ($isClip(castTo(geAry.get_1(0), 12))) {
      startClip = castTo(geAry.get_1(0), 12);
      geAry.remove_2(0);
    }
    if (geAry.size_1() > 0 && $isClip(castTo(geAry.get_1(geAry.size_1() - 1), 12))) {
      endClip = castTo(geAry.get_1(geAry.size_1() - 1), 12);
      geAry.remove_2(geAry.size_1() - 1);
    }
    this$static.graph.geAry.sort_0(new HandlerBar$3(this$static));
    !!startClip && this$static.graph.geAry.add_1(0, startClip);
    !!endClip && this$static.graph.geAry.add_0(endClip);
  }
}

function HandlerBar(){
  $clinit_HandlerBar();
  HandlerScaleBase.call(this);
  this.barWidthPercent = DEFAULT_BAR_WIDTH_PERCENT;
}

defineClass(60, 64, $intern_37, HandlerBar);
_.addBarShapeToGEAry = function addBarShapeToGEAry(bar, shape_0){
  $addBarShapeToGEAry(this, bar, shape_0);
}
;
_.adjustForMultiColumn = function adjustForMultiColumn(barRect, numCols, colIndex, curCol, lastRect, value_0){
  return $adjustForMultiColumn(this, barRect, numCols, colIndex, lastRect, value_0);
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_0(sGraph, type_0, curTime, valueScale){
  $createDrawObjectsForFrame(this, sGraph, type_0, curTime, valueScale);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_0(sGraph, rows_0, baseScale, valScale, valScale2){
  var barIndex, barInfo, barList, barRect, barWidth, catPosList, catScalePos, cell, curCol, curIndex, curRow, fill, fillToUse, hasFilteredData, i, inShowAsFilteredMode, isLogScale, lastNonNullState, lastState, lbHandler, minCatPos, minMaxScale, minValuePos, numCols, numColsInCategory, numRows, overRideColor, rects, reverseRowMap, rowBarList, rowIndex, rowMap, rowstoDisplay, showAsFiltered, srsInfo, value_0, valueColumnName, valueScale, valueScalePos, zeroValuePos;
  if (!rows_0)
    return;
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && (this.graph.data_0.hasFilteredCols || this.graph.data_0.hasFilteredRows);
  numCols = this.graph.data_0.numVisibleCols;
  numRows = rows_0.size_1();
  rowMap = buildRowMap(rows_0);
  reverseRowMap = buildReverseRowMap(rows_0);
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  this.graph.typeAttributes.percentOfSeriesData && (minMaxScale = null);
  (this.graph.typeAttributes.isPeriodOverPeriod || this.graph.data_0.isPeriodOverPeriod) && (this.reverseMultibarLayoutOrder = true);
  barWidth = this.getBarWidth(numRows);
  minCatPos = baseScale.getMinPosition();
  numColsInCategory = numCols;
  if ($isLineBar(this.graph)) {
    lbHandler = castTo(this.graph.handler, 111);
    lbHandler.barsOnLeftScale?(numColsInCategory = $getNumColsPrimaryScale(this.graph.data_0)):(numColsInCategory = $getNumColsSecondaryScale(this.graph.data_0));
  }
   else 
    this.isFlexTableChart && (numColsInCategory = 1);
  barIndex = 0;
  rowBarList = initUnidimensionalArray(Ljava_util_ArrayList_2_classLit, $intern_17, 3, numRows, 0, 1);
  catPosList = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
    valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (valueScale) {
      rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol);
      isLogScale = instanceOf(valueScale, 73);
      minValuePos = valueScale.getMinPosition();
      zeroValuePos = 0;
      isLogScale || (zeroValuePos = valueScale.getPositionForValue(0));
      barList = new ArrayList;
      fill = new CFFill($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex));
      lastNonNullState = null;
      for (i = 0; i < rowstoDisplay.size_1(); i++) {
        curRow = castTo(rowstoDisplay.get_1(i), 7);
        if (!curRow)
          continue;
        rowIndex = castTo(getEntryValueOrNull($getEntry(reverseRowMap.hashCodeMap, curRow)), 29).value_0;
        curIndex = rowIndex;
        instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
        cell = $getCell(this.graph.data_0, curRow.curIndex, curCol.curIndex);
        value_0 = $getCellValueForGraphType(this, cell);
        if (!isNaN(value_0)) {
          catScalePos = baseScale.getPositionForValue(curIndex);
          valueScalePos = valueScale.getPositionForValue(value_0);
          barRect = this.getBarRect(minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, barWidth);
          (numColsInCategory > 1 && !this.graph.typeAttributes.isSymbolOverlay && !this.graph.typeAttributes.isOverlay || instanceOf(this, 176)) && (barRect = this.adjustForMultiColumn(barRect, numColsInCategory, barIndex, curCol, null, value_0));
          rects[rowIndex] = barRect;
          lastState = $getLastShapeForCell(this.sGraph, cell, false);
          !!lastState && (lastNonNullState = lastState);
          !lastState && (lastState = lastNonNullState);
          fillToUse = fill;
          if (this.graph.data_0.isPeriodOverPeriod)
            fillToUse = $getColorForCellValueSeriesName(this.graph, cell, $getColName(cell), fill);
          else {
            if (numCols == 1) {
              overRideColor = $getColorForCategoryName_0(this.graph, cell);
              !!overRideColor && (fillToUse = new CFFill(overRideColor));
            }
            valueColumnName = this.graph.data_0.valueColumnName;
            instanceOf(this, 176) && curCol.curIndex > 0 && (valueColumnName = curCol.name_0);
            fillToUse = $getColorForCellValueSeriesName(this.graph, cell, valueColumnName, fillToUse);
          }
          showAsFiltered = inShowAsFilteredMode && (curCol.showAsFiltered || curRow.showAsFiltered);
          showAsFiltered && (fillToUse = new CFFill($deSaturateAndLighten(fillToUse.color_0, 0.9, 0.4)));
          barInfo = new SrsBarInfo_1(this, cell, barRect, null, fillToUse, null, -1, lastState);
          inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (barInfo.highlightAlways = true);
          inShowAsFilteredMode && (barInfo.drillOnColOnly = true);
          barList.array[barList.array.length] = barInfo;
          if (this.categorySortType != 0 && !isLogScale) {
            catPosList[rowIndex] = minCatPos + catScalePos;
            !rowBarList[rowIndex] && (rowBarList[rowIndex] = new ArrayList);
            $add_1(rowBarList[rowIndex], barInfo);
          }
        }
      }
      ++barIndex;
      if (barList.array.length > 0) {
        srsInfo = new SeriesInfo(barList, null);
        $addRegressionAndProjectionDataToSrsInfo(this, minMaxScale, valueScale, curCol, srsInfo);
        $add_1(this.graph.seriesShapes, srsInfo);
      }
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && $calcMinMaxAvgPositions(minMaxScale);
  this.categorySortType != 0 && !this.graph.typeAttributes.isNestedBar && !this.graph.typeAttributes.isOverlay && $sortBarsByCategory(this, rowBarList, numColsInCategory, catPosList, barWidth);
  $setHitShapesForMultibar(this);
  this.drawAllBars(-1, null);
}
;
_.drawAllBars = function drawAllBars(index_0, hoverData){
  $drawAllBars(this, index_0, hoverData);
}
;
_.drawAllBarsForOneHoverData = function drawAllBarsForOneHoverData(index_0, hoverData){
  var curBars, curIndex, drawGrayBars, hasClip, isSingleSeriesHover, minMaxScale, minMaxScale0, srsItem, srsItem$iterator, srsItem$iterator0, drawGrayBars_0;
  if (hoverData != null && instanceOf(hoverData, 36))
    return;
  isSingleSeriesHover = hoverData != null && $getNumCols(this.graph.data_0) == 1 && this.graph.seriesShapes.array.length == 1 && index_0 == 0;
  if (isSingleSeriesHover && !!$getLegend(this.graph) && $getLegend(this.graph).hoverFromLegend) {
    isSingleSeriesHover = false;
    $getLegend(this.graph).hoverFromLegend = false;
  }
  $addInnerBoundsClip(this, !this.graph.isThumbnail, false, false);
  minMaxScale0 = castTo($getScaleByTypeNumber(this.sGraph, ST_MINMAX, 0), 67);
  this.graph.graphType == 3 || this.graph.graphType == 2?!!minMaxScale0 && $showMinMaxAvgLines(minMaxScale0) && !!castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo && $addMinMaxAvgLines(minMaxScale0, castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo.stroke_0):this.graph.graphType != 12 && !!minMaxScale0 && $showMinMaxAvgLines(minMaxScale0) && !!this.graph.seriesShapes && this.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && $addMinMaxAvgLines(minMaxScale0, new CFStroke(castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).fill_0.color_0, 1));
  curIndex = 0;
  curBars = null;
  for (srsItem$iterator0 = new ArrayList$1(this.graph.seriesShapes); srsItem$iterator0.i < srsItem$iterator0.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator0), 19);
    if ($isBar(srsItem)) {
      drawGrayBars = (drawGrayBars_0 = false , curIndex != index_0 && index_0 != -1?(drawGrayBars_0 = true):hoverData != null && this.graph.seriesShapes.array.length == 1 && $getNumCols(this.graph.data_0) == 1 && index_0 == 0?this.graph.highlightFromExternal?(this.graph.highlightFromExternal = false):$getNumCols(this.graph.data_0) > 1 && (drawGrayBars_0 = true):index_0 == -1 && hoverData != null && instanceOf(hoverData, 37) && !$dontHoverLegendItem(castTo(hoverData, 37))?(drawGrayBars_0 = true):index_0 == -1 && hoverData != null && instanceOf(hoverData, 7) && (drawGrayBars_0 = true) , drawGrayBars_0);
      hoverData != null && index_0 == curIndex && !this.graph.typeAttributes.isNestedBar && !isSingleSeriesHover?(curBars = srsItem):this.drawBarsForASeries(srsItem, drawGrayBars, index_0, hoverData);
    }
    ++curIndex;
  }
  !!curBars && this.drawBarsForASeries(curBars, false, index_0, hoverData);
  isSingleSeriesHover && $drawSingleBarHovers(this, hoverData);
  hasClip = false;
  minMaxScale = castTo($getScaleByTypeNumber(this.sGraph, ST_MINMAX, 0), 67);
  if (minMaxScale) {
    for (srsItem$iterator = new ArrayList$1(this.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
      srsItem = castTo($next_3(srsItem$iterator), 19);
      if (srsItem.regressionLinePoints) {
        if (!hasClip) {
          $addInnerBoundsClip(this, !this.graph.isThumbnail, false, true);
          hasClip = true;
        }
        $drawLinearRegressionLine(minMaxScale, srsItem);
      }
    }
    hasClip && $clearInnerBoundsClip(this, false, true);
  }
  $clearInnerBoundsClip(this, false, false);
  this.graph.typeAttributes.isOverlay && hoverData == null && $sortOverlayBars(this);
}
;
_.drawBarFromSrsInfo = function drawBarFromSrsInfo(barInfo, drawGrayBars, selectedIndex, drawingSingleBar){
  var hitShape, projBarGE, shape_0;
  hitShape = null;
  drawingSingleBar || (hitShape = barInfo.getHitShape());
  !!hitShape && this.addBarShapeToGEAry(barInfo, hitShape);
  shape_0 = barInfo.getShape();
  if (shape_0) {
    this.dontAntiAliasBars || !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
    if (drawGrayBars && !barInfo.highlightAlways) {
      shape_0.fill_0.color_0 != ($clinit_CFColor() , TRANSPARENT) && $setFill(shape_0, DISABLED_LIGHT_GRAY);
      !!shape_0.stroke_0 && $setStroke(shape_0, new CFStroke(DISABLED_LIGHT_GRAY, shape_0.stroke_0.width_0));
      (this.graph.typeAttributes.isNestedBar || this.graph.typeAttributes.isGroupedStacked || this.graph.typeAttributes.isMarimekko) && $setStroke(shape_0, new CFStroke(WHITE, 1));
      if (this.graph.outlineStyle) {
        $setStroke(shape_0, getOutlineStroke(shape_0.fill_0, shape_0.stroke_0));
        $setFill_0(shape_0, getOutlineFill(shape_0.fill_0));
      }
    }
     else 
      selectedIndex != -1 && barInfo.groupedRow != -1 && $setFill(shape_0, $getColor(this.graph, 'NestedBarDisabled', '#94959560'));
    if (!!barInfo.cell && $isForecastItem(barInfo.cell)) {
      projBarGE = $getProjBarGE(barInfo, null, drawGrayBars);
      $addGraphicElement_0(this.graph, projBarGE);
    }
     else {
      this.addBarShapeToGEAry(barInfo, shape_0);
    }
  }
}
;
_.drawBarsForASeries = function drawBarsForASeries(srsItem, drawGrayBars, selectedIndex, hoverData){
  $drawBarsForASeries(this, srsItem, drawGrayBars, selectedIndex, hoverData);
}
;
_.drawDataLabel = function drawDataLabel_0(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  return $drawDataLabel(this, dataLabel, rnd, existingLableRects, shpInfo, data_0);
}
;
_.drawHoverEffectsAfterBars = function drawHoverEffectsAfterBars(){
}
;
_.freeResources = function freeResources_13(dataToKeep){
  $freeResources_18(this, dataToKeep);
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems_1(){
  return $getAdditionalLegendItems_0(this);
}
;
_.getBarRect = function getBarRect(minCatPos, catPos, minValPos, valPos, zeroValuePos, barWidth){
  return $getBarRect(this, minCatPos, catPos, minValPos, valPos, zeroValuePos, barWidth);
}
;
_.getBarWidth = function getBarWidth(numRows){
  return $getBarWidth(this, numRows);
}
;
_.getDrawingOrderedSeriesShapes = function getDrawingOrderedSeriesShapes(){
  return this.graph.seriesShapes;
}
;
_.getDrillFilter = function getDrillFilter_0(shapeInfo, clicked){
  var curRow, curRow$iterator, filter, filterBase, index_0, otherNames;
  if (this.graph.displayLimit > 0 && !!shapeInfo && !!shapeInfo.cell && !!shapeInfo.cell.row && shapeInfo.cell.row.isOtherRow) {
    if ($usingCardBus(this.graph.chart) && clicked) {
      $handleClickOnOtherInCardBusMode(this.graph, shapeInfo.cell.row, this.graph.displayLimit);
      return this.graph.drillFilter;
    }
    otherNames = new ArrayList;
    index_0 = 0;
    for (curRow$iterator = this.graph.data_0.rows_0.iterator(); curRow$iterator.hasNext_0();) {
      curRow = castTo(curRow$iterator.next_1(), 7);
      if (!curRow.hidden) {
        index_0 >= this.graph.displayLimit && $add_1(otherNames, curRow.name_0);
        ++index_0;
      }
    }
    filterBase = new FilterBase($getRowParentName(shapeInfo.cell), 'IN', shapeInfo.cell.row);
    filterBase.values = otherNames;
    $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
    return $clinit_StrUtil() , getDrillFilterFromFilters(filter, null);
  }
  return null;
}
;
_.getHintTextOverride = function getHintTextOverride_0(){
  if (this.graph.typeAttributes.percentOfCategoryData)
    return '%_ORIG_VALUE';
  else if (this.graph.typeAttributes.percentOfSeriesData)
    return '%_PERCENT_OF_TOTAL';
  return null;
}
;
_.getPaddingX = function getPaddingX_0(){
  return $getValueScalePadding(this);
}
;
_.getPaddingY = function getPaddingY_0(){
  return $getValueScalePadding(this);
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_0(hoverData, rnd, seriesIndex){
  $handlerSpecificHoverEffects(this, hoverData, rnd, seriesIndex);
}
;
_.isPctComplete = function isPctComplete(){
  return this.graph.typeAttributes.isGanttPercent;
}
;
_.numberFormattingProcessed = function numberFormattingProcessed_0(){
  return this.numberFormatHandled;
}
;
_.processChartOptions = function processChartOptions_4(){
  $processChartOptions_4(this);
}
;
_.reorderHorzBarRects = function reorderHorzBarRects(catBarList, numColsInCategory, catPos){
  $reorderHorzBarRects(this, catBarList, numColsInCategory, catPos);
}
;
_.reorderVertBarRects = function reorderVertBarRects(catBarList, numColsInCategory, catPos){
  $reorderVertBarRects(this, catBarList, numColsInCategory, catPos);
}
;
_.resetForTypeChange = function resetForTypeChange_1(){
  if (this.originalData) {
    this.sGraph.data_0 = this.originalData;
    this.originalData = null;
  }
  if (!!this.currentViewDataGrid && this.currentViewDataGrid != this.graph.data_0) {
    $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = null;
  }
}
;
_.setData = function setData_4(data_0){
  $setData_2(this, data_0);
}
;
_.setHoverText = function setHoverText_0(hoverData){
  $setHoverText_1(this, hoverData);
}
;
_.shouldIncludePaddingInClip = function shouldIncludePaddingInClip_0(padding){
  if (padding > 0 && !$isLineBar(this.graph) && !this.graph.isHorizontal_0() && !this.graph.typeAttributes.isCategoryScatter && !this.graph.typeAttributes.isSymbolOverlay)
    return true;
  return false;
}
;
_.supportsSortingFromScale = function supportsSortingFromScale_1(){
  if ($isTrellis(this.graph))
    return false;
  return $supportsSortingFromScale_0(this);
}
;
_.barWidthPercent = 0;
_.barWidthPercentOverride = 0;
_.categorySortType = 0;
_.dontAntiAliasBars = false;
_.fixedBarWidth = -1;
_.groupColor = null;
_.groupedStackedFirstBarCount = 1;
_.groupedStackedSecondBarSeriesIndex = -1;
_.hideNestedGroupInLegend = false;
_.isArea = false;
_.isFlexTableChart = false;
_.nonStackedInteractivity = false;
_.numberFormatHandled = false;
_.reverseMultibarLayoutOrder = false;
_.showNestedGroupDatalabel = false;
_.variableWidth = false;
var CAT_SORT_ASC = 1, CAT_SORT_DSC = 2, DEFAULT_BAR_WIDTH_PERCENT = 70, DEFAULT_BAR_WIDTH_PERCENT_STOCK = 55, noPadding;
var Lcom_domo_charting_graphs_HandlerBar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBar', 60);
function $adjustLogScaleBarRect(this$static, posAryRect, minValuePos, value_0, barRect){
  if (!!posAryRect && value_0 >= 0) {
    this$static.sGraph.isHorizontal?$setWidth(barRect, barRect.x_0 + barRect.width_0 - (posAryRect.x_0 + posAryRect.width_0)):$setHeight(barRect, posAryRect.y_0 - barRect.y_0);
  }
   else if (value_0 < 0 && !posAryRect) {
    if (this$static.sGraph.isHorizontal) {
      barRect.width_0 = 20;
      barRect.x_0 = minValuePos - barRect.width_0;
    }
     else {
      barRect.height_0 = 20;
      barRect.y_0 = minValuePos;
    }
  }
}

function $getLimitedRowList(this$static, curRowList){
  var displayLimit, i, rowsToDisplay;
  displayLimit = this$static.graph.displayLimit;
  rowsToDisplay = new ArrayList;
  for (i = 0; i < displayLimit; i++)
    $add_1(rowsToDisplay, castTo(curRowList.get_1(i), 7));
  return rowsToDisplay;
}

function $isLimitedWithSameRowAndCol(this$static){
  var displayLimit, firstCol, firstRow;
  displayLimit = this$static.graph.displayLimit;
  if (!!this$static.graph.data_0 && displayLimit > 0 && $getNumCols(this$static.graph.data_0) > displayLimit + 1 && $getNumCols(this$static.graph.data_0) == $getNumRows(this$static.graph.data_0)) {
    firstRow = $getRow(this$static.graph.data_0, 0);
    firstCol = $getColumn(this$static.graph.data_0, 0);
    if (!!firstCol && !!firstRow && firstCol.parentName != null && $equals_2(firstCol.parentName, firstRow.parentName))
      return true;
  }
  return false;
}

function $setColorForOtherSeriesLimitedWithSameRowAndCol(this$static){
  var cell, color_0, otherCol, valueColName;
  if ($isLimitedWithSameRowAndCol(this$static)) {
    color_0 = null;
    otherCol = $getColumn(this$static.graph.data_0, this$static.graph.displayLimit);
    if (otherCol) {
      cell = $getFirstCell(otherCol);
      valueColName = this$static.graph.data_0.valueColumnName;
      this$static.graph.colorMgr.conditionalColors && (color_0 = $getConditionalColorForCell(this$static.graph.colorMgr, cell, valueColName));
      !color_0 && (color_0 = $getColorForSeriesNameOrIndex_0(this$static.graph, otherCol, otherCol.curIndex));
    }
    this$static.otherColorLimitedWithSameColRow = color_0;
  }
}

function $setData_3(this$static, data_0){
  var displayLimit, tmpDisplayLimit;
  !this$static.originalData && (this$static.originalData = data_0);
  displayLimit = 0;
  this$static.graph.hideOtherCategory = isTrue(this$static.graph.getChartOptionAsString('hide_other_category'));
  if (!!data_0 && !!this$static.graph && $chartOptionHasAValue(this$static.graph, 'display_limit') && !this$static.isArea && !this$static.graph.typeAttributes.percentOfCategoryData) {
    tmpDisplayLimit = getInt(this$static.graph.getChartOptionAsString('display_limit'), 0);
    tmpDisplayLimit > 0 && (!this$static.graph.hideOtherCategory && $getNumRows(data_0) > tmpDisplayLimit + 1 || this$static.graph.hideOtherCategory && $getNumRows(data_0) > tmpDisplayLimit) && (displayLimit = tmpDisplayLimit);
    data_0 = $clone(this$static.originalData);
  }
  $setData_2(this$static, data_0);
  $setDisplayLimit(this$static.graph, displayLimit);
}

function HandlerStackedBar(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(199, 60, $intern_37, HandlerStackedBar);
_.calcMinMaxOverride = function calcMinMaxOverride_0(scale, curMin, curMax){
  if (this.graph.displayLimit > 0)
    return $calcMinMaxFromDataGrid(scale, this.originalData);
  return null;
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_1(sGraph, rows_0, baseScale, valScale, valScale2){
  var barIndex, barInfo, barList, barWidth, catPosList, catScalePos, cell, curCol, curIndex, curRow, displayLimit, drillColumnOnly, fill, fillToUse, fullSeriesInfo, groupBarList, groupBarMap, hasFilteredData, i, inShowAsFilteredMode, isLogScale, lastNonNullState, lastState, lbHandler, limitNumDisplayed, limitedWithSameRowAndCol, minCatPos, minMaxScale, minValuePos, numCols, numColsInCategory, numRows, overRideColor, projSbm, projValue, rects, reverseRowMap, rowBarList, rowIndex, rowMap, rowstoDisplay, sbm, showAsFiltered, srsInfo, stackedBarHoverPath, value_0, valueScale, zeroValuePos;
  if (!rows_0)
    return;
  this.otherColorLimitedWithSameColRow = null;
  limitNumDisplayed = false;
  limitedWithSameRowAndCol = $isLimitedWithSameRowAndCol(this);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && (this.graph.data_0.hasFilteredCols || this.graph.data_0.hasFilteredRows);
  numCols = this.graph.data_0.numVisibleCols;
  numRows = rows_0.size_1();
  displayLimit = this.graph.displayLimit;
  displayLimit > 0 && numCols == 1 && numRows > displayLimit + 1 && (limitNumDisplayed = true);
  $setColorForOtherSeriesLimitedWithSameRowAndCol(this);
  rowMap = buildRowMap(rows_0);
  reverseRowMap = buildReverseRowMap(rows_0);
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  (this.graph.typeAttributes.percentOfSeriesData || this.graph.typeAttributes.isNestedBar) && (minMaxScale = null);
  (this.graph.typeAttributes.isPeriodOverPeriod || this.graph.data_0.isPeriodOverPeriod) && (this.reverseMultibarLayoutOrder = true);
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  sbm = new StackedBarMetrics(this, numRows, minCatPos, barWidth);
  projSbm = new StackedBarMetrics(this, 1, minCatPos, barWidth);
  groupBarList = new ArrayList;
  groupBarMap = new HashMap;
  numColsInCategory = numCols;
  if ($isLineBar(this.graph)) {
    lbHandler = castTo(this.graph.handler, 111);
    lbHandler.barsOnLeftScale?(numColsInCategory = $getNumColsPrimaryScale(this.graph.data_0)):(numColsInCategory = $getNumColsSecondaryScale(this.graph.data_0));
  }
  barIndex = 0;
  catPosList = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  rowBarList = initUnidimensionalArray(Ljava_util_ArrayList_2_classLit, $intern_17, 3, numRows, 0, 1);
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
    valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (valueScale) {
      rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol);
      limitNumDisplayed && (rowstoDisplay = $getLimitedRowList(this, rowstoDisplay));
      isLogScale = instanceOf(valueScale, 73);
      minValuePos = valueScale.getMinPosition();
      zeroValuePos = 0;
      isLogScale || (zeroValuePos = valueScale.getPositionForValue(0));
      barList = new ArrayList;
      fill = new CFFill($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex));
      fullSeriesInfo = null;
      lastNonNullState = null;
      drillColumnOnly = true;
      for (i = 0; i < rowstoDisplay.size_1(); i++) {
        fillToUse = fill;
        curRow = castTo(rowstoDisplay.get_1(i), 7);
        if (!curRow)
          continue;
        rowIndex = castTo(getEntryValueOrNull($getEntry(reverseRowMap.hashCodeMap, curRow)), 29).value_0;
        curIndex = rowIndex;
        instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
        cell = $getCell(this.graph.data_0, curRow.curIndex, curCol.curIndex);
        this.graph.typeAttributes.isNestedBar && getEntryValueOrNull($getEntry(groupBarMap.hashCodeMap, curRow)) == null && $addGroupBarForNested(this, curIndex, curRow, barWidth, baseScale, valueScale, minValuePos, zeroValuePos, groupBarList, groupBarMap);
        value_0 = $getCellValueForGraphType(this, cell);
        projValue = $getProjectedValueIfNotForecastBar(cell);
        if (!isNaN(value_0) || !isNaN(projValue)) {
          isNaN(value_0) && (value_0 = 0);
          !isNaN(projValue) && !!cell.column && cell.column.isRunningTotal && (projValue = cell.altValue + (cell.projectedValue - cell.value_0));
          !isNaN(projValue) && (projValue < 0 && value_0 > 0 || projValue > 0 && value_0 < 0) && (value_0 = 0);
          $calcStackedBarRectInfo(sbm, cell, value_0, baseScale, valueScale, curIndex, rowIndex, minValuePos, zeroValuePos, numColsInCategory, curCol, barIndex);
          !sGraph.isHorizontal && !this.graph.typeAttributes.isNestedBar && $calcStackedBarRectInfo(projSbm, cell, projValue, baseScale, valueScale, curIndex, 0, minValuePos, zeroValuePos, numColsInCategory, curCol, barIndex);
          if (!isNaN(projValue)) {
            projSbm.stackedPosAry != null && !!projSbm.stackedPosAry[0] && (sbm.stackedPosAry[rowIndex] = $duplicate_5(projSbm.stackedPosAry[0]));
            projSbm.stackedPosAryNegative != null && !!projSbm.stackedPosAryNegative[0] && (sbm.stackedPosAryNegative[rowIndex] = $duplicate_5(projSbm.stackedPosAryNegative[0]));
            projSbm.stackedPosAryPositive != null && !!projSbm.stackedPosAryPositive[0] && (sbm.stackedPosAryPositive[rowIndex] = $duplicate_5(projSbm.stackedPosAryPositive[0]));
          }
          rects[rowIndex] = sbm.barRect;
          lastState = $getLastShapeForCell(this.sGraph, cell, false);
          !!lastState && (lastNonNullState = lastState);
          !lastState && (lastState = lastNonNullState);
          (!!projSbm.barRect || this.categorySortType != 0 || this.graph.typeAttributes.isDotPlot || limitedWithSameRowAndCol) && (this.nonStackedInteractivity = true);
          if (this.graph.data_0.isPeriodOverPeriod)
            fillToUse = $getColorForCellValueSeriesName(this.graph, cell, $getColName(cell), fill);
          else {
            if (numCols == 1) {
              projSbm.barRect = null;
              overRideColor = $getColorForCategoryName_0(this.graph, cell);
              !!overRideColor && (fillToUse = new CFFill(overRideColor));
              drillColumnOnly = false;
            }
            fillToUse = $getColorForCellValueSeriesName(this.graph, cell, this.graph.data_0.valueColumnName, fillToUse);
            limitedWithSameRowAndCol && curCol.curIndex >= displayLimit && (fillToUse = new CFFill(this.otherColorLimitedWithSameColRow));
          }
          showAsFiltered = inShowAsFilteredMode && (curCol.showAsFiltered || curRow.showAsFiltered);
          showAsFiltered && (fillToUse = new CFFill($deSaturateAndLighten(fillToUse.color_0, 0.9, 0.4)));
          barInfo = new SrsBarInfo_2(this, cell, sbm.barRect, sbm.origRectOffset, projSbm.barRect, projValue, fillToUse, lastState);
          inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (barInfo.highlightAlways = true);
          inShowAsFilteredMode && (barInfo.drillOnColOnly = drillColumnOnly);
          barList.array[barList.array.length] = barInfo;
          if (this.categorySortType != 0 && !isLogScale) {
            catScalePos = baseScale.getPositionForValue(curIndex);
            catPosList[rowIndex] = minCatPos + catScalePos;
            !rowBarList[rowIndex] && (rowBarList[rowIndex] = new ArrayList);
            $add_1(rowBarList[rowIndex], barInfo);
          }
        }
        if (limitNumDisplayed && i == displayLimit - 1)
          break;
      }
      if (sGraph.typeAttributes.isStacked && $hasInteractions(sGraph) && !this.graph.typeAttributes.isNestedBar && !sGraph.typeAttributes.isGroupedStacked && !this.nonStackedInteractivity) {
        fullSeriesInfo = null;
        if (!($usingCardBus(this.graph.chart) && $equals_2('legacy', this.graph.data_0.originalDataType))) {
          stackedBarHoverPath = $getStackedSeriesShape(barList, sGraph.isHorizontal);
          if (barList.array.length > 0) {
            fullSeriesInfo = new SrsBarInfo(this, $getFirstCellFromList(barList), stackedBarHoverPath, fill);
            fullSeriesInfo.neverDrill = true;
          }
        }
      }
      ++barIndex;
      if (barList.array.length > 0) {
        srsInfo = new SeriesInfo(barList, fullSeriesInfo);
        $addRegressionAndProjectionDataToSrsInfo(this, minMaxScale, valueScale, curCol, srsInfo);
        $add_1(this.graph.seriesShapes, srsInfo);
      }
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  groupBarList.array.length > 0 && $add_0(this.graph.seriesShapes, 0, new SeriesInfo(groupBarList, null));
  !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && $calcMinMaxAvgPositions(minMaxScale);
  this.categorySortType != 0 && $sortBarsByCategory(this, rowBarList, numColsInCategory, catPosList, barWidth);
  $drawAllBars(this, -1, null);
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_0(legend, colInfo){
  if ($isLimitedWithSameRowAndCol(this) && colInfo.curIndex >= this.graph.displayLimit) {
    !this.otherColorLimitedWithSameColRow && $setColorForOtherSeriesLimitedWithSameRowAndCol(this);
    return new LegendItemInfo_0(legend, colInfo, new CFFill(this.otherColorLimitedWithSameColRow), null);
  }
  return null;
}
;
_.limitDataRowsForCatScaleIfSpecified = function limitDataRowsForCatScaleIfSpecified_0(rows_0){
  var c, cell, col, colVal, colValues, displayLimit, i, lastRow, lastRowOrigIndex, newCell, numCols, otherRow, otherRowCalculated, value_0;
  displayLimit = this.graph.displayLimit;
  lastRow = null;
  numCols = $getNumCols(this.graph.data_0);
  colValues = initUnidimensionalArray(D_classLit, $intern_24, 41, numCols, 15, 1);
  if (displayLimit > 0 && rows_0.size_1() > displayLimit) {
    otherRowCalculated = false;
    otherRow = castTo(rows_0.get_1(displayLimit), 7);
    !!otherRow && otherRow.isOtherRow && (otherRowCalculated = true);
    if (this.graph.hideOtherCategory) {
      for (i = rows_0.size_1() - 1; i >= 0; i--) {
        i >= displayLimit && rows_0.remove_2(i);
      }
    }
     else {
      for (i = rows_0.size_1() - 1; i >= 0; i--) {
        if (i >= displayLimit) {
          lastRow = castTo(rows_0.get_1(i), 7);
          if (!otherRowCalculated) {
            for (c = 0; c < numCols; c++) {
              colVal = (value_0 = $getCellValueByCellIndex(lastRow, c) , isNaN(value_0) && (value_0 = 0) , value_0);
              colValues[c] += colVal;
            }
          }
          rows_0.remove_2(i);
        }
      }
      if (!otherRowCalculated) {
        lastRowOrigIndex = lastRow.origIndex;
        for (c = 0; c < numCols; c++) {
          cell = $getCellByCellIndex(lastRow, c);
          if (cell) {
            cell.value_0 = colValues[c];
          }
           else {
            newCell = new Cell(colValues[c]);
            col = $getColumn(this.graph.data_0, c);
            newCell.column = col;
            $put_0(col.cellMap, valueOf(lastRowOrigIndex), newCell);
            newCell.row = lastRow;
            $put_0(lastRow.cellMap, valueOf(c), newCell);
          }
        }
      }
      $setAltName(lastRow, this.graph.getLocalizedString('OTHER'));
      lastRow.isOtherRow = true;
      lastRow.sum = NaN;
      rows_0.add_0(lastRow);
    }
  }
  return rows_0;
}
;
_.onBeforeSort = function onBeforeSort_0(){
  var dupData;
  if (this.graph.displayLimit > 0 && !!this.originalData) {
    dupData = $clone(this.originalData);
    $handleRowFiltersHiddenSeries(this.graph, dupData);
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.currentViewDataGrid = dupData;
    this.graph.setNeedsFormat(true);
  }
}
;
_.reorderHorzBarRects = function reorderHorzBarRects_0(catBarList, numColsInCategory, catPos){
  var barInfo, firstBar, i, i0, lastNegRect, lastPosRect, origX, shpInfo;
  if (this.graph.typeAttributes.isNestedBar) {
    $reorderHorzBarRects(this, catBarList, numColsInCategory, catPos);
    return;
  }
  firstBar = (checkCriticalElementIndex(0, catBarList.array.length) , castTo(catBarList.array[0], 25));
  origX = $getOrigRect(firstBar).x_0;
  $getValue(firstBar.cell) < 0 && (origX = $getRight($getOrigRect(firstBar)));
  lastPosRect = null;
  lastNegRect = null;
  for (i0 = 0; i0 < catBarList.array.length; i0++) {
    shpInfo = (checkCriticalElementIndex(i0, catBarList.array.length) , castTo(catBarList.array[i0], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      if ($getValue(barInfo.cell) >= 0) {
        if (!lastPosRect) {
          lastPosRect = $getOrigRect(barInfo);
          barInfo.rect = $getOrigRect(barInfo);
          barInfo.stackedOffset = new CFPoint(0, 0);
        }
         else {
          $setX_0(barInfo.rect, lastPosRect.x_0 + lastPosRect.width_0);
          barInfo.stackedOffset = new CFPoint(origX - barInfo.rect.x_0, 0);
          lastPosRect = barInfo.getRect();
        }
      }
    }
  }
  for (i = catBarList.array.length - 1; i >= 0; i--) {
    shpInfo = (checkCriticalElementIndex(i, catBarList.array.length) , castTo(catBarList.array[i], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      if ($getValue(barInfo.cell) < 0) {
        if (!lastNegRect) {
          lastNegRect = $getOrigRect(barInfo);
          barInfo.rect = $getOrigRect(barInfo);
          barInfo.stackedOffset = new CFPoint(0, 0);
        }
         else {
          $setRight(barInfo.rect, lastNegRect.x_0);
          barInfo.stackedOffset = new CFPoint(origX - barInfo.rect.x_0 - barInfo.rect.width_0, 0);
          lastNegRect = barInfo.getRect();
        }
      }
    }
  }
}
;
_.reorderVertBarRects = function reorderVertBarRects_0(catBarList, numColsInCategory, catPos){
  var barInfo, firstBar, i, i0, lastNegRect, lastPosRect, origY, shpInfo;
  if (this.graph.typeAttributes.isNestedBar) {
    $reorderVertBarRects(this, catBarList, numColsInCategory, catPos);
    return;
  }
  firstBar = (checkCriticalElementIndex(0, catBarList.array.length) , castTo(catBarList.array[0], 25));
  origY = $getBottom($getOrigRect(firstBar));
  $getValue(firstBar.cell) < 0 && (origY = $getOrigRect(firstBar).y_0);
  lastPosRect = null;
  lastNegRect = null;
  for (i0 = 0; i0 < catBarList.array.length; i0++) {
    shpInfo = (checkCriticalElementIndex(i0, catBarList.array.length) , castTo(catBarList.array[i0], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      if ($getValueOrProjection(barInfo.cell, true) >= 0) {
        if (!lastPosRect) {
          lastPosRect = $getOrigRect(barInfo);
          barInfo.rect = $getOrigRect(barInfo);
          barInfo.stackedOffset = new CFPoint(0, 0);
          if (barInfo.stackedProjRect) {
            if (barInfo.cell.projectedValue < barInfo.cell.value_0) {
              $setBottom(barInfo.stackedProjRect, $getBottom(barInfo.rect));
              !!barInfo.origStackedProjRect && $setBottom(barInfo.origStackedProjRect, $getBottom(barInfo.rect));
            }
             else {
              $setBottom(barInfo.stackedProjRect, barInfo.rect.y_0);
              !!barInfo.origStackedProjRect && $setBottom(barInfo.origStackedProjRect, $getBottom(barInfo.rect));
              $setHeight(lastPosRect, lastPosRect.height_0 + barInfo.stackedProjRect.height_0);
              $setBottom(lastPosRect, $getBottom(barInfo.rect));
            }
          }
        }
         else {
          $setBottom(barInfo.rect, lastPosRect.y_0);
          barInfo.stackedOffset = new CFPoint(0, origY - lastPosRect.y_0);
          lastPosRect = $duplicate_5(barInfo.getRect());
          if (barInfo.stackedProjRect) {
            if (barInfo.cell.projectedValue < barInfo.cell.value_0) {
              $setBottom(barInfo.stackedProjRect, $getBottom(barInfo.rect));
              !!barInfo.origStackedProjRect && $setBottom(barInfo.origStackedProjRect, $getBottom(barInfo.rect));
            }
             else {
              $setBottom(barInfo.stackedProjRect, barInfo.rect.y_0);
              !!barInfo.origStackedProjRect && $setBottom(barInfo.origStackedProjRect, $getBottom(barInfo.rect));
              $setHeight(lastPosRect, lastPosRect.height_0 + barInfo.stackedProjRect.height_0);
              $setBottom(lastPosRect, $getBottom(barInfo.rect));
            }
          }
        }
      }
    }
  }
  for (i = catBarList.array.length - 1; i >= 0; i--) {
    shpInfo = (checkCriticalElementIndex(i, catBarList.array.length) , castTo(catBarList.array[i], 18));
    if (instanceOf(shpInfo, 25)) {
      barInfo = castTo(shpInfo, 25);
      if ($getValueOrProjection(barInfo.cell, true) < 0) {
        if (!lastNegRect) {
          lastNegRect = $getOrigRect(barInfo);
          barInfo.rect = $getOrigRect(barInfo);
          barInfo.stackedOffset = new CFPoint(0, 0);
          if (barInfo.stackedProjRect) {
            if (barInfo.cell.projectedValue < barInfo.cell.value_0) {
              $setY_0(barInfo.stackedProjRect, $getBottom(barInfo.rect));
              !!barInfo.origStackedProjRect && $setY_0(barInfo.origStackedProjRect, barInfo.rect.y_0);
            }
             else {
              $setY_0(barInfo.stackedProjRect, barInfo.rect.y_0);
              !!barInfo.origStackedProjRect && $setY_0(barInfo.origStackedProjRect, barInfo.rect.y_0);
            }
            $setHeight(lastNegRect, lastNegRect.height_0 + barInfo.stackedProjRect.height_0);
            $setBottom(lastNegRect, $getBottom(barInfo.stackedProjRect));
          }
        }
         else {
          $setY_0(barInfo.rect, lastNegRect.y_0 + lastNegRect.height_0);
          barInfo.stackedOffset = new CFPoint(0, origY - barInfo.rect.y_0);
          lastNegRect = barInfo.getRect();
          if (barInfo.stackedProjRect) {
            if (barInfo.cell.projectedValue < barInfo.cell.value_0) {
              $setY_0(barInfo.stackedProjRect, $getBottom(barInfo.rect));
              !!barInfo.origStackedProjRect && $setY_0(barInfo.origStackedProjRect, barInfo.rect.y_0);
            }
             else {
              $setY_0(barInfo.stackedProjRect, barInfo.rect.y_0);
              !!barInfo.origStackedProjRect && $setY_0(barInfo.origStackedProjRect, barInfo.rect.y_0);
            }
            $setHeight(lastNegRect, lastNegRect.height_0 + barInfo.stackedProjRect.height_0);
            $setBottom(lastNegRect, $getBottom(barInfo.stackedProjRect));
          }
        }
      }
    }
  }
}
;
_.resetForTypeChange = function resetForTypeChange_2(){
  if (this.originalData) {
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_5(data_0){
  $setData_3(this, data_0);
}
;
var Lcom_domo_charting_graphs_HandlerStackedBar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerStackedBar', 199);
function $addFoldedMetrics(this$static, index_0, rect){
  if (this$static.sGraph.isHorizontal) {
    if (!this$static.maxPosAry[index_0]) {
      this$static.maxPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0, rect.y_0 + rect.height_0 / 2);
      this$static.minPosAry[index_0] = new CFPoint(rect.x_0, rect.y_0 + rect.height_0 / 2);
    }
     else {
      rect.x_0 + rect.width_0 > this$static.maxPosAry[index_0].x_0 && (this$static.maxPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0, rect.y_0 + rect.height_0 / 2));
      rect.x_0 < this$static.minPosAry[index_0].x_0 && (this$static.minPosAry[index_0] = new CFPoint(rect.x_0, rect.y_0 + rect.height_0 / 2));
    }
  }
   else {
    if (!this$static.maxPosAry[index_0]) {
      this$static.maxPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0);
      this$static.minPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0);
    }
     else {
      rect.y_0 + rect.height_0 > this$static.maxPosAry[index_0].y_0 && (this$static.maxPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0));
      rect.y_0 < this$static.minPosAry[index_0].y_0 && (this$static.minPosAry[index_0] = new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0));
    }
  }
}

function $addFolds(this$static){
  var fill, foldedPath, foldedShape, ge, i, i0, numItems;
  if (this$static.minPosAry != null) {
    foldedPath = new CFPath;
    numItems = 0;
    for (i0 = 0; i0 < this$static.minPosAry.length; i0++)
      !!this$static.minPosAry[i0] && ++numItems;
    for (i = 0; i < numItems; i++) {
      if (i % 2 == 0 && i + 1 < numItems) {
        if (this$static.sGraph.isHorizontal) {
          $add(foldedPath, new CFPathElement_0(0, this$static.maxPosAry[i].x_0, this$static.maxPosAry[i].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.maxPosAry[i + 1].x_0, this$static.maxPosAry[i + 1].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.minPosAry[i + 1].x_0, this$static.minPosAry[i + 1].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.minPosAry[i].x_0, this$static.minPosAry[i].y_0));
          $add(foldedPath, new CFPathElement);
        }
         else {
          $add(foldedPath, new CFPathElement_0(0, this$static.minPosAry[i].x_0, this$static.minPosAry[i].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.minPosAry[i + 1].x_0, this$static.minPosAry[i + 1].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.maxPosAry[i + 1].x_0, this$static.maxPosAry[i + 1].y_0));
          $add(foldedPath, new CFPathElement_0(1, this$static.maxPosAry[i].x_0, this$static.maxPosAry[i].y_0));
          $add(foldedPath, new CFPathElement);
        }
      }
    }
    if (foldedPath.pathAry.size_1() > 0) {
      fill = new CFFill_1('#00000020');
      fill.noMouse = true;
      foldedShape = new CFShape_0(foldedPath, fill, null);
      ge = new GraphicElement;
      $addShape_0(ge, foldedShape, '{"internal": "folds"}');
      $addGraphicElement_0(this$static.graph, ge);
    }
  }
}

function $adjustForMultiColumn_0(this$static, barRect, lastRect, value_0, lastValue){
  if (this$static.sGraph.isHorizontal) {
    !!lastRect && value_0 >= 0?(barRect = new CFRect(lastRect.x_0 + lastRect.width_0, barRect.y_0, barRect.width_0, barRect.height_0)):!!lastRect && (barRect = new CFRect(lastRect.x_0 - barRect.width_0, barRect.y_0, barRect.width_0, barRect.height_0));
    barRect.height_0 < 1 && (barRect.height_0 = 1);
  }
   else {
    !!lastRect && value_0 >= 0?lastValue > 0?(barRect = new CFRect(barRect.x_0, lastRect.y_0 - barRect.height_0, barRect.width_0, barRect.height_0)):(barRect = new CFRect(barRect.x_0, lastRect.y_0 + lastRect.height_0 - barRect.height_0, barRect.width_0, barRect.height_0)):!!lastRect && (lastValue > 0?(barRect = new CFRect(barRect.x_0, lastRect.y_0, barRect.width_0, barRect.height_0)):(barRect = new CFRect(barRect.x_0, lastRect.y_0 + lastRect.height_0, barRect.width_0, barRect.height_0)));
    barRect.width_0 < 1 && (barRect.width_0 = 1);
  }
  return barRect;
}

function $centerArea(this$static, zeroValuePos, stackedPosAry){
  var barInfo, height, i, i0, innerBnds, j, numCategories, offsetAry, srsInfo, width_0;
  numCategories = this$static.graph.seriesShapes.array.length;
  innerBnds = this$static.graph.getInnerBounds();
  offsetAry = initUnidimensionalArray(D_classLit, $intern_24, 41, stackedPosAry.length, 15, 1);
  for (i0 = 0; i0 < stackedPosAry.length; i0++) {
    if (stackedPosAry[i0]) {
      if (this$static.graph.graphType == 6) {
        height = zeroValuePos - stackedPosAry[i0].y_0;
        offsetAry[i0] = innerBnds.y_0 + (innerBnds.height_0 - height) / 2 - stackedPosAry[i0].y_0;
      }
       else {
        width_0 = $getRight(stackedPosAry[i0]) - zeroValuePos;
        offsetAry[i0] = innerBnds.x_0 + (innerBnds.width_0 - width_0) / 2 - zeroValuePos;
      }
    }
  }
  for (i = 0; i < numCategories; i++) {
    srsInfo = castTo($get_2(this$static.graph.seriesShapes, i), 19);
    for (j = 0; j < srsInfo.srsShapeList.array.length; j++) {
      barInfo = castTo($get_2(srsInfo.srsShapeList, j), 25);
      this$static.graph.graphType == 6?barInfo.rowIndex >= 0 && barInfo.rowIndex < stackedPosAry.length && $setY_0(barInfo.rect, barInfo.rect.y_0 + offsetAry[barInfo.rowIndex]):this$static.graph.graphType == 7 && barInfo.rowIndex >= 0 && barInfo.rowIndex < stackedPosAry.length && $setX_0(barInfo.rect, barInfo.rect.x_0 + offsetAry[barInfo.rowIndex]);
    }
  }
  return;
}

function $drawAreaFromRects(this$static, rects, origOffsets, fullAreaInfo, fill, stroke){
  var areaShape, drawRects, ge, i, path, sclInnerRect, transFill;
  drawRects = rects;
  if (origOffsets != null && origOffsets.length > 0) {
    drawRects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, rects.length, 0, 1);
    for (i = 0; i < rects.length; i++) {
      if (rects[i]) {
        drawRects[i] = $duplicate_5(rects[i]);
        !!origOffsets[i] && $offset(drawRects[i], origOffsets[i].x_0, origOffsets[i].y_0);
      }
    }
  }
  drawRects.length == 1 && (drawRects = $getAreaRectsForOnePoint(this$static, drawRects));
  sclInnerRect = $getInnerBoundsRect($getCategoryScale(this$static.sGraph));
  ge = new GraphicElement;
  transFill = $duplicate_1(fill);
  path = new CFPath_14(drawRects, fullAreaInfo.areaStyle, this$static.sGraph.isHorizontal, sclInnerRect);
  path.shouldAntiAlias = true;
  areaShape = new CFShape_0(path, transFill, stroke);
  $addShape_0(ge, areaShape, fullAreaInfo);
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawBarFromSrsInfo(this$static, barInfo, drawingSingleBar){
  var hitShape;
  hitShape = null;
  drawingSingleBar || (hitShape = barInfo.getHitShape());
  !!hitShape && $addBarShapeToGEAry(this$static, barInfo, hitShape);
}

function $getAreaRectsForOnePoint(this$static, rects){
  var catScale, innerBnds, newRects;
  newRects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, 2, 0, 1);
  catScale = $getCategoryScale(this$static.sGraph);
  if (catScale) {
    innerBnds = $getInnerBoundsRect(catScale);
    if (innerBnds) {
      if (this$static.sGraph.isHorizontal) {
        newRects[0] = new CFRect(rects[0].x_0, innerBnds.y_0, rects[0].width_0, 1);
        newRects[1] = new CFRect(rects[0].x_0, innerBnds.y_0 + innerBnds.height_0, rects[0].width_0, 1);
      }
       else {
        newRects[0] = new CFRect(innerBnds.x_0, rects[0].y_0, 1, rects[0].height_0);
        newRects[1] = new CFRect(innerBnds.x_0 + innerBnds.width_0, rects[0].y_0, 1, rects[0].height_0);
      }
    }
  }
  return newRects;
}

function $initMinMaxRects(this$static, numRows){
  this$static.maxPosAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numRows, 0, 1);
  this$static.minPosAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numRows, 0, 1);
}

function $isFoldedStyle(this$static){
  if (this$static.foldedStyle && !this$static.graph.typeAttributes.isStream)
    return true;
  return false;
}

function HandlerArea(){
  $clinit_HandlerBar();
  HandlerStackedBar.call(this);
}

defineClass(329, 199, $intern_37, HandlerArea);
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_1(sGraph, type_0, curTime, valueScale){
  var bar, hitShape, isComplete, minMaxScale, pctComplete, r, rects, seriesShapes, srsInfo, srsInfo$iterator, srsInfo$iterator0, srsItem, srsItem$iterator, transRectOrShape, transitionShape, zeroPos;
  sGraph.geAry.clear_0();
  zeroPos = valueScale.getZeroPosition();
  instanceOf(valueScale, 56) && (zeroPos = valueScale.getMinPosition());
  seriesShapes = this.graph.seriesShapes;
  $addInnerBoundsClip(this, !this.graph.isThumbnail, false, false);
  $isFoldedStyle(this) && $initMinMaxRects(this, this.graph.data_0.numVisibleRows);
  for (srsItem$iterator = new ArrayList$1(seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    isComplete = false;
    if ($isBar(srsItem)) {
      rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, this.graph.data_0.numVisibleRows, 0, 1);
      r = 0;
      for (srsInfo$iterator0 = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator0.i < srsInfo$iterator0.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator0), 18);
        bar = castTo(srsInfo, 25);
        if (bar.animInfo) {
          pctComplete = $getPercentComplete(bar.animInfo, curTime);
          pctComplete < $intern_38 && (pctComplete = $intern_38);
          transRectOrShape = $getRectPctOrShape(bar, type_0, sGraph, pctComplete, zeroPos);
          instanceOf(transRectOrShape, 6)?(transitionShape = castTo(transRectOrShape, 6)):(transitionShape = bar.getDrawShapeForRect(castTo(transRectOrShape, 4)));
          if ($isRect(transitionShape)) {
            rects[r] = $getRect(transitionShape);
            $isFoldedStyle(this) && $addFoldedMetrics(this, bar.rowIndex, rects[r]);
          }
          pctComplete > 0.99 && (isComplete = true);
        }
        ++r;
      }
      $drawAreaFromRects(this, rects, null, castTo(srsItem.fullSeriesInfo, 25), srsItem.fullSeriesInfo.fill_0, null);
      if (isComplete) {
        for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
          srsInfo = castTo($next_3(srsInfo$iterator), 18);
          bar = castTo(srsInfo, 25);
          hitShape = bar.getHitShape();
          !!hitShape && $addBarShapeToGEAry(this, bar, hitShape);
        }
      }
    }
  }
  $isFoldedStyle(this) && $addFolds(this);
  minMaxScale = castTo($getScaleByTypeNumber(this.sGraph, ST_MINMAX, 0), 67);
  this.graph.graphType == 3 || this.graph.graphType == 2?!!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo && $addMinMaxAvgLines(minMaxScale, castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo.stroke_0):this.graph.graphType != 12 && !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!this.graph.seriesShapes && this.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && $addMinMaxAvgLines(minMaxScale, new CFStroke(castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).fill_0.color_0, 1));
  $clearInnerBoundsClip(this, false, false);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_2(sGraph, rows_0, baseScale, valScale, valScale2){
  var barIndex, barInfo, barList, barRect, barWidth, catScalePos, cell, cumValAry, curCol, curIndex, curRow, fillToUse, fullSeriesInfo, hitRect, hitShape, i, inShowAsFilteredMode, isLogScale, lastState, lastValAry, lastValue, lineStyle, minCatPos, minValuePos, numRows, origOffsets, origRect, origRectOffset, prevLastValue, rects, rowIndex, showAsFiltered, srsInfo, stackedPosAry, value_0, valueScalePos, zeroValuePos;
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  stackedPosAry = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  lastValAry = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  cumValAry = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  $isFoldedStyle(this) && (this.maxPosAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numRows, 0, 1) , this.minPosAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numRows, 0, 1));
  barIndex = 0;
  if (valScale) {
    isLogScale = instanceOf(valScale, 73);
    minValuePos = valScale.getMinPosition();
    zeroValuePos = valScale.getPositionForValue(0);
    curCol = $getLastVisibleCol(this.graph.data_0);
    while (curCol) {
      rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
      origOffsets = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numRows, 0, 1);
      lastValue = NaN;
      prevLastValue = NaN;
      barList = new ArrayList;
      fillToUse = new CFFill($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex));
      showAsFiltered = inShowAsFilteredMode && curCol.showAsFiltered;
      showAsFiltered && (fillToUse = new CFFill($deSaturateAndLighten(fillToUse.color_0, 0.9, 0.4)));
      fullSeriesInfo = null;
      rowIndex = 0;
      for (i = 0; i < rows_0.size_1(); i++) {
        curRow = castTo(rows_0.get_1(i), 7);
        if (!curRow)
          continue;
        cell = $getCell(this.graph.data_0, curRow.curIndex, curCol.curIndex);
        value_0 = $getCellValueForGraphType(this, cell);
        if (value_0 == 0 && lastValue == 0 && (isNaN(prevLastValue) || prevLastValue == 0) && !this.graph.typeAttributes.stepLines) {
          $remove_2(barList, barList.array.length - 1);
          rects[rowIndex - 1] = null;
        }
        i == rows_0.size_1() - 1 && value_0 == 0 && lastValue == 0 && (value_0 = NaN);
        this.graph.typeAttributes.stepLines && isNaN(value_0) && (value_0 = 0);
        if (!isNaN(value_0)) {
          curIndex = rowIndex;
          instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
          catScalePos = baseScale.getPositionForValue(curIndex);
          valueScalePos = valScale.getPositionForValue(value_0);
          if (isLogScale && sGraph.typeAttributes.isStacked) {
            cumValAry[rowIndex] += value_0;
            valueScalePos = valScale.getPositionForValue(cumValAry[rowIndex]);
          }
          barRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, barWidth);
          isLogScale && this.graph.typeAttributes.isStacked && $adjustLogScaleBarRect(this, stackedPosAry[rowIndex], minValuePos, value_0, barRect);
          origRect = new CFRect(barRect.x_0, barRect.y_0, barRect.width_0, barRect.height_0);
          this.graph.typeAttributes.isStacked?(barRect = $adjustForMultiColumn_0(this, barRect, stackedPosAry[rowIndex], value_0, lastValAry[rowIndex])):(barRect = $adjustForMultiColumn_0(this, barRect, null, value_0, lastValAry[rowIndex]));
          origRectOffset = new CFPoint(origRect.x_0 - barRect.x_0, origRect.y_0 - barRect.y_0);
          stackedPosAry[rowIndex] = barRect;
          lastValAry[rowIndex] = value_0;
          rects[rowIndex] = barRect;
          origOffsets[rowIndex] = origRectOffset;
          lastState = $getLastShapeForCell(this.sGraph, cell, false);
          barInfo = new SrsBarInfo_0(this, cell, barRect, origRectOffset, rowIndex, fillToUse, lastState);
          hitRect = new CFRect(barRect.x_0, barRect.y_0, barRect.width_0, barRect.height_0);
          sGraph.isHorizontal?rowIndex > 0 && !!rects[rowIndex - 1] && rects[rowIndex].y_0 - rects[rowIndex - 1].y_0 > 8 && (hitRect.height_0 = hitRect.height_0 + 8 , hitRect.y_0 -= 4):rowIndex > 0 && !!rects[rowIndex - 1] && rects[rowIndex].x_0 - rects[rowIndex - 1].x_0 > 8 && (hitRect.width_0 = hitRect.width_0 + 8 , hitRect.x_0 -= 4);
          hitShape = new CFShape_1(hitRect, ($clinit_CFFill() , TRANSPARENT_0), null);
          barInfo.hitShape = hitShape;
          barList.array[barList.array.length] = barInfo;
          $isFoldedStyle(this) && $addFoldedMetrics(this, rowIndex, barRect);
        }
        prevLastValue = lastValue;
        lastValue = value_0;
        ++rowIndex;
      }
      if (barList.array.length > 0) {
        lastState = $getLastState(this, $getFirstCellFromList(barList), true);
        lineStyle = 0;
        this.graph.typeAttributes.curvedLines?(lineStyle = 1):this.graph.typeAttributes.stepLines && (lineStyle = 2);
        fullSeriesInfo = new SrsBarInfo_3(this, $getFirstCellFromList(barList), rects, origOffsets, fillToUse, lineStyle, lastState);
      }
      ++barIndex;
      srsInfo = new SeriesInfo(barList, fullSeriesInfo);
      $add_1(this.graph.seriesShapes, srsInfo);
      curCol = $getPrevVisibleCol(this.graph.data_0, curCol);
    }
  }
  this.graph.typeAttributes.isStream && !!valScale && instanceOf(valScale, 27) && $centerArea(this, $getAbsolutePositionForValue(castTo(valScale, 27), 0), stackedPosAry);
  $drawAllBars(this, -1, null);
  $isFoldedStyle(this) && $addFolds(this);
}
;
_.drawBarFromSrsInfo = function drawBarFromSrsInfo_0(barInfo, drawGrayBars, selectedIndex, drawingSingleBar){
  $drawBarFromSrsInfo(this, barInfo, drawingSingleBar);
}
;
_.drawBarsForASeries = function drawBarsForASeries_0(srsItem, drawGrayBars, selectedIndex, hoverData){
  var barInfo, fill, fullAreaInfo, grayFill, index_0, minMaxScale, previous, srsInfo, srsInfo$iterator, stroke;
  if ($isBar(srsItem)) {
    if (srsItem.fullSeriesInfo) {
      fullAreaInfo = castTo(srsItem.fullSeriesInfo, 25);
      fill = srsItem.fullSeriesInfo.fill_0;
      stroke = null;
      if (drawGrayBars) {
        fill = new CFFill(($clinit_CFColor() , DISABLED_LIGHT_GRAY));
        this.graph.typeAttributes.isStream && (stroke = new CFStroke(WHITE, 1));
      }
      if (!drawGrayBars && hoverData != null && instanceOf(hoverData, 37) && this.graph.typeAttributes.isStacked && !this.graph.typeAttributes.isStream) {
        grayFill = new CFFill(($clinit_CFColor() , DISABLED_LIGHT_GRAY));
        $drawAreaFromRects(this, fullAreaInfo.rects, null, fullAreaInfo, grayFill, stroke);
        $drawAreaFromRects(this, fullAreaInfo.rects, fullAreaInfo.origOffsets, fullAreaInfo, fill, stroke);
      }
       else {
        $drawAreaFromRects(this, fullAreaInfo.rects, null, fullAreaInfo, fill, stroke);
      }
      if (!drawGrayBars) {
        previous = null;
        for (index_0 = 0; index_0 < srsItem.srsShapeList.array.length; index_0++) {
          srsInfo = castTo($get_2(srsItem.srsShapeList, index_0), 18);
          $drawAreaPointFromSrsInfo(this, srsInfo, previous);
          previous = srsInfo;
        }
      }
    }
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 25)) {
        barInfo = castTo(srsInfo, 25);
        barInfo.fill_0 = ($clinit_CFFill() , TRANSPARENT_0);
        $drawBarFromSrsInfo(this, barInfo, false);
      }
    }
    if (!!srsItem.projectionInfo && !this.graph.data_0.hasHiddenRows) {
      minMaxScale = castTo($getScaleByTypeNumber(this.sGraph, ST_MINMAX, 0), 67);
      $drawProjectionBar_0(minMaxScale, srsItem, false);
    }
  }
}
;
_.drawHoverEffectsAfterBars = function drawHoverEffectsAfterBars_0(){
  $isFoldedStyle(this) && $addFolds(this);
}
;
_.freeResources = function freeResources_14(dataToKeep){
  $freeResources_18(this, dataToKeep);
  this.maxPosAry = null;
  this.minPosAry = null;
}
;
_.processChartOptions = function processChartOptions_5(){
  var style, valScale;
  this.graph.typeAttributes.isStream && $removeGoalScaleMarker(this.sGraph);
  $processChartOptions_4(this);
  if (this.graph.hasChartOptions()) {
    style = this.graph.getChartOptionAsString('style');
    if (style != null && $equalsIgnoreCase(style, 'folded')) {
      this.foldedStyle = true;
      this.graph.typeAttributes.curvedLines = false;
      this.graph.typeAttributes.curvedLines = false;
    }
     else if (style != null && $equalsIgnoreCase(style, 'curved')) {
      this.graph.typeAttributes.curvedLines = true;
      this.graph.typeAttributes.stepLines = false;
      this.foldedStyle = false;
    }
     else if (style != null && $equalsIgnoreCase(style, 'step')) {
      this.graph.typeAttributes.stepLines = true;
      this.graph.typeAttributes.curvedLines = false;
      this.foldedStyle = false;
    }
     else if (style != null && $equalsIgnoreCase(style, 'flat')) {
      this.graph.typeAttributes.stepLines = false;
      this.graph.typeAttributes.curvedLines = false;
      this.foldedStyle = false;
    }
  }
  if (this.graph.typeAttributes.isStream) {
    valScale = $getValueScale(this.sGraph);
    valScale.hideGrids = true;
    valScale.isHidden = true;
  }
}
;
_.setData = function setData_6(data_0){
  var scale, theData;
  if (data_0) {
    !this.originalData && (this.originalData = data_0);
    !!this.currentViewDataGrid && this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = data_0;
    if ($getNumRows(data_0) > $intern_36 || $getNumCols(data_0) > $intern_36) {
      theData = $clone_0(this.currentViewDataGrid, $intern_36, $intern_36);
      this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
      this.currentViewDataGrid = theData;
      $warnNotAllDataShown(this.graph.chart);
    }
    this.graph.data_0 = this.currentViewDataGrid;
    if ($getNumRows(this.graph.data_0) == 1) {
      scale = $getCategoryScale(this.sGraph);
      instanceOf(scale, 36) && $setIsLineType(castTo(scale, 36), false);
    }
    $setData_3(this, this.currentViewDataGrid);
  }
}
;
_.setHoverData = function setHoverData_10(data_0, rnd){
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0) && this.hoverData != null && instanceOf(this.hoverData, 3) && castTo(this.hoverData, 3).array.length > 0 && instanceOf($get_2(castTo(this.hoverData, 3), 0), 46)) {
    this.hoverData = data_0;
    $clearScaleHover(this.sGraph, rnd);
    $selectAnnotation(this);
    return true;
  }
  return $setHoverData_0(this, data_0, rnd);
}
;
_.shapeIsValidAnnotationPoint = function shapeIsValidAnnotationPoint_1(shape_0){
  var dataObj;
  dataObj = $getDataObjectForShape_0(this.graph, shape_0);
  if (!!shape_0 && dataObj != null && instanceOf(dataObj, 25) && castTo(dataObj, 25).rects != null)
    return false;
  else if (!!shape_0 && !!shape_0.fill_0 && shape_0.fill_0.color_0 != ($clinit_CFColor() , TRANSPARENT))
    return false;
  return true;
}
;
_.foldedStyle = false;
var Lcom_domo_charting_graphs_HandlerArea_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerArea', 329);
function $compare_12(o1, o2){
  var o1Val, o2Val;
  o1Val = $getValueOrProjection(o1.cell, true);
  isNaN(o1Val) && (o1Val = $intern_20);
  o2Val = $getValueOrProjection(o2.cell, true);
  isNaN(o2Val) && (o2Val = $intern_20);
  return $compareTo_1(o1Val, o2Val);
}

function HandlerBar$1(){
}

defineClass(320, 1, {}, HandlerBar$1);
_.compare = function compare_13(o1, o2){
  return $compare_12(castTo(o1, 18), castTo(o2, 18));
}
;
_.equals_0 = function equals_16(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerBar$1_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBar/1', 320);
function $compare_13(this$static, o1, o2){
  var o1Int, o2Int;
  try {
    if (this$static.this$01.sGraph.isHorizontal) {
      o1Int = round_int(castTo(o1, 25).getRect().y_0);
      o2Int = round_int(castTo(o2, 25).getRect().y_0);
      return o1Int - o2Int;
    }
     else {
      o1Int = round_int(castTo(o1, 25).getRect().x_0);
      o2Int = round_int(castTo(o2, 25).getRect().x_0);
      return o1Int - o2Int;
    }
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      return 0;
    }
     else 
      throw toJs($e0);
  }
}

function HandlerBar$2(this$0){
  this.this$01 = this$0;
}

defineClass(321, 1, {}, HandlerBar$2);
_.compare = function compare_14(o1, o2){
  return $compare_13(this, castTo(o1, 18), castTo(o2, 18));
}
;
_.equals_0 = function equals_17(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerBar$2_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBar/2', 321);
function $compare_14(this$static, o1, o2){
  var dataObject1, dataObject2, o1Val, o2Val, sbi1, sbi2;
  dataObject1 = $getDataObjectForGE_0(this$static.this$01.graph, o1);
  dataObject2 = $getDataObjectForGE_0(this$static.this$01.graph, o2);
  if (dataObject1 != null && instanceOf(dataObject1, 25) && dataObject2 != null && instanceOf(dataObject2, 25)) {
    sbi1 = castTo(dataObject1, 25);
    sbi2 = castTo(dataObject2, 25);
    o1Val = $getValue(sbi1.cell);
    o2Val = $getValue(sbi2.cell);
    isNaN(o1Val) && (o1Val = $intern_20);
    isNaN(o2Val) && (o2Val = $intern_20);
    return o1Val < 0 && o2Val < 0?$compareTo_1(o1Val, o2Val):$compareTo_1(o2Val, o1Val);
  }
   else {
    return 0;
  }
}

function HandlerBar$3(this$0){
  this.this$01 = this$0;
}

defineClass(322, 1, {}, HandlerBar$3);
_.compare = function compare_15(o1, o2){
  return $compare_14(this, castTo(o1, 12), castTo(o2, 12));
}
;
_.equals_0 = function equals_18(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerBar$3_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBar/3', 322);
function $createFinalStateBars(this$static, categories, baseScale, valueScale){
  var barWidth, boxPlotList, boxRect, catScalePos, category, hiLowRect, highPos, highQPos, index_0, lastState, lowPos, lowQPos, medianPos, medianRect, minCatPos, minValuePos, srsBoxPlotInfo;
  if (!valueScale)
    return;
  barWidth = $getBarWidth(this$static, categories.array.length);
  minCatPos = baseScale.getMinPosition();
  boxPlotList = new ArrayList;
  for (index_0 = 0; index_0 < categories.array.length; index_0++) {
    category = (checkCriticalElementIndex(index_0, categories.array.length) , castTo(categories.array[index_0], 183));
    minValuePos = valueScale.getMinPosition();
    catScalePos = baseScale.getPositionForValue(index_0);
    highPos = valueScale.getPositionForValue(category.high);
    lowPos = valueScale.getPositionForValue(category.low);
    highQPos = valueScale.getPositionForValue(category.highQ);
    lowQPos = valueScale.getPositionForValue(category.lowQ);
    medianPos = valueScale.getPositionForValue(category.median);
    hiLowRect = $getBarRect(this$static, minCatPos, catScalePos, minValuePos, highPos, lowPos, barWidth);
    medianRect = $getBarRect(this$static, minCatPos, catScalePos, minValuePos, medianPos, medianPos, barWidth);
    boxRect = $getBarRect(this$static, minCatPos, catScalePos, minValuePos, highQPos, lowQPos, barWidth);
    if (boxRect.height_0 < 3 && boxRect.height_0 > -3) {
      $setY_0(boxRect, boxRect.y_0 + boxRect.height_0 / 2 - 1.5);
      boxRect.height_0 = 3;
    }
    lastState = $getLastState(this$static, category.firstCell, false);
    srsBoxPlotInfo = new SrsBoxPlotInfo(this$static, category.firstCell, hiLowRect, boxRect, medianRect, this$static.fill_0, this$static.stroke_0, lastState);
    boxPlotList.array[boxPlotList.array.length] = srsBoxPlotInfo;
  }
  $add_1(this$static.graph.seriesShapes, new SeriesInfo(boxPlotList, null));
  $drawAllBars(this$static, -1, null);
}

function $getBoxPlotFormatData(data_0){
  var category, cols_0, column, dataFormat, dataGrid, map_0, row, rows_0;
  rows_0 = new ArrayList;
  map_0 = new HashMap;
  dataFormat = $getFirstDataFormat(data_0);
  row = $getFirstVisibleRow(data_0);
  while (row) {
    category = castTo($getStringValue(map_0, $getName(row)), 7);
    if (category)
      $addCopyOfCellsFromOtherRow(category, row, true, true);
    else {
      category = new ColRowInfo_1(row, true);
      rows_0.array[rows_0.array.length] = category;
      $putStringValue(map_0, $getName(row), category);
    }
    row = $getNextVisibleRow(data_0, row);
  }
  cols_0 = new ArrayList_0(1);
  column = new ColRowInfo_2($getName($getColumn(data_0, 0)), 'STRING');
  !!$getColumn(data_0, 0).metadata && $setMetadata(column, new ColumnMetadata_0($getColumn(data_0, 0).metadata));
  column.format = dataFormat;
  cols_0.array[cols_0.array.length] = column;
  dataGrid = new DataGrid_0(data_0.name_0, data_0.originalDataType, rows_0, cols_0, null);
  $setOrigColNameList(dataGrid, data_0.origColNameList);
  $setDataHasBeenLimited(dataGrid, data_0.dataHasBeenLimited);
  $setDateGrain(dataGrid, data_0.dateGrain);
  $setErrorCode(dataGrid, data_0.errorCode);
  $setPreSorted(dataGrid, data_0.preSorted);
  $setDateJoinColumn(dataGrid, data_0.dateJoinColumn);
  return dataGrid;
}

function $getListOfCategories(this$static){
  var category, data_0, row;
  if (!this$static.categoriesProcessed) {
    this$static.categories.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    data_0 = this$static.graph.data_0;
    row = $getFirstVisibleRow(data_0);
    while (!!row && !row.hidden) {
      category = new BoxPlotInfo(row);
      $add_1(this$static.categories, category);
      row = $getNextVisibleRow(data_0, row);
    }
    this$static.categoriesProcessed = true;
  }
}

function $processData(this$static, baseScale, valScale){
  var data_0;
  data_0 = this$static.graph.data_0;
  if (!data_0 || data_0.numVisibleRows == 0)
    return;
  $getListOfCategories(this$static);
  $createFinalStateBars(this$static, this$static.categories, baseScale, valScale);
}

function HandlerBoxPlot(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
  this.categories = new ArrayList;
}

defineClass(177, 60, {60:1, 177:1, 64:1}, HandlerBoxPlot);
_.calcMinMaxOverride = function calcMinMaxOverride_1(scale, curMin, curMax){
  var boxPlotInfo, boxPlotInfo$iterator, max_0, min_0;
  (this.categories.array.length == 0 || this.graph.data_0.numVisibleRows == 1 || this.categories.array.length == 1 && this.graph.data_0.numVisibleRows > 1) && $getListOfCategories(this);
  max_0 = $intern_20;
  instanceOf(scale, 73) && (max_0 = $intern_39);
  min_0 = $intern_19;
  for (boxPlotInfo$iterator = new ArrayList$1(this.categories); boxPlotInfo$iterator.i < boxPlotInfo$iterator.this$01.array.length;) {
    boxPlotInfo = castTo($next_3(boxPlotInfo$iterator), 183);
    boxPlotInfo.high > max_0 && (max_0 = boxPlotInfo.high);
    boxPlotInfo.low < min_0 && (instanceOf(scale, 73)?boxPlotInfo.low > 0 && (min_0 = boxPlotInfo.low):(min_0 = boxPlotInfo.low));
  }
  return new MinMax(min_0, max_0);
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_2(sGraph, type_0, curTime, valueScale){
  this.graph.geAry.clear_0();
  $createDrawObjectsForFrame(this, sGraph, type_0, curTime, valueScale);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_3(sGraph, rows_0, baseScale, valScale, valScale2){
  $processData(this, baseScale, valScale);
}
;
_.freeResources = function freeResources_15(dataToKeep){
  $freeResources_18(this, dataToKeep);
  this.fill_0 = null;
  this.stroke_0 = null;
  this.categories = null;
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_1(hoverData, rnd, seriesIndex){
  if ($hasInteractions(this.graph)) {
    $clearAllGeArrays(this.graph);
    $drawAllBars(this, seriesIndex, null);
    $drawHints(this, rnd, hoverData, seriesIndex);
  }
}
;
_.processChartOptions = function processChartOptions_6(){
  var fillColor, hoverTextOverride, lineClr, lineColor, valueScale;
  this.fill_0 = new CFFill($getColor(this.graph, 'BoxPlotFill', '#D9EBFD'));
  this.stroke_0 = new CFStroke($getColor(this.graph, 'BoxPlotStroke', '#73B0D7'), 1);
  valueScale = $getValueScaleByNumber(this.sGraph, 0);
  !!valueScale && (valueScale.alwaysIncludeZero = false);
  this.barWidthPercent = DEFAULT_BAR_WIDTH_PERCENT;
  $processChartOptions_4(this);
  if (this.graph.hasChartOptions()) {
    lineColor = this.graph.getChartOptionAsString('line_color');
    if (lineColor != null) {
      lineClr = $getColorForName(this.graph.colorMgr, lineColor);
      $setColor_2(this.stroke_0, lineClr);
      if (lineClr) {
        fillColor = new CFColor_0(lineClr.red, lineClr.green, lineClr.blue, lineClr.alpha_0);
        fillColor.alpha_0 = 72;
        $setColor_0(this.fill_0, fillColor);
      }
    }
    this.disableWhiskers = isTrue(this.graph.getChartOptionAsString('disable_whisker_caps'));
    this.disableFill = isTrue(this.graph.getChartOptionAsString('disable_fill'));
  }
  hoverTextOverride = $getEncodedChartOption(this.graph);
  hoverTextOverride == null && (this.graph.hoverLabelText = this.graph.getLocalizedString('HIGH') + ' = %_HIGH_VALUE\n' + this.graph.getLocalizedString('Q3') + ' = %_THIRD_QUARTILE\n' + this.graph.getLocalizedString('MEDIAN') + ' = %_MEDIAN\n' + this.graph.getLocalizedString('Q1') + ' = %_FIRST_QUARTILE\n' + this.graph.getLocalizedString('LOW') + ' = %_LOW_VALUE');
}
;
_.resetForTypeChange = function resetForTypeChange_3(){
  if (this.originalData) {
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  if (!!this.currentViewDataGrid && this.currentViewDataGrid != this.graph.data_0) {
    $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = null;
  }
}
;
_.setData = function setData_7(data_0){
  var bpData;
  this.categories.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this.categoriesProcessed = false;
  if (data_0) {
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    $setCategoryScaleToCorrectScaleType(this.sGraph);
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    bpData = $getBoxPlotFormatData(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != bpData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = bpData;
    this.sGraph.data_0 = this.currentViewDataGrid;
  }
}
;
_.categoriesProcessed = false;
_.disableFill = false;
_.disableWhiskers = false;
_.fill_0 = null;
_.stroke_0 = null;
var Lcom_domo_charting_graphs_HandlerBoxPlot_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBoxPlot', 177);
function $colIsIndexOrMapping(index_0, mapping, col){
  var curMapping;
  curMapping = col.mapping;
  if (curMapping == null && col.curIndex == index_0 || curMapping != null && $equals_2(curMapping, mapping))
    return true;
  return false;
}

function $drawAllBarsBullet(this$static, index_0, hoverData){
  var curIndex, drawGrayBars, indexOfTargetSeries, srsItem;
  indexOfTargetSeries = -1;
  for (curIndex = this$static.graph.seriesShapes.array.length - 1; curIndex >= 0; curIndex--) {
    srsItem = castTo($get_2(this$static.graph.seriesShapes, curIndex), 19);
    if ($isBar(srsItem)) {
      instanceOf(hoverData, 25)?(hoverData = castTo(hoverData, 25).cell.row):$colIsIndexOrMapping(1, 'TARGET', castTo($get_2(srsItem.srsShapeList, 0), 18).cell.column) && (indexOfTargetSeries = curIndex);
      drawGrayBars = false;
      curIndex != index_0 && index_0 != -1 && (drawGrayBars = true);
      instanceOf(hoverData, 7) && (drawGrayBars = true);
      $drawBarsForASeries(this$static, srsItem, drawGrayBars, index_0, hoverData);
    }
  }
  if ($getNumCols(this$static.graph.data_0) > 1 && indexOfTargetSeries != -1) {
    drawGrayBars = false;
    index_0 != indexOfTargetSeries && index_0 != -1 && (drawGrayBars = true);
    this$static.graph.seriesShapes.array.length > 1 && $drawBarsForASeries(this$static, castTo($get_2(this$static.graph.seriesShapes, indexOfTargetSeries), 19), drawGrayBars, index_0, hoverData);
  }
}

function $getColTypeFromIndexMapping(index_0, mapping, cols_0){
  var col, col$iterator;
  for (col$iterator = cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    if ($colIsIndexOrMapping(index_0, mapping, col))
      return col;
  }
  return null;
}

function $getSeriesInfoForMapping(this$static, mapping){
  var i, shpInfo, shpInfo$iterator, srsInfo;
  for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
    srsInfo = castTo($get_2(this$static.graph.seriesShapes, i), 19);
    for (shpInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      if (!!shpInfo.cell && !!shpInfo.cell.column) {
        if (shpInfo.cell.column.mapping != null) {
          if ($equals_2(shpInfo.cell.column.mapping, mapping))
            return srsInfo;
          else 
            break;
        }
      }
    }
  }
  return null;
}

function $sortBulletBars(this$static, curIndex){
  var endClip, geAry, startClip;
  geAry = this$static.graph.geAry;
  startClip = null;
  endClip = null;
  if (geAry.size_1() > 0) {
    if ($isClip(castTo(geAry.get_1(0), 12))) {
      startClip = castTo(geAry.get_1(0), 12);
      geAry.remove_2(0);
    }
    if (geAry.size_1() > 0 && $isClip(castTo(geAry.get_1(geAry.size_1() - 1), 12))) {
      endClip = castTo(geAry.get_1(geAry.size_1() - 1), 12);
      geAry.remove_2(geAry.size_1() - 1);
    }
    this$static.graph.geAry.sort_0(new HandlerBullet$1(this$static, curIndex));
    !!startClip && this$static.graph.geAry.add_1(0, startClip);
    !!endClip && this$static.graph.geAry.add_0(endClip);
  }
}

function $transformBulletDataIfNeeded(data_0){
  var col, i, j, j0, mdCell, origCell, origCol, row;
  if ($getNumCols(data_0) == 1 && $getMetaDataSize(data_0) > 0) {
    origCol = $getColumn(data_0, 0);
    for (i = 0; i < $getMetaDataSize(data_0); i++) {
      col = $getMetadataInfo(data_0, i);
      for (j0 = 0; j0 < $getNumRows(data_0); j0++) {
        row = $getRow(data_0, j0);
        origCell = $getCellByCellIndex(origCol, j0);
        mdCell = $getMetaDataCell(origCell, i);
        mdCell.column = col;
        $setRow(mdCell, origCell.row);
        $put_0(col.cellMap, valueOf(j0), mdCell);
        $put_0(row.cellMap, valueOf(i + 1), mdCell);
      }
      data_0.cols_0.add_0(col);
    }
    data_0.metadata = null;
    for (j = 0; j < $getNumRows(data_0); j++) {
      origCell = $getCellByCellIndex(origCol, j);
      origCell.metaData = null;
    }
    $setCols(data_0, data_0.cols_0);
  }
  return data_0;
}

function HandlerBullet(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(176, 60, {60:1, 176:1, 64:1}, HandlerBullet);
_.adjustForMultiColumn = function adjustForMultiColumn_0(barRect, numCols, colIndex, curCol, lastRect, value_0){
  var height, width_0;
  if (this.sGraph.isHorizontal) {
    if ($colIsIndexOrMapping(0, 'VALUE', curCol)) {
      height = barRect.height_0 * 3 / 8;
      barRect = new CFRect(barRect.x_0, barRect.y_0 + barRect.height_0 / 2 - height / 2, barRect.width_0, height);
    }
     else if ($colIsIndexOrMapping(1, 'TARGET', curCol)) {
      height = barRect.height_0 * 3 / 4;
      width_0 = 4;
      (this.graph.treatAsSmall || this.graph.simplifiedForMobile) && (width_0 = 2);
      value_0 < 0?(barRect = new CFRect(barRect.x_0 - width_0 / 2, barRect.y_0 + barRect.height_0 / 2 - height / 2, width_0, height)):(barRect = new CFRect(barRect.x_0 + barRect.width_0 - width_0 / 2, barRect.y_0 + barRect.height_0 / 2 - height / 2, width_0, height));
    }
    barRect.height_0 < 1 && (barRect.height_0 = 1);
  }
   else {
    if ($colIsIndexOrMapping(0, 'VALUE', curCol)) {
      width_0 = barRect.width_0 * 3 / 8;
      barRect = new CFRect(barRect.x_0 + barRect.width_0 / 2 - width_0 / 2, barRect.y_0, width_0, barRect.height_0);
    }
     else if ($colIsIndexOrMapping(1, 'TARGET', curCol)) {
      width_0 = barRect.width_0 * 3 / 4;
      height = 4;
      (this.graph.treatAsSmall || this.graph.simplifiedForMobile) && (height = 2);
      value_0 < 0?(barRect = new CFRect(barRect.x_0 + barRect.width_0 / 2 - width_0 / 2, barRect.y_0 + barRect.height_0 - height / 2, width_0, height)):(barRect = new CFRect(barRect.x_0 + barRect.width_0 / 2 - width_0 / 2, barRect.y_0 - height / 2, width_0, height));
    }
    barRect.width_0 < 1 && (barRect.width_0 = 1);
  }
  return barRect;
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_3(sGraph, type_0, curTime, valueScale){
  $createDrawObjectsForFrame(this, sGraph, type_0, curTime, valueScale);
  $sortBulletBars(this, -1);
}
;
_.drawAllBarsForOneHoverData = function drawAllBarsForOneHoverData_0(index_0, hoverData){
  if (hoverData != null && instanceOf(hoverData, 36))
    return;
  $addInnerBoundsClip(this, !this.graph.isThumbnail, false, false);
  $drawAllBarsBullet(this, index_0, hoverData);
  $clearInnerBoundsClip(this, false, false);
  $sortBulletBars(this, index_0);
}
;
_.getDrawingOrderedSeriesShapes = function getDrawingOrderedSeriesShapes_0(){
  var hasMappings, i, mapping, mapping$index, mapping$max, orderedColMappins, seriesShapes, srsInfo;
  if ($getNumCols(this.graph.data_0) == 1) {
    return this.graph.seriesShapes;
  }
   else {
    hasMappings = $getColumn(this.graph.data_0, 0).mapping != null;
    seriesShapes = new ArrayList;
    if (hasMappings) {
      orderedColMappins = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['RANGE3', 'RANGE2', 'RANGE1', 'VALUE', 'TARGET']);
      for (mapping$index = 0 , mapping$max = orderedColMappins.length; mapping$index < mapping$max; ++mapping$index) {
        mapping = orderedColMappins[mapping$index];
        srsInfo = $getSeriesInfoForMapping(this, mapping);
        !!srsInfo && (seriesShapes.array[seriesShapes.array.length] = srsInfo , true);
      }
    }
     else {
      for (i = this.graph.seriesShapes.array.length - 1; i > 1; i--)
        $add_1(seriesShapes, castTo($get_2(this.graph.seriesShapes, i), 19));
      $add_1(seriesShapes, castTo($get_2(this.graph.seriesShapes, 0), 19));
      this.graph.seriesShapes.array.length > 1 && $add_1(seriesShapes, castTo($get_2(this.graph.seriesShapes, 1), 19));
    }
    return seriesShapes;
  }
}
;
_.getLegendColumns = function getLegendColumns_0(){
  var range1Col, range2Col, range3Col, sortedCols, targetCol, valCol;
  if (this.graph.data_0) {
    sortedCols = new ArrayList;
    valCol = $getColTypeFromIndexMapping(0, 'VALUE', this.graph.data_0.cols_0);
    !!valCol && (sortedCols.array[sortedCols.array.length] = valCol , true);
    targetCol = $getColTypeFromIndexMapping(1, 'TARGET', this.graph.data_0.cols_0);
    !!targetCol && (sortedCols.array[sortedCols.array.length] = targetCol , true);
    range1Col = $getColTypeFromIndexMapping(2, 'RANGE1', this.graph.data_0.cols_0);
    !!range1Col && (sortedCols.array[sortedCols.array.length] = range1Col , true);
    range2Col = $getColTypeFromIndexMapping(3, 'RANGE2', this.graph.data_0.cols_0);
    !!range2Col && (sortedCols.array[sortedCols.array.length] = range2Col , true);
    range3Col = $getColTypeFromIndexMapping(4, 'RANGE3', this.graph.data_0.cols_0);
    !!range3Col && (sortedCols.array[sortedCols.array.length] = range3Col , true);
    return sortedCols;
  }
  return null;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_1(legend, colInfo){
  var lii;
  if (colInfo) {
    if ($colIsIndexOrMapping(1, 'TARGET', colInfo)) {
      lii = new LegendItemInfo_0(legend, colInfo, new CFFill($getColorForSeriesNameOrIndex_0(this.graph, colInfo, colInfo.curIndex)), null);
      lii.type_0 = 10;
      return lii;
    }
  }
  return null;
}
;
_.initColors = function initColors_0(){
  var col, col$iterator, color_0, colorAry, index_0, numToAdd;
  colorAry = $getColorAry(this.graph);
  numToAdd = 5 - colorAry.array.length;
  color_0 = (checkCriticalElementIndex(0, colorAry.array.length) , castTo(colorAry.array[0], 15));
  while (numToAdd-- > 0)
    colorAry.array[colorAry.array.length] = color_0;
  index_0 = 0;
  for (col$iterator = this.graph.data_0.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    $colIsIndexOrMapping(0, 'VALUE', col)?$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, new CFColor_2('#73B0D7'))):$colIsIndexOrMapping(1, 'TARGET', col)?$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, new CFColor_2('#B1B1B1'))):$colIsIndexOrMapping(2, 'RANGE1', col)?$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, new CFColor_2('#D2D2D2'))):$colIsIndexOrMapping(3, 'RANGE2', col)?$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, new CFColor_2('#E0E0E0'))):$colIsIndexOrMapping(4, 'RANGE3', col)?$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, new CFColor_2('#EDEDED'))):$set(this.graph.colorAry, index_0, $setGetColorForIndex(this.graph.colorMgr, index_0, color_0));
    ++index_0;
  }
}
;
_.setData = function setData_8(data_0){
  var col, i;
  if ($getNumCols(data_0) == 1 && this.sGraph.typeAttributes.isStacked) {
    this.graph.previousTypeAttributes = $duplicate(this.graph.typeAttributes);
    this.graph.previousTypeAttributes.originallyStacked = true;
    this.graph.typeAttributes.isStacked = false;
  }
   else 
    $getNumCols(data_0) > 1 && !this.sGraph.typeAttributes.isStacked && !!this.graph.previousTypeAttributes && this.graph.previousTypeAttributes.originallyStacked && (this.graph.typeAttributes.isStacked = true);
  data_0 = $limitDataRows(this, data_0, $getMobileLimit(this.graph, 250, $intern_10));
  data_0 = $transformBulletDataIfNeeded(data_0);
  $setData_2(this, data_0);
  for (i = $getNumCols(data_0) - 1; i >= 0; i--) {
    col = $getColumn(data_0, i);
    ($getName(col) == null || $getName(col).length == 0) && !$oneOrMoreCellsHaveValue(col) && data_0.cols_0.remove_2(i);
  }
  $addOrRemoveSecondScale(this) && $setupColumnNumberFormats(this);
  this.graph.typeAttributes.percentOfCategoryData && $hasNegativeValues(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
}
;
var Lcom_domo_charting_graphs_HandlerBullet_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBullet', 176);
function $compare_15(this$static, o1, o2){
  var dataObject1, dataObject2, o1Val, o2Val, sbi1, sbi2;
  dataObject1 = $getDataObjectForGE_0(this$static.this$01.graph, o1);
  dataObject2 = $getDataObjectForGE_0(this$static.this$01.graph, o2);
  if (dataObject1 != null && instanceOf(dataObject1, 25) && dataObject2 != null && instanceOf(dataObject2, 25)) {
    sbi1 = castTo(dataObject1, 25);
    sbi2 = castTo(dataObject2, 25);
    o1Val = $wnd.Math.abs($getValue(sbi1.cell));
    o2Val = $wnd.Math.abs($getValue(sbi2.cell));
    $colIsIndexOrMapping(0, 'VALUE', sbi1.cell.column)?(o1Val = $intern_20):$colIsIndexOrMapping(1, 'TARGET', sbi1.cell.column) && (o1Val = $intern_20);
    $getCurColIndex(sbi2.cell) == 0?(o2Val = $intern_20):$getCurColIndex(sbi2.cell) == 1 && (o2Val = $intern_20);
    if (this$static.val$curIndex2 != -1) {
      $getCurColIndex(sbi1.cell) == this$static.val$curIndex2 && (o1Val = $intern_20);
      $getCurColIndex(sbi2.cell) == this$static.val$curIndex2 && (o2Val = $intern_20);
    }
    isNaN(o1Val) && (o1Val = $intern_20);
    isNaN(o2Val) && (o2Val = $intern_20);
    return $compareTo_1(o2Val, o1Val);
  }
   else {
    return 0;
  }
}

function HandlerBullet$1(this$0, val$curIndex){
  this.this$01 = this$0;
  this.val$curIndex2 = val$curIndex;
}

defineClass(327, 1, {}, HandlerBullet$1);
_.compare = function compare_16(o1, o2){
  return $compare_15(this, castTo(o1, 12), castTo(o2, 12));
}
;
_.equals_0 = function equals_19(other){
  return this === other;
}
;
_.val$curIndex2 = 0;
var Lcom_domo_charting_graphs_HandlerBullet$1_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerBullet/1', 327);
function $clinit_HandlerCalendar(){
  $clinit_HandlerCalendar = emptyMethod;
  NODATA_CLR = new CFColor_2('#F0F0F0');
  GRAY_CLR = new CFColor_2('#333333');
}

function $adjustFirstDateForRolling(this$static, date){
  if (this$static.isNextYearRolling) {
    this$static.startingMonthOffset = date.jsdate.getMonth();
  }
   else if (this$static.isLastYearRolling) {
    date = $getDateOffset(date, 1);
    this$static.startingMonthOffset = date.jsdate.getMonth();
  }
  return date;
}

function $adjustForDayOfWeekOffset(this$static, grid){
  var c, c0, col, dayOfWeekFor1st, firstDate, i, i0, i1, lastCell, newDate, numDaysToAdd, preDayNum, r, row;
  dayOfWeekFor1st = 0;
  for (i0 = 0; i0 < 7; i0++) {
    if (!castTo((checkCriticalElementIndex(0, grid.array.length) , castTo(grid.array[0], 42)).get_1(i0), 75).isPrePostCell) {
      dayOfWeekFor1st = i0;
      break;
    }
  }
  row = new ArrayList;
  col = new ArrayList;
  if (dayOfWeekFor1st < this$static.dayOfWeekOffset) {
    numDaysToAdd = 7 - (this$static.dayOfWeekOffset - dayOfWeekFor1st);
    firstDate = new Date_4(fromDouble_0(castTo((checkCriticalElementIndex(0, grid.array.length) , castTo(grid.array[0], 42)).get_1(this$static.dayOfWeekOffset), 75).date.jsdate.getTime()));
    $setDate(firstDate, firstDate.jsdate.getDate() - 7);
    preDayNum = firstDate.jsdate.getDate();
    for (i1 = 0; i1 < numDaysToAdd; i1++) {
      $setDate(firstDate, preDayNum);
      this$static.showValuesOnPrePostMonthDays?$add_1(col, new GridCell(preDayNum, new Date_4(fromDouble_0(firstDate.jsdate.getTime())), i1, true)):$add_1(col, new GridCell(preDayNum, null, i1, true));
      ++preDayNum;
    }
    for (i = dayOfWeekFor1st; i < this$static.dayOfWeekOffset; i++) {
      $add_1(col, castTo((checkCriticalElementIndex(0, grid.array.length) , castTo(grid.array[0], 42)).get_1(i), 75));
    }
    row.array[row.array.length] = col;
    col = new ArrayList;
  }
  for (r = 0; r < grid.array.length; r++) {
    if (row.array.length == 6 || (!castTo((checkCriticalElementIndex(r, grid.array.length) , castTo(grid.array[r], 42)).get_1(this$static.dayOfWeekOffset), 75).date || castTo((checkCriticalElementIndex(r, grid.array.length) , castTo(grid.array[r], 42)).get_1(this$static.dayOfWeekOffset), 75).isPrePostCell) && !$equals_2(this$static.view, 'year') && row.array.length > 2)
      break;
    for (c0 = this$static.dayOfWeekOffset; c0 < 7; c0++)
      $add_1(col, castTo((checkCriticalElementIndex(r, grid.array.length) , castTo(grid.array[r], 42)).get_1(c0), 75));
    for (c = 0; c < this$static.dayOfWeekOffset; c++) {
      if (r + 1 < grid.array.length) {
        $add_1(col, castTo((checkCriticalElementIndex(r + 1, grid.array.length) , castTo(grid.array[r + 1], 42)).get_1(c), 75));
      }
       else {
        lastCell = castTo($get_2(col, col.array.length - 1), 75);
        newDate = null;
        !!lastCell && !!lastCell.date && (newDate = new Date_4(add_1(fromDouble_0(lastCell.date.jsdate.getTime()), $intern_34)));
        this$static.showValuesOnPrePostMonthDays?$add_1(col, new GridCell(newDate.jsdate.getDate(), newDate, c, true)):!lastCell.date?$add_1(col, new GridCell(lastCell.day + 1, null, c, true)):$add_1(col, new GridCell(1, null, c, true));
      }
    }
    row.array[row.array.length] = col;
    col = new ArrayList;
  }
  return row;
}

function $drawCell(this$static, rnd, x_0, y_0, width_0, height, cell, fontSize, centerDates, showTextItems, textHeight, numberFontSize){
  var bkgElemGe, curRange, dayFontSize, ddURL, eventTI, evt, evt$iterator, fillColor, fontColor, highlightStroke, hoverText, i, index_0, lastEvent, maxEvents, rectShape, text_0, today, todayWithTime, top_0, valStr;
  new CFColor_2('#F2F2F3');
  fontColor = GRAY_CLR;
  hoverText = null;
  if ($equals_2(this$static.style_0, 'apple')) {
    !showTextItems && !!cell.events && cell.events.array.length > 0?$addGraphicElement_0(this$static.graph, $getRectShape(rnd, x_0 + 3, y_0, width_0 - 6, height, this$static.cellFillClr, null, null, null, null)):cell.dayOfWeek == 0 || cell.dayOfWeek == 6?$addGraphicElement_0(this$static.graph, $getRectShape(rnd, x_0 + 3, y_0, width_0 - 6, height, new CFColor_2('#F5F5F5'), null, null, null, null)):$addGraphicElement_0(this$static.graph, $getRectShape(rnd, x_0, y_0, width_0, height, ($clinit_CFColor() , WHITE), null, null, null, null));
    $addGraphicElement_0(this$static.graph, new GraphicElement_0(new CFShape_0(new CFPath_1(x_0 + 3, y_0, x_0 + width_0 - 3, y_0), null, new CFStroke_1('#DEDBDB', 1))));
    cell.day != 0 && (centerDates?$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0, y_0, width_0, height), '' + cell.day, new CFFont_0(null, fontSize, GRAY_CLR), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null))):$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 3, y_0, width_0 - 7, 20), '' + cell.day, new CFFont_0(null, fontSize, GRAY_CLR), HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null))));
  }
   else if ($equals_2(this$static.style_0, 'plain')) {
    fillColor = ($clinit_CFColor() , WHITE);
    !showTextItems && !!cell.events && cell.events.array.length > 0 && (fillColor = this$static.cellFillClr);
    rectShape = new CFShape_1(new CFRect(x_0, y_0, width_0, height), new CFFill(fillColor), new CFStroke(BLACK, 1));
    $addGraphicElement_0(this$static.graph, new GraphicElement_0(rectShape));
    cell.day != 0 && (centerDates?$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0, y_0, width_0, height), '' + cell.day, new CFFont_0(null, fontSize, BLACK), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null))):$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 5, y_0, width_0, 20), '' + cell.day, new CFFont_0(null, fontSize, BLACK), 0, VALIGN_MIDDLE, 5, null, null))));
  }
   else {
    ddURL = null;
    curRange = -1;
    if (this$static.drawValueCal && cell.hasValue) {
      curRange = getRangeIndexForValue(cell.value_0, this$static.rangeValues, this$static.balancedDistribution, this$static.zeroLikeNoData);
      hoverText = $formatNumber_1(this$static.graph.hoverNumberFormatter, cell.value_0);
      !!cell.events && cell.events.array.length > 0 && (ddURL = $getCellDrilldown(this$static, cell));
    }
     else if (!!cell.events && cell.events.array.length > 0) {
      curRange = getRangeIndexForValue(cell.events.array.length, this$static.rangeValues, this$static.balancedDistribution, this$static.zeroLikeNoData);
      if (this$static.showEventCountOnly) {
        cell.events.array.length == 1?(hoverText = '' + ('' + cell.events.array.length) + ' Item'):(hoverText = '' + ('' + cell.events.array.length) + ' Items');
      }
       else {
        hoverText = '';
        index_0 = 0;
        for (evt$iterator = new ArrayList$1(cell.events); evt$iterator.i < evt$iterator.this$01.array.length;) {
          evt = castTo($next_3(evt$iterator), 120);
          hoverText += evt.text_0 + '\n';
          ++index_0;
          if (index_0 > 9 && cell.events.array.length > 11) {
            hoverText += cell.events.array.length - 10 + ' ' + this$static.graph.getLocalizedString('MORE_ITEMS');
            break;
          }
        }
      }
      ddURL = $getCellDrilldown(this$static, cell);
    }
    fillColor = $getFillColorForValue(this$static, curRange);
    curRange > 1 && (fontColor = ($clinit_CFColor() , WHITE));
    (!cell.date || cell.isPrePostCell) && (fillColor = new CFColor_2('#F9F9F9'));
    fillColor = this$static.getFillColorOverride(fillColor, cell);
    width_0 < 30 || height < 30?(bkgElemGe = $getRectShape(rnd, x_0 + 1, y_0 + 1, width_0 - 1, height - 1, fillColor, hoverText, null, null, ddURL)):(bkgElemGe = $getRectShape(rnd, x_0 + 1, y_0 + 1, width_0 - 2, height - 2, fillColor, hoverText, null, null, ddURL));
    this$static.setBkgElemDataObject(bkgElemGe, cell);
    $addGraphicElement_0(this$static.graph, bkgElemGe);
    if (this$static.highlightToday && (!cell.isPrePostCell || $equals_2(this$static.view, 'month'))) {
      todayWithTime = $getTodayAdjustedForTimeZone(this$static);
      today = new Date_1(todayWithTime.jsdate.getFullYear() - $intern_14, todayWithTime.jsdate.getMonth(), todayWithTime.jsdate.getDate());
      if (!!cell.date && eq(fromDouble_0(cell.date.jsdate.getTime()), fromDouble_0(today.jsdate.getTime()))) {
        highlightStroke = new CFStroke_1('#000000', 1);
        highlightStroke.noMouse = true;
        $addGraphicElement_0(this$static.graph, new GraphicElement_0(new CFShape_1(new CFRect(x_0 + 1, y_0, width_0 - 1, height - 1), null, highlightStroke)));
      }
    }
    if (cell.day != 0 && (textHeight > 0 || !this$static.hideDatesOnSmallCalendars)) {
      (!cell.date || cell.isPrePostCell) && (fontColor = new CFColor_2('#8A8D8F'));
      dayFontSize = numberFontSize;
      if (textHeight == 0) {
        dayFontSize = height;
        height > 10 && (dayFontSize = 10);
      }
      (!!cell.date && !cell.isPrePostCell || !$equals_2(this$static.view, 'year')) && (centerDates?$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 1, y_0, width_0, height), '' + cell.day, new CFFont_0(null, dayFontSize, fontColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null))):$addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 5, y_0, width_0, 20), '' + cell.day, new CFFont_0(null, dayFontSize, fontColor), 0, VALIGN_MIDDLE, 5, null, null))));
    }
  }
  if (this$static.drawValueCal && !centerDates && cell.hasValue && !this$static.onlyShowValuesOnHover) {
    valStr = this$static.graph.formatNumber(cell.value_0);
    $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0, y_0, width_0, height), valStr, new CFFont_0(null, 16, fontColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null)));
  }
   else if (!this$static.onlyShowValuesOnHover) {
    maxEvents = $wnd.Math.floor((height - 16) / 12);
    lastEvent = 100;
    !!cell.events && cell.events.array.length > maxEvents && (lastEvent = maxEvents - 1);
    if (showTextItems && !!cell.events && cell.events.array.length > 0) {
      top_0 = y_0 + 16;
      for (i = 0; i < cell.events.array.length; i++) {
        !!cell.date && '' + (cell.date.jsdate.getFullYear() - $intern_14) + '_' + cell.date.jsdate.getMonth() + '_' + cell.date.jsdate.getDay() + '_' + i;
        if (i == lastEvent) {
          text_0 = '+ ' + (cell.events.array.length - i) + ' more';
          $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 4, top_0, width_0 - 8, 15), text_0, new CFFont_0(null, 10, fontColor), 0, VALIGN_MIDDLE, 5, null, null)));
          break;
        }
         else {
          eventTI = getWrappedTextForWidthWithMaxLines(rnd, castTo($get_2(cell.events, i), 120).text_0, new CFFont_0(null, 10, ($clinit_CFColor() , BLACK)), width_0 - 17, -1, 1);
          $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0 + 4, top_0, width_0 - 8, 15), $getStringForIndex(eventTI), new CFFont_0(null, 10, fontColor), 0, VALIGN_MIDDLE, 5, null, null)));
        }
        top_0 += 12;
      }
    }
  }
}

function $drawDayCalendar(this$static, rnd, Year, Month, Day, x_0, y_0, width_0, height){
  var date, ddGE, drillFilter, drillShape, eventTI, events, filter1, filterBase, i, lastEvent, maxColEvents, maxEvents, text_0, textBounds, textFontSize, textHeight, titleBnds, titleFontSize, titleHeight, titleStr, top_0, twoColumns;
  date = new Date_1(Year, Month - 1, Day);
  titleFontSize = 16;
  titleHeight = 20;
  titleStr = getLongDayOfWeekName(date, this$static.graph.chart.locale);
  textHeight = 20;
  textFontSize = 14;
  if (width_0 < 300) {
    titleStr = getShortDayOfWeekName(date, this$static.graph.chart.locale);
    titleFontSize = 12;
    titleHeight = 15;
    textFontSize = 12;
    textHeight = 16;
  }
   else 
    width_0 < 500 && (titleFontSize = 14);
  titleStr += ', ' + getLongMonthName(date, this$static.graph.chart.locale) + ' ' + date.jsdate.getDate() + ' ' + (date.jsdate.getFullYear() - $intern_14 + $intern_14);
  titleBnds = new CFRect(x_0, y_0, width_0, titleHeight);
  if (!this$static.graph.chart.staticImage) {
    top_0 = y_0 + titleHeight / 2 - 5;
    $addGraphicElement_0(this$static.graph, $getBackChevron(this$static, top_0, x_0 + 5));
    $addGraphicElement_0(this$static.graph, $getNextChevron(this$static, titleBnds.y_0 + titleBnds.height_0 / 2 - 5, x_0 + 20));
    $setX_0(titleBnds, titleBnds.x_0 + 50);
  }
  $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, titleBnds, titleStr, new CFFont_1(null, titleFontSize, GRAY_CLR, 1), 0, VALIGN_MIDDLE, 5, null, null)));
  events = $getEventsForDate(this$static, date);
  if (events.array.length > 0) {
    maxEvents = $wnd.Math.floor((height - (titleHeight + 10)) / textHeight);
    maxColEvents = maxEvents;
    lastEvent = 150;
    twoColumns = false;
    if (width_0 > 650 && events.array.length > maxEvents) {
      maxEvents *= 2;
      twoColumns = true;
      width_0 = toDouble_0(fromDouble_0($wnd.Math.round(width_0 / 2)));
    }
    events.array.length > maxEvents && (lastEvent = maxEvents - 1);
    top_0 = y_0 + titleHeight + 10;
    for (i = 0; i < events.array.length; i++) {
      '' + (date.jsdate.getFullYear() - $intern_14) + '_' + date.jsdate.getMonth() + '_' + date.jsdate.getDay() + '_' + i;
      if (i == lastEvent) {
        text_0 = '+ ' + (events.array.length - i) + ' more';
        $addGraphicElement_0(this$static.graph, (null , drawTextInBounds(rnd, new CFRect(x_0 + 4, top_0, width_0 - 8, 15), text_0, new CFFont_0(null, textFontSize, GRAY_CLR), 0, VALIGN_MIDDLE, 5, null, null)));
        break;
      }
       else {
        text_0 = (checkCriticalElementIndex(i, events.array.length) , castTo(events.array[i], 120)).text_0;
        this$static.drawValueCal && (text_0 = $formatNumber_1(this$static.graph.hoverNumberFormatter, (checkCriticalElementIndex(i, events.array.length) , castTo(events.array[i], 120)).value_0) + ' : ' + (checkCriticalElementIndex(i, events.array.length) , castTo(events.array[i], 120)).text_0);
        checkCriticalElementIndex(i, events.array.length);
        castTo(events.array[i], 120);
        eventTI = getWrappedTextForWidthWithMaxLines(rnd, text_0, new CFFont_0(null, textFontSize, ($clinit_CFColor() , BLACK)), width_0 - 17, -1, 1);
        textBounds = new CFRect(x_0 + 4, top_0, width_0 - 8, 15);
        $addGraphicElement_0(this$static.graph, (null , drawTextInBounds(rnd, textBounds, $getStringForIndex(eventTI), new CFFont_0(null, textFontSize, GRAY_CLR), 0, VALIGN_MIDDLE, 5, null, null)));
        ddGE = new GraphicElement;
        drillShape = new CFShape_1(textBounds, new CFFill(TRANSPARENT), null);
        filterBase = new FilterBase($getRow(this$static.graph.data_0, 0).parentName, 'EQUALS', $getRow(this$static.graph.data_0, 0));
        $addValue(filterBase, (checkCriticalElementIndex(i, events.array.length) , castTo(events.array[i], 120)).dateStr);
        $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
        $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
        filter1 = getDrillFilterFromValues(filterBase);
        drillFilter = '{"filters":[' + filter1 + ']}';
        drillShape.drillFilter = drillFilter;
        $addShape_0(ddGE, drillShape, '{"internal": "DrillFilter"}');
        $addGraphicElement_0(this$static.graph, ddGE);
      }
      top_0 += textHeight;
      if (twoColumns && i == maxColEvents - 1) {
        top_0 = y_0 + titleHeight + 10;
        x_0 = width_0;
      }
    }
  }
}

function $drawGrid(this$static, rnd, x_0, y_0, width_0, height, calGrid, numberFontSize){
  var cellHeight, cellWidth, centerDates, col, curLeft, curTop, dayName, dayRect, dayStrDim, dowFontSize, dowTitleHeight, fontSize, geDayTitle, gridHeight, i, row, showTextItems;
  dowTitleHeight = 25;
  dowFontSize = 12;
  if (width_0 < 200 || height < 200) {
    dowTitleHeight = 15;
    dowFontSize = 10;
  }
  $equals_2(this$static.view, 'year') && (width_0 < 100 || height < 100) && (dowTitleHeight = 0);
  gridHeight = height - dowTitleHeight;
  curTop = y_0 + dowTitleHeight;
  curLeft = x_0;
  if (calGrid.array.length > 0 && (checkCriticalElementIndex(0, calGrid.array.length) , castTo(calGrid.array[0], 42)).size_1() > 0) {
    centerDates = false;
    showTextItems = true;
    fontSize = 10;
    cellWidth = $wnd.Math.floor(width_0 / (checkCriticalElementIndex(0, calGrid.array.length) , castTo(calGrid.array[0], 42)).size_1());
    cellHeight = $wnd.Math.floor(gridHeight / calGrid.array.length);
    dayStrDim = rnd.measureText_0('30', new CFFont_0(null, 10, ($clinit_CFColor() , BLACK)));
    if (dayStrDim.height_0 > cellHeight - 4 || dayStrDim.width_0 > cellWidth - 6) {
      showTextItems = false;
      centerDates = true;
      fontSize = 8;
      dayStrDim = rnd.measureText_0('30', new CFFont_0(null, 8, BLACK));
    }
     else if (width_0 < 500 || height < 150) {
      showTextItems = false;
      centerDates = true;
    }
    if (dowTitleHeight > 0) {
      for (i = 0; i < 7; i++) {
        dayName = this$static.graph.getLocalizedString('DAYSHORTNAME_' + ((i + this$static.dayOfWeekOffset) % 7 + 1));
        width_0 < 600 && (dayName = dayName.substr(0, 1));
        dayRect = new CFRect(curLeft, y_0, cellWidth, dowTitleHeight);
        geDayTitle = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, dayRect, dayName, new CFFont_0(null, dowFontSize, new CFColor_2('#8A8D8F')), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
        $addGraphicElement_0(this$static.graph, geDayTitle);
        curLeft += cellWidth;
      }
    }
    curLeft = x_0;
    for (row = 0; row < calGrid.array.length; row++) {
      for (col = 0; col < (checkCriticalElementIndex(row, calGrid.array.length) , castTo(calGrid.array[row], 42)).size_1(); col++) {
        dowTitleHeight == 0?$drawCell(this$static, rnd, curLeft, curTop, cellWidth, cellHeight, castTo((checkCriticalElementIndex(row, calGrid.array.length) , castTo(calGrid.array[row], 42)).get_1(col), 75), fontSize, centerDates, showTextItems, 0, numberFontSize):$drawCell(this$static, rnd, curLeft, curTop, cellWidth, cellHeight, castTo((checkCriticalElementIndex(row, calGrid.array.length) , castTo(calGrid.array[row], 42)).get_1(col), 75), fontSize, centerDates, showTextItems, dayStrDim.height_0, numberFontSize);
        curLeft += cellWidth;
      }
      curTop += cellHeight;
      curLeft = x_0;
    }
  }
}

function $drawMonthCalendar(this$static, rnd, Year, Month, x_0, y_0, width_0, height, showYearInTitle){
  var calGrid, dateStr, ddURL, endDateStr, filter1, filterBase, geTitle, monthEnd, monthName, monthStart, numberFontSize, title_0, titleBnds, titleFont, titleFontSize, titleHeight, titleHoverShape, top_0, totalHeight;
  calGrid = $getCalendarGrid(this$static, Year, Month);
  this$static.dayOfWeekOffset != 0 && (calGrid = $adjustForDayOfWeekOffset(this$static, calGrid));
  this$static.addDataToCalendar(calGrid);
  titleHeight = 20;
  titleFontSize = 14;
  numberFontSize = 12;
  if (width_0 < 200 || height < 200) {
    titleHeight = 15;
    titleFontSize = 11;
    numberFontSize = 10;
  }
  if ($equals_2(this$static.view, 'year')) {
    y_0 += 10;
    height -= 10;
  }
  top_0 = y_0 + titleHeight;
  totalHeight = height - titleHeight;
  monthName = '';
  calGrid.array.length > 1 && (checkCriticalElementIndex(1, calGrid.array.length) , calGrid.array[1] != null) && (checkCriticalElementIndex(1, calGrid.array.length) , castTo(calGrid.array[1], 42)).size_1() > 0 && (checkCriticalElementIndex(1, calGrid.array.length) , castTo(calGrid.array[1], 42)).get_1(0) != null && (monthName = getLongMonthName(castTo((checkCriticalElementIndex(1, calGrid.array.length) , castTo(calGrid.array[1], 42)).get_1(0), 75).date, this$static.graph.chart.locale));
  title_0 = monthName.toLocaleUpperCase();
  showYearInTitle && (title_0 += ' ' + (Year + $intern_14));
  titleBnds = new CFRect(x_0 + 5, y_0, width_0 - 10, titleHeight);
  if (this$static.currentView == 1 && !this$static.graph.chart.staticImage) {
    $addGraphicElement_0(this$static.graph, $getBackChevron(this$static, titleBnds.y_0 + titleBnds.height_0 / 2 - 5, titleBnds.x_0));
    $addGraphicElement_0(this$static.graph, $getNextChevron(this$static, titleBnds.y_0 + titleBnds.height_0 / 2 - 5, titleBnds.x_0 + 15));
    $setX_0(titleBnds, titleBnds.x_0 + 45);
  }
  titleFont = new CFFont_1(null, titleFontSize, GRAY_CLR, 1);
  geTitle = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, titleBnds, title_0, titleFont, this$static.titleHAlign, VALIGN_MIDDLE, 5, null, null));
  titleHoverShape = new CFShape_1(titleBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  monthStart = new Date_1(Year, Month - 1, 1);
  monthEnd = new Date_1(Year, Month, 1);
  dateStr = FormatDate(fromDouble_0(monthStart.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
  endDateStr = FormatDate(sub_1(fromDouble_0(monthEnd.jsdate.getTime()), $intern_10), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
  filterBase = new FilterBase($getRow(this$static.graph.data_0, 0).parentName, 'BETWEEN', $getRow(this$static.graph.data_0, 0));
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, dateStr + ' 00:00:00');
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, endDateStr + ' 23:59:59');
  $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
  $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
  filter1 = getDrillFilterFromValues(filterBase);
  ddURL = '{"filters":[' + filter1 + ']}';
  titleHoverShape.drillFilter = ddURL;
  $addShape_0(geTitle, titleHoverShape, '{"internal": "DrillFilter"}');
  $addGraphicElement_0(this$static.graph, geTitle);
  $drawGrid(this$static, rnd, x_0, top_0, width_0, totalHeight, calGrid, numberFontSize);
}

function $drawSmallYearCalendar(this$static, rnd, Year){
  var bnds, cols_0, curCol, curRange, date, dateStr, ddURL, endDate, endDateStr, fillColor, filter1, filterBase, fontColor, hoverText, i, left, month, monthData, monthHeight, monthWidth, title_0, top_0, totalHeight, year;
  bnds = this$static.graph.bnds;
  !!this$static.graph.legend && !!this$static.graph.legend.bnds && $getBottom(this$static.graph.bnds) > this$static.graph.legend.bnds.y_0 && $setHeight(bnds, bnds.height_0 - this$static.graph.legend.bnds.height_0);
  monthData = $getCalendarDataByMonth(this$static, Year);
  totalHeight = bnds.height_0 - 20;
  monthWidth = $wnd.Math.floor(bnds.width_0 / 3);
  monthHeight = $wnd.Math.floor(totalHeight / 4);
  cols_0 = 3;
  if (bnds.width_0 > bnds.height_0) {
    monthWidth = $wnd.Math.floor(bnds.width_0 / 4);
    monthHeight = $wnd.Math.floor(totalHeight / 3);
    cols_0 = 4;
  }
  curCol = 1;
  left = bnds.x_0;
  top_0 = bnds.y_0 + 20;
  title_0 = '' + (Year + $intern_14);
  this$static.startingMonthOffset > 0 && (title_0 += ' - ' + (Year + 1901));
  $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(bnds.x_0 + 5, bnds.y_0, bnds.width_0, 20), title_0, new CFFont_1(null, 16, GRAY_CLR, 1), 0, VALIGN_MIDDLE, 5, null, null)));
  year = Year;
  for (i = 0; i < 12; i++) {
    month = i + this$static.startingMonthOffset;
    if (month >= 12) {
      year = Year + 1;
      month = month - 12;
    }
    date = new Date_1(year, month, 1);
    curRange = getRangeIndexForValue(monthData[i], this$static.rangeValues, this$static.balancedDistribution, this$static.zeroLikeNoData);
    fillColor = new CFColor_2('#F2F2F3');
    fontColor = GRAY_CLR;
    hoverText = null;
    ddURL = null;
    if (curRange != -1) {
      fillColor = $getFillColorForValue(this$static, curRange);
      curRange > 1 && (fontColor = ($clinit_CFColor() , WHITE));
      this$static.drawValueCal?(hoverText = $formatNumber_1(this$static.graph.hoverNumberFormatter, monthData[i])):monthData[i] != 1?(hoverText = '' + ('' + round_int(monthData[i])) + ' Items'):(hoverText = '' + ('' + round_int(monthData[i])) + ' Item');
      endDate = new Date_1(Year, i + 1, 1);
      i == 11 && (endDate = new Date_1(Year + 1, 0, 1));
      endDate = new Date_4(sub_1(fromDouble_0(endDate.jsdate.getTime()), 1));
      dateStr = FormatDate(fromDouble_0(date.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      endDateStr = FormatDate(fromDouble_0(endDate.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      filterBase = new FilterBase($getRow(this$static.graph.data_0, 0).parentName, 'BETWEEN', $getRow(this$static.graph.data_0, 0));
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, dateStr + ' 00:00:00');
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, endDateStr + ' 23:59:59');
      $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
      ddURL = '{"filters":[' + filter1 + ']}';
    }
    $addGraphicElement_0(this$static.graph, $getRectShape(rnd, left, top_0, monthWidth - 1, monthHeight - 1, fillColor, hoverText, getShortMonthName(date, this$static.graph.chart.locale), fontColor, ddURL));
    if (curCol == cols_0) {
      left = bnds.x_0;
      top_0 += monthHeight;
      curCol = 1;
    }
     else {
      left += monthWidth;
      ++curCol;
    }
  }
}

function $drawYearCalendar(this$static, rnd, Year, x_0, y_0, width_0, height){
  var bnds, cols_0, curCol, i, left, month, monthHeight, monthWidth, title_0, titleBnds, titleFont, titleFontSize, titleHeight, top_0, totalHeight, verticalMargin, year;
  bnds = new CFRect(x_0, y_0, width_0, height);
  titleHeight = 20;
  titleFontSize = 16;
  verticalMargin = 20;
  if (bnds.width_0 < 450) {
    titleFontSize = 14;
    verticalMargin = 14;
  }
  if (bnds.width_0 < 250) {
    titleHeight = 11;
    titleFontSize = 12;
    verticalMargin = 0;
  }
  $getMinMaxValuesForYear(this$static, Year);
  totalHeight = bnds.height_0 - titleHeight;
  monthWidth = $wnd.Math.floor((bnds.width_0 - verticalMargin * 2) / 3);
  monthHeight = $wnd.Math.floor(totalHeight / 4);
  cols_0 = 3;
  if (bnds.width_0 > bnds.height_0) {
    monthWidth = $wnd.Math.floor((bnds.width_0 - verticalMargin * 3) / 4);
    monthHeight = $wnd.Math.floor(totalHeight / 3);
    cols_0 = 4;
  }
  curCol = 1;
  left = bnds.x_0;
  top_0 = bnds.y_0 + titleHeight;
  titleBnds = new CFRect(left + 5, bnds.y_0, bnds.width_0, titleHeight);
  if (this$static.currentView == 0 && !this$static.graph.chart.staticImage) {
    $addGraphicElement_0(this$static.graph, $getBackChevron(this$static, titleBnds.y_0 + titleBnds.height_0 / 2 - 5, left + 5));
    $addGraphicElement_0(this$static.graph, $getNextChevron(this$static, titleBnds.y_0 + titleBnds.height_0 / 2 - 5, left + 20));
    $setX_0(titleBnds, titleBnds.x_0 + 45);
  }
  title_0 = '' + (Year + $intern_14);
  this$static.startingMonthOffset > 0 && (title_0 += ' - ' + (Year + 1901));
  titleFont = new CFFont_1(null, titleFontSize, GRAY_CLR, 1);
  $addGraphicElement_0(this$static.graph, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, titleBnds, title_0, titleFont, 0, VALIGN_MIDDLE, 5, null, null)));
  year = Year;
  for (i = 1; i <= 12; i++) {
    month = i + this$static.startingMonthOffset;
    if (month > 12) {
      year = Year + 1;
      month = month - 12;
    }
    $drawMonthCalendar(this$static, rnd, year, month, left, top_0, monthWidth, monthHeight, false);
    if (curCol == cols_0) {
      left = bnds.x_0;
      top_0 += monthHeight;
      curCol = 1;
    }
     else {
      left += monthWidth + verticalMargin;
      ++curCol;
    }
  }
}

function $format_1(this$static, rnd){
  var Day, Month, Year, bnds, fd;
  Day = 0;
  Month = 0;
  Year = 0;
  this$static.graph.legend = $getLegend(this$static.graph);
  if (this$static.graph.legend) {
    this$static.graph.treatAsSmall || this$static.graph.simplifiedForMobile || this$static.graph.typeAttributes.isPopPlay?(this$static.graph.legend.isHidden = true):this$static.graph.verticalLayout && (this$static.graph.legend.position = 1);
    $formatLegends(this$static, ($getNumCols(this$static.graph.data_0) , rnd));
  }
  $processNonDateDataIfNeeded(this$static);
  $sortRows(this$static.graph.data_0, SORT_DATE);
  !!$getMetadataInfo(this$static.graph.data_0, 0) && (this$static.drawValueCal = true);
  $equals_2(this$static.view, 'auto') && this$static.setViewForData();
  (this$static.isLastYearRolling || this$static.isNextYearRolling) && (this$static.startingMonthOffset = 0);
  fd = this$static.getFirstDate();
  if (fd) {
    Day = fd.jsdate.getDate();
    Month = fd.jsdate.getMonth() + 1;
    Year = fd.jsdate.getFullYear() - $intern_14;
  }
  bnds = this$static.graph.bnds;
  !!this$static.graph.legend && !!this$static.graph.legend.bnds && $getBottom(this$static.graph.bnds) > this$static.graph.legend.bnds.y_0 && $setHeight(bnds, bnds.height_0 - this$static.graph.legend.bnds.height_0);
  if ($equals_2(this$static.view, 'year')) {
    this$static.currentView = 0;
    this$static.titleHAlign = this$static.yearTitleHAlign;
    if (bnds.width_0 < 250 || bnds.height_0 < 250) {
      if (!!this$static.graph.typeAttributes && this$static.graph.typeAttributes.isSelector) {
        this$static.currentView = 1;
        this$static.minMax = null;
        $drawMonthCalendar(this$static, rnd, Year, Month, bnds.x_0, bnds.y_0 + this$static.headerHeight, bnds.width_0, bnds.height_0 - this$static.headerHeight, true);
      }
       else 
        $drawSmallYearCalendar(this$static, rnd, Year);
    }
     else 
      $drawYearCalendar(this$static, rnd, Year, bnds.x_0, bnds.y_0 + this$static.headerHeight, bnds.width_0, bnds.height_0 - this$static.headerHeight);
  }
   else if ($equals_2(this$static.view, 'day')) {
    this$static.currentView = 2;
    $drawDayCalendar(this$static, rnd, Year, Month, Day, bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  }
   else {
    this$static.currentView = 1;
    this$static.minMax = null;
    $drawMonthCalendar(this$static, rnd, Year, Month, bnds.x_0, bnds.y_0 + this$static.headerHeight, bnds.width_0, bnds.height_0 - this$static.headerHeight, true);
  }
  !!this$static.graph.legend && $formatFromGraph_2(castTo(this$static.graph.legend, 133), rnd);
  this$static.graph.setNeedsFormat(false);
}

function $formatLegends(this$static, rnd){
  instanceOf(this$static.graph.legend, 133) && $formatFromGraph_2(castTo(this$static.graph.legend, 133), rnd);
  $moveRelativeToGraphBounds_1(this$static.graph.legend, null);
  this$static.graph.legend.createDrawObjects();
}

function $getAdjustedDateForScrollingDateOffsets(this$static, date){
  var Day, Month, Year, newDay, numMonths, numYears, origDay;
  if (!!date && (this$static.yearOffset != 0 || this$static.monthOffset != 0 || this$static.dayOffset != 0)) {
    Year = date.jsdate.getFullYear() - $intern_14;
    Month = date.jsdate.getMonth();
    Day = date.jsdate.getDate();
    origDay = Day;
    this$static.yearOffset != 0 && (Year += this$static.yearOffset);
    this$static.dayOffset != 0 && (Day += this$static.dayOffset);
    if (this$static.monthOffset != 0) {
      if (this$static.monthOffset < 0) {
        numYears = abs_0(this$static.monthOffset) / 12 | 0;
        numYears > 0 && (Year -= numYears);
        numMonths = -(this$static.monthOffset % 12);
        Month -= numMonths;
        if (Month < 1) {
          Year -= 1;
          Month += 12;
        }
      }
       else if (this$static.monthOffset > 0) {
        numYears = this$static.monthOffset / 12 | 0;
        numYears > 0 && (Year += numYears);
        numMonths = this$static.monthOffset % 12;
        Month += numMonths;
        if (Month > 12) {
          Year += 1;
          Month -= 12;
        }
      }
      date = new Date_1(Year, Month, Day);
      newDay = date.jsdate.getDate();
      newDay < origDay && (Day -= newDay);
    }
    date = new Date_1(Year, Month, Day);
  }
  return date;
}

function $getBackChevron(this$static, top_0, left){
  var geBack, hoverShape, leftChevronPoints, leftChevronShape, path;
  geBack = new GraphicElement;
  leftChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  leftChevronPoints[0] = new CFPoint(left + 10, top_0);
  leftChevronPoints[1] = new CFPoint(left + 4, top_0 + 5);
  leftChevronPoints[2] = new CFPoint(left + 10, top_0 + 10);
  path = new CFPath_13(leftChevronPoints, false);
  path.shouldAntiAlias = true;
  leftChevronShape = new CFShape_0(path, null, new CFStroke_1('#000000', 1));
  !geBack.shapeAry && (geBack.shapeAry = new ArrayList);
  $add_1(geBack.shapeAry, leftChevronShape);
  hoverShape = new CFShape_1(new CFRect(left - 10, top_0 - 4, 22, 18), ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.drillFilter = '{"internal": "prev period"}';
  $setDataObject_0(hoverShape, this$static.graph);
  !geBack.shapeAry && (geBack.shapeAry = new ArrayList);
  $add_1(geBack.shapeAry, hoverShape);
  return geBack;
}

function $getCalendarDataByMonth(this$static, year){
  var entry, i, i0, itemMonth, itemYear, max_0, min_0, monthData, monthHasData, monthVal, outerIter, retMonthData, rowCell, rowCell$iterator, rowDate, rowInfo, rowInfo$iterator, valList;
  min_0 = $intern_19;
  max_0 = $intern_20;
  monthData = stampJavaTypeInfo(getClassLiteralForArray(D_classLit, 1), $intern_24, 41, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  monthHasData = stampJavaTypeInfo(getClassLiteralForArray(Z_classLit, 1), $intern_24, 41, 16, [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
  for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
    rowInfo = castTo(rowInfo$iterator.next_1(), 7);
    if (neq(rowInfo.timeMS, 0)) {
      rowDate = new Date_4(rowInfo.timeMS);
      itemMonth = rowDate.jsdate.getMonth();
      itemYear = rowDate.jsdate.getFullYear() - $intern_14;
      if (itemYear == year) {
        for (rowCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); rowCell$iterator.val$outerIter2.hasNext;) {
          rowCell = (entry = $next_1(rowCell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          if (this$static.drawValueCal) {
            if (!isNaN_0($getValue_0(rowCell))) {
              monthData[itemMonth] = monthData[itemMonth] + $getValue_0(rowCell);
              monthHasData[itemMonth] = true;
            }
          }
           else if ($getValueStr(this$static, rowCell) != null) {
            monthData[itemMonth] = monthData[itemMonth] + 1;
            monthHasData[itemMonth] = true;
          }
        }
      }
       else if (this$static.startingMonthOffset > 0 && itemYear == year + 1) {
        for (rowCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); rowCell$iterator.val$outerIter2.hasNext;) {
          rowCell = (entry = $next_1(rowCell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          if (this$static.drawValueCal) {
            if (!isNaN_0($getValue_0(rowCell))) {
              monthData[itemMonth + 12] = monthData[itemMonth + 12] + $getValue_0(rowCell);
              monthHasData[itemMonth + 12] = true;
            }
          }
           else if ($getValueStr(this$static, rowCell) != null) {
            monthData[itemMonth + 12] = monthData[itemMonth + 12] + 1;
            monthHasData[itemMonth + 12] = true;
          }
        }
      }
    }
  }
  valList = new ArrayList;
  for (i0 = this$static.startingMonthOffset; i0 < 12 + this$static.startingMonthOffset; i0++) {
    monthVal = monthData[i0];
    if (monthHasData[i0]) {
      monthVal > max_0 && (max_0 = monthVal);
      monthVal < min_0 && (min_0 = monthVal);
      $add_1(valList, monthVal);
      monthData[i0 - this$static.startingMonthOffset] = monthData[i0];
    }
     else {
      monthData[i0 - this$static.startingMonthOffset] = NaN;
    }
  }
  this$static.minMax = new MinMax_0(min_0, max_0, valList);
  this$static.manualRanges || (this$static.rangeValues = getRangeValues(this$static.minMax, this$static.balancedDistribution, this$static.rangeColors.array.length));
  retMonthData = initUnidimensionalArray(D_classLit, $intern_24, 41, 12, 15, 1);
  for (i = 0; i < 12; i++)
    retMonthData[i] = monthData[i];
  return retMonthData;
}

function $getCalendarGrid(this$static, year, month){
  var cellDate, col, d, dayNum, dow, firstCalDate, i, i0, i1, mon, preDayNum, row;
  mon = month - 1;
  d = new Date_1(year, mon, 1);
  row = new ArrayList;
  col = new ArrayList;
  firstCalDate = new Date_4(fromDouble_0(d.jsdate.getTime()));
  $setDate(firstCalDate, d.jsdate.getDate() - d.jsdate.getDay());
  preDayNum = firstCalDate.jsdate.getDate();
  for (i0 = 0; i0 < d.jsdate.getDay(); i0++) {
    $setDate(firstCalDate, preDayNum);
    this$static.showValuesOnPrePostMonthDays?$add_1(col, new GridCell(preDayNum, new Date_4(fromDouble_0(firstCalDate.jsdate.getTime())), i0, true)):$add_1(col, new GridCell(preDayNum, null, i0, true));
    ++preDayNum;
  }
  while (d.jsdate.getMonth() == mon) {
    dayNum = d.jsdate.getDate();
    dow = d.jsdate.getDay();
    cellDate = new Date_4(fromDouble_0(d.jsdate.getTime()));
    $add_1(col, new GridCell(dayNum, cellDate, dow, false));
    if (d.jsdate.getDay() % 7 == 6) {
      row.array[row.array.length] = col;
      col = new ArrayList;
    }
    $setDate(d, d.jsdate.getDate() + 1);
  }
  for (i1 = d.jsdate.getDay(); i1 < 7 && col.array.length > 0; i1++) {
    cellDate = new Date_4(fromDouble_0(d.jsdate.getTime()));
    dayNum = d.jsdate.getDate();
    this$static.showValuesOnPrePostMonthDays?$add_1(col, new GridCell(dayNum, cellDate, i1, true)):$add_1(col, new GridCell(dayNum, null, i1, true));
    $setDate(d, d.jsdate.getDate() + 1);
    if (i1 == 6) {
      row.array[row.array.length] = col;
      col = new ArrayList;
    }
  }
  if ($equals_2(this$static.view, 'year') && row.array.length < 6) {
    for (i = 0; i < 7; i++) {
      cellDate = new Date_4(fromDouble_0(d.jsdate.getTime()));
      dayNum = d.jsdate.getDate();
      this$static.showValuesOnPrePostMonthDays?$add_1(col, new GridCell(dayNum, cellDate, i, true)):$add_1(col, new GridCell(dayNum, null, i, true));
      $setDate(d, d.jsdate.getDate() + 1);
      i == 6 && (row.array[row.array.length] = col , true);
    }
  }
  return row;
}

function $getCellDrilldown(this$static, cell){
  var dateStr, drillFilter, filter1, filterBase;
  if (!!cell && !!cell.events && cell.events.array.length > 0) {
    dateStr = FormatDate(fromDouble_0(cell.date.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    filterBase = new FilterBase($getRow(this$static.graph.data_0, 0).parentName, 'BETWEEN', $getRow(this$static.graph.data_0, 0));
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, dateStr + ' 00:00:00');
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, dateStr + ' 23:59:59');
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    filter1 = getDrillFilterFromValues(filterBase);
    drillFilter = '{"filters":[' + filter1 + ']}';
    return drillFilter;
  }
  return null;
}

function $getDateFromStr(this$static, dateStr){
  var date, dateVals, day, month, monthNum, monthQtr, quarterNum, spacePos, tPos, year, yearVal;
  dateVals = $split(dateStr, '-', 0);
  year = dateVals[0];
  yearVal = getInt(year, 0);
  yearVal > 0 && (yearVal -= $intern_14);
  if (dateVals.length == 3) {
    month = dateVals[1];
    day = dateVals[2];
    if (day.length > 2 && day.indexOf(':') != -1) {
      spacePos = day.indexOf(' ');
      spacePos == 2 && (day = day.substr(0, 2));
      tPos = day.indexOf('T');
      tPos == 2 && (day = day.substr(0, 2));
    }
    date = new Date_1(yearVal, getInt(month, 0) - 1, getInt(day, 0));
    return fromDouble_0(date.jsdate.getTime());
  }
   else if (dateVals.length == 2) {
    monthQtr = dateVals[1];
    if (year.length == 4 && monthQtr.length == 3) {
      monthNum = $indexOfStringInArray(this$static.monthNames, monthQtr);
      if (monthNum != -1) {
        date = new Date_1(yearVal, monthNum, 1);
        return fromDouble_0(date.jsdate.getTime());
      }
    }
     else if (year.length == 4 && monthQtr.length == 2) {
      quarterNum = $indexOfStringInArray(this$static.quarters, monthQtr);
      if (quarterNum != -1) {
        date = new Date_1(yearVal, quarterNum * 3, 1);
        return fromDouble_0(date.jsdate.getTime());
      }
    }
  }
   else if (dateVals.length == 1 && year.length == 4) {
    date = new Date_1(yearVal, 0, 1);
    return fromDouble_0(date.jsdate.getTime());
  }
  return 0;
}

function $getDateOffset(date, monthChange){
  var Day, Month, Year;
  Year = date.jsdate.getFullYear() - $intern_14;
  Month = date.jsdate.getMonth();
  Day = date.jsdate.getDate();
  return new Date_1(Year + -1, Month + monthChange, Day);
}

function $getDayOfWeekOffset(dayOfWeek){
  var dowVal;
  dowVal = dayOfWeek;
  dayOfWeek != null && (dowVal = dayOfWeek.toLowerCase());
  switch (dowVal) {
    case 'monday':
      return 1;
    case 'tuesday':
      return 2;
    case 'wednesday':
      return 3;
    case 'thursday':
      return 4;
    case 'friday':
      return 5;
    case 'saturday':
      return 6;
  }
  return 0;
}

function $getEventsForDate(this$static, date){
  var curDay, curMonth, curYear, entry, events, outerIter, rowCell, rowCell$iterator, rowDate, rowInfo, rowInfo$iterator, selDay, selMonth, selYear, valStr, value_0;
  selMonth = date.jsdate.getMonth();
  selDay = date.jsdate.getDate();
  selYear = date.jsdate.getFullYear() - $intern_14;
  events = new ArrayList;
  if (!!$getRow(this$static.graph.data_0, 0) && ($getRow(this$static.graph.data_0, 0).type_0.indexOf('DATE') != -1 || neq($getRow(this$static.graph.data_0, 0).timeMS, 0))) {
    for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
      rowInfo = castTo(rowInfo$iterator.next_1(), 7);
      if (neq(rowInfo.timeMS, 0)) {
        rowDate = new Date_4(rowInfo.timeMS);
        curMonth = rowDate.jsdate.getMonth();
        curDay = rowDate.jsdate.getDate();
        curYear = rowDate.jsdate.getFullYear() - $intern_14;
        if (curDay == selDay && curMonth == selMonth && curYear == selYear) {
          for (rowCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); rowCell$iterator.val$outerIter2.hasNext;) {
            rowCell = (entry = $next_1(rowCell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
            value_0 = 0;
            this$static.drawValueCal && !isNaN_0($getValue_0(rowCell)) && (value_0 = $getValue_0(rowCell));
            valStr = rowCell.valueStr;
            valStr == null && !isNaN_0($getValue(rowCell)) && (valStr = $formatNumber_1(this$static.graph.hoverNumberFormatter, $getValue(rowCell)));
            $add_1(events, new CalEvent_0(valStr, $getName(rowInfo), value_0));
          }
        }
      }
    }
  }
  return events;
}

function $getFillColorForValue(this$static, rangeIndex){
  if (rangeIndex == -1)
    return NODATA_CLR;
  return castTo($get_2(this$static.rangeColors, rangeIndex), 15);
}

function $getFirstDateFromData(this$static){
  var firstDataPointIsDate, firstDate, lastDataPointIsDate, numRows;
  firstDate = null;
  numRows = $getNumRows(this$static.graph.data_0);
  firstDataPointIsDate = !!$getRow(this$static.graph.data_0, 0) && ($getRow(this$static.graph.data_0, 0).type_0.indexOf('DATE') != -1 || neq($getRow(this$static.graph.data_0, 0).timeMS, 0));
  lastDataPointIsDate = !!$getRow(this$static.graph.data_0, numRows - 1) && ($getRow(this$static.graph.data_0, numRows - 1).type_0.indexOf('DATE') != -1 || neq($getRow(this$static.graph.data_0, numRows - 1).timeMS, 0));
  if (this$static.isNextYearRolling && lastDataPointIsDate || firstDataPointIsDate) {
    this$static.isNextYearRolling?(firstDate = $getDateOffset(new Date_4($getRow(this$static.graph.data_0, numRows - 1).timeMS), 1)):(firstDate = new Date_4($getRow(this$static.graph.data_0, 0).timeMS));
  }
   else {
    if ($equals_2(this$static.defaultDate, 'today')) {
      firstDate = $getTodayAdjustedForTimeZone(this$static);
      this$static.isLastYearRolling && (firstDate = $getDateOffset(firstDate, 0));
    }
     else 
      this$static.defaultDate != null && $indexOf(this$static.defaultDate, fromCodePoint(45)) != -1 && (firstDate = new Date_4($getDateFromStr(this$static, this$static.defaultDate)));
  }
  (this$static.isLastYearRolling || this$static.isNextYearRolling) && (this$static.startingMonthOffset = firstDate.jsdate.getMonth());
  this$static.startingMonthOffset != 0 && $equalsIgnoreCase(this$static.view, 'year') && firstDate.jsdate.getMonth() < this$static.startingMonthOffset && (firstDate = new Date_1(firstDate.jsdate.getFullYear() - $intern_14 - 1, firstDate.jsdate.getMonth(), firstDate.jsdate.getDate()));
  return firstDate;
}

function $getMinMaxValuesForYear(this$static, Year){
  var curValue, dateMinusTime, dateTotal, entry, max_0, min_0, outerIter, outerIter0, rowCell, rowCell$iterator, rowDate, rowInfo, rowInfo$iterator, rowMonth, rowYear, timeMS, valList, value_0, value$iterator;
  min_0 = $intern_19;
  max_0 = $intern_20;
  this$static.valMap = new HashMap;
  for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
    rowInfo = castTo(rowInfo$iterator.next_1(), 7);
    timeMS = rowInfo.timeMS;
    if (compare_22(timeMS, 0) != 0) {
      rowDate = new Date_4(timeMS);
      rowYear = rowDate.jsdate.getFullYear() - $intern_14;
      rowMonth = rowDate.jsdate.getMonth();
      if (this$static.startingMonthOffset == 0 && rowYear == Year || rowYear == Year && rowMonth >= this$static.startingMonthOffset || rowYear == Year + 1 && rowMonth < this$static.startingMonthOffset) {
        dateMinusTime = new Date_1(rowDate.jsdate.getFullYear() - $intern_14, rowDate.jsdate.getMonth(), rowDate.jsdate.getDate());
        timeMS = fromDouble_0(dateMinusTime.jsdate.getTime());
        for (rowCell$iterator = (outerIter0 = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter0)); rowCell$iterator.val$outerIter2.hasNext;) {
          rowCell = (entry = $next_1(rowCell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          curValue = NaN;
          this$static.drawValueCal?(curValue = $getValue_0(rowCell)):$getValueStr(this$static, rowCell) != null && (curValue = 1);
          if (!isNaN(curValue)) {
            dateTotal = castToDouble($get_1(this$static.valMap, valueOf_0(timeMS)));
            if (dateTotal == null) {
              $put_0(this$static.valMap, valueOf_0(timeMS), curValue);
            }
             else {
              curValue += (checkCriticalNotNull(dateTotal) , dateTotal);
              $put_0(this$static.valMap, valueOf_0(timeMS), curValue);
            }
          }
        }
      }
    }
  }
  valList = new ArrayList;
  for (value$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.valMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); value$iterator.val$outerIter2.hasNext;) {
    value_0 = (entry = $next_1(value$iterator.val$outerIter2) , castToDouble(entry.getValue()));
    (checkCriticalNotNull(value_0) , value_0) > max_0 && (max_0 = (checkCriticalNotNull(value_0) , value_0));
    (checkCriticalNotNull(value_0) , value_0) < min_0 && (min_0 = (checkCriticalNotNull(value_0) , value_0));
    valList.array[valList.array.length] = value_0;
  }
  this$static.minMax = new MinMax_0(min_0, max_0, valList);
  this$static.manualRanges || (this$static.rangeValues = getRangeValues(this$static.minMax, this$static.balancedDistribution, this$static.rangeColors.array.length));
}

function $getNextChevron(this$static, top_0, left){
  var geNext, hoverShape, path, rightChevronPoints, rightChevronShape;
  geNext = new GraphicElement;
  rightChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  rightChevronPoints[0] = new CFPoint(left + 4, top_0);
  rightChevronPoints[1] = new CFPoint(left + 10, top_0 + 5);
  rightChevronPoints[2] = new CFPoint(left + 4, top_0 + 10);
  path = new CFPath_13(rightChevronPoints, false);
  path.shouldAntiAlias = true;
  rightChevronShape = new CFShape_0(path, null, new CFStroke_1('#000000', 1));
  !geNext.shapeAry && (geNext.shapeAry = new ArrayList);
  $add_1(geNext.shapeAry, rightChevronShape);
  hoverShape = new CFShape_1(new CFRect(left + 2, top_0 - 4, 22, 18), ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.drillFilter = '{"internal": "next period"}';
  $setDataObject_0(hoverShape, this$static.graph);
  !geNext.shapeAry && (geNext.shapeAry = new ArrayList);
  $add_1(geNext.shapeAry, hoverShape);
  return geNext;
}

function $getRange_0(this$static, index_0){
  var rng;
  rng = castTo($get_1(this$static.rangeMap, valueOf(index_0)), 58);
  if (!rng) {
    rng = new Range_0;
    $put_0(this$static.rangeMap, valueOf(index_0), rng);
  }
  return rng;
}

function $getRectShape(rnd, x_0, y_0, width_0, height, color_0, hoverText, text_0, fontColor, ddURL){
  var borderPath, ge, geText, labelPoint, rectShape, shapeBnds;
  ge = new GraphicElement;
  shapeBnds = new CFRect(x_0, y_0, width_0, height);
  rectShape = new CFShape_1(shapeBnds, new CFFill(color_0), null);
  rectShape.drillFilter = ddURL;
  borderPath = new CFPath_1(shapeBnds.x_0, shapeBnds.y_0 + shapeBnds.height_0, shapeBnds.x_0 + shapeBnds.width_0, shapeBnds.y_0 + shapeBnds.height_0);
  $add(borderPath, new CFPathElement_0(0, shapeBnds.x_0, shapeBnds.y_0));
  $add(borderPath, new CFPathElement_0(1, shapeBnds.x_0, shapeBnds.y_0 + shapeBnds.height_0));
  $addShape_0(ge, rectShape, '{"internal": "DrillFilter"}');
  $addShape(ge, new CFShape_0(borderPath, null, new CFStroke(($clinit_CFColor() , WHITE), 1)));
  if (text_0 != null && text_0.length > 0) {
    geText = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, shapeBnds, text_0, new CFFont_0(null, 11, fontColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addTextItem(ge, castTo($get_2(geText.textAry, 0), 26));
  }
  if (hoverText != null) {
    rectShape.hoverText = hoverText;
    labelPoint = new CFPoint(shapeBnds.x_0 + shapeBnds.width_0 / 2, shapeBnds.y_0);
    $setDataObject(ge, new HoverInfo(hoverText, labelPoint));
  }
  return ge;
}

function $getStartingMonthOffset(value_0){
  var lowerValue, offset;
  offset = 0;
  if (value_0 != null) {
    lowerValue = value_0.toLowerCase();
    $equals_2(lowerValue.substr(0, 3), 'feb')?(offset = 1):$equals_2(lowerValue.substr(0, 3), 'mar')?(offset = 2):$equals_2(lowerValue.substr(0, 3), 'apr')?(offset = 3):$equals_2(lowerValue.substr(0, 3), 'may')?(offset = 4):$equals_2(lowerValue.substr(0, 3), 'jun')?(offset = 5):$equals_2(lowerValue.substr(0, 3), 'jul')?(offset = 6):$equals_2(lowerValue.substr(0, 3), 'aug')?(offset = 7):$equals_2(lowerValue.substr(0, 3), 'sep')?(offset = 8):$equals_2(lowerValue.substr(0, 3), 'oct')?(offset = 9):$equals_2(lowerValue.substr(0, 3), 'nov')?(offset = 10):$equals_2(lowerValue.substr(0, 3), 'dec') && (offset = 11);
  }
  return offset;
}

function $getTodayAdjustedForTimeZone(this$static){
  var currentOffsetInMinutes, date, minutes, timeZoneOffset;
  date = new Date_0;
  timeZoneOffset = this$static.graph.chart.timeZoneOffset;
  if (timeZoneOffset != null) {
    minutes = convertTimeZoneOffsetToMinutes(timeZoneOffset);
    currentOffsetInMinutes = date.jsdate.getTimezoneOffset();
    $setMinutes(date, date.jsdate.getMinutes() + currentOffsetInMinutes + minutes);
  }
  return date;
}

function $getUserMonth(userMonth){
  var usrMonth;
  usrMonth = userMonth;
  userMonth != null && (usrMonth = userMonth.toLowerCase());
  switch (usrMonth) {
    case 'jan':
      return '1';
    case 'feb':
      return '2';
    case 'mar':
      return '3';
    case 'apr':
      return '4';
    case 'may':
      return '5';
    case 'jun':
      return '6';
    case 'jul':
      return '7';
    case 'aug':
      return '8';
    case 'sep':
      return '9';
    case 'oct':
      return '10';
    case 'nov':
      return '11';
    case 'dec':
      return '12';
  }
  return usrMonth;
}

function $getValue_0(rowCell){
  var retValue;
  retValue = NaN;
  !!rowCell && !!$getMetaDataCell(rowCell, 0) && (retValue = $getValue($getMetaDataCell(rowCell, 0)));
  return retValue;
}

function $getValueStr(this$static, cell){
  if (cell) {
    if (cell.valueStr != null)
      return cell.valueStr;
    else if (!isNaN_0($getValue(cell)))
      return $formatNumber_1(this$static.graph.hoverNumberFormatter, $getValue(cell));
  }
  return null;
}

function $handleClick_1(this$static, shapeClicked){
  if (!!shapeClicked && shapeClicked.drillFilter != null) {
    if (shapeClicked.drillFilter.indexOf('next period') != -1) {
      this$static.currentView == 0?++this$static.yearOffset:this$static.currentView == 2?++this$static.dayOffset:++this$static.monthOffset;
      this$static.graph.setNeedsFormat(true);
      return 1;
    }
     else if (shapeClicked.drillFilter.indexOf('prev period') != -1) {
      this$static.currentView == 0?--this$static.yearOffset:this$static.currentView == 2?--this$static.dayOffset:--this$static.monthOffset;
      this$static.graph.setNeedsFormat(true);
      return 1;
    }
  }
  return -1;
}

function $indexOfStringInArray(ary, searchStr){
  var i;
  for (i = 0; i < ary.length; i++) {
    if ($equals_2(ary[i], searchStr))
      return i;
  }
  return -1;
}

function $processChartOptions_5(this$static){
  var i, key, key$iterator, range, range$iterator, value_0;
  this$static.isLastYearRolling = false;
  this$static.isNextYearRolling = false;
  this$static.defaultDate = 'today';
  this$static.view = 'auto';
  this$static.viewFrom = 'default';
  this$static.userYear = 'current';
  this$static.userYearVal = '';
  this$static.userMonth = 'current';
  this$static.userDay = 'current';
  this$static.style_0 = 'domo';
  this$static.dayOfWeekOffset = 0;
  this$static.titleHAlign = 0;
  this$static.yearTitleHAlign = 0;
  this$static.cellFillClr = new CFColor_2('#FFF5F5');
  this$static.manualRanges = false;
  this$static.colorPalette = 'gradient-1';
  this$static.graph.hoverLabelText = '%_SERIES_NAME : %_CATEGORY_NAME : %_VALUE';
  if (this$static.graph.hasChartOptions()) {
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'extended_month_view':
          this$static.showValuesOnPrePostMonthDays = isTrue(value_0);
          break;
        case 'values_only_on_hover':
          this$static.onlyShowValuesOnHover = isTrue(value_0);
          break;
        case 'highlight_today':
          this$static.highlightToday = isTrue(value_0);
          break;
        case 'first_month_displayed':
          this$static.startingMonthOffset = $getStartingMonthOffset(value_0);
          break;
        case 'color_theme':
          this$static.colorPalette = value_0;
          break;
        case 'style':
          this$static.style_0 = value_0.toLowerCase();
          break;
        case 'view':
          this$static.view = value_0.toLowerCase();
          break;
        case 'dates_from':
          this$static.viewFrom = value_0.toLowerCase();
          break;
        case 'user_year':
          this$static.userYear = value_0.toLowerCase();
          break;
        case 'selected_year':
          this$static.userYearVal = value_0;
          break;
        case 'user_month':
          this$static.userMonth = $getUserMonth(value_0);
          break;
        case 'user_day':
          this$static.userDay = value_0.toLowerCase();
          break;
        case 'first_dow':
          this$static.dayOfWeekOffset = $getDayOfWeekOffset(value_0);
          break;
        case 'balanced_distribution':
          this$static.balancedDistribution = isTrue(value_0);
          break;
        case 'force_max_value':
          getDouble(value_0) != null && checkNotNull(getDouble(value_0));
          break;
        case 'zero_like_no_data':
          this$static.zeroLikeNoData = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'range_1_min':
          $setMin($getRange_0(this$static, 1), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_1_max':
          $setMax($getRange_0(this$static, 1), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_1_color':
          $setColor($getRange_0(this$static, 1), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_2_min':
          $setMin($getRange_0(this$static, 2), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_2_max':
          $setMax($getRange_0(this$static, 2), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_2_color':
          $setColor($getRange_0(this$static, 2), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_3_min':
          $setMin($getRange_0(this$static, 3), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_3_max':
          $setMax($getRange_0(this$static, 3), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_3_color':
          $setColor($getRange_0(this$static, 3), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_4_min':
          $setMin($getRange_0(this$static, 4), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_4_max':
          $setMax($getRange_0(this$static, 4), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_4_color':
          $setColor($getRange_0(this$static, 4), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_5_min':
          $setMin($getRange_0(this$static, 5), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_5_max':
          $setMax($getRange_0(this$static, 5), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_5_color':
          $setColor($getRange_0(this$static, 5), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_6_min':
          $setMin($getRange_0(this$static, 6), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_6_max':
          $setMax($getRange_0(this$static, 6), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_6_color':
          $setColor($getRange_0(this$static, 6), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_7_min':
          $setMin($getRange_0(this$static, 7), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_7_max':
          $setMax($getRange_0(this$static, 7), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_7_color':
          $setColor($getRange_0(this$static, 7), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_8_min':
          $setMin($getRange_0(this$static, 8), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_8_max':
          $setMax($getRange_0(this$static, 8), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_8_color':
          $setColor($getRange_0(this$static, 8), $getColorForName(this$static.graph.colorMgr, value_0));
          break;
        case 'range_9_min':
          $setMin($getRange_0(this$static, 9), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_9_max':
          $setMax($getRange_0(this$static, 9), getDouble_0(value_0, NaN));
          this$static.manualRanges = true;
          break;
        case 'range_9_color':
          $setColor($getRange_0(this$static, 9), $getColorForName(this$static.graph.colorMgr, value_0));
      }
    }
  }
  if ($equals_2(this$static.view, 'last year rolling')) {
    this$static.isLastYearRolling = true;
    this$static.view = 'year';
  }
   else if ($equals_2(this$static.view, 'next year rolling')) {
    this$static.isNextYearRolling = true;
    this$static.view = 'year';
  }
  this$static.ranges = getSortedAndCompletedRanges(this$static.rangeMap, this$static.manualRanges, NaN);
  this$static.rangeColors = $getRangeColorsForName(this$static.graph.colorMgr, this$static.colorPalette);
  for (i = 0; i < 9; i++) {
    i < this$static.ranges.array.length && !!castTo($get_2(this$static.ranges, i), 58).color_0 && (this$static.rangeColors.array.length > i?$set(this$static.rangeColors, i, castTo($get_2(this$static.ranges, i), 58).color_0):$add_1(this$static.rangeColors, castTo($get_2(this$static.ranges, i), 58).color_0));
  }
  if (this$static.manualRanges) {
    this$static.rangeValues = new ArrayList;
    for (range$iterator = new ArrayList$1(this$static.ranges); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 58);
      $add_1(this$static.rangeValues, new MinMax(range.min_0, range.max_0));
    }
  }
  this$static.ranges = null;
  this$static.rangeMap = new HashMap;
}

function $processNonDateDataIfNeeded(this$static){
  var rowInfo, rowInfo$iterator;
  if (!!$getRow(this$static.graph.data_0, 0) && ($equals_2($getRow(this$static.graph.data_0, 0).type_0, 'STRING') || eq($getRow(this$static.graph.data_0, 0).timeMS, 0))) {
    for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
      rowInfo = castTo(rowInfo$iterator.next_1(), 7);
      eq(rowInfo.timeMS, 0) && $setTimeMS_0(rowInfo, $getDateFromStr(this$static, $getName(rowInfo)));
    }
  }
}

function $setFirstDateFromUserSettings(this$static){
  var Day, Month, Year, date, daysInSpecifiedMonth, userDayInt, userMonthInt, userYearInt;
  date = $getTodayAdjustedForTimeZone(this$static);
  Day = date.jsdate.getDate();
  Month = date.jsdate.getMonth() + 1;
  Year = date.jsdate.getFullYear() - $intern_14;
  if ($equals_2(this$static.userYear, 'previous'))
    Year -= 1;
  else if ($equals_2(this$static.userYear, 'next'))
    Year += 1;
  else if ($startsWith(this$static.userYear, 'spec')) {
    if (this$static.userYearVal != null && this$static.userYearVal.length > 0) {
      userYearInt = getInt(this$static.userYearVal, 0);
      userYearInt > 1800 && userYearInt < 3000 && (Year = userYearInt - $intern_14);
    }
  }
  if ($equals_2(this$static.userMonth, 'previous'))
    Month -= 1;
  else if ($equals_2(this$static.userMonth, 'next'))
    Month += 1;
  else {
    if (this$static.userMonth != null && this$static.userMonth.length > 0) {
      userMonthInt = getInt(this$static.userMonth, 0);
      userMonthInt >= 1 && userMonthInt <= 12 && (Month = userMonthInt);
    }
     else 
      this$static.startingMonthOffset != 0 && $equalsIgnoreCase(this$static.view, 'year') && this$static.startingMonthOffset > 0 && (Month = this$static.startingMonthOffset);
  }
  this$static.startingMonthOffset != 0 && $equalsIgnoreCase(this$static.view, 'year') && Month - 1 < this$static.startingMonthOffset && (Year -= 1);
  if ($equals_2(this$static.userDay, 'yesterday'))
    Day -= 1;
  else if ($equals_2(this$static.userDay, 'tomorrow'))
    Day += 1;
  else {
    if (this$static.userDay != null && this$static.userDay.length > 0) {
      userDayInt = getInt(this$static.userDay, 0);
      userDayInt >= 1 && userDayInt <= 31 && (Day = userDayInt);
    }
  }
  daysInSpecifiedMonth = Month == 4 || Month == 6 || Month == 9 || Month == 11?30:Month == 2?28:31;
  Day > daysInSpecifiedMonth && (Day = daysInSpecifiedMonth);
  return new Date_1(Year, Month - 1, Day);
}

function $setHoverEffects_0(this$static, hoverData, rnd){
  var hi;
  if (hoverData != null && instanceOf(hoverData, 89)) {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
    hi = castTo(hoverData, 89);
    $getOrCreateHoverLabel(this$static.graph);
    $setHoverPoint(this$static.graph, hi.point);
    $addPrimary_2(this$static.graph.hoverLabel, rnd, hi.text_0, hi.point, hi.position, false);
  }
   else {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
  }
  return true;
}

function $setViewForData(this$static){
  var curTime, date, daysDiff, endDateMillis, rowInfo, rowInfo$iterator, startDateMillis;
  startDateMillis = 0;
  endDateMillis = 0;
  if (!!$getRow(this$static.graph.data_0, 0) && ($getRow(this$static.graph.data_0, 0).type_0.indexOf('DATE') != -1 || neq($getRow(this$static.graph.data_0, 0).timeMS, 0))) {
    for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
      rowInfo = castTo(rowInfo$iterator.next_1(), 7);
      if (neq(rowInfo.timeMS, 0)) {
        date = new Date_4(rowInfo.timeMS);
        curTime = fromDouble_0(date.jsdate.getTime());
        if (compare_22(startDateMillis, 0) == 0) {
          startDateMillis = curTime;
          endDateMillis = curTime;
        }
         else {
          compare_22(curTime, startDateMillis) < 0 && (startDateMillis = curTime);
          compare_22(curTime, endDateMillis) > 0 && (endDateMillis = curTime);
        }
        if (compare_22(startDateMillis, endDateMillis) == 0)
          this$static.view = 'day';
        else {
          daysDiff = div(sub_1(endDateMillis, startDateMillis), $intern_34);
          toDouble_0(daysDiff) < 1?(this$static.view = 'day'):toDouble_0(daysDiff) < 32?(this$static.view = 'month'):(this$static.view = 'year');
        }
      }
    }
  }
}

function HandlerCalendar(){
  $clinit_HandlerCalendar();
  this.rangeMap = new HashMap;
  this.quarters = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['Q1', 'Q2', 'Q3', 'Q4']);
  this.monthNames = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
  this.valMap = new HashMap;
}

defineClass(230, 118, {212:1}, HandlerCalendar);
_.addDataToCalendar = function addDataToCalendar(calGrid){
  var ccol, cell, cellDate, crow, date, entry, max_0, min_0, outerIter, rowCell, rowCell$iterator, rowInfo, rowInfo$iterator, valList, value_0;
  max_0 = $intern_20;
  min_0 = $intern_19;
  if (!!$getRow(this.graph.data_0, 0) && ($getRow(this.graph.data_0, 0).type_0.indexOf('DATE') != -1 || neq($getRow(this.graph.data_0, 0).timeMS, 0))) {
    for (rowInfo$iterator = this.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
      rowInfo = castTo(rowInfo$iterator.next_1(), 7);
      if (neq(rowInfo.timeMS, 0)) {
        date = new Date_4(rowInfo.timeMS);
        date = new Date_1(date.jsdate.getFullYear() - $intern_14, date.jsdate.getMonth(), date.jsdate.getDate());
        for (crow = 0; crow < calGrid.array.length; crow++) {
          for (ccol = 0; ccol < (checkCriticalElementIndex(crow, calGrid.array.length) , castTo(calGrid.array[crow], 42)).size_1(); ccol++) {
            cell = castTo((checkCriticalElementIndex(crow, calGrid.array.length) , castTo(calGrid.array[crow], 42)).get_1(ccol), 75);
            cellDate = cell.date;
            if (!!cellDate && eq(fromDouble_0(cellDate.jsdate.getTime()), fromDouble_0(date.jsdate.getTime()))) {
              !cell.events && (cell.events = new ArrayList);
              for (rowCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); rowCell$iterator.val$outerIter2.hasNext;) {
                rowCell = (entry = $next_1(rowCell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
                $add_1(cell.events, new CalEvent($getValueStr(this, rowCell), $getName(rowInfo)));
                if (this.drawValueCal && !isNaN_0($getValue_0(rowCell))) {
                  cell.value_0 += $getValue_0(rowCell);
                  cell.hasValue = true;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!this.minMax) {
    valList = new ArrayList;
    for (crow = 0; crow < calGrid.array.length; crow++) {
      for (ccol = 0; ccol < (checkCriticalElementIndex(crow, calGrid.array.length) , castTo(calGrid.array[crow], 42)).size_1(); ccol++) {
        cell = castTo((checkCriticalElementIndex(crow, calGrid.array.length) , castTo(calGrid.array[crow], 42)).get_1(ccol), 75);
        value_0 = NaN;
        cell.hasValue?(value_0 = cell.value_0):!!cell.events && cell.events.array.length > 0 && (value_0 = cell.events.array.length);
        if (!isNaN(value_0)) {
          value_0 > max_0 && (max_0 = value_0);
          value_0 < min_0 && (min_0 = value_0);
          $add_1(valList, value_0);
        }
      }
    }
    this.minMax = new MinMax_0(min_0, max_0, valList);
    this.manualRanges || (this.rangeValues = getRangeValues(this.minMax, this.balancedDistribution, this.rangeColors.array.length));
  }
}
;
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_3(chart){
  this.showLegend = isTrue(this.graph.getChartOptionAsString('show_legend'));
  if ((!this.graph.dependentComps || this.graph.dependentComps.array.length == 0) && this.showLegend) {
    this.graph.legend = new LegendRange(chart, this.graph.name_0 + '_legend', this.graph);
    this.graph.legend.compLegendMargin = 10;
    $addDependentComp(this.graph, this.graph.legend);
  }
}
;
_.format_0 = function format_6(rnd){
  $format_1(this, rnd);
}
;
_.freeResources = function freeResources_16(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.defaultDate = null;
  this.view = null;
  this.viewFrom = null;
  this.userYear = null;
  this.userYearVal = null;
  this.userMonth = null;
  this.userDay = null;
  this.style_0 = null;
  this.cellFillClr = null;
  this.colorPalette = null;
  this.minMax = null;
  this.quarters = null;
  this.monthNames = null;
  this.rangeColors = null;
  this.rangeValues = null;
  this.valMap = null;
}
;
_.getFillColorOverride = function getFillColorOverride(fillColor, cell){
  return fillColor;
}
;
_.getFirstDate = function getFirstDate(){
  var fd;
  if ($startsWith(this.viewFrom, 'user')) {
    fd = $setFirstDateFromUserSettings(this);
    fd = $adjustFirstDateForRolling(this, fd);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
   else if ($equals_2(this.viewFrom, 'current date') || $equals_2(this.viewFrom, 'default') && (this.isLastYearRolling || this.isNextYearRolling)) {
    fd = $getTodayAdjustedForTimeZone(this);
    fd = $adjustFirstDateForRolling(this, fd);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
   else {
    fd = $getFirstDateFromData(this);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
  return fd;
}
;
_.getNoDataColor = function getNoDataColor(){
  return NODATA_CLR;
}
;
_.getRangeColors = function getRangeColors(){
  return this.rangeColors;
}
;
_.getRanges = function getRanges(){
  return this.rangeValues;
}
;
_.handleClick_0 = function handleClick_8(shapeClicked){
  return $handleClick_1(this, shapeClicked);
}
;
_.processChartOptions = function processChartOptions_7(){
  $processChartOptions_5(this);
}
;
_.setBkgElemDataObject = function setBkgElemDataObject(ge, cell){
  return;
}
;
_.setData = function setData_9(data_0){
  var columnOrder, limited, theNumberFormatter, columnOrder_0;
  if (data_0) {
    if ($getNumCols(data_0) > 2 && !!$getColumn(data_0, 2).format) {
      theNumberFormatter = new NumberFormatter_0(this.graph.numberFormatter);
      $applyColumnFormat(theNumberFormatter, $getColumn(data_0, 2).format);
      $setNumberFormatter(this.graph, theNumberFormatter);
    }
     else if ($getNumCols(data_0) == 1 && $getMetaDataSize(data_0) == 1 && !!$getMetadataInfo(data_0, 0).format) {
      theNumberFormatter = new NumberFormatter_0(this.graph.numberFormatter);
      $applyColumnFormat(theNumberFormatter, $getMetadataInfo(data_0, 0).format);
      $setNumberFormatter(this.graph, theNumberFormatter);
    }
    if (data_0.orderedColumnList) {
      columnOrder = (columnOrder_0 = new ArrayList , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'DATE'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'EVENT'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'VALUE1'))) , columnOrder_0);
      limited = data_0.dataHasBeenLimited;
      data_0 = $transformOrderedColumnToNoGroupItemValue(data_0, columnOrder, false);
      data_0.dataHasBeenLimited = limited;
      !!this.graph.data_0 && $freeResources_11(this.graph.data_0);
      this.graph.data_0 = data_0;
    }
  }
}
;
_.setFrame = function setFrame_5(type_0, easingType, startTime, curTime, endTime, rnd){
}
;
_.setHoverData = function setHoverData_11(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_0(this, this.hoverData, rnd);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_2(hoverData, rnd){
  return $setHoverEffects_0(this, hoverData, rnd);
}
;
_.setViewForData = function setViewForData(){
  $setViewForData(this);
}
;
_.balancedDistribution = false;
_.currentView = 0;
_.dayOfWeekOffset = 0;
_.dayOffset = 0;
_.drawValueCal = false;
_.headerHeight = 0;
_.hideDatesOnSmallCalendars = false;
_.highlightToday = false;
_.isLastYearRolling = false;
_.isNextYearRolling = false;
_.manualRanges = false;
_.minMax = null;
_.monthOffset = 0;
_.onlyShowValuesOnHover = false;
_.showEventCountOnly = false;
_.showLegend = false;
_.showValuesOnPrePostMonthDays = false;
_.startingMonthOffset = 0;
_.titleHAlign = 0;
_.yearOffset = 0;
_.yearTitleHAlign = 0;
_.zeroLikeNoData = false;
var GRAY_CLR, NODATA_CLR;
var Lcom_domo_charting_graphs_HandlerCalendar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerCalendar', 230);
function $getCatScatterFormatData(data_0){
  var category, cell, cellMap, cols_0, column, dataGrid, index_0, map_0, row, rows_0, theRow, theRow$iterator;
  rows_0 = new ArrayList;
  map_0 = new HashMap;
  column = new ColRowInfo_2($getName($getColumn(data_0, 0)), $getColumn(data_0, 0).type_0);
  !!$getColumn(data_0, 0).metadata && $setMetadata(column, new ColumnMetadata_0($getColumn(data_0, 0).metadata));
  $setFormat(column, $getColumn(data_0, 0).format);
  row = $getFirstVisibleRow(data_0);
  while (row) {
    category = castTo($getStringValue(map_0, $getName(row)), 7);
    if (category)
      $addCopyOfCellsFromOtherRow(category, row, true, true);
    else {
      category = new ColRowInfo_1(row, true);
      neq(row.timeMS, 0) && $setTimeMS_0(category, row.timeMS);
      rows_0.array[rows_0.array.length] = category;
      $putStringValue(map_0, $getName(row), category);
    }
    row = $getNextVisibleRow(data_0, row);
  }
  cols_0 = new ArrayList_0(1);
  cols_0.array[cols_0.array.length] = column;
  for (theRow$iterator = new ArrayList$1(rows_0); theRow$iterator.i < theRow$iterator.this$01.array.length;) {
    theRow = castTo($next_3(theRow$iterator), 7);
    cellMap = theRow.cellMap;
    for (index_0 = 0; index_0 < cellMap.hashCodeMap.size_0 + cellMap.stringMap.size_0; index_0++) {
      cell = castTo($get_1(cellMap, valueOf(index_0)), 16);
      !!cell && (cell.column = column);
    }
  }
  dataGrid = new DataGrid_0(data_0.name_0, data_0.originalDataType, rows_0, cols_0, null);
  $setOrigColNameList(dataGrid, data_0.origColNameList);
  $setDataHasBeenLimited(dataGrid, data_0.dataHasBeenLimited);
  $setErrorCode(dataGrid, data_0.errorCode);
  $setPreSorted(dataGrid, data_0.preSorted);
  $setDateJoinColumn(dataGrid, data_0.dateJoinColumn);
  return dataGrid;
}

function $getCurBarWidth(this$static, barWidth, cell){
  var curBarWidth;
  curBarWidth = barWidth;
  ($isStackedBar(this$static.sGraph) || $isHStackedBar(this$static.sGraph)) && this$static.variableWidth && (curBarWidth = barWidth * $getPctOfRowValue(cell));
  return curBarWidth;
}

function HandlerCatScatter(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

function migrateChartOptions(overrides){
  $clinit_HandlerBar();
  var keyValuePair, keyValuePair$iterator, newOverrides;
  newOverrides = new ArrayList;
  migrateOneChartOption(overrides, newOverrides, 'label_format_y', 'label_format_x');
  migrateOneChartOption(overrides, newOverrides, 'divisions_y', 'divisions_x');
  migrateOneChartOption(overrides, newOverrides, 'include_zero_y', 'include_zero_x');
  for (keyValuePair$iterator = new ArrayList$1(newOverrides); keyValuePair$iterator.i < keyValuePair$iterator.this$01.array.length;) {
    keyValuePair = castTo($next_3(keyValuePair$iterator), 198);
    overrides.put(keyValuePair.key, keyValuePair.value_0);
  }
}

defineClass(325, 60, $intern_37, HandlerCatScatter);
_.createSeriesInfoObjs = function createSeriesInfoObjs_4(sGraph, rows_0, baseScale, valScale, valScale2){
  var barInfo, barList, barRect, barWidth, catScalePos, cell, cell$iterator, curBarWidth, curCol, curIndex, curRow, entry, groupBarList, i, lastState, minCatPos, minValuePos, numRows, outerIter, rects, rowIndex, srsInfo, stackedPosAry, stackedPosAryNegative, stackedPosAryPositive, vScale, value_0, valueScale, valueScalePos, zeroValuePos;
  this.sGraph = sGraph;
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  stackedPosAryPositive = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  stackedPosAryNegative = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  groupBarList = new ArrayList;
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
    vScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (!!vScale && instanceOf(vScale, 27)) {
      valueScale = castTo(vScale, 27);
      zeroValuePos = valueScale.getPositionForValue(0);
      minValuePos = valueScale.getMinPosition();
      barList = new ArrayList;
      rowIndex = 0;
      for (i = 0; i < rows_0.size_1(); i++) {
        curRow = castTo(rows_0.get_1(i), 7);
        if (!curRow)
          continue;
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(curRow.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          value_0 = $getCellValueForGraphType(this, cell);
          if (!isNaN(value_0)) {
            stackedPosAry = stackedPosAryPositive;
            value_0 < 0 && (stackedPosAry = stackedPosAryNegative);
            curIndex = rowIndex;
            instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
            catScalePos = baseScale.getPositionForValue(curIndex);
            valueScalePos = valueScale.getPositionForValue(value_0);
            curBarWidth = $getCurBarWidth(this, barWidth, cell);
            barRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, curBarWidth);
            stackedPosAry[rowIndex] = barRect;
            rects[rowIndex] = barRect;
            lastState = $getLastShapeForCell(this.sGraph, cell, false);
            barInfo = new SrsBarInfo_1(this, cell, barRect, null, new CFFill($getColor(this.graph, 'CatScatterFill', '#FF993380')), new CFStroke($getColor(this.graph, 'CatScatterStroke', '#FF9933FD'), 1), -1, lastState);
            barList.array[barList.array.length] = barInfo;
          }
        }
        ++rowIndex;
      }
      srsInfo = new SeriesInfo(barList, null);
      $add_1(this.graph.seriesShapes, srsInfo);
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  groupBarList.array.length > 0 && $add_0(this.graph.seriesShapes, 0, new SeriesInfo(groupBarList, null));
  $drawAllBars(this, -1, null);
}
;
_.getPaddingX = function getPaddingX_1(){
  var barWidth, bubblePadding, cell, cell$iterator, entry, maxX, minX, numRows, outerIter, paddingEnd, paddingStart, row, scale, scaleMaxValue, scaleMinValue, xPos, xScale;
  if (this.sGraph.isHorizontal) {
    scale = $getValueScale(this.sGraph);
    if (!!scale && instanceOf(scale, 27)) {
      xScale = castTo(scale, 27);
      numRows = this.graph.data_0.numVisibleRows;
      barWidth = $getBarWidth(this, numRows);
      paddingEnd = 0;
      paddingStart = 0;
      scaleMinValue = xScale.min_0;
      scaleMaxValue = xScale.max_0;
      minX = xScale.getPositionForValue(scaleMinValue);
      maxX = xScale.getPositionForValue(scaleMaxValue);
      row = $getFirstVisibleRow(this.graph.data_0);
      while (row) {
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          if (!!cell && $getValue(cell) >= scaleMinValue && $getValue(cell) <= scaleMaxValue) {
            xPos = xScale.getPositionForValue($getValue(cell));
            bubblePadding = $getCurBarWidth(this, barWidth, cell) / 2;
            xPos - bubblePadding < minX - paddingStart && (paddingStart = minX - (xPos - bubblePadding));
            xPos + bubblePadding > maxX + paddingEnd && (paddingEnd = xPos + bubblePadding - maxX);
          }
        }
        row = $getNextVisibleRow(this.graph.data_0, row);
      }
      return new CFDimension($wnd.Math.ceil(paddingStart), $wnd.Math.ceil(paddingEnd));
    }
  }
  return new CFDimension(0, 0);
}
;
_.getPaddingY = function getPaddingY_1(){
  var halfBubbleVal, maxItemDiameter, numRows, padding;
  numRows = this.graph.data_0.numVisibleRows;
  maxItemDiameter = $getBarWidth(this, numRows);
  halfBubbleVal = maxItemDiameter / 2;
  padding = toInt_0(fromDouble_0($wnd.Math.round(halfBubbleVal)));
  return new CFDimension(padding, padding);
}
;
_.processChartOptions = function processChartOptions_8(){
  !!this.graph.dataLabel && (this.graph.dataLabel.showIfZeroValue = true);
  $convertDatalabelAndHoverMacros(this.graph, '%_SERIES_NAME', '%_CATEGORY_NAME');
  $convertDatalabelAndHoverMacros(this.graph, '%_XVALUE', '%_VALUE');
  $processChartOptions_4(this);
}
;
_.resetForTypeChange = function resetForTypeChange_4(){
  if (this.originalData) {
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_10(data_0){
  var theData;
  if (data_0) {
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $getCatScatterFormatData(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.sGraph.data_0 = this.currentViewDataGrid;
  }
  $setData_2(this, this.currentViewDataGrid);
}
;
var Lcom_domo_charting_graphs_HandlerCatScatter_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerCatScatter', 325);
function $addHeadersToGeAry(this$static, headerGEs){
  var ge, ge$iterator;
  if (headerGEs) {
    for (ge$iterator = new ArrayList$1(headerGEs); ge$iterator.i < ge$iterator.this$01.array.length;) {
      ge = castTo($next_3(ge$iterator), 12);
      this$static.graph.geAry.add_0(ge);
    }
  }
}

function $drawPagingIndicators(this$static, rnd, bnds, lastPillBottom, totalItems){
  var dim, geBack, geInfoText, geNext, infoRect, infoText, lastShown, pagingBtnsRect;
  pagingBtnsRect = new CFRect(0, 0, 48, 24);
  $setX_0(pagingBtnsRect, bnds.x_0 + (bnds.width_0 - pagingBtnsRect.width_0) / 2);
  $setY_0(pagingBtnsRect, bnds.y_0 + bnds.height_0 - this$static.outerMarginY - (pagingBtnsRect.height_0 + 2));
  if (pagingBtnsRect.y_0 < lastPillBottom + this$static.marginY - 2) {
    lastPillBottom + 20 < bnds.y_0 + bnds.height_0 && $drawPagingTextCentered(this$static, rnd, bnds, totalItems);
    return;
  }
  if (this$static.lastPageStartIndicies.array.length > 0 || this$static.nextPageStartIndex != this$static.curPageStartIndex) {
    if (this$static.graph.chart.staticImage) {
      $drawPagingTextCentered(this$static, rnd, bnds, totalItems);
    }
     else {
      geBack = $getBackChevron_0(this$static, pagingBtnsRect, this$static.lastPageStartIndicies.array.length > 0);
      this$static.graph.geAry.add_0(geBack);
      geNext = $getNextChevron_0(this$static, pagingBtnsRect, this$static.nextPageStartIndex != this$static.curPageStartIndex && this$static.nextPageStartIndex != 0);
      this$static.graph.geAry.add_0(geNext);
      lastShown = this$static.nextPageStartIndex;
      (this$static.nextPageStartIndex == this$static.curPageStartIndex || this$static.curPageStartIndex > 0 && this$static.nextPageStartIndex == 0) && (lastShown = totalItems);
      infoText = $getLocalizedString3Params(this$static.graph, '' + (this$static.curPageStartIndex + 1), '' + lastShown, '' + totalItems);
      dim = rnd.measureText_0(infoText, this$static.pagingGrayFont);
      if (dim.width_0 <= bnds.x_0 + bnds.width_0 - (pagingBtnsRect.x_0 + pagingBtnsRect.width_0 + (this$static.outerMarginX + 20))) {
        infoRect = new CFRect(pagingBtnsRect.x_0 + pagingBtnsRect.width_0, pagingBtnsRect.y_0, bnds.x_0 + bnds.width_0 - this$static.outerMarginX - (pagingBtnsRect.x_0 + pagingBtnsRect.width_0), 24);
        geInfoText = ($clinit_StrUtil() , drawTextInBounds(rnd, infoRect, infoText, this$static.pagingGrayFont, HALIGN_RIGHT, VALIGN_MIDDLE, this$static.pagingGrayFont.size_0, null, null));
        this$static.graph.geAry.add_0(geInfoText);
      }
    }
  }
}

function $drawPagingTextCentered(this$static, rnd, bnds, totalItems){
  var dim, geInfoText, infoRect, infoText;
  infoText = $getLocalizedString3Params(this$static.graph, '' + (this$static.curPageStartIndex + 1), '' + this$static.nextPageStartIndex, '' + totalItems);
  dim = rnd.measureText_0(infoText, this$static.pagingGrayFont);
  if (dim.width_0 <= bnds.width_0 - 20) {
    infoRect = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
    infoRect.height_0 = 20;
    $setY_0(infoRect, bnds.y_0 + bnds.height_0 - 20);
    geInfoText = ($clinit_StrUtil() , drawTextInBounds(rnd, infoRect, infoText, this$static.pagingGrayFont, HALIGN_CENTER, VALIGN_MIDDLE, this$static.pagingGrayFont.size_0, null, null));
    this$static.graph.geAry.add_0(geInfoText);
  }
}

function $format_2(this$static, rnd){
  var numSelected;
  this$static.unsorted || $sortRows(this$static.graph.data_0, SORT_NAME);
  this$static.graph.geAry.clear_0();
  this$static.processChartOptions();
  numSelected = $getNumSelected(this$static);
  !this$static.formatFromInternal && !this$static.showOnlySelected && numSelected > 0?$setToPageWithFirstSelectedItem(this$static, rnd, numSelected):this$static.formatChartAndGetHasSelected(rnd, numSelected);
  this$static.formatFromInternal = false;
  this$static.graph.setNeedsFormat(false);
}

function $getBackChevron_0(this$static, btnsRect, enabled){
  var borderColor, borderPath, borderRect, borderShape, chevronColor, chevronLeft, chevronTop, geBack, hoverShape, left, leftChevronPoints, leftChevronShape, path, top_0;
  chevronColor = ($clinit_CFColor() , BLACK);
  borderColor = GRAY2;
  if (!enabled) {
    chevronColor = DISABLED_LIGHT_GRAY;
    borderColor = DISABLED_GRAY;
  }
  top_0 = btnsRect.y_0;
  left = btnsRect.x_0;
  geBack = new GraphicElement;
  leftChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  chevronLeft = left + 9;
  chevronTop = top_0 + 7;
  leftChevronPoints[0] = new CFPoint(chevronLeft + 6, chevronTop);
  leftChevronPoints[1] = new CFPoint(chevronLeft, chevronTop + 5);
  leftChevronPoints[2] = new CFPoint(chevronLeft + 6, chevronTop + 10);
  borderRect = new CFRect(left, top_0, 24, 24);
  borderRect.x_0 % 1 == 0 && $setX_0(borderRect, borderRect.x_0 + 0.5);
  borderRect.y_0 % 1 == 0 && $setY_0(borderRect, borderRect.y_0 + 0.5);
  borderPath = new CFPath_5(borderRect, 1);
  borderShape = new CFShape_0(borderPath, null, new CFStroke(borderColor, 1));
  path = new CFPath_13(leftChevronPoints, false);
  path.shouldAntiAlias = true;
  leftChevronShape = new CFShape_0(path, null, new CFStroke(chevronColor, 1));
  !geBack.shapeAry && (geBack.shapeAry = new ArrayList);
  $add_1(geBack.shapeAry, borderShape);
  !geBack.shapeAry && (geBack.shapeAry = new ArrayList);
  $add_1(geBack.shapeAry, leftChevronShape);
  if (enabled) {
    hoverShape = new CFShape_1(new CFRect(btnsRect.x_0, btnsRect.y_0, 24, 24), ($clinit_CFFill() , TRANSPARENT_0), null);
    hoverShape.drillFilter = '{"internal": "prev page"}';
    $setDataObject_0(hoverShape, this$static.graph);
    !geBack.shapeAry && (geBack.shapeAry = new ArrayList);
    $add_1(geBack.shapeAry, hoverShape);
  }
  return geBack;
}

function $getHeadersGEAry(this$static, rnd, numSelected, graphBnds, numRows){
  var dimSelHdr, dimSelText, geHeaderAry, geSelectorHdrText, geSelectorText, hoverShape, selHdrText, selText, showBothHeaders;
  geHeaderAry = new ArrayList;
  selHdrText = $getLocalizedString1Param(this$static.graph, 'SLICER_ALL_VALUES', '' + numRows);
  this$static.showOnlySelected && (selHdrText = $getLocalizedString1Param(this$static.graph, 'SLICER_SELECTED', '' + numRows));
  selText = this$static.graph.getLocalizedString('SLICER_SHOW_SELECTED');
  this$static.showOnlySelected && (selText = this$static.graph.getLocalizedString('SLICER_SHOW_ALL'));
  dimSelHdr = rnd.measureText_0(selHdrText, this$static.pagingGrayFont);
  dimSelText = rnd.measureText_0(selText, this$static.pagingLinkFont);
  showBothHeaders = true;
  dimSelHdr.width_0 + dimSelText.width_0 + this$static.marginX > graphBnds.width_0 && $usingCardBus(this$static.graph.chart) && (showBothHeaders = false);
  if (showBothHeaders || !this$static.showOnlySelected && numSelected == 0) {
    geSelectorHdrText = ($clinit_StrUtil() , drawTextInBounds(rnd, graphBnds, selHdrText, this$static.pagingGrayFont, 0, 0, this$static.pagingGrayFont.size_0, null, null));
    geHeaderAry.array[geHeaderAry.array.length] = geSelectorHdrText;
  }
  if ($usingCardBus(this$static.graph.chart) && !this$static.graph.chart.staticImage && (this$static.showOnlySelected || numSelected > 0)) {
    geSelectorText = ($clinit_StrUtil() , drawTextInBounds(rnd, graphBnds, selText, this$static.pagingLinkFont, HALIGN_RIGHT, 0, this$static.pagingLinkFont.size_0, null, null));
    hoverShape = new CFShape_1(new CFRect(graphBnds.x_0, graphBnds.y_0, graphBnds.width_0, this$static.HDR_HEIGHT), ($clinit_CFFill() , TRANSPARENT_0), null);
    hoverShape.drillFilter = '{"internal": "toggle selector"}';
    $setDataObject_0(hoverShape, this$static.graph);
    !geSelectorText.shapeAry && (geSelectorText.shapeAry = new ArrayList);
    $add_1(geSelectorText.shapeAry, hoverShape);
    geHeaderAry.array[geHeaderAry.array.length] = geSelectorText;
  }
  return geHeaderAry;
}

function $getNextChevron_0(this$static, btnsRect, enabled){
  var borderColor, borderPath, borderRect, borderShape, chevronColor, chevronLeft, chevronTop, geNext, hoverShape, left, path, rightChevronPoints, rightChevronShape, top_0;
  chevronColor = ($clinit_CFColor() , BLACK);
  borderColor = GRAY2;
  if (!enabled) {
    chevronColor = DISABLED_LIGHT_GRAY;
    borderColor = DISABLED_GRAY;
  }
  top_0 = btnsRect.y_0;
  left = btnsRect.x_0 + 24;
  geNext = new GraphicElement;
  rightChevronPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  chevronLeft = left + 9;
  chevronTop = top_0 + 7;
  rightChevronPoints[0] = new CFPoint(chevronLeft, chevronTop);
  rightChevronPoints[1] = new CFPoint(chevronLeft + 6, chevronTop + 5);
  rightChevronPoints[2] = new CFPoint(chevronLeft, chevronTop + 10);
  borderRect = new CFRect(left, top_0, 24, 24);
  borderRect.x_0 % 1 == 0 && $setX_0(borderRect, borderRect.x_0 + 0.5);
  borderRect.y_0 % 1 == 0 && $setY_0(borderRect, borderRect.y_0 + 0.5);
  borderPath = new CFPath_5(borderRect, 0);
  borderShape = new CFShape_0(borderPath, null, new CFStroke(borderColor, 1));
  path = new CFPath_13(rightChevronPoints, false);
  path.shouldAntiAlias = true;
  rightChevronShape = new CFShape_0(path, null, new CFStroke(chevronColor, 1));
  !geNext.shapeAry && (geNext.shapeAry = new ArrayList);
  $add_1(geNext.shapeAry, borderShape);
  !geNext.shapeAry && (geNext.shapeAry = new ArrayList);
  $add_1(geNext.shapeAry, rightChevronShape);
  if (enabled) {
    hoverShape = new CFShape_1(new CFRect(btnsRect.x_0 + 24, btnsRect.y_0, 24, 24), ($clinit_CFFill() , TRANSPARENT_0), null);
    hoverShape.drillFilter = '{"internal": "next page"}';
    $setDataObject_0(hoverShape, this$static.graph);
    !geNext.shapeAry && (geNext.shapeAry = new ArrayList);
    $add_1(geNext.shapeAry, hoverShape);
  }
  return geNext;
}

function $getNumSelected(this$static){
  var currentRow, hasFilteredData, i, inShowAsFilteredMode, numRows, numSelected;
  if (this$static.nonDataSetRows)
    return 0;
  inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
  hasFilteredData = !!this$static.graph.data_0 && (this$static.graph.data_0.hasFilteredCols || this$static.graph.data_0.hasFilteredRows);
  numSelected = 0;
  if (inShowAsFilteredMode && hasFilteredData) {
    numRows = $getNumRows(this$static.graph.data_0);
    for (i = 0; i < numRows; i++) {
      currentRow = $getRow(this$static.graph.data_0, i);
      currentRow.showAsFiltered || ++numSelected;
    }
  }
  return numSelected;
}

function $getRowDisplayList(this$static){
  var currentRow, displayList, hasFilteredData, i, inShowAsFilteredMode, numRows;
  if (this$static.nonDataSetRows) {
    displayList = this$static.nonDataSetRows;
  }
   else if (this$static.showOnlySelected) {
    displayList = new ArrayList;
    inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
    hasFilteredData = !!this$static.graph.data_0 && (this$static.graph.data_0.hasFilteredCols || this$static.graph.data_0.hasFilteredRows);
    if (inShowAsFilteredMode && hasFilteredData) {
      numRows = $getNumRows(this$static.graph.data_0);
      for (i = 0; i < numRows; i++) {
        currentRow = $getRow(this$static.graph.data_0, i);
        currentRow.showAsFiltered || displayList.add_0(currentRow);
      }
    }
  }
   else {
    displayList = this$static.graph.data_0.rows_0;
  }
  return displayList;
}

function $getSlicerBnds(this$static){
  var slicerBnds;
  this$static.slicerBnds?(slicerBnds = $duplicate_5(this$static.slicerBnds)):(slicerBnds = $duplicate_5(this$static.graph.bnds));
  return slicerBnds;
}

function $handleClick_2(this$static, shapeClicked){
  var dataObject, filter, nonFilteredRows, row, row$iterator, rows_0, selectedRow;
  dataObject = $getDataObjectForShape_0(this$static.graph, shapeClicked);
  if (!!shapeClicked && !!this$static.graph.chart && dataObject != null) {
    if (instanceOf(dataObject, 7) && $usingCardBus(this$static.graph.chart)) {
      selectedRow = castTo(dataObject, 7);
      if (this$static.nonDataSetRows) {
        this$static.formatFromInternal = true;
        this$static.graph.setNeedsFormat(true);
        shapeClicked.drillFilter = null;
      }
       else {
        $toggleRowShowAsFilterAndClearIfAllFiltered(this$static.graph.data_0, selectedRow);
        if (this$static.selectOnlyOneObjectAtATime && this$static.graph.data_0.hasFilteredRows) {
          nonFilteredRows = $getNonFilteredRowList(this$static.graph.data_0);
          if (nonFilteredRows.array.length > 1) {
            rows_0 = this$static.graph.data_0.rows_0;
            if (rows_0) {
              for (row$iterator = rows_0.iterator(); row$iterator.hasNext_0();) {
                row = castTo(row$iterator.next_1(), 7);
                row != selectedRow && (row.showAsFiltered = true);
              }
            }
          }
        }
        this$static.formatFromInternal = true;
        this$static.graph.setNeedsFormat(true);
        shapeClicked.drillFilter = null;
      }
    }
     else if (instanceOf(dataObject, 43)) {
      filter = shapeClicked.drillFilter;
      if (filter.indexOf('next page') != -1) {
        $add_1(this$static.lastPageStartIndicies, valueOf(this$static.curPageStartIndex));
        this$static.curPageStartIndex = this$static.nextPageStartIndex;
        this$static.formatFromInternal = true;
        this$static.graph.setNeedsFormat(true);
        return 1;
      }
       else if (filter.indexOf('prev page') != -1) {
        this$static.curPageStartIndex = castTo($get_2(this$static.lastPageStartIndicies, this$static.lastPageStartIndicies.array.length - 1), 29).value_0;
        this$static.nextPageStartIndex = this$static.curPageStartIndex;
        $remove_2(this$static.lastPageStartIndicies, this$static.lastPageStartIndicies.array.length - 1);
        this$static.formatFromInternal = true;
        this$static.graph.setNeedsFormat(true);
        return 1;
      }
       else if (filter.indexOf('toggle selector') != -1) {
        $toggleShowSelection(this$static);
        $addChartOption(this$static.graph, 'show_selected_only', '' + this$static.showOnlySelected);
        this$static.formatFromInternal = true;
        this$static.graph.setNeedsFormat(true);
        return 1;
      }
    }
  }
  return -1;
}

function $hideHeaders(this$static){
  this$static.hideHeaders = true;
  this$static.HDR_HEIGHT = 0;
}

function $pagingControlsNeeded(this$static, rnd, bnds){
  var currentRow, dim, i, itemRect, left, numRows, valStr;
  left = bnds.x_0 + this$static.outerMarginX;
  numRows = this$static.visibleRows.size_1();
  for (i = 0; i < numRows; i++) {
    currentRow = castTo(this$static.visibleRows.get_1(i), 7);
    valStr = $getName(currentRow);
    dim = rnd.measureText_0(valStr, this$static.itemFont);
    itemRect = new CFRect(left, 0, dim.width_0 + 2 * this$static.paddingX, dim.height_0 + 2 * this$static.paddingY);
    if (itemRect.x_0 + itemRect.width_0 > bnds.x_0 + bnds.width_0 - this$static.outerMarginX)
      return true;
    left = itemRect.x_0 + itemRect.width_0 + this$static.marginX;
  }
  return false;
}

function $processChartOptions_6(this$static){
  var key, key$iterator, value_0;
  if (this$static.graph.hasChartOptions()) {
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'hide_headers':
          if (isTrue(value_0)) {
            this$static.hideHeaders = true;
            this$static.HDR_HEIGHT = 10;
          }

          break;
        case 'radio_style':
          isTrue(value_0) && (this$static.selectOnlyOneObjectAtATime = true);
          break;
        case 'selector_style':
          $startsWith(value_0.toLowerCase(), 'rectangle') && (this$static.squareStyle = true);
          break;
        case 'single_col_slicer':
          this$static.singleColumn = isTrue(value_0);
          break;
        case 'center_horiz':
          this$static.centerHorizontally = isTrue(value_0);
          break;
        case 'slicer_fill_width':
          this$static.fillWidth = isTrue(value_0);
          break;
        case 'single_row_slicer':
          this$static.singleRow = isTrue(value_0);
          break;
        case 'center_vert':
          this$static.centerVertically = isTrue(value_0);
          break;
        case 'selected_fill_color':
          this$static.overrideColor = value_0;
          break;
        case 'font_size':
          this$static.setFontSizeOverride(value_0.toLowerCase());
          break;
        case 'equal_width_items':
          this$static.equalWidths = isTrue(value_0);
          break;
        case 'center_item_text':
          this$static.centerText = isTrue(value_0);
          break;
        case 'unsorted_data_used':
          this$static.unsorted = isTrue(value_0);
          break;
        case 'show_selected_only':
          this$static.showOnlySelected = isTrue(value_0);
          break;
        case 'show_hover_label':
          this$static.showHoverLabel = isTrue(value_0);
      }
    }
  }
  this$static.itemFont = new CFFont_0(null, this$static.fontSize, new CFColor_2('#686868'));
  $hasTextColorOverride(this$static.graph) && $setColor_1(this$static.itemFont, $getTextColor(this$static.graph.chart.palette));
  this$static.itemFont.face_0 = 1;
}

function $setControlBnds(this$static, bnds){
  this$static.slicerBnds = bnds;
}

function $setHoverEffects_1(this$static, hoverData){
  if (hoverData != null && instanceOf(hoverData, 7)) {
    $add_1(this$static.hoveredRows, castTo(hoverData, 7));
  }
   else if (hoverData == null) {
    this$static.hoveredRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.showHoverLabel && !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
  }
  return true;
}

function $setNonDataSetRows(this$static, rows_0){
  this$static.nonDataSetRows = rows_0;
  this$static.curPageStartIndex = 0;
  this$static.nextPageStartIndex = 0;
  this$static.lastCurPageStartIndex = 0;
  this$static.lastNextPageStartIndex = 0;
}

function $setToPageWithFirstSelectedItem(this$static, rnd, numSelected){
  var hasSelected;
  hasSelected = this$static.formatChartAndGetHasSelected(rnd, numSelected);
  while (!hasSelected) {
    this$static.graph.geAry.clear_0();
    $add_1(this$static.lastPageStartIndicies, valueOf(this$static.curPageStartIndex));
    if (this$static.nextPageStartIndex <= this$static.curPageStartIndex)
      break;
    this$static.curPageStartIndex = this$static.nextPageStartIndex;
    hasSelected = this$static.formatChartAndGetHasSelected(rnd, numSelected);
  }
}

function $toggleShowSelection(this$static){
  if (this$static.showOnlySelected) {
    this$static.curPageStartIndex = this$static.lastCurPageStartIndex;
    this$static.nextPageStartIndex = this$static.lastNextPageStartIndex;
    this$static.lastPageStartIndicies = this$static.lastLastPageStartIndicies;
  }
   else {
    this$static.lastCurPageStartIndex = this$static.curPageStartIndex;
    this$static.lastNextPageStartIndex = this$static.nextPageStartIndex;
    this$static.lastLastPageStartIndicies = this$static.lastPageStartIndicies;
    this$static.curPageStartIndex = 0;
    this$static.nextPageStartIndex = 0;
    this$static.lastPageStartIndicies = new ArrayList;
  }
  this$static.showOnlySelected = !this$static.showOnlySelected;
}

function HandlerSlicer(){
  this.selectedColor = new CFColor_2('#73B0D7');
  this.outlineColor = new CFColor_2('#D8D8D8');
  this.hoveredRows = new ArrayList;
  this.lastLastPageStartIndicies = new ArrayList;
  this.lastPageStartIndicies = new ArrayList;
  this.pagingGrayFont = new CFFont_0(null, 12, ($clinit_CFColor() , GRAY));
  this.pagingLinkFont = new CFFont_0(null, 12, new CFColor_2('#4B87B0'));
}

defineClass(149, 118, {149:1}, HandlerSlicer);
_.drawItem = function drawItem(rnd, rowIndex, isSelected, itemRect, valStr, hAlignText){
  var drawRow, ge, hoverPoint, itemFrame, labelColor, nonSelFill, rndRect, selColor, selFont, textRect;
  drawRow = castTo(this.visibleRows.get_1(rowIndex), 7);
  itemFrame = new CFPath_4(itemRect, this.cornerRadius);
  textRect = new CFRect(itemRect.x_0, itemRect.y_0, itemRect.width_0, itemRect.height_0);
  $inflateWidth(textRect, -(this.paddingX - 1));
  this.squareStyle && (itemFrame = new CFPath_3(itemRect));
  if (isSelected) {
    selColor = $duplicate_0(this.selectedColor);
    this.overrideColor != null && (selColor = $getColorForName(this.graph.colorMgr, this.overrideColor));
    labelColor = $getLabelColorForSeriesColor(this.graph.colorMgr, selColor);
    selFont = $duplicate_2(this.itemFont);
    selFont.color_0 = labelColor;
    $equals_0(labelColor, ($clinit_CFColor() , WHITE)) && (selFont.face_0 = 1);
    rndRect = new CFShape_0(itemFrame, new CFFill(selColor), null);
    !!rndRect.path && (rndRect.path.shouldAntiAlias = true);
    ge = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valStr, selFont, hAlignText, VALIGN_MIDDLE, this.itemFont.size_0, null, null));
  }
   else {
    nonSelFill = null;
    if (!!this.hoveredRows && $indexOf_1(this.hoveredRows, drawRow, 0) != -1) {
      selColor = $duplicate_0(this.selectedColor);
      this.overrideColor != null && (selColor = $getColorForName(this.graph.colorMgr, this.overrideColor));
      selColor.alpha_0 = 64;
      nonSelFill = new CFFill(selColor);
    }
    rndRect = new CFShape_0(itemFrame, nonSelFill, this.outlineStroke);
    !!rndRect.path && (rndRect.path.shouldAntiAlias = true);
    ge = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valStr, this.itemFont, hAlignText, VALIGN_MIDDLE, this.itemFont.size_0, null, null));
  }
  if (this.showHoverLabel && !!this.hoveredRows && this.hoveredRows.array.length == 1 && $indexOf_1(this.hoveredRows, drawRow, 0) != -1) {
    !!this.graph.hoverLabel && $removeAll(this.graph.hoverLabel);
    $getOrCreateHoverLabel(this.graph);
    hoverPoint = new CFPoint(itemRect.x_0 + itemRect.width_0 / 2, itemRect.y_0);
    $setHoverPoint(this.graph, hoverPoint);
    $addPrimary_2(this.graph.hoverLabel, rnd, $getName(drawRow), hoverPoint, 0, false);
  }
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, rndRect);
  ge.dataObject = drawRow;
  this.graph.geAry.add_0(ge);
}
;
_.format_0 = function format_7(rnd){
  $format_2(this, rnd);
}
;
_.formatChartAndGetHasSelected = function formatChartAndGetHasSelected(rnd, numSelected){
  var bnds, currentRow, dim, displayRect, firstSelectedIndex, fixedEqualWidth, geArySizeBeforeScroll, graphBnds, hAlignText, halfSpace, hasFilteredData, i, i0, inShowAsFilteredMode, isSelected, itemRect, itemWidth, j, lastIndexDisplayed, lastItemBnds, lastPillBottom, left, maxWidth, numRows, tmpDim, tmpValStr, top_0, valStr;
  hAlignText = HALIGN_CENTER;
  firstSelectedIndex = -1;
  this.outlineStroke = new CFStroke(this.outlineColor, 1);
  $hasScaleLineColorOverride(this.graph) && $setColor_2(this.outlineStroke, $getScaleLineColor(this.graph.chart.palette));
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && (this.graph.data_0.hasFilteredCols || this.graph.data_0.hasFilteredRows);
  this.nextPageStartIndex = 0;
  graphBnds = $getSlicerBnds(this);
  bnds = new CFRect(graphBnds.x_0, graphBnds.y_0, graphBnds.width_0, graphBnds.height_0);
  $setY_0(bnds, bnds.y_0 + this.HDR_HEIGHT);
  $setHeight(bnds, bnds.height_0 - this.HDR_HEIGHT);
  $inflateWidth(graphBnds, -this.outerMarginX);
  this.visibleRows = $getRowDisplayList(this);
  numRows = this.visibleRows.size_1();
  this.hideHeaders || $addHeadersToGeAry(this, $getHeadersGEAry(this, rnd, numSelected, graphBnds, numRows));
  maxWidth = $getSlicerBnds(this).width_0 - 2 * this.outerMarginX;
  left = bnds.x_0 + this.outerMarginX;
  top_0 = bnds.y_0 + this.outerMarginY;
  this.graph.chart.staticImage?(this.outerMarginWithScrollY = 20):(this.outerMarginWithScrollY = this.outerMarginY + 24 + 10);
  lastIndexDisplayed = 0;
  geArySizeBeforeScroll = 0;
  displayRect = true;
  fixedEqualWidth = -1;
  lastPillBottom = 0;
  (this.equalWidths || this.fillWidth) && !this.centerText && (hAlignText = 0);
  if (this.equalWidths) {
    for (j = this.curPageStartIndex; j < numRows && j < this.curPageStartIndex + 100; j++) {
      tmpValStr = $getName(castTo(this.visibleRows.get_1(j), 7));
      tmpDim = rnd.measureText_0(tmpValStr, this.itemFont);
      tmpDim.width_0 > fixedEqualWidth && (fixedEqualWidth = tmpDim.width_0);
    }
  }
  for (i0 = this.curPageStartIndex; i0 < numRows && displayRect; i0++) {
    currentRow = castTo(this.visibleRows.get_1(i0), 7);
    valStr = $getName(currentRow);
    (valStr == null || $trim(valStr).length == 0) && (valStr = ' ');
    itemWidth = fixedEqualWidth;
    if (fixedEqualWidth == -1) {
      dim = rnd.measureText_0(valStr, this.itemFont);
      itemWidth = dim.width_0;
    }
    itemRect = new CFRect(left, top_0, itemWidth + 2 * this.paddingX, this.pillHeight);
    isSelected = inShowAsFilteredMode && (hasFilteredData || !!this.nonDataSetRows) && !currentRow.showAsFiltered;
    isSelected && firstSelectedIndex == -1 && (firstSelectedIndex = i0);
    if (this.showOnlySelected && !isSelected)
      continue;
    if (this.singleColumn) {
      if (itemRect.y_0 + itemRect.height_0 > bnds.y_0 + bnds.height_0 - this.outerMarginWithScrollY && geArySizeBeforeScroll == 0) {
        geArySizeBeforeScroll = this.graph.geAry.size_1();
        this.nextPageStartIndex = i0;
      }
      if (itemRect.y_0 + itemRect.height_0 > bnds.y_0 + bnds.height_0 - this.outerMarginY) {
        displayRect = false;
      }
       else {
        if (this.fillWidth) {
          $setX_0(itemRect, bnds.x_0 + this.outerMarginX);
          $setWidth(itemRect, bnds.width_0 - 2 * this.outerMarginX);
        }
         else if (this.centerHorizontally) {
          halfSpace = (bnds.width_0 - itemRect.width_0) / 2;
          $setX_0(itemRect, bnds.x_0 + halfSpace);
        }
      }
    }
     else if (this.singleRow) {
      if (itemRect.x_0 + itemRect.width_0 > bnds.x_0 + bnds.width_0 - this.outerMarginX) {
        if (geArySizeBeforeScroll == 0) {
          geArySizeBeforeScroll = this.graph.geAry.size_1();
          this.nextPageStartIndex = i0;
        }
        displayRect = false;
      }
       else {
        if (this.centerVertically) {
          if (this.curPageStartIndex > 0 || $pagingControlsNeeded(this, rnd, bnds)) {
            halfSpace = (bnds.height_0 - 24 - this.outerMarginY - itemRect.height_0) / 2;
            $setY_0(itemRect, bnds.y_0 + halfSpace);
          }
           else {
            halfSpace = (bnds.height_0 - itemRect.height_0) / 2;
            $setY_0(itemRect, bnds.y_0 + halfSpace);
          }
        }
      }
    }
     else {
      if (itemRect.x_0 + itemRect.width_0 > bnds.x_0 + bnds.width_0 - this.outerMarginX) {
        top_0 = itemRect.y_0 + itemRect.height_0 + this.marginY;
        left = bnds.x_0 + this.outerMarginX;
        itemRect.x_0 = left;
        itemRect.y_0 = top_0;
        if (itemRect.y_0 + itemRect.height_0 > bnds.y_0 + bnds.height_0 - this.outerMarginWithScrollY && geArySizeBeforeScroll == 0) {
          geArySizeBeforeScroll = this.graph.geAry.size_1();
          this.nextPageStartIndex = i0;
        }
        itemRect.y_0 + itemRect.height_0 > bnds.y_0 + bnds.height_0 - this.outerMarginY && (displayRect = false);
      }
    }
    if (displayRect) {
      itemRect.width_0 > maxWidth && (itemRect.width_0 = maxWidth);
      itemRect.x_0 % 1 == 0 && $setX_0(itemRect, itemRect.x_0 + 0.5);
      itemRect.y_0 % 1 == 0 && $setY_0(itemRect, itemRect.y_0 + 0.5);
      this.drawItem(rnd, i0, isSelected, itemRect, valStr, hAlignText);
      this.singleColumn?(top_0 = itemRect.y_0 + itemRect.height_0 + this.marginY):(left = itemRect.x_0 + itemRect.width_0 + this.marginX);
      lastIndexDisplayed = i0;
    }
  }
  if ((!displayRect && lastIndexDisplayed < numRows - 1 || this.curPageStartIndex != 0) && geArySizeBeforeScroll != 0) {
    for (i = this.graph.geAry.size_1() - 1; i >= geArySizeBeforeScroll; i--)
      this.graph.geAry.remove_2(i);
  }
  if (!!this.graph.geAry && this.graph.geAry.size_1() > 0 && !!castTo(this.graph.geAry.get_1(this.graph.geAry.size_1() - 1), 12).shapeAry && castTo(this.graph.geAry.get_1(this.graph.geAry.size_1() - 1), 12).shapeAry.array.length > 0) {
    lastItemBnds = $getBoundsForPath(castTo($get_2(castTo(this.graph.geAry.get_1(this.graph.geAry.size_1() - 1), 12).shapeAry, 0), 6).path);
    lastPillBottom = lastItemBnds.y_0 + lastItemBnds.height_0;
  }
  (!displayRect || this.curPageStartIndex != 0) && $drawPagingIndicators(this, rnd, bnds, lastPillBottom, numRows);
  if (firstSelectedIndex != -1 && (firstSelectedIndex < this.nextPageStartIndex || this.nextPageStartIndex == 0))
    return true;
  return false;
}
;
_.freeResources = function freeResources_17(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.overrideColor = null;
  this.selectedColor = null;
  this.outlineColor = null;
  this.outlineStroke = null;
  !!this.hoveredRows && (this.hoveredRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this.hoveredRows = null;
  this.lastPageStartIndicies.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this.lastPageStartIndicies = null;
  this.itemFont = null;
  this.pagingGrayFont = null;
  this.pagingLinkFont = null;
}
;
_.handleClick_0 = function handleClick_9(shapeClicked){
  return $handleClick_2(this, shapeClicked);
}
;
_.hasHandlerSpecificHighlightUsingFilters = function hasHandlerSpecificHighlightUsingFilters_0(){
  return true;
}
;
_.highlightUsingFilters = function highlightUsingFilters_3(filters){
  var highlightManager, myHoverData, redrawNeeded, row, row$iterator;
  redrawNeeded = false;
  if (!!filters && filters.array.length > 0) {
    highlightManager = new HighlightManager(filters);
    if (!!this.graph.data_0 && $getNumRows(this.graph.data_0) > 0) {
      for (row$iterator = this.graph.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        myHoverData = null;
        $matchForName(highlightManager, $getName(row)) && (myHoverData = row);
        $matchForName(highlightManager, row.name_0) && (myHoverData = row);
        !!myHoverData && (redrawNeeded = redrawNeeded | $setHoverEffects_1(this, myHoverData));
      }
    }
    if (redrawNeeded) {
      this.formatFromInternal = true;
      this.graph.setNeedsFormat(true);
    }
  }
   else if (!!this.hoveredRows && this.hoveredRows.array.length > 0) {
    this.hoveredRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this.graph.setNeedsFormat(true);
    redrawNeeded = true;
  }
  return redrawNeeded;
}
;
_.processChartOptions = function processChartOptions_9(){
  $processChartOptions_6(this);
}
;
_.setFontSizeOverride = function setFontSizeOverride(value_0){
  this.fontSize = 12;
  this.pillHeight = 23;
  if ($equals_2(value_0, 'largest')) {
    this.fontSize = 18;
    this.pillHeight = 32;
  }
   else if ($equals_2(value_0, 'larger')) {
    this.fontSize = 14;
    this.pillHeight = 26;
  }
   else if ($equals_2(value_0, 'smaller')) {
    this.fontSize = 10;
    this.pillHeight = 20;
  }
}
;
_.setFrame = function setFrame_6(type_0, easingType, startTime, curTime, endTime, rnd){
}
;
_.setHoverData = function setHoverData_12(data_0, rnd){
  var redrawNeeded;
  this.hoveredRows.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_1(this, this.hoverData);
    this.formatFromInternal = true;
    this.graph.setNeedsFormat(true);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_3(hoverData, rnd){
  return $setHoverEffects_1(this, hoverData);
}
;
_.HDR_HEIGHT = 20;
_.centerHorizontally = false;
_.centerText = false;
_.centerVertically = false;
_.cornerRadius = 11;
_.curPageStartIndex = 0;
_.equalWidths = false;
_.fillWidth = false;
_.fontSize = 12;
_.formatFromInternal = false;
_.hideHeaders = false;
_.itemFont = null;
_.lastCurPageStartIndex = 0;
_.lastNextPageStartIndex = 0;
_.marginX = 8;
_.marginY = 6;
_.nextPageStartIndex = 0;
_.outerMarginWithScrollY = 0;
_.outerMarginX = 1;
_.outerMarginY = 1;
_.outlineStroke = null;
_.paddingX = 10;
_.paddingY = 3;
_.pillHeight = 23;
_.selectOnlyOneObjectAtATime = false;
_.showHoverLabel = false;
_.showOnlySelected = false;
_.singleColumn = false;
_.singleRow = false;
_.squareStyle = false;
_.unsorted = false;
var Lcom_domo_charting_graphs_HandlerSlicer_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerSlicer', 149);
function $drawItem(this$static, rnd, rowIndex, isSelected, itemRect, valStr){
  var checkMark, checkPath, checkRect, chkboxRect, drawRow, ge, hoverPoint, hoverShape, innerChkboxRect, innerCircle, nonSelHoverColor, roundedRect, selColor, textRect, checkPoints;
  drawRow = castTo(this$static.visibleRows.get_1(rowIndex), 7);
  chkboxRect = new CFRect(itemRect.x_0, itemRect.y_0 + (itemRect.height_0 - this$static.checkboxSize) / 2, this$static.checkboxSize, this$static.checkboxSize);
  chkboxRect.x_0 % 1 == 0 && $setX_0(chkboxRect, chkboxRect.x_0 + 0.5);
  chkboxRect.y_0 % 1 == 0 && $setY_0(chkboxRect, chkboxRect.y_0 + 0.5);
  selColor = new CFColor_2('#99CCEE');
  this$static.overrideColor != null && (selColor = $getColorForName(this$static.graph.colorMgr, this$static.overrideColor));
  if (this$static.isRadioStyle) {
    $inflate(chkboxRect, -1);
    roundedRect = new CFPath_0(chkboxRect.x_0, chkboxRect.y_0, chkboxRect.width_0);
    checkRect = new CFShape_0(roundedRect, null, new CFStroke_1('#C0C0C0', 1));
    !!checkRect.path && (checkRect.path.shouldAntiAlias = true);
  }
   else {
    roundedRect = new CFPath_4(chkboxRect, 3);
    checkRect = new CFShape_0(roundedRect, null, new CFStroke_1('#C0C0C0', 1));
    !!checkRect.path && (checkRect.path.shouldAntiAlias = true);
  }
  if (this$static.isRadioStyle) {
    innerChkboxRect = new CFRect(chkboxRect.x_0, chkboxRect.y_0, chkboxRect.width_0, chkboxRect.height_0);
    $inflate(innerChkboxRect, -3);
    innerCircle = new CFPath_0(innerChkboxRect.x_0, innerChkboxRect.y_0, innerChkboxRect.width_0);
    checkMark = new CFShape_0(innerCircle, new CFFill(selColor), null);
    !!checkMark.path && (checkMark.path.shouldAntiAlias = true);
  }
   else {
    checkPath = (checkPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1) , checkPoints[0] = new CFPoint(chkboxRect.x_0 + $intern_16 * this$static.checkboxSize, chkboxRect.y_0 + 0.45 * this$static.checkboxSize) , checkPoints[1] = new CFPoint(chkboxRect.x_0 + 0.4 * this$static.checkboxSize, chkboxRect.y_0 + 0.65 * this$static.checkboxSize) , checkPoints[2] = new CFPoint(chkboxRect.x_0 + $intern_8 * this$static.checkboxSize, chkboxRect.y_0 + 0.3 * this$static.checkboxSize) , new CFPath_13(checkPoints, false));
    checkMark = new CFShape_0(checkPath, null, new CFStroke_1('#FFFFFF', 3));
    !!checkMark.path && (checkMark.path.shouldAntiAlias = true);
  }
  textRect = new CFRect(itemRect.x_0, itemRect.y_0, itemRect.width_0, itemRect.height_0);
  $setX_0(textRect, itemRect.x_0 + this$static.checkboxSize + this$static.paddingX);
  $setWidth(textRect, textRect.width_0 - (this$static.checkboxSize + this$static.paddingX) + 2);
  hoverShape = new CFShape_1(itemRect, ($clinit_CFFill() , TRANSPARENT_0), null);
  if (isSelected) {
    this$static.isRadioStyle?(checkRect = new CFShape_0(roundedRect, WHITE_0, new CFStroke(selColor, 1))):(checkRect = new CFShape_0(roundedRect, new CFFill(selColor), new CFStroke(selColor, 1)));
    !!checkRect.path && (checkRect.path.shouldAntiAlias = true);
    ge = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valStr, this$static.itemFont, 0, VALIGN_MIDDLE, this$static.itemFont.size_0, null, null));
  }
   else {
    if (!!this$static.hoveredRows && $indexOf_1(this$static.hoveredRows, drawRow, 0) != -1) {
      nonSelHoverColor = new CFColor_2('#99CCEE');
      this$static.overrideColor != null && (nonSelHoverColor = $getColorForName(this$static.graph.colorMgr, this$static.overrideColor));
      nonSelHoverColor.alpha_0 = 64;
      checkRect = new CFShape_0(roundedRect, new CFFill(nonSelHoverColor), new CFStroke(nonSelHoverColor, 1));
      !!checkRect.path && (checkRect.path.shouldAntiAlias = true);
    }
    ge = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valStr, this$static.itemFont, 0, VALIGN_MIDDLE, this$static.itemFont.size_0, null, null));
  }
  if (this$static.showHoverLabel && !!this$static.hoveredRows && this$static.hoveredRows.array.length == 1 && $indexOf_1(this$static.hoveredRows, drawRow, 0) != -1) {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
    $getOrCreateHoverLabel(this$static.graph);
    hoverPoint = new CFPoint(itemRect.x_0 + itemRect.width_0 / 2, itemRect.y_0);
    $setHoverPoint(this$static.graph, hoverPoint);
    $addPrimary_2(this$static.graph.hoverLabel, rnd, $getName(drawRow), hoverPoint, 0, false);
  }
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, checkRect);
  isSelected && (!ge.shapeAry && (ge.shapeAry = new ArrayList) , $add_1(ge.shapeAry, checkMark));
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, hoverShape);
  ge.dataObject = drawRow;
  this$static.graph.geAry.add_0(ge);
}

function $getMaxItemWidth(this$static, rnd){
  var dim, maxWidth, row, row$iterator, valStr;
  maxWidth = 0;
  for (row$iterator = this$static.visibleRows.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    valStr = $getName(row);
    (valStr == null || $trim(valStr).length == 0) && (valStr = ' ');
    dim = rnd.measureText_0(valStr, this$static.itemFont);
    dim.width_0 > maxWidth && (maxWidth = dim.width_0);
  }
  return maxWidth;
}

function HandlerCheckboxSelector(){
  HandlerSlicer.call(this);
  this.marginY = 0;
}

defineClass(339, 149, {149:1}, HandlerCheckboxSelector);
_.drawItem = function drawItem_0(rnd, rowIndex, isSelected, itemRect, valStr, hAlignText){
  $drawItem(this, rnd, rowIndex, isSelected, itemRect, valStr);
}
;
_.formatChartAndGetHasSelected = function formatChartAndGetHasSelected_0(rnd, numSelected){
  var bnds, curColNum, currentRow, displayRect, firstSelectedIndex, graphBnds, hAlignText, halfSpace, hasFilteredData, hasPagingControls, headerGEAry, i, inShowAsFilteredMode, isSelected, itemNumInCol, itemRect, itemsPerCol, itemsPerColHeight, lastPillBottom, left, maxColumns, maxItemWidth, maxItemsPerCol, maxWidth, numColsNeeded, numColsWithExtra, numItems, top_0, valStr;
  hAlignText = HALIGN_CENTER;
  firstSelectedIndex = -1;
  this.outlineStroke = new CFStroke(this.outlineColor, 1);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && (this.graph.data_0.hasFilteredCols || this.graph.data_0.hasFilteredRows);
  this.nextPageStartIndex = 0;
  graphBnds = $getSlicerBnds(this);
  bnds = new CFRect(graphBnds.x_0, graphBnds.y_0, graphBnds.width_0, graphBnds.height_0);
  $inflateWidth(graphBnds, -this.outerMarginX);
  this.visibleRows = $getRowDisplayList(this);
  numItems = this.visibleRows.size_1();
  maxWidth = $getSlicerBnds(this).width_0 - 2 * this.outerMarginX;
  $setY_0(bnds, bnds.y_0 + this.HDR_HEIGHT);
  $setHeight(bnds, bnds.height_0 - this.HDR_HEIGHT);
  headerGEAry = null;
  this.hideHeaders || (headerGEAry = $getHeadersGEAry(this, rnd, numSelected, graphBnds, numItems));
  left = bnds.x_0 + this.outerMarginX;
  top_0 = bnds.y_0 + this.outerMarginY;
  hasPagingControls = false;
  maxItemWidth = $getMaxItemWidth(this, rnd) + this.paddingX + this.checkboxSize;
  maxColumns = round_int((bnds.width_0 - this.outerMarginX * 2) / (maxItemWidth + this.marginX));
  maxItemsPerCol = round_int((bnds.height_0 - this.outerMarginY * 2) / (this.pillHeight + this.marginY));
  if (this.numColsOverride != 0 && !this.singleRow) {
    maxColumns = this.numColsOverride;
    maxItemWidth = (bnds.width_0 - 2 * this.outerMarginX) / this.numColsOverride - this.marginX;
  }
  itemsPerColHeight = 1;
  if (this.visibleRows.size_1() > maxItemsPerCol * maxColumns) {
    hasPagingControls = true;
    itemsPerColHeight = (bnds.height_0 - (this.outerMarginY * 2 + 24 + 2)) / (this.pillHeight + this.marginY);
    maxItemsPerCol = round_int(itemsPerColHeight);
  }
  numColsNeeded = maxColumns;
  itemsPerCol = maxItemsPerCol;
  numColsWithExtra = 0;
  if (hasPagingControls) {
    if (itemsPerColHeight < 1) {
      itemsPerCol = 1;
      if (!this.hideHeaders && this.HDR_HEIGHT > 0) {
        $setY_0(bnds, bnds.y_0 - this.HDR_HEIGHT);
        $setHeight(bnds, bnds.height_0 + this.HDR_HEIGHT);
        top_0 -= this.HDR_HEIGHT;
        headerGEAry = null;
      }
    }
  }
   else {
    numColsNeeded = round_int($wnd.Math.ceil(numItems / maxItemsPerCol));
    this.numColsOverride != 0 && !this.singleRow && (numColsNeeded = this.numColsOverride);
    itemsPerCol = round_int($wnd.Math.ceil(numItems / numColsNeeded));
    numColsWithExtra = numItems % numColsNeeded;
  }
  !!headerGEAry && $addHeadersToGeAry(this, headerGEAry);
  displayRect = true;
  lastPillBottom = 0;
  this.singleColumn && (this.equalWidths || this.fillWidth) && !this.centerText && (hAlignText = 0);
  itemNumInCol = 0;
  curColNum = 1;
  for (i = this.curPageStartIndex; i < numItems && displayRect; i++) {
    currentRow = castTo(this.visibleRows.get_1(i), 7);
    isSelected = inShowAsFilteredMode && (hasFilteredData || !!this.nonDataSetRows) && !currentRow.showAsFiltered;
    isSelected && firstSelectedIndex == -1 && (firstSelectedIndex = i);
    if (this.showOnlySelected && !isSelected)
      continue;
    valStr = $getName(currentRow);
    (valStr == null || $trim(valStr).length == 0) && (valStr = ' ');
    itemRect = new CFRect(left, top_0, maxItemWidth, this.pillHeight);
    if (this.singleRow) {
      if (itemRect.x_0 + itemRect.width_0 > bnds.x_0 + bnds.width_0 - this.outerMarginX) {
        this.nextPageStartIndex = i;
        displayRect = false;
      }
       else {
        if (this.centerVertically) {
          if (this.curPageStartIndex > 0 || $pagingControlsNeeded(this, rnd, bnds)) {
            halfSpace = (bnds.height_0 - 24 - this.outerMarginY - itemRect.height_0) / 2;
            $setY_0(itemRect, bnds.y_0 + halfSpace);
          }
           else {
            halfSpace = (bnds.height_0 - itemRect.height_0) / 2;
            $setY_0(itemRect, bnds.y_0 + halfSpace);
          }
        }
      }
    }
     else {
      if (itemNumInCol == itemsPerCol) {
        lastPillBottom == 0 && (lastPillBottom = top_0 - this.marginY);
        top_0 = bnds.y_0 + this.outerMarginY;
        left = left + (bnds.width_0 - 2 * this.outerMarginX) / numColsNeeded;
        itemRect.x_0 = left;
        itemRect.y_0 = top_0;
        itemNumInCol = 0;
        numColsWithExtra == curColNum && --itemsPerCol;
        ++curColNum;
      }
      if (itemRect.x_0 >= bnds.x_0 + bnds.width_0 - this.outerMarginX) {
        displayRect = false;
        this.nextPageStartIndex = i;
      }
    }
    if (displayRect) {
      itemRect.width_0 > maxWidth && (itemRect.width_0 = maxWidth);
      $drawItem(this, rnd, i, isSelected, itemRect, valStr);
      this.singleRow?(left = itemRect.x_0 + itemRect.width_0 + this.marginX):(top_0 = itemRect.y_0 + itemRect.height_0 + this.marginY);
      ++itemNumInCol;
    }
  }
  (!displayRect || this.curPageStartIndex != 0) && $drawPagingIndicators(this, rnd, bnds, lastPillBottom, numItems);
  if (firstSelectedIndex != -1 && (firstSelectedIndex < this.nextPageStartIndex || this.nextPageStartIndex == 0))
    return true;
  return false;
}
;
_.processChartOptions = function processChartOptions_10(){
  var numColumnsOverride;
  $processChartOptions_6(this);
  if (this.graph.typeAttributes.isRadio) {
    this.isRadioStyle = true;
    this.selectOnlyOneObjectAtATime = true;
  }
  numColumnsOverride = 0;
  this.graph.hasChartOptions() && this.graph.getChartOptionAsString('num_cols') != null && (numColumnsOverride = getInt(this.graph.getChartOptionAsString('num_cols'), 0));
  (numColumnsOverride < 1 || numColumnsOverride > 10) && (numColumnsOverride = 0);
  numColumnsOverride != 0 && (this.numColsOverride = numColumnsOverride);
  this.itemFont = new CFFont_0(null, this.fontSize, new CFColor_2('#484848'));
}
;
_.setFontSizeOverride = function setFontSizeOverride_0(value_0){
  this.fontSize = 12;
  this.pillHeight = 24;
  this.checkboxSize = 18;
  if ($equals_2(value_0, 'largest')) {
    this.fontSize = 18;
    this.pillHeight = 32;
    this.checkboxSize = 24;
  }
   else if ($equals_2(value_0, 'larger')) {
    this.fontSize = 14;
    this.pillHeight = 26;
    this.checkboxSize = 20;
  }
   else if ($equals_2(value_0, 'smaller')) {
    this.fontSize = 10;
    this.pillHeight = 20;
    this.checkboxSize = 16;
  }
}
;
_.checkboxSize = 18;
_.isRadioStyle = false;
_.numColsOverride = 0;
var Lcom_domo_charting_graphs_HandlerCheckboxSelector_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerCheckboxSelector', 339);
function $addBackgroundDrillShape(this$static){
  var ddShape, hoverBnds;
  hoverBnds = $duplicate_5(this$static.graph.bnds);
  $inflate(hoverBnds, -15);
  ddShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  ddShape.drillFilter = '{"filters":[]}';
  $addShapeToGraphWithData(this$static, ddShape, new HoverInfo(null, null));
}

function $addShapeToGraph(this$static, shape_0){
  var ge;
  ge = new GraphicElement;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, shape_0);
  $addGraphicElement_0(this$static.graph, ge);
}

function $addShapeToGraphWithData(this$static, shape_0, dataObject){
  var ge;
  ge = new GraphicElement;
  $addShape_0(ge, shape_0, dataObject);
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawArrow(this$static, bnds, isUp, prevValue, color_0){
  var height, leftOffset, midX, path, points, shape_0, topOffset, width_0;
  if (prevValue != 0) {
    leftOffset = bnds.width_0 * 0.2;
    topOffset = bnds.width_0 * 0.52;
    height = bnds.width_0 * 0.09;
    width_0 = bnds.width_0 * 0.08;
    midX = leftOffset + width_0 / 2;
    points = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
    if (isUp) {
      points[0] = new CFPoint(bnds.x_0 + leftOffset, bnds.y_0 + topOffset + height);
      points[1] = new CFPoint(bnds.x_0 + leftOffset + width_0, bnds.y_0 + topOffset + height);
      points[2] = new CFPoint(bnds.x_0 + midX, bnds.y_0 + topOffset);
    }
     else {
      points[0] = new CFPoint(bnds.x_0 + leftOffset, bnds.y_0 + topOffset);
      points[1] = new CFPoint(bnds.x_0 + leftOffset + width_0, bnds.y_0 + topOffset);
      points[2] = new CFPoint(bnds.x_0 + midX, bnds.y_0 + topOffset + height);
    }
    path = new CFPath_13(points, true);
    shape_0 = new CFShape_0(path, new CFFill(color_0), null);
    !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
    shape_0.drillFilter = '{"filters":[]}';
    $addShapeToGraphWithData(this$static, shape_0, new HoverInfo(null, null));
  }
}

function $drawArrowNonFilled(this$static, valueBnds, isUp, color_0){
  var arrowRect, path, pathStr, shape_0;
  arrowRect = $getArrowRect(this$static, valueBnds);
  pathStr = 'm 32.6,1.1000004; c 32.3,0.8999996,32,1,31.599998,1.1000004; l 17.5,3.4000015; c 17.3,3.7000008,17.3,4.0999985,17.6,4.299999; l 20.900002,7.0999985; c 19.8,9.5,17.6,12.700001,13.1,14.400002; c 6.299999,16.900002,0.19999981,12.5,0.19999981,12.5; l 0.6999998,13.099998; c 0.6999998,13.099998,6,20.900002,15.200001,20.7; c 22.900002,20.599998,27,15.900002,28.599998,13.599998; l 32,16.400002; c 32.3,16.599998,32.7,16.599998,32.9,16.3; l 32.7,2.0999985; c 32.7,1.7000008,32.8,1.2999992,32.6,1.1000004; z ;';
  this$static.arrowStyle == 1?(pathStr = 'm 0,100; l 100,100; l 50,0; l 0,100; z;'):this$static.arrowStyle == 2 && (pathStr = 'm 0,27; l 23,4; l 8,4; l 8,0; l 30,0; l 30,22; l 26,22; l 26,7; l 3,30; l 0,27; z;');
  if (!isUp) {
    pathStr = 'm 33,18.7; l 33.2,4.5; c 33,4.2,32.6,4.2,32.3,4.3999996; l 28.900002,7.2; c 27.3,4.8999996,23.099998,0.3000002,15.5,0.099999905; c 6.299999,0,1,7.7,1,7.7; l 0.5,8.3; c 0.5,8.3,6.5,3.8999996,13.4,6.3999996; c 17.9,8.1,20.099998,11.299999,21.2,13.700001; l 17.9,16.5; c 17.6,16.7,17.6,17.2,17.8,17.4; l 31.900002,19.7; c 32.3,19.8,32.6,19.9,32.9,19.7; c 33.1,19.5,33,19.1,33,18.7; z ;';
    this$static.arrowStyle == 1?(pathStr = 'm 0,0; l 100,0; l 50,100; l 0,0; z;'):this$static.arrowStyle == 2 && (pathStr = 'm 3,0; l 26,23; l 26,8; l 30,8; l 30,30; l 8,30; l 8,26; l 23,26; l 0,3; l 3,0; z;');
  }
  path = new CFPath_7(pathStr);
  path = $scaleAndPositionToRect(path, arrowRect);
  shape_0 = new CFShape_0(path, new CFFill(color_0), null);
  shape_0.drillFilter = '{"filters":[]}';
  !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
  $addShapeToGraphWithData(this$static, shape_0, new HoverInfo(null, null));
}

function $drawComparativeFillAdvanced(this$static, rnd){
  var arrowIsUp, colors, curValue, dataCell, goalValue, innerBnds, innerOffset, innerWidth_0, label_0, lowerRange, maxValue, minValue, percentValue, prevValue, rangeMedian, srsInfo, upperRange;
  $setupAnimation(this$static);
  innerOffset = toDouble_0(fromDouble_0($wnd.Math.round(this$static.bnds.width_0 * 0.11)));
  innerWidth_0 = this$static.bnds.width_0 - 2 * innerOffset;
  innerBnds = new CFRect(this$static.outerBnds.x_0 + innerOffset, this$static.outerBnds.y_0 + innerOffset, innerWidth_0, innerWidth_0);
  dataCell = $getFirstCell($getColumn(this$static.graph.data_0, 0));
  minValue = getDouble_0($getName(dataCell.row), 0);
  maxValue = $getValue(dataCell);
  prevValue = $getValue($getMetaDataCell(dataCell, 0));
  curValue = $getValue($getMetaDataCell(dataCell, this$static.CUR_VAL));
  lowerRange = $getValue($getMetaDataCell(dataCell, this$static.LOWER_RNG));
  upperRange = $getValue($getMetaDataCell(dataCell, this$static.UPPER_RNG));
  rangeMedian = $getValue($getMetaDataCell(dataCell, this$static.MEDIAN));
  label_0 = $getName($getMetadataInfo(this$static.graph.data_0, this$static.CUR_VAL));
  curValue < minValue && (minValue = curValue);
  prevValue < minValue && (minValue = prevValue);
  curValue > maxValue && (maxValue = curValue);
  prevValue > maxValue && (maxValue = prevValue);
  percentValue = (curValue / prevValue - 1) * 100;
  curValue > prevValue && percentValue < 0 && (percentValue *= -1);
  curValue < prevValue && percentValue > 0 && (percentValue *= -1);
  arrowIsUp = percentValue >= 0;
  colors = $getColors(this$static, percentValue);
  $drawOuterRing(this$static, this$static.outerBnds);
  $drawInnerRing(this$static, innerBnds, 0.79, null);
  srsInfo = new SrsCompGaugeInfo(this$static, innerBnds, minValue, maxValue, curValue, prevValue, colors, null);
  $addBackgroundDrillShape(this$static);
  $drawOuterRange(this$static, this$static.outerBnds, minValue, maxValue, lowerRange, upperRange);
  $drawOuterRangeMedianLine(this$static, this$static.outerBnds, minValue, maxValue, rangeMedian);
  if ($getMetaDataCell(dataCell, this$static.GOAL)) {
    goalValue = $getValue($getMetaDataCell(dataCell, this$static.GOAL));
    $drawOuterGoal(this$static, this$static.outerBnds, minValue, maxValue, goalValue);
  }
  $drawLabel(this$static, rnd, innerBnds, label_0);
  $drawValue(this$static, rnd, innerBnds, percentValue, prevValue, colors.arrowClr);
  $drawArrow(this$static, innerBnds, arrowIsUp, prevValue, colors.arrowClr);
  $drawMinMax(this$static, rnd, this$static.outerBnds, minValue, maxValue, null);
  $add_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
  $draw_5(srsInfo, 1);
}

function $drawComparativeFillBasic(this$static, rnd){
  var arrowIsUp, colors, curValue, dataCell, goalValue, label_0, maxValue, minValue, percentValue, prevValue, srsInfo;
  $setupAnimation(this$static);
  dataCell = $getFirstCell($getColumn(this$static.graph.data_0, 0));
  minValue = getDouble_0($getName(dataCell.row), 0);
  maxValue = $getValue(dataCell);
  prevValue = $getValue($getMetaDataCell(dataCell, 0));
  curValue = $getValue($getMetaDataCell(dataCell, this$static.CUR_VAL));
  label_0 = $getName($getMetadataInfo(this$static.graph.data_0, this$static.CUR_VAL));
  curValue < minValue && (minValue = curValue);
  prevValue < minValue && (minValue = prevValue);
  curValue > maxValue && (maxValue = curValue);
  prevValue > maxValue && (maxValue = prevValue);
  percentValue = (curValue / prevValue - 1) * 100;
  curValue > prevValue && percentValue < 0 && (percentValue *= -1);
  curValue < prevValue && percentValue > 0 && (percentValue *= -1);
  arrowIsUp = percentValue >= 0;
  colors = $getColors(this$static, percentValue);
  $drawInnerRing(this$static, this$static.outerBnds, 0.79, null);
  srsInfo = new SrsCompGaugeInfo(this$static, this$static.outerBnds, minValue, maxValue, curValue, prevValue, colors, null);
  $addBackgroundDrillShape(this$static);
  if ($getMetaDataCell(dataCell, this$static.GOAL)) {
    goalValue = $getValue($getMetaDataCell(dataCell, this$static.GOAL));
    $drawOuterGoal(this$static, this$static.outerBnds, minValue, maxValue, goalValue);
  }
  $drawLabel(this$static, rnd, this$static.outerBnds, label_0);
  $drawValue(this$static, rnd, this$static.outerBnds, percentValue, prevValue, colors.arrowClr);
  $drawArrow(this$static, this$static.outerBnds, arrowIsUp, prevValue, colors.arrowClr);
  $drawMinMax(this$static, rnd, this$static.outerBnds, minValue, maxValue, null);
  $add_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
  $draw_5(srsInfo, 1);
}

function $drawFilledGauge(this$static, rnd){
  var color_0, curValue, drillFilter, hoverShape, hoverText, is100Multiplied, labelPoint, maxValue, minValue, ovrColor, srsInfo, targetColor, targetLineColor, targetValue, text_0, valForAutoMax;
  $setupAnimation(this$static);
  curValue = $getValueForFilledGauge(this$static, 0);
  drillFilter = $getDrillFilterForFilledGauge(this$static);
  targetValue = NaN;
  ($getNumCols(this$static.graph.data_0) > 1 || $getMetaDataSize(this$static.graph.data_0) > 0) && (targetValue = $getValueForFilledGauge(this$static, 1));
  isNaN_0(this$static.targetOverride) || (targetValue = this$static.targetOverride);
  valForAutoMax = curValue;
  !isNaN(targetValue) && targetValue > curValue && (valForAutoMax = targetValue);
  !isNaN_0(this$static.minOverride) && this$static.minOverride >= valForAutoMax && (valForAutoMax = this$static.minOverride);
  is100Multiplied = false;
  !!this$static.graph.numberFormatter && this$static.graph.numberFormatter.multiplyBy100 && (is100Multiplied = true);
  maxValue = getDefaultMaxRange(valForAutoMax, is100Multiplied);
  isNaN_0(this$static.maxOverride) || (this$static.maxOverride < valForAutoMax?(maxValue = valForAutoMax):this$static.maxOverride >= valForAutoMax && (maxValue = this$static.maxOverride));
  minValue = 0;
  isNaN_0(this$static.minOverride) || (minValue = this$static.minOverride);
  curValue < minValue && (minValue = curValue);
  color_0 = $getColorForFilledGauge(this$static, curValue, targetValue);
  $drawInnerRing(this$static, this$static.outerBnds, 0.7, this$static.overrideBaseColor);
  srsInfo = new SrsCompGaugeInfo(this$static, this$static.outerBnds, minValue, maxValue, curValue, curValue, null, color_0);
  if (!isNaN(targetValue)) {
    ovrColor = null;
    targetLineColor = '#AAAAAA';
    this$static.overrideTargetLineColor != null && (ovrColor = $getColorForName(this$static.graph.colorMgr, this$static.overrideTargetLineColor));
    !!ovrColor && (targetLineColor = this$static.overrideTargetLineColor);
    $drawTargetLine(this$static, this$static.outerBnds, minValue, maxValue, targetValue, targetLineColor);
  }
  text_0 = $formatNumber_1(this$static.graph.numberFormatter, curValue);
  $drawFilledText(this$static, rnd, this$static.outerBnds, text_0, color_0, $intern_16, 0.38, 0.5, 0.24);
  this$static.valueLabel != null && !this$static.graph.treatAsSmall && $drawFilledText(this$static, rnd, this$static.outerBnds, this$static.valueLabel, color_0, 0.3, 0.6, 0.4, 0.1);
  if (!isNaN(targetValue) && !this$static.graph.treatAsSmall) {
    targetColor = new CFColor_2('#818181');
    text_0 = $formatNumber_1(this$static.graph.numberFormatter, targetValue);
    $drawFilledText(this$static, rnd, this$static.outerBnds, text_0, targetColor, 0.3, 0.32, 0.4, 0.08);
    this$static.targetLabel != null && $drawFilledText(this$static, rnd, this$static.outerBnds, this$static.targetLabel, targetColor, 0.3, 0.22, 0.4, 0.08);
  }
  $drawMinMax(this$static, rnd, this$static.outerBnds, minValue, maxValue, this$static.maxLabel);
  labelPoint = new CFPoint($getCenterX(this$static.outerBnds), this$static.outerBnds.y_0);
  hoverText = $formatNumber_1(this$static.graph.hoverNumberFormatter, curValue);
  hoverShape = new CFShape_1(this$static.outerBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.drillFilter = drillFilter;
  hoverShape.hoverText = hoverText;
  $addShapeToGraphWithData(this$static, hoverShape, new HoverInfo(hoverText, labelPoint));
  $add_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
  $draw_5(srsInfo, 1);
}

function $drawFilledText(this$static, rnd, bnds, text_0, color_0, xOffsetPct, yOffsetPct, widthPct, heightPct){
  var ge, height, leftOffset, topOffset, txtBnds, valueFont, width_0;
  leftOffset = bnds.width_0 * xOffsetPct;
  topOffset = bnds.width_0 * yOffsetPct;
  height = bnds.width_0 * heightPct;
  width_0 = bnds.width_0 * widthPct;
  txtBnds = new CFRect(bnds.x_0 + leftOffset, bnds.y_0 + topOffset, width_0, height);
  valueFont = new CFFont_0(null, 100, color_0);
  ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, text_0, valueFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawInnerRing(this$static, bnds, innerBndsRatio, fillColor){
  var ge, innerDiameter, path, ringShape;
  fillColor == null && (fillColor = '#E3E3E3');
  innerDiameter = toDouble_0(fromDouble_0($wnd.Math.round(bnds.width_0 * innerBndsRatio)));
  path = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2, innerDiameter / 2, -225, 45);
  ringShape = new CFShape_0(path, new CFFill_1(fillColor), null);
  ge = new GraphicElement;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, ringShape);
  $add_0(this$static.graph.backGeAry, 0, ge);
}

function $drawInnerRingPoint(this$static, bnds, minVal, maxVal, curVal, colorStr, dataColumn){
  var circlePath, degreePosition, ge, hoverText, innerRingWidth, innerRingWidthHalf, labelPoint, point, shape_0;
  ge = new GraphicElement;
  innerRingWidth = bnds.width_0 * 0.105;
  innerRingWidthHalf = innerRingWidth * 0.5;
  degreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (curVal - minVal) / (maxVal - minVal) * 270)));
  point = $getPointOnCircle(bnds, bnds.width_0 / 2 - innerRingWidthHalf, -degreePosition);
  circlePath = new CFPath_0(point.x_0 - innerRingWidthHalf, point.y_0 - innerRingWidthHalf, innerRingWidth);
  shape_0 = new CFShape_0(circlePath, new CFFill_1(colorStr), null);
  !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
  labelPoint = new CFPoint(point.x_0, point.y_0 - innerRingWidthHalf);
  hoverText = null;
  if (!this$static.hideHoverText) {
    hoverText = $getName($getMetadataInfo(this$static.graph.data_0, dataColumn)) + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, curVal);
    shape_0.hoverText = hoverText;
  }
  shape_0.drillFilter = '{"filters":[]}';
  $addShape_0(ge, shape_0, new HoverInfo(hoverText, labelPoint));
  $addFrontGraphicElement_0(this$static.graph, ge);
}

function $drawInnerRingRange(this$static, bnds, minVal, maxVal, curVal, prevVal, lightColor, darkColor){
  var arcSlice, curDegreePosition, endAngle, ge, i, inc, innerDiameter, lastEndAngle, path, path0, prevDegreePosition, transitionColor, whiteArcOutline, newRed, newGreen, newBlue;
  ge = new GraphicElement;
  innerDiameter = toDouble_0(fromDouble_0($wnd.Math.round(bnds.width_0 * 0.79)));
  curDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (curVal - minVal) / (maxVal - minVal) * 270)));
  prevDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (prevVal - minVal) / (maxVal - minVal) * 270)));
  inc = (curDegreePosition - prevDegreePosition) / 80;
  lastEndAngle = curDegreePosition;
  endAngle = curDegreePosition - inc;
  for (i = 0; i < 80; i++) {
    transitionColor = ($clinit_CFColor() , newRed = transition(i, darkColor.red, lightColor.red) , newGreen = transition(i, darkColor.green, lightColor.green) , newBlue = transition(i, darkColor.blue, lightColor.blue) , new CFColor(newRed, newGreen, newBlue));
    path0 = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2 - 1, innerDiameter / 2 + 1, -endAngle, -lastEndAngle);
    arcSlice = new CFShape_0(path0, new CFFill(transitionColor), new CFStroke(transitionColor, 1));
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, arcSlice);
    lastEndAngle = endAngle;
    endAngle -= inc;
  }
  path = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2, innerDiameter / 2, -prevDegreePosition, -curDegreePosition);
  whiteArcOutline = new CFShape_0(path, null, new CFStroke_1('#FFFFFF', 1));
  whiteArcOutline.drillFilter = '{"filters":[]}';
  $addShape_0(ge, whiteArcOutline, new HoverInfo(null, null));
  $addFrontGraphicElement_0(this$static.graph, ge);
}

function $drawInnerRingRangeSimple(this$static, bnds, minVal, maxVal, curVal, color_0){
  var curDegreePosition, ge, innerDiameter, path, ringShape;
  innerDiameter = toDouble_0(fromDouble_0($wnd.Math.round(bnds.width_0 * 0.7)));
  curDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (curVal - minVal) / (maxVal - minVal) * 270)));
  path = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2, innerDiameter / 2, -225, -curDegreePosition);
  ringShape = new CFShape_0(path, new CFFill(color_0), null);
  ge = new GraphicElement;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, ringShape);
  $add_1(this$static.graph.backGeAry, ge);
}

function $drawLabel(this$static, rnd, bnds, text_0){
  var ge, height, labelFont, offset, topOffset, txtBnds, width_0;
  offset = bnds.width_0 * 0.23;
  topOffset = bnds.height_0 * 0.27;
  height = bnds.width_0 * 0.2;
  width_0 = bnds.width_0 * 0.536;
  txtBnds = new CFRect(bnds.x_0 + offset, bnds.y_0 + topOffset, width_0, height);
  labelFont = new CFFont_0(null, 30, new CFColor_2('#818181'));
  ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, text_0, labelFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawMinMax(this$static, rnd, bnds, minValue, maxValue, maxLabel){
  var ge, height, maxValStr, minValStr, topOffset, txtBnds, valueFont, width_0, xOffset;
  xOffset = bnds.width_0 * 0.22;
  topOffset = bnds.width_0 * 0.83;
  height = bnds.width_0 * 0.08;
  width_0 = bnds.width_0 * 0.5 - xOffset;
  if (height >= 16) {
    minValStr = $formatNumber_1(this$static.graph.numberFormatter, minValue);
    maxValStr = $formatNumber_1(this$static.graph.numberFormatter, maxValue);
    valueFont = new CFFont_0(null, 30, new CFColor_2('#BCBCBC'));
    txtBnds = new CFRect(bnds.x_0 + xOffset, bnds.y_0 + topOffset, width_0, height);
    ge = null;
    if ((minValue != 0 || !this$static.graph.typeAttributes.isFilledGauge) && !this$static.hideMinVal) {
      ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, minValStr, valueFont, 0, VALIGN_MIDDLE, 5, null, null));
      $addGraphicElement_0(this$static.graph, ge);
    }
    if (!this$static.hideMaxVal) {
      txtBnds = new CFRect(bnds.x_0 + bnds.width_0 - (xOffset + width_0), bnds.y_0 + topOffset, width_0, height);
      ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, maxValStr, valueFont, HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
      $addGraphicElement_0(this$static.graph, ge);
    }
    if (maxLabel != null) {
      txtBnds = new CFRect(bnds.x_0, bnds.y_0 + topOffset + $getLineHeight(castTo($get_2(ge.textAry, 0), 26).font_0, rnd), txtBnds.x_0 + txtBnds.width_0 - bnds.x_0, height);
      ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, maxLabel, castTo($get_2(ge.textAry, 0), 26).font_0, HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
      $addGraphicElement_0(this$static.graph, ge);
    }
  }
}

function $drawOuterGoal(this$static, bnds, minVal, maxVal, goalVal){
  var goalDegreePosition, hoverText, labelPoint, path, points, ringWidth, shape_0;
  goalDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (goalVal - minVal) / (maxVal - minVal) * 270)));
  ringWidth = bnds.width_0 * 0.06;
  points = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  points[0] = $getPointOnCircle(bnds, bnds.width_0 / 2 + 2, -goalDegreePosition);
  points[1] = $getPointOnCircle(bnds, bnds.width_0 / 2 + (2 + ringWidth), -goalDegreePosition + 2.5);
  points[2] = $getPointOnCircle(bnds, bnds.width_0 / 2 + (2 + ringWidth), -goalDegreePosition - 2.5);
  labelPoint = $getPointOnCircle(bnds, bnds.width_0 / 2 + (2 + ringWidth), -goalDegreePosition);
  path = new CFPath_13(points, true);
  shape_0 = new CFShape_0(path, new CFFill_1('#AAAAAA'), null);
  !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
  hoverText = null;
  if (!this$static.hideHoverText) {
    hoverText = this$static.graph.getLocalizedString('TARGET') + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, goalVal);
    shape_0.hoverText = hoverText;
  }
  shape_0.drillFilter = '{"filters":[]}';
  $addShapeToGraphWithData(this$static, shape_0, new HoverInfo(hoverText, labelPoint));
}

function $drawOuterRange(this$static, bnds, minVal, maxVal, rngMin, rngMax){
  var hoverText, innerDiameter, labelPoint, max_0, maxDegreePosition, midDegreePosition, min_0, minDegreePosition, outerRing, path;
  min_0 = rngMin;
  max_0 = rngMax;
  if (rngMin > rngMax) {
    min_0 = rngMax;
    max_0 = rngMin;
  }
  minDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (min_0 - minVal) / (maxVal - minVal) * 270)));
  maxDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (max_0 - minVal) / (maxVal - minVal) * 270)));
  midDegreePosition = minDegreePosition + (maxDegreePosition - minDegreePosition) / 2;
  innerDiameter = toDouble_0(fromDouble_0($wnd.Math.round(bnds.width_0 * 0.88)));
  path = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2, innerDiameter / 2, -minDegreePosition, -maxDegreePosition);
  outerRing = new CFShape_0(path, new CFFill_1('#BDBDBD'), null);
  $addShapeToGraph(this$static, outerRing);
  labelPoint = $getPointOnCircle(bnds, bnds.width_0 / 2, -midDegreePosition);
  hoverText = null;
  if (!this$static.hideHoverText) {
    hoverText = this$static.graph.getLocalizedString('LOWER_RANGE') + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, rngMin);
    hoverText += '\n' + this$static.graph.getLocalizedString('UPPER_RANGE') + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, rngMax);
    outerRing.hoverText = hoverText;
  }
  outerRing.drillFilter = '{"filters":[]}';
  $addShapeToGraphWithData(this$static, outerRing, new HoverInfo(hoverText, labelPoint));
}

function $drawOuterRangeMedianLine(this$static, bnds, minVal, maxVal, medianVal){
  var hoverPath, hoverShape, hoverText, innerPoint, medianDegreePosition, medianLine, outerPoint, pathStr, pt1, pt2, pt3, pt4, radius, ringWidth, shape_0;
  medianDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (medianVal - minVal) / (maxVal - minVal) * 270)));
  radius = bnds.width_0 / 2;
  ringWidth = bnds.width_0 * 0.06;
  innerPoint = $getPointOnCircle(bnds, radius - ringWidth + 1, -medianDegreePosition);
  outerPoint = $getPointOnCircle(bnds, radius + ringWidth + 2, -medianDegreePosition);
  pt1 = $getPointOnCircle(bnds, radius - ringWidth + 1, -medianDegreePosition - 1);
  pt2 = $getPointOnCircle(bnds, radius + ringWidth + 2, -medianDegreePosition - 1);
  pt3 = $getPointOnCircle(bnds, radius + ringWidth + 2, -medianDegreePosition + 1);
  pt4 = $getPointOnCircle(bnds, radius - ringWidth + 1, -medianDegreePosition + 1);
  medianLine = new CFPath_1(innerPoint.x_0, innerPoint.y_0, outerPoint.x_0, outerPoint.y_0);
  shape_0 = new CFShape_0(medianLine, null, new CFStroke_1('#AAAAAA', 2));
  !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
  $addShapeToGraph(this$static, shape_0);
  hoverText = null;
  this$static.hideHoverText || (hoverText = this$static.graph.getLocalizedString('MEDIAN') + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, medianVal));
  pathStr = 'M ' + pt1.x_0 + ' ' + pt1.y_0 + ' L ' + pt2.x_0 + ' ' + pt2.y_0 + ' L ' + pt3.x_0 + ' ' + pt3.y_0 + ' L ' + pt4.x_0 + ' ' + pt4.y_0 + ' Z';
  hoverPath = new CFPath_7(pathStr);
  hoverShape = new CFShape_0(hoverPath, ($clinit_CFFill() , TRANSPARENT_0), null);
  this$static.hideHoverText || (hoverShape.hoverText = hoverText);
  hoverShape.drillFilter = '{"filters":[]}';
  $addShapeToGraphWithData(this$static, hoverShape, new HoverInfo(hoverText, outerPoint));
}

function $drawOuterRing(this$static, bnds){
  var innerDiameter, outerRing, path;
  innerDiameter = toDouble_0(fromDouble_0($wnd.Math.round(bnds.width_0 * 0.88)));
  path = $getDonutWedge(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0 / 2, bnds.width_0 / 2, innerDiameter / 2, -225, 45);
  outerRing = new CFShape_0(path, new CFFill_1('#F1F0F0'), null);
  $addShapeToGraph(this$static, outerRing);
}

function $drawTargetLine(this$static, bnds, minVal, maxVal, medianVal, colorStr){
  var ge, innerPoint, medianDegreePosition, medianLine, outerPoint, radius, ringWidth, shape_0;
  medianDegreePosition = toDouble_0(fromDouble_0($wnd.Math.round(225 - (medianVal - minVal) / (maxVal - minVal) * 270)));
  radius = bnds.width_0 / 2;
  ringWidth = bnds.width_0 * 0.15;
  innerPoint = $getPointOnCircle(bnds, radius - ringWidth + 1, -medianDegreePosition);
  outerPoint = $getPointOnCircle(bnds, radius + ringWidth / 4, -medianDegreePosition);
  medianLine = new CFPath_1(innerPoint.x_0, innerPoint.y_0, outerPoint.x_0, outerPoint.y_0);
  medianLine.shouldAntiAlias = true;
  shape_0 = new CFShape_0(medianLine, null, new CFStroke_1(colorStr, 2));
  ge = new GraphicElement;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, shape_0);
  $addFrontGraphicElement_0(this$static.graph, ge);
}

function $drawValue(this$static, rnd, bnds, percentValue, prevValue, color_0){
  var ge, height, leftOffset, percValStr, topOffset, txtBnds, valueFont, width_0;
  if (prevValue != 0) {
    leftOffset = bnds.width_0 * 0.3;
    topOffset = bnds.width_0 * 0.4;
    height = bnds.width_0 * 0.3;
    width_0 = bnds.width_0 * 0.5;
    percValStr = $formatNumber_1(this$static.graph.numberFormatter, percentValue);
    txtBnds = new CFRect(bnds.x_0 + leftOffset, bnds.y_0 + topOffset, width_0, height);
    valueFont = new CFFont_0(null, 100, color_0);
    ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, percValStr + '%', valueFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $drawValueNonFilled(this$static, rnd, valueBnds, percentValue, prevValue, curValue, color_0){
  var ge, hoverPath, hoverShape, hoverText, labelPoint, valStr, valueFont;
  valStr = $getValuesStrForGauge(this$static, percentValue, prevValue, curValue);
  valueFont = new CFFont_0(null, 300, color_0);
  ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, valueBnds, valStr, valueFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, ge);
  hoverText = null;
  if (!this$static.hideHoverText) {
    hoverText = $getParentDisplayName($getRow(this$static.graph.data_0, 0)) + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, prevValue);
    hoverText += '\n' + $getName($getColumn(this$static.graph.data_0, 0)) + ' : ' + $formatNumber_1(this$static.graph.hoverNumberFormatter, curValue);
  }
  hoverPath = new CFPath_3(valueBnds);
  hoverShape = new CFShape_0(hoverPath, ($clinit_CFFill() , TRANSPARENT_0), null);
  this$static.hideHoverText || (hoverShape.hoverText = hoverText);
  hoverShape.drillFilter = '{"filters":[]}';
  labelPoint = new CFPoint(valueBnds.x_0 + valueBnds.width_0 / 2, valueBnds.y_0 + valueBnds.height_0 * $intern_16);
  $addShapeToGraphWithData(this$static, hoverShape, new HoverInfo(hoverText, labelPoint));
}

function $getArrowRect(this$static, valueBnds){
  var height, width_0, x_0, y_0;
  height = toDouble_0(fromDouble_0($wnd.Math.round(valueBnds.height_0 * 0.35)));
  width_0 = toDouble_0(fromDouble_0($wnd.Math.round(height * 1.65)));
  y_0 = toDouble_0(fromDouble_0($wnd.Math.round(valueBnds.y_0 + valueBnds.height_0 * 0.38)));
  x_0 = toDouble_0(fromDouble_0($wnd.Math.round(valueBnds.x_0 - (width_0 + width_0 * 0.2))));
  if (this$static.arrowStyle == 1) {
    width_0 = toDouble_0(fromDouble_0($wnd.Math.round(height)));
    y_0 += 1;
  }
   else if (this$static.arrowStyle == 2) {
    height = toDouble_0(fromDouble_0($wnd.Math.round(valueBnds.height_0 * 0.5)));
    width_0 = height;
    y_0 = valueBnds.y_0 + height * 0.55 - 1;
    x_0 = toDouble_0(fromDouble_0($wnd.Math.round(valueBnds.x_0 - (height + height * 0.5))));
  }
  return new CFRect(x_0, y_0, width_0, height);
}

function $getArrowStyle(value_0){
  if (value_0 != null) {
    if ($equalsIgnoreCase(value_0, 'Arrow'))
      return 2;
    else if ($equalsIgnoreCase(value_0, 'Triangle'))
      return 1;
  }
  return 0;
}

function $getColorForFilledGauge(this$static, curValue, targetValue){
  var color_0, conditionalColor, greenColor, ovrColor, redColor;
  greenColor = $getColor(this$static.graph, 'FilledGaugeGreen', '#80C25D');
  redColor = $getColor(this$static.graph, 'FilledGaugeRed', '#C92E25');
  color_0 = greenColor;
  this$static.colorSource != null && ($startsWith(this$static.colorSource, 'green below') && !isNaN(targetValue)?curValue < targetValue?(color_0 = greenColor):(color_0 = redColor):$startsWith(this$static.colorSource, 'green above') && !isNaN(targetValue) && (curValue < targetValue?(color_0 = redColor):(color_0 = greenColor)));
  ovrColor = null;
  this$static.overrideColor != null && (ovrColor = $getColorForName(this$static.graph.colorMgr, this$static.overrideColor));
  !!ovrColor && (color_0 = ovrColor);
  if (!isNaN(curValue)) {
    if (this$static.graph.colorMgr.conditionalColors) {
      conditionalColor = $getColorForValueAndColumnName(this$static.graph, curValue, $getColumn(this$static.graph.data_0, 0).name_0, $getColumn(this$static.graph.data_0, 0).name_0);
      !!conditionalColor && (color_0 = conditionalColor);
    }
  }
  return color_0;
}

function $getColors(this$static, percentValue){
  var color_0;
  color_0 = this$static.GREEN_COLOR;
  percentValue < 0 && (color_0 = this$static.RED_COLOR);
  this$static.reverseColorDir && (color_0 == this$static.GREEN_COLOR?(color_0 = this$static.RED_COLOR):(color_0 = this$static.GREEN_COLOR));
  return color_0 == this$static.GREEN_COLOR?this$static.isUsedAsSubGraph?new CompGaugeColors(this$static.POSITIVE_COLOR, this$static.POSITIVE_COLOR, this$static.POSITIVE_COLOR):new CompGaugeColors(this$static.GREEN_LIGHT_COLOR, this$static.GREEN_COLOR, this$static.GREEN_ARROW_COLOR):this$static.isUsedAsSubGraph?new CompGaugeColors(this$static.NEGATIVE_COLOR, this$static.NEGATIVE_COLOR, this$static.NEGATIVE_COLOR):new CompGaugeColors(this$static.RED_LIGHT_COLOR, this$static.RED_COLOR, this$static.RED_ARROW_COLOR);
}

function $getDonutWedge(centerX, centerY, radius, innerRadius, startAngle, endAngle){
  var counterClockwise, innerRect, nextStartPoint, outerRect, path, startPoint;
  path = new CFPath;
  innerRect = new CFRect(centerX - innerRadius, centerY - innerRadius, innerRadius * 2, innerRadius * 2);
  outerRect = new CFRect(centerX - radius, centerY - radius, radius * 2, radius * 2);
  counterClockwise = endAngle >= startAngle;
  startPoint = $getPointOnCircle(innerRect, innerRadius, endAngle);
  $add(path, new CFPathElement_0(0, startPoint.x_0, startPoint.y_0));
  $add(path, new CFPathArcElement_0(centerX, centerY, innerRadius, endAngle, startAngle, counterClockwise));
  nextStartPoint = $getPointOnCircle(outerRect, radius, startAngle);
  $add(path, new CFPathElement_0(1, nextStartPoint.x_0, nextStartPoint.y_0));
  $add(path, new CFPathArcElement_0(centerX, centerY, radius, startAngle, endAngle, !counterClockwise));
  $add(path, new CFPathElement_0(1, startPoint.x_0, startPoint.y_0));
  $add(path, new CFPathElement_0(4, 0, 0));
  return path;
}

function $getDrillFilterForFilledGauge(this$static){
  var curFilter, drillFilter, filterBase, selRow;
  curFilter = '{"filters":[]}';
  selRow = null;
  this$static.displayVal != null && ($equals_2(this$static.displayVal, 'minimum')?(selRow = $getMinRow($getColumn(this$static.graph.data_0, 0), false)):$equals_2(this$static.displayVal, 'maximum')?(selRow = $getMaxRow($getColumn(this$static.graph.data_0, 0), false)):$equals_2(this$static.displayVal, 'first row')?(selRow = $getFirstCell($getColumn(this$static.graph.data_0, 0)).row):$equals_2(this$static.displayVal, 'last row') && (selRow = $getLastCell($getColumn(this$static.graph.data_0, 0)).row));
  if (selRow) {
    filterBase = new FilterBase(selRow.parentName, 'EQUALS', selRow);
    $addValue(filterBase, selRow.name_0);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    drillFilter = getDrillFilterFromValues(filterBase);
    curFilter = '{"filters":[' + drillFilter + ']}';
  }
  return curFilter;
}

function $getOuterBoundsForFilledGauge(this$static){
  var diameter, left, top_0, topOffset;
  diameter = this$static.graph.bnds.width_0;
  this$static.bnds.width_0 > this$static.bnds.height_0 && (diameter = this$static.bnds.height_0);
  if (this$static.bnds.width_0 == 199 && this$static.bnds.height_0 == 115) {
    diameter = toDouble_0(fromDouble_0($wnd.Math.round(diameter * 0.98)));
    topOffset = diameter * 0.09;
  }
   else {
    diameter = toDouble_0(fromDouble_0($wnd.Math.round(diameter * 0.85)));
    topOffset = diameter * 0.1;
  }
  left = toDouble_0(fromDouble_0($wnd.Math.round(this$static.bnds.x_0 + (this$static.bnds.width_0 - diameter) / 2)));
  top_0 = toDouble_0(fromDouble_0($wnd.Math.round(this$static.bnds.y_0 + (this$static.bnds.height_0 - diameter) / 2)));
  this$static.bnds = new CFRect(left, top_0, diameter, diameter);
  this$static.outerBnds = new CFRect(left, top_0 + topOffset, diameter, diameter);
}

function $getPointOnCircle(bnds, radius, angle){
  var bndsRadius, x_0, y_0;
  bndsRadius = bnds.width_0 / 2;
  x_0 = bnds.x_0 + bndsRadius + radius * $wnd.Math.cos(angle * $intern_1 / 180);
  y_0 = bnds.y_0 + bndsRadius + radius * $wnd.Math.sin(angle * $intern_1 / 180);
  return new CFPoint(x_0, y_0);
}

function $getValueBoundingRectNonFilled(this$static, bnds){
  var bndsWidth, extraLeftOffset, height, leftOffset, topOffset, width_0, x_0, y_0;
  bndsWidth = bnds.width_0;
  extraLeftOffset = 0;
  if (bndsWidth > bnds.height_0 * 2) {
    bndsWidth = bnds.height_0 * 2;
    extraLeftOffset = (bnds.width_0 - bndsWidth) / 2;
  }
  height = bndsWidth * 0.35;
  width_0 = toDouble_0(fromDouble_0($wnd.Math.round(bndsWidth * 0.72)));
  leftOffset = bndsWidth * 0.265 + extraLeftOffset;
  if (bndsWidth > 500) {
    height = bndsWidth * $intern_16;
    width_0 = toDouble_0(fromDouble_0($wnd.Math.round(bndsWidth * 0.6)));
    leftOffset = bndsWidth * 0.3 + extraLeftOffset;
  }
  this$static.graph.bnds.width_0 == 199 && this$static.graph.bnds.height_0 == 115 && !this$static.showLabelNonFilled?(topOffset = -8):(topOffset = toDouble_0(fromDouble_0($wnd.Math.round((bnds.height_0 - height) / 2))));
  this$static.graph.bnds.width_0 == 434 && this$static.graph.bnds.height_0 == 395 && (topOffset -= 40);
  x_0 = bnds.x_0 + leftOffset;
  y_0 = bnds.y_0 + topOffset;
  return new CFRect(x_0, y_0, width_0, height);
}

function $getValueForFilledGauge(this$static, colNum){
  var curValue, metaSize, values, values0;
  metaSize = $getMetaDataSize(this$static.graph.data_0);
  if (metaSize == 1 && colNum == 1 || metaSize > 1) {
    metaSize == 1 && (colNum = 0);
    curValue = $getMetaDataCellSum($getColumn(this$static.graph.data_0, 0), colNum);
    this$static.displayVal != null && ($equals_2(this$static.displayVal, 'average')?(curValue = $getMetaDataCellSum($getColumn(this$static.graph.data_0, 0), colNum) / $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'minimum')?(curValue = $getMetaDataCellMinValue($getColumn(this$static.graph.data_0, 0), colNum)):$equals_2(this$static.displayVal, 'maximum')?(curValue = $getMetaDataCellMaxValue($getColumn(this$static.graph.data_0, 0), colNum)):$equals_2(this$static.displayVal, 'count')?(curValue = $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'first row')?(curValue = $getValue($getMetaDataCell($getFirstCell($getColumn(this$static.graph.data_0, colNum)), colNum))):$equals_2(this$static.displayVal, 'last row') && (curValue = $getValue($getMetaDataCell($getLastCell($getColumn(this$static.graph.data_0, colNum)), colNum))));
  }
   else {
    curValue = $getSum($getColumn(this$static.graph.data_0, colNum));
    this$static.displayVal != null && ($equals_2(this$static.displayVal, 'average')?(curValue = $getSum($getColumn(this$static.graph.data_0, colNum)) / $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'minimum')?(curValue = (values0 = $getValuesNonProjected($getColumn(this$static.graph.data_0, colNum), true, false) , getMinValueForValues(values0))):$equals_2(this$static.displayVal, 'maximum')?(curValue = (values = $getValuesNonProjected($getColumn(this$static.graph.data_0, colNum), true, false) , getMaxValueForValues(values))):$equals_2(this$static.displayVal, 'count')?(curValue = $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'first row')?(curValue = $getValue($getFirstCell($getColumn(this$static.graph.data_0, colNum)))):$equals_2(this$static.displayVal, 'last row') && (curValue = $getValue($getLastCell($getColumn(this$static.graph.data_0, colNum)))));
  }
  return curValue;
}

function $getValuesStrForGauge(this$static, percentValue, prevValue, curValue){
  var percentFormatter, valStr;
  percentFormatter = new NumberFormatter_0(this$static.graph.numberFormatter);
  $applyValueFormatOverride(percentFormatter, 'Percentage');
  valStr = $formatNumber_1(percentFormatter, percentValue);
  prevValue == 0 || $equals_2(this$static.displayVal, 'value change')?(valStr = $formatNumber_1(this$static.graph.numberFormatter, curValue - prevValue)):$equals_2(this$static.displayVal, 'current value') && (valStr = $formatNumber_1(this$static.graph.numberFormatter, curValue));
  return valStr;
}

function $setHoverEffects_2(this$static, hoverData, rnd){
  var hi;
  if (hoverData != null && instanceOf(hoverData, 89) && castTo(hoverData, 89).text_0 != null && !this$static.hideHoverText) {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
    hi = castTo(hoverData, 89);
    $getOrCreateHoverLabel(this$static.graph);
    $setHoverPoint(this$static.graph, hi.point);
    $addPrimary_2(this$static.graph.hoverLabel, rnd, hi.text_0, hi.point, hi.position, false);
  }
   else {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
  }
  return true;
}

function $setupAnimation(this$static){
  if (this$static.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this$static.graph, this$static.graph.seriesShapes);
    this$static.graph.seriesShapes = new ArrayList;
  }
  this$static.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $add_1(this$static.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
}

function HandlerCompGauge(){
}

function getPercentValue(prevValue, curValue){
  var percentValue;
  percentValue = (curValue / prevValue - 1) * 100;
  curValue > prevValue && percentValue < 0 && (percentValue *= -1);
  curValue < prevValue && percentValue > 0 && (percentValue *= -1);
  return percentValue;
}

defineClass(100, 118, {100:1}, HandlerCompGauge);
_.format_0 = function format_8(rnd){
  var dataCell, prevValue, curValue, label_0, percentValue, arrowIsUp, colors, ovrPositiveClr, ovrNegativeClr, color_0, ovrColor, valueRect, arrowWidth, x_0, width_0, height, y_0, txtBnds, labelFont, ge;
  $sortRows(this.graph.data_0, 0);
  this.bnds = this.graph.bnds;
  this.GREEN_LIGHT_COLOR = $getColor(this.graph, 'CompGaugeLtGreen', '#D8F3DE');
  this.GREEN_COLOR = $getColor(this.graph, 'CompGaugeDkGreen', '#69BEA8');
  this.GREEN_ARROW_COLOR = $getColor(this.graph, 'CompGaugeArrowGreen', '#69BEA8');
  this.RED_LIGHT_COLOR = $getColor(this.graph, 'CompGaugeLtRed', '#FDDDDD');
  this.RED_COLOR = $getColor(this.graph, 'CompGaugeDkRed', '#E4584F');
  this.RED_ARROW_COLOR = $getColor(this.graph, 'CompGaugeArrowRed', 'FD7F76');
  this.POSITIVE_COLOR = $getColor(this.graph, 'PositiveColor', '#559E38');
  this.NEGATIVE_COLOR = $getColor(this.graph, 'NegativeColor', '#C92E25');
  if (this.graph.typeAttributes.isAdvancedCompGauge) {
    this.GOAL = 5;
    this.isUsedAsSubGraph || $setUse3digitFormat(this.graph.numberFormatter);
    $getOuterBoundsForFilledGauge(this);
    $drawComparativeFillAdvanced(this, rnd);
  }
   else if (this.graph.typeAttributes.isCompNoFillGauge) {
    this.isUsedAsSubGraph || $setUse3digitFormat(this.graph.numberFormatter);
    dataCell = $getFirstCell($getColumn(this.graph.data_0, 0));
    prevValue = getDouble_0($getName(dataCell.row), 0);
    curValue = $getValue(dataCell);
    label_0 = $getName(dataCell.column);
    percentValue = getPercentValue(prevValue, curValue);
    arrowIsUp = percentValue >= 0;
    colors = $getColors(this, percentValue);
    ovrPositiveClr = $getColorForName(this.graph.colorMgr, this.overridePositiveColor);
    ovrNegativeClr = $getColorForName(this.graph.colorMgr, this.overrideNegativeColor);
    color_0 = colors.arrowClr;
    ovrColor = null;
    this.overrideColor != null && (ovrColor = $getColorForName(this.graph.colorMgr, this.overrideColor));
    !!ovrColor && (color_0 = ovrColor);
    !!ovrPositiveClr && (percentValue >= 0 && !this.reverseColorDir || percentValue < 0 && this.reverseColorDir)?(color_0 = ovrPositiveClr):!!ovrNegativeClr && (percentValue < 0 && !this.reverseColorDir || percentValue >= 0 && this.reverseColorDir) && (color_0 = ovrNegativeClr);
    $addBackgroundDrillShape(this);
    valueRect = $getValueBoundingRectNonFilled(this, this.bnds);
    this.useAllAvailableSpace && (valueRect = $duplicate_5(this.bnds));
    this.showLabelNonFilled && (arrowWidth = toDouble_0(fromDouble_0($wnd.Math.round(valueRect.height_0 * 0.35 * 1.65))) , x_0 = valueRect.x_0 - (arrowWidth + arrowWidth * 0.2) , width_0 = toDouble_0(fromDouble_0($wnd.Math.round(valueRect.width_0 + arrowWidth + arrowWidth * 0.2))) , height = width_0 * 0.23 , y_0 = toDouble_0(fromDouble_0($wnd.Math.round(valueRect.y_0 - height / 2 + height * 0.05))) , $setY_0(valueRect, valueRect.y_0 + height / 2 - height * 0.1) , txtBnds = new CFRect(x_0, y_0, width_0, height) , labelFont = new CFFont_0(null, 150, new CFColor_2('#818181')) , ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, label_0, labelFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null)) , $addGraphicElement_0(this.graph, ge) , undefined);
    $drawValueNonFilled(this, rnd, valueRect, percentValue, prevValue, curValue, color_0);
    $drawArrowNonFilled(this, valueRect, arrowIsUp, color_0);
  }
   else if (this.graph.typeAttributes.isFilledGauge) {
    $getOuterBoundsForFilledGauge(this);
    $drawFilledGauge(this, rnd);
  }
   else {
    this.isUsedAsSubGraph || $setUse3digitFormat(this.graph.numberFormatter);
    $getOuterBoundsForFilledGauge(this);
    $drawComparativeFillBasic(this, rnd);
  }
  this.graph.setNeedsFormat(false);
}
;
_.freeResources = function freeResources_18(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.GREEN_LIGHT_COLOR = null;
  this.GREEN_COLOR = null;
  this.GREEN_ARROW_COLOR = null;
  this.RED_LIGHT_COLOR = null;
  this.RED_LIGHT_COLOR = null;
  this.RED_COLOR = null;
  this.RED_ARROW_COLOR = null;
  this.POSITIVE_COLOR = null;
  this.NEGATIVE_COLOR = null;
  this.overrideColor = null;
  this.overridePositiveColor = null;
  this.overrideNegativeColor = null;
  this.bnds = null;
  this.outerBnds = null;
  this.displayVal = null;
  this.colorSource = null;
  this.valueLabel = null;
  this.targetLabel = null;
  this.maxLabel = null;
}
;
_.processChartOptions = function processChartOptions_11(){
  var key, key$iterator, value_0;
  this.reverseColorDir = false;
  this.overrideBaseColor = null;
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'color_direction':
          $startsWith(value_0.toLowerCase(), 'negative') && (this.reverseColorDir = true);
          break;
        case 'reverse_color_dir':
          this.reverseColorDir = isTrue(value_0);
          break;
        case 'gauge_val_fmt':
        case 'change_value_format':
          $applyValueFormatOverride(this.graph.numberFormatter, value_0);
          $setMultiplyBy100(this.graph.numberFormatter, false);
          break;
        case 'gauge_val_displayed':
        case 'value_type':
        case 'comp_val_displayed':
          this.displayVal = value_0.toLowerCase();
          break;
        case 'gauge_show_label':
          this.showLabelNonFilled = isTrue(value_0);
          break;
        case 'fill_color':
        case 'override_fill_color':
          this.overrideColor = value_0;
          break;
        case 'target_line_color':
          this.overrideTargetLineColor = value_0;
          break;
        case 'base_fill_color':
          this.overrideBaseColor = value_0;
          break;
        case 'min_value':
          this.minOverride = checkNotNull(getDouble(value_0));
          break;
        case 'max_value':
          this.maxOverride = checkNotNull(getDouble(value_0));
          break;
        case 'target_value':
          this.targetOverride = checkNotNull(getDouble(value_0));
          break;
        case 'color_source':
          this.colorSource = value_0.toLowerCase();
          break;
        case 'up_fill_color':
          this.overridePositiveColor = value_0;
          break;
        case 'down_fill_color':
          this.overrideNegativeColor = value_0;
          break;
        case 'value_label':
          this.valueLabel = ($clinit_StrUtil() , entityDecodeString(value_0));
          break;
        case 'target_label':
          this.targetLabel = ($clinit_StrUtil() , entityDecodeString(value_0));
          break;
        case 'max_label':
          this.maxLabel = ($clinit_StrUtil() , entityDecodeString(value_0));
          break;
        case 'hide_min_value':
          this.hideMinVal = isTrue(value_0);
          break;
        case 'hide_max_value':
          this.hideMaxVal = isTrue(value_0);
          break;
        case 'direction_indicator':
          this.arrowStyle = $getArrowStyle(value_0);
          break;
        case 'hide_hover_text':
          this.hideHoverText = isTrue(value_0);
      }
    }
  }
}
;
_.setData = function setData_11(data_0){
  var columnOrder, columnOrder_0, columnOrder_1, columnOrder_2, columnOrder_3;
  if (data_0) {
    if (data_0.orderedColumnList) {
      columnOrder = this.graph.typeAttributes.isAdvancedCompGauge?(columnOrder_0 = new ArrayList , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'MIN'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'MAX'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'PREVIOUS'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'CURRENT'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'LOWER'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'UPPER'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'MEDIAN'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'TARGET'))) , columnOrder_0):this.graph.typeAttributes.isCompNoFillGauge?(columnOrder_1 = new ArrayList , $add_1(columnOrder_1, valueOf($getColumnIndexForMappedName(data_0, 'PREVIOUS'))) , $add_1(columnOrder_1, valueOf($getColumnIndexForMappedName(data_0, 'CURRENT'))) , columnOrder_1):this.graph.typeAttributes.isFilledGauge?(columnOrder_2 = new ArrayList , $add_1(columnOrder_2, valueOf($getColumnIndexForMappedName(data_0, 'CATEGORY'))) , $add_1(columnOrder_2, valueOf($getColumnIndexForMappedName(data_0, 'CURRENT'))) , $add_1(columnOrder_2, valueOf($getColumnIndexForMappedName(data_0, 'TARGET'))) , columnOrder_2):(columnOrder_3 = new ArrayList , $add_1(columnOrder_3, valueOf($getColumnIndexForMappedName(data_0, 'MIN'))) , $add_1(columnOrder_3, valueOf($getColumnIndexForMappedName(data_0, 'MAX'))) , $add_1(columnOrder_3, valueOf($getColumnIndexForMappedName(data_0, 'PREVIOUS'))) , $add_1(columnOrder_3, valueOf($getColumnIndexForMappedName(data_0, 'CURRENT'))) , $add_1(columnOrder_3, valueOf($getColumnIndexForMappedName(data_0, 'TARGET'))) , columnOrder_3);
      data_0 = $transformOrderedColumnToNoGroupItemValue(data_0, columnOrder, false);
      !!this.graph.data_0 && this.graph.data_0 != data_0 && $freeResources_11(this.graph.data_0);
      this.graph.data_0 = data_0;
    }
  }
}
;
_.setFrame = function setFrame_7(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, ge, pctComplete, srsInfo;
  easingType = 'circleInOut';
  if (!!this.graph.seriesShapes && this.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList) {
    srsInfo = castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 165);
    animInfo = new AnimInfoSrs(startTime, endTime, easingType);
    pctComplete = $getPercentComplete(animInfo, curTime);
    if (this.graph.typeAttributes.isFilledGauge) {
      if (this.graph.backGeAry.array.length > 1) {
        ge = castTo($get_2(this.graph.backGeAry, this.graph.backGeAry.array.length - 1), 12);
        $remove_3(this.graph.backGeAry, ge);
      }
    }
     else 
      (this.graph.typeAttributes.isAdvancedCompGauge || !this.graph.typeAttributes.isCompNoFillGauge) && this.graph.frontGeAry.clear_0();
    $draw_5(srsInfo, pctComplete);
  }
}
;
_.setHoverData = function setHoverData_13(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_2(this, this.hoverData, rnd);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_4(hoverData, rnd){
  return $setHoverEffects_2(this, hoverData, rnd);
}
;
_.CUR_VAL = 1;
_.GOAL = 2;
_.GREEN_ARROW_COLOR = null;
_.GREEN_COLOR = null;
_.GREEN_LIGHT_COLOR = null;
_.LOWER_RNG = 2;
_.MEDIAN = 4;
_.NEGATIVE_COLOR = null;
_.POSITIVE_COLOR = null;
_.RED_ARROW_COLOR = null;
_.RED_COLOR = null;
_.RED_LIGHT_COLOR = null;
_.UPPER_RNG = 3;
_.arrowStyle = 0;
_.bnds = null;
_.colorSource = '';
_.displayVal = '';
_.hideHoverText = false;
_.hideMaxVal = false;
_.hideMinVal = false;
_.isUsedAsSubGraph = false;
_.maxOverride = NaN;
_.minOverride = NaN;
_.outerBnds = null;
_.reverseColorDir = false;
_.showLabelNonFilled = false;
_.targetOverride = NaN;
_.useAllAvailableSpace = false;
var Lcom_domo_charting_graphs_HandlerCompGauge_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerCompGauge', 100);
function $addPresetDataRow(this$static, text_0, dateRange, slicerRows){
  var dataRow;
  dataRow = new ColRowInfo_2(text_0, 'STRING');
  this$static.selectedPreset != null && $equals_2(text_0, this$static.selectedPreset)?(dataRow.showAsFiltered = false):(dataRow.showAsFiltered = true);
  slicerRows.array[slicerRows.array.length] = dataRow;
  dateRange.maxTimeMS = add_1(dateRange.maxTimeMS, $intern_40);
  $putStringValue(this$static.timeRangeMap, text_0, dateRange);
}

function $dateSelClickOnDate(this$static, selDate){
  var curSelTimeMS, endTimeMS, filter, startTimeMS;
  this$static.selectedPreset = null;
  $removeChartOption(this$static.graph, 'row_filter');
  this$static.graph.drillFilter = 'none';
  if (!this$static.dateSelStartDate) {
    this$static.dateSelStartDate = new Date_4(fromDouble_0(selDate.jsdate.getTime()));
  }
   else {
    if (this$static.dateSelEndDate) {
      this$static.dateSelStartDate = null;
      this$static.dateSelEndDate = null;
    }
     else {
      startTimeMS = fromDouble_0(this$static.dateSelStartDate.jsdate.getTime());
      curSelTimeMS = fromDouble_0(selDate.jsdate.getTime());
      compare_22(startTimeMS, curSelTimeMS) == 0?(this$static.dateSelStartDate = null):(this$static.dateSelEndDate = new Date_4(fromDouble_0(selDate.jsdate.getTime())));
    }
  }
  if (!!this$static.dateSelStartDate && !!this$static.dateSelEndDate) {
    startTimeMS = fromDouble_0(this$static.dateSelStartDate.jsdate.getTime());
    endTimeMS = fromDouble_0(this$static.dateSelEndDate.jsdate.getTime());
    if (compare_22(startTimeMS, endTimeMS) > 0) {
      this$static.dateSelStartDate = new Date_4(endTimeMS);
      this$static.dateSelEndDate = new Date_4(startTimeMS);
    }
  }
  filter = $getCurFilterString(this$static);
  if (filter != null) {
    $addChartOption(this$static.graph, 'row_filter', filter);
    $setDrillFilter(this$static.graph, filter);
  }
}

function $dateSelClickOnPreset(this$static, timeRange){
  var filter;
  $removeChartOption(this$static.graph, 'row_filter');
  this$static.graph.drillFilter = 'none';
  this$static.dateSelStartDate = new Date_4(timeRange.minTimeMS);
  this$static.dateSelEndDate = new Date_4(timeRange.maxTimeMS);
  filter = $getCurFilterString(this$static);
  if (filter != null) {
    $addChartOption(this$static.graph, 'row_filter', filter);
    $setDrillFilter(this$static.graph, filter);
  }
}

function $drawHeader(this$static, rnd){
  var dateStr, ge, geDate, hdrBnds, i, left, presetDim, presetHoverRect, presetHoverShape, toggleText;
  hdrBnds = $duplicate_5(this$static.graph.bnds);
  $setHeight(hdrBnds, this$static.headerHeight);
  hdrBnds.width_0 = hdrBnds.width_0 + -20;
  hdrBnds.x_0 -= -10;
  if (!!this$static.dateSelStartDate && !this$static.viewingPresets) {
    dateStr = FormatDate(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), 'MM/dd/yy', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    !!this$static.dateSelEndDate && neq(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), fromDouble_0(this$static.dateSelEndDate.jsdate.getTime())) && (dateStr += ' - ' + FormatDate(fromDouble_0(this$static.dateSelEndDate.jsdate.getTime()), 'MM/dd/yy', this$static.graph.chart.locale, this$static.graph.chart.timeZone));
    geDate = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, hdrBnds, dateStr, this$static.dateRangeFont, 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geDate);
  }
  if ($usingCardBus(this$static.graph.chart) && !this$static.graph.chart.staticImage) {
    toggleText = this$static.graph.getLocalizedString('DATE_SEL_PRESETS');
    !!this$static.dateSelStartDate && (toggleText = this$static.graph.getLocalizedString('DATE_SEL_CLEAR'));
    this$static.viewingPresets && (toggleText = this$static.graph.getLocalizedString('DATE_SEL_CALENDAR'));
    ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, hdrBnds, toggleText, this$static.linkFont, HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
    presetDim = rnd.measureText_0(toggleText, this$static.linkFont);
    presetHoverRect = new CFRect(hdrBnds.x_0, hdrBnds.y_0, hdrBnds.width_0, hdrBnds.height_0);
    $setX_0(presetHoverRect, hdrBnds.x_0 + hdrBnds.width_0 - presetDim.width_0);
    $setWidth(presetHoverRect, presetDim.width_0);
    presetHoverShape = new CFShape_1(presetHoverRect, ($clinit_CFFill() , TRANSPARENT_0), null);
    presetHoverShape.drillFilter = '{"internal": "show presets"}';
    $setDataObject_0(presetHoverShape, this$static.graph);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, presetHoverShape);
    $addGraphicElement_0(this$static.graph, ge);
  }
  if (this$static.viewingPresets) {
    left = hdrBnds.x_0;
    for (i = 0; i < 4; i++) {
      this$static.currentPresetView != i && (left = $drawHeaderForPresetView(this$static, i, left, hdrBnds, rnd));
    }
  }
}

function $drawHeaderForPresetView(this$static, presetView, left, hdrBnds, rnd){
  var ge, marginBetweenLinks, viewText, viewTextDim, viewTextHoverRect, viewTextHoverShape;
  viewText = this$static.graph.getLocalizedString('DATE_SEL_DAYS');
  presetView == 1?(viewText = this$static.graph.getLocalizedString('DATE_SEL_WEEKS')):presetView == 2?(viewText = this$static.graph.getLocalizedString('DATE_SEL_MONTHS')):presetView == 3 && (viewText = this$static.graph.getLocalizedString('DATE_SEL_YEARS'));
  hdrBnds = new CFRect(hdrBnds.x_0, hdrBnds.y_0, hdrBnds.width_0, hdrBnds.height_0);
  hdrBnds.x_0 = left;
  ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, hdrBnds, viewText, this$static.linkFont, 0, VALIGN_MIDDLE, 5, null, null));
  viewTextDim = rnd.measureText_0(viewText, this$static.linkFont);
  viewTextHoverRect = new CFRect(hdrBnds.x_0, hdrBnds.y_0, hdrBnds.width_0, hdrBnds.height_0);
  $setWidth(viewTextHoverRect, viewTextDim.width_0);
  viewTextHoverShape = new CFShape_1(viewTextHoverRect, ($clinit_CFFill() , TRANSPARENT_0), null);
  $setDrillFilter_0(viewTextHoverShape, '{"internal": "view ' + $getEnglishLocalizedDateSel(this$static, viewText) + '"}');
  $setDataObject_0(viewTextHoverShape, this$static.graph);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, viewTextHoverShape);
  $addGraphicElement_0(this$static.graph, ge);
  marginBetweenLinks = 15;
  hdrBnds.width_0 < 215 && (marginBetweenLinks = 5);
  return left + viewTextDim.width_0 + marginBetweenLinks;
}

function $formatPresets(this$static, rnd){
  var slicerBnds;
  if (!this$static.slicerCtrl) {
    this$static.slicerCtrl = new HandlerSlicer;
    $setGraph(this$static.slicerCtrl, this$static.graph);
    $setNonDataSetRows(this$static.slicerCtrl, $getSlicerRows(this$static));
    slicerBnds = $duplicate_5(this$static.graph.bnds);
    $setY_0(slicerBnds, slicerBnds.y_0 + this$static.headerHeight);
    $setHeight(slicerBnds, slicerBnds.height_0 - this$static.headerHeight);
    $setControlBnds(this$static.slicerCtrl, slicerBnds);
    $hideHeaders(this$static.slicerCtrl);
  }
  $format_2(this$static.slicerCtrl, rnd);
}

function $getCurFilterString(this$static){
  var columnName, drillFilter, filterBase, first, firstRow, last, value_0;
  firstRow = $getRow(this$static.graph.data_0, 0);
  columnName = firstRow.parentName;
  if (!!this$static.dateSelStartDate && !!this$static.dateSelEndDate && neq(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), fromDouble_0(this$static.dateSelEndDate.jsdate.getTime()))) {
    if (firstRow.type_0 != null && $equals_2(firstRow.type_0, 'DATETIME')) {
      first = FormatDate(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), 'yyyy-MM-dd HH:mm:ss', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      last = FormatDate(fromDouble_0(this$static.dateSelEndDate.jsdate.getTime()), 'yyyy-MM-dd HH:mm:ss', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    }
     else {
      first = FormatDate(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      last = FormatDate(fromDouble_0(this$static.dateSelEndDate.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    }
    filterBase = new FilterBase(columnName, 'BETWEEN', firstRow);
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, first);
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, last);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    return getDrillFilterFromValues(filterBase);
  }
   else if (this$static.dateSelStartDate) {
    value_0 = FormatDate(fromDouble_0(this$static.dateSelStartDate.jsdate.getTime()), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    filterBase = new FilterBase(columnName, 'EQUALS', firstRow);
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, value_0);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    drillFilter = getDrillFilterFromValues(filterBase);
    return drillFilter;
  }
  return null;
}

function $getEnglishLocalizedDateSel(this$static, value_0){
  var locale;
  locale = this$static.graph.chart.locale;
  if ($equals_2(getString('DATE_SEL_CLEAR', locale), value_0))
    return getString('DATE_SEL_CLEAR', 'en-US');
  else if ($equals_2(getString('DATE_SEL_PRESETS', locale), value_0))
    return getString('DATE_SEL_PRESETS', 'en-US');
  else if ($equals_2(getString('DATE_SEL_CALENDAR', locale), value_0))
    return getString('DATE_SEL_CALENDAR', 'en-US');
  else if ($equals_2(getString('DATE_SEL_DAYS', locale), value_0))
    return getString('DATE_SEL_DAYS', 'en-US');
  else if ($equals_2(getString('DATE_SEL_WEEKS', locale), value_0))
    return getString('DATE_SEL_WEEKS', 'en-US');
  else if ($equals_2(getString('DATE_SEL_MONTHS', locale), value_0))
    return getString('DATE_SEL_MONTHS', 'en-US');
  else if ($equals_2(getString('DATE_SEL_YEARS', locale), value_0))
    return getString('DATE_SEL_YEARS', 'en-US');
  return '';
}

function $getSlicerRows(this$static){
  var curDate, firstDayOf12MonthsAgo, firstDayOf13MonthsAgo, firstDayOf2WeeksAgo, firstDayOf3MonthsAgo, firstDayOf3WeeksAgo, firstDayOf4WeeksAgo, firstDayOf53WeeksAgo, firstDayOf6MonthsAgo, firstDayOfLastMonth, firstDayOfLastYear, firstDayOfMonth, firstDayOfWeek, firstDayOfWeekOffset, firstDayOfYear, lastDayOfLastMonth, lastDayOfLastWeek, lastDayOfLastYear, lastDayOfMonth, lastDayOfWeek, lastDayOfYear, slicerRows, today, todayMinus30, todayMinus60, todayMinus7, todayMinus90, yesterday;
  slicerRows = new ArrayList;
  curDate = new Date_0;
  if (this$static.currentPresetView == 0) {
    today = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate());
    yesterday = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - 1);
    todayMinus7 = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - 6);
    todayMinus30 = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - 29);
    todayMinus60 = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - 59);
    todayMinus90 = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - 89);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_TODAY'), new MinMaxTime_0(fromDouble_0(today.jsdate.getTime()), fromDouble_0(today.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_YESTERDAY'), new MinMaxTime_0(fromDouble_0(yesterday.jsdate.getTime()), fromDouble_0(yesterday.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_7DAYS'), new MinMaxTime_0(fromDouble_0(todayMinus7.jsdate.getTime()), fromDouble_0(today.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_30DAYS'), new MinMaxTime_0(fromDouble_0(todayMinus30.jsdate.getTime()), fromDouble_0(today.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_60DAYS'), new MinMaxTime_0(fromDouble_0(todayMinus60.jsdate.getTime()), fromDouble_0(today.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_90DAYS'), new MinMaxTime_0(fromDouble_0(todayMinus90.jsdate.getTime()), fromDouble_0(today.jsdate.getTime())), slicerRows);
  }
   else if (this$static.currentPresetView == 1) {
    this$static.dayOfWeekOffset > curDate.jsdate.getDay()?(firstDayOfWeekOffset = this$static.dayOfWeekOffset - 7):(firstDayOfWeekOffset = this$static.dayOfWeekOffset);
    firstDayOfWeek = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), curDate.jsdate.getDate() - curDate.jsdate.getDay() + firstDayOfWeekOffset);
    lastDayOfWeek = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() + 6);
    lastDayOfLastWeek = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() - 1);
    firstDayOf2WeeksAgo = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() - 7);
    firstDayOf3WeeksAgo = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() - 14);
    firstDayOf4WeeksAgo = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() - 21);
    firstDayOf53WeeksAgo = new Date_1(firstDayOfWeek.jsdate.getFullYear() - $intern_14, firstDayOfWeek.jsdate.getMonth(), firstDayOfWeek.jsdate.getDate() - 364);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_THIS_WEEK'), new MinMaxTime_0(fromDouble_0(firstDayOfWeek.jsdate.getTime()), fromDouble_0(lastDayOfWeek.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_WEEK'), new MinMaxTime_0(fromDouble_0(firstDayOf2WeeksAgo.jsdate.getTime()), fromDouble_0(lastDayOfLastWeek.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_2WEEKS'), new MinMaxTime_0(fromDouble_0(firstDayOf2WeeksAgo.jsdate.getTime()), fromDouble_0(lastDayOfWeek.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_3WEEKS'), new MinMaxTime_0(fromDouble_0(firstDayOf3WeeksAgo.jsdate.getTime()), fromDouble_0(lastDayOfWeek.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_4WEEKS'), new MinMaxTime_0(fromDouble_0(firstDayOf4WeeksAgo.jsdate.getTime()), fromDouble_0(lastDayOfWeek.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_53WEEKS'), new MinMaxTime_0(fromDouble_0(firstDayOf53WeeksAgo.jsdate.getTime()), fromDouble_0(lastDayOfWeek.jsdate.getTime())), slicerRows);
  }
   else if (this$static.currentPresetView == 2) {
    firstDayOfMonth = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), 1);
    lastDayOfMonth = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() + 1, 0);
    firstDayOfLastMonth = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() - 1, 1);
    lastDayOfLastMonth = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth(), 0);
    firstDayOf3MonthsAgo = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() - 2, 1);
    firstDayOf6MonthsAgo = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() - 5, 1);
    firstDayOf12MonthsAgo = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() - 11, 1);
    firstDayOf13MonthsAgo = new Date_1(curDate.jsdate.getFullYear() - $intern_14, curDate.jsdate.getMonth() - 12, 1);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_THIS_MONTH'), new MinMaxTime_0(fromDouble_0(firstDayOfMonth.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_MONTH'), new MinMaxTime_0(fromDouble_0(firstDayOfLastMonth.jsdate.getTime()), fromDouble_0(lastDayOfLastMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_2MONTHS'), new MinMaxTime_0(fromDouble_0(firstDayOfLastMonth.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_3MONTHS'), new MinMaxTime_0(fromDouble_0(firstDayOf3MonthsAgo.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_6MONTHS'), new MinMaxTime_0(fromDouble_0(firstDayOf6MonthsAgo.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_12MONTHS'), new MinMaxTime_0(fromDouble_0(firstDayOf12MonthsAgo.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_13MONTHS'), new MinMaxTime_0(fromDouble_0(firstDayOf13MonthsAgo.jsdate.getTime()), fromDouble_0(lastDayOfMonth.jsdate.getTime())), slicerRows);
  }
   else if (this$static.currentPresetView == 3) {
    firstDayOfYear = new Date_1(curDate.jsdate.getFullYear() - $intern_14, 0, 1);
    lastDayOfYear = new Date_1(curDate.jsdate.getFullYear() - $intern_14 + 1, 0, 0);
    firstDayOfLastYear = new Date_1(curDate.jsdate.getFullYear() - $intern_14 - 1, 0, 1);
    lastDayOfLastYear = new Date_1(curDate.jsdate.getFullYear() - $intern_14, 0, 0);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_THIS_YEAR'), new MinMaxTime_0(fromDouble_0(firstDayOfYear.jsdate.getTime()), fromDouble_0(lastDayOfYear.jsdate.getTime())), slicerRows);
    $addPresetDataRow(this$static, this$static.graph.getLocalizedString('DATE_SEL_LAST_YEAR'), new MinMaxTime_0(fromDouble_0(firstDayOfLastYear.jsdate.getTime()), fromDouble_0(lastDayOfLastYear.jsdate.getTime())), slicerRows);
  }
  return slicerRows;
}

function $setSelectionFromFilter(this$static, filter){
  var columnType, operand, values;
  if (filter != null && !$equals_2(filter, 'none')) {
    values = getValueListFromFilter(filter);
    operand = getOperandFromFilter(filter);
    columnType = getColumnTypeFromFilter(filter);
    if (columnType != null && columnType.indexOf('DATE') != -1 && !this$static.dateSelStartDate) {
      if (operand != null && $equals_2(operand, 'EQUALS') && values.array.length == 1) {
        this$static.dateSelStartDate = new Date_4(getTimeMSForDateString((checkCriticalElementIndex(0, values.array.length) , castToString(values.array[0])), null, null, null).value_0);
      }
       else if (operand != null && $equals_2(operand, 'BETWEEN') && values.array.length == 2) {
        this$static.dateSelStartDate = new Date_4(getTimeMSForDateString((checkCriticalElementIndex(0, values.array.length) , castToString(values.array[0])), null, null, null).value_0);
        this$static.dateSelEndDate = new Date_4(add_1(getTimeMSForDateString((checkCriticalElementIndex(1, values.array.length) , castToString(values.array[1])), null, null, null).value_0, $intern_40));
      }
    }
  }
}

function $setViewFromOption(this$static, option){
  if ($equals_2('day', option)) {
    this$static.viewingPresets = true;
    this$static.currentPresetView = 0;
  }
   else if ($equals_2('weeks', option)) {
    this$static.viewingPresets = true;
    this$static.currentPresetView = 1;
  }
   else if ($equals_2('month', option)) {
    this$static.viewingPresets = true;
    this$static.currentPresetView = 2;
  }
   else if ($equals_2('year', option)) {
    this$static.viewingPresets = true;
    this$static.currentPresetView = 3;
  }
}

function $updatePresetSelection(this$static){
  var row, row$iterator, rows_0;
  if (this$static.slicerCtrl) {
    rows_0 = this$static.slicerCtrl.nonDataSetRows;
    if (rows_0) {
      for (row$iterator = new ArrayList$1(rows_0); row$iterator.i < row$iterator.this$01.array.length;) {
        row = castTo($next_3(row$iterator), 7);
        this$static.selectedPreset != null && $equals_2($getName(row), this$static.selectedPreset)?(row.showAsFiltered = false):(row.showAsFiltered = true);
      }
    }
  }
}

function HandlerDateSelector(){
  $clinit_HandlerCalendar();
  HandlerCalendar.call(this);
  this.linkFont = new CFFont_0(null, 12, new CFColor_2('#4B87B0'));
  this.timeRangeMap = new HashMap;
}

defineClass(174, 230, {174:1, 212:1}, HandlerDateSelector);
_.addDataToCalendar = function addDataToCalendar_0(calGrid){
}
;
_.cancelDrag_0 = function cancelDrag_3(){
  this.dragFromStart = false;
  this.inDrag_0 = false;
  this.graph.setNeedsFormat(true);
  return true;
}
;
_.format_0 = function format_9(rnd){
  var ddShape, ge;
  this.dateRangeFont = new CFFont_0(null, 12, $getTextColor(this.graph.chart.palette));
  if (!!this.graph.typeAttributes && this.graph.typeAttributes.isSelector) {
    this.showValuesOnPrePostMonthDays = true;
    this.graph.supportsDrag = true;
    this.graph.hasInteractions = true;
    this.headerHeight = 20;
  }
  if (this.viewingPresets) {
    $formatPresets(this, rnd);
  }
   else {
    this.slicerCtrl = null;
    $format_1(this, rnd);
  }
  if (!$usingCardBus(this.graph.chart)) {
    ddShape = new CFShape_1(this.graph.bnds, ($clinit_CFFill() , TRANSPARENT_0), null);
    ddShape.drillFilter = '{"filters":[]}';
    ge = new GraphicElement;
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, ddShape);
    $addGraphicElement_0(this.graph, ge);
  }
  $drawHeader(this, rnd);
}
;
_.getFillColorOverride = function getFillColorOverride_0(fillColor, cell){
  var cellDateMS, endDateMS, startDateMS, tmpDate;
  startDateMS = null;
  endDateMS = null;
  if (this.dateSelStartDate) {
    startDateMS = valueOf_0(fromDouble_0(this.dateSelStartDate.jsdate.getTime()));
    this.dateSelEndDate?(endDateMS = valueOf_0(fromDouble_0(this.dateSelEndDate.jsdate.getTime()))):(endDateMS = startDateMS);
  }
  if (!!startDateMS && !!endDateMS && lt(endDateMS.value_0, startDateMS.value_0)) {
    tmpDate = startDateMS;
    startDateMS = endDateMS;
    endDateMS = tmpDate;
  }
  if (!!cell && !!cell.date && !!startDateMS && !!endDateMS && (!cell.isPrePostCell || !$equals_2(this.view, 'year'))) {
    cellDateMS = valueOf_0(fromDouble_0(cell.date.jsdate.getTime()));
    gte_0(cellDateMS.value_0, startDateMS.value_0) && lte(cellDateMS.value_0, endDateMS.value_0) && (fillColor = this.dateSelFillClr);
  }
  return fillColor;
}
;
_.getFirstDate = function getFirstDate_0(){
  var fd;
  if ($startsWith(this.viewFrom, 'user')) {
    fd = $setFirstDateFromUserSettings(this);
    fd = $adjustFirstDateForRolling(this, fd);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
   else if ($equals_2(this.viewFrom, 'data')) {
    fd = $getFirstDateFromData(this);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
   else {
    fd = new Date_0;
    fd = $adjustFirstDateForRolling(this, fd);
    fd = $getAdjustedDateForScrollingDateOffsets(this, fd);
  }
  return fd;
}
;
_.handleClick_0 = function handleClick_10(shapeClicked){
  var dataObject, gc, result, rowName, selRow, timeRange;
  result = -1;
  dataObject = $getDataObjectForShape_0(this.graph, shapeClicked);
  if (!!shapeClicked && !!this.graph.chart && this.viewingPresets && dataObject != null && instanceOf(dataObject, 7) && $usingCardBus(this.graph.chart)) {
    selRow = castTo(dataObject, 7);
    rowName = $getName(selRow);
    if ($getStringValue(this.timeRangeMap, rowName) != null) {
      timeRange = castTo($getStringValue(this.timeRangeMap, rowName), 81);
      if (timeRange) {
        $dateSelClickOnPreset(this, timeRange);
        if (this.selectedPreset != null && $equals_2(this.selectedPreset, rowName)) {
          this.selectedPreset = null;
          $removeChartOption(this.graph, 'preset_selected');
        }
         else {
          this.selectedPreset = rowName;
          $addChartOption(this.graph, 'preset_selected', rowName);
        }
        $updatePresetSelection(this);
        this.graph.setNeedsFormat(true);
        result = 1;
      }
    }
  }
  this.viewingPresets && !!this.slicerCtrl && result == -1 && (result = $handleClick_2(this.slicerCtrl, shapeClicked));
  if (result == 1 || result == 0)
    return result;
  if (!!shapeClicked && dataObject != null && instanceOf(dataObject, 75)) {
    if (this.inDrag_0) {
      this.dateSelStartDate = this.dateSelStartBeforeDrag;
      this.dateSelEndDate = this.dateSelEndBeforeDrag;
      this.inDrag_0 = false;
    }
    gc = castTo(dataObject, 75);
    if (gc.date) {
      $dateSelClickOnDate(this, gc.date);
      this.graph.setNeedsFormat(true);
    }
    return 1;
  }
   else if (!!shapeClicked && shapeClicked.drillFilter != null) {
    if (shapeClicked.drillFilter.indexOf('show presets') != -1) {
      if (!this.viewingPresets && !!this.dateSelStartDate) {
        this.dateSelStartDate = null;
        this.dateSelEndDate = null;
        $removeChartOption(this.graph, 'row_filter');
        this.graph.drillFilter = 'none';
        $sendCardBusApplyFiltersMessage(this.graph.chart, 'none');
      }
       else {
        this.viewingPresets = !this.viewingPresets;
        if (this.viewingPresets) {
          $addChartOption(this.graph, 'date_selection_view', 'day');
        }
         else {
          $removeChartOption(this.graph, 'date_selection_view');
          $removeChartOption(this.graph, 'preset_selected');
        }
      }
      this.graph.setNeedsFormat(true);
      return 1;
    }
     else if (shapeClicked.drillFilter.indexOf('view Days') != -1) {
      this.currentPresetView = 0;
      this.selectedPreset = null;
      $setNonDataSetRows(this.slicerCtrl, $getSlicerRows(this));
      this.graph.setNeedsFormat(true);
      $addChartOption(this.graph, 'date_selection_view', 'day');
      return 1;
    }
     else if (shapeClicked.drillFilter.indexOf('view Weeks') != -1) {
      this.currentPresetView = 1;
      this.selectedPreset = null;
      $setNonDataSetRows(this.slicerCtrl, $getSlicerRows(this));
      this.graph.setNeedsFormat(true);
      $addChartOption(this.graph, 'date_selection_view', 'weeks');
      return 1;
    }
     else if (shapeClicked.drillFilter.indexOf('view Months') != -1) {
      this.currentPresetView = 2;
      this.selectedPreset = null;
      $setNonDataSetRows(this.slicerCtrl, $getSlicerRows(this));
      this.graph.setNeedsFormat(true);
      $addChartOption(this.graph, 'date_selection_view', 'month');
      return 1;
    }
     else if (shapeClicked.drillFilter.indexOf('view Years') != -1) {
      this.currentPresetView = 3;
      $setNonDataSetRows(this.slicerCtrl, $getSlicerRows(this));
      this.graph.setNeedsFormat(true);
      $addChartOption(this.graph, 'date_selection_view', 'year');
      return 1;
    }
     else {
      return $handleClick_1(this, shapeClicked);
    }
  }
   else {
    return $handleClick_1(this, shapeClicked);
  }
}
;
_.handleDrag_0 = function handleDrag_4(startX, startY, curX, curY){
  var curSelDate, dataObject, shape_0;
  if (this.graph.rnd) {
    if (startX == curX && startY == curY)
      return false;
    this.dateSelStartBeforeDrag = this.dateSelStartDate;
    this.dateSelEndBeforeDrag = this.dateSelEndDate;
    this.selectedPreset = null;
    shape_0 = this.graph.getShapeUnderPoint(round_int(curX), round_int(curY), this.graph.rnd);
    dataObject = $getDataObjectForShape_0(this.graph, shape_0);
    if (!!shape_0 && dataObject != null && instanceOf(dataObject, 75)) {
      curSelDate = new Date_4(fromDouble_0(castTo(dataObject, 75).date.jsdate.getTime()));
      if (!this.dateSelStartDate) {
        this.dateSelStartDate = new Date_4(fromDouble_0(curSelDate.jsdate.getTime()));
        this.dateSelEndDate = new Date_4(fromDouble_0(this.dateSelStartDate.jsdate.getTime()));
        this.inDrag_0 = true;
      }
       else {
        if (this.inDrag_0) {
          this.dragFromStart?(this.dateSelStartDate = new Date_4(fromDouble_0(curSelDate.jsdate.getTime()))):(this.dateSelEndDate = new Date_4(fromDouble_0(curSelDate.jsdate.getTime())));
        }
         else {
          if (eq(fromDouble_0(curSelDate.jsdate.getTime()), fromDouble_0(this.dateSelStartDate.jsdate.getTime()))) {
            this.dragFromStart = true;
            this.inDrag_0 = true;
          }
           else if (!!this.dateSelEndDate && eq(fromDouble_0(curSelDate.jsdate.getTime()), fromDouble_0(this.dateSelEndDate.jsdate.getTime()))) {
            this.inDrag_0 = true;
          }
           else {
            this.dateSelStartDate = new Date_4(fromDouble_0(curSelDate.jsdate.getTime()));
            this.dateSelEndDate = new Date_4(fromDouble_0(curSelDate.jsdate.getTime()));
          }
        }
      }
    }
    this.graph.setNeedsFormat(true);
    return true;
  }
  return false;
}
;
_.handleDragEnd_0 = function handleDragEnd_4(startX, startY, curX, curY){
  var filter, tmpDate;
  if (this.inDrag_0) {
    this.selectedPreset = null;
    if (!!this.dateSelStartDate && !!this.dateSelEndDate && lt(fromDouble_0(this.dateSelEndDate.jsdate.getTime()), fromDouble_0(this.dateSelStartDate.jsdate.getTime()))) {
      tmpDate = this.dateSelStartDate;
      this.dateSelStartDate = this.dateSelEndDate;
      this.dateSelEndDate = tmpDate;
    }
    filter = $getCurFilterString(this);
    $addChartOption(this.graph, 'row_filter', filter);
    this.dragFromStart = false;
    this.inDrag_0 = false;
    this.graph.setNeedsFormat(true);
    return true;
  }
  return false;
}
;
_.processChartOptions = function processChartOptions_12(){
  var key, key$iterator, value_0;
  this.dateSelFillClr = new CFColor_2('#B7DAF5');
  $processChartOptions_5(this);
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'selected_fill_color':
          this.dateSelFillClr = new CFColor_2(value_0);
          break;
        case 'row_filter':
          $setSelectionFromFilter(this, value_0);
          break;
        case 'date_selection_view':
          $setViewFromOption(this, value_0);
          break;
        case 'preset_selected':
          this.selectedPreset = value_0;
      }
    }
  }
  $setWarningMessage(this.graph.chart, null);
}
;
_.removeFilter_1 = function removeFilter_3(filterToRemove){
  this.dateSelStartDate = null;
  this.dateSelEndDate = null;
  $removeChartOption(this.graph, 'row_filter');
  $setDrillFilter(this.graph, null);
  this.graph.setNeedsFormat(true);
  return true;
}
;
_.setBkgElemDataObject = function setBkgElemDataObject_0(ge, cell){
  ge.dataObject = cell;
}
;
_.setViewForData = function setViewForData_0(){
  $setViewForData(this);
  this.view != null && $equals_2(this.view, 'day') && (this.view = 'month');
}
;
_.showCancelZoomIndicatorWhenFiltered = function showCancelZoomIndicatorWhenFiltered_0(){
  return false;
}
;
_.supportsWarning = function supportsWarning_0(warningMessage){
  var notAllDataShown;
  notAllDataShown = getString('WARN_NOT_ALL_DATA', this.graph.chart.locale);
  if (warningMessage != null && $equals_2(warningMessage, notAllDataShown))
    return false;
  return true;
}
;
_.currentPresetView = 0;
_.dateRangeFont = null;
_.dateSelEndBeforeDrag = null;
_.dateSelEndDate = null;
_.dateSelStartBeforeDrag = null;
_.dateSelStartDate = null;
_.dragFromStart = false;
_.inDrag_0 = false;
_.selectedPreset = null;
_.viewingPresets = false;
var Lcom_domo_charting_graphs_HandlerDateSelector_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerDateSelector', 174);
function $addClipRegion(this$static){
  var clipPath, clipShape, geClip, path, percentWidth, stemWidth, space, percentHeight, stemHeight, arcCtlX, midY;
  clipPath = (path = new CFPath , percentWidth = this$static.funnelStemWidthPercent / 100 , stemWidth = round_int(this$static.grphBnds.width_0 * percentWidth) , space = round_int((this$static.grphBnds.width_0 - stemWidth) / 2) , percentHeight = this$static.funnelStemHeightPercent / 100 , stemHeight = this$static.grphBnds.height_0 * percentHeight , arcCtlX = this$static.grphBnds.width_0 * 0.35 , midY = this$static.grphBnds.y_0 + (this$static.grphBnds.height_0 - stemHeight) / 2 , $add(path, new CFPathElement_0(0, $getRight(this$static.grphBnds) + 1, this$static.grphBnds.y_0)) , $add(path, new CFPathQuadElement($getRight(this$static.grphBnds) - arcCtlX, midY, $getRight(this$static.grphBnds) + 1 - space, $getBottom(this$static.grphBnds) + 1 - stemHeight)) , $add(path, new CFPathElement_0(1, this$static.grphBnds.x_0 + space, $getBottom(this$static.grphBnds) + 1)) , $add(path, new CFPathQuadElement(this$static.grphBnds.x_0 + arcCtlX, midY, this$static.grphBnds.x_0, this$static.grphBnds.y_0)) , $add(path, new CFPathElement_0(1, $getRight(this$static.grphBnds) + 1, this$static.grphBnds.y_0)) , $add(path, new CFPathElement) , path.shouldAntiAlias = true , path);
  clipShape = new CFShape_0(clipPath, null, null);
  clipShape.isClip = true;
  geClip = new GraphicElement;
  !geClip.shapeAry && (geClip.shapeAry = new ArrayList);
  $add_1(geClip.shapeAry, clipShape);
  $addGraphicElement_0(this$static.graph, geClip);
  $setClipPath(this$static.graph, clipPath);
}

function $clearClipRegion(this$static){
  var endClip, geEndClip;
  endClip = new CFShape;
  endClip.isClip = true;
  geEndClip = new GraphicElement;
  !geEndClip.shapeAry && (geEndClip.shapeAry = new ArrayList);
  $add_1(geEndClip.shapeAry, endClip);
  this$static.graph.clipPath = null;
  $addGraphicElement_0(this$static.graph, geEndClip);
}

function $createDrawObjectsForFrame_0(this$static, curTime){
  var ge, pctComplete, rectInfo, shape_0, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 82)) {
        rectInfo = castTo(srsInfo, 82);
        if (rectInfo.animInfo) {
          pctComplete = $getPercentComplete(rectInfo.animInfo, curTime);
          shape_0 = $getShapePctGrowFromTop(rectInfo, pctComplete, this$static.grphBnds);
          ge = new GraphicElement;
          $addShape_0(ge, shape_0, rectInfo);
          $addGraphicElement_0(this$static.graph, ge);
        }
      }
    }
  }
}

function $freeResources_19(this$static, dataToKeep){
  $freeResources_17(this$static, dataToKeep);
  this$static.borderColor = null;
  this$static.endColor = null;
  this$static.grphBnds = null;
}

function $getBkgColor(this$static){
  var bkgColor;
  bkgColor = ($clinit_CFColor() , WHITE);
  !!$getBackgroundColor(this$static.graph.chart.palette) && (bkgColor = $getBackgroundColor(this$static.graph.chart.palette));
  return bkgColor;
}

function $getDatalabelIndent(this$static, yPos){
  var xPct, yDiff;
  yDiff = yPos - this$static.grphBnds.y_0;
  xPct = (100 - this$static.funnelStemWidthPercent) / 2 / 100;
  return yDiff * xPct;
}

function $getDatalabelMaxWidth(this$static, rnd){
  var cell, dim, dlText, maxWidth, rowInfo, rowInfo$iterator, value_0;
  maxWidth = 0;
  if (!!this$static.graph.dataLabel && !this$static.graph.treatAsSmall && (this$static.graph.dataLabel.position == 12 || this$static.graph.dataLabel.position == 13 || this$static.graph.dataLabel.position == 14)) {
    for (rowInfo$iterator = this$static.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
      rowInfo = castTo(rowInfo$iterator.next_1(), 7);
      value_0 = $getValue($getFirstCell(rowInfo));
      if (!isNaN(value_0)) {
        cell = $getFirstCell(rowInfo);
        dlText = $getFormattedDataLabel(this$static.graph.dataLabel, cell);
        dim = rnd.measureText_0(dlText, this$static.graph.dataLabel.font_0);
        dim.width_0 > maxWidth && (maxWidth = dim.width_0);
      }
    }
  }
  return maxWidth;
}

function $setHoverData_1(this$static, data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this$static.hoverData) !== maskUndefined(data_0)) {
    this$static.hoverData = data_0;
    redrawNeeded = this$static.setHoverEffects_0(this$static.hoverData, rnd);
  }
  return redrawNeeded;
}

function $showElementInNormalColor(this$static, ge, objIndex){
  var pieWedge, sd, shapeAry;
  sd = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, objIndex), 18);
  shapeAry = ge.shapeAry;
  pieWedge = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
  $setFill_0(pieWedge, sd.fill_0);
  pieWedge.stroke_0 = null;
}

function HandlerFunnel(){
  this.borderColor = ($clinit_CFColor() , WHITE);
  this.endColor = new CFColor_2('#8A8D8F');
}

defineClass(200, 118, {}, HandlerFunnel);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_4(chart){
  var bnds, graphWidth, isNewLegend, legend, legendWidth, margin;
  bnds = $duplicate_5(this.graph.bnds);
  this.grphBnds = bnds;
  if (bnds.width_0 > 400 && bnds.height_0 > 210) {
    isNewLegend = false;
    legendWidth = bnds.width_0 * 2 / 5;
    graphWidth = bnds.width_0 * 3 / 5;
    margin = round_int(bnds.width_0 * 0.07);
    this.grphBnds = new CFRect(round_int(legendWidth), 0, round_int(graphWidth), round_int(bnds.height_0));
    legend = castTo($getLegend(this.graph), 65);
    if (!legend) {
      legend = new LegendPie_0(chart, this.graph);
      isNewLegend = true;
    }
    bnds.height_0 < 280 || legendWidth < 180?$setSmallestLegend(legend):(bnds.height_0 < 380 || legendWidth < 220) && $setSmallerLegend(legend);
    bnds.width_0 > 900 && (legend.leftMargin = 30);
    $setBounds_0(legend, 0, 0, round_int(legendWidth), round_int(bnds.height_0));
    legendWidth < 220?(legend.rightMargin = 0):(legend.rightMargin = margin);
    legend.showPercentOfPrevious = true;
    legend.valueDisplayType = 1;
    isNewLegend && $addDependentComp(this.graph, legend);
  }
}
;
_.closeZoomInFilter = function closeZoomInFilter_0(){
  this.setData(this.originalData);
  return false;
}
;
_.createDrawObjectsForFrame_0 = function createDrawObjectsForFrame_4(rnd, type_0, curTime){
  $createDrawObjectsForFrame_0(this, curTime);
}
;
_.drawDataLabel = function drawDataLabel_1(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var dlAdded, dlText, geLeader, indent, leader, leaderShp, rectInfo, sliceRect, textPosRect;
  if (!!shpInfo && instanceOf(shpInfo, 82)) {
    rectInfo = castTo(shpInfo, 82);
    dlText = $getFormattedDataLabel(dataLabel, rectInfo.cell);
    sliceRect = $duplicate_5(rectInfo.rect);
    if (dataLabel.position == 13 || dataLabel.position == 14) {
      dataLabel.position == 13 && $setX_0(sliceRect, sliceRect.x_0 - $getDatalabelIndent(this, sliceRect.y_0 + sliceRect.height_0 / 2));
      this.sideLabelTruncated && (dlText = truncateString(rnd, dlText, this.sideDatalabelMaxWidth, this.graph.dataLabel.font_0));
    }
     else if (dataLabel.position == 12) {
      $setX_0(sliceRect, sliceRect.x_0 + $getDatalabelIndent(this, sliceRect.y_0 + sliceRect.height_0 / 2));
      this.sideLabelTruncated && (dlText = truncateString(rnd, dlText, this.sideDatalabelMaxWidth, this.graph.dataLabel.font_0));
    }
     else {
      dataLabel.position = 3;
    }
    textPosRect = $getRectForPosition(dataLabel, rnd, sliceRect, dlText);
    dlAdded = $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
    if (dlAdded && dataLabel.position == 14) {
      indent = $getDatalabelIndent(this, sliceRect.y_0 + sliceRect.height_0 / 2);
      if (indent > 7) {
        leader = new CFPath_1(sliceRect.x_0 + sliceRect.width_0 - indent, sliceRect.y_0 + sliceRect.height_0 / 2, sliceRect.x_0 + sliceRect.width_0 - 7, sliceRect.y_0 + sliceRect.height_0 / 2);
        leaderShp = new CFShape_0(leader, null, new CFStroke(($clinit_CFColor() , BLACK), 1));
        geLeader = new GraphicElement_0(leaderShp);
        $addFrontGraphicElement_0(this.graph, geLeader);
        $add_1(this.graph.dataLabel.labels, geLeader);
      }
    }
    return dlAdded;
  }
  return false;
}
;
_.format_0 = function format_10(rnd){
  var bkgColor, cell, color_0, depComp, depComp$iterator, fill, ge, halfDiff, hasFilteredData, hasTransparencyInBackground, height, inShowAsFilteredMode, rowCount, rowInfo, rowNumber, showAsFiltered, sliceRect, ssi, top_0, value_0, path, path_0, percentWidth, stemWidth, space, percentHeight, stemHeight, arcCtlX, midY, bkgShape;
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
  this.grphBnds = $duplicate_5(this.graph.bnds);
  if ($getLegend(this.graph)) {
    $setX_0(this.grphBnds, $getRight($getLegend(this.graph).bnds));
    $setWidth(this.grphBnds, this.graph.bnds.width_0 - $getLegend(this.graph).bnds.width_0);
  }
  this.sideDatalabelMaxWidth = $getDatalabelMaxWidth(this, rnd);
  if (this.sideDatalabelMaxWidth > 0 && this.sideDatalabelMaxWidth > this.grphBnds.width_0 / 3) {
    this.sideDatalabelMaxWidth = this.grphBnds.width_0 / 3;
    this.sideLabelTruncated = true;
  }
  this.sideDatalabelMaxWidth > 0 && $setWidth(this.grphBnds, this.grphBnds.width_0 - this.sideDatalabelMaxWidth);
  if (this.grphBnds.width_0 > this.grphBnds.height_0) {
    halfDiff = (this.grphBnds.width_0 - this.grphBnds.height_0) / 2;
    $inflateWidth(this.grphBnds, round_int(-halfDiff));
  }
   else if (this.grphBnds.height_0 > this.grphBnds.width_0) {
    halfDiff = (this.grphBnds.height_0 - this.grphBnds.width_0) / 2;
    $inflateHeight(this.grphBnds, round_int(-halfDiff));
  }
  this.sideDatalabelMaxWidth > 0 && this.graph.dataLabel.position == 12 && $setX_0(this.grphBnds, this.grphBnds.x_0 + this.sideDatalabelMaxWidth);
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  $add_1(this.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredRows;
  top_0 = this.grphBnds.y_0;
  rowInfo = $getFirstRowWithData(this.graph.data_0);
  rowNumber = 0;
  hasTransparencyInBackground = false;
  bkgColor = $getBkgColor(this);
  bkgColor.alpha_0 < 255 && (hasTransparencyInBackground = true);
  hasTransparencyInBackground && $addClipRegion(this);
  while (!!rowInfo && rowNumber < $intern_11) {
    value_0 = $getValue($getFirstCell(rowInfo));
    height = 0;
    if (!isNaN(value_0)) {
      cell = $getFirstCell(rowInfo);
      if (this.heightCalculationMethod == 1) {
        height = $getLogOfAbsoluteVisibleColValue(cell) * this.grphBnds.height_0;
      }
       else if (this.heightCalculationMethod == 2) {
        rowCount = $getNumVisibleRowsWithData(this.graph.data_0);
        rowCount > 0?(height = this.grphBnds.height_0 / rowCount):(height = this.grphBnds.height_0);
      }
       else {
        height = $getPctOfAbsoluteVisibleColValue(cell) * this.grphBnds.height_0;
      }
      height < 0 && (height *= -1);
      rowInfo.hidden && (height = 0);
      color_0 = $getColorForCellValueCategoryNameAndIndex(this.graph, cell, this.graph.data_0.valueColumnName, rowInfo.curIndex);
      fill = new CFFill(color_0);
      showAsFiltered = inShowAsFilteredMode && rowInfo.showAsFiltered;
      showAsFiltered && (fill = new CFFill($deSaturateAndLighten(fill.color_0, 0.9, 0.4)));
      sliceRect = new CFRect(this.grphBnds.x_0, top_0, this.grphBnds.width_0, height);
      ssi = new SrsRectInfo(cell, sliceRect, fill, null);
      ssi.supportsDynamicFilter = true;
      !!ssi && inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (ssi.highlightAlways = true);
      ge = new GraphicElement;
      $addShape_0(ge, new CFShape_1(sliceRect, fill, null), ssi);
      $addGraphicElement_0(this.graph, ge);
      $add_1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, ssi);
    }
    top_0 += height;
    rowInfo = $getNextRowWithData(this.graph.data_0, rowInfo);
    ++rowNumber;
  }
  hasTransparencyInBackground?$clearClipRegion(this):(path = (path_0 = new CFPath , percentWidth = this.funnelStemWidthPercent / 100 , stemWidth = round_int(this.grphBnds.width_0 * percentWidth) , space = round_int((this.grphBnds.width_0 - stemWidth) / 2) , percentHeight = this.funnelStemHeightPercent / 100 , stemHeight = this.grphBnds.height_0 * percentHeight , arcCtlX = this.grphBnds.width_0 * 0.35 , midY = this.grphBnds.y_0 + (this.grphBnds.height_0 - stemHeight) / 2 , $add(path_0, new CFPathElement_0(0, $getRight(this.grphBnds) + 1, this.grphBnds.y_0)) , $add(path_0, new CFPathQuadElement($getRight(this.grphBnds) - arcCtlX, midY, $getRight(this.grphBnds) + 1 - space, $getBottom(this.grphBnds) + 1 - stemHeight)) , $add(path_0, new CFPathElement_0(1, $getRight(this.grphBnds) + 1, $getBottom(this.grphBnds) + 1)) , $add(path_0, new CFPathElement) , $add(path_0, new CFPathElement_0(0, this.grphBnds.x_0, $getBottom(this.grphBnds) + 1)) , $add(path_0, new CFPathElement_0(1, this.grphBnds.x_0 + space, $getBottom(this.grphBnds) + 1 - stemHeight)) , $add(path_0, new CFPathQuadElement(this.grphBnds.x_0 + arcCtlX, midY, this.grphBnds.x_0, this.grphBnds.y_0)) , $add(path_0, new CFPathElement) , path_0.shouldAntiAlias = true , path_0) , bkgShape = new CFShape_0(path, new CFFill(bkgColor), new CFStroke(bkgColor, 1)) , this.graph.chart.includeJsonMap && (bkgShape.hoverText = '{"internal":"Bl0ckH0v3rT3xt"}') , $addGraphicElement_0(this.graph, new GraphicElement_0(bkgShape)) , undefined);
  this.graph.setNeedsFormat(false);
  !!this.graph.dataLabel && $drawDataLabels(this.graph.dataLabel, rnd, false);
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.format_0(rnd);
    }
  }
}
;
_.freeResources = function freeResources_19(dataToKeep){
  $freeResources_19(this, dataToKeep);
}
;
_.initColors = function initColors_1(){
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
}
;
_.processChartOptions = function processChartOptions_13(){
  var heightVal, hoverTextOverride;
  if (this.graph.hasChartOptions()) {
    $convertDatalabelAndHoverMacros(this.graph, '%_VALUE', '%_ORIG_VALUE');
    $convertDatalabelAndHoverMacros(this.graph, '%_PERCENT_OF_TOTAL', '%_ORIG_PERCENT_OF_TOTAL');
    if (this.graph.getChartOptionAsString('series_height') != null) {
      heightVal = this.graph.getChartOptionAsString('series_height');
      $startsWith(heightVal.toLowerCase(), 'even')?(this.heightCalculationMethod = 2):$startsWith(heightVal.toLowerCase(), 'log')?(this.heightCalculationMethod = 1):(this.heightCalculationMethod = 0);
    }
  }
  hoverTextOverride = $getEncodedChartOption(this.graph);
  hoverTextOverride == null && (this.graph.hoverLabelText = '%_CATEGORY_NAME : %_ORIG_VALUE');
}
;
_.resetForTypeChange = function resetForTypeChange_5(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  !!this.currentViewDataGrid && this.currentViewDataGrid != this.originalData && $freeResources_11(this.currentViewDataGrid);
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_12(data_0){
  var theData;
  if (!!data_0 && !this.originalData) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone_0(this.currentViewDataGrid, 5001, 5001);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    $getNumCols(this.currentViewDataGrid) > 1 && !this.currentViewDataGrid.dataHasAlreadyBeenTransposed && $transposeRowsCols(this.currentViewDataGrid);
    this.graph.data_0 = this.currentViewDataGrid;
    $setRowsAsNonTimeData(this.graph.data_0);
  }
  this.grphBnds = null;
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
  this.graph.data_0.numVisibleRows > $intern_11 && $warnNotAllDataShown(this.graph.chart);
}
;
_.setFrame = function setFrame_8(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, bkgColor, geAry, geWhiteShape, hasTransparencyInBackground, rect, rect$iterator, srsInfo, srsInfo$iterator;
  geAry = this.graph.geAry;
  hasTransparencyInBackground = false;
  bkgColor = $getBkgColor(this);
  bkgColor.alpha_0 < 255 && (hasTransparencyInBackground = true);
  if (this.graph.seriesShapes.array.length > 0) {
    if (!!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && !castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).animInfo) {
      for (srsInfo$iterator = new ArrayList$1(this.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 19);
        for (rect$iterator = new ArrayList$1(srsInfo.srsShapeList); rect$iterator.i < rect$iterator.this$01.array.length;) {
          rect = castTo($next_3(rect$iterator), 18);
          animInfo = new AnimInfoSrs(startTime, endTime, easingType);
          rect.animInfo = animInfo;
        }
      }
    }
    geWhiteShape = castTo(geAry.get_1(geAry.size_1() - 1), 12);
    hasTransparencyInBackground || geAry.remove(geWhiteShape);
    clearGraphicElementArray(geAry);
    hasTransparencyInBackground && $addClipRegion(this);
    this.createDrawObjectsForFrame_0(rnd, type_0, curTime);
    hasTransparencyInBackground?$clearClipRegion(this):geAry.add_0(geWhiteShape);
    compare_22(curTime, endTime) >= 0 && $hasDataLabels(this.graph) && $drawDataLabels(this.graph.dataLabel, rnd, false);
  }
}
;
_.setHoverData = function setHoverData_14(data_0, rnd){
  return $setHoverData_1(this, data_0, rnd);
}
;
_.setHoverEffects_0 = function setHoverEffects_5(hoverData, rnd){
  var dataObj, depComp, depComp$iterator, ge, ge$iterator, hoverFromLegend, inShowAsFiltered, itemsBeforeOther, legend, objIndex, selectedIndex;
  if ($hasInteractions(this.graph)) {
    hoverData != null && instanceOf(hoverData, 12) && (hoverData = null);
    inShowAsFiltered = !!this.graph.chart && $usingCardBus(this.graph.chart) && this.graph.data_0.hasFilteredRows;
    selectedIndex = -1;
    itemsBeforeOther = $intern_10;
    hoverFromLegend = false;
    legend = castTo($getLegend(this.graph), 65);
    if (legend) {
      itemsBeforeOther = legend.itemsBeforeOther;
      hoverFromLegend = legend.hoverFromLegend;
    }
    for (ge$iterator = this.graph.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this.graph, ge);
      if (dataObj != null) {
        objIndex = $indexOf_1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, dataObj, 0);
        maskUndefined(dataObj) === maskUndefined(hoverData) && (selectedIndex = objIndex);
        hoverData != null && instanceOf(hoverData, 7) && instanceOf(dataObj, 18) && maskUndefined(castTo(dataObj, 18).cell.row) === maskUndefined(hoverData)?$showElementInNormalColor(this, ge, objIndex):hoverData == null || maskUndefined(dataObj) === maskUndefined(hoverData) || inShowAsFiltered && instanceOf(dataObj, 18) && castTo(dataObj, 18).highlightAlways || !!legend && selectedIndex == legend.itemsBeforeOther && objIndex >= legend.itemsBeforeOther && legend.hoverFromLegend?$showElementInNormalColor(this, ge, objIndex):$showElementInGray(this, ge);
      }
    }
    if (this.graph.dependentComps) {
      for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        depComp.setHoverEffects(hoverData, rnd);
      }
    }
    hoverData == null || !hoverFromLegend || selectedIndex < itemsBeforeOther || this.graph.data_0.numVisibleRows <= itemsBeforeOther + 1?this.setHoverText_0(rnd, hoverData):hoverData != null && this.setHoverText_0(rnd, null);
    return true;
  }
   else {
    this.setHoverText_0(rnd, hoverData);
  }
  return false;
}
;
_.setHoverText_0 = function setHoverText_1(rnd, hoverData){
  var current, hoverLabel, hoverPosRect, numberFormatter;
  $removeHints(this.graph);
  this.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this.graph);
    if (instanceOf(hoverData, 82)) {
      current = castTo(hoverData, 82);
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this.graph, current.hoverText);
      numberFormatter = this.graph.hoverNumberFormatter;
      hoverPosRect = $duplicate_5(current.rect);
      $setY_0(hoverPosRect, $getCenterY(current.rect));
      $addPrimary_0(hoverLabel, rnd, numberFormatter, current.cell, hoverPosRect, 0);
    }
  }
}
;
_.barHeight = 22;
_.fontSize = 16;
_.funnelStemHeightPercent = 0;
_.funnelStemWidthPercent = 30;
_.heightCalculationMethod = 0;
_.showText = true;
_.sideDatalabelMaxWidth = 0;
_.sideLabelTruncated = false;
_.textMargin = 10;
var Lcom_domo_charting_graphs_HandlerFunnel_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerFunnel', 200);
function $createDrawObjectsForFrame_1(this$static, rnd, curTime){
  var attrs, doShape, ge, geDO, geLabel, labelColor, pctComplete, rectInfo, rowIndex, shape_0, srsColor, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 116)) {
        rectInfo = castTo(srsInfo, 116);
        if (rectInfo.animInfo) {
          rowIndex = $getCurRowIndex(rectInfo.cell);
          attrs = null;
          this$static.attrsList.array.length > 0 && (attrs = castTo($get_2(this$static.attrsList, rowIndex), 163));
          pctComplete = $getPercentComplete(rectInfo.animInfo, curTime);
          shape_0 = $getShapePct(rectInfo, pctComplete);
          ge = new GraphicElement;
          $addShape_0(ge, shape_0, rectInfo);
          $addGraphicElement_0(this$static.graph, ge);
          if (pctComplete >= 1) {
            geDO = new GraphicElement;
            doShape = new CFShape_0(rectInfo.doPath, new CFFill(rectInfo.doColor), null);
            $addShape_0(geDO, doShape, rectInfo);
            $addGraphicElement_0(this$static.graph, geDO);
            if (!!attrs && attrs.showLabel) {
              srsColor = rectInfo.fill_0.color_0;
              labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, srsColor);
              geLabel = ($clinit_StrUtil() , drawTextInBounds(rnd, $getInflated(rectInfo.rect, -5), $getRowName(rectInfo.cell), new CFFont_0(null, this$static.fontSize, labelColor), HALIGN_CENTER, VALIGN_MIDDLE, 10, null, null));
              $addGEItems(ge, geLabel);
            }
          }
        }
      }
    }
  }
}

function $drawAllSlices(this$static, rnd){
  var attrs, doShape, ge, geDO, geLabel, labelColor, rectInfo, rowIndex, shape_0, srsColor, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 116)) {
        rectInfo = castTo(srsInfo, 116);
        rowIndex = $getCurRowIndex(rectInfo.cell);
        attrs = null;
        this$static.attrsList.array.length > 0 && (attrs = castTo($get_2(this$static.attrsList, rowIndex), 163));
        shape_0 = new CFShape_1(rectInfo.rect, rectInfo.fill_0, rectInfo.stroke_0);
        ge = new GraphicElement;
        $addShape_0(ge, shape_0, rectInfo);
        $addGraphicElement_0(this$static.graph, ge);
        geDO = new GraphicElement;
        doShape = new CFShape_0(rectInfo.doPath, new CFFill(rectInfo.doColor), null);
        $addShape_0(geDO, doShape, rectInfo);
        $addGraphicElement_0(this$static.graph, geDO);
        if (!!attrs && attrs.showLabel) {
          srsColor = rectInfo.fill_0.color_0;
          labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, srsColor);
          geLabel = ($clinit_StrUtil() , drawTextInBounds(rnd, $getInflated(rectInfo.rect, -5), $getRowName(rectInfo.cell), new CFFont_0(null, this$static.fontSize, labelColor), HALIGN_CENTER, VALIGN_MIDDLE, 10, null, null));
          $addGEItems(ge, geLabel);
        }
      }
    }
  }
}

function $getPercentageValStr(this$static, index_0, overall){
  var percentVal, serVal, total;
  total = $getValue($getFirstCell($getRow(this$static.graph.data_0, 0)));
  !overall && this$static.percOfPrevious && index_0 > 0 && (total = $getValue($getFirstCell($getRow(this$static.graph.data_0, index_0 - 1))));
  serVal = $getValue($getFirstCell($getRow(this$static.graph.data_0, index_0)));
  percentVal = serVal / total * 100;
  return $formatPercentNumber(this$static.graph.numberFormatter, percentVal, false);
}

function $setHoverEffects_3(this$static, hoverData, rnd){
  var dataObj, depComp, depComp$iterator, ge, ge$iterator, inShowAsFiltered;
  if ($hasInteractions(this$static.graph)) {
    inShowAsFiltered = !!this$static.graph.chart && $usingCardBus(this$static.graph.chart) && this$static.graph.data_0.hasFilteredRows;
    for (ge$iterator = this$static.graph.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this$static.graph, ge);
      dataObj != null && (hoverData != null && instanceOf(hoverData, 7) && instanceOf(dataObj, 18) && maskUndefined(castTo(dataObj, 18).cell.row) === maskUndefined(hoverData)?$showElementInNormalColor_0(this$static, ge, dataObj):maskUndefined(dataObj) !== maskUndefined(hoverData) && hoverData != null && (!inShowAsFiltered || instanceOf(dataObj, 18) && !castTo(dataObj, 18).highlightAlways)?$showElementInGray(this$static, ge):$showElementInNormalColor_0(this$static, ge, dataObj));
    }
    if (this$static.graph.dependentComps) {
      for (depComp$iterator = new ArrayList$1(this$static.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        depComp.setHoverEffects(hoverData, rnd);
      }
    }
    (this$static.graph.treatAsSmall || this$static.graph.simplifiedForMobile || this$static.graph.verticalLayout) && $setHoverText_2(this$static, hoverData);
    return true;
  }
   else {
    $setHoverText_2(this$static, hoverData);
  }
  return false;
}

function $setHoverText_2(this$static, hoverData){
  var current, hoverLabel;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 18)) {
      current = castTo(hoverData, 18);
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this$static.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this$static.graph, current.hoverText);
    }
  }
}

function $setItemLabelDisplayProperties(this$static, rnd, row, pixelsPerItem, fontSize, colWidth, belowColWidth){
  var displayBelow, height, showLabel, size_0, text_0;
  displayBelow = false;
  showLabel = true;
  text_0 = $getName(row);
  height = $getValue($getFirstCell(row)) * pixelsPerItem;
  size_0 = rnd.measureText_0(text_0, new CFFont_0(null, fontSize, ($clinit_CFColor() , BLACK)));
  size_0.width_0 < colWidth - 4 && size_0.height_0 > height - 4 && (size_0.width_0 > belowColWidth?(showLabel = false):(displayBelow = true));
  this$static.graph.bnds.width_0 < 400 && (showLabel = false);
  return new ItemAttrs(displayBelow, showLabel, fontSize);
}

function $setLabelDisplayProperties(this$static, rnd, colWidth, falloutOffsetX, pixelsPerItem, fontSize){
  var attrs, belowColWidth, i;
  belowColWidth = colWidth - 4 - falloutOffsetX * 2;
  for (i = 0; i < $getNumRows(this$static.graph.data_0); i++) {
    attrs = $setItemLabelDisplayProperties(this$static, rnd, $getRow(this$static.graph.data_0, i), pixelsPerItem, fontSize, colWidth, belowColWidth);
    if (!attrs.showLabel && fontSize > 10) {
      attrs = $setItemLabelDisplayProperties(this$static, rnd, $getRow(this$static.graph.data_0, i), pixelsPerItem, 10, colWidth, belowColWidth);
      attrs.showLabel && (this$static.fontSize = 10);
    }
    $add_1(this$static.attrsList, attrs);
  }
}

function $setupForCardSize(this$static){
  var height, width_0;
  width_0 = this$static.graph.bnds.width_0;
  height = this$static.graph.bnds.height_0;
  if (this$static.graph.bnds.width_0 < 800 && this$static.graph.bnds.height_0 > 350) {
    this$static.barBnds = new CFRect(5, 5, width_0 - 30, height - 70);
    this$static.fontSize = 10;
    this$static.textMargin = 4;
    this$static.showText = false;
    this$static.falloutOffset = 14;
  }
   else if (this$static.graph.bnds.width_0 < 800 && this$static.graph.bnds.height_0 <= 350) {
    this$static.barBnds = new CFRect(5, 5, width_0 - 10, height - 10);
    this$static.fontSize = 12;
    this$static.textMargin = 0;
    this$static.showText = false;
    this$static.falloutOffset = 8;
  }
   else {
    width_0 > 800 && height > 350?(this$static.barBnds = new CFRect(5, 5, width_0 - 275, height - 10)):(this$static.barBnds = new CFRect(5, 5, width_0 - 10, height - 10));
    this$static.fontSize = 12;
    this$static.textMargin = 7;
    this$static.showText = true;
    this$static.falloutOffset = 18;
  }
  if (!!$getLegend(this$static.graph) && instanceOf($getLegend(this$static.graph), 65)) {
    $setY_0(this$static.barBnds, this$static.barBnds.y_0 + 30);
    $setHeight(this$static.barBnds, this$static.barBnds.height_0 - 30);
  }
}

function $showElementInNormalColor_0(this$static, ge, dataObj){
  var fillColor, font, labelColor, objIndex, sd, shapeAry, ti, ti$iterator, treeRect;
  objIndex = $indexOf_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, dataObj, 0);
  sd = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, objIndex), 18);
  shapeAry = ge.shapeAry;
  treeRect = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
  !!treeRect && $isRect(treeRect)?$setFill_0(treeRect, sd.fill_0):instanceOf(sd, 116) && $setFill_0(treeRect, new CFFill(castTo(sd, 116).doColor));
  treeRect.stroke_0 = null;
  if (ge.textAry) {
    for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      font = ti.font_0;
      fillColor = sd.fill_0.color_0;
      labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, fillColor);
      font.color_0 = labelColor;
    }
  }
}

function HandlerFoldedFunnel(){
  HandlerFunnel.call(this);
  this.attrsList = new ArrayList;
}

defineClass(201, 200, {201:1}, HandlerFoldedFunnel);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_5(chart){
  var bnds, legend, totalLegend;
  bnds = this.graph.bnds;
  if (bnds.width_0 >= 800 && bnds.height_0 > 350) {
    if (!!this.graph.dependentComps && this.graph.dependentComps.array.length > 0)
      return;
    totalLegend = new TotalLegend(chart, this.graph);
    $setBounds_0(totalLegend, round_int(bnds.x_0 + bnds.width_0) - 200, 30, 170, round_int(bnds.height_0));
    $addDependentComp(this.graph, totalLegend);
  }
   else if (this.graph.chart.mobile && $hasInteractions(this.graph) && bnds.width_0 > 250 && bnds.height_0 > 150) {
    legend = new LegendPie_0(chart, this.graph);
    legend.isSingleLineHoverLegend = true;
    $setBounds_0(legend, 10, 0, round_int(bnds.width_0) - 20, 30);
    legend.valueDisplayType = 1;
    legend.showPercentOfPrevious = true;
    $addDependentComp(this.graph, legend);
  }
   else 
    $clearDependentComponents(this.graph);
}
;
_.createDrawObjectsForFrame_0 = function createDrawObjectsForFrame_5(rnd, type_0, curTime){
  $createDrawObjectsForFrame_1(this, rnd, curTime);
}
;
_.format_0 = function format_11(rnd){
  var attrs, bnds, colWidth, color_0, falloutOffsetX, falloutOffsetY, fill, font, gBnds, ge, hasFilteredData, height, i, inShowAsFilteredMode, itemFontSize, lastColor, lastHeight, left, lineShape, numSeries, overallConversionText, overallConversionVal, path, pixelsPerItem, rowInfo, showAsFiltered, sliceRect, srsInfo, srsInfoList, text_0, textRect, tiOverallText, tiOverallVal, top_0, value_0, amt, newRed, newGreen, newBlue;
  bnds = this.graph.bnds;
  $setAutoAbbreviateState(this.graph.numberFormatter, false);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredRows;
  this.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
  $sortRowsDesc(this.graph.data_0, SORT_SUM, false);
  this.fontSize = 14;
  $setupForCardSize(this);
  srsInfoList = new ArrayList;
  colWidth = toDouble_0(fromDouble_0($wnd.Math.round(this.barBnds.width_0 / $getNumRows(this.graph.data_0))));
  falloutOffsetX = this.falloutOffset;
  falloutOffsetY = this.falloutOffset;
  pixelsPerItem = (this.barBnds.height_0 - falloutOffsetY) / $getValue($getFirstCell($getRow(this.graph.data_0, 0)));
  this.showText && $setLabelDisplayProperties(this, rnd, colWidth, falloutOffsetX, pixelsPerItem, this.fontSize);
  lastHeight = 0;
  lastColor = null;
  overallConversionVal = $getPercentageValStr(this, $getNumRows(this.graph.data_0) - 1, true);
  overallConversionText = this.graph.getLocalizedString('OVERALL_CONVERSION');
  if (this.graph.bnds.width_0 < 800 && this.graph.bnds.height_0 > 350) {
    ge = new GraphicElement;
    font = new CFFont_0(null, 12, $getTextColor(this.graph.chart.palette));
    tiOverallText = new CFTextItem_2(overallConversionText, font, round_int(this.barBnds.x_0), round_int($getBottom(this.barBnds)) + 13);
    tiOverallVal = new CFTextItem_2(overallConversionVal, font, round_int(this.barBnds.x_0), round_int($getBottom(this.barBnds)) + 30);
    lineShape = new CFShape_0(new CFPath_1(this.barBnds.x_0, $getBottom(this.barBnds) + 10, $getRight(this.barBnds), $getBottom(this.barBnds) + 10), null, new CFStroke_1('#E4E5E5', 1));
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, lineShape);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, tiOverallText);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, tiOverallVal);
    $addBackGraphicElement(this.graph, ge);
  }
  numSeries = $getNumRows(this.graph.data_0);
  numSeries > 300 && (numSeries = 300);
  for (i = 0; i < numSeries; i++) {
    attrs = null;
    this.attrsList.array.length > 0 && (attrs = castTo($get_2(this.attrsList, i), 163));
    rowInfo = $getRow(this.graph.data_0, i);
    left = bnds.x_0 + this.barBnds.x_0 + i * colWidth;
    top_0 = bnds.y_0 + this.barBnds.y_0;
    color_0 = $getColorForIndex_0(this.graph, i);
    value_0 = $getValue($getFirstCell(rowInfo));
    height = value_0 * pixelsPerItem;
    sliceRect = new CFRect(left, top_0, colWidth - 1, height);
    showAsFiltered = inShowAsFilteredMode && rowInfo.showAsFiltered;
    showAsFiltered && (color_0 = $deSaturateAndLighten(color_0, 0.9, 0.4));
    fill = new CFFill(color_0);
    srsInfo = new SrsFoldFunnelInfo($getFirstCell(rowInfo), sliceRect, fill);
    inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (srsInfo.highlightAlways = true);
    srsInfoList.array[srsInfoList.array.length] = srsInfo;
    if (this.showText && !!attrs && attrs.showLabel) {
      itemFontSize = attrs.fontSize;
      if (attrs.displayBelow) {
        textRect = new CFRect(left, top_0 + height + 5, colWidth, itemFontSize * 3);
        $addGraphicElement_0(this.graph, ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, $getName(rowInfo), new CFFont_0(null, itemFontSize, $getTextColor(this.graph.chart.palette)), HALIGN_CENTER, 0, 5, null, null)));
      }
       else {
        $getLabelColorForSeriesColor(this.graph.colorMgr, color_0);
        textRect = new CFRect(left, top_0, colWidth, height);
        $addGraphicElement_0(this.graph, ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, $getName(rowInfo), new CFFont_0(null, itemFontSize, ($clinit_CFColor() , WHITE)), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null)));
      }
    }
    if (i > 0) {
      path = 'M ' + left + ' ' + (top_0 + height);
      path += ' L ' + (left + falloutOffsetX) + ' ' + (top_0 + height + falloutOffsetY);
      path += ' L ' + (left + falloutOffsetX) + ' ' + (top_0 + lastHeight + falloutOffsetY);
      path += ' L ' + left + ' ' + (top_0 + lastHeight);
      path += ' L ' + left + ' ' + (top_0 + height);
      $setDropOutVals(srsInfo, new CFPath_7(path), (amt = toInt_0(fromDouble_0($wnd.Math.round(-25.5))) , newRed = lastColor.red + amt , newRed > 255 && (newRed = 255) , newRed < 0 && (newRed = 0) , newGreen = lastColor.green + amt , newGreen > 255 && (newGreen = 255) , newGreen < 0 && (newGreen = 0) , newBlue = lastColor.blue + amt , newBlue > 255 && (newBlue = 255) , newBlue < 0 && (newBlue = 0) , new CFColor_0(newRed, newGreen, newBlue, lastColor.alpha_0)));
    }
    lastHeight = height;
    lastColor = color_0;
  }
  gBnds = this.graph.bnds;
  if (this.graph.bnds.width_0 < 800 && this.graph.bnds.height_0 <= 350 && !this.graph.isThumbnail && gBnds.width_0 > 200 && gBnds.height_0 > 75 || gBnds.height_0 < 350 && gBnds.height_0 > 75 && gBnds.width_0 > 300) {
    text_0 = overallConversionText + '\n' + overallConversionVal;
    font = new CFFont_0(null, 12, $getTextColor(this.graph.chart.palette));
    textRect = new CFRect(this.barBnds.x_0, $getBottom(this.barBnds) - 40, this.barBnds.width_0, 40);
    ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, textRect, text_0, font, HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
    $addBackGraphicElement(this.graph, ge);
  }
  $add_1(this.graph.seriesShapes, new SeriesInfo(srsInfoList, null));
  this.graph.setNeedsFormat(false);
  $drawAllSlices(this, rnd);
}
;
_.freeResources = function freeResources_20(dataToKeep){
  $freeResources_19(this, dataToKeep);
  this.barBnds = null;
  this.attrsList = null;
}
;
_.processChartOptions = function processChartOptions_14(){
  var key, key$iterator, value_0;
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      key == 'display_perc_of_prev' && (this.percOfPrevious = isTrue(value_0));
    }
  }
}
;
_.resetForTypeChange = function resetForTypeChange_6(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
  !!this.graph.data_0 && $sortRows(this.graph.data_0, 0);
}
;
_.setData = function setData_13(data_0){
  var theData;
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.graph.data_0 = this.currentViewDataGrid;
    $setRowsAsNonTimeData(this.graph.data_0);
  }
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
  this.graph.data_0.numVisibleRows > 300 && $warnNotAllDataShown(this.graph.chart);
}
;
_.setFrame = function setFrame_9(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, rect, rect$iterator, srsInfo, srsInfo$iterator, startOffset, totalOffset;
  if (this.graph.seriesShapes.array.length > 0) {
    if (!!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && !castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).animInfo) {
      for (srsInfo$iterator = new ArrayList$1(this.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 19);
        if ($equals_2(type_0, 'VBar2')) {
          startOffset = 0;
          totalOffset = srsInfo.srsShapeList.array.length * 50;
          for (rect$iterator = new ArrayList$1(srsInfo.srsShapeList); rect$iterator.i < rect$iterator.this$01.array.length;) {
            rect = castTo($next_3(rect$iterator), 18);
            animInfo = new AnimInfoSrs(add_1(startTime, startOffset), sub_1(endTime, totalOffset), easingType);
            rect.animInfo = animInfo;
            startOffset += 50;
            totalOffset -= 50;
          }
        }
         else {
          for (rect$iterator = new ArrayList$1(srsInfo.srsShapeList); rect$iterator.i < rect$iterator.this$01.array.length;) {
            rect = castTo($next_3(rect$iterator), 18);
            animInfo = new AnimInfoSrs(startTime, endTime, easingType);
            rect.animInfo = animInfo;
          }
        }
      }
    }
    this.graph.geAry.clear_0();
    $createDrawObjectsForFrame_1(this, rnd, curTime);
    compare_22(curTime, endTime) >= 0 && $hasDataLabels(this.graph) && $drawDataLabels(this.graph.dataLabel, rnd, false);
  }
}
;
_.setHoverData = function setHoverData_15(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = $setHoverData_1(this, data_0, rnd);
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_3(this, this.hoverData, rnd) || redrawNeeded;
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_6(hoverData, rnd){
  return $setHoverEffects_3(this, hoverData, rnd);
}
;
_.falloutOffset = 0;
_.percOfPrevious = false;
var Lcom_domo_charting_graphs_HandlerFoldedFunnel_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerFoldedFunnel', 201);
function $setHoverText_3(this$static, rnd, hoverData){
  var current, hoverLabel, hoverPosRect, numberFormatter;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 82)) {
      current = castTo(hoverData, 82);
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this$static.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this$static.graph, current.hoverText);
      numberFormatter = this$static.graph.hoverNumberFormatter;
      hoverPosRect = $duplicate_5(current.rect);
      $setY_0(hoverPosRect, $getCenterY(current.rect));
      $addPrimary_0(hoverLabel, rnd, numberFormatter, current.cell, hoverPosRect, 0);
    }
  }
}

function HandlerFunnelBar(){
  HandlerFunnel.call(this);
}

defineClass(337, 200, {}, HandlerFunnelBar);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_6(chart){
  (this.graph.treatAsSmall || this.graph.simplifiedForMobile) && $setHasInteractions(this.graph, false);
}
;
_.format_0 = function format_12(rnd){
  var barTop, bnds, border, cell, color_0, curRow, ge, geItem, geText, grayAngleShape, hasFilteredData, hoverLabel, inShowAsFilteredMode, item_0, lastAngleLeft, lastBarBottom, left, name_0, nextWidth, numSeries, path, pixelsPerItem, rect, rectInfo, rectShape, row, sectionHeight, showAsFiltered, textRect, textTop, value_0, width_0;
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
  $sortRowsDesc(this.graph.data_0, SORT_SUM, false);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredRows;
  bnds = $duplicate_5(this.graph.bnds);
  $inflate(bnds, -5);
  if (this.graph.bnds.width_0 <= 199 && this.graph.bnds.height_0 <= 115) {
    this.barHeight = 14;
    this.fontSize = 8;
    this.textMargin = 3;
    this.showText = false;
  }
  if ($getNumRows(this.graph.data_0) > 0) {
    ge = new GraphicElement;
    numSeries = $getNumRows(this.graph.data_0);
    numSeries > 100 && (numSeries = 100);
    sectionHeight = bnds.height_0 / numSeries;
    lastAngleLeft = -1;
    lastBarBottom = -1;
    sectionHeight < this.barHeight && (this.barHeight = sectionHeight);
    hoverLabel = $getOrCreateHoverLabel(this.graph);
    for (row = 0; row < numSeries; row++) {
      barTop = bnds.y_0 + ((row + 1) * sectionHeight - this.barHeight);
      textTop = barTop - (this.fontSize + this.textMargin);
      pixelsPerItem = bnds.width_0 / $getCellValueByCellIndex($getRow(this.graph.data_0, row), 0);
      if (lastBarBottom != -1) {
        path = new CFPath;
        $add(path, new CFPathElement_0(0, lastAngleLeft, lastBarBottom));
        $add(path, new CFPathElement_0(1, bnds.x_0, barTop));
        $add(path, new CFPathElement_0(1, bnds.width_0 + 1, barTop));
        $add(path, new CFPathElement_0(1, bnds.width_0 + 1, lastBarBottom));
        $add(path, new CFPathElement);
        grayAngleShape = new CFShape_0(path, new CFFill_1('#D4D4D480'), null);
        !ge.shapeAry && (ge.shapeAry = new ArrayList);
        $add_1(ge.shapeAry, grayAngleShape);
      }
      border = new CFStroke(this.borderColor, 1);
      for (item_0 = row; item_0 < numSeries; item_0++) {
        geItem = new GraphicElement;
        curRow = $getRow(this.graph.data_0, item_0);
        value_0 = $getCellValueByCellIndex(curRow, 0);
        cell = $getFirstCell(curRow);
        color_0 = $getColorForIndex_0(this.graph, item_0);
        left = bnds.width_0 - value_0 * pixelsPerItem;
        width_0 = bnds.width_0 - left;
        left += bnds.x_0;
        nextWidth = 0;
        item_0 < numSeries - 1 && (nextWidth = toDouble_0(fromDouble_0($wnd.Math.round($getCellValueByCellIndex($getRow(this.graph.data_0, item_0 + 1), 0) * pixelsPerItem))));
        nextWidth > 0 && (width_0 -= nextWidth);
        item_0 == row + 1 && (lastAngleLeft = left);
        item_0 == numSeries - 1 && (color_0 = this.endColor);
        rect = new CFRect(left, barTop, width_0, this.barHeight);
        showAsFiltered = inShowAsFilteredMode && curRow.showAsFiltered;
        showAsFiltered && (color_0 = $deSaturateAndLighten(color_0, 0.9, 0.4));
        rectInfo = new SrsRectInfo(cell, rect, new CFFill(color_0), border);
        inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (rectInfo.highlightAlways = true);
        rectShape = new CFShape_1(rectInfo.rect, rectInfo.fill_0, rectInfo.stroke_0);
        $setHoverText_8(rectShape, $getFormattedHoverText_0(hoverLabel, this.graph.hoverNumberFormatter, rectInfo.cell));
        $addShape_0(geItem, rectShape, rectInfo);
        $addGraphicElement_0(this.graph, geItem);
      }
      lastBarBottom = barTop + this.barHeight + 1;
      if (this.showText && sectionHeight >= this.barHeight + this.fontSize + this.textMargin) {
        textRect = new CFRect(3, textTop, bnds.width_0 - 3, 25);
        name_0 = $getName($getRow(this.graph.data_0, row));
        geText = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, textRect, name_0, new CFFont_0(null, this.fontSize, new CFColor_2('#54585A')), 0, VALIGN_MIDDLE, 5, null, null));
        $addFrontGraphicElement_0(this.graph, geText);
      }
    }
    $addBackGraphicElement(this.graph, ge);
  }
  this.graph.setNeedsFormat(false);
}
;
_.resetForTypeChange = function resetForTypeChange_7(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
  !!this.graph.data_0 && $sortRows(this.graph.data_0, 0);
}
;
_.setData = function setData_14(data_0){
  var theData;
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.graph.data_0 = this.currentViewDataGrid;
    $setRowsAsNonTimeData(this.graph.data_0);
  }
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
  this.graph.data_0.numVisibleRows > 100 && $warnNotAllDataShown(this.graph.chart);
}
;
_.setFrame = function setFrame_10(type_0, easingType, startTime, curTime, endTime, rnd){
  $createDrawObjectsForFrame_0(this, curTime);
}
;
_.setHoverEffects_0 = function setHoverEffects_7(hoverData, rnd){
  if ($hasInteractions(this.graph)) {
    $setHoverText_3(this, rnd, hoverData);
    return true;
  }
   else {
    $setHoverText_3(this, rnd, hoverData);
  }
  return false;
}
;
_.setHoverText_0 = function setHoverText_2(rnd, hoverData){
  $setHoverText_3(this, rnd, hoverData);
}
;
var Lcom_domo_charting_graphs_HandlerFunnelBar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerFunnelBar', 337);
function $addBarPastEndOfScale(rect, valueScale, bar, shape_0, ge){
  var color_0, maxPos, pastEndRect, pastEndShape;
  maxPos = $getMinPosition_1(valueScale) + $getPositionForTime(valueScale, valueScale.adjustedMaxTime);
  if (rect.x_0 + rect.width_0 > maxPos) {
    color_0 = shape_0.stroke_0.color_0;
    pastEndRect = new CFRect(maxPos, rect.y_0, rect.x_0 + rect.width_0 - maxPos, rect.height_0);
    pastEndShape = new CFShape_1(pastEndRect, new CFFill(color_0), null);
    $addShape_0(ge, pastEndShape, bar);
  }
}

function $drawAllBars_0(this$static, index_0, hoverData){
  !!this$static.geCurTime && this$static.graph.geAry.remove(this$static.geCurTime);
  $drawAllBars(this$static, index_0, hoverData);
  !!this$static.geCurTime && $addGraphicElement_0(this$static.graph, this$static.geCurTime);
}

function $getBarRect_0(minCatPos, catPos, minValPos, startPos, endPos, barWidth){
  var length_0, x_0, y_0;
  x_0 = minValPos + startPos;
  y_0 = minCatPos + catPos - barWidth / 2;
  length_0 = endPos - startPos;
  barWidth <= 1 && (y_0 = toDouble_0(fromDouble_0($wnd.Math.round(y_0))));
  return new CFRect(x_0, y_0, length_0, barWidth);
}

function $getBarWidth_0(this$static, numRows){
  var barWidth, barWidthRatio, baseScale, maxBarWidth, sGraph;
  maxBarWidth = 40;
  !!this$static.graph.bnds && this$static.graph.bnds.width_0 < 500 && (maxBarWidth = 30);
  (this$static.graph.treatAsSmall || this$static.graph.simplifiedForMobile) && (maxBarWidth = 20);
  sGraph = castTo(this$static.graph, 40);
  baseScale = $getCategoryScale(sGraph);
  if (this$static.fixedBarWidth != -1) {
    return this$static.fixedBarWidth;
  }
   else {
    barWidthRatio = this$static.barWidthPercent / 100;
    this$static.barWidthPercentOverride > 0 && (barWidthRatio = this$static.barWidthPercentOverride / 100);
    if (baseScale) {
      barWidth = baseScale.getLength() / numRows * barWidthRatio;
      barWidth < 1 && (barWidth = 1);
      barWidth > maxBarWidth && (barWidth = maxBarWidth);
      return barWidth;
    }
  }
  return 0;
}

function $getCurDateTimeValuePos(valueScale){
  var curMillis, date, dayOfMonth, month, year;
  date = new Date_0;
  year = date.jsdate.getFullYear() - $intern_14;
  month = date.jsdate.getMonth();
  dayOfMonth = date.jsdate.getDate();
  date = new Date_1(year, month, dayOfMonth);
  curMillis = fromDouble_0(date.jsdate.getTime());
  if (gte_0(curMillis, valueScale.adjustedMinTime) && lte(curMillis, valueScale.adjustedMaxTime))
    return toDouble_0(sub_1(curMillis, valueScale.adjustedMinTime)) * valueScale.ratio;
  return null;
}

function $getGanttDataForNumberRowNames(data_0){
  var curRow, i, metaZero, origCell, row, row$iterator, rowMap;
  rowMap = new HashMap;
  for (row$iterator = data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    origCell = castTo($get_1(row.cellMap, valueOf(0)), 16);
    $equals_2($getOrigColumnType(data_0), 'LONG')?$setName(row, '' + toString_23(fromDouble_0($getValue(origCell)))):$equals_2($getOrigColumnType(data_0), 'DOUBLE')?$setName(row, '' + $getValue(origCell)):$setName(row, '' + $getValueStrOrValueNoFormat(origCell));
    curRow = castTo($getStringValue(rowMap, $getName(row)), 7);
    if (curRow) {
      metaZero = $getMetaDataCell(origCell, 0);
      origCell.value_0 = 0;
      $setValueStr(origCell, metaZero.valueStr);
      $setTimeMS(origCell, metaZero.timeMS);
      $stripFirstMetaDataCell(origCell);
      $addItem_0(curRow, origCell, true, $size(curRow.cellMap));
      row.altName = '!!!DELETEME!!!';
    }
     else {
      metaZero = $getMetaDataCell(origCell, 0);
      origCell.value_0 = 0;
      $setValueStr(origCell, metaZero.valueStr);
      $setTimeMS(origCell, metaZero.timeMS);
      $stripFirstMetaDataCell(origCell);
      $setParentName(row, $getColName(origCell));
      $putStringValue(rowMap, $getName(row), row);
    }
  }
  !!data_0.metadata && data_0.metadata.size_1() > 1 && data_0.metadata.remove_2(0);
  for (i = data_0.rows_0.size_1() - 1; i >= 0; i--) {
    $equals_2($getName(castTo(data_0.rows_0.get_1(i), 7)), '!!!DELETEME!!!') && data_0.rows_0.remove_2(i);
  }
  $clearHiddenRowsAndResetRowCount(data_0);
  return data_0;
}

function $getGanttFormatData(this$static, data_0){
  var dupData, rowLimit;
  rowLimit = $getMobileLimit(this$static.graph, 500, $intern_11);
  (rowLimit < $getNumRows(data_0) || rowLimit < $getMaxCellsPerRow(data_0)) && $warnNotAllDataShown(this$static.graph.chart);
  dupData = $cloneNoGroupItemValueSeries(data_0, rowLimit);
  $getNumRows(data_0) > 0 && castTo($get_1($getRow(data_0, 0).cellMap, valueOf(0)), 16).valueStr == null && eq(castTo($get_1($getRow(data_0, 0).cellMap, valueOf(0)), 16).timeMS, 0) && (dupData = $getGanttDataForNumberRowNames(dupData));
  $isPctCompleteChart(this$static)?(this$static.CATEGORY = 2):(this$static.CATEGORY = 1);
  $createColumnsBasedOnMetadata(dupData, this$static.CATEGORY);
  !!$getMetadataInfo(this$static.graph.data_0, this$static.CATEGORY) && $getName($getMetadataInfo(this$static.graph.data_0, this$static.CATEGORY)) != null && $getMetadataInfo(this$static.graph.data_0, this$static.CATEGORY).type_0 != null?(this$static.graph.hoverLabelText = '%_CATEGORY : %_ITEM : %_STARTDATE - %_ENDDATE'):(this$static.graph.hoverLabelText = '%_ITEM : %_STARTDATE - %_ENDDATE');
  $getCategoryScale(this$static.sGraph).drawBaseline = true;
  $getCategoryScale(this$static.sGraph).endMargin = 3;
  $getValueScale(this$static.sGraph).drawBaseline = true;
  $getValueScale(this$static.sGraph).endMargin = 3;
  return dupData;
}

function $isPctCompleteChart(this$static){
  if (this$static.graph.typeAttributes.isGanttPercent)
    return true;
  return false;
}

function $setDataToAllDayEvents(this$static){
  var cell, cell$iterator, col, col$iterator, data_0, date, endDateCell, entry, outerIter;
  data_0 = this$static.graph.data_0;
  for (col$iterator = data_0.cols_0.iterator(); col$iterator.hasNext_0();) {
    col = castTo(col$iterator.next_1(), 7);
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (!!cell && neq(cell.timeMS, 0)) {
        if (neq(cell.timeMS, 0)) {
          date = new Date_4(cell.timeMS);
          date.jsdate.setHours(0);
          $fixDaylightSavings(date, 0);
          $setMinutes(date, 0);
          $setSeconds(date, 0);
          $setTimeMS(cell, fromDouble_0(date.jsdate.getTime()));
        }
      }
      if (!!cell && !!$getMetaDataCell(cell, 0)) {
        endDateCell = $getMetaDataCell(cell, 0);
        if (neq(endDateCell.timeMS, 0)) {
          date = new Date_4(endDateCell.timeMS);
          date.jsdate.setHours(23);
          $fixDaylightSavings(date, 23);
          $setMinutes(date, 59);
          $setSeconds(date, 59);
          $setTimeMS(endDateCell, fromDouble_0(date.jsdate.getTime()));
        }
      }
    }
  }
}

function HandlerGantt(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(160, 60, {60:1, 160:1, 64:1}, HandlerGantt);
_.addBarShapeToGEAry = function addBarShapeToGEAry_0(bar, shape_0){
  var color_0, curMillis, curTimePos, ge, pctComplete, pctCompleteCell, pctCompleteShape, rect, valueScale;
  ge = new GraphicElement;
  valueScale = castTo($getValueScale(this.sGraph), 56);
  if ($isPctCompleteChart(this)) {
    pctCompleteCell = $getMetaDataCell(bar.cell, PERCENT_COMPLETE);
    if (pctCompleteCell) {
      pctComplete = $getValue(pctCompleteCell);
      this.maxPercentComplete > 1 && (pctComplete *= 0.01);
      pctComplete > 1 && (pctComplete = 1);
      rect = $getRect(shape_0);
      this.fillEmptyEndDates && $addBarPastEndOfScale(rect, valueScale, bar, shape_0, ge);
      $setWidth(rect, rect.width_0 * pctComplete);
      color_0 = shape_0.stroke_0.color_0;
      pctCompleteShape = new CFShape_1(rect, new CFFill(color_0), null);
      $addShape_0(ge, pctCompleteShape, bar);
    }
  }
   else if (this.fillToCurDate) {
    curTimePos = $getCurDateTimeValuePos(valueScale);
    if (curTimePos == null) {
      curMillis = fromDouble_0((new Date_0).jsdate.getTime());
      gt(curMillis, valueScale.adjustedMaxTime)?(curTimePos = $getPositionForTime(valueScale, valueScale.adjustedMaxTime)):(curTimePos = $getPositionForTime(valueScale, valueScale.adjustedMinTime));
    }
    curTimePos = (checkCriticalNotNull(curTimePos) , curTimePos) + $getMinPosition_1(valueScale);
    rect = $getRect(shape_0);
    this.fillEmptyEndDates && $addBarPastEndOfScale(rect, valueScale, bar, shape_0, ge);
    rect.x_0 < (checkCriticalNotNull(curTimePos) , curTimePos) && rect.x_0 + rect.width_0 > (checkCriticalNotNull(curTimePos) , curTimePos)?$setWidth(rect, (checkCriticalNotNull(curTimePos) , curTimePos) - rect.x_0):rect.x_0 >= (checkCriticalNotNull(curTimePos) , curTimePos) && (rect.width_0 = 0.1);
    color_0 = shape_0.stroke_0.color_0;
    pctCompleteShape = new CFShape_1(rect, new CFFill(color_0), null);
    $addShape_0(ge, pctCompleteShape, bar);
  }
  $addShape_0(ge, shape_0, bar);
  $addGraphicElement_0(this.graph, ge);
}
;
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_7(chart){
  this.sGraph.legend = new LegendScaledGraph(chart, this.graph.name_0 + '_legend', this.sGraph, 1);
  $addDependentComp(this.sGraph, this.sGraph.legend);
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_6(sGraph, type_0, curTime, valueScale){
  !!this.geCurTime && this.graph.geAry.remove(this.geCurTime);
  $createDrawObjectsForFrame(this, sGraph, type_0, curTime, valueScale);
  !!this.geCurTime && $addGraphicElement_0(this.graph, this.geCurTime);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_5(sGraph, rows_0, baseScale, valScale, valScale2){
  var barInfo, barList, barRect, barWidth, catScalePos, cell, cell$iterator, curCol, curRow, curTimePos, endDate, endDatePos, entry, fill, fillColor, i, innerBnds, linePath, maxTime, minCatPos, minValuePos, newSrsShapes, numRows, outerIter, pctCompleteCell, pctIsNan, rowIndex, scale, shape_0, srsInfo, srsInfo$iterator, srsShapeInfo, srsShapeInfo$iterator, startDate, startDatePos, stroke, valueScale;
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  this.dontAntiAliasBars = true;
  barWidth = $getBarWidth_0(this, numRows);
  minCatPos = baseScale.getMinPosition();
  rowIndex = 0;
  valueScale = castTo($getValueScale(sGraph), 56);
  minValuePos = $getMinPosition_1(valueScale);
  for (i = 0; i < rows_0.size_1(); i++) {
    curRow = castTo(rows_0.get_1(i), 7);
    if (!curRow)
      continue;
    if (valueScale) {
      barList = new ArrayList;
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(curRow.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        startDate = cell.timeMS;
        endDate = 0;
        fillColor = $getColorForCategoryName_0(this.graph, cell);
        !fillColor && (fillColor = $getColorForSeriesNameOrIndex_0(this.graph, cell.column, $getCurColIndex(cell)));
        fill = new CFFill(fillColor);
        !!$getMetaDataCell(cell, 0) && (endDate = $getMetaDataCell(cell, 0).timeMS);
        if (this.fillEmptyEndDates && compare_22(endDate, 0) == 0) {
          scale = $getScaleByPosition(sGraph, 1);
          !scale && (scale = $getScaleByPosition(sGraph, 3));
          if (!!scale && instanceOf(scale, 56)) {
            maxTime = castTo(scale, 56).adjustedMaxTime;
            endDate = add_1(maxTime, 1187194880);
          }
        }
        if (compare_22(startDate, 0) > 0 && compare_22(endDate, 0) > 0 && !!cell.column && !cell.column.hidden) {
          pctIsNan = false;
          if ($isPctCompleteChart(this)) {
            pctCompleteCell = $getMetaDataCell(cell, PERCENT_COMPLETE);
            !pctCompleteCell || isNaN_0($getValue(pctCompleteCell))?(pctIsNan = true):!!pctCompleteCell && $getValue(pctCompleteCell) > this.maxPercentComplete && (this.maxPercentComplete = $getValue(pctCompleteCell));
          }
          if (!pctIsNan) {
            catScalePos = baseScale.getPositionForValue(rowIndex);
            startDatePos = toDouble_0(sub_1(startDate, valueScale.adjustedMinTime)) * valueScale.ratio;
            endDatePos = toDouble_0(sub_1(endDate, valueScale.adjustedMinTime)) * valueScale.ratio;
            barRect = $getBarRect_0(minCatPos, catScalePos, minValuePos, startDatePos, endDatePos, barWidth);
            barInfo = new SrsBarInfo_1(this, cell, barRect, null, fill, null, -1, null);
            barList.array[barList.array.length] = barInfo;
          }
        }
      }
      barList.array.length > 0 && $add_1(this.graph.seriesShapes, new SeriesInfo(barList, null));
    }
    ++rowIndex;
  }
  if (this.showTodayMarker) {
    curTimePos = $getCurDateTimeValuePos(valueScale);
    if (curTimePos != null) {
      this.geCurTime = new GraphicElement;
      innerBnds = this.graph.getInnerBounds();
      linePath = new CFPath_1(minValuePos + (checkCriticalNotNull(curTimePos) , curTimePos), innerBnds.y_0, minValuePos + (checkCriticalNotNull(curTimePos) , curTimePos), innerBnds.y_0 + innerBnds.height_0);
      stroke = new CFStroke_1('808080', 1);
      shape_0 = new CFShape_0(linePath, null, stroke);
      this.geCurTime.dataObject = 'geCurTime';
      $addShape(this.geCurTime, shape_0);
    }
     else if (this.geCurTime) {
      this.graph.geAry.remove(this.geCurTime);
      this.geCurTime = null;
    }
  }
  newSrsShapes = new ArrayList;
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    barList = new ArrayList;
    for (srsInfo$iterator = new ArrayList$1(this.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 19);
      for (srsShapeInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
        srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
        !!srsShapeInfo.cell && srsShapeInfo.cell.column == curCol && (barList.array[barList.array.length] = srsShapeInfo , true);
      }
    }
    $add_1(newSrsShapes, new SeriesInfo(barList, null));
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  this.graph.seriesShapes = newSrsShapes;
  $drawAllBars_0(this, -1, null);
}
;
_.drawAllBars = function drawAllBars_0(index_0, hoverData){
  $drawAllBars_0(this, index_0, hoverData);
}
;
_.getBarRect = function getBarRect_0(minCatPos, catPos, minValPos, startPos, endPos, barWidth){
  return $getBarRect_0(minCatPos, catPos, minValPos, startPos, endPos, barWidth);
}
;
_.getBarWidth = function getBarWidth_0(numRows){
  return $getBarWidth_0(this, numRows);
}
;
_.getDefaultLegendPosition = function getDefaultLegendPosition_0(){
  return 1;
}
;
_.getMinMaxTimeValues = function getMinMaxTimeValues_0(scale){
  var cell, cell$iterator, entry, maxTime, minTime, mmTime, outerIter, rowInfo, rowInfo$iterator, time;
  minTime = $intern_31;
  maxTime = $intern_30;
  for (rowInfo$iterator = this.graph.data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
    rowInfo = castTo(rowInfo$iterator.next_1(), 7);
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (!$rowIsHidden(cell)) {
        time = cell.timeMS;
        if (compare_22(time, 0) != 0) {
          compare_22(time, minTime) < 0 && (minTime = time);
          compare_22(time, maxTime) > 0 && (maxTime = time);
        }
        if ($getMetaDataCell(cell, 0)) {
          time = $getMetaDataCell(cell, 0).timeMS;
          if (compare_22(time, 0) != 0) {
            compare_22(time, minTime) < 0 && (minTime = time);
            compare_22(time, maxTime) > 0 && (maxTime = time);
          }
        }
      }
    }
  }
  mmTime = new MinMaxTime_0(minTime, maxTime);
  mmTime.hasMonthDaysThatAreDifferent = true;
  return mmTime;
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_2(hoverData, rnd, seriesIndex){
  !!this.geCurTime && this.graph.geAry.remove(this.geCurTime);
  $handlerSpecificHoverEffects(this, hoverData, rnd, seriesIndex);
  !!this.geCurTime && $addGraphicElement_0(this.graph, this.geCurTime);
}
;
_.isPctComplete = function isPctComplete_0(){
  if (this.graph.typeAttributes.isGanttPercent || this.fillToCurDate)
    return true;
  return false;
}
;
_.processChartOptions = function processChartOptions_15(){
  $removeGoalScaleMarker(this.sGraph);
  isTrue(this.graph.getChartOptionAsString('show_today_marker'))?(this.showTodayMarker = true):(this.showTodayMarker = false);
  isTrue(this.graph.getChartOptionAsString('fill_empty_end_dates'))?(this.fillEmptyEndDates = true):(this.fillEmptyEndDates = false);
  isTrue(this.graph.getChartOptionAsString('fill_items_before_today'))?(this.fillToCurDate = true):(this.fillToCurDate = false);
  $processChartOptions_4(this);
}
;
_.resetForTypeChange = function resetForTypeChange_8(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_15(data_0){
  var columnOrder, columnOrder_0, theData;
  isTrue(this.graph.getChartOptionAsString('all_day_events'))?(this.allDayEvents = true):(this.allDayEvents = false);
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    if (data_0.orderedColumnList) {
      columnOrder = (columnOrder_0 = new ArrayList , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'ITEM'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'START_DATE'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'END_DATE'))) , $isPctCompleteChart(this) && $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'PERCENT_COMPLETE'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'CATEGORY'))) , $getColumnIndexForMappedName(data_0, 'EXTRAINFO1') != -1 && $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'EXTRAINFO1'))) , $getColumnIndexForMappedName(data_0, 'EXTRAINFO2') != -1 && $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'EXTRAINFO2'))) , $getColumnIndexForMappedName(data_0, 'EXTRAINFO3') != -1 && $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'EXTRAINFO3'))) , columnOrder_0);
      data_0 = $transformOrderedColumnToNoGroupItemValue(data_0, columnOrder, true);
      !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
      this.graph.data_0 = data_0;
      this.originalData = data_0;
    }
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $getGanttFormatData(this, this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.sGraph.data_0 = this.currentViewDataGrid;
    this.allDayEvents && $setDataToAllDayEvents(this);
  }
}
;
_.CATEGORY = 2;
_.allDayEvents = false;
_.fillEmptyEndDates = false;
_.fillToCurDate = false;
_.geCurTime = null;
_.maxPercentComplete = 0;
_.showTodayMarker = false;
var PERCENT_COMPLETE = 1;
var Lcom_domo_charting_graphs_HandlerGantt_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerGantt', 160);
function $addShapeToGraphWithData_0(this$static, shape_0, dataObject){
  var ge;
  ge = new GraphicElement;
  $addShape_0(ge, shape_0, dataObject);
  $addGraphicElement_0(this$static.graph, ge);
}

function $calcBottomMarginForRadialGaugeFromBounds(bounds){
  var maxHeight;
  if (bounds.height_0 * RADIAL_GAUGE_HEIGHT_WIDTH_RATIO <= bounds.width_0)
    return bounds.height_0 * 0.04;
  maxHeight = bounds.width_0 / RADIAL_GAUGE_HEIGHT_WIDTH_RATIO;
  return bounds.height_0 - maxHeight;
}

function $createZeroValueGrid(this$static){
  var cell, colInfo, rowInfo, rowList;
  if (!!this$static.graph.data_0 && this$static.graph.data_0.numVisibleCols > 0 && !!this$static.graph.data_0.rows_0 && this$static.graph.data_0.rows_0.size_1() == 0) {
    cell = new Cell(0);
    rowInfo = new ColRowInfo_3('ZeroRow', 'ZeroRow', 'DOUBLE', 0, cell, true, 0);
    colInfo = $getColumn(this$static.graph.data_0, 0);
    $put_0(colInfo.cellMap, valueOf(0), cell);
    rowList = new ArrayList;
    rowList.array[rowList.array.length] = rowInfo;
    $setRows(this$static.graph.data_0, rowList);
    return this$static.graph.data_0;
  }
  return null;
}

function $drawDynamicTextbox(this$static, rnd){
  var averageValue, bnds, catColName, changeFromPrevValue, changePercent, changeValue, conditionalColor, ddShape, drillFilter, firstCategory, firstValue, ge, hoverBnds, itemCount, lastCategory, lastValue, maximumCategory, maximumValue, medianValue, minimumCategory, minimumValue, numberFormatter, offsetLenList, penultimateCategory, penultimateValue, percentChange, rowInfo, tbFont, textColor, textStr, tmpColor, valColName, value_0, valueFont, valueIsPositive, valueStr, values, values0, values1, values2;
  changeFromPrevValue = false;
  conditionalColor = null;
  bnds = $duplicate_5(this$static.graph.bnds);
  $setHeight(bnds, bnds.height_0 - (this$static.tbTopMargin + this$static.tbBottomMargin));
  $setY_0(bnds, bnds.y_0 + this$static.tbTopMargin);
  $setWidth(bnds, bnds.width_0 - (this$static.tbLeftMargin + this$static.tbRightMargin));
  $setX_0(bnds, bnds.x_0 + this$static.tbLeftMargin);
  numberFormatter = this$static.graph.numberFormatter;
  $setAutoAbbreviateState(numberFormatter, this$static.abbreviateValues);
  this$static.graph.getChartOptionAsString('comp_data_used') != null && $equalsIgnoreCase(this$static.graph.getChartOptionAsString('comp_data_used'), 'last 2 values') && (changeFromPrevValue = true);
  this$static.overridePositiveColor != null && (this$static.POSITIVE_COLOR = $getColorForName(this$static.graph.colorMgr, this$static.overridePositiveColor));
  this$static.overrideNegativeColor != null && (this$static.NEGATIVE_COLOR = $getColorForName(this$static.graph.colorMgr, this$static.overrideNegativeColor));
  if (this$static.reverseColorDir) {
    tmpColor = this$static.NEGATIVE_COLOR;
    this$static.NEGATIVE_COLOR = this$static.POSITIVE_COLOR;
    this$static.POSITIVE_COLOR = tmpColor;
  }
  textStr = '';
  catColName = '';
  valColName = $getName($getColumn(this$static.graph.data_0, 0));
  firstValue = $formatNumber_1(numberFormatter, $getValue($getFirstCell($getColumn(this$static.graph.data_0, 0))));
  firstCategory = $getRowName($getFirstCell($getColumn(this$static.graph.data_0, 0)));
  lastValue = $formatNumber_1(numberFormatter, $getValue($getLastCell($getColumn(this$static.graph.data_0, 0))));
  lastCategory = $getRowName($getLastCell($getColumn(this$static.graph.data_0, 0)));
  penultimateValue = $formatNumber_1(numberFormatter, $getValue($getNextToLastCell($getColumn(this$static.graph.data_0, 0))));
  penultimateCategory = $getRowName($getNextToLastCell($getColumn(this$static.graph.data_0, 0)));
  minimumValue = $formatNumber_1(numberFormatter, (values0 = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMinValueForValues(values0)));
  minimumCategory = $getName($getMinRow($getColumn(this$static.graph.data_0, 0), false));
  maximumValue = $formatNumber_1(numberFormatter, (values1 = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMaxValueForValues(values1)));
  maximumCategory = $getName($getMaxRow($getColumn(this$static.graph.data_0, 0), false));
  averageValue = $formatNumber_1(numberFormatter, (values2 = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), false, false) , getAvgValueForValues(values2)));
  medianValue = $formatNumber_1(numberFormatter, (values = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), false, false) , getMedianValueForValues(values)));
  changePercent = getChangeVal(true, $getColumn(this$static.graph.data_0, 0), this$static.graph, changeFromPrevValue);
  changeValue = getChangeVal(false, $getColumn(this$static.graph.data_0, 0), this$static.graph, changeFromPrevValue);
  itemCount = this$static.graph.data_0.numVisibleRows;
  percentChange = getChangePercentVal($getColumn(this$static.graph.data_0, 0), changeFromPrevValue);
  rowInfo = $getFirstVisibleRow(this$static.graph.data_0);
  if (rowInfo) {
    textStr = $getName(rowInfo);
    catColName = $getParentDisplayName(rowInfo);
  }
  this$static.tbText != null && (textStr = this$static.tbText);
  value_0 = $getValue($getFirstCell(rowInfo));
  valueStr = $getFirstCell(rowInfo).valueStr;
  if (!isNaN(value_0)) {
    valueStr = $formatNumber_1(this$static.graph.hoverNumberFormatter, value_0);
    this$static.graph.colorMgr.conditionalColors && (conditionalColor = $getColorForValueAndColumnName(this$static.graph, value_0, $getColumn(this$static.graph.data_0, 0).name_0, $getColumn(this$static.graph.data_0, 0).name_0));
  }
  valueIsPositive = percentChange >= 0;
  textColor = conditionalColor?conditionalColor:this$static.tbFontColor;
  textStr = ($clinit_StrUtil() , entityDecodeString(textStr));
  textStr = convertBrToNewLine(textStr);
  textStr = replaceMacroWithValue(textStr, '%_CATEGORY_COL_NAME', catColName);
  textStr = replaceMacroWithValue(textStr, '%_VALUE_COL_NAME', valColName);
  textStr = replaceMacroWithValue(textStr, '%_VALUE', valueStr);
  textStr = replaceMacroWithValue(textStr, '%_CHANGE_PERCENT', '|<' + changePercent + '>|');
  textStr = replaceMacroWithValue(textStr, '%_CHANGE_VALUE', '|<' + changeValue + '>|');
  this$static.chgValFmtFirstVal?(textStr = replaceMacroWithValue(textStr, '%_FIRST_VALUE', '|<' + firstValue + '>|')):(textStr = replaceMacroWithValue(textStr, '%_FIRST_VALUE', firstValue));
  textStr = replaceMacroWithValue(textStr, '%_FIRST_CATEGORY', firstCategory);
  this$static.chgValFmtLastVal?(textStr = replaceMacroWithValue(textStr, '%_LAST_VALUE', '|<' + lastValue + '>|')):(textStr = replaceMacroWithValue(textStr, '%_LAST_VALUE', lastValue));
  textStr = replaceMacroWithValue(textStr, '%_LAST_CATEGORY', lastCategory);
  textStr = replaceMacroWithValue(textStr, '%_PENULTIMATE_VALUE', penultimateValue);
  textStr = replaceMacroWithValue(textStr, '%_PENULTIMATE_CATEGORY', penultimateCategory);
  this$static.chgValFmtLastVal?(textStr = replaceMacroWithValue(textStr, '%_MINIMUM_VALUE', '|<' + minimumValue + '>|')):(textStr = replaceMacroWithValue(textStr, '%_MINIMUM_VALUE', minimumValue));
  textStr = replaceMacroWithValue(textStr, '%_MINIMUM_CATEGORY', minimumCategory);
  this$static.chgValFmtLastVal?(textStr = replaceMacroWithValue(textStr, '%_MAXIMUM_VALUE', '|<' + maximumValue + '>|')):(textStr = replaceMacroWithValue(textStr, '%_MAXIMUM_VALUE', maximumValue));
  textStr = replaceMacroWithValue(textStr, '%_MAXIMUM_CATEGORY', maximumCategory);
  textStr = replaceMacroWithValue(textStr, '%_AVERAGE_VALUE', averageValue);
  textStr = replaceMacroWithValue(textStr, '%_MEDIAN_VALUE', medianValue);
  textStr = replaceMacroWithValue(textStr, '%_ITEM_COUNT', '' + itemCount);
  offsetLenList = $getFormatOffsetLenList(textStr);
  textStr = $replaceAll(textStr, '\\|<', '');
  textStr = $replaceAll(textStr, '>\\|', '');
  tbFont = new CFFont_1(null, this$static.tbFontSize, textColor, this$static.tbFace);
  valueFont = $duplicate_2(tbFont);
  valueIsPositive?$setColor_1(valueFont, this$static.POSITIVE_COLOR):$setColor_1(valueFont, this$static.NEGATIVE_COLOR);
  ge = drawTextInBounds(rnd, bnds, textStr, tbFont, this$static.tbHAlign, this$static.tbVAlign, 5, offsetLenList, valueFont);
  $addGraphicElement_0(this$static.graph, ge);
  hoverBnds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  $inflate(hoverBnds, -15);
  ddShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  drillFilter = $getDrillFilterForGauge(this$static);
  ddShape.drillFilter = drillFilter;
  $addShapeToGraphWithData_0(this$static, ddShape, '{"internal": "DrillFilter"}');
}

function $drawFaceGauge(this$static){
  var circle, circleBnds, ddShape, faceBnds, faceColor, facePath, ge, graphBounds, height, hoverBnds, hoverText, isInValidRange, labelPoint, minEdge, path, rowInfo, shape_0, top_0, value_0, width_0;
  facePath = new CFPath_7(grayFacePath);
  faceColor = $getColor(this$static.graph, 'FaceGaugeGray', '#8B9B9B');
  value_0 = 0;
  isInValidRange = false;
  rowInfo = $getFirstVisibleRow(this$static.graph.data_0);
  !!rowInfo && (value_0 = $getCellValueByCellIndex(rowInfo, 0));
  if (value_0 >= this$static.greenMin && value_0 <= this$static.greenMax) {
    facePath = new CFPath_7(greenFacePath);
    faceColor = $getColor(this$static.graph, 'FaceGaugeGreen', '#A0D771');
    isInValidRange = true;
  }
   else if (value_0 >= this$static.yellowMin && value_0 <= this$static.yellowMax) {
    facePath = new CFPath_7(yellowFacePath);
    faceColor = $getColor(this$static.graph, 'FaceGaugeYellow', '#FBAD56');
    isInValidRange = true;
  }
   else if (value_0 >= this$static.redMin && value_0 <= this$static.redMax) {
    facePath = new CFPath_7(redFacePath);
    faceColor = $getColor(this$static.graph, 'FaceGaugeRed', '#C92E25');
    isInValidRange = true;
  }
  graphBounds = this$static.graph.bnds;
  width_0 = graphBounds.width_0;
  height = graphBounds.height_0;
  circleBnds = new CFRect(graphBounds.x_0 + (width_0 - 200) / 2, graphBounds.y_0 + (height - 200) / 2, 200, 200);
  faceBnds = new CFRect(graphBounds.x_0 + (width_0 - 155) / 2, (height - 142) / 2, 155, 142);
  if (this$static.graph.bnds.width_0 <= 199 && this$static.graph.bnds.height_0 <= 115 || height < 150) {
    if (width_0 < 100 || height < 100) {
      minEdge = width_0;
      height < width_0 && (minEdge = height);
      minEdge = round_int(minEdge * 0.9);
      circleBnds = new CFRect(graphBounds.x_0 + (width_0 - minEdge) / 2, graphBounds.y_0 + (height - minEdge) / 2, minEdge, minEdge);
      faceBnds = new CFRect(graphBounds.x_0 + (width_0 - minEdge * 0.83) / 2, graphBounds.y_0 + (height - minEdge * $intern_8) / 2, minEdge * 0.83, minEdge * $intern_8);
    }
     else {
      circleBnds = new CFRect(graphBounds.x_0 + (width_0 - 100) / 2, graphBounds.y_0 + (height - 100) / 2, 100, 100);
      faceBnds = new CFRect(graphBounds.x_0 + (width_0 - 83) / 2, graphBounds.y_0 + (height - 75) / 2, 83, 75);
    }
  }
  ge = new GraphicElement;
  if (isInValidRange) {
    top_0 = graphBounds.y_0;
    while (top_0 <= graphBounds.y_0 + graphBounds.height_0) {
      path = new CFPath_1(graphBounds.x_0, top_0, graphBounds.x_0 + graphBounds.width_0, top_0);
      $addShape(ge, new CFShape_0(path, null, new CFStroke(faceColor, 1)));
      top_0 += 6;
    }
  }
  facePath = $scaleAndPositionToRect(facePath, faceBnds);
  shape_0 = new CFShape_0(facePath, new CFFill(faceColor), null);
  circle = new CFShape_0(new CFPath_0(circleBnds.x_0, circleBnds.y_0, circleBnds.width_0), new CFFill(($clinit_CFColor() , WHITE)), null);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, circle);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, shape_0);
  $addGraphicElement_0(this$static.graph, ge);
  labelPoint = new CFPoint(faceBnds.x_0 + faceBnds.width_0 / 2, faceBnds.y_0 + faceBnds.height_0 * 0.1);
  hoverText = $formatNumber_1(this$static.graph.hoverNumberFormatter, value_0);
  hoverBnds = new CFRect(graphBounds.x_0, graphBounds.y_0, graphBounds.width_0, graphBounds.height_0);
  $inflate(hoverBnds, -15);
  ddShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  ddShape.drillFilter = '{"filters":[]}';
  ddShape.hoverText = hoverText;
  $addShapeToGraphWithData_0(this$static, ddShape, new HoverInfo(hoverText, labelPoint));
}

function $drawPalette(this$static, rnd){
  var colorList, cr, ge, geText, i, i0, i1, i2, i3, j, lastTop, left, palette, selectorTop, shape_0, top_0, txtBnds;
  top_0 = 5;
  left = 5;
  txtBnds = new CFRect(5, 5, 200, 20);
  geText = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, txtBnds, 'Color Table', new CFFont_0(null, 200, ($clinit_CFColor() , BLACK)), 0, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, geText);
  top_0 += 30;
  palette = this$static.graph.colorMgr.palette;
  ge = new GraphicElement;
  for (i0 = 0; i0 < palette.colorTable.array.length; i0++) {
    colorList = castTo($get_2(palette.colorTable, i0), 42);
    for (j = 0; j < colorList.size_1(); j++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo(colorList.get_1(j), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    left = 5;
    top_0 += 25;
  }
  top_0 += 20;
  selectorTop = top_0;
  txtBnds = new CFRect(5, top_0, 200, 20);
  geText = (null , drawTextInBounds(rnd, txtBnds, 'Color Selector', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, geText);
  top_0 += 30;
  for (i1 = 0; i1 < palette.selectorColors.array.length; i1++) {
    colorList = castTo($get_2(palette.selectorColors, i1), 42);
    for (j = 0; j < colorList.size_1(); j++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo(colorList.get_1(j), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    left = 5;
    top_0 += 25;
  }
  top_0 += 20;
  lastTop = top_0;
  top_0 = selectorTop;
  left = 190;
  txtBnds = new CFRect(190, selectorTop, 200, 20);
  geText = (null , drawTextInBounds(rnd, txtBnds, 'Gradient Selector', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, geText);
  top_0 += 30;
  for (i2 = 0; i2 < palette.gradients.array.length; i2++) {
    colorList = castTo($get_2(palette.gradients, i2), 42);
    for (j = 0; j < colorList.size_1(); j++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo(colorList.get_1(j), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    left = 190;
    top_0 += 25;
  }
  top_0 += 20;
  lastTop > top_0 && (top_0 = lastTop);
  left = 5;
  if (palette.lineColors.array.length > 0) {
    txtBnds = new CFRect(5, top_0, 200, 20);
    geText = (null , drawTextInBounds(rnd, txtBnds, 'Line Colors', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geText);
    top_0 += 30;
    for (i3 = 0; i3 < palette.lineColors.array.length; i3++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo($get_2(palette.lineColors, i3), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    top_0 += 40;
    left = 5;
  }
  if (palette.popColors.array.length > 0) {
    txtBnds = new CFRect(5, top_0, 200, 20);
    geText = (null , drawTextInBounds(rnd, txtBnds, 'Period over Period Bar Colors', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geText);
    top_0 += 30;
    for (i3 = 0; i3 < palette.popColors.array.length; i3++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo($get_2(palette.popColors, i3), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    top_0 += 40;
    left = 5;
  }
  if (palette.popLineColors.array.length > 0) {
    txtBnds = new CFRect(5, top_0, 200, 20);
    geText = (null , drawTextInBounds(rnd, txtBnds, 'Period over Period Line Colors', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geText);
    top_0 += 30;
    for (i3 = 0; i3 < palette.popLineColors.array.length; i3++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo($get_2(palette.popLineColors, i3), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    top_0 += 40;
    left = 5;
  }
  if (palette.popVarColors.array.length > 0) {
    txtBnds = new CFRect(5, top_0, 200, 20);
    geText = (null , drawTextInBounds(rnd, txtBnds, 'Period over Period Bar Var Colors', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geText);
    top_0 += 30;
    for (i3 = 0; i3 < palette.popVarColors.array.length; i3++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo($get_2(palette.popVarColors, i3), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    top_0 += 40;
    left = 5;
  }
  if (palette.popVarLineColors.array.length > 0) {
    txtBnds = new CFRect(5, top_0, 200, 20);
    geText = (null , drawTextInBounds(rnd, txtBnds, 'Period over Period Line Var Colors', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geText);
    top_0 += 30;
    for (i3 = 0; i3 < palette.popVarLineColors.array.length; i3++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 20, 20), new CFFill(castTo($get_2(palette.popVarLineColors, i3), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 25;
    }
    top_0 += 40;
    left = 5;
  }
  txtBnds = new CFRect(5, top_0, 200, 20);
  geText = (null , drawTextInBounds(rnd, txtBnds, 'Charting Rules', new CFFont_0(null, 200, BLACK), 0, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, geText);
  top_0 += 30;
  for (i = 0; i < palette.colorRanges.array.length; i++) {
    cr = castTo($get_2(palette.colorRanges, i), 164);
    for (j = 0; j < cr.max_0; j++) {
      shape_0 = new CFShape_1(new CFRect(left, top_0, 10, 30), new CFFill(castTo($get_2(cr.colors, j), 15)), null);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, shape_0);
      left += 12;
    }
    left += 8;
    if (left > 550) {
      left = 5;
      top_0 += 35;
    }
  }
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawProgressBar(this$static, rnd){
  var barShape, conditionalColor, ddShape, drillFilter, fillClr, filledBarBnds, filledWidth, ge, geBar, geDrill, geText, geValue, graphBounds, height, left, margin, maxValue, percentVal, percentValBnds, rowInfo, shape_0, srsInfo, tbHeight, tbHeightPct, text_0, top_0, valStr, value_0, width_0, widthMargin;
  $setupAnimation_0(this$static);
  conditionalColor = null;
  widthMargin = 0.1;
  tbHeightPct = 0.33;
  if (!(this$static.graph.bnds.width_0 <= 199 && this$static.graph.bnds.height_0 <= 115) && this$static.graph.bnds.width_0 <= 434 && this$static.graph.bnds.height_0 <= 395) {
    widthMargin = 0.05;
    tbHeightPct = 0.45;
  }
   else if (this$static.graph.bnds.width_0 <= 199 && this$static.graph.bnds.height_0 <= 115) {
    widthMargin = 0;
    tbHeightPct = 0.6;
  }
  graphBounds = this$static.graph.bnds;
  margin = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.width_0 * widthMargin)));
  width_0 = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.width_0 - margin * 2)));
  height = toDouble_0(fromDouble_0($wnd.Math.round(width_0 * 0.2)));
  tbHeight = toDouble_0(fromDouble_0($wnd.Math.round(height * tbHeightPct)));
  if (height + tbHeight > graphBounds.height_0) {
    height = (graphBounds.height_0 - 10) * (1 / (1 + tbHeightPct));
    tbHeight = toDouble_0(fromDouble_0($wnd.Math.round(height * tbHeightPct)));
  }
  (tbHeight <= 12 || this$static.hideProgressLabel) && (tbHeight = 0);
  top_0 = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.y_0 + (graphBounds.height_0 - (height + tbHeight)) / 2)));
  left = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.x_0)));
  this$static.progressBarTextBnds = new CFRect(left + margin, top_0, width_0, tbHeight);
  this$static.progressBarBnds = new CFRect(left + margin, top_0 + tbHeight, width_0, height);
  drillFilter = $getDrillFilterForGauge(this$static);
  rowInfo = $getFirstVisibleRow(this$static.graph.data_0);
  if (rowInfo) {
    text_0 = $getName(rowInfo);
    value_0 = $getCellValueByCellIndex(rowInfo, 0);
    isNaN(value_0) || this$static.graph.colorMgr.conditionalColors && (conditionalColor = $getColorForValueAndColumnName(this$static.graph, value_0, $getColumn(this$static.graph.data_0, 0).name_0, $getColumn(this$static.graph.data_0, 0).name_0));
    maxValue = $getCellValueByCellIndex(rowInfo, 1);
    maxValue == 0 && (maxValue = 1);
    percentVal = value_0 / maxValue;
    percentVal > 1 && (percentVal = 1);
    valStr = $formatPercentNumber(this$static.graph.numberFormatter, percentVal, true);
    filledWidth = this$static.progressBarBnds.width_0 * (value_0 / maxValue);
    filledWidth > this$static.progressBarBnds.width_0 && (filledWidth = this$static.progressBarBnds.width_0);
    filledBarBnds = $duplicate_5(this$static.progressBarBnds);
    filledBarBnds.width_0 = filledWidth;
    percentValBnds = $duplicate_5(this$static.progressBarBnds);
    if (tbHeight > 0) {
      $setY_0(percentValBnds, $getCenterY(this$static.progressBarBnds) - this$static.progressBarBnds.height_0 * 0.32);
      $setHeight(percentValBnds, this$static.progressBarBnds.height_0 * 0.64);
    }
    ge = new GraphicElement;
    barShape = new CFShape_1(this$static.progressBarBnds, new CFFill_1('#D9D9D9'), null);
    fillClr = $getColor(this$static.graph, 'ProgressBar', '#95CBEC');
    !!this$static.fillColor && (fillClr = this$static.fillColor);
    fillClr = conditionalColor?conditionalColor:fillClr;
    srsInfo = new SrsRectInfo(null, filledBarBnds, new CFFill(fillClr), null);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, barShape);
    $addGraphicElement_0(this$static.graph, ge);
    geValue = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, percentValBnds, valStr, new CFFont_0(null, 100, ($clinit_CFColor() , BLACK)), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addFrontGraphicElement_0(this$static.graph, geValue);
    if (tbHeight > 0) {
      geText = (null , drawTextInBounds(rnd, this$static.progressBarTextBnds, text_0, new CFFont_0(null, 100, this$static.fontColorDefaultBlack), 0, VALIGN_MIDDLE, 5, null, null));
      $addGraphicElement_0(this$static.graph, geText);
    }
    ddShape = new CFShape_1(this$static.progressBarBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
    ddShape.drillFilter = drillFilter;
    geDrill = new GraphicElement;
    $addShape_0(geDrill, ddShape, '{"internal": "DrillFilter"}');
    $addFrontGraphicElement_0(this$static.graph, geDrill);
    $add_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
    shape_0 = $getShapePct(srsInfo, 1);
    geBar = new GraphicElement_0(shape_0);
    this$static.graph.frontGeAry.add_1(0, geBar);
  }
}

function $drawRadialGauge(this$static, rnd){
  var bnds, bottomMargin, displayStr, drillFilter, ge, geMin, hoverBnds, hoverShape, hoverText, is100Multiplied, labelPoint, maxPt, maxValStr, minPt, minValStr, srsInfo, suffixlength, textHeight, textRect, textX, textY, valIsTruncated, minMax;
  $setupAnimation_0(this$static);
  this$static.radialValue = $getCurrentValueForGauge(this$static);
  isNaN_0(this$static.radialValue) && (this$static.radialValue = 0);
  drillFilter = $getDrillFilterForGauge(this$static);
  this$static.radialMinMax = (minMax = new MinMax(NaN, NaN) , minMax = $getMinMaxForRange(minMax, this$static.range1Min, this$static.range1Max) , minMax = $getMinMaxForRange(minMax, this$static.range2Min, this$static.range2Max) , minMax = $getMinMaxForRange(minMax, this$static.range3Min, this$static.range3Max) , minMax = $getMinMaxForRange(minMax, this$static.range4Min, this$static.range4Max) , minMax = $getMinMaxForRange(minMax, this$static.range5Min, this$static.range5Max) , minMax = $getMinMaxForRange(minMax, this$static.range6Min, this$static.range6Max) , isNaN_0(minMax.min_0) && (minMax.min_0 = 0) , isNaN_0(minMax.max_0) && (minMax.max_0 = minMax.min_0) , minMax);
  is100Multiplied = false;
  !!this$static.graph.numberFormatter && this$static.graph.numberFormatter.multiplyBy100 && (is100Multiplied = true);
  this$static.radialMinMax.min_0 == this$static.radialMinMax.max_0 && (this$static.radialMinMax.max_0 = getDefaultMaxRange(this$static.radialValue, is100Multiplied));
  bnds = this$static.graph.bnds;
  bottomMargin = $calcBottomMarginForRadialGaugeFromBounds(bnds);
  this$static.radialStyle == 1?(this$static.radialGaugeBounds = $getTickRadialBnds(bnds)):(this$static.radialGaugeBounds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0 - bottomMargin));
  this$static.radialIndicatorShape = $getRadialIndicatorShape(this$static, this$static.radialGaugeBounds, this$static.radialMinMax, this$static.radialValue);
  this$static.geIndicator = new GraphicElement_0($duplicate_6(this$static.radialIndicatorShape));
  $drawRadialRanges(this$static, this$static.radialGaugeBounds, this$static.radialMinMax);
  if (this$static.radialStyle == 0) {
    textHeight = this$static.radialGaugeBounds.height_0 * 0.12;
    textY = this$static.radialGaugeBounds.y_0 + this$static.radialGaugeBounds.height_0 * 2 / 3;
    maxValStr = this$static.graph.formatNumber(this$static.radialMinMax.max_0);
    maxPt = $getPointOnCircle_0(this$static, bottomMargin, -40);
    textX = maxPt.x_0 + 10;
    textRect = new CFRect(textX, textY, $getRight(this$static.radialGaugeBounds) - textX, textHeight);
    ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, textRect, maxValStr, new CFFont_0(null, 100, ($clinit_CFColor() , BLACK)), 0, VALIGN_MIDDLE, 5, null, null));
    valIsTruncated = false;
    if (!!ge.textAry && ge.textAry.array.length > 0) {
      displayStr = castTo($get_2(ge.textAry, 0), 26).text_0;
      suffixlength = '...'.length;
      $equals_2(displayStr.substr(displayStr.length - suffixlength, suffixlength), '...') && (valIsTruncated = true);
    }
    valIsTruncated || $addGraphicElement_0(this$static.graph, ge);
    if (this$static.radialMinMax.min_0 != 0) {
      minValStr = this$static.graph.formatNumber(this$static.radialMinMax.min_0);
      minPt = $getPointOnCircle_0(this$static, bottomMargin, -140);
      textX = minPt.x_0 - 10;
      textRect = new CFRect(this$static.radialGaugeBounds.x_0, textY, textX - this$static.radialGaugeBounds.x_0, textHeight);
      geMin = (null , drawTextInBounds(rnd, textRect, minValStr, new CFFont_0(null, 100, BLACK), HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
      $addGraphicElement_0(this$static.graph, geMin);
    }
  }
   else {
    $drawRadialTicks(this$static, this$static.radialGaugeBounds);
  }
  $addGraphicElement_0(this$static.graph, this$static.geIndicator);
  labelPoint = new CFPoint($getCenterX(this$static.radialGaugeBounds), this$static.radialGaugeBounds.y_0 + this$static.radialGaugeBounds.height_0 * 0.1);
  hoverText = $formatNumber_1(this$static.graph.hoverNumberFormatter, this$static.radialValue);
  hoverBnds = $duplicate_5(this$static.radialGaugeBounds);
  $inflate(hoverBnds, -15);
  hoverShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  hoverShape.drillFilter = drillFilter;
  hoverShape.hoverText = hoverText;
  $addShapeToGraphWithData_0(this$static, hoverShape, new HoverInfo(hoverText, labelPoint));
  srsInfo = new SrsRectInfo(null, bnds, null, null);
  $add_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
}

function $drawRadialRange(this$static, bnds, minMax, rangeMin, rangeMax, color_0, ge){
  var endAngle, range1Path, startAngle;
  if ((rangeMin != 0 || rangeMax != 0) && !!color_0 && rangeMax > rangeMin) {
    startAngle = $getAngleForValue(this$static, minMax, rangeMin) - 90;
    endAngle = $getAngleForValue(this$static, minMax, rangeMax) - 90;
    this$static.radialStyle == 1?(range1Path = $getDonutWedge_0(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0, bnds.height_0, bnds.height_0 * (1 - this$static.radialRangeBandPct), startAngle, endAngle)):(range1Path = $getDonutWedge_0(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0, bnds.height_0 - bnds.height_0 * 0.08, bnds.height_0 / 2, startAngle, endAngle));
    $addShape(ge, new CFShape_0(range1Path, new CFFill(color_0), null));
  }
}

function $drawRadialRanges(this$static, bnds, minMax){
  var defaultColor, ge, path;
  ge = new GraphicElement;
  this$static.radialStyle == 1?(path = $getDonutWedge_0(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0, bnds.height_0, bnds.height_0 * 0.9, -180, 0)):(path = $getDonutWedge_0(bnds.x_0 + bnds.width_0 / 2, bnds.y_0 + bnds.height_0, bnds.height_0 - bnds.height_0 * 0.08, bnds.height_0 / 2, -140, -40));
  defaultColor = $getDefaultRadialColor(this$static);
  $addShape(ge, new CFShape_0(path, new CFFill(defaultColor), null));
  $drawRadialRange(this$static, bnds, minMax, this$static.range6Min, this$static.range6Max, this$static.range6Clr, ge);
  $drawRadialRange(this$static, bnds, minMax, this$static.range5Min, this$static.range5Max, this$static.range5Clr, ge);
  $drawRadialRange(this$static, bnds, minMax, this$static.range4Min, this$static.range4Max, this$static.range4Clr, ge);
  $drawRadialRange(this$static, bnds, minMax, this$static.range3Min, this$static.range3Max, this$static.range3Clr, ge);
  $drawRadialRange(this$static, bnds, minMax, this$static.range2Min, this$static.range2Max, this$static.range2Clr, ge);
  $drawRadialRange(this$static, bnds, minMax, this$static.range1Min, this$static.range1Max, this$static.range1Clr, ge);
  $addGraphicElement(this$static.graph, ge);
}

function $drawRadialTick(bnds, pctPos, tickLen, tickColor, ge){
  var angle, innerRadius, innerX, innerY, outerX, outerY, radius, tickShape;
  radius = bnds.height_0;
  innerRadius = bnds.height_0 - bnds.height_0 * tickLen;
  angle = -(180 * pctPos);
  innerX = innerRadius * $wnd.Math.cos(angle * $intern_6) + (bnds.x_0 + bnds.width_0 / 2);
  innerY = innerRadius * $wnd.Math.sin(angle * $intern_6) + (bnds.y_0 + bnds.height_0);
  outerX = radius * $wnd.Math.cos(angle * $intern_6) + (bnds.x_0 + bnds.width_0 / 2);
  outerY = radius * $wnd.Math.sin(angle * $intern_6) + (bnds.y_0 + bnds.height_0);
  tickShape = new CFShape_0(new CFPath_1(innerX, innerY, outerX, outerY), null, new CFStroke(tickColor, 1));
  !!tickShape.path && (tickShape.path.shouldAntiAlias = true);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, tickShape);
}

function $drawRadialTicks(this$static, bnds){
  var ge, majorTickColor, minorTickColor, pct, pct0;
  ge = new GraphicElement;
  majorTickColor = ($clinit_CFColor() , TEXT_DARK_GRAY);
  $hasTextColorOverride(this$static.graph) && (majorTickColor = $getTextColor(this$static.graph.chart.palette));
  minorTickColor = new CFColor_0(majorTickColor.red, majorTickColor.green, majorTickColor.blue, majorTickColor.alpha_0);
  minorTickColor.alpha_0 = 128;
  for (pct0 = 0.02; pct0 < 0.99; pct0 += 0.02)
    $drawRadialTick(bnds, pct0, this$static.radialTickLenPct * 0.4, minorTickColor, ge);
  for (pct = 0.1; pct < 0.99; pct += 0.1)
    $drawRadialTick(bnds, pct, this$static.radialTickLenPct, majorTickColor, ge);
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawSingleValue(this$static, rnd){
  var bnds, conditionalColor, ddShape, drillFilter, footerBnds, ge, geFooter, geHdr, headerBnds, hoverBnds, textColor, val, valStr, value_0, valueBnds, valueStr;
  valStr = $getFirstCell($getColumn(this$static.graph.data_0, 0)).valueStr;
  val = $getValue($getFirstCell($getColumn(this$static.graph.data_0, 0)));
  conditionalColor = null;
  if (isNaN(val) && valStr != null) {
    valueStr = ($clinit_StrUtil() , entityDecodeString(valStr));
    valueStr = convertBrToNewLine(valueStr);
  }
   else {
    this$static.isUsedAsSubGraph?(value_0 = $getCurrentValueOfVisibleForGauge(this$static)):(value_0 = $getCurrentValueForGauge(this$static));
    this$static.graph.colorMgr.conditionalColors && (conditionalColor = $getColorForValueAndColumnName(this$static.graph, value_0, $getColumn(this$static.graph.data_0, 0).name_0, $getColumn(this$static.graph.data_0, 0).name_0));
    valueStr = this$static.graph.formatNumber(value_0);
  }
  textColor = conditionalColor?conditionalColor:this$static.fontColorDefaultBlack;
  drillFilter = $getDrillFilterForGauge(this$static);
  bnds = this$static.graph.bnds;
  valueBnds = new CFRect(bnds.x_0, bnds.y_0 + bnds.height_0 / 3, bnds.width_0, bnds.height_0 / 3);
  (this$static.useAllAvailableSpace || this$static.headerText == null && this$static.footerText == null && this$static.graph.chart.isPageLayout) && (valueBnds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0));
  headerBnds = new CFRect(bnds.x_0, bnds.y_0 + bnds.height_0 / 6, bnds.width_0, bnds.height_0 / 6);
  footerBnds = new CFRect(bnds.x_0, valueBnds.y_0 + valueBnds.height_0, bnds.width_0, bnds.height_0 / 6);
  ge = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, valueBnds, valueStr, new CFFont_0(null, 200, textColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
  $addGraphicElement_0(this$static.graph, ge);
  if (this$static.headerText != null) {
    geHdr = (null , drawTextInBounds(rnd, headerBnds, this$static.headerText, new CFFont_0(null, 72, textColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geHdr);
  }
  if (this$static.footerText != null) {
    geFooter = (null , drawTextInBounds(rnd, footerBnds, this$static.footerText, new CFFont_0(null, 72, textColor), HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this$static.graph, geFooter);
  }
  hoverBnds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  $inflate(hoverBnds, -15);
  ddShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  ddShape.drillFilter = drillFilter;
  $addShapeToGraphWithData_0(this$static, ddShape, '{"internal": "DrillFilter"}');
}

function $drawTextbox(this$static, rnd){
  var bnds, conditionalColor, ddShape, drillFilter, ge, hoverBnds, rowInfo, textColor, textStr, value_0, valueStr;
  conditionalColor = null;
  bnds = $duplicate_5(this$static.graph.bnds);
  $setHeight(bnds, bnds.height_0 - (this$static.tbTopMargin + this$static.tbBottomMargin));
  $setY_0(bnds, bnds.y_0 + this$static.tbTopMargin);
  $setWidth(bnds, bnds.width_0 - (this$static.tbLeftMargin + this$static.tbRightMargin));
  $setX_0(bnds, bnds.x_0 + this$static.tbLeftMargin);
  textStr = '';
  rowInfo = $getFirstVisibleRow(this$static.graph.data_0);
  !!rowInfo && (textStr = $getName(rowInfo));
  this$static.tbText != null && (textStr = this$static.tbText);
  value_0 = $getValue($getFirstCell(rowInfo));
  valueStr = $getFirstCell(rowInfo).valueStr;
  if (!isNaN(value_0)) {
    valueStr = $formatNumber_1(this$static.graph.hoverNumberFormatter, value_0);
    this$static.graph.colorMgr.conditionalColors && (conditionalColor = $getColorForValueAndColumnName(this$static.graph, value_0, $getColumn(this$static.graph.data_0, 0).name_0, $getColumn(this$static.graph.data_0, 0).name_0));
  }
  textColor = conditionalColor?conditionalColor:this$static.tbFontColor;
  textStr = ($clinit_StrUtil() , entityDecodeString(textStr));
  textStr = convertBrToNewLine(textStr);
  textStr = replaceMacroWithValue(textStr, '%_VALUE', valueStr);
  ge = drawTextInBounds(rnd, bnds, textStr, new CFFont_1(null, this$static.tbFontSize, textColor, this$static.tbFace), this$static.tbHAlign, this$static.tbVAlign, 5, null, null);
  $addGraphicElement_0(this$static.graph, ge);
  hoverBnds = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
  $inflate(hoverBnds, -15);
  ddShape = new CFShape_1(hoverBnds, ($clinit_CFFill() , TRANSPARENT_0), null);
  drillFilter = $getDrillFilterForGauge(this$static);
  ddShape.drillFilter = drillFilter;
  $addShapeToGraphWithData_0(this$static, ddShape, '{"internal": "DrillFilter"}');
}

function $getAngleForValue(this$static, minMax, value_0){
  var percentPos, pos, range;
  range = minMax.max_0 - minMax.min_0;
  pos = value_0 - minMax.min_0;
  percentPos = pos / range;
  return this$static.radialStyle == 1?-90 + 180 * percentPos:-50 + 100 * percentPos;
}

function $getCurrentValueForGauge(this$static){
  var curValue, values, values0;
  curValue = $getSum($getColumn(this$static.graph.data_0, 0));
  this$static.defaultCurValToLastRow && (curValue = $getValue($getLastCell($getColumn(this$static.graph.data_0, 0))));
  this$static.graph.typeAttributes.isRadial && (curValue = $getValue($getFirstCell($getColumn(this$static.graph.data_0, 0))));
  this$static.displayVal != null && ($equals_2(this$static.displayVal, 'average')?(curValue = $getSum($getColumn(this$static.graph.data_0, 0)) / $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'minimum')?(curValue = (values0 = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMinValueForValues(values0))):$equals_2(this$static.displayVal, 'maximum')?(curValue = (values = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMaxValueForValues(values))):$equals_2(this$static.displayVal, 'count')?(curValue = $getNumRows(this$static.graph.data_0)):$equals_2(this$static.displayVal, 'first row') || $equals_2(this$static.displayVal, 'first value')?(curValue = $getValue($getFirstCell($getColumn(this$static.graph.data_0, 0)))):$equals_2(this$static.displayVal, 'last row') || $equals_2(this$static.displayVal, 'last value')?(curValue = $getValue($getLastCell($getColumn(this$static.graph.data_0, 0)))):$equals_2(this$static.displayVal, 'sum') && (curValue = $getSum($getColumn(this$static.graph.data_0, 0))));
  return curValue;
}

function $getCurrentValueOfVisibleForGauge(this$static){
  var curValue, values, values0;
  curValue = $getSum($getColumn(this$static.graph.data_0, 0));
  this$static.defaultCurValToLastRow && (curValue = $getValue($getFirstCell($getLastVisibleRow(this$static.graph.data_0))));
  this$static.graph.typeAttributes.isRadial && (curValue = $getValue($getFirstCell($getFirstVisibleRow(this$static.graph.data_0))));
  this$static.displayVal != null && ($equals_2(this$static.displayVal, 'average')?(curValue = $getSum($getColumn(this$static.graph.data_0, 0)) / this$static.graph.data_0.numVisibleRows):$equals_2(this$static.displayVal, 'minimum')?(curValue = (values0 = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMinValueForValues(values0))):$equals_2(this$static.displayVal, 'maximum')?(curValue = (values = $getValuesNonProjected($getColumn(this$static.graph.data_0, 0), true, false) , getMaxValueForValues(values))):$equals_2(this$static.displayVal, 'count')?(curValue = this$static.graph.data_0.numVisibleRows):$equals_2(this$static.displayVal, 'first row') || $equals_2(this$static.displayVal, 'first value')?(curValue = $getValue($getFirstCell($getFirstVisibleRow(this$static.graph.data_0)))):$equals_2(this$static.displayVal, 'last row') || $equals_2(this$static.displayVal, 'last value')?(curValue = $getValue($getFirstCell($getLastVisibleRow(this$static.graph.data_0)))):$equals_2(this$static.displayVal, 'sum') && (curValue = $getSum($getColumn(this$static.graph.data_0, 0))));
  return curValue;
}

function $getDefaultRadialColor(this$static){
  if (this$static.range1Clr)
    return this$static.range1Clr;
  if (this$static.range2Clr)
    return this$static.range2Clr;
  if (this$static.range3Clr)
    return this$static.range3Clr;
  if (this$static.range4Clr)
    return this$static.range4Clr;
  if (this$static.range5Clr)
    return this$static.range5Clr;
  if (this$static.range6Clr)
    return this$static.range6Clr;
  return new CFColor_2('#EDEDED');
}

function $getDonutWedge_0(centerX, centerY, radius, innerRadius, startAngle, endAngle){
  var path;
  path = new CFPath;
  $add(path, new CFPathArcElement_0(centerX, centerY, innerRadius, endAngle, startAngle, true));
  $add(path, new CFPathArcElement(centerX, centerY, radius, startAngle, endAngle));
  $add(path, new CFPathElement_0(4, 0, 0));
  return path;
}

function $getDrillFilterForGauge(this$static){
  var curFilter, drillFilter, filterBase, selRow;
  curFilter = 'none';
  selRow = null;
  !(this$static.graph.typeAttributes.isTextbox && this$static.graph.typeAttributes.isDynamic) && (this$static.graph.typeAttributes.isRadial || this$static.graph.typeAttributes.isProgressBar || this$static.graph.typeAttributes.isTextbox) && (selRow = $getFirstCell($getColumn(this$static.graph.data_0, 0)).row);
  this$static.displayVal != null && ($equals_2(this$static.displayVal, 'minimum')?(selRow = $getMinRow($getColumn(this$static.graph.data_0, 0), false)):$equals_2(this$static.displayVal, 'maximum')?(selRow = $getMaxRow($getColumn(this$static.graph.data_0, 0), false)):$equals_2(this$static.displayVal, 'first row')?(selRow = $getFirstCell($getColumn(this$static.graph.data_0, 0)).row):$equals_2(this$static.displayVal, 'last row')?(selRow = $getLastCell($getColumn(this$static.graph.data_0, 0)).row):($equals_2(this$static.displayVal, 'sum') || $equals_2(this$static.displayVal, 'average') || $equals_2(this$static.displayVal, 'count')) && (selRow = null));
  if (selRow) {
    filterBase = new FilterBase(selRow.parentName, 'EQUALS', selRow);
    $addValue(filterBase, selRow.name_0);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    drillFilter = getDrillFilterFromValues(filterBase);
    drillFilter != null && drillFilter.length > 0 && (curFilter = '{"filters":[' + drillFilter + ']}');
  }
  return curFilter;
}

function $getFontFace(faceStr){
  if ($equals_2(faceStr, 'bold-italic'))
    return 3;
  else if ($equals_2(faceStr, 'bold'))
    return 1;
  else if ($equals_2(faceStr, 'italic'))
    return 2;
  return 0;
}

function $getFontSize(fontSizeStr){
  if ($equals_2(fontSizeStr, 'xx-large'))
    return 72;
  else if ($equals_2(fontSizeStr, 'x-large'))
    return 36;
  else if ($equals_2(fontSizeStr, 'large'))
    return 18;
  else if ($equals_2(fontSizeStr, 'medium'))
    return 14;
  else if ($equals_2(fontSizeStr, 'small'))
    return 11;
  return 100;
}

function $getFormatOffsetLenList(text_0){
  var indexOfEndTag, indexOfStartTag, offsetLenList;
  offsetLenList = new ArrayList;
  if (text_0 != null) {
    indexOfStartTag = text_0.indexOf('|<');
    while (indexOfStartTag != -1) {
      $add_1(offsetLenList, valueOf(indexOfStartTag));
      text_0 = text_0.substr(0, indexOfStartTag) + ('' + text_0.substr(indexOfStartTag + 2, text_0.length - (indexOfStartTag + 2)));
      indexOfEndTag = text_0.indexOf('>|');
      indexOfEndTag == -1?$add_1(offsetLenList, valueOf(0)):$add_1(offsetLenList, valueOf(indexOfEndTag - indexOfStartTag));
      text_0 = text_0.substr(0, indexOfEndTag) + ('' + text_0.substr(indexOfEndTag + 2, text_0.length - (indexOfEndTag + 2)));
      indexOfStartTag = text_0.indexOf('|<');
    }
  }
  return offsetLenList;
}

function $getHAlign(hAlignVal){
  if ($equals_2(hAlignVal, 'left'))
    return 0;
  else if ($equals_2(hAlignVal, 'right'))
    return HALIGN_RIGHT;
  return HALIGN_CENTER;
}

function $getMinMaxForRange(minMax, min_0, max_0){
  !isNaN(min_0) && (isNaN_0(minMax.min_0) || min_0 < minMax.min_0) && (minMax.min_0 = min_0);
  !isNaN(max_0) && (isNaN_0(minMax.max_0) || max_0 > minMax.max_0) && (minMax.max_0 = max_0);
  return minMax;
}

function $getPointOnCircle_0(this$static, bottomMargin, angle){
  var bnds, innerRadius, x_0, y_0;
  bnds = this$static.graph.bnds;
  innerRadius = (bnds.height_0 - bottomMargin) / 2;
  x_0 = bnds.x_0 + bnds.width_0 / 2 + innerRadius * $wnd.Math.cos(angle * $intern_1 / 180);
  y_0 = bnds.y_0 + bnds.height_0 + innerRadius * $wnd.Math.sin(angle * $intern_1 / 180);
  return new CFPoint(x_0, y_0);
}

function $getRadialIndicatorShape(this$static, bnds, minMax, value_0){
  var fillColor, indicator, indicatorBnds, indicatorPath, indicatorWidthHeightRatio;
  value_0 < minMax.min_0 && (value_0 = minMax.min_0);
  value_0 > minMax.max_0 && (value_0 = minMax.max_0);
  this$static.radialStyle == 1?(indicatorPath = new CFPath_7(indicatorPathStrTicks)):(indicatorPath = new CFPath_7(indicatorPathStr));
  indicatorBnds = $getBoundsForPath(indicatorPath);
  indicatorWidthHeightRatio = indicatorBnds.width_0 / indicatorBnds.height_0;
  $setWidth(indicatorBnds, bnds.height_0 * indicatorWidthHeightRatio);
  $setX_0(indicatorBnds, bnds.x_0 + bnds.width_0 / 2 - indicatorBnds.width_0 / 2);
  $setY_0(indicatorBnds, bnds.y_0);
  $setHeight(indicatorBnds, bnds.height_0);
  $scaleAndPositionToRect(indicatorPath, indicatorBnds);
  fillColor = new CFColor_2('#666666');
  $hasTextColorOverride(this$static.graph) && (fillColor = $duplicate_0($getTextColor(this$static.graph.chart.palette)));
  indicator = new CFShape_0(indicatorPath, new CFFill(fillColor), null);
  indicator.fill_0.noMouse = true;
  $setRotation(indicator, $getAngleForValue(this$static, minMax, value_0));
  $setRotationPoint(indicator, new CFPoint(indicatorBnds.x_0 + indicatorBnds.width_0 / 2, indicatorBnds.y_0 + indicatorBnds.height_0));
  !!indicator.path && (indicator.path.shouldAntiAlias = true);
  return indicator;
}

function $getTickRadialBnds(bnds){
  var gaugeBnds, xOffset, yOffset;
  if (bnds.height_0 > bnds.width_0 / 2) {
    yOffset = (bnds.height_0 - bnds.width_0 / 2) / 2;
    gaugeBnds = new CFRect(bnds.x_0, bnds.y_0 + yOffset, bnds.width_0, bnds.width_0 / 2);
  }
   else {
    xOffset = (bnds.width_0 - bnds.height_0 * 2) / 2;
    gaugeBnds = new CFRect(bnds.x_0 + xOffset, bnds.y_0, bnds.height_0 * 2, bnds.height_0);
  }
  $inflate(gaugeBnds, -2);
  return gaugeBnds;
}

function $getVAlign(vAlignVal){
  if ($equals_2(vAlignVal, 'top'))
    return 0;
  else if ($equals_2(vAlignVal, 'bottom'))
    return VALIGN_BOTTOM;
  return VALIGN_MIDDLE;
}

function $setHoverEffects_4(this$static, hoverData, rnd){
  var hi;
  if (hoverData != null && instanceOf(hoverData, 89)) {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
    hi = castTo(hoverData, 89);
    $getOrCreateHoverLabel(this$static.graph);
    $setHoverPoint(this$static.graph, hi.point);
    $addPrimary_2(this$static.graph.hoverLabel, rnd, hi.text_0, hi.point, hi.position, false);
  }
   else {
    !!this$static.graph.hoverLabel && $removeAll(this$static.graph.hoverLabel);
  }
  return true;
}

function $setupAnimation_0(this$static){
  if (this$static.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this$static.graph, this$static.graph.seriesShapes);
    this$static.graph.seriesShapes = new ArrayList;
  }
  this$static.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $add_1(this$static.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
}

function HandlerGauge(){
  this.tbHAlign = HALIGN_CENTER;
  this.tbVAlign = VALIGN_MIDDLE;
}

defineClass(113, 118, {113:1}, HandlerGauge);
_.format_0 = function format_13(rnd){
  !!this.graph.data_0 && $sortRows(this.graph.data_0, 0);
  if (this.graph.typeAttributes.isProgressBar) {
    $drawProgressBar(this, rnd);
  }
   else if (this.graph.typeAttributes.isFaceGauge) {
    $drawFaceGauge(this);
  }
   else if (this.graph.typeAttributes.isSingleValue) {
    $drawSingleValue(this, rnd);
  }
   else if (this.graph.typeAttributes.isTextbox && this.graph.typeAttributes.isDynamic) {
    this.POSITIVE_COLOR = $getColor(this.graph, 'PositiveColor', '#559E38');
    this.NEGATIVE_COLOR = $getColor(this.graph, 'NegativeColor', '#C92E25');
    $drawDynamicTextbox(this, rnd);
  }
   else 
    this.graph.typeAttributes.isTextbox?$drawTextbox(this, rnd):this.graph.typeAttributes.isRadial?$drawRadialGauge(this, rnd):this.graph.graphType == 38 && $drawPalette(this, rnd);
  this.graph.setNeedsFormat(false);
}
;
_.freeResources = function freeResources_21(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.progressBarBnds = null;
  this.progressBarTextBnds = null;
  this.displayVal = null;
  this.headerText = null;
  this.footerText = null;
  this.tbText = null;
  this.tbFontColor = null;
  this.radialGaugeBounds = null;
  this.radialMinMax = null;
  this.radialIndicatorShape = null;
  this.geIndicator = null;
  this.range1Clr = null;
  this.range2Clr = null;
  this.range3Clr = null;
  this.range4Clr = null;
  this.range5Clr = null;
  this.range6Clr = null;
  this.overrideNegativeColor = null;
  this.overridePositiveColor = null;
  this.POSITIVE_COLOR = null;
  this.NEGATIVE_COLOR = null;
}
;
_.handleNoDataState = function handleNoDataState_0(rnd){
  var value_0;
  value_0 = this.graph.getChartOptionAsString('no_data_handling');
  this.noDataHandling = 0;
  value_0 != null && ($startsWith(value_0.toLowerCase(), 'blank')?(this.noDataHandling = 1):$startsWith(value_0.toLowerCase(), 'zero') && (this.noDataHandling = 2));
  if (this.graph.typeAttributes.isSingleValue) {
    if (this.noDataHandling == 2) {
      this.graph.data_0 = $createZeroValueGrid(this);
      $setNumberFormatFromColumnFormat(this.graph);
      this.graph.updateNumberFormats(true);
      return true;
    }
     else if (this.noDataHandling == 1) {
      return true;
    }
  }
  return false;
}
;
_.processChartOptions = function processChartOptions_16(){
  var key, key$iterator, rangePct, tickLenPct, value_0;
  this.tbHAlign = HALIGN_CENTER;
  this.tbVAlign = VALIGN_MIDDLE;
  this.tbFontColor = $getTextColor(this.graph.chart.palette);
  this.fontColorDefaultBlack = ($clinit_CFColor() , BLACK);
  this.tbFontSize = 100;
  this.tbFace = 0;
  this.radialStyle = 0;
  $hasTextColorOverride(this.graph) && (this.fontColorDefaultBlack = $getTextColor(this.graph.chart.palette));
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'hide_progress_label':
          this.hideProgressLabel = isTrue(value_0);
          break;
        case 'green_range_min':
          this.greenMin = checkNotNull(getDouble(value_0));
          break;
        case 'green_range_max':
          this.greenMax = checkNotNull(getDouble(value_0));
          break;
        case 'yellow_range_min':
          this.yellowMin = checkNotNull(getDouble(value_0));
          break;
        case 'yellow_range_max':
          this.yellowMax = checkNotNull(getDouble(value_0));
          break;
        case 'red_range_min':
          this.redMin = checkNotNull(getDouble(value_0));
          break;
        case 'red_range_max':
          this.redMax = checkNotNull(getDouble(value_0));
          break;
        case 'value_type':
        case 'single_value_type':
          this.displayVal = value_0.toLowerCase();
          break;
        case 'header':
          this.headerText = ($clinit_StrUtil() , entityDecodeString(value_0));
          this.headerText = convertBrToNewLine(this.headerText);
          break;
        case 'footer':
          this.footerText = ($clinit_StrUtil() , entityDecodeString(value_0));
          this.footerText = convertBrToNewLine(this.footerText);
          break;
        case 'text':
          this.tbText = ($clinit_StrUtil() , entityDecodeString(value_0));
          this.tbText = convertBrToNewLine(this.tbText);
          break;
        case 'font_size':
          this.tbFontSize = $getFontSize(value_0.toLowerCase());
          break;
        case 'font_style_tb':
          this.tbFace = $getFontFace(value_0.toLowerCase());
          break;
        case 'font_color':
          this.tbFontColor = $getColorForName(this.graph.colorMgr, value_0);
          break;
        case 'horz_alignment':
          this.tbHAlign = $getHAlign(value_0.toLowerCase());
          break;
        case 'vert_alignment':
          this.tbVAlign = $getVAlign(value_0.toLowerCase());
          break;
        case 'top_margin':
          this.tbTopMargin = checkNotNull(getDouble(value_0));
          break;
        case 'left_margin':
          this.tbLeftMargin = checkNotNull(getDouble(value_0));
          break;
        case 'bottom_margin':
          this.tbBottomMargin = checkNotNull(getDouble(value_0));
          break;
        case 'right_margin':
          this.tbRightMargin = checkNotNull(getDouble(value_0));
          break;
        case 'range1_min':
          this.range1Min = checkNotNull(getDouble(value_0));
          break;
        case 'range1_max':
          this.range1Max = checkNotNull(getDouble(value_0));
          break;
        case 'range2_min':
          this.range2Min = checkNotNull(getDouble(value_0));
          break;
        case 'range2_max':
          this.range2Max = checkNotNull(getDouble(value_0));
          break;
        case 'range3_min':
          this.range3Min = checkNotNull(getDouble(value_0));
          break;
        case 'range3_max':
          this.range3Max = checkNotNull(getDouble(value_0));
          break;
        case 'range4_min':
          this.range4Min = checkNotNull(getDouble(value_0));
          break;
        case 'range4_max':
          this.range4Max = checkNotNull(getDouble(value_0));
          break;
        case 'range5_min':
          this.range5Min = checkNotNull(getDouble(value_0));
          break;
        case 'range5_max':
          this.range5Max = checkNotNull(getDouble(value_0));
          break;
        case 'range6_min':
          this.range6Min = checkNotNull(getDouble(value_0));
          break;
        case 'range6_max':
          this.range6Max = checkNotNull(getDouble(value_0));
          break;
        case 'range1_color':
          this.range1Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'range2_color':
          this.range2Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'range3_color':
          this.range3Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'range4_color':
          this.range4Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'range5_color':
          this.range5Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'range6_color':
          this.range6Clr = $getRadialGaugeColorForName(this.graph.colorMgr, value_0);
          break;
        case 'negative_numbers':
        case 'single_negative_numbers':
          $applyNegativeFormat(this.graph.numberFormatter, value_0);
          break;
        case 'decimal_places':
        case 'single_decimal_places':
          $applyDecimalPlaces(this.graph.numberFormatter, value_0);
          this.graph.updateNumberFormats(false);
          break;
        case 'divide_value_by':
        case 'single_divide_value_by':
          $setMultiplyBy100(this.graph.numberFormatter, false);
          $setDivideScaleBy(this.graph.numberFormatter, value_0, false);
          this.graph.updateNumberFormats(false);
          break;
        case 'single_value_format':
          $applyValueFormatOverride(this.graph.numberFormatter, value_0);
          this.graph.numberFormatter.numberType != 2 && this.graph.numberFormatter.multiplyBy100 && $setMultiplyBy100(this.graph.numberFormatter, false);
          this.graph.updateNumberFormats(false);
          break;
        case 'fill_color':
          this.fillColor = $getColorForName(this.graph.colorMgr, value_0);
          break;
        case 'radial_style':
          $startsWith(value_0.toLowerCase(), 'tick') && (this.radialStyle = 1);
          break;
        case 'radial_tick_pct':
          tickLenPct = getInt(value_0, 10);
          tickLenPct < 5 && (tickLenPct = 5);
          tickLenPct > 50 && (tickLenPct = 50);
          this.radialTickLenPct = tickLenPct * 0.01;
          break;
        case 'radial_range_pct':
          rangePct = getInt(value_0, 10);
          rangePct < 5 && (rangePct = 5);
          rangePct > 50 && (rangePct = 50);
          this.radialRangeBandPct = rangePct * 0.01;
          break;
        case 'apply_chg_val_to_first':
          this.chgValFmtFirstVal = isTrue(value_0);
          break;
        case 'apply_chg_val_to_last':
          this.chgValFmtLastVal = isTrue(value_0);
          break;
        case 'apply_chg_val_to_max':
        case 'apply_chg_val_to_min':
          isTrue(value_0);
          break;
        case 'reverse_color_dir':
          this.reverseColorDir = isTrue(value_0);
          break;
        case 'up_fill_color':
          this.overridePositiveColor = value_0;
          break;
        case 'down_fill_color':
          this.overrideNegativeColor = value_0;
          break;
        case 'abbrev_values':
          this.abbreviateValues = isTrue(value_0);
      }
    }
  }
}
;
_.setFrame = function setFrame_11(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, ge, geBar, pctComplete, pctValue, shape_0, srsInfo, initialRect, rct;
  if (!!this.graph.seriesShapes && this.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList) {
    if (this.graph.typeAttributes.isProgressBar) {
      srsInfo = castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 82);
      animInfo = new AnimInfoSrs(startTime, endTime, easingType);
      pctComplete = $getPercentComplete(animInfo, curTime);
      if (this.graph.frontGeAry.size_1() > 1) {
        ge = castTo(this.graph.frontGeAry.get_1(0), 12);
        this.graph.frontGeAry.remove(ge);
      }
      $add_1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, srsInfo);
      shape_0 = (initialRect = new CFRect(srsInfo.rect.x_0, srsInfo.rect.y_0, 1, srsInfo.rect.height_0) , rct = getAnimRectAll(initialRect, srsInfo.rect, pctComplete) , new CFShape_1(rct, srsInfo.fill_0, srsInfo.stroke_0));
      geBar = new GraphicElement_0(shape_0);
      this.graph.frontGeAry.add_1(0, geBar);
    }
     else if (this.graph.typeAttributes.isRadial) {
      animInfo = new AnimInfoSrs(startTime, endTime, easingType);
      pctComplete = $getPercentComplete(animInfo, curTime);
      pctValue = this.radialMinMax.min_0 + (this.radialValue - this.radialMinMax.min_0) * pctComplete;
      !!this.geIndicator && this.graph.geAry.remove(this.geIndicator);
      this.radialIndicatorShape = $getRadialIndicatorShape(this, this.radialGaugeBounds, this.radialMinMax, pctValue);
      this.geIndicator = new GraphicElement_0($duplicate_6(this.radialIndicatorShape));
      $addGraphicElement_0(this.graph, this.geIndicator);
    }
  }
}
;
_.setHoverData = function setHoverData_16(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_4(this, this.hoverData, rnd);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_8(hoverData, rnd){
  return $setHoverEffects_4(this, hoverData, rnd);
}
;
_.NEGATIVE_COLOR = null;
_.POSITIVE_COLOR = null;
_.abbreviateValues = false;
_.chgValFmtFirstVal = false;
_.chgValFmtLastVal = false;
_.defaultCurValToLastRow = false;
_.displayVal = '';
_.greenMax = 50;
_.greenMin = 0;
_.hideProgressLabel = false;
_.isUsedAsSubGraph = false;
_.noDataHandling = 0;
_.radialRangeBandPct = 0.1;
_.radialStyle = 0;
_.radialTickLenPct = 0.1;
_.radialValue = 0;
_.range1Max = NaN;
_.range1Min = NaN;
_.range2Max = NaN;
_.range2Min = NaN;
_.range3Max = NaN;
_.range3Min = NaN;
_.range4Max = NaN;
_.range4Min = NaN;
_.range5Max = NaN;
_.range5Min = NaN;
_.range6Max = NaN;
_.range6Min = NaN;
_.redMax = 100;
_.redMin = 80;
_.reverseColorDir = false;
_.tbBottomMargin = 0;
_.tbFace = 0;
_.tbFontSize = 0;
_.tbHAlign = 0;
_.tbLeftMargin = 0;
_.tbRightMargin = 0;
_.tbTopMargin = 0;
_.tbVAlign = 0;
_.useAllAvailableSpace = false;
_.yellowMax = 80;
_.yellowMin = 50;
var RADIAL_GAUGE_HEIGHT_WIDTH_RATIO = 1.5, grayFacePath = 'M 78.2 1 C 41.9 1 12.1 28.5 8.5 63.8 C 4.1 68 1.4 73.8 1.4 80.3 C 1.4 89.6 7 97.5 14.9 101.1 C 26.2 124.7 50.3 141 78.2 141 C 106.3 141 130.6 124.5 141.7 100.6 C 149.1 96.8 154.1 89.1 154.1 80.3 C 154.1 74.3 151.8 68.9 148 64.8 C 144.9 29 114.8 1 78.2 1 Z M 57.7 52 C 57.7 48.6 60.4 45.9 63.8 45.9 C 67.1 45.9 69.8 48.6 69.8 52 L 69.8 54 C 69.8 57.4 67.1 60.1 63.8 60.1 C 60.4 60.1 57.7 57.4 57.7 54 L 57.7 52 Z M 98.7 54 C 98.7 57.4 96 60.1 92.6 60.1 C 89.3 60.1 86.6 57.4 86.6 54 L 86.6 52 C 86.6 48.6 89.3 45.9 92.6 45.9 C 96 45.9 98.7 48.6 98.7 52 L 98.7 64 Z ', greenFacePath = 'M 78.2 1 C 41.9 1 12.1 28.5 8.5 63.8 C 4.1 68 1.4 73.8 1.4 80.3 C 1.4 89.6 7 97.5 14.9 101.1 C 26.2 124.7 50.3 141 78.2 141 C 106.3 141 130.6 124.5 141.7 100.6 C 149.1 96.8 154.1 89.1 154.1 80.3 C 154.1 74.3 151.8 68.9 148 64.8 C 144.9 29 114.8 1 78.2 1 Z M 57.7 52 C 57.7 48.6 60.4 45.9 63.8 45.9 C 67.1 45.9 69.8 48.6 69.8 52 L 69.8 64 C 69.8 67.4 67.1 70.1 63.8 70.1 C 60.4 70.1 57.7 67.4 57.7 64 L 57.7 52 Z M 78.2 98.6 C 69.7 98.6 62.3 93.9 58.4 87 L 98.1 87 C 94.1 93.9 86.7 98.6 78.2 98.6 Z M 98.7 64 C 98.7 67.4 96 70.1 92.6 70.1 C 89.3 70.1 86.6 67.4 86.6 64 L 86.6 52 C 86.6 48.6 89.3 45.9 92.6 45.9 C 96 45.9 98.7 48.6 98.7 52 L 98.7 64 Z ', indicatorPathStr = 'm 9,0; l 0,166; l 0.223,166; c 0.0770,166.64325,0,167.31262,0,168; c 0,172.97052,4.029,177,9,177; c 13.970,177,18,172.970,18,168; c 18,167.3126,17.9229,166.64325,17.7769,166; l 18,166; l 9,0; l 9,0;', indicatorPathStrTicks = 'm 5,0; l 0,166; l 10,166; l 5,0; l 5,0;', redFacePath = 'M 145.3 54.1 C 137.7 23.6 110.1 1 77.2 1 C 44.4 1 16.8 23.6 9.2 54.1 C 4.2 58.3 0.9 64.6 0.9 71.7 C 0.9 79 4.4 85.5 9.7 89.7 C 17.9 119.3 45 141 77.2 141 C 109.5 141 136.6 119.3 144.8 89.7 C 150.1 85.5 153.6 79 153.6 71.7 C 153.6 64.6 150.3 58.3 145.3 54.1 Z M 51.1 63.1 C 51.1 62.2 51.2 61.3 51.5 60.5 L 46.5 58.3 L 49.4 51.6 L 49.4 51.6 L 49.4 51.6 L 55.9 54.4 L 71.4 61.1 L 73.1 61.8 L 70.8 67 L 70.8 67.1 L 70.2 68.6 L 70.2 68.6 L 70.2 68.6 L 70 68.5 C 68.2 71.4 65 73.3 61.4 73.3 C 61.4 73.3 61.4 73.3 61.4 73.3 C 61.4 73.3 61.4 73.3 61.4 73.3 C 55.7 73.3 51.1 68.7 51.1 63.1 Z M 98.4 99.5 L 58.7 99.4 C 59.7 97.7 60.9 96.1 62.2 94.7 C 66.4 90.5 72.2 87.9 78.5 87.9 C 87.1 87.9 94.5 92.5 98.4 99.5 L 98.4 99.5 C 98.4 99.5 98.4 99.5 98.4 99.5 Z M 105.3 63.1 C 105.3 68.7 100.7 73.3 95 73.3 C 91.4 73.3 88.2 71.4 86.4 68.5 L 86.2 68.6 L 85.6 67.1 L 85.6 67 L 83.3 61.8 L 85 61.1 L 100.5 54.4 L 107 51.6 L 109.9 58.3 L 105 60.5 C 105.2 61.3 105.3 62.2 105.3 63.1 Z ', yellowFacePath = 'M 144 47.9 C 134.4 20.6 108.4 1 77.8 1 C 47.2 1 21.2 20.6 11.6 47.9 C 5.5 52 1.5 59 1.5 66.9 C 1.5 73.5 4.4 79.5 8.9 83.7 C 14.9 116.3 43.5 141 77.8 141 C 112.2 141 140.8 116.3 146.7 83.7 C 151.3 79.5 154.1 73.5 154.1 66.9 C 154.1 59 150.1 52 144 47.9 Z M 58 77.6 L 58 65.5 C 58 62.2 60.7 59.5 64 59.5 C 67.4 59.5 70.1 62.2 70.1 65.5 L 70.1 77.6 C 70.1 80.9 67.4 83.6 64 83.6 C 60.7 83.6 58 80.9 58 77.6 Z M 85.8 114.1 L 67.7 114.1 C 65.9 114.1 64.5 112.7 64.5 110.9 C 64.5 109.1 65.9 107.7 67.7 107.7 L 85.8 107.7 C 87.5 107.7 89 109.1 89 110.9 C 89 112.7 87.5 114.1 85.8 114.1 Z M 96.8 77.6 C 96.8 80.9 94.1 83.6 90.7 83.6 C 87.4 83.6 84.7 80.9 84.7 77.6 L 84.7 65.5 C 84.7 62.2 87.4 59.5 90.7 59.5 C 94.1 59.5 96.8 62.2 96.8 65.5 L 96.8 77.6 Z ';
var Lcom_domo_charting_graphs_HandlerGauge_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerGauge', 113);
function $addArrowIndicator(this$static, bnds, col){
  var color_0, curValue, firstCell, isUp, lastCell, leftOffset, midX, path, points, prevValue, shape_0, topOffset;
  isUp = false;
  color_0 = this$static.RED_ARROW_COLOR;
  prevValue = 0;
  curValue = 0;
  firstCell = $getFirstCell(col);
  this$static.changesFromPreviousVal && (firstCell = $getNextToLastCell(col));
  !!firstCell && (prevValue = $getValue(firstCell));
  lastCell = $getLastCell(col);
  !!lastCell && (curValue = $getValue(lastCell));
  if (curValue >= prevValue) {
    isUp = true;
    color_0 = this$static.GREEN_ARROW_COLOR;
  }
  leftOffset = (bnds.width_0 - 10) / 2 + 1;
  topOffset = (bnds.height_0 - 11) / 2;
  midX = leftOffset + 5;
  points = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
  if (isUp) {
    points[0] = new CFPoint(bnds.x_0 + leftOffset, bnds.y_0 + topOffset + 11);
    points[1] = new CFPoint(bnds.x_0 + leftOffset + 10, bnds.y_0 + topOffset + 11);
    points[2] = new CFPoint(bnds.x_0 + midX, bnds.y_0 + topOffset);
  }
   else {
    points[0] = new CFPoint(bnds.x_0 + leftOffset, bnds.y_0 + topOffset);
    points[1] = new CFPoint(bnds.x_0 + leftOffset + 10, bnds.y_0 + topOffset);
    points[2] = new CFPoint(bnds.x_0 + midX, bnds.y_0 + topOffset + 11);
  }
  path = new CFPath_13(points, true);
  shape_0 = new CFShape_0(path, new CFFill(color_0), null);
  !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
  $add_1(this$static.nonGraphGEAry, new GraphicElement_0(shape_0));
  $drawOverlayShape(this$static, bnds, col);
}

function $addColTitle(this$static, rnd, colNum, cellBnds){
  var ge, title_0, titleFont;
  $inflateWidth(cellBnds, round_int(-this$static.textMargin));
  title_0 = castToString($get_2(this$static.colTitles, colNum));
  titleFont = $duplicate_2(this$static.headerFnt);
  this$static.headerFontFace != 0 && $setFace(titleFont, this$static.headerFontFace);
  ge = ($clinit_StrUtil() , drawTextInBounds(rnd, cellBnds, title_0, titleFont, 0, VALIGN_MIDDLE, titleFont.size_0, null, null));
  $add_1(this$static.nonGraphGEAry, ge);
}

function $addGraphColumn(this$static, rnd, col, rowNum, cellBnds, options, singleValueMax){
  var graphBnds, handler, rowGraph, rowGrid, scale, scale$iterator, ta, valScale;
  rowGrid = $getSingleColumnDataGrid(this$static.graph.data_0, col, this$static.lastValueOnly);
  rowGraph = new ScaleGraph(this$static.graph.chart, 'Row' + rowNum, this$static.graph.graphType);
  graphBnds = new CFRect(cellBnds.x_0, cellBnds.y_0, cellBnds.width_0, cellBnds.height_0);
  if (this$static.graph.graphType == 0) {
    $setY_0(graphBnds, graphBnds.y_0 + 4);
    $setHeight(graphBnds, graphBnds.height_0 - 4);
    $setX_0(graphBnds, graphBnds.x_0 + 4);
    $setWidth(graphBnds, graphBnds.width_0 - 8);
  }
   else if (this$static.graph.graphType == 1) {
    $setY_0(graphBnds, graphBnds.y_0 + 4);
    $setHeight(graphBnds, graphBnds.height_0 - 8);
    $setWidth(graphBnds, graphBnds.width_0 - 4);
  }
  rowGraph.bnds = new CFRect(graphBnds.x_0, graphBnds.y_0, graphBnds.width_0, graphBnds.height_0);
  $setLayoutFlagsBasedOnSize(rowGraph);
  $setHasInteractions(rowGraph, $hasInteractions(this$static.graph));
  $setAllowInteractions(rowGraph, this$static.graph.allowInteractions);
  ta = new TypeAttributes;
  handler = setupGraphHandler(this$static.graph.graphType, ta, null);
  setupGraphScales(this$static.graph.graphType, ta, rowGraph);
  !!handler && handler.setGraph(rowGraph);
  rowGraph.handler = handler;
  instanceOf(handler, 60) && (castTo(handler, 60).isFlexTableChart = true);
  instanceOf(handler, 64) && (castTo(handler, 64).includeEmptyCellsInTimeScaleMinMax = true);
  $setData_0(rowGraph, rowGrid);
  $removeGoalScaleMarker(rowGraph);
  rowGraph.chartOptions = options;
  $processChartOptions_2(rowGraph);
  if (this$static.lastValueOnly && this$static.graph.graphType == 1) {
    valScale = $getValueScaleByNumber(rowGraph, 0);
    !!valScale && (valScale.manualMax = singleValueMax , valScale.manualMax < 0 && (valScale.alwaysIncludeZero = false));
  }
  for (scale$iterator = new ArrayList$1(rowGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.isHidden = true;
  }
  $format_5(rowGraph, rnd);
  $add_1(this$static.graphAry, rowGraph);
}

function $addValueColumn(this$static, colDefValue, rnd, col, cellBnds){
  var ge, hAlign, hasFilteredData, inShowAsFilteredMode, overallCellBnds, value_0, valueFnt;
  inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
  hasFilteredData = !!this$static.graph.data_0 && this$static.graph.data_0.hasFilteredCols;
  overallCellBnds = new CFRect_0(cellBnds);
  $inflateWidth(cellBnds, round_int(-this$static.textMargin));
  value_0 = $getColValue(this$static, colDefValue, col);
  hAlign = HALIGN_RIGHT;
  colDefValue == 0 && (hAlign = 0);
  valueFnt = $duplicate_2(this$static.textFnt);
  inShowAsFilteredMode && hasFilteredData && !col.showAsFiltered && (valueFnt.face_0 = 1);
  (colDefValue == 3 || colDefValue == 4) && (value_0.indexOf('-') != -1?$setColor_1(valueFnt, this$static.RED_ARROW_COLOR):$setColor_1(valueFnt, this$static.GREEN_ARROW_COLOR));
  ge = ($clinit_StrUtil() , drawTextInBounds(rnd, cellBnds, value_0, valueFnt, hAlign, VALIGN_MIDDLE, valueFnt.size_0, null, null));
  $drawOverlayShape(this$static, overallCellBnds, col);
  $add_1(this$static.nonGraphGEAry, ge);
}

function $calculateColWidths(this$static, rnd){
  var colDef, colDef$iterator, colWidthsSet, extraSpacePerCol, graphColIndex, graphHasSetWidth, graphWidth, grphBnds, hasGraph, hasIndicator, i, indWidth, index_0, nameColLen, numCols, remainingWidth, totalWidth;
  grphBnds = $duplicate_5(this$static.graph.bnds);
  $inflate(grphBnds, -2);
  remainingWidth = grphBnds.width_0;
  totalWidth = remainingWidth;
  colWidthsSet = $setColWidthsFromPercents(this$static, remainingWidth);
  if (!colWidthsSet) {
    graphWidth = 0;
    index_0 = 0;
    graphColIndex = 0;
    hasGraph = false;
    hasIndicator = false;
    graphHasSetWidth = $graphColHasSetWidth(this$static);
    $hasGraph(this$static) && !graphHasSetWidth && (remainingWidth > 300?(graphWidth = remainingWidth / 4):remainingWidth > 200?(graphWidth = remainingWidth / 3):(graphWidth = remainingWidth / 2));
    this$static.colWidths.array.length > 0 && $get_2(this$static.colWidths, 0) != null && (remainingWidth -= $getWidthAmountAllocatedByPercentVals(this$static));
    if (!graphHasSetWidth) {
      if (remainingWidth > graphWidth) {
        remainingWidth -= graphWidth;
      }
       else {
        graphWidth = remainingWidth;
        remainingWidth = 0;
      }
    }
    for (colDef$iterator = new ArrayList$1(this$static.colDefs); colDef$iterator.i < colDef$iterator.this$01.array.length;) {
      colDef = castTo($next_3(colDef$iterator), 29);
      if (colDef.value_0 == 1) {
        graphHasSetWidth || $set(this$static.colWidths, index_0, 0);
        graphColIndex = index_0;
        hasGraph = true;
      }
       else if (colDef.value_0 == 2 && !$colHasSetWidth(this$static, index_0)) {
        indWidth = this$static.rowHeight / 2;
        indWidth < 20 && (indWidth = 20);
        if (indWidth < remainingWidth) {
          remainingWidth -= indWidth;
          $set(this$static.colWidths, index_0, indWidth);
          hasIndicator = true;
        }
         else {
          if (remainingWidth >= 20) {
            $set(this$static.colWidths, index_0, remainingWidth);
            remainingWidth = 0;
            hasIndicator = true;
          }
           else {
            $set(this$static.colWidths, index_0, 0);
          }
        }
      }
       else if (!$colHasSetWidth(this$static, index_0)) {
        nameColLen = $getLongestValuePixelLength(this$static, colDef.value_0, rnd) + 2 * this$static.textMargin;
        nameColLen = $getLargestLenTitleOrData(this$static, nameColLen, $getPixelWidthForColName(this$static, castToString($get_2(this$static.colTitles, index_0)), rnd));
        colDef.value_0 == 0 && nameColLen > totalWidth / this$static.colDefs.array.length * 2 && (nameColLen = totalWidth / this$static.colDefs.array.length * 2);
        if (nameColLen < remainingWidth) {
          remainingWidth -= nameColLen;
          $set(this$static.colWidths, index_0, nameColLen);
        }
         else {
          $set(this$static.colWidths, index_0, remainingWidth);
          remainingWidth = 0;
        }
      }
      ++index_0;
    }
    if (remainingWidth > 0) {
      if (hasGraph && !graphHasSetWidth) {
        $set(this$static.colWidths, graphColIndex, remainingWidth + graphWidth);
      }
       else {
        numCols = $getNumColsWithUnspecifiedWidth(this$static);
        hasIndicator && --numCols;
        extraSpacePerCol = remainingWidth / numCols;
        for (i = 0; i < this$static.colWidths.array.length; i++) {
          castTo($get_2(this$static.colDefs, i), 29).value_0 != 2 && !$colHasSetWidth(this$static, i) && $set(this$static.colWidths, i, checkNotNull(castToDouble($get_2(this$static.colWidths, i))) + extraSpacePerCol);
        }
      }
    }
     else 
      hasGraph && !graphHasSetWidth && $set(this$static.colWidths, graphColIndex, graphWidth);
  }
}

function $colHasSetWidth(this$static, index_0){
  if (!isNaN_0(checkNotNull(castToDouble($get_2(this$static.colWidthOverridePercents, index_0)))))
    return true;
  return false;
}

function $drawOverlayShape(this$static, cellBnds, colRowInfo){
  var graphicElement;
  if (!!colRowInfo && colRowInfo.parentName != null) {
    graphicElement = new GraphicElement_0(new CFShape_1(cellBnds, ($clinit_CFFill() , TRANSPARENT_0), null));
    graphicElement.dataObject = colRowInfo;
    $addFrontGraphicElement_0(this$static.graph, graphicElement);
  }
}

function $getColTitle(titleOverride, colDef){
  if (titleOverride != null)
    return titleOverride;
  switch (colDef) {
    case 1:
      return 'Chart';
    case 0:
      return 'Name';
    case 3:
      return 'Pct Chg';
    case 4:
      return 'Change';
    case 5:
      return 'First';
    case 6:
      return 'Penultimate';
    case 7:
      return 'Last';
    case 8:
      return 'Min';
    case 9:
      return 'Max';
    case 10:
      return 'Avg';
  }
  return '';
}

function $getColValue(this$static, colDefValue, col){
  var firstCell, lastCell, penCell, values, values0, values1;
  if (!col)
    return '';
  switch (colDefValue) {
    case 0:
      return $getName(col);
    case 3:
      return getChangeVal(true, col, this$static.graph, this$static.changesFromPreviousVal);
    case 4:
      return getChangeVal(false, col, this$static.graph, this$static.changesFromPreviousVal);
    case 8:
      return $getFormattedValue(this$static, col, (values0 = $getValuesNonProjected(col, true, false) , getMinValueForValues(values0)));
    case 9:
      return $getFormattedValue(this$static, col, (values1 = $getValuesNonProjected(col, true, false) , getMaxValueForValues(values1)));
    case 10:
      return $getFormattedValue(this$static, col, (values = $getValuesNonProjected(col, false, false) , getAvgValueForValues(values)));
    case 5:
      firstCell = $getFirstCell(col);
      if (firstCell)
        return $getFormattedValue(this$static, col, $getValue(firstCell));
      break;
    case 6:
      penCell = $getNextToLastCell(col);
      if (penCell)
        return $getFormattedValue(this$static, col, $getValue(penCell));
      break;
    case 7:
      lastCell = $getLastCell(col);
      if (lastCell)
        return $getFormattedValue(this$static, col, $getValue(lastCell));
  }
  return '';
}

function $getFormattedValue(this$static, col, value_0){
  var numberFormatter;
  if (!!col && !!col.format && col.format.size_1() > 0) {
    numberFormatter = new NumberFormatter;
    $applyColumnFormat(numberFormatter, col.format);
    return $formatNumber_1(numberFormatter, value_0);
  }
  return $formatNumber_1(this$static.graph.numberFormatter, value_0);
}

function $getLargestLenTitleOrData(this$static, dataLen, titleTextLen){
  titleTextLen += 2 * this$static.textMargin;
  if (titleTextLen > dataLen)
    return titleTextLen;
  return dataLen;
}

function $getLongestValuePixelLength(this$static, colDefValue, rnd){
  var boldFont, col, dim, longestValueLen;
  longestValueLen = 0;
  col = $getFirstVisibleCol(this$static.graph.data_0);
  boldFont = new CFFont(this$static.textFnt);
  boldFont.face_0 = 1;
  while (col) {
    dim = rnd.measureText_0($getColValue(this$static, colDefValue, col), boldFont);
    dim.width_0 > longestValueLen && (longestValueLen = dim.width_0);
    col = $getNextVisibleCol(this$static.graph.data_0, col);
  }
  return longestValueLen;
}

function $getNumColsWithUnspecifiedWidth(this$static){
  var colWidthPercent, colWidthPercent$iterator, numUnspecifiedWidthCols;
  numUnspecifiedWidthCols = 0;
  for (colWidthPercent$iterator = new ArrayList$1(this$static.colWidthOverridePercents); colWidthPercent$iterator.i < colWidthPercent$iterator.this$01.array.length;) {
    colWidthPercent = castToDouble($next_3(colWidthPercent$iterator));
    isNaN_0((checkCriticalNotNull(colWidthPercent) , colWidthPercent)) && ++numUnspecifiedWidthCols;
  }
  return numUnspecifiedWidthCols;
}

function $getPixelWidthForColName(this$static, name_0, rnd){
  var dim, width_0;
  width_0 = 0;
  if (name_0 != null) {
    dim = rnd.measureText_0(name_0, this$static.headerFnt);
    width_0 = dim.width_0;
  }
  return width_0;
}

function $getRowChartOptions(this$static){
  var optionName, optionName$iterator, options;
  options = new HashMap;
  $put_2(options.stringMap, 'never_use_time_scale', 'true');
  if (!!this$static.graph && !!this$static.graph.chartOptions) {
    for (optionName$iterator = this$static.graph.chartOptions.keySet_0().iterator(); optionName$iterator.hasNext_0();) {
      optionName = castToString(optionName$iterator.next_1());
      $equals_2(optionName, 'never_use_time_scale') || $putStringValue(options, optionName, this$static.graph.getChartOptionAsString(optionName));
    }
  }
  return options;
}

function $getSingleValMaxForLastValueOnlyChart(this$static){
  var cell, cell$iterator, entry, maxValue, outerIter, retValue, row;
  retValue = 0;
  if (this$static.lastValueOnly) {
    row = $getLastVisibleRow(this$static.graph.data_0);
    if (row) {
      maxValue = $intern_20;
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        !isNaN_0($getValue(cell)) && $getValue(cell) > maxValue && (maxValue = $getMaxValue(cell));
      }
      maxValue != $intern_20 && (retValue = maxValue);
    }
  }
  return retValue;
}

function $getWidthAmountAllocatedByPercentVals(this$static){
  var colWidth, colWidth$iterator, totalAllocated;
  totalAllocated = 0;
  for (colWidth$iterator = new ArrayList$1(this$static.colWidths); colWidth$iterator.i < colWidth$iterator.this$01.array.length;) {
    colWidth = castToDouble($next_3(colWidth$iterator));
    isNaN_0((checkCriticalNotNull(colWidth) , colWidth)) || (totalAllocated += (checkCriticalNotNull(colWidth) , colWidth));
  }
  return totalAllocated;
}

function $graphColHasSetWidth(this$static){
  var colDef, colDef$iterator, index_0;
  index_0 = 0;
  for (colDef$iterator = new ArrayList$1(this$static.colDefs); colDef$iterator.i < colDef$iterator.this$01.array.length;) {
    colDef = castTo($next_3(colDef$iterator), 29);
    if (colDef.value_0 == 1) {
      return !(index_0 >= this$static.colWidths.array.length || $get_2(this$static.colWidths, index_0) == null || isNaN_0(checkNotNull(castToDouble($get_2(this$static.colWidths, index_0)))));
    }
    ++index_0;
  }
  return false;
}

function $hasGraph(this$static){
  var colDef, colDef$iterator;
  for (colDef$iterator = new ArrayList$1(this$static.colDefs); colDef$iterator.i < colDef$iterator.this$01.array.length;) {
    colDef = castTo($next_3(colDef$iterator), 29);
    if (colDef.value_0 == 1)
      return true;
  }
  return false;
}

function $processColumnOptions(this$static){
  var graphAdded, i, key, titleKey, titleOverride, value_0, widthKey, widthOverride;
  graphAdded = false;
  this$static.colDefs.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this$static.colTitles.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this$static.colWidthOverridePercents.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  for (i = 1; i <= 10; i++) {
    key = 'col' + i + '_content';
    titleKey = 'col' + i + '_title';
    titleOverride = this$static.graph.getChartOptionAsString(titleKey);
    widthKey = 'col' + i + '_width';
    widthOverride = this$static.graph.getChartOptionAsString(widthKey);
    if (this$static.graph.getChartOptionAsString(key) != null) {
      value_0 = this$static.graph.getChartOptionAsString(key).toLowerCase();
      if (!$equals_2(value_0, 'empty')) {
        $add_1(this$static.colWidthOverridePercents, getDouble_0(widthOverride, NaN));
        if ($equals_2(value_0, 'graph') && !graphAdded) {
          $add_1(this$static.colDefs, valueOf(1));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 1));
          graphAdded = true;
        }
         else if ($equals_2(value_0, 'name')) {
          $add_1(this$static.colDefs, valueOf(0));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 0));
        }
         else if ($equals_2(value_0, 'change indicator')) {
          $add_1(this$static.colDefs, valueOf(2));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 2));
        }
         else if ($equals_2(value_0, 'change percent')) {
          $add_1(this$static.colDefs, valueOf(3));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 3));
        }
         else if ($equals_2(value_0, 'change value')) {
          $add_1(this$static.colDefs, valueOf(4));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 4));
        }
         else if ($equals_2(value_0, 'first value')) {
          $add_1(this$static.colDefs, valueOf(5));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 5));
        }
         else if ($equals_2(value_0, 'penultimate value')) {
          $add_1(this$static.colDefs, valueOf(6));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 6));
        }
         else if ($equals_2(value_0, 'last value')) {
          $add_1(this$static.colDefs, valueOf(7));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 7));
        }
         else if ($equals_2(value_0, 'minimum value')) {
          $add_1(this$static.colDefs, valueOf(8));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 8));
        }
         else if ($equals_2(value_0, 'maximum value')) {
          $add_1(this$static.colDefs, valueOf(9));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 9));
        }
         else if ($equals_2(value_0, 'average value')) {
          $add_1(this$static.colDefs, valueOf(10));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 10));
        }
      }
    }
     else if (i < 5) {
      $add_1(this$static.colWidthOverridePercents, getDouble_0(widthOverride, NaN));
      switch (i) {
        case 1:
          $add_1(this$static.colDefs, valueOf(0));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 0));
          break;
        case 2:
          $add_1(this$static.colDefs, valueOf(1));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 1));
          break;
        case 3:
          $add_1(this$static.colDefs, valueOf(2));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 2));
          break;
        case 4:
          $add_1(this$static.colDefs, valueOf(3));
          $add_1(this$static.colTitles, $getColTitle(titleOverride, 3));
      }
    }
  }
}

function $resizeVerticallyIfNeeded(this$static, rnd){
  var bnds, chartDimension, currentHeight, height, maxHeight, numCols, originalHeight, resize;
  if ($resizeable(this$static.graph)) {
    numCols = this$static.graph.data_0.numVisibleCols;
    maxHeight = rnd.supportsCanvasResize();
    maxHeight == -1 && (maxHeight = 20000);
    chartDimension = this$static.graph.chart.dimension;
    currentHeight = round_int(chartDimension.height_0);
    height = numCols * 18 + 40;
    resize = false;
    bnds = this$static.graph.bnds;
    if (bnds.height_0 != height) {
      originalHeight = this$static.graph.originalHeight;
      if (bnds.height_0 < height) {
        height > maxHeight && (height = maxHeight);
        originalHeight == -1 && $setOriginalHeight(this$static.graph, currentHeight);
        resize = true;
      }
       else if (height > originalHeight && originalHeight != -1)
        resize = true;
      else if (height < originalHeight) {
        height = originalHeight;
        resize = true;
      }
      if (resize) {
        rnd.setCanvasSize(round_int(chartDimension.width_0), height);
        $setVerticalSizeOnly(this$static.graph.chart, height);
      }
    }
  }
}

function $setColWidthsFromPercents(this$static, totalWidth){
  var colWidthPercent, colWidthPercent$iterator, colWidthPercent$iterator0, hasNaNVals, i, multiplier, totalSpecifiedColWidthPercents;
  hasNaNVals = false;
  totalSpecifiedColWidthPercents = 0;
  this$static.colWidths.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  for (colWidthPercent$iterator0 = new ArrayList$1(this$static.colWidthOverridePercents); colWidthPercent$iterator0.i < colWidthPercent$iterator0.this$01.array.length;) {
    colWidthPercent = castToDouble($next_3(colWidthPercent$iterator0));
    isNaN_0((checkCriticalNotNull(colWidthPercent) , colWidthPercent))?(hasNaNVals = true):(totalSpecifiedColWidthPercents += (checkCriticalNotNull(colWidthPercent) , colWidthPercent));
  }
  if (hasNaNVals) {
    if (totalSpecifiedColWidthPercents < 100) {
      for (colWidthPercent$iterator = new ArrayList$1(this$static.colWidthOverridePercents); colWidthPercent$iterator.i < colWidthPercent$iterator.this$01.array.length;) {
        colWidthPercent = castToDouble($next_3(colWidthPercent$iterator));
        isNaN_0((checkCriticalNotNull(colWidthPercent) , colWidthPercent))?$add_1(this$static.colWidths, NaN):$add_1(this$static.colWidths, (checkCriticalNotNull(colWidthPercent) , colWidthPercent) * totalWidth / 100);
      }
    }
     else {
      for (i = 0; i < this$static.colWidthOverridePercents.array.length; i++) {
        $set(this$static.colWidthOverridePercents, i, NaN);
        $add_1(this$static.colWidths, NaN);
      }
    }
  }
   else {
    multiplier = 100 / totalSpecifiedColWidthPercents;
    for (colWidthPercent$iterator = new ArrayList$1(this$static.colWidthOverridePercents); colWidthPercent$iterator.i < colWidthPercent$iterator.this$01.array.length;) {
      colWidthPercent = castToDouble($next_3(colWidthPercent$iterator));
      $add_1(this$static.colWidths, (checkCriticalNotNull(colWidthPercent) , colWidthPercent) * multiplier * totalWidth / 100);
    }
    return true;
  }
  return false;
}

function HandlerGrid(){
  this.colDefs = new ArrayList;
  this.colWidths = new ArrayList;
  this.colWidthOverridePercents = new ArrayList;
  this.colTitles = new ArrayList;
  this.headerFnt = new CFFont_0(null, 14, ($clinit_CFColor() , BLACK));
}

defineClass(232, 118, {}, HandlerGrid);
_.draw_1 = function draw_8(rnd){
  var rowGraph, rowGraph$iterator;
  drawGEAry(rnd, this.nonGraphGEAry);
  if (this.graphAry) {
    for (rowGraph$iterator = new ArrayList$1(this.graphAry); rowGraph$iterator.i < rowGraph$iterator.this$01.array.length;) {
      rowGraph = castTo($next_3(rowGraph$iterator), 40);
      $draw_4(rowGraph, rnd);
    }
  }
}
;
_.format_0 = function format_14(rnd){
  var canBeResized, cellBnds, colNum, curCol, curRowHeight, grphBnds, left, rowChartOptions, rowNum, singleValueMax, top_0, gridColor, cellStroke;
  singleValueMax = $getSingleValMaxForLastValueOnlyChart(this);
  this.textFnt = new CFFont_0(null, 14, $getTextColor(this.graph.chart.palette));
  this.GREEN_ARROW_COLOR = $getColor(this.graph, 'PositiveColor', '#559E38');
  this.RED_ARROW_COLOR = $getColor(this.graph, 'NegativeColor', '#C92E25');
  !!this.nonGraphGEAry && (this.nonGraphGEAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this.nonGraphGEAry = new ArrayList;
  this.graph.frontGeAry.clear_0();
  canBeResized = rnd.supportsCanvasResize() != 0 && !this.graph.isThumbnail;
  grphBnds = $duplicate_5(this.graph.bnds);
  $inflate(grphBnds, -2);
  $setHeight(grphBnds, grphBnds.height_0 - 4);
  this.rowHeight = (grphBnds.height_0 - this.headerHeight) / this.numDisplayRows;
  if (this.rowHeight < 18 && grphBnds.height_0 < 100) {
    this.headerHeight = 0;
    this.hideHeader = true;
  }
  this.fixedRowHeight > 0 && (this.rowHeight = this.fixedRowHeight);
  this.rowHeight < 18 && (this.rowHeight = 18);
  this.headerHeight < 18 && !this.hideHeader && (this.headerHeight = 18);
  $calculateColWidths(this, rnd);
  this.graphAry = new ArrayList;
  rowChartOptions = $getRowChartOptions(this);
  top_0 = grphBnds.y_0;
  curCol = $getFirstVisibleCol(this.graph.data_0);
  for (rowNum = -1; rowNum < this.numDisplayRows; rowNum++) {
    curRowHeight = this.rowHeight;
    rowNum == -1 && (curRowHeight = this.headerHeight);
    left = grphBnds.x_0;
    if (!canBeResized && top_0 + curRowHeight > grphBnds.y_0 + grphBnds.height_0)
      break;
    for (colNum = 0; colNum < this.colDefs.array.length; colNum++) {
      cellBnds = new CFRect(left, top_0, checkNotNull(castToDouble($get_2(this.colWidths, colNum))), curRowHeight);
      gridColor = new CFColor_2('#AAAAAA');
      !!this.graph.chart.palette.scaleLineColor && (gridColor = this.graph.chart.palette.scaleLineColor);
      cellStroke = new CFStroke(gridColor, 1);
      cellStroke.noMouse = true;
      $add_0(this.nonGraphGEAry, 0, new GraphicElement_0(new CFShape_1(cellBnds, null, cellStroke)));
      rowNum >= 0?castTo($get_2(this.colDefs, colNum), 29).value_0 == 1?$addGraphColumn(this, rnd, curCol, rowNum, cellBnds, rowChartOptions, singleValueMax):castTo($get_2(this.colDefs, colNum), 29).value_0 == 2 && cellBnds.width_0 > 0?$addArrowIndicator(this, cellBnds, curCol):$addValueColumn(this, castTo($get_2(this.colDefs, colNum), 29).value_0, rnd, curCol, cellBnds):this.hideHeader || $addColTitle(this, (castTo($get_2(this.colDefs, colNum), 29) , rnd), colNum, cellBnds);
      left += checkNotNull(castToDouble($get_2(this.colWidths, colNum)));
    }
    top_0 += curRowHeight;
    rowNum == -1?(curCol = $getFirstVisibleCol(this.graph.data_0)):(curCol = $getNextVisibleCol(this.graph.data_0, curCol));
    if (!curCol)
      break;
  }
  $resizeVerticallyIfNeeded(this, rnd);
  this.graph.setNeedsFormat(false);
}
;
_.freeResources = function freeResources_22(dataToKeep){
  var graph, graph$iterator;
  $freeResources_17(this, dataToKeep);
  if (this.graphAry) {
    for (graph$iterator = new ArrayList$1(this.graphAry); graph$iterator.i < graph$iterator.this$01.array.length;) {
      graph = castTo($next_3(graph$iterator), 40);
      if (graph.handler) {
        graph.handler.freeResources(null);
        graph.handler = null;
      }
    }
  }
  if (this.nonGraphGEAry) {
    clearGraphicElementArray(this.nonGraphGEAry);
    this.nonGraphGEAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this.nonGraphGEAry = null;
  }
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_6(x_0, y_0, rnd){
  var graph, i, shape_0;
  for (i = 0; i < this.graphAry.array.length; i++) {
    graph = castTo($get_2(this.graphAry, i), 40);
    if ($containsPoint($getHitBounds(graph), x_0, y_0)) {
      shape_0 = $getShapeUnderPoint_2(graph, x_0, y_0, rnd);
      if (shape_0)
        return shape_0;
    }
  }
  return null;
}
;
_.handleClick_0 = function handleClick_11(shapeClicked){
  if (!!shapeClicked && shapeClicked.dataObject != null && instanceOf(shapeClicked.dataObject, 7)) {
    if ($usingCardBus(this.graph.chart)) {
      $toggleColumnShowAsFilter(this.graph.data_0, castTo(shapeClicked.dataObject, 7));
      this.colWidthOverridePercents.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this.colDefs.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this.colWidths.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this.graph.setNeedsFormat(true);
    }
  }
  return -1;
}
;
_.processChartOptions = function processChartOptions_17(){
  var key, key$iterator, value_0;
  this.changesFromPreviousVal = false;
  $processColumnOptions(this);
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'fixed_row_height':
          this.fixedRowHeight = getInt(value_0, 0);
          break;
        case 'header_row_height':
          this.headerHeight = getInt(value_0, 24);
          break;
        case 'grid_graph_type':
          value_0.toLowerCase().indexOf('single') != -1 && this.graph.graphType == 1 && (this.lastValueOnly = true);
          break;
        case 'calc_changes_from':
          value_0.toLowerCase().indexOf('penultimate') != -1 && (this.changesFromPreviousVal = true);
      }
    }
  }
  !!this.graph.data_0 && (this.numDisplayRows = this.graph.data_0.numVisibleCols);
}
;
_.setData = function setData_16(data_0){
}
;
_.setFrame = function setFrame_12(type_0, easingType, startTime, curTime, endTime, rnd){
}
;
_.setHoverData = function setHoverData_17(data_0, rnd){
  var graph, graph$iterator, redrawNeeded;
  redrawNeeded = false;
  for (graph$iterator = new ArrayList$1(this.graphAry); graph$iterator.i < graph$iterator.this$01.array.length;) {
    graph = castTo($next_3(graph$iterator), 40);
    data_0 == null && (redrawNeeded = redrawNeeded | graph.handler.setHoverData(null, rnd));
    data_0 != null && !instanceOf(data_0, 7) && (redrawNeeded = redrawNeeded | graph.handler.setHoverData(data_0, rnd));
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_9(hoverData, rnd){
  return false;
}
;
_.GREEN_ARROW_COLOR = null;
_.RED_ARROW_COLOR = null;
_.changesFromPreviousVal = false;
_.fixedRowHeight = 0;
_.graphAry = null;
_.headerFontFace = 0;
_.headerHeight = 24;
_.hideHeader = false;
_.lastValueOnly = false;
_.numDisplayRows = 1;
_.rowHeight = 0;
_.textFnt = null;
_.textMargin = 10;
var Lcom_domo_charting_graphs_HandlerGrid_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerGrid', 232);
function $adjustForMultiColumn_1(this$static, barRect, numCols, colIndex, lastRect, value_0){
  var height, width_0, x_0, y_0;
  if (this$static.sGraph.isHorizontal) {
    height = barRect.height_0 / 2;
    y_0 = barRect.y_0;
    colIndex < numCols - this$static.groupedStackedFirstBarCount && (y_0 += height);
    !!lastRect && value_0 >= 0?(barRect = new CFRect(lastRect.x_0 + lastRect.width_0, y_0, barRect.width_0, height)):lastRect?(barRect = new CFRect(lastRect.x_0 - barRect.width_0, y_0, barRect.width_0, height)):(barRect = new CFRect(barRect.x_0, y_0, barRect.width_0, height));
  }
   else {
    width_0 = barRect.width_0 / 2;
    x_0 = barRect.x_0;
    colIndex < numCols - this$static.groupedStackedFirstBarCount && (x_0 += width_0);
    !!lastRect && value_0 >= 0?(barRect = new CFRect(x_0, lastRect.y_0 - barRect.height_0, width_0, barRect.height_0)):lastRect?(barRect = new CFRect(x_0, lastRect.y_0 + lastRect.height_0, width_0, barRect.height_0)):(barRect = new CFRect(x_0, barRect.y_0, width_0, barRect.height_0));
  }
  return barRect;
}

function HandlerGroupedStacked(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(233, 60, $intern_37, HandlerGroupedStacked);
_.adjustForMultiColumn = function adjustForMultiColumn_1(barRect, numCols, colIndex, curCol, lastRect, value_0){
  return $adjustForMultiColumn_1(this, barRect, numCols, colIndex, lastRect, value_0);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_6(sGraph, rows_0, baseScale, valScale, valScale2){
  var barIndex, barInfo, barList, barRect, barWidth, catScalePos, cell, curBarWidth, curCol, curIndex, curRow, fill, fillToUse, groupBarList, i, inShowAsFilteredMode, isLogScale, lastState, minCatPos, minValuePos, numCols, numColsInCategory, numRows, origRect, origRectOffset, rects, reverseRowMap, rowIndex, rowMap, rowstoDisplay, showAsFiltered, srsInfo, stackedPosAry, stackedPosAryNegative, stackedPosAryPositive, stackedValAry, stackedValAryNegative, stackedValAryPositive, value_0, valueScale, valueScalePos, zeroValuePos;
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  numCols = this.graph.data_0.numVisibleCols;
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  rowMap = buildRowMap(rows_0);
  reverseRowMap = buildReverseRowMap(rows_0);
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  stackedPosAryPositive = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  stackedPosAryNegative = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  stackedValAryPositive = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  stackedValAryNegative = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  groupBarList = new ArrayList;
  numColsInCategory = numCols;
  $isLineBar(this.graph) && (numColsInCategory = $getNumColsSecondaryScale(this.graph.data_0));
  barIndex = 0;
  curCol = $getLastVisibleCol(this.graph.data_0);
  while (curCol) {
    if (sGraph.typeAttributes.isGroupedStacked && barIndex == numColsInCategory - this.groupedStackedFirstBarCount) {
      stackedPosAryPositive = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
      stackedPosAryNegative = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
      stackedValAryPositive = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
      stackedValAryNegative = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
    }
    rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
    valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (valueScale) {
      rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol);
      isLogScale = instanceOf(valueScale, 73);
      minValuePos = valueScale.getMinPosition();
      zeroValuePos = 0;
      isLogScale || (zeroValuePos = valueScale.getPositionForValue(0));
      barList = new ArrayList;
      fill = new CFFill($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex));
      for (i = 0; i < rowstoDisplay.size_1(); i++) {
        curRow = castTo(rowstoDisplay.get_1(i), 7);
        if (!curRow)
          continue;
        rowIndex = castTo(getEntryValueOrNull($getEntry(reverseRowMap.hashCodeMap, curRow)), 29).value_0;
        curIndex = rowIndex;
        instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
        cell = $getCell(this.graph.data_0, curRow.curIndex, curCol.curIndex);
        value_0 = $getCellValueForGraphType(this, cell);
        if (!isNaN(value_0)) {
          stackedPosAry = stackedPosAryPositive;
          stackedValAry = stackedValAryPositive;
          if (value_0 < 0) {
            stackedPosAry = stackedPosAryNegative;
            stackedValAry = stackedValAryNegative;
          }
          catScalePos = baseScale.getPositionForValue(curIndex);
          valueScalePos = valueScale.getPositionForValue(value_0);
          if (isLogScale && ((sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked || (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked)) {
            stackedValAry[rowIndex] += value_0;
            valueScalePos = valueScale.getPositionForValue(stackedValAry[rowIndex]);
          }
          curBarWidth = barWidth;
          ((sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked || (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked) && this.variableWidth && (curBarWidth = barWidth * $getPctOfRowValue(cell));
          barRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, curBarWidth);
          if (isLogScale && ((sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked || (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked) && !!stackedPosAry[rowIndex] && value_0 >= 0) {
            sGraph.isHorizontal?$setWidth(barRect, barRect.x_0 + barRect.width_0 - $getRight(stackedPosAry[rowIndex])):$setHeight(barRect, stackedPosAry[rowIndex].y_0 - barRect.y_0);
          }
           else if (isLogScale && ((sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked || (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked) && value_0 < 0 && !stackedPosAry[rowIndex]) {
            if (sGraph.isHorizontal) {
              barRect.width_0 = 20;
              barRect.x_0 = minValuePos - barRect.width_0;
            }
             else {
              barRect.height_0 = 20;
              barRect.y_0 = minValuePos;
            }
          }
          origRectOffset = null;
          if (numColsInCategory > 1 && !this.graph.typeAttributes.isSymbolOverlay) {
            origRect = new CFRect(barRect.x_0, barRect.y_0, barRect.width_0, barRect.height_0);
            barRect = $adjustForMultiColumn_1(this, barRect, numColsInCategory, barIndex, stackedPosAry[rowIndex], value_0);
            sGraph.isHorizontal?(origRectOffset = new CFPoint(origRect.x_0 - barRect.x_0, 0)):(origRectOffset = new CFPoint(0, origRect.y_0 - barRect.y_0));
          }
          stackedPosAry[rowIndex] = barRect;
          rects[rowIndex] = barRect;
          lastState = $getLastShapeForCell(this.sGraph, cell, false);
          this.graph.data_0.isPeriodOverPeriod?(fillToUse = $getColorForCellValueSeriesName(this.graph, cell, $getColName(cell), fill)):(fillToUse = $getColorForCellValueSeriesName(this.graph, cell, this.graph.data_0.valueColumnName, fill));
          showAsFiltered = inShowAsFilteredMode && (curCol.showAsFiltered || curRow.showAsFiltered);
          showAsFiltered && (fillToUse = new CFFill($deSaturateAndLighten(fillToUse.color_0, 0.9, 0.4)));
          barInfo = new SrsBarInfo_1(this, cell, barRect, origRectOffset, fillToUse, null, -1, lastState);
          barList.array[barList.array.length] = barInfo;
        }
      }
      ++barIndex;
      srsInfo = new SeriesInfo(barList, null);
      $add_1(this.graph.seriesShapes, srsInfo);
    }
    curCol = $getPrevVisibleCol(this.graph.data_0, curCol);
  }
  groupBarList.array.length > 0 && $add_0(this.graph.seriesShapes, 0, new SeriesInfo(groupBarList, null));
  $drawAllBars(this, -1, null);
}
;
var Lcom_domo_charting_graphs_HandlerGroupedStacked_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerGroupedStacked', 233);
function $clinit_HandlerHeatmap(){
  $clinit_HandlerHeatmap = emptyMethod;
  $clinit_HandlerBar();
  NODATA_CLR_0 = new CFColor_2('#E6E6E6');
}

function $getDatalabelFontSizeWithMin(this$static, rnd, dataLabel, dlFont){
  var cellRect, curMaxSize, dim, dlText, origSize, shpInfo, shpInfo$iterator, srsInfo, srsInfo$iterator, textDimension;
  this$static.minFontSizeCalculated = true;
  origSize = dlFont.size_0;
  curMaxSize = origSize;
  cellRect = null;
  $setSize_0(dlFont, this$static.minFontSize);
  dim = rnd.measureText_0('A', dlFont);
  for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 19);
    for (shpInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      if (instanceOf(shpInfo, 25)) {
        if (!cellRect) {
          cellRect = $duplicate_5(castTo(shpInfo, 25).rect);
          $inflate(cellRect, -2);
          if (cellRect.height_0 < dim.height_0)
            return this$static.minFontSize;
          dlFont.size_0 = origSize;
          dlFont.lineHeight = NaN;
        }
        dlText = $getFormattedDataLabel(dataLabel, shpInfo.cell);
        textDimension = getVisbleDimensionForText(rnd, dlText, dlFont);
        while ((textDimension.height_0 > cellRect.height_0 || textDimension.width_0 > cellRect.width_0) && dlFont.size_0 >= this$static.minFontSize) {
          curMaxSize -= 1;
          dlFont.size_0 = curMaxSize;
          dlFont.lineHeight = NaN;
          textDimension = getVisbleDimensionForText(rnd, dlText, dlFont);
        }
      }
    }
    if (curMaxSize <= this$static.minFontSize)
      return this$static.minFontSize;
  }
  return curMaxSize;
}

function $getFillColorForValue_0(this$static, cell){
  var rangeIndex;
  rangeIndex = -1;
  !!cell && (rangeIndex = getRangeIndexForValue($getValue(cell), this$static.rangeValues, this$static.balancedDistribution, this$static.zeroLikeNoData));
  if (rangeIndex == -1)
    return new CFFill(NODATA_CLR_0);
  return new CFFill(castTo($get_2(this$static.rangeColors, rangeIndex), 15));
}

function $getMinMaxValues_0(this$static){
  var cell, colIndex, curCol, curCol$iterator, curRow, curRow$iterator, max_0, min_0, rowIndex, value_0, valueList;
  min_0 = $intern_19;
  max_0 = $intern_20;
  valueList = new ArrayList;
  rowIndex = 0;
  for (curRow$iterator = this$static.graph.data_0.rows_0.iterator(); curRow$iterator.hasNext_0();) {
    curRow = castTo(curRow$iterator.next_1(), 7);
    if (curRow.hidden)
      continue;
    colIndex = 0;
    for (curCol$iterator = this$static.graph.data_0.cols_0.iterator(); curCol$iterator.hasNext_0();) {
      curCol = castTo(curCol$iterator.next_1(), 7);
      if (curCol.hidden)
        continue;
      cell = $getCell(this$static.graph.data_0, rowIndex, colIndex);
      if (!!cell && !isNaN_0($getValue(cell))) {
        value_0 = $getValue(cell);
        $add_1(valueList, value_0);
        value_0 < min_0 && (min_0 = value_0);
        value_0 > max_0 && (max_0 = value_0);
      }
      ++colIndex;
    }
    ++rowIndex;
  }
  return new MinMax_0(min_0, max_0, valueList);
}

function $getRange_1(this$static, index_0){
  var rng;
  !this$static.rangeMap && (this$static.rangeMap = new HashMap);
  rng = castTo($get_1(this$static.rangeMap, valueOf(index_0)), 58);
  if (!rng) {
    rng = new Range_0;
    $put_0(this$static.rangeMap, valueOf(index_0), rng);
  }
  return rng;
}

function $getRangeIndexForValue_0(this$static, cell){
  var minMax, minMax$iterator, rangeIndex, value_0;
  if (!cell || $getValue(cell) == 0 && this$static.zeroLikeNoData)
    return -1;
  value_0 = $getValue(cell);
  rangeIndex = 0;
  for (minMax$iterator = new ArrayList$1(this$static.rangeValues); minMax$iterator.i < minMax$iterator.this$01.array.length;) {
    minMax = castTo($next_3(minMax$iterator), 48);
    if (this$static.balancedDistribution) {
      if (value_0 >= minMax.min_0 && value_0 <= minMax.max_0)
        break;
    }
     else {
      if (value_0 >= minMax.min_0 && value_0 < minMax.max_0)
        break;
    }
    ++rangeIndex;
  }
  value_0 == castTo($get_2(this$static.rangeValues, this$static.rangeValues.array.length - 1), 48).max_0 && (rangeIndex = this$static.rangeValues.array.length - 1);
  if (rangeIndex < this$static.rangeValues.array.length)
    return rangeIndex;
  return -1;
}

function $getRangeNameForValue(this$static, cell){
  var rangeIndex;
  rangeIndex = $getRangeIndexForValue_0(this$static, cell);
  if (rangeIndex == -1)
    return this$static.graph.getLocalizedString('NO_DATA');
  return 'Range' + (rangeIndex + 1);
}

function HandlerHeatmap(){
  $clinit_HandlerHeatmap();
  HandlerBar.call(this);
  this.rangeMap = new HashMap;
}

defineClass(151, 60, {60:1, 151:1, 64:1, 212:1}, HandlerHeatmap);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_8(chart){
  this.hideLegend = isTrue(this.graph.getChartOptionAsString('hide_legend'));
  if ((!this.graph.dependentComps || this.graph.dependentComps.array.length == 0) && !this.hideLegend) {
    this.sGraph.legend = new LegendRange(chart, this.graph.name_0 + '_legend', this.sGraph);
    $addDependentComp(this.sGraph, this.sGraph.legend);
  }
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_7(sGraph, rows_0, baseScale, valScale, valScale2){
  var barInfo, barList, barRect, cell, colIndex, colWidth, curRow, fill, i, leftOffset, numCols, numRows, rowHeight, strokeWidth, topOffset, valueScale, visibleColIndex, visibleRowIndex, xPos, yPos;
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  numCols = this.graph.data_0.numVisibleCols;
  colWidth = baseScale.getLength() / numCols;
  rowHeight = valScale.getLength() / numRows;
  if (rowHeight < 4) {
    strokeWidth = rowHeight / 4;
    this.itemBorder = new CFStroke(this.itemBorder.color_0, strokeWidth);
  }
  this.autoAbbrevDataLabels && $setUse3digitFormat(this.graph.dataLabelNumberFormatter);
  visibleRowIndex = 0;
  for (i = 0; i < rows_0.size_1(); i++) {
    curRow = castTo(rows_0.get_1(i), 7);
    if (!curRow || curRow.hidden)
      continue;
    valueScale = castTo($getValueScale(sGraph), 36);
    if (valueScale) {
      barList = new ArrayList;
      visibleColIndex = 0;
      leftOffset = this.graph.bnds.x_0;
      topOffset = this.graph.bnds.y_0;
      for (colIndex = 0; colIndex < $getNumCols(this.graph.data_0); colIndex++) {
        if ($getColumn(this.graph.data_0, colIndex).hidden)
          continue;
        xPos = baseScale.getPositionForValue(visibleColIndex);
        yPos = valScale.getPositionForValue(visibleRowIndex);
        barRect = new CFRect(leftOffset + baseScale.startMargin + xPos - colWidth / 2, topOffset + valScale.startMargin + yPos - rowHeight / 2, colWidth, rowHeight);
        cell = $getCell(this.graph.data_0, i, colIndex);
        fill = $getFillColorForValue_0(this, cell);
        barInfo = new SrsBarInfo_1(this, cell, barRect, null, fill, this.itemBorder, -1, null);
        barList.array[barList.array.length] = barInfo;
        ++visibleColIndex;
      }
      $add_1(this.graph.seriesShapes, new SeriesInfo(barList, null));
    }
    ++visibleRowIndex;
  }
  $drawAllBars(this, -1, null);
}
;
_.drawDataLabel = function drawDataLabel_2(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var dlFont, font, labelColor, srsColor;
  if (!!shpInfo && instanceOf(shpInfo, 25)) {
    srsColor = shpInfo.fill_0.color_0;
    labelColor = ($clinit_CFColor() , TEXT_DARK_GRAY);
    $equals_0(srsColor, NODATA_CLR_0) || (labelColor = $getLabelColorForSeriesColor(this.graph.colorMgr, srsColor));
    font = $duplicate_2(dataLabel.font_0);
    font.color_0 = labelColor;
    dlFont = $duplicate_2(font);
    this.minFontSizeCalculated || $setSize_0(dlFont, $getDatalabelFontSizeWithMin(this, rnd, dataLabel, dlFont));
    dataLabel.font_0 = dlFont;
  }
  return $drawDataLabel(this, dataLabel, rnd, existingLableRects, shpInfo, data_0);
}
;
_.freeResources = function freeResources_23(dataToKeep){
  $freeResources_18(this, dataToKeep);
  this.colorPalette = null;
  this.itemBorder = null;
  this.rangeColors = null;
  this.rangeValues = null;
}
;
_.getDefaultLegendPosition = function getDefaultLegendPosition_1(){
  return 1;
}
;
_.getNoDataColor = function getNoDataColor_0(){
  return NODATA_CLR_0;
}
;
_.getRangeColors = function getRangeColors_0(){
  return this.rangeColors;
}
;
_.getRanges = function getRanges_0(){
  return this.rangeValues;
}
;
_.processChartOptions = function processChartOptions_18(){
  var colMax, hoverTextOverride, i, i0, key, key$iterator, maxValue, minMax, range, range$iterator, value_0, values;
  this.colorPalette = 'gradient-2';
  this.itemBorder = new CFStroke_1('#FFFFFF', 1);
  $setAllowInteractions(this.graph, false);
  this.manualRanges = false;
  this.hideLegend = false;
  $removeGoalScaleMarker(this.sGraph);
  $processChartOptions_4(this);
  if (this.graph.dataLabel) {
    this.graph.dataLabel.showIfZeroValue = true;
    this.graph.dataLabel.position = 3;
  }
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'hide_legend':
          this.hideLegend = isTrue(value_0);
          break;
        case 'color_theme':
          this.colorPalette = value_0;
          break;
        case 'inner_margin':
          this.itemBorder = new CFStroke_1('#FFFFFF', getInt(value_0, 1));
          break;
        case 'balanced_distribution':
          this.balancedDistribution = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'force_max_value':
          getDouble(value_0) != null && checkNotNull(getDouble(value_0));
          break;
        case 'zero_like_no_data':
          this.zeroLikeNoData = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'auto_abbrev_values':
          this.autoAbbrevDataLabels = isTrue(value_0);
          break;
        case 'range_1_min':
          $setMin($getRange_1(this, 1), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_1_max':
          $setMax($getRange_1(this, 1), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_1_color':
          $setColor($getRange_1(this, 1), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_2_min':
          $setMin($getRange_1(this, 2), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_2_max':
          $setMax($getRange_1(this, 2), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_2_color':
          $setColor($getRange_1(this, 2), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_3_min':
          $setMin($getRange_1(this, 3), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_3_max':
          $setMax($getRange_1(this, 3), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_3_color':
          $setColor($getRange_1(this, 3), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_4_min':
          $setMin($getRange_1(this, 4), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_4_max':
          $setMax($getRange_1(this, 4), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_4_color':
          $setColor($getRange_1(this, 4), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_5_min':
          $setMin($getRange_1(this, 5), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_5_max':
          $setMax($getRange_1(this, 5), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_5_color':
          $setColor($getRange_1(this, 5), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_6_min':
          $setMin($getRange_1(this, 6), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_6_max':
          $setMax($getRange_1(this, 6), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_6_color':
          $setColor($getRange_1(this, 6), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_7_min':
          $setMin($getRange_1(this, 7), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_7_max':
          $setMax($getRange_1(this, 7), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_7_color':
          $setColor($getRange_1(this, 7), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_8_min':
          $setMin($getRange_1(this, 8), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_8_max':
          $setMax($getRange_1(this, 8), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_8_color':
          $setColor($getRange_1(this, 8), $getColorForName(this.graph.colorMgr, value_0));
          break;
        case 'range_9_min':
          $setMin($getRange_1(this, 9), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_9_max':
          $setMax($getRange_1(this, 9), getDouble_0(value_0, NaN));
          this.manualRanges = true;
          break;
        case 'range_9_color':
          $setColor($getRange_1(this, 9), $getColorForName(this.graph.colorMgr, value_0));
      }
    }
  }
  maxValue = $intern_20;
  for (i0 = 0; i0 < $getNumCols(this.graph.data_0); i0++) {
    colMax = (values = $getValuesNonProjected($getColumn(this.graph.data_0, i0), true, false) , getMaxValueForValues(values));
    colMax > maxValue && (maxValue = colMax);
  }
  this.ranges = getSortedAndCompletedRanges(this.rangeMap, this.manualRanges, maxValue);
  hoverTextOverride = $getEncodedChartOption(this.graph);
  hoverTextOverride == null && (this.graph.hoverLabelText = '%_SERIES_NAME %_CATEGORY_NAME : %_VALUE');
  this.rangeColors = $getRangeColorsForName(this.graph.colorMgr, this.colorPalette);
  for (i = 0; i < 9; i++) {
    i < this.ranges.array.length && !!castTo($get_2(this.ranges, i), 58).color_0 && (this.rangeColors.array.length > i?$set(this.rangeColors, i, castTo($get_2(this.ranges, i), 58).color_0):$add_1(this.rangeColors, castTo($get_2(this.ranges, i), 58).color_0));
  }
  minMax = $getMinMaxValues_0(this);
  if (this.manualRanges) {
    this.rangeValues = new ArrayList;
    for (range$iterator = new ArrayList$1(this.ranges); range$iterator.i < range$iterator.this$01.array.length;) {
      range = castTo($next_3(range$iterator), 58);
      $add_1(this.rangeValues, new MinMax(range.min_0, range.max_0));
    }
  }
   else 
    this.rangeValues = getRangeValues(minMax, this.balancedDistribution, this.rangeColors.array.length);
  this.ranges = null;
  this.rangeMap = null;
}
;
_.resetForTypeChange = function resetForTypeChange_9(){
  if (this.originalData) {
    this.currentViewDataGrid == this.originalData && $unTransposeRowsCols(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  !!this.currentViewDataGrid && this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_17(data_0){
  var maxCols, newRows, numCols, numRows, theData;
  if (data_0) {
    this.minFontSizeCalculated = false;
    this.originalData = data_0;
    this.currentViewDataGrid = data_0;
    numRows = $getNumRows(data_0);
    numCols = $getNumCols(data_0);
    if (numRows > 100 || numRows * numCols > $intern_12) {
      newRows = numRows;
      numRows > 100 && (newRows = 100);
      maxCols = $intern_12 / newRows | 0;
      theData = $clone_0(this.currentViewDataGrid, newRows, maxCols);
      this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
      this.currentViewDataGrid = theData;
      $warnNotAllDataShown(this.graph.chart);
    }
    $transposeRowsCols(this.currentViewDataGrid);
    this.sGraph.data_0 = this.currentViewDataGrid;
  }
  $getCategoryScale(this.sGraph).drawBaseline = true;
  $getValueScale(this.sGraph).drawBaseline = true;
}
;
_.autoAbbrevDataLabels = false;
_.balancedDistribution = false;
_.hideLegend = false;
_.manualRanges = false;
_.minFontSize = 4;
_.minFontSizeCalculated = false;
_.zeroLikeNoData = false;
var NODATA_CLR_0;
var Lcom_domo_charting_graphs_HandlerHeatmap_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerHeatmap', 151);
function $adjustNumberFormatterForNumbersOnly(numberFormatter){
  if (numberFormatter) {
    $applyValueFormatOverride(numberFormatter, 'number');
    $applyDecimalPlaces(numberFormatter, '.');
    numberFormatter.multiplyBy100 = false;
    numberFormatter.needsNewNumFormat = true;
  }
}

function $getAllCells(data_0){
  var cellMap, cells_0, index_0, row;
  cells_0 = new ArrayList;
  row = $getFirstVisibleRow(data_0);
  while (row) {
    cellMap = row.cellMap;
    for (index_0 = 0; index_0 < cellMap.hashCodeMap.size_0 + cellMap.stringMap.size_0; index_0++) {
      isNaN_0(castTo($get_1(row.cellMap, valueOf(index_0)), 16).value_0) || $add_1(cells_0, new Cell(castTo($get_1(row.cellMap, valueOf(index_0)), 16).value_0));
    }
    row = $getNextVisibleRow(data_0, row);
  }
  return cells_0;
}

function $getBuckets(minValue, maxValue, numBuckets, integerBoundaries){
  var bucketSize, bucketValue, buckets, current, i, range;
  range = maxValue - minValue;
  bucketSize = range / numBuckets;
  integerBoundaries && (bucketSize = toDouble_0(fromDouble_0($wnd.Math.round(bucketSize))));
  buckets = initUnidimensionalArray(Ljava_lang_Double_2_classLit, $intern_41, 217, numBuckets + 1, 7, 1);
  buckets[0] = minValue;
  current = minValue + bucketSize;
  for (i = 1; i < numBuckets; i++) {
    bucketValue = current;
    bucketSize > 1 && (bucketValue = toDouble_0(fromDouble_0($wnd.Math.round(current * 100))) / 100);
    buckets[i] = bucketValue;
    current += bucketSize;
  }
  buckets[numBuckets] = maxValue;
  return buckets;
}

function $getHistogramFormatData(this$static, data_0){
  var bucketValues, cells_0, cols_0, column, dataGrid, i, integerBoundaries, label_0, max_0, min_0, numBuckets, numRows, row, rows_0;
  cells_0 = $getAllCells(data_0);
  max_0 = $getMaxFromCells(cells_0);
  min_0 = $getMinFromCells(cells_0);
  numBuckets = $getNumBuckets(this$static, cells_0.array.length, min_0, max_0);
  integerBoundaries = $equals_2('LONG', $getColumn(data_0, 0).type_0);
  bucketValues = $getBuckets(min_0, max_0, numBuckets, integerBoundaries);
  numRows = numBuckets + 1;
  rows_0 = new ArrayList_0(numRows);
  for (i = 0; i < numRows; i++) {
    label_0 = $formatNumber_0(this$static.sGraph, checkNotNull(bucketValues[i]));
    row = new ColRowInfo_2(label_0, 'STRING');
    rows_0.add_0(row);
  }
  column = new ColRowInfo_2($getName($getColumn(data_0, 0)), 'STRING');
  !!$getColumn(data_0, 0).metadata && $setMetadata(column, new ColumnMetadata_0($getColumn(data_0, 0).metadata));
  $setFormat(column, $getColumn(data_0, 0).format);
  $placeValuesInRows(rows_0, cells_0, column, bucketValues);
  $updateRowTotals(rows_0, bucketValues);
  cols_0 = new ArrayList_0(1);
  cols_0.array[cols_0.array.length] = column;
  this$static.sGraph.isHorizontal && (rows_0 = $reverseRows(rows_0));
  dataGrid = new DataGrid_0(data_0.name_0, data_0.originalDataType, rows_0, cols_0, null);
  $setOrigColNameList(dataGrid, data_0.origColNameList);
  $setDataHasBeenLimited(dataGrid, data_0.dataHasBeenLimited);
  $setErrorCode(dataGrid, data_0.errorCode);
  $setPreSorted(dataGrid, data_0.preSorted);
  $setDateJoinColumn(dataGrid, data_0.dateJoinColumn);
  return dataGrid;
}

function $getMaxFromCells(cells_0){
  var cell, cell$iterator, value_0;
  value_0 = 0;
  if (cells_0.array.length > 0) {
    value_0 = $getValue((checkCriticalElementIndex(0, cells_0.array.length) , castTo(cells_0.array[0], 16)));
    for (cell$iterator = new ArrayList$1(cells_0); cell$iterator.i < cell$iterator.this$01.array.length;) {
      cell = castTo($next_3(cell$iterator), 16);
      $getValue(cell) > value_0 && (value_0 = $getValue(cell));
    }
  }
  return value_0;
}

function $getMinFromCells(cells_0){
  var cell, cell$iterator, value_0;
  value_0 = 0;
  if (cells_0.array.length > 0) {
    value_0 = $getValue((checkCriticalElementIndex(0, cells_0.array.length) , castTo(cells_0.array[0], 16)));
    for (cell$iterator = new ArrayList$1(cells_0); cell$iterator.i < cell$iterator.this$01.array.length;) {
      cell = castTo($next_3(cell$iterator), 16);
      $getValue(cell) < value_0 && (value_0 = $getValue(cell));
    }
  }
  return value_0;
}

function $getNumBuckets(this$static, numCells, min_0, max_0){
  var numBuckets;
  if (min_0 == max_0)
    return 1;
  if (this$static.numBucketsOverride > 0)
    return this$static.numBucketsOverride;
  numBuckets = toInt_0(fromDouble_0($wnd.Math.round($wnd.Math.sqrt(numCells))));
  numBuckets < 1?(numBuckets = 1):numBuckets > maxBuckets && (numBuckets = maxBuckets);
  return numBuckets;
}

function $localProcessChartOptions(this$static){
  var key, key$iterator, numBins, value_0, valueScale;
  this$static.numBucketsOverride = -1;
  valueScale = castTo($getValueScale(this$static.sGraph), 27);
  !!valueScale && $adjustNumberFormatterForNumbersOnly(valueScale.numberFormatter);
  $adjustNumberFormatterForNumbersOnly(this$static.sGraph.dataLabelNumberFormatter);
  $adjustNumberFormatterForNumbersOnly(this$static.sGraph.hoverNumberFormatter);
  if (this$static.graph.hasChartOptions()) {
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'histogram_bins':
          numBins = getInt(value_0, 0);
          numBins < minBuckets && (numBins = minBuckets);
          numBins > maxBuckets && (numBins = maxBuckets);
          this$static.numBucketsOverride = numBins;
          break;
        case 'symbol_color':
          !!this$static.graph.colorMgr && $setChartOptionOverrideForSeries1(this$static.graph.colorMgr, value_0);
      }
    }
  }
}

function $placeValuesInRows(rows_0, cells_0, column, bucketValues){
  var cell, cell$iterator, i, row, value_0;
  for (cell$iterator = new ArrayList$1(cells_0); cell$iterator.i < cell$iterator.this$01.array.length;) {
    cell = castTo($next_3(cell$iterator), 16);
    value_0 = cell.value_0;
    for (i = 0; i < bucketValues.length - 1; i++) {
      if (value_0 >= checkNotNull(bucketValues[i]) && value_0 <= checkNotNull(bucketValues[i + 1])) {
        row = castTo(rows_0.get_1(i), 7);
        $addItem_0(row, cell, true, $size(row.cellMap));
        cell.column = column;
        break;
      }
    }
  }
}

function $reverseRows(rows_0){
  var i, newRows;
  if (!rows_0 || rows_0.size_1() == 1)
    return rows_0;
  newRows = new ArrayList_0(rows_0.size_1());
  for (i = rows_0.size_1() - 1; i >= 0; i--)
    $add_1(newRows, castTo(rows_0.get_1(i), 7));
  return newRows;
}

function $setData_4(this$static, data_0){
  if (data_0) {
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    this$static.originalData = data_0;
    this$static.currentViewDataGrid = null;
    $updateDataGrid(this$static);
  }
}

function $updateDataGrid(this$static){
  var theData;
  $setNumberFormatFromColumnFormat(this$static.graph);
  this$static.graph.updateNumberFormats(true);
  $localProcessChartOptions(this$static);
  !this$static.currentViewDataGrid && (this$static.currentViewDataGrid = this$static.originalData);
  theData = $getHistogramFormatData(this$static, this$static.currentViewDataGrid);
  this$static.currentViewDataGrid != this$static.originalData && this$static.currentViewDataGrid != theData && this$static.currentViewDataGrid != this$static.graph.data_0 && $freeResources_11(this$static.currentViewDataGrid);
  this$static.currentViewDataGrid = theData;
  this$static.sGraph.data_0 = this$static.currentViewDataGrid;
}

function $updateRowTotals(rows_0, bucketValues){
  var bucketIndex, firstCell, map_0, row;
  for (bucketIndex = 0; bucketIndex < bucketValues.length - 1; bucketIndex++) {
    row = castTo(rows_0.get_1(bucketIndex), 7);
    map_0 = row.cellMap;
    if (map_0.hashCodeMap.size_0 + map_0.stringMap.size_0 > 0) {
      firstCell = castTo($get_1(map_0, valueOf(0)), 16);
      $setAlternateValue(firstCell, map_0.hashCodeMap.size_0 + map_0.stringMap.size_0);
    }
     else {
      firstCell = new Cell(NaN);
      $put_0(map_0, valueOf(0), firstCell);
      firstCell.altValue = 0;
    }
    if (firstCell) {
      firstCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 2, 0, 1);
      $addMetaData(firstCell, 0, checkNotNull(bucketValues[bucketIndex]));
      $addMetaData(firstCell, 1, checkNotNull(bucketValues[bucketIndex + 1]));
    }
  }
}

function HandlerHistogram(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(335, 60, $intern_37, HandlerHistogram);
_.adjustDataAfterRowsHidden = function adjustDataAfterRowsHidden_0(){
  $updateDataGrid(this);
  !!this.currentViewDataGrid && (this.currentViewDataGrid.hasHiddenRows = true);
}
;
_.calcMinMaxOverride = function calcMinMaxOverride_2(scale, curMin, curMax){
  var cell, max_0, min_0, row, row$iterator, value_0;
  !this.originalData && $setData_4(this, this.sGraph.data_0);
  max_0 = $intern_20;
  instanceOf(scale, 73) && (max_0 = $intern_39);
  min_0 = $intern_19;
  for (row$iterator = this.currentViewDataGrid.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    cell = $getFirstCell(row);
    if (cell) {
      value_0 = $getValue(cell);
      value_0 > max_0 && (max_0 = value_0);
      value_0 < min_0 && (instanceOf(scale, 73)?value_0 > 0 && (min_0 = value_0):(min_0 = value_0));
    }
  }
  return new MinMax(min_0, max_0);
}
;
_.closeZoomInFilter = function closeZoomInFilter_1(){
  $setData_4(this, this.originalData);
  return true;
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_8(sGraph, rows_0, baseScale, valScale, valScale2){
  var barFill, barInfo, barList, barRect, barWidth, cell, curCol, curRow, currentPos, fill, i, lastState, minCatPos, minValuePos, numRows, offset, rects, rowIndex, value_0, valueScale, valueScalePos, zeroValuePos;
  if (!rows_0)
    return;
  valueScale = castTo(valScale, 27);
  numRows = rows_0.size_1();
  barWidth = baseScale.getLength() / (numRows - 1);
  minCatPos = baseScale.getMinPosition();
  currentPos = barWidth / 2;
  curCol = $getFirstVisibleCol(this.graph.data_0);
  rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  if (valueScale) {
    minValuePos = valueScale.getMinPosition();
    zeroValuePos = valueScale.getPositionForValue(0);
    barList = new ArrayList;
    fill = new CFFill($getColorForIndex_0(this.graph, curCol.curIndex));
    rowIndex = 0;
    offset = 0;
    sGraph.isHorizontal && (offset = 1);
    for (i = 0; i < rows_0.size_1(); i++) {
      curRow = castTo(rows_0.get_1(i), 7);
      cell = $getCell(this.graph.data_0, curRow.curIndex + offset, curCol.curIndex);
      if (!!cell && !isNaN_0($getValue(cell))) {
        value_0 = $getValue(cell);
        valueScalePos = valueScale.getPositionForValue(value_0);
        barRect = $getBarRect(this, minCatPos, currentPos, minValuePos, valueScalePos, zeroValuePos, barWidth - 1);
        barRect.width_0 < 1 && (barRect.width_0 = 1);
        barRect.height_0 < 1 && (barRect.height_0 = 1);
        rects[rowIndex] = barRect;
        lastState = $getLastShapeForCell(this.sGraph, cell, false);
        barFill = fill;
        value_0 == 0 && (barFill = ($clinit_CFFill() , TRANSPARENT_0));
        barInfo = new SrsBarInfo_1(this, cell, barRect, null, barFill, null, -1, lastState);
        barList.array[barList.array.length] = barInfo;
      }
      ++rowIndex;
      currentPos += barWidth;
    }
    this.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    $add_1(this.graph.seriesShapes, new SeriesInfo(barList, null));
  }
  $drawAllBars(this, -1, null);
}
;
_.format_0 = function format_15(rnd){
  var hoverLabel;
  this.graph.supportsDrag = false;
  this.graph.hoverLabelText = '%_VALUE';
  hoverLabel = $getOrCreateHoverLabel(this.graph);
  !!hoverLabel && (hoverLabel.showIfZeroValue = true);
  $format_0(this, rnd);
  this.graph.setNeedsFormat(false);
}
;
_.getDrillFilter = function getDrillFilter_1(shapeInfo, clicked){
  var cell, colName, filter, filter1, filterBase, lowerValue, upperValue;
  filter = null;
  if (!!shapeInfo && !!shapeInfo.cell) {
    cell = shapeInfo.cell;
    if (!!$getMetaDataCell(cell, 0) && !!$getMetaDataCell(cell, 1)) {
      colName = $getColName(cell);
      lowerValue = $getValueAsString($getMetaDataCell(cell, 0));
      upperValue = $getValueAsString($getMetaDataCell(cell, 1));
      $getColDataSourceId(cell);
      filterBase = new FilterBase(colName, 'BETWEEN', cell.column);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, lowerValue);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, upperValue);
      $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
      filter = ($clinit_StrUtil() , getDrillFilterFromFilters(filter1, null));
    }
  }
  return filter;
}
;
_.numberFormattingProcessed = function numberFormattingProcessed_1(){
  return true;
}
;
_.processChartOptions = function processChartOptions_19(){
  $processChartOptions_4(this);
  $localProcessChartOptions(this);
}
;
_.resetForTypeChange = function resetForTypeChange_10(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_18(data_0){
  $setData_4(this, data_0);
}
;
_.numBucketsOverride = -1;
var maxBuckets = 20, minBuckets = 3;
var Lcom_domo_charting_graphs_HandlerHistogram_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerHistogram', 335);
function $addFirstLastLargestSmallestHints_0(this$static, rnd, hoverLabel, srsItem){
  var firstInfo, firstPoint, labelPosition, largest, largestPoint, numberFormatter, smallest, smallestPoint, srsInfo, srsInfo$iterator, testValue, thisPoint;
  firstInfo = castTo($get_2(srsItem.srsShapeList, 0), 18);
  if (firstInfo) {
    if (instanceOf(firstInfo, 28)) {
      thisPoint = castTo(firstInfo, 28);
      firstPoint = thisPoint;
      largestPoint = thisPoint;
      smallestPoint = thisPoint;
      smallest = $getValue(thisPoint.cell);
      largest = $getValue(thisPoint.cell);
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        thisPoint = castTo(srsInfo, 28);
        testValue = $getValue(thisPoint.cell);
        if (testValue < smallest) {
          smallest = testValue;
          smallestPoint = thisPoint;
        }
         else if (testValue >= largest) {
          largest = testValue;
          largestPoint = thisPoint;
        }
      }
      labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
      numberFormatter = $getHoverFormatterForCell(this$static.sGraph, thisPoint.cell);
      $addHint_1(hoverLabel, rnd, numberFormatter, thisPoint, thisPoint.getHintPoint(), labelPosition, this$static.tooltipHints);
      $addHint_1(hoverLabel, rnd, numberFormatter, firstPoint, firstPoint.getHintPoint(), labelPosition, this$static.tooltipHints);
      $addHint_1(hoverLabel, rnd, numberFormatter, largestPoint, largestPoint.getHintPoint(), labelPosition, this$static.tooltipHints);
      $addHint_1(hoverLabel, rnd, numberFormatter, smallestPoint, smallestPoint.getHintPoint(), labelPosition, this$static.tooltipHints);
    }
  }
}

function $addHoverPoint(this$static, lineInfo){
  var pointShape;
  if (!!lineInfo && !!lineInfo.point) {
    !!this$static.hoverPoint && $clearHoverPoint(this$static);
    this$static.hoverPoint = new GraphicElement;
    pointShape = lineInfo.getPointShape(null, new CFFill(lineInfo.stroke_0.color_0), true, !lineInfo.filledSymbol);
    pointShape.fill_0.noMouse = true;
    $addShape(this$static.hoverPoint, pointShape);
    $addFrontGraphicElement_0(this$static.graph, this$static.hoverPoint);
  }
}

function $addLineWithForecastSegment(ge, lineShape, fullLineInfo, projInfo){
  var dimStroke, lastSegment, lastSegmentShape, newPathAry, nextToLastElement, pathAry;
  if (!lineShape)
    return;
  pathAry = lineShape.path.pathAry;
  lastSegment = castTo(pathAry.get_1(pathAry.size_1() - 1), 11);
  if ((lastSegment.type_0 == 1 || lastSegment.type_0 == 3) && !!projInfo && !!projInfo.drawPoint && lastSegment.x_0 == projInfo.drawPoint.x_0) {
    pathAry.remove_2(pathAry.size_1() - 1);
    nextToLastElement = castTo(pathAry.get_1(pathAry.size_1() - 1), 11);
    newPathAry = new ArrayList;
    $add_1(newPathAry, new CFPathElement_0(0, nextToLastElement.x_0, nextToLastElement.y_0));
    newPathAry.array[newPathAry.array.length] = lastSegment;
    dimStroke = $duplicate_7(lineShape.stroke_0);
    dimStroke.color_0.alpha_0 = 64;
    lastSegmentShape = new CFShape_0(new CFPath_9(newPathAry), null, dimStroke);
    $addShape_0(ge, lineShape, fullLineInfo);
    $addShape_0(ge, lastSegmentShape, fullLineInfo);
  }
   else {
    $addShape_0(ge, lineShape, fullLineInfo);
  }
}

function $addScaleMarkerOutlierFill(this$static, sGraph, srsInfo, srsIndex){
  var clipShape, endClipShape, innerBnds, lowerClipRect, maxPos, minPos, outlierPath, sm, smOutlierFillColor, upperClipRect, valueScale;
  sm = $getScaleMarkerWithOutlierFillColor(this$static.graph);
  if (sm) {
    valueScale = $getValueScaleByNumber(sGraph, 0);
    if (srsIndex == 0) {
      !!this$static.scaleMarkerOutlierFillGE && $remove_3(valueScale.backGeAry, this$static.scaleMarkerOutlierFillGE);
      this$static.scaleMarkerOutlierFillGE = new GraphicElement;
    }
    !this$static.scaleMarkerOutlierFillGE && (this$static.scaleMarkerOutlierFillGE = new GraphicElement);
    innerBnds = this$static.graph.getInnerBounds();
    smOutlierFillColor = $getOutlierFillColor(sm);
    minPos = $getAbsolutePositionForValue(valueScale, $getValue_1(sm, this$static.graph));
    maxPos = $getAbsolutePositionForValue(valueScale, $getHighValue(sm, this$static.graph));
    if (sGraph.isHorizontal) {
      upperClipRect = new CFRect(maxPos, innerBnds.y_0, innerBnds.x_0 + innerBnds.width_0 - maxPos, innerBnds.height_0);
      lowerClipRect = new CFRect(innerBnds.x_0, innerBnds.y_0, minPos - innerBnds.x_0, innerBnds.height_0);
    }
     else {
      upperClipRect = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, maxPos - innerBnds.y_0);
      lowerClipRect = new CFRect(innerBnds.x_0, minPos, innerBnds.width_0, innerBnds.y_0 + innerBnds.height_0 - minPos);
    }
    clipShape = new CFShape_1(upperClipRect, null, null);
    $add(clipShape.path, new CFPathRectElement_0(lowerClipRect));
    clipShape.isClip = true;
    $addShape(this$static.scaleMarkerOutlierFillGE, clipShape);
    outlierPath = getOutlierFillPath(sGraph, castTo(srsInfo.fullSeriesInfo, 28), minPos, maxPos, this$static.graph.getInnerBounds());
    outlierPath.shouldAntiAlias = true;
    $addShape(this$static.scaleMarkerOutlierFillGE, new CFShape_0(outlierPath, new CFFill(smOutlierFillColor), null));
    endClipShape = new CFShape;
    endClipShape.isClip = true;
    $addShape(this$static.scaleMarkerOutlierFillGE, endClipShape);
    $add_0(valueScale.backGeAry, 0, this$static.scaleMarkerOutlierFillGE);
  }
}

function $adjustLabelPosForHorizontalLines(this$static, point, labelPosition){
  var midPoint;
  if (!!this$static.sGraph && this$static.sGraph.isHorizontal) {
    midPoint = $getCenterX(this$static.graph.bnds);
    point.x_0 > midPoint && (labelPosition = 12);
  }
  return labelPosition;
}

function $clearHoverPoint(this$static){
  if (this$static.hoverPoint) {
    this$static.graph.frontGeAry.remove(this$static.hoverPoint);
    this$static.hoverPoint = null;
  }
}

function $createDrawObjectsForFrame_2(this$static, sGraph, type_0, curTime, valueScale){
  var bkgStrokeWidth, fullLineInfo, ge, i, lineArea, linePointInfo, linePoints, minMaxScale, minMaxScale0, pctComplete, shape_0, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator, valScale, zeroPos;
  zeroPos = valueScale.getZeroPosition();
  clearGraphicElementArray(this$static.graph.backGeAry);
  $drawMultilineRange(this$static, sGraph);
  $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
  for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
    srsItem = castTo($get_2(this$static.graph.seriesShapes, i), 19);
    if (!!srsItem.fullSeriesInfo && instanceOf(srsItem.fullSeriesInfo, 28)) {
      fullLineInfo = castTo(srsItem.fullSeriesInfo, 28);
      if (fullLineInfo) {
        ge = new GraphicElement;
        pctComplete = 1;
        !!fullLineInfo.animInfo && (pctComplete = $getPercentComplete(fullLineInfo.animInfo, curTime));
        shape_0 = $getShapePct_1(fullLineInfo, type_0, sGraph, pctComplete, zeroPos, sGraph.isHorizontal, this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine);
        valScale = $getValueScale(sGraph);
        if ((this$static.graph.graphType == 2 || this$static.graph.graphType == 3) && this$static.graph.seriesShapes.array.length == 1 && $getNumCols(this$static.graph.data_0) == 1 || this$static.graph.typeAttributes.isPeriodOverPeriod && i == this$static.graph.seriesShapes.array.length - 1) {
          if (shape_0) {
            if (this$static.rangeMaxVal != $intern_20) {
              addRangeDrawingElements(sGraph, valScale, this$static.rangeMinVal, this$static.rangeMaxVal, this$static.rangeColor, this$static.showRangeLines, this$static.fillRangeOutliers, fullLineInfo);
            }
             else if ((!fullLineInfo.hasGaps || this$static.hideNullDataGaps || !$hasMiddleGaps(fullLineInfo)) && !this$static.hideSingleSeriesFill) {
              $addInnerBoundsClip(this$static, false, true, false);
              $addBackGraphicElement(this$static.graph, this$static.getBackGEForAreaBelowLineShapes(fullLineInfo, shape_0.path.pathAry));
              $clearInnerBoundsClip(this$static, true, false);
            }
          }
        }
         else 
          this$static.fillRangeOutliersNew && instanceOf(valScale, 27) && !!$getRangeScaleMarker(castTo(valScale, 27)) && $addScaleMarkerOutlierFill(this$static, sGraph, srsItem, i);
        if ($isLineBar(this$static.graph) && !!shape_0 && !!srsItem.srsShapeList && srsItem.srsShapeList.array.length < 500) {
          bkgStrokeWidth = round_int(shape_0.stroke_0.width_0) * 3;
          $addShape_0(ge, new CFShape_0(shape_0.path, null, new CFStroke_2(bkgStrokeWidth)), null);
        }
        srsItem.projectionInfo?$addLineWithForecastSegment(ge, shape_0, fullLineInfo, srsItem.projectionInfo):$addShape_0(ge, shape_0, fullLineInfo);
        if (pctComplete > 0.99) {
          if (srsItem.projectionInfo) {
            minMaxScale0 = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
            $drawProjectionLine(minMaxScale0, srsItem, null);
          }
          linePoints = null;
          (fullLineInfo.hasGaps && !this$static.hideNullDataGaps || $getNumActualPoints(fullLineInfo) == 1) && (linePoints = $getIsolatedPointsOnLine(shape_0.path, fullLineInfo.stroke_0, this$static.pointDiameter));
          !!linePoints && (!ge.shapeAry && (ge.shapeAry = new ArrayList) , $add_1(ge.shapeAry, linePoints));
          lineArea = new CFShape_0($getHitAreaForLinePath(shape_0.path, 3), null, null);
          $addShape_0(ge, lineArea, fullLineInfo);
          minMaxScale = castTo($getScaleByTypeNumber(this$static.sGraph, ST_MINMAX, 0), 67);
          this$static.graph.graphType == 3 || this$static.graph.graphType == 2?!!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).fullSeriesInfo && $addMinMaxAvgLines(minMaxScale, castTo($get_2(this$static.graph.seriesShapes, 0), 19).fullSeriesInfo.stroke_0):this$static.graph.graphType != 12 && !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!this$static.graph.seriesShapes && this$static.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && $addMinMaxAvgLines(minMaxScale, new CFStroke(castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).fill_0.color_0, 1));
        }
        $addGraphicElement_0(this$static.graph, ge);
      }
    }
  }
  $clearInnerBoundsClip(this$static, false, false);
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 28)) {
        linePointInfo = castTo(srsInfo, 28);
        if (!!linePointInfo.animInfo && $pointInGraphBnds(this$static, linePointInfo.point)) {
          pctComplete = $getPercentComplete(linePointInfo.animInfo, curTime);
          ge = new GraphicElement;
          shape_0 = $getShapePct_1(linePointInfo, type_0, sGraph, pctComplete, zeroPos, sGraph.isHorizontal, this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine);
          $addShape_0(ge, shape_0, linePointInfo);
          $addGraphicElement_0(this$static.graph, ge);
        }
      }
    }
  }
  $drawMeanLine(this$static);
}

function $createSeriesInfoObjs(this$static, sGraph, rows_0, baseScale, valScale, valScale2){
  var LineList, catScalePos, cell, curCol, curIndex, curLineWidth, curRow, drillColumnOnly, fill, fillColor, fillToUse, fullLineInfo, hasFilteredColumns, hasFilteredRows, hasNullValues, i, inShowAsFilteredMode, isTimeScale, lastPoints, lastSeriesInfo, lastState, lastStateFullLineInfo, linePoint, linePointInfo, linePointInfoProj, linePointProj, lineStyle, minCatPos, minMaxScale, minValuePos, numExtraForecastItems, numRows, points, previousRowIndex, projectedValue, realColIndex, reverseRowMap, roundedLastPoint, rowIndex, rowMap, rowstoDisplay, seriesColor, showAsFiltered, srsInfo, stroke, strokeColor, symbolIsFilled, symbolType, value_0, valueScale, valueScalePos, valueScalePosProjected;
  if (!rows_0)
    return;
  inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
  hasFilteredColumns = !!this$static.graph.data_0 && this$static.graph.data_0.hasFilteredCols;
  hasFilteredRows = !!this$static.graph.data_0 && this$static.graph.data_0.hasFilteredRows;
  numRows = this$static.graph.data_0.numVisibleRows;
  rowMap = buildRowMap(rows_0);
  reverseRowMap = buildReverseRowMap(rows_0);
  isTimeScale = !!baseScale && instanceOf(baseScale, 56);
  (this$static.graph.isThumbnail || numRows > 50 || this$static.graph.data_0.numVisibleCols > 50 || this$static.graph.bnds.width_0 < 150) && (this$static.lineWidth_0 = 1);
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  minCatPos = baseScale.getMinPosition();
  drillColumnOnly = true;
  this$static.graph.data_0.numVisibleCols == 1 && (drillColumnOnly = false);
  curCol = $getFirstVisibleCol(this$static.graph.data_0);
  while (curCol) {
    this$static.graph.typeAttributes.isRunningTotal && $stripEndingNullsFromRunningTotal(curCol, $getNumRows(this$static.graph.data_0));
    valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (valueScale) {
      rowstoDisplay = rows_0;
      this$static.graph.typeAttributes.isPopPlay || (rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol));
      realColIndex = curCol.origIndex;
      minValuePos = valueScale.getMinPosition();
      hasNullValues = false;
      fullLineInfo = null;
      LineList = new ArrayList;
      points = new ArrayList;
      lastPoints = new ArrayList;
      fill = new CFFill(($clinit_CFColor() , TRANSPARENT));
      seriesColor = $getColorForSeriesNameOrIndex_0(this$static.graph, curCol, curCol.curIndex);
      strokeColor = seriesColor;
      showAsFiltered = inShowAsFilteredMode && (curCol.showAsFiltered || hasFilteredRows);
      showAsFiltered && (strokeColor = $deSaturateAndLighten(seriesColor, 0.9, 0.4));
      this$static.graph.typeAttributes.isPopPlay && (strokeColor = $getColorForSeriesNameOrIndex_0(this$static.graph, curCol, 0));
      curLineWidth = this$static.lineWidth_0;
      this$static.lineWidthOverride > 0 && (curLineWidth = this$static.lineWidthOverride);
      curLineWidth = $getLineWidthFromThicknessOverride(this$static, curLineWidth);
      stroke = new CFStroke_0(strokeColor, curLineWidth);
      previousRowIndex = -1;
      roundedLastPoint = null;
      for (i = 0; i < rowstoDisplay.size_1(); i++) {
        curRow = castTo(rowstoDisplay.get_1(i), 7);
        if (!curRow)
          continue;
        rowIndex = castTo(getEntryValueOrNull($getEntry(reverseRowMap.hashCodeMap, curRow)), 29).value_0;
        cell = null;
        !!curRow.cellMap && (cell = castTo($get_1(curRow.cellMap, valueOf(realColIndex)), 16));
        if (!!cell && (!isNaN_0($getValue(cell)) || this$static.graph.typeAttributes.stepLines || this$static.graph.typeAttributes.isPopPlay)) {
          if (rowIndex - 1 != previousRowIndex) {
            hasNullValues = true;
            if (!isTimeScale && !this$static.hideNullDataGaps && (points.array.length > 0 || this$static.graph.typeAttributes.stepLines)) {
              points.array[points.array.length] = null;
              lastPoints.array[lastPoints.array.length] = null;
            }
          }
          curIndex = rowIndex;
          isTimeScale && (curIndex = curRow.curIndex);
          value_0 = $getValue(cell);
          catScalePos = baseScale.getPositionForValue(curIndex);
          valueScalePos = valueScale.getPositionForValue(value_0);
          linePoint = new CFPoint(minCatPos + catScalePos, minValuePos - valueScalePos);
          sGraph.isHorizontal && (linePoint = new CFPoint(minValuePos + valueScalePos, minCatPos + catScalePos));
          linePointProj = null;
          projectedValue = cell.projectedValue;
          if (!isNaN(projectedValue) && projectedValue != value_0) {
            valueScalePosProjected = valueScale.getPositionForValue(projectedValue);
            linePointProj = new CFPoint(minCatPos + catScalePos, minValuePos - valueScalePosProjected);
          }
          lastState = this$static.getLastState(cell, false);
          if (isNaN(value_0)) {
            hasNullValues = true;
            roundedLastPoint = null;
            points.array[points.array.length] = linePoint;
            instanceOf(lastState, 28)?$add_1(lastPoints, castTo(lastState, 28).point):(lastPoints.array[lastPoints.array.length] = linePoint , true);
          }
           else if (!roundedLastPoint || !$equals_1(roundedLastPoint, new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(linePoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(linePoint.y_0)))))) {
            fillToUse = fill;
            symbolType = this$static.getSymbolTypeForSeriesNum(curCol.curIndex);
            symbolType != 0 && (fillToUse = new CFFill(WHITE));
            symbolIsFilled = $getSymbolIsFilledForSeriesNum(this$static, curCol.curIndex);
            if (inShowAsFilteredMode && hasFilteredRows && !curRow.showAsFiltered) {
              symbolType = 0;
              fillColor = seriesColor;
              curCol.showAsFiltered && (fillColor = $deSaturateAndLighten(seriesColor, 0.9, 0.4));
              fillToUse = new CFFill(fillColor);
            }
            if (linePointProj) {
              linePointInfoProj = new SrsLineInfo(cell, linePointProj, symbolType, symbolIsFilled, fillToUse, stroke, lastState, this$static.graph.bnds.height_0);
              inShowAsFilteredMode && hasFilteredColumns && !showAsFiltered && (linePointInfoProj.highlightAlways = true);
              inShowAsFilteredMode && (linePointInfoProj.drillOnColOnly = drillColumnOnly);
              LineList.array[LineList.array.length] = linePointInfoProj;
              linePointInfoProj.isForecastPoint = true;
            }
            if (isNaN(value_0)) {
              hasNullValues = true;
            }
             else {
              linePointInfo = new SrsLineInfo(cell, linePoint, symbolType, symbolIsFilled, fillToUse, stroke, lastState, this$static.graph.bnds.height_0);
              inShowAsFilteredMode && hasFilteredColumns && !showAsFiltered && (linePointInfo.highlightAlways = true);
              inShowAsFilteredMode && (linePointInfo.drillOnColOnly = drillColumnOnly);
              LineList.array[LineList.array.length] = linePointInfo;
            }
            points.array[points.array.length] = linePoint;
            instanceOf(lastState, 28)?$add_1(lastPoints, castTo(lastState, 28).point):(lastPoints.array[lastPoints.array.length] = linePoint , true);
            roundedLastPoint = new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(linePoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(linePoint.y_0))));
          }
        }
         else {
          hasNullValues = true;
          points.array[points.array.length] = null;
          lastPoints.array[lastPoints.array.length] = null;
        }
        rowIndex - 1 != previousRowIndex && (hasNullValues = true);
        previousRowIndex = rowIndex;
      }
      if (LineList.array.length > 0 && !this$static.graph.typeAttributes.symbolsOnly) {
        numExtraForecastItems = $getNumExtraProjectedItems(sGraph);
        cell = $getFirstCellFromList(LineList);
        lineStyle = 0;
        this$static.graph.typeAttributes.curvedLines?(lineStyle = 1):this$static.graph.typeAttributes.stepLines && (lineStyle = 2);
        lastStateFullLineInfo = new SrsLineInfo_1($getFirstCellFromList(LineList), lastPoints, stroke, lineStyle, hasNullValues, this$static.hideNullDataGaps, null);
        numExtraForecastItems > 0 && $setNumForecastItems(lastStateFullLineInfo, numExtraForecastItems);
        lastSeriesInfo = $getLastShapeHoldingFullSeriesInfoForCell(sGraph, cell);
        !!lastSeriesInfo && (lastSeriesInfo.fullSeriesInfo = lastStateFullLineInfo);
        fullLineInfo = new SrsLineInfo_1($getFirstCellFromList(LineList), points, stroke, lineStyle, hasNullValues, this$static.hideNullDataGaps, lastStateFullLineInfo);
        numExtraForecastItems > 0 && $setNumForecastItems(fullLineInfo, numExtraForecastItems);
        !!fullLineInfo && inShowAsFilteredMode && hasFilteredColumns && !showAsFiltered && (fullLineInfo.highlightAlways = true);
        inShowAsFilteredMode && (fullLineInfo.drillOnColOnly = drillColumnOnly);
      }
      srsInfo = new SeriesInfo(LineList, fullLineInfo);
      $addRegressionAndProjectionDataToSrsInfo(this$static, minMaxScale, valueScale, curCol, srsInfo);
      this$static.graph.typeAttributes.isNestedBar || $isLineBar(this$static.graph)?$add_0(this$static.graph.seriesShapes, 0, srsInfo):$add_1(this$static.graph.seriesShapes, srsInfo);
    }
    curCol = $getNextVisibleCol(this$static.graph.data_0, curCol);
  }
  !this$static.graph.typeAttributes.isNestedBar && !$isLineBar(this$static.graph) && reverse(this$static.graph.seriesShapes);
  !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && $calcMinMaxAvgPositions(minMaxScale);
  this$static.drawAllLinesAndPoints(sGraph, -1);
}

function $drawAllLinesAndPoints(this$static, sGraph, index_0){
  var curIndex, drawGrayLineOnly, hasClip, i, minMaxScale, srsItem, srsItem$iterator, srsItem$iterator0;
  curIndex = 0;
  clearGraphicElementArray(this$static.graph.backGeAry);
  this$static.drawGridItems();
  $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
  !this$static.upperList && !!this$static.lowerList?$drawUpperLowerRange(this$static, this$static.meanList, this$static.lowerList, $getRangeFillColor(this$static)):$drawUpperLowerRange(this$static, this$static.upperList, this$static.lowerList, $getRangeFillColor(this$static));
  !this$static.upper2List && !!this$static.lower2List?$drawUpperLowerRange(this$static, this$static.mean2List, this$static.lower2List, $getRange2FillColor(this$static)):$drawUpperLowerRange(this$static, this$static.upper2List, this$static.lower2List, $getRange2FillColor(this$static));
  for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
    srsItem = castTo($get_2(this$static.graph.seriesShapes, i), 19);
    if ($isLine(srsItem)) {
      drawGrayLineOnly = false;
      curIndex != index_0 && index_0 != -1 && (drawGrayLineOnly = true);
      $drawLines(this$static, sGraph, srsItem, drawGrayLineOnly, i);
    }
    ++curIndex;
  }
  $clearInnerBoundsClip(this$static, false, false);
  curIndex = 0;
  for (srsItem$iterator0 = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator0.i < srsItem$iterator0.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator0), 19);
    if ($isLine(srsItem)) {
      drawGrayLineOnly = false;
      curIndex != index_0 && index_0 != -1 && (drawGrayLineOnly = true);
      $drawPoints(this$static, srsItem, drawGrayLineOnly);
    }
    ++curIndex;
  }
  $drawMeanLine(this$static);
  hasClip = false;
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  if (minMaxScale) {
    for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
      srsItem = castTo($next_3(srsItem$iterator), 19);
      if (srsItem.regressionLinePoints) {
        if (!hasClip) {
          $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, true);
          hasClip = true;
        }
        $drawLinearRegressionLine(minMaxScale, srsItem);
      }
    }
    hasClip && $clearInnerBoundsClip(this$static, false, true);
  }
}

function $drawDataLabel_0(dataLabel, rnd, existingLableRects, shpInfo){
  var dlPoint, dlText, newHoverFormat, origDataLabelFormatStr, textPosRect, thisPoint;
  if (!!shpInfo && instanceOf(shpInfo, 28) && dataLabel.showLabelsOn != 1) {
    thisPoint = castTo(shpInfo, 28);
    origDataLabelFormatStr = dataLabel.formatString;
    if (thisPoint.isForecastPoint && origDataLabelFormatStr.indexOf('%_VALUE') != -1) {
      newHoverFormat = $replaceAll(origDataLabelFormatStr, '%_VALUE', '%_FORECAST_VALUE');
      dataLabel.formatString = newHoverFormat;
    }
    dlText = $getFormattedDataLabel(dataLabel, thisPoint.cell);
    dataLabel.formatString = origDataLabelFormatStr;
    dlPoint = new CFPoint(thisPoint.point.x_0, thisPoint.point.y_0);
    thisPoint.symbolType != 0 && (dataLabel.position == 8 || dataLabel.position == 0) && $setY(dlPoint, dlPoint.y_0 - 4);
    textPosRect = $getTextRectForPoint(dataLabel, rnd, dataLabel.font_0, dlPoint, dlText, dataLabel.position, false, true);
    return $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
  }
  return false;
}

function $drawHints_0(this$static, rnd, hoverData, seriesIndex){
  var cell, current, drawSubsetOnly, hoverLabel, labelPosition, lblPos, newHoverFormat, origHoverFormatStr, srsInfo, srsInfo$iterator, srsItem, thisPoint;
  if (seriesIndex < 0)
    return;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  srsItem = castTo($get_2(this$static.graph.seriesShapes, seriesIndex), 19);
  cell = null;
  instanceOf(hoverData, 28) && (cell = castTo(hoverData, 28).cell);
  $setFormatString(hoverLabel, $getHoverLabelTextForCell(this$static.sGraph, cell, hoverLabel.formatString));
  drawSubsetOnly = false;
  srsItem.srsShapeList.array.length > 100 && (drawSubsetOnly = true);
  current = null;
  labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
  if (instanceOf(hoverData, 28)) {
    current = castTo(hoverData, 28);
    if (!!current && !!current.point) {
      lblPos = $adjustLabelPosForHorizontalLines(this$static, current.point, labelPosition);
      !!current.cell && $isForecastItem(current.cell) || current.isForecastPoint;
      origHoverFormatStr = hoverLabel.formatString;
      if (current.isForecastPoint && origHoverFormatStr.indexOf('%_VALUE') != -1) {
        newHoverFormat = $replaceAll(origHoverFormatStr, '%_VALUE', '%_FORECAST_VALUE');
        hoverLabel.formatString = newHoverFormat;
      }
      $addPrimary(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, current.cell), current.cell, current.point, lblPos);
      hoverLabel.formatString = origHoverFormatStr;
    }
  }
  if (!this$static.suppressHints) {
    $addFirstLastLargestSmallestHints_0(this$static, rnd, hoverLabel, srsItem);
    if (!drawSubsetOnly) {
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        if (srsInfo.isLine_0()) {
          thisPoint = castTo(srsInfo, 28);
          thisPoint != current && $addHint_1(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, thisPoint.cell), thisPoint, thisPoint.getHintPoint(), labelPosition, this$static.tooltipHints);
        }
      }
    }
  }
}

function $drawHintsForList_0(this$static, rnd, points){
  var cell, hoverLabel, labelPosition, srsLineInfo, srsLineInfo$iterator;
  if (this$static.suppressHints)
    return;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  for (srsLineInfo$iterator = new ArrayList$1(points); srsLineInfo$iterator.i < srsLineInfo$iterator.this$01.array.length;) {
    srsLineInfo = castTo($next_3(srsLineInfo$iterator), 28);
    cell = srsLineInfo.cell;
    $setFormatString(hoverLabel, $getHoverLabelTextForCell(this$static.sGraph, cell, hoverLabel.formatString));
    labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
    $addHint_1(hoverLabel, rnd, $getHoverFormatterForCell(this$static.sGraph, srsLineInfo.cell), srsLineInfo, srsLineInfo.getHintPoint(), labelPosition, this$static.tooltipHints);
  }
}

function $drawLineFromSrsInfo(this$static, sGraph, srsInfo, stroke, seriesIndex){
  var bkgStrokeWidth, fullLineInfo, ge, line, lineArea, linePoints, lineShape, minMaxScale, sclInnerRect, valScale;
  fullLineInfo = castTo(srsInfo.fullSeriesInfo, 28);
  sclInnerRect = $getInnerBoundsRect($getCategoryScale(sGraph));
  ge = new GraphicElement;
  line = new CFPath_11(fullLineInfo.pointlist, fullLineInfo.lineStyle, sGraph.isHorizontal, sclInnerRect, fullLineInfo.hideGaps, false);
  line.shouldAntiAlias = true;
  lineShape = new CFShape_0(line, null, stroke);
  linePoints = null;
  (fullLineInfo.hasGaps && !this$static.hideNullDataGaps || $getNumActualPoints(fullLineInfo) == 1) && (linePoints = $getIsolatedPointsOnLine(line, stroke, this$static.pointDiameter));
  valScale = $getValueScale(sGraph);
  if ((this$static.graph.graphType == 2 || this$static.graph.graphType == 3) && this$static.graph.seriesShapes.array.length == 1 && $getNumCols(this$static.graph.data_0) == 1 || this$static.graph.typeAttributes.isPeriodOverPeriod && seriesIndex == this$static.graph.seriesShapes.array.length - 1) {
    if (this$static.rangeMaxVal != $intern_20) {
      addRangeDrawingElements(sGraph, valScale, this$static.rangeMinVal, this$static.rangeMaxVal, this$static.rangeColor, this$static.showRangeLines, this$static.fillRangeOutliers, fullLineInfo);
    }
     else if ((!fullLineInfo.hasGaps || this$static.hideNullDataGaps || !$hasMiddleGaps(fullLineInfo)) && !this$static.hideSingleSeriesFill) {
      $addInnerBoundsClip(this$static, false, true, false);
      $addBackGraphicElement(this$static.graph, this$static.getBackGEForAreaBelowLineShapes(fullLineInfo, line.pathAry));
      $clearInnerBoundsClip(this$static, true, false);
    }
    $addScaleMarkerOutlierFill(this$static, sGraph, srsInfo, seriesIndex);
  }
   else 
    this$static.fillRangeOutliersNew && instanceOf(valScale, 27) && !!$getRangeScaleMarker(castTo(valScale, 27)) && $addScaleMarkerOutlierFill(this$static, sGraph, srsInfo, seriesIndex);
  if (srsInfo.projectionInfo) {
    minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
    $drawProjectionLine(minMaxScale, srsInfo, stroke);
  }
  if ($isLineBar(this$static.graph) && !!srsInfo.srsShapeList && srsInfo.srsShapeList.array.length < $intern_36) {
    bkgStrokeWidth = round_int(lineShape.stroke_0.width_0) * 3;
    $addShape_0(ge, new CFShape_0(lineShape.path, null, new CFStroke_2(bkgStrokeWidth)), null);
  }
  srsInfo.projectionInfo?$addLineWithForecastSegment(ge, lineShape, fullLineInfo, srsInfo.projectionInfo):$addShape_0(ge, lineShape, fullLineInfo);
  !!linePoints && $addShape_0(ge, linePoints, fullLineInfo);
  line = $getHitAreaForLinePath(line, 3);
  line.shouldAntiAlias = true;
  lineArea = new CFShape_0(line, null, null);
  $addShape_0(ge, lineArea, fullLineInfo);
  $addGraphicElement_0(this$static.graph, ge);
}

function $drawLines(this$static, sGraph, srsItem, drawGrayLineOnly, seriesIndex){
  var stroke;
  if ($isLine(srsItem)) {
    if (!(this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine) && !!srsItem.fullSeriesInfo) {
      stroke = srsItem.fullSeriesInfo.stroke_0;
      drawGrayLineOnly && (this$static.graph.graphType == 4 || this$static.graph.graphType == 5?(stroke = new CFStroke_0(($clinit_CFColor() , DISABLED_DARK_GRAY), 2)):(stroke = new CFStroke_0(($clinit_CFColor() , DISABLED_LIGHT_GRAY), 2)));
      $drawLineFromSrsInfo(this$static, sGraph, srsItem, stroke, seriesIndex);
    }
  }
}

function $drawMeanLine(this$static){
  var i, lineInfo, linePoint, path, shape_0;
  if (!!this$static.meanList && !this$static.graph.typeAttributes.isXYForecast) {
    !!this$static.meanLine && this$static.graph.geAry.remove(this$static.meanLine);
    path = new CFPath;
    for (i = 0; i < this$static.meanList.array.length; i++) {
      lineInfo = castTo($get_2(this$static.meanList, i), 18);
      if (instanceOf(lineInfo, 28)) {
        linePoint = castTo(lineInfo, 28).point;
        !!linePoint && !isNaN_0(linePoint.y_0) && (path.pathAry.size_1() == 0?$add(path, new CFPathElement_1(0, linePoint)):$add(path, new CFPathElement_1(1, linePoint)));
      }
    }
    shape_0 = new CFShape_0(path, null, this$static.meanStroke);
    !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
    this$static.meanLine = new GraphicElement_0(shape_0);
    this$static.graph.geAry.add_0(this$static.meanLine);
  }
}

function $drawMultilineRange(this$static, sGraph){
  var valScale;
  if (this$static.graph.seriesShapes.array.length > 1 && this$static.rangeMaxVal != $intern_20 && this$static.rangeMinVal != this$static.rangeMaxVal) {
    valScale = $getValueScale(sGraph);
    addRangeDrawingElements(sGraph, valScale, this$static.rangeMinVal, this$static.rangeMaxVal, this$static.rangeColor, this$static.showRangeLines, false, null);
  }
}

function $drawPoints(this$static, srsItem, drawGrayLineOnly){
  var previous, srsInfo, srsInfo$iterator;
  if ($isLine(srsItem)) {
    if (!drawGrayLineOnly || this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine) {
      previous = null;
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        this$static.drawLinePointFromSrsInfo(castTo(srsInfo, 28), previous, drawGrayLineOnly);
        previous = castTo(srsInfo, 28);
      }
    }
  }
}

function $drawPointsForCategory(this$static, rnd, rowInfo){
  var points, scale, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator, xyCategoryScale;
  points = new ArrayList;
  scale = $getCategoryScale(this$static.sGraph);
  xyCategoryScale = null;
  instanceOf(scale, 123) && (xyCategoryScale = castTo(scale, 123));
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    if ($isLine(srsItem)) {
      for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        if (xyCategoryScale) {
          if (srsInfo.cell) {
            if (neq(rowInfo.timeMS, 0) && eq(srsInfo.cell.row.timeMS, rowInfo.timeMS) || $getName(rowInfo) != null && $equals_2($getName(rowInfo), srsInfo.cell.valueStr)) {
              $drawSinglePointFromSrsInfo(this$static, castTo(srsInfo, 28));
              $add_1(points, castTo(srsInfo, 28));
            }
          }
        }
         else {
          if (!!srsInfo.cell && srsInfo.cell.row == rowInfo) {
            $drawSinglePointFromSrsInfo(this$static, castTo(srsInfo, 28));
            $add_1(points, castTo(srsInfo, 28));
            break;
          }
        }
      }
    }
  }
  points.array.length > 0 && $drawHintsForList_0(this$static, rnd, points);
}

function $drawSinglePointFromSrsInfo(this$static, linePointInfo){
  var ge, shape_0;
  if (!!linePointInfo && $pointInGraphBnds(this$static, linePointInfo.point)) {
    ge = new GraphicElement;
    shape_0 = $getShape(linePointInfo, null, this$static.graph.getInnerBounds(), false, this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine);
    $setFill(shape_0, linePointInfo.stroke_0.color_0);
    $addShape_0(ge, shape_0, linePointInfo);
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $drawUpperLowerRange(this$static, upperList, lowerList, rangeColor){
  var i, i0, lineInfo, linePoint, path, shape_0;
  path = new CFPath;
  if (!!upperList && !!lowerList) {
    for (i0 = 0; i0 < upperList.array.length; i0++) {
      lineInfo = (checkCriticalElementIndex(i0, upperList.array.length) , castTo(upperList.array[i0], 18));
      if (instanceOf(lineInfo, 28) && !!castTo(lineInfo, 28).point) {
        linePoint = castTo(lineInfo, 28).point;
        isNaN_0(linePoint.y_0) || (path.pathAry.size_1() == 0?$add(path, new CFPathElement_1(0, linePoint)):$add(path, new CFPathElement_1(1, linePoint)));
      }
    }
    for (i = lowerList.array.length - 1; i >= 0; i--) {
      lineInfo = (checkCriticalElementIndex(i, lowerList.array.length) , castTo(lowerList.array[i], 18));
      if (instanceOf(lineInfo, 28) && !!castTo(lineInfo, 28).point) {
        linePoint = castTo(lineInfo, 28).point;
        isNaN_0(linePoint.y_0) || $add(path, new CFPathElement_1(1, linePoint));
      }
    }
    if (path.pathAry.size_1() > 0) {
      $add(path, new CFPathElement);
      shape_0 = new CFShape_0(path, new CFFill(rangeColor), null);
      !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
      this$static.graph.geAry.add_0(new GraphicElement_0(shape_0));
    }
  }
}

function $freeResources_20(this$static, dataToKeep){
  $freeResources_17(this$static, dataToKeep);
  this$static.sGraph = null;
  this$static.hoverPoint = null;
  this$static.fillBelowSingleLine = null;
  this$static.rangeColor = null;
  this$static.meanList = null;
  this$static.lowerList = null;
  this$static.upperList = null;
  this$static.outlierList = null;
  this$static.mean2List = null;
  this$static.lower2List = null;
  this$static.upper2List = null;
}

function $getAreaBelowLinePath(this$static, pathAry, padding){
  var areaPathAry, baseline, pathEle, pathEle$iterator, xScale, yScale;
  areaPathAry = new ArrayList;
  for (pathEle$iterator = pathAry.iterator(); pathEle$iterator.hasNext_0();) {
    pathEle = castTo(pathEle$iterator.next_1(), 11);
    !!pathEle && !isNaN_0(pathEle.x_0) && !isNaN_0(pathEle.y_0) && (areaPathAry.array[areaPathAry.array.length] = pathEle , true);
  }
  if (this$static.sGraph.isHorizontal) {
    xScale = $getXScale(this$static.sGraph, false);
    baseline = this$static.graph.bnds.x_0 + xScale.startMargin;
    $add_1(areaPathAry, new CFPathElement_0(1, baseline, castTo($get_2(areaPathAry, areaPathAry.array.length - 1), 11).y_0));
    $add_1(areaPathAry, new CFPathElement_0(1, baseline, (checkCriticalElementIndex(0, areaPathAry.array.length) , castTo(areaPathAry.array[0], 11)).y_0));
  }
   else {
    yScale = $getYScale(this$static.sGraph, false);
    baseline = $getBottom(this$static.graph.bnds) - yScale.endMargin + toDouble_0(fromDouble_0($wnd.Math.round(padding)));
    $add_1(areaPathAry, new CFPathElement_0(1, castTo($get_2(areaPathAry, areaPathAry.array.length - 1), 11).x_0, baseline));
    $add_1(areaPathAry, new CFPathElement_0(1, (checkCriticalElementIndex(0, areaPathAry.array.length) , castTo(areaPathAry.array[0], 11)).x_0, baseline));
  }
  $add_1(areaPathAry, new CFPathElement);
  return new CFPath_9(areaPathAry);
}

function $getDrillFilter(shapeInfo){
  if (instanceOf(shapeInfo, 28) && !!castTo(shapeInfo, 28).pointlist)
    return 'none';
  return null;
}

function $getIsolatedPointsOnLine(linePath, stroke, diameter){
  var lastElement, pathEle, pathEle$iterator, pointsPath;
  pointsPath = new CFPath;
  lastElement = null;
  for (pathEle$iterator = linePath.pathAry.iterator(); pathEle$iterator.hasNext_0();) {
    pathEle = castTo(pathEle$iterator.next_1(), 11);
    pathEle.type_0 == 0 && !!lastElement && lastElement.type_0 == 0 && $add(pointsPath, new CFPathCircleElement_0(lastElement.x_0, lastElement.y_0, diameter));
    lastElement = pathEle;
  }
  !!lastElement && lastElement.type_0 == 0 && $add(pointsPath, new CFPathCircleElement_0(lastElement.x_0, lastElement.y_0, diameter));
  if (pointsPath.pathAry.size_1() > 0)
    return new CFShape_0(pointsPath, new CFFill(stroke.color_0), null);
  return null;
}

function $getLegendItemInfoForSeries(this$static, legend, colInfo){
  var curLineWidth, fill, legendItemType, lii, stroke, strokeClr, symbolIsFilled, symbolType;
  strokeClr = $getColorForSeriesNameOrIndex_0(this$static.graph, colInfo, colInfo.curIndex);
  curLineWidth = this$static.lineWidth_0;
  this$static.lineWidthOverride > 0 && (curLineWidth = this$static.lineWidthOverride);
  curLineWidth = $getLineWidthFromThicknessOverride(this$static, curLineWidth);
  stroke = new CFStroke(strokeClr, curLineWidth);
  fill = null;
  legendItemType = 1;
  symbolType = this$static.getSymbolTypeForSeriesNum(colInfo.curIndex);
  symbolIsFilled = $getSymbolIsFilledForSeriesNum(this$static, colInfo.curIndex);
  if (symbolType != 0) {
    if (symbolIsFilled) {
      fill = new CFFill(strokeClr);
      stroke = null;
    }
     else 
      fill = ($clinit_CFFill() , WHITE_0);
    this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine?(legendItemType = 3):(legendItemType = 2);
  }
  lii = new LegendItemInfo_0(legend, colInfo, fill, stroke);
  lii.type_0 = legendItemType;
  lii.symbolType = symbolType;
  return lii;
}

function $getLineWidthFromThicknessOverride(this$static, curLineWidth){
  var chartHeight;
  if (this$static.lineThicknessOverride > 0) {
    chartHeight = this$static.graph.bnds.height_0;
    curLineWidth = this$static.lineThicknessOverride * (chartHeight / 400);
    curLineWidth < this$static.lineThicknessOverride / 2 && (curLineWidth = this$static.lineThicknessOverride / 2);
    curLineWidth > this$static.lineThicknessOverride * 2 && (curLineWidth = this$static.lineThicknessOverride * 2);
  }
  return curLineWidth;
}

function $getOutlierDataGrid(this$static, data_0){
  var c, cell, cell$iterator, col, entry, hasOutliers, i, isRangeOutlier, isSingleOutlier, newCols, newIndex, newOldIndicies, newRowCellMap, numCols, oldCell, oldIndex, oldRowCellMap, outerIter, row, row$iterator, value_0;
  !this$static.originalData && (this$static.originalData = data_0);
  data_0 = $clone(data_0);
  isSingleOutlier = false;
  isRangeOutlier = false;
  isNaN_0(this$static.outlierBelowVal) || isNaN_0(this$static.outlierAboveVal)?(isSingleOutlier = true):this$static.outlierAboveVal < this$static.outlierBelowVal && (isRangeOutlier = true);
  numCols = $getNumCols(data_0);
  newIndex = 0;
  newOldIndicies = new HashMap;
  newCols = new ArrayList;
  for (c = 0; c < numCols; c++) {
    col = $getColumn(data_0, c);
    if (col) {
      if (isSingleOutlier || !isRangeOutlier) {
        hasOutliers = false;
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          value_0 = $getValue(cell);
          if (!isNaN(value_0) && (!isNaN_0(this$static.outlierAboveVal) && value_0 > this$static.outlierAboveVal || !isNaN_0(this$static.outlierBelowVal) && value_0 < this$static.outlierBelowVal)) {
            hasOutliers = true;
            $put_0(newOldIndicies, valueOf(newIndex), valueOf(c));
            newCols.array[newCols.array.length] = col;
            ++newIndex;
            break;
          }
        }
        if (!hasOutliers) {
          $freeCellMap(col.cellMap);
          col.cellMap = null;
          data_0.cols_0.set_0(c, null);
        }
      }
       else if (isRangeOutlier) {
        hasOutliers = false;
        for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(col.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
          cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
          value_0 = $getValue(cell);
          if (!isNaN(value_0) && (value_0 < this$static.outlierAboveVal || value_0 > this$static.outlierBelowVal)) {
            hasOutliers = true;
            break;
          }
        }
        if (hasOutliers) {
          $freeCellMap(col.cellMap);
          col.cellMap = null;
          data_0.cols_0.set_0(c, null);
        }
         else {
          $put_0(newOldIndicies, valueOf(newIndex), valueOf(c));
          newCols.array[newCols.array.length] = col;
          ++newIndex;
        }
      }
    }
  }
  for (row$iterator = data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    if (!!row.cellMap && $size(row.cellMap) > 0) {
      oldRowCellMap = row.cellMap;
      newRowCellMap = new HashMap;
      for (i = 0; i < newOldIndicies.hashCodeMap.size_0 + newOldIndicies.stringMap.size_0; i++) {
        oldIndex = castTo($get_1(newOldIndicies, valueOf(i)), 29);
        if (oldIndex) {
          oldCell = castTo(getEntryValueOrNull($getEntry(oldRowCellMap.hashCodeMap, oldIndex)), 16);
          if (oldCell) {
            $put_1(oldRowCellMap.hashCodeMap, oldIndex, null);
            $put_0(newRowCellMap, valueOf(i), oldCell);
          }
        }
      }
      row.cellMap = newRowCellMap;
      $freeCellMap(oldRowCellMap);
    }
  }
  $setCols(data_0, newCols);
  return data_0;
}

function $getRange2FillColor(this$static){
  if (!this$static.range2FillColor) {
    this$static.range2FillColor = $duplicate_0(this$static.upperLowerRange2DefaultClr);
    !!this$static.upperLowerRange2Clr && (this$static.range2FillColor = new CFColor_0(this$static.upperLowerRange2Clr.red, this$static.upperLowerRange2Clr.green, this$static.upperLowerRange2Clr.blue, this$static.upperLowerRange2Alpha));
  }
  return this$static.range2FillColor;
}

function $getRangeFillColor(this$static){
  if (!this$static.rangeFillColor) {
    this$static.rangeFillColor = $duplicate_0(this$static.upperLowerRangeDefaultClr);
    !!this$static.upperLowerRangeClr && (this$static.rangeFillColor = new CFColor_0(this$static.upperLowerRangeClr.red, this$static.upperLowerRangeClr.green, this$static.upperLowerRangeClr.blue, this$static.upperLowerRangeAlpha));
  }
  return this$static.rangeFillColor;
}

function $getStartingSymbolOffset(value_0){
  var lowerVal;
  lowerVal = value_0.toLowerCase();
  if ($equals_2(lowerVal, 'circle'))
    return 1;
  else if ($equals_2(lowerVal, 'plus'))
    return 2;
  else if ($equals_2(lowerVal, 'square'))
    return 3;
  else if ($equals_2(lowerVal, 'diamond'))
    return 4;
  return 0;
}

function $getSymbolIsFilledForSeriesNum(this$static, srsNum){
  var symIndex;
  if (!(this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine) && this$static.graph.graphType != 26) {
    symIndex = srsNum % 8;
    return symIndex >= 4;
  }
  return true;
}

function $getSymbolTypeForSeriesNum(this$static, srsNum){
  var symIndex, symbolType;
  symbolType = -1;
  if (this$static.graph.graphType == 26) {
    symbolType = 11;
    this$static.graph.isThumbnail && (symbolType = 6);
  }
   else if (this$static.graph.typeAttributes.showSymbols) {
    if (this$static.graph.typeAttributes.symbolsOnly || this$static.graph.graphType == 12 && !this$static.graph.typeAttributes.isXYLine) {
      symIndex = (srsNum + this$static.startingSymbolOffset) % 5;
      symIndex == 0?(symbolType = 3):symIndex == 1?(symbolType = 1):symIndex == 2?(symbolType = 5):symIndex == 3?(symbolType = 2):symIndex == 4 && (symbolType = 4);
    }
     else {
      symIndex = srsNum % 4;
      symIndex == 0?(symbolType = 1):symIndex == 1?(symbolType = 3):symIndex == 2?(symbolType = 2):symIndex == 3 && (symbolType = 4);
    }
  }
  if (symbolType != -1) {
    (this$static.graph.treatAsSmall || this$static.graph.simplifiedForMobile || this$static.graph.isThumbnail) && (symbolType == 1?(symbolType = 6):symbolType == 2?(symbolType = 7):symbolType == 3?(symbolType = 8):symbolType == 4?(symbolType = 9):symbolType == 5 && (symbolType = 10));
    return symbolType;
  }
  return 0;
}

function $getThicknessOverride(value_0){
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    if ($equals_2(value_0, 'thick'))
      return 4;
    else if ($equals_2(value_0, 'medium'))
      return 2;
    else if ($equals_2(value_0, 'thin'))
      return 1;
  }
  return 0;
}

function $handlerSpecificHoverEffects_0(this$static, hoverData, rnd, seriesIndex){
  var obj, obj$iterator, sGraph;
  if ($hasInteractions(this$static.graph)) {
    if (!$isLineBar(this$static.graph)) {
      $clearAllGeArrays(this$static.sGraph);
      this$static.sGraph.currentHoverString = null;
    }
    sGraph = castTo(this$static.graph, 40);
    if (seriesIndex != -1) {
      this$static.drawAllLinesAndPoints(sGraph, -2);
      $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
      $drawLines(this$static, sGraph, castTo($get_2(this$static.graph.seriesShapes, seriesIndex), 19), false, seriesIndex);
      $clearInnerBoundsClip(this$static, false, false);
      $drawPoints(this$static, castTo($get_2(this$static.graph.seriesShapes, seriesIndex), 19), false);
      hoverData != null && instanceOf(hoverData, 28) && !!castTo(hoverData, 28).point?$addHoverPoint(this$static, castTo(hoverData, 28)):$clearHoverPoint(this$static);
      $drawHints_0(this$static, rnd, hoverData, seriesIndex);
    }
     else if (hoverData != null && instanceOf(hoverData, 42)) {
      for (obj$iterator = castTo(hoverData, 42).iterator(); obj$iterator.hasNext_0();) {
        obj = obj$iterator.next_1();
        $hoverEffectsForRowOfData(this$static, rnd, -1, sGraph, obj);
      }
    }
     else if (hoverData != null && instanceOf(hoverData, 7))
      $hoverEffectsForRowOfData(this$static, rnd, -1, sGraph, hoverData);
    else if (hoverData != null && instanceOf(hoverData, 87)) {
      $setHoverText_4(this$static, castTo(hoverData, 87).hoverText);
    }
     else {
      $clearHoverPoint(this$static);
      this$static.drawAllLinesAndPoints(sGraph, -1);
    }
    this$static.graph.drawAnnotations();
  }
}

function $hasMiddleGaps(fullLineInfo){
  var firstElementFound, firstGapFound, i, pt;
  firstElementFound = false;
  firstGapFound = false;
  for (i = 0; i < fullLineInfo.pointlist.array.length; i++) {
    pt = castTo($get_2(fullLineInfo.pointlist, i), 10);
    if (!!pt && !isNaN_0(pt.y_0) && !isNaN_0(pt.x_0)) {
      if (firstGapFound)
        return true;
      firstElementFound || (firstElementFound = true);
    }
     else {
      firstElementFound && !firstGapFound && (firstGapFound = true);
    }
  }
  return false;
}

function $hoverEffectsForRowOfData(this$static, rnd, seriesIndex, sGraph, obj){
  if (obj != null && instanceOf(obj, 7)) {
    this$static.drawAllLinesAndPoints(sGraph, -2);
    $addInnerBoundsClip(this$static, !this$static.graph.isThumbnail, false, false);
    $drawPointsForCategory(this$static, rnd, castTo(obj, 7));
    $clearInnerBoundsClip(this$static, false, false);
    $drawHints_0(this$static, rnd, obj, seriesIndex);
  }
}

function $pointInGraphBnds(this$static, point){
  var innerBnds, x_0, y_0;
  innerBnds = this$static.graph.getInnerBounds();
  x_0 = point.x_0;
  y_0 = point.y_0;
  return x_0 >= round_int(innerBnds.x_0) && x_0 <= $wnd.Math.ceil(innerBnds.x_0 + innerBnds.width_0) && y_0 >= round_int(innerBnds.y_0) && y_0 <= $wnd.Math.ceil(innerBnds.y_0 + innerBnds.height_0);
}

function $processChartOptions_7(this$static){
  var key, key$iterator, value_0;
  $processChartOptions_3(this$static);
  this$static.rangeMinVal = $intern_19;
  this$static.rangeMaxVal = $intern_20;
  this$static.rangeColor = new CFColor_2('#F4F4F4');
  if (this$static.graph.hasChartOptions()) {
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'line_thickness':
          this$static.lineThicknessOverride = $getThicknessOverride(value_0);
          break;
        case 'sm_min_val':
          this$static.rangeMinVal = getDouble_0(value_0, $intern_19);
          break;
        case 'sm_max_val':
          this$static.rangeMaxVal = getDouble_0(value_0, $intern_20);
          break;
        case 'mkr_color':
          this$static.rangeColor = $equalsIgnoreCase(value_0, 'blue')?$getColor(this$static.graph, 'LineScaleRangeBlue', '#F0FBFF'):$equalsIgnoreCase(value_0, 'green')?$getColor(this$static.graph, 'LineScaleRangeGreen', '#F4FFE4'):$getColor(this$static.graph, 'LineScaleRangeGray', '#F4F4F4');
          break;
        case 'mkr_show_lines':
          this$static.showRangeLines = isTrue(value_0);
          break;
        case 'mkr_fill_outlier':
          this$static.fillRangeOutliers = isTrue(value_0);
          break;
        case 'sm_fill_outliers':
          this$static.fillRangeOutliersNew = isTrue(value_0);
          break;
        case 'hide_empty_values':
          this$static.hideNullDataGaps = isTrue(value_0);
          this$static.fillRangeOutliers = !this$static.hideNullDataGaps;
          break;
        case 'hide_area_fill':
          this$static.hideSingleSeriesFill = isTrue(value_0);
          break;
        case 'show_running_total':
          this$static.showAsRunningTotal = isTrue(value_0);
          break;
        case 'bounds_fill_color':
          this$static.upperLowerRangeClr = $getColorForName(this$static.graph.colorMgr, value_0);
          break;
        case 'bounds_fill_trans_pct':
          this$static.upperLowerRangeAlpha = getFillTransparencyPct(value_0);
          break;
        case 'bounds2_fill_color':
          this$static.upperLowerRange2Clr = $getColorForName(this$static.graph.colorMgr, value_0);
          break;
        case 'bounds2_fill_trans_pct':
          this$static.upperLowerRange2Alpha = getFillTransparencyPct(value_0);
          break;
        case 'forecast_stroke_color':
          this$static.meanStrokeClr = $getColorForName(this$static.graph.colorMgr, value_0);
          break;
        case 'forecast2_stroke_color':
          this$static.meanStrokeClr2 = $getColorForName(this$static.graph.colorMgr, value_0);
          break;
        case 'outliers_above':
          this$static.outlierAboveVal = getDouble_0(value_0, NaN);
          break;
        case 'outliers_below':
          this$static.outlierBelowVal = getDouble_0(value_0, NaN);
          break;
        case 'line_style':
          value_0.toLowerCase().indexOf('curved') != -1 && (this$static.graph.typeAttributes.curvedLines = true);
          value_0.toLowerCase().indexOf('symbol') != -1 && (this$static.graph.typeAttributes.showSymbols = true);
          value_0.toLowerCase().indexOf('only') != -1 && (this$static.graph.typeAttributes.symbolsOnly = true);
          break;
        case 'starting_symbol':
          this$static.startingSymbolOffset = $getStartingSymbolOffset(value_0);
      }
    }
  }
  this$static.graph.typeAttributes.isPeriodOverPeriod && this$static.graph.typeAttributes.isPoPVariance && $setSecondaryScaleFormatting(this$static);
  this$static.graph.hasTimeScale() && this$static.graph.chart.version_0 < 6 && (this$static.hideNullDataGaps = true);
}

function $setData_5(this$static, data_0){
  var catScale, hasDisplayLimit, scale, scale$iterator, theData, theData_0;
  hasDisplayLimit = false;
  $chartOptionHasAValue(this$static.graph, 'outliers_above') && (this$static.outlierAboveVal = getDouble_0(this$static.graph.getChartOptionAsString('outliers_above'), NaN));
  $chartOptionHasAValue(this$static.graph, 'outliers_below') && (this$static.outlierBelowVal = getDouble_0(this$static.graph.getChartOptionAsString('outliers_below'), NaN));
  if ($isTrellis(this$static.graph)) {
    catScale = $getCategoryScale(this$static.sGraph);
    !!catScale && instanceOf(catScale, 36) && $setIsLineType(castTo(catScale, 36), false);
  }
  if (!isNaN_0(this$static.outlierAboveVal) || !isNaN_0(this$static.outlierBelowVal)) {
    $getNumCols(data_0);
    data_0 = $getOutlierDataGrid(this$static, data_0);
    $getNumCols(data_0);
  }
  theData = $limitDataSeries(this$static, data_0, $getMobileLimit(this$static.graph, 500, $intern_12));
  !!data_0 && data_0 != this$static.originalData && data_0 != this$static.graph.data_0 && $freeResources_11(data_0);
  $setData_1(this$static, theData);
  if (!theData || theData.numVisibleRows == 0 || theData.numVisibleCols == 0) {
    $addNoDataExistsMessage(this$static.graph);
    this$static.graph.setNeedsFormat(false);
    for (scale$iterator = new ArrayList$1(this$static.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      scale.isHidden = true;
    }
    return;
  }
  this$static.graph.getChartOptionAsString('num_forecast_items') != null && supportsForecastFromScale(this$static.sGraph, false) && !$hasADateTimeField(this$static.sGraph.data_0) && $setNumExtraProjectedItems(this$static.sGraph, getInt(this$static.graph.getChartOptionAsString('num_forecast_items'), 0));
  this$static.graph.getChartOptionAsString('display_limit') != null && (hasDisplayLimit = true);
  this$static.graph.hasChartOptions() && this$static.graph.getChartOptionAsString('hide_empty_values') != null && (this$static.hideNullDataGaps = isTrue(this$static.graph.getChartOptionAsString('hide_empty_values')));
  this$static.graph.hasChartOptions() && isTrue(this$static.graph.getChartOptionAsString('show_running_total')) && (this$static.showAsRunningTotal = true);
  $addExtraForecastItemsIfSpecified(this$static, theData, hasDisplayLimit);
  if (this$static.graph.typeAttributes.isRunningTotal || this$static.showAsRunningTotal) {
    $setNumRTPrimaryScale(this$static, $intern_12, true);
    $setNumRTSeriesFromOption(this$static);
    !this$static.currentViewDataGrid && (this$static.currentViewDataGrid = this$static.originalData);
    theData_0 = $clone(this$static.currentViewDataGrid);
    !!this$static.currentViewDataGrid && this$static.currentViewDataGrid != this$static.originalData && this$static.currentViewDataGrid != theData_0 && this$static.currentViewDataGrid != this$static.graph.data_0 && $freeResources_11(this$static.currentViewDataGrid);
    this$static.currentViewDataGrid = theData_0;
    this$static.sGraph.data_0 = this$static.currentViewDataGrid;
  }
  if (theData.isPeriodOverPeriod && $isLineOnly(this$static.graph)) {
    if (this$static.graph.typeAttributes.isPoPVariance) {
      theData.hasHiddenRows && $clearHiddenRowsAndResetRowCount(theData);
      $updateDataGridForVariance(this$static);
    }
  }
  theData.isPeriodOverPeriod && $isLineOnly(this$static.graph) && this$static.graph.typeAttributes.isPoPVariance && $addChartOption(this$static.graph, 'lines_on_left_scale', '' + (($getNumCols(this$static.currentViewDataGrid) / 2 | 0) + 1));
  $addOrRemoveSecondScale(this$static) && ($setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 0, 0, this$static.lineCount - 1) , $isGroupItemValue(this$static.sGraph.data_0)?$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, 0, 0):$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, this$static.lineCount, $getNumCols(this$static.sGraph.data_0)) , $updateNumberFormats_0(this$static.sGraph, false) , this$static.numberFormatHandled = true , undefined);
  theData.isPeriodOverPeriod && $isLineOnly(this$static.graph) && this$static.graph.typeAttributes.isPoPVariance && $setSecondaryScaleFormatting(this$static);
}

function $setHoverText_4(this$static, hoverData){
  var current, hoverLabel, labelPosition, numberFormatter, projInfo;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 28)) {
      current = castTo(hoverData, 28);
      if (!!current && !!current.point) {
        numberFormatter = $getHoverFormatterForCell(this$static.sGraph, current.cell);
        $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, numberFormatter, current.cell));
        $setHoverText(this$static.graph, current.hoverText);
        if (!$hasInteractions(this$static.graph) && !this$static.graph.rnd.supportsNativeHover()) {
          labelPosition = $getLabelPosition(this$static.sGraph.isHorizontal);
          if (instanceOf(hoverData, 28)) {
            current = castTo(hoverData, 28);
            !!current && !!current.point && $addPrimary_2(hoverLabel, this$static.graph.rnd, current.hoverText, current.point, labelPosition, false);
          }
        }
      }
    }
     else if (instanceOf(hoverData, 87)) {
      projInfo = castTo(hoverData, 87);
      $addPrimary_2(hoverLabel, this$static.graph.rnd, projInfo.hoverText, projInfo.drawPoint, projInfo.hoverPosition, false);
    }
  }
}

function $stripEndingNullsFromRunningTotal(col, numRows){
  var curCell, curIndex;
  curIndex = numRows - 1;
  curCell = castTo($get_1(col.cellMap, valueOf(curIndex)), 16);
  while (curIndex >= 0 && !!curCell && isNaN_0(curCell.value_0)) {
    curCell.altValue = NaN;
    --curIndex;
    curCell = castTo($get_1(col.cellMap, valueOf(curIndex)), 16);
  }
}

function HandlerLine(){
  HandlerScaleBase.call(this);
  this.meanStroke = new CFStroke_1('#00000050', 2);
  this.mean2Stroke = new CFStroke_1('#00000050', 2);
  this.upperLowerRangeDefaultClr = new CFColor_2('#90C4E450');
  this.upperLowerRange2DefaultClr = new CFColor_2('#90C4E450');
  this.outlierColor = new CFColor_2('#FB8D34');
}

defineClass(110, 64, $intern_42, HandlerLine);
_.allowSetDataObjectWhenUsingCardBus = function allowSetDataObjectWhenUsingCardBus_0(dataObject){
  if (dataObject != null && instanceOf(dataObject, 28) && !!castTo(dataObject, 28).pointlist)
    return false;
  return true;
}
;
_.calcMinMaxOverride = function calcMinMaxOverride_3(scale, curMin, curMax){
  var lengthPixels, ratio, scaleOffset;
  if (this.graph.typeAttributes.showSymbols || this.graph.typeAttributes.symbolsOnly) {
    lengthPixels = scale.getLength();
    ratio = (curMax - curMin) / lengthPixels;
    scaleOffset = 6 * ratio;
    return new MinMax(curMin - scaleOffset, curMax + scaleOffset);
  }
  return null;
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_7(sGraph, type_0, curTime, valueScale){
  $createDrawObjectsForFrame_2(this, sGraph, type_0, curTime, valueScale);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_9(sGraph, rows_0, baseScale, valScale, valScale2){
  $createSeriesInfoObjs(this, sGraph, rows_0, baseScale, valScale, valScale2);
}
;
_.drawAllLinesAndPoints = function drawAllLinesAndPoints(sGraph, index_0){
  $drawAllLinesAndPoints(this, sGraph, index_0);
}
;
_.drawDataLabel = function drawDataLabel_3(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  return $drawDataLabel_0(dataLabel, rnd, existingLableRects, shpInfo);
}
;
_.drawGridItems = function drawGridItems(){
  var minMaxScale;
  minMaxScale = castTo($getScaleByTypeNumber(this.sGraph, ST_MINMAX, 0), 67);
  this.graph.graphType == 3 || this.graph.graphType == 2?!!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo && $addMinMaxAvgLines(minMaxScale, castTo($get_2(this.graph.seriesShapes, 0), 19).fullSeriesInfo.stroke_0):this.graph.graphType != 12 && !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && !!this.graph.seriesShapes && this.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && $addMinMaxAvgLines(minMaxScale, new CFStroke(castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).fill_0.color_0, 1));
  $drawMultilineRange(this, this.sGraph);
}
;
_.drawLinePointFromSrsInfo = function drawLinePointFromSrsInfo(linePointInfo, previous, drawGray){
  var ge, shape_0;
  if ((!previous || !$sameRoundedPoint(linePointInfo.point, previous.point)) && $pointInGraphBnds(this, linePointInfo.point)) {
    ge = new GraphicElement;
    shape_0 = $getShape(linePointInfo, null, this.graph.getInnerBounds(), false, this.graph.typeAttributes.symbolsOnly || this.graph.graphType == 12 && !this.graph.typeAttributes.isXYLine);
    drawGray && $setFill(shape_0, ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
    if (this.graph.outlineStyle) {
      $setFill_0(shape_0, getOutlineFill(shape_0.fill_0));
      $setStroke(shape_0, getOutlineStroke(shape_0.fill_0, shape_0.stroke_0));
    }
    $addShape_0(ge, shape_0, linePointInfo);
    $addGraphicElement_0(this.graph, ge);
  }
}
;
_.freeResources = function freeResources_24(dataToKeep){
  $freeResources_20(this, dataToKeep);
}
;
_.getBackGEForAreaBelowLineShapes = function getBackGEForAreaBelowLineShapes(lineInfo, pathAry){
  var areaPath, fillColor, geArea;
  geArea = new GraphicElement;
  areaPath = $getAreaBelowLinePath(this, pathAry, 0);
  if (!this.fillBelowSingleLine) {
    fillColor = $duplicate_0(lineInfo.stroke_0.color_0);
    fillColor.alpha_0 = 16;
    this.fillBelowSingleLine = new CFFill(fillColor);
  }
  $addShape(geArea, new CFShape_0(areaPath, this.fillBelowSingleLine, null));
  return geArea;
}
;
_.getDrillFilter = function getDrillFilter_2(shapeInfo, clicked){
  return $getDrillFilter(shapeInfo);
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_2(legend, colInfo){
  return $getLegendItemInfoForSeries(this, legend, colInfo);
}
;
_.getPaddingX = function getPaddingX_2(){
  if (this.graph.treatAsSmall)
    return new CFDimension(1, 1);
  return new CFDimension(0, 0);
}
;
_.getPaddingY = function getPaddingY_2(){
  if (this.graph.treatAsSmall)
    return new CFDimension(1, 1);
  return new CFDimension(0, 0);
}
;
_.getSymbolTypeForSeriesNum = function getSymbolTypeForSeriesNum(srsNum){
  return $getSymbolTypeForSeriesNum(this, srsNum);
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_3(hoverData, rnd, seriesIndex){
  $handlerSpecificHoverEffects_0(this, hoverData, rnd, seriesIndex);
}
;
_.numberFormattingProcessed = function numberFormattingProcessed_2(){
  return this.numberFormatHandled;
}
;
_.processChartOptions = function processChartOptions_20(){
  $processChartOptions_7(this);
}
;
_.resetForTypeChange = function resetForTypeChange_11(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    $clearHiddenRows(this.originalData);
    $clearColumnsUsingSecondScale(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
   else 
    !!this.sGraph.data_0 && $clearColumnsUsingSecondScale(this.sGraph.data_0);
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_19(data_0){
  $setData_5(this, data_0);
}
;
_.setHoverText = function setHoverText_3(hoverData){
  $setHoverText_4(this, hoverData);
}
;
_.fillRangeOutliers = false;
_.fillRangeOutliersNew = false;
_.hideNullDataGaps = false;
_.hideSingleSeriesFill = false;
_.lineThicknessOverride = 0;
_.lineWidth_0 = 2;
_.lineWidthOverride = 0;
_.numberFormatHandled = false;
_.outlierAboveVal = NaN;
_.outlierBelowVal = NaN;
_.pointDiameter = 6;
_.rangeMaxVal = 0;
_.rangeMinVal = 0;
_.showAsRunningTotal = false;
_.showRangeLines = false;
_.startingSymbolOffset = 0;
_.upperLowerRange2Alpha = 255;
_.upperLowerRangeAlpha = 255;
var Lcom_domo_charting_graphs_HandlerLine_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerLine', 110);
function $getMinimumTicksBetweenBars_0(this$static, numRows){
  return $getMinimumTicksBetweenBars(this$static.barHandler, numRows);
}

function $setNumRTBars(this$static, numRTBars){
  var barCount, col, i;
  if (numRTBars > 0) {
    barCount = 0;
    for (i = 0; i < $getNumCols(this$static.graph.data_0); i++) {
      col = $getColumn(this$static.graph.data_0, i);
      if (col.usesSecondaryScale) {
        if (barCount < numRTBars) {
          col.isRunningTotal = true;
          ++barCount;
        }
         else {
          break;
        }
      }
    }
  }
}

function $setupLineAndBarSeriesInfo(this$static){
  var lineCount, setLineCountVal, setSymCountVal, symCount;
  $setPrimaryScaleCount(this$static, 1);
  if (this$static.graph.hasChartOptions()) {
    setLineCountVal = this$static.graph.getChartOptionAsString('set_line_count');
    setLineCountVal == null && (setLineCountVal = this$static.graph.getChartOptionAsString('set_top_scale_count'));
    this$static.graph.typeAttributes.isPeriodOverPeriod && this$static.graph.typeAttributes.isPoPVariance && (setLineCountVal = this$static.graph.getChartOptionAsString('set_line_count_pop_var'));
    if (setLineCountVal != null) {
      lineCount = getInt(setLineCountVal, 1);
      $setPrimaryScaleCount(this$static, lineCount);
    }
    setSymCountVal = this$static.graph.getChartOptionAsString('set_sym_series_count');
    if (setSymCountVal != null) {
      symCount = getInt(setSymCountVal, 1);
      $setPrimaryScaleCount(this$static, symCount);
    }
  }
  $setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 0, 0, this$static.lineCount - 1);
  this$static.sGraph.typeAttributes.isPeriodOverPeriod && !this$static.sGraph.typeAttributes.isPoPVariance?$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, 0, $getNumCols(this$static.sGraph.data_0)):$setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 1, this$static.lineCount, $getNumCols(this$static.sGraph.data_0));
  $updateNumberFormats_0(this$static.sGraph, false);
}

function HandlerLineBar(){
  HandlerScaleBase.call(this);
  this.lineHandler = new HandlerLine;
}

defineClass(111, 64, {111:1, 64:1}, HandlerLineBar);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_9(chart){
  this.graph.graphType != 26 && $addLegendsOrSubComponents_0(this, chart);
}
;
_.calcMinMaxOverride = function calcMinMaxOverride_4(scale, curMin, curMax){
  if (this.graph.graphType == 26 && scale.type_0 == 0) {
    if (this.paretoBarsBelowLine && !scale.isSecondary)
      return new MinMax(0, $getSum($getColumn(this.graph.data_0, 0)));
    return new MinMax(0, curMax);
  }
  return null;
}
;
_.drawDataLabel = function drawDataLabel_4(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  if (shpInfo) {
    if (instanceOf(shpInfo, 28) && (!this.graph.typeAttributes.isNestedBar || this.graph.getChartOptionAsString('datalabel_text') != null))
      return $drawDataLabel_0(dataLabel, rnd, existingLableRects, shpInfo);
    else if (instanceOf(shpInfo, 25))
      return this.barHandler.drawDataLabel(dataLabel, rnd, existingLableRects, shpInfo, null);
  }
  return false;
}
;
_.format_0 = function format_16(rnd){
  var baseScale, rows_0, sGraph, valueScale, valueScale2;
  sGraph = castTo(this.graph, 40);
  if (!this.graph.data_0 || $getNumRows(this.graph.data_0) == 0)
    return;
  this.graph.graphType == 26 && (this.graph.supportsDrag = false , undefined);
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  valueScale = $getValueScale(sGraph);
  baseScale = $getCategoryScale(sGraph);
  valueScale2 = $getScaleByTypeNumber(sGraph, 0, 1);
  !!valueScale && instanceOf(valueScale, 27) && (castTo(valueScale, 27).hoverUseScaleFormat = true);
  !!valueScale2 && instanceOf(valueScale2, 27) && (castTo(valueScale2, 27).hoverUseScaleFormat = true);
  rows_0 = null;
  !!baseScale && (rows_0 = baseScale.rowsToDisplay);
  if (this.barsOnLeftScale) {
    this.barHandler.createSeriesInfoObjs(sGraph, rows_0, baseScale, valueScale, null);
    $createSeriesInfoObjs(this.lineHandler, sGraph, rows_0, baseScale, null, valueScale2);
  }
   else {
    this.barHandler.createSeriesInfoObjs(sGraph, rows_0, baseScale, null, valueScale2);
    $createSeriesInfoObjs(this.lineHandler, sGraph, rows_0, baseScale, valueScale, null);
  }
  !!this.graph.dataLabel && $drawDataLabels(this.graph.dataLabel, rnd, false);
  this.graph.setNeedsFormat(false);
}
;
_.freeResources = function freeResources_25(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.sGraph = null;
  !!this.barHandler && this.barHandler.freeResources(dataToKeep);
  this.barHandler = null;
  !!this.lineHandler && $freeResources_20(this.lineHandler, dataToKeep);
  this.lineHandler = null;
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems_2(){
  return $getAdditionalLegendItems_0(this.barHandler);
}
;
_.getDrillFilter = function getDrillFilter_3(shapeInfo, clicked){
  if (instanceOf(shapeInfo, 28))
    return $getDrillFilter(shapeInfo);
  else if (instanceOf(shapeInfo, 25))
    return this.barHandler.getDrillFilter(shapeInfo, clicked);
  return null;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_3(legend, colInfo){
  if (!colInfo.usesSecondaryScale && !this.barsOnLeftScale || colInfo.usesSecondaryScale && this.barsOnLeftScale) {
    return $getLegendItemInfoForSeries(this.lineHandler, legend, colInfo);
  }
  return null;
}
;
_.getPaddingX = function getPaddingX_3(){
  if (this.graph.treatAsSmall) {
    if (this.graph.typeAttributes.isDotPlot)
      return new CFDimension(1, 3);
    return new CFDimension(1, 1);
  }
  return new CFDimension(0, 0);
}
;
_.getPaddingY = function getPaddingY_3(){
  if (this.graph.treatAsSmall) {
    if (this.graph.typeAttributes.isDotPlot)
      return new CFDimension(3, 1);
    return new CFDimension(1, 1);
  }
  return new CFDimension(0, 0);
}
;
_.getValueScaleForCell = function getValueScaleForCell_0(cell){
  if (this.graph.typeAttributes.isNestedBar) {
    if (!!cell && !cell.column) {
      return this.barsOnLeftScale?$getValueScaleByNumber(this.sGraph, 0):$getValueScaleByNumber(this.sGraph, 1);
    }
  }
  return null;
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_4(hoverData, rnd, seriesIndex){
  $setHoverText(this.graph, null);
  if ($hasInteractions(this.graph)) {
    $clearAllGeArrays(this.sGraph);
    this.barHandler.handlerSpecificHoverEffects(hoverData, rnd, seriesIndex);
    $handlerSpecificHoverEffects_0(this.lineHandler, hoverData, rnd, seriesIndex);
  }
}
;
_.handlerSpecificHoverTextOnly = function handlerSpecificHoverTextOnly_0(hoverData){
  var cell, sli;
  if (instanceOf(hoverData, 28)) {
    if (this.graph.graphType == 26) {
      $getOrCreateHoverLabel(this.graph);
      cell = castTo(hoverData, 18).cell;
      $setFormatString(this.graph.hoverLabel, $getHoverLabelTextForCell(this.sGraph, cell, this.graph.hoverLabel.formatString));
      sli = castTo(hoverData, 28);
      $setHoverText_7(sli, $getFormattedHoverText_0(this.graph.hoverLabel, $getHoverFormatterForCell(this.sGraph, sli.cell), sli.cell));
      $setHoverText(this.graph, sli.hoverText);
    }
     else {
      $setHoverText_4(this.lineHandler, hoverData);
    }
  }
   else 
    $setHoverText_1(this.barHandler, hoverData);
}
;
_.numberFormattingProcessed = function numberFormattingProcessed_3(){
  return true;
}
;
_.processChartOptions = function processChartOptions_21(){
  var dl, dlShowOption, key, key$iterator, secondScale, value_0, valueScale, valueScale2;
  $setDataLabelUseScaleFormat(this, 'true');
  if (this.graph.graphType == 26) {
    $removeGoalScaleMarker(this.sGraph);
    this.graph.hoverLabelText = '%_CATEGORY_NAME : %_VALUE : %_PERCENT_OF_TOTAL';
    $setChartOptionOverride(this.graph.colorMgr);
    valueScale2 = castTo($getScaleByTypeNumber(this.sGraph, 0, 1), 27);
    valueScale2.hoverLabelTextOverride = '%_CATEGORY_NAME: %_VALUE';
    dlShowOption = this.graph.getChartOptionAsString('show_data_label');
    if (dlShowOption != null && ($equalsIgnoreCase(dlShowOption, 'always') || $equalsIgnoreCase(dlShowOption, 'always - rotated'))) {
      this.graph.dataLabelText = '%_VALUE';
      dl = $getOrCreateDataLabel(this.graph);
      $equalsIgnoreCase(dlShowOption, 'always - rotated') && (dl.rotated = true);
    }
  }
  $processChartOptions_3(this);
  this.graph.typeAttributes.percentOfCategoryData && $forceScaleToPercent(this, false);
  if (this.graph.graphType == 26) {
    valueScale = $getValueScaleByNumber(this.sGraph, 1);
    $applyValueFormatOverride(valueScale.numberFormatter, 'percentage');
    $setMultiplyBy100(valueScale.numberFormatter, true);
    this.barsOnLeftScale = true;
  }
   else 
    this.graph.graphType == 30 || this.graph.graphType == 31?(this.barsOnLeftScale = true):(this.barsOnLeftScale = false);
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'line_style':
          value_0.toLowerCase().indexOf('curved') != -1 && (this.graph.typeAttributes.curvedLines = true);
          value_0.toLowerCase().indexOf('symbol') != -1 && (this.graph.typeAttributes.showSymbols = true);
          value_0.toLowerCase().indexOf('only') != -1 && (this.graph.typeAttributes.symbolsOnly = true);
          break;
        case 'hide_second_scale':
          secondScale = $getValueScaleByNumber(this.sGraph, 1);
          !!secondScale && $setHiddenLabels(secondScale, isTrue(value_0));
          break;
        case 'starting_symbol':
          this.lineHandler.startingSymbolOffset = $getStartingSymbolOffset(value_0);
      }
    }
    if (this.barHandler.graph.typeAttributes.isNestedBar) {
      this.barHandler.showNestedGroupDatalabel = isTrue(this.graph.getChartOptionAsString('datalabel_show_group_total'));
      if (this.barHandler.showNestedGroupDatalabel && this.barHandler.graph.getChartOptionAsString('datalabel_text') == null) {
        $getOrCreateDataLabel(this.graph);
        this.graph.dataLabel.formatString = '%_VALUE';
      }
    }
  }
  this.barHandler.suppressHints = this.suppressHints;
  this.barHandler.tooltipHints = this.tooltipHints;
  this.lineHandler.suppressHints = this.suppressHints;
  this.lineHandler.tooltipHints = this.tooltipHints;
  this.graph.typeAttributes.isPeriodOverPeriod && this.graph.typeAttributes.isPoPVariance && $setSecondaryScaleFormatting(this);
  if (this.paretoBarsBelowLine) {
    valueScale = $getValueScale(this.sGraph);
    instanceOf(valueScale, 27) && (castTo(valueScale, 27).useCleanBoundaries = false);
  }
}
;
_.resetForTypeChange = function resetForTypeChange_12(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    $clearHiddenRows(this.originalData);
    $clearColumnsUsingSecondScale(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
   else 
    !!this.sGraph.data_0 && $clearColumnsUsingSecondScale(this.sGraph.data_0);
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_20(data_0){
  var cell, hasRTSeries, key, key$iterator, newCol, numLineSeries, numRTBars, numRTLines, rowIndex, rowInfo, rowInfo$iterator, secondValScale, totalPctOfCol, value_0, theData;
  data_0 = $limitDataSeries(this, data_0, $getMobileLimit(this.graph, 250, $intern_36));
  if (this.graph.typeAttributes.isPoPVariance) {
    data_0.hasHiddenRows && $clearHiddenRowsAndResetRowCount(data_0);
    $updateDataGridForVariance(this);
    $setSecondaryScaleFormatting(this);
    data_0.isPeriodOverPeriod?$addChartOption(this.graph, 'set_line_count_pop_var', '' + (($getNumCols(this.currentViewDataGrid) / 2 | 0) + 1)):$addChartOption(this.graph, 'set_line_count', '' + (($getNumCols(this.currentViewDataGrid) / 2 | 0) + 1));
  }
  $setupLineAndBarSeriesInfo(this);
  if (this.graph.typeAttributes.percentOfCategoryData) {
    $clearAlternateValues_0(data_0);
    numLineSeries = this.lineCount;
    numLineSeries == 0 && (numLineSeries = 1);
    $setToPercentOfCategoryComboValues(data_0, numLineSeries);
  }
  hasRTSeries = false;
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'num_rt_lines':
          numRTLines = getInt(value_0, 0);
          if (numRTLines > 0) {
            $setNumRTPrimaryScale(this, numRTLines, false);
            hasRTSeries = true;
          }

          break;
        case 'num_rt_bars':
          numRTBars = getInt(value_0, 0);
          if (numRTBars > 0) {
            $setNumRTBars(this, numRTBars);
            hasRTSeries = true;
          }

      }
    }
  }
  $setData_1(this, data_0);
  if (this.graph.graphType == 26) {
    this.barsOnLeftScale = true;
    $removeChartOption(this.graph, 'total_sort');
    $sortRowsDesc(data_0, 0, false);
    $sortRowsDesc(data_0, SORT_SUM, false);
    if (data_0.numVisibleCols < 2) {
      newCol = new ColRowInfo_2('Percentage', 'DOUBLE');
      newCol.isCalculated = true;
      totalPctOfCol = 0;
      rowIndex = 0;
      for (rowInfo$iterator = data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
        rowInfo = castTo(rowInfo$iterator.next_1(), 7);
        totalPctOfCol += $getPctOfColValue($getFirstCell(rowInfo));
        cell = new Cell(totalPctOfCol);
        $addItem_0(newCol, cell, false, rowIndex);
        $addItem_0(rowInfo, cell, true, $getNumCols(data_0));
        ++rowIndex;
      }
      newCol.usesSecondaryScale = true;
      data_0.cols_0.add_0(newCol);
      $setRows(data_0, data_0.rows_0);
      $setCols(data_0, data_0.cols_0);
    }
  }
   else if (this.graph.graphType == 30 || this.graph.graphType == 31) {
    this.barsOnLeftScale = true;
  }
   else if (hasRTSeries) {
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone(this.currentViewDataGrid);
    !!this.currentViewDataGrid && this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.sGraph.data_0 = this.currentViewDataGrid;
  }
  if ($getNumCols(data_0) == 1) {
    secondValScale = $getValueScaleByNumber(this.sGraph, 1);
    secondValScale.hideLabels = true;
  }
}
;
_.setFrame = function setFrame_13(type_0, easingType, startTime, curTime, endTime, rnd){
  var valueScale, valueScale2;
  if (this.graph.seriesShapes.array.length > 0) {
    $isAnimInfoNull(this) && $setUpAnimInfoFirstTime(this, type_0, easingType, startTime, endTime);
    $removeItemsFromDrawArray(this);
    valueScale = $getValueScale(this.sGraph);
    valueScale2 = $getScaleByTypeNumber(this.sGraph, 0, 1);
    this.barHandler.createDrawObjectsForFrame(this.sGraph, type_0, curTime, valueScale2);
    $createDrawObjectsForFrame_2(this.lineHandler, this.sGraph, type_0, curTime, valueScale);
    if (compare_22(curTime, endTime) >= 0) {
      $hasDataLabels(this.graph) && $drawDataLabels(this.graph.dataLabel, rnd, false);
      $hasAnnotations(this.graph) && this.graph.drawAnnotations();
    }
  }
}
;
_.setGraph = function setGraph_1(graph){
  this.graph = graph;
  graph.typeAttributes.isGroupedStacked?(this.barHandler = new HandlerGroupedStacked):graph.typeAttributes.isStacked?(this.barHandler = new HandlerStackedBar):(this.barHandler = new HandlerBar);
  this.sGraph = castTo(graph, 40);
  $setGraph_0(this.barHandler, graph);
  $setGraph_0(this.lineHandler, graph);
}
;
_.barHandler = null;
_.barsOnLeftScale = false;
_.paretoBarsBelowLine = false;
var Lcom_domo_charting_graphs_HandlerLineBar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerLineBar', 111);
function $clearSeriesDatalabels(this$static){
  var ge, ge$iterator;
  for (ge$iterator = new ArrayList$1(this$static.seriesDataLabels); ge$iterator.i < ge$iterator.this$01.array.length;) {
    ge = castTo($next_3(ge$iterator), 12);
    this$static.graph.frontGeAry.remove(ge);
  }
  this$static.seriesDataLabels.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}

function $getSrsInfoByColumn(this$static, col){
  var srsInfo, srsInfo$iterator;
  if (this$static.graph.seriesShapes) {
    for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 19);
      if (!!srsInfo && !!srsInfo.srsShapeList && srsInfo.srsShapeList.array.length > 0 && !!castTo($get_2(srsInfo.srsShapeList, 0), 18).cell && castTo($get_2(srsInfo.srsShapeList, 0), 18).cell.column == col)
        return srsInfo;
    }
  }
  return null;
}

function $setNeedsFormat_0(this$static, value_0){
  if (value_0 && !!this$static.graph.data_0) {
    $clearAlternateValues_0(this$static.graph.data_0);
    $resetTotalsAndSums(this$static.graph.data_0);
    $recalcRowSums(this$static.graph.data_0);
    $getGridTotal(this$static.graph.data_0);
  }
}

function $showDatalabelsForSeries(this$static, data_0, rnd){
  var existingLabelRects, ge, i, itemsOnFront, srsInfo;
  existingLabelRects = new ArrayList;
  itemsOnFront = this$static.graph.frontGeAry.size_1();
  if (instanceOf(data_0, 37)) {
    castTo(data_0, 37).type_0 == 13?(srsInfo = $getSingleUseSeriesInfoForConditionalRuleHoverHints(this$static, data_0)):(srsInfo = $getSrsInfoByColumn(this$static, castTo(data_0, 37).colInfo));
    !!srsInfo && $drawDatalabelsForASeries(this$static.graph.dataLabel, rnd, true, existingLabelRects, srsInfo, data_0);
  }
   else if (instanceOf(data_0, 25)) {
    srsInfo = $getSrsInfoByColumn(this$static, castTo(data_0, 25).cell.column);
    $drawDatalabelsForASeries(this$static.graph.dataLabel, rnd, true, existingLabelRects, srsInfo, null);
  }
  if (this$static.graph.frontGeAry.size_1() > itemsOnFront) {
    for (i = itemsOnFront; i < this$static.graph.frontGeAry.size_1(); i++) {
      ge = castTo(this$static.graph.frontGeAry.get_1(i), 12);
      $add_1(this$static.seriesDataLabels, ge);
      $remove_3(this$static.graph.dataLabel.labels, ge);
    }
  }
}

function HandlerMarimekko(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
  this.seriesDataLabels = new ArrayList;
}

defineClass(162, 60, {60:1, 162:1, 64:1}, HandlerMarimekko);
_.calcMinMaxOverride = function calcMinMaxOverride_5(scale, curMin, curMax){
  return new MinMax(0, 100);
}
;
_.closeZoomInFilter = function closeZoomInFilter_2(){
  $clearHiddenRows(this.graph.data_0);
  return false;
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_10(sGraph, rows_0, baseScale, valScale, valScale2){
  var barIndex, barInfo, barList, barRect, catScalePos, cell, curBarWidth, curCol, curIndex, curRow, fill, fillToUse, gridTotal, hasFilteredData, i, inShowAsFilteredMode, isLogScale, lastNonNullState, lastState, lengthTotal, minCatPos, minMaxScale, minValuePos, numCols, numRows, origRect, origRectOffset, rects, reverseRowMap, rowIndex, rowMap, rowWidthPct, rowstoDisplay, showAsFiltered, srsInfo, stackedPosAry, stackedPosAryNegative, stackedPosAryPositive, stroke, value_0, valueScale, valueScalePos, zeroValuePos;
  if (!rows_0)
    return;
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && (this.graph.data_0.hasFilteredCols || this.graph.data_0.hasFilteredRows);
  this.graph.dataLabelText != null && this.graph.dataLabelText.length > 0 && (this.suppressHints = true);
  if (this.graph.dataLabel) {
    this.graph.dataLabel.showOneLabel = false;
    this.graph.dataLabel.position = 3;
  }
  gridTotal = $getGridTotal(this.graph.data_0);
  $setToPercentOfCategoryValues(this.graph.data_0);
  numCols = this.graph.data_0.numVisibleCols;
  numRows = rows_0.size_1();
  rowMap = buildRowMap(rows_0);
  reverseRowMap = buildReverseRowMap(rows_0);
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  this.graph.typeAttributes.percentOfSeriesData && (minMaxScale = null);
  minCatPos = baseScale.getMinPosition();
  stackedPosAryPositive = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  stackedPosAryNegative = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  barIndex = 0;
  lengthTotal = baseScale.getLength();
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    rects = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
    valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (valueScale) {
      rowstoDisplay = getRowsToDisplay(rowMap, rows_0, curCol);
      isLogScale = instanceOf(valueScale, 73);
      minValuePos = valueScale.getMinPosition();
      zeroValuePos = 0;
      isLogScale || (zeroValuePos = valueScale.getPositionForValue(0));
      barList = new ArrayList;
      fill = new CFFill($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex));
      lastNonNullState = null;
      for (i = 0; i < rowstoDisplay.size_1(); i++) {
        curRow = castTo(rowstoDisplay.get_1(i), 7);
        if (!curRow)
          continue;
        rowIndex = castTo(getEntryValueOrNull($getEntry(reverseRowMap.hashCodeMap, curRow)), 29).value_0;
        curIndex = rowIndex;
        instanceOf(baseScale, 56) && (curIndex = curRow.curIndex);
        rowWidthPct = (isNaN_0(curRow.origSum) && (curRow.origSum = $calcSum(curRow, false, false, false)) , curRow.origSum / gridTotal);
        cell = $getCell(this.graph.data_0, curRow.curIndex, curCol.curIndex);
        value_0 = $getCellValueForGraphType(this, cell);
        if (!isNaN(value_0)) {
          stackedPosAry = stackedPosAryPositive;
          value_0 < 0 && (stackedPosAry = stackedPosAryNegative);
          catScalePos = baseScale.getPositionForValue(curIndex);
          valueScalePos = valueScale.getPositionForValue(value_0);
          curBarWidth = lengthTotal * rowWidthPct;
          barRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, curBarWidth);
          origRectOffset = null;
          if (numCols > 1 && !this.graph.typeAttributes.isSymbolOverlay) {
            origRect = new CFRect(barRect.x_0, barRect.y_0, barRect.width_0, barRect.height_0);
            barRect = $adjustForMultiColumn(this, barRect, numCols, barIndex, stackedPosAry[rowIndex], value_0);
            this.graph.typeAttributes.isStacked && !this.graph.typeAttributes.isNestedBar && (origRectOffset = new CFPoint(origRect.x_0 - barRect.x_0, origRect.y_0 - barRect.y_0));
          }
          stackedPosAry[rowIndex] = barRect;
          rects[rowIndex] = barRect;
          lastState = $getLastShapeForCell(this.sGraph, cell, false);
          !!lastState && (lastNonNullState = lastState);
          !lastState && (lastState = lastNonNullState);
          stroke = new CFStroke(($clinit_CFColor() , WHITE), 1);
          fillToUse = $getColorForCellValueSeriesName(this.graph, cell, this.graph.data_0.valueColumnName, fill);
          showAsFiltered = inShowAsFilteredMode && (curCol.showAsFiltered || curRow.showAsFiltered);
          showAsFiltered && (fillToUse = new CFFill($deSaturateAndLighten(fillToUse.color_0, 0.9, 0.4)));
          barInfo = new SrsBarInfo_1(this, cell, barRect, origRectOffset, fillToUse, stroke, -1, lastState);
          inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (barInfo.highlightAlways = true);
          barList.array[barList.array.length] = barInfo;
        }
      }
      ++barIndex;
      if (barList.array.length > 0) {
        srsInfo = new SeriesInfo(barList, null);
        $addRegressionAndProjectionDataToSrsInfo(this, minMaxScale, valueScale, curCol, srsInfo);
        $add_1(this.graph.seriesShapes, srsInfo);
      }
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  !!minMaxScale && $showMinMaxAvgLines(minMaxScale) && $calcMinMaxAvgPositions(minMaxScale);
  $drawAllBars(this, -1, null);
}
;
_.drawDataLabel = function drawDataLabel_5(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var font, labelColor, srsColor;
  if (!!shpInfo && instanceOf(shpInfo, 25) && !dataLabel.showBackground) {
    srsColor = shpInfo.fill_0.color_0;
    labelColor = $getLabelColorForSeriesColor(this.graph.colorMgr, srsColor);
    font = $duplicate_2(dataLabel.font_0);
    font.color_0 = labelColor;
    dataLabel.font_0 = font;
  }
  return $drawDataLabel(this, dataLabel, rnd, existingLableRects, shpInfo, data_0);
}
;
_.freeResources = function freeResources_26(dataToKeep){
  $freeResources_18(this, dataToKeep);
  this.seriesDataLabels = null;
}
;
_.processChartOptions = function processChartOptions_22(){
  $processChartOptions_4(this);
  !!this.graph.dataLabel && this.graph.dataLabel.position == 0 && (this.graph.dataLabel.position = 3);
}
;
_.setData = function setData_21(data_0){
  $setNeedsFormat_0(this, true);
  $setData_2(this, data_0);
  $resetTotalsAndSums(this.graph.data_0);
  $clearAlternateValues_0(this.graph.data_0);
}
;
_.setHoverData = function setHoverData_18(data_0, rnd){
  var redrawNeeded;
  if (maskUndefined(data_0) !== maskUndefined(this.hoverData)) {
    !!this.seriesDataLabels && this.seriesDataLabels.array.length > 0 && $clearSeriesDatalabels(this);
    redrawNeeded = $setHoverData_0(this, data_0, rnd);
    data_0 == null || instanceOf(data_0, 53)?$showDataLabels_0(this.graph):$showDatalabelsForSeries(this, data_0, rnd);
  }
   else {
    redrawNeeded = $setHoverData_0(this, data_0, rnd);
  }
  return redrawNeeded;
}
;
_.setNeedsFormat = function setNeedsFormat_4(value_0){
  $setNeedsFormat_0(this, value_0);
}
;
var Lcom_domo_charting_graphs_HandlerMarimekko_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerMarimekko', 162);
function $drawAllPieSlices(this$static, rnd){
  var dlShapes, ge, item_0, item$index, item$max, lblFont, otherEncountered, shape_0, slice_0, srsInfo, srsInfo$iterator;
  lblFont = $duplicate_2(this$static.labelFont);
  this$static.fixedFontLabelSize || (lblFont = this$static.getFontForLabels(rnd));
  this$static.graph.geAry.clear_0();
  $resetTotalsAndSums(this$static.graph.data_0);
  otherEncountered = false;
  for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 18);
    slice_0 = castTo(srsInfo, 71);
    ge = new GraphicElement;
    shape_0 = $getShapePct_2(slice_0, 'none', 1, null);
    if (shape_0) {
      $addShape_0(ge, shape_0, srsInfo);
      if (!otherEncountered) {
        dlShapes = this$static.getDataLabelForSlice(rnd, slice_0, shape_0, lblFont);
        if (dlShapes != null) {
          for (item$index = 0 , item$max = dlShapes.length; item$index < item$max; ++item$index) {
            item_0 = dlShapes[item$index];
            !ge.textAry && (ge.textAry = new ArrayList);
            $add_1(ge.textAry, item_0);
          }
        }
        slice_0.isOtherSlice && (otherEncountered = true);
      }
    }
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $getLastState_0(this$static, cell, index_0){
  var sd, stroke;
  if (!this$static.graph.lastShapes)
    return null;
  if (this$static.sorted) {
    if (index_0 < castTo($get_2(this$static.graph.lastShapes, 0), 19).srsShapeList.array.length)
      return castTo($get_2(castTo($get_2(this$static.graph.lastShapes, 0), 19).srsShapeList, index_0), 18);
    else {
      stroke = new CFStroke(new CFColor(255, 255, 255), 1);
      stroke.join_0 = 1;
      sd = new SrsSliceInfo(this$static, cell, 270, 270, new CFFill(($clinit_CFColor() , BLACK)), stroke, null);
      return sd;
    }
  }
   else {
    return $getLastShapeForCell(this$static.graph, cell, false);
  }
}

function $getMaxVisibleValue(this$static, showingOther){
  var cell, curRow, maxValue, otherValue;
  maxValue = $intern_20;
  curRow = $getFirstVisibleRow(this$static.graph.data_0);
  while (curRow) {
    cell = $getCell(this$static.graph.data_0, curRow.origIndex, this$static.graph.currentColumn);
    !!cell && !isNaN_0($getValue(cell)) && $getValue(cell) > maxValue && (maxValue = $getValue(cell));
    curRow = $getNextVisibleRow(this$static.graph.data_0, curRow);
  }
  if (showingOther) {
    otherValue = $getOtherValue(this$static.graph.data_0, this$static.slicesBeforeOther, this$static.graph.currentColumn);
    otherValue > maxValue && (maxValue = otherValue);
  }
  return maxValue;
}

function $processChartOptions_8(this$static){
  var key, key$iterator, leg, value_0;
  this$static.graph.hoverLabelText = '%_CATEGORY_NAME : %_ORIG_VALUE : %_ORIG_PERCENT_OF_TOTAL';
  if (this$static.graph.hasChartOptions()) {
    $convertDatalabelAndHoverMacros(this$static.graph, '%_VALUE', '%_ORIG_VALUE');
    leg = $getLegend(this$static.graph);
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'outline_style':
          this$static.graph.outlineStyle = isTrue(value_0);
          break;
        case 'hide_pie_labels':
          this$static.showDataLabels = isFalse(value_0);
          break;
        case 'unsorted_data':
          this$static.sorted = isFalse(value_0);
          break;
        case 'max_before_other':
          this$static.setItemsBeforeOther(getInt(value_0, 12));
          break;
        case 'legend_value':
          if (!!leg && value_0 != null && value_0.toLowerCase().indexOf('and') != -1) {
            castTo(leg, 65).valueDisplayType = 1;
            $setShowPercentOfTotal(castTo(leg, 65), this$static.showPercentInLegend);
          }
           else if (!!leg && value_0 != null && value_0.toLowerCase().indexOf('label') != -1) {
            castTo(leg, 65).valueDisplayType = 2;
          }
           else {
            this$static.showPercentInLegend = $equals_2(value_0, 'Percentage');
            !!leg && $setShowPercentOfTotal(castTo(leg, 65), this$static.showPercentInLegend);
          }

          break;
        case 'show_value_and_pct':
          this$static.showPercentInLegend = $equals_2(value_0, 'Percentage');
          !!leg && isTrue(value_0) && (castTo(leg, 65).valueDisplayType = 1);
          break;
        case 'decimal_places':
          $applyDecimalPlaces(this$static.graph.numberFormatter, value_0);
          this$static.graph.updateNumberFormats(false);
          break;
        case 'pv_decimal_places':
          $applyPercentDecimalPlaces(this$static.graph.numberFormatter, value_0);
          $applyPercentDecimalPlaces(this$static.graph.dataLabelNumberFormatter, value_0);
          break;
        case 'abbrev_values':
          this$static.abbreviateValues = isTrue(value_0);
          break;
        case 'hide_hover_legend':
          this$static.hideHoverLegend = isTrue(value_0);
          break;
        case 'label_font_size':
          this$static.setDLFontSize(value_0);
      }
    }
  }
}

function $setHoverData_2(this$static, data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this$static.hoverData) !== maskUndefined(data_0)) {
    this$static.hoverData = data_0;
    redrawNeeded = this$static.setHoverEffects_0(this$static.hoverData, rnd);
  }
  return redrawNeeded;
}

function $showElementInNormalColor_1(this$static, ge, dataObj){
  var labelColor, labelFont, objIndex, pieWedge, sd, shapeAry, srsColor, ti, ti$iterator;
  objIndex = $indexOf_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, dataObj, 0);
  sd = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, objIndex), 18);
  shapeAry = ge.shapeAry;
  pieWedge = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
  $setFill_0(pieWedge, sd.fill_0);
  this$static.graph.outlineStyle?$setStroke(pieWedge, getOutlineStroke(sd.fill_0, null)):(pieWedge.stroke_0 = null);
  if (!!ge.textAry && ge.textAry.array.length >= 1) {
    srsColor = sd.fill_0.color_0;
    labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, srsColor);
    this$static.graph.outlineStyle && !!this$static.graph.chart && !!$getTextColor(this$static.graph.chart.palette) && (labelColor = $getTextColor(this$static.graph.chart.palette));
    for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      labelFont = ti.font_0;
      labelFont.color_0 = labelColor;
    }
  }
}

function $updateDataGrid_0(this$static){
  var theData;
  !this$static.currentViewDataGrid && (this$static.currentViewDataGrid = this$static.originalData);
  theData = $clone(this$static.currentViewDataGrid);
  this$static.currentViewDataGrid != this$static.originalData && this$static.currentViewDataGrid != theData && this$static.currentViewDataGrid != this$static.graph.data_0 && $freeResources_11(this$static.currentViewDataGrid);
  this$static.currentViewDataGrid = theData;
  if (this$static.graph.typeAttributes.isPopPlay && $getMetaDataSize(this$static.currentViewDataGrid) > 0 && $getName($getMetadataInfo(this$static.currentViewDataGrid, 0)) != null && $equals_2($getName($getMetadataInfo(this$static.currentViewDataGrid, 0)), '__domo_period'))
  ;
  else 
    $getNumCols(this$static.currentViewDataGrid) > 1 && !this$static.currentViewDataGrid.dataHasAlreadyBeenTransposed && $transposeRowsCols(this$static.currentViewDataGrid);
  this$static.graph.data_0 = this$static.currentViewDataGrid;
  $setRowsAsNonTimeData(this$static.graph.data_0);
}

function HandlerPie(){
  this.labelFont = new CFFont_0(null, 14, ($clinit_CFColor() , WHITE));
}

defineClass(128, 118, {128:1}, HandlerPie);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_10(chart){
  var dimension, graphHeight, graphLegWidth, graphWidth, leftLegendWidth, legend, legendHeight, legendWidth, margin, totalLegend;
  chart.includeJsonMap || $setAllowInteractions(this.graph, true);
  this.graph.removeDependentCompsFromCompArray();
  $clearDependentComponents(this.graph);
  dimension = this.graph.chart.dimension;
  this.graph.getChartOptionAsString('hide_hover_legend') != null && (this.hideHoverLegend = isTrue(this.graph.getChartOptionAsString('hide_hover_legend')));
  this.graph.getChartOptionAsString('hide_legend') != null && (this.hideLegend = isTrue(this.graph.getChartOptionAsString('hide_legend')));
  if (dimension.height_0 * 2 / 3 >= dimension.width_0) {
    legendHeight = dimension.height_0 * 0.5;
    graphHeight = dimension.height_0 * 0.5;
    this.hideLegend && (graphHeight = dimension.height_0 - 10);
    margin = round_int(dimension.height_0 * 0.07);
    $setBounds_0(this.graph, 5, 5, round_int(dimension.width_0) - 10, round_int(graphHeight));
    if (!this.hideLegend) {
      legend = new LegendPie_0(chart, this.graph);
      $setBounds_0(legend, 5, round_int(graphHeight + margin), round_int(dimension.width_0) - 10, round_int(legendHeight) - (5 + margin));
      $addDependentComp(this.graph, legend);
    }
  }
   else {
    if (dimension.width_0 > 700 && dimension.height_0 > 211 && dimension.height_0 * 1.5 <= dimension.width_0) {
      legendWidth = dimension.width_0 * 5 / 16;
      leftLegendWidth = legendWidth;
      graphWidth = dimension.width_0 * 6 / 16;
      if (this.hideHoverLegend && this.hideLegend) {
        legendWidth = 0;
        leftLegendWidth = 0;
        graphWidth = dimension.width_0;
      }
       else if (this.hideHoverLegend || this.hideLegend) {
        legendWidth = dimension.width_0 / 2;
        leftLegendWidth = legendWidth;
        graphWidth = dimension.width_0 / 2;
        this.hideLegend && (leftLegendWidth = 0);
      }
      margin = round_int(dimension.width_0 * 0.07);
      $setBounds_0(this.graph, round_int(leftLegendWidth), 5, round_int(graphWidth) - 5, round_int(dimension.height_0) - 10);
      if (!this.hideLegend) {
        legend = new LegendPie_0(chart, this.graph);
        (dimension.height_0 < 380 || leftLegendWidth < 220) && $setSmallerLegend(legend);
        $setBounds_0(legend, 0, 0, round_int(leftLegendWidth), round_int(dimension.height_0));
        legend.rightMargin = margin;
        dimension.width_0 > 900 && (legend.leftMargin = 30);
        $addDependentComp(this.graph, legend);
      }
      if (!this.hideHoverLegend) {
        totalLegend = new TotalLegend(chart, this.graph);
        $setBounds_0(totalLegend, round_int(leftLegendWidth + graphWidth), 0, round_int(legendWidth), round_int(dimension.height_0));
        totalLegend.leftMargin = margin;
        dimension.width_0 > 900 && (totalLegend.rightMargin = 30);
        dimension.height_0 > 280?(totalLegend.topMargin = 50):(totalLegend.topMargin = 2);
        $addDependentComp(this.graph, totalLegend);
      }
    }
     else if (dimension.width_0 > 400 && (dimension.height_0 > 210 || this.graph.chart.isPageLayout && dimension.height_0 > 80)) {
      legendWidth = dimension.width_0 * 4.5 / 10;
      graphWidth = dimension.width_0 * 5.5 / 10;
      if (this.hideLegend) {
        legendWidth = 5;
        graphWidth = dimension.width_0 - 10;
      }
      margin = round_int(dimension.width_0 * 0.07);
      $setBounds_0(this.graph, round_int(legendWidth), 5, round_int(graphWidth) - 5, round_int(dimension.height_0) - 10);
      if (!this.hideLegend) {
        legend = new LegendPie_0(chart, this.graph);
        dimension.height_0 < 280 || legendWidth < 180?$setSmallestLegend(legend):(dimension.height_0 < 380 || legendWidth < 220) && $setSmallerLegend(legend);
        dimension.width_0 > 900 && (legend.leftMargin = 30);
        $setBounds_0(legend, 0, 0, round_int(legendWidth), round_int(dimension.height_0));
        legendWidth < 220?(legend.rightMargin = 15):(legend.rightMargin = margin);
        $addDependentComp(this.graph, legend);
      }
    }
     else if (!this.hideHoverLegend && dimension.width_0 > dimension.height_0 * 2.5 && dimension.width_0 > 300 && dimension.height_0 >= 100) {
      margin = dimension.width_0 * 0.05;
      graphLegWidth = (dimension.width_0 - margin * 3) / 2;
      $setBounds_0(this.graph, round_int(margin), 3, round_int(graphLegWidth), round_int(dimension.height_0) - 6);
      totalLegend = new TotalLegend(chart, this.graph);
      $setBounds_0(totalLegend, round_int(graphLegWidth + 2 * margin), 0, round_int(graphLegWidth), round_int(dimension.height_0));
      $addDependentComp(this.graph, totalLegend);
    }
     else if (!this.hideHoverLegend && this.graph.chart.mobile && !this.graph.treatAsSmall && !this.graph.simplifiedForMobile && $hasInteractions(this.graph)) {
      graphHeight = dimension.height_0 - 30;
      $setBounds_0(this.graph, 5, 30, round_int(dimension.width_0) - 10, round_int(graphHeight) - 5);
      legend = new LegendPie_0(chart, this.graph);
      legend.isSingleLineHoverLegend = true;
      $setBounds_0(legend, 10, 0, round_int(dimension.width_0) - 20, 30);
      $addDependentComp(this.graph, legend);
    }
     else {
      $setBounds_0(this.graph, 5, 5, round_int(dimension.width_0) - 10, round_int(dimension.height_0) - 10);
    }
  }
  !!this.graph.playControl && (this.graph.playControl = null);
}
;
_.drawAllPieSlices = function drawAllPieSlices(rnd){
  $drawAllPieSlices(this, rnd);
}
;
_.format_0 = function format_17(rnd){
  var angle, bnds, cell, curIndex, curRow, dataIndex, depComp, depComp$iterator, fill, hasFilteredData, i, inShowAsFilteredMode, lastState, numRowsToDisplay, pctOfTotal, sd, showAsFiltered, showingOther, startAngle, stroke, total, value_0, visibleIndex;
  $setAutoAbbreviateState(this.graph.numberFormatter, this.abbreviateValues);
  $setAutoAbbreviateState(this.graph.dataLabelNumberFormatter, this.abbreviateValues);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredRows;
  this.processChartOptions();
  if (this.sorted && !this.dataHasBeenSorted) {
    $sortRowsDesc(this.graph.data_0, SORT_SUM, true);
    this.dataHasBeenSorted = true;
  }
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  bnds = this.graph.bnds;
  this.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $add_1(this.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
  this.graph.currentColumn == -1 && $setColumnToAbsoluteValueData(this.graph.data_0);
  total = $getAbsoluteVisibleSum($getColumn(this.graph.data_0, this.graph.currentColumn), $intern_21, false);
  startAngle = -90;
  this.centerX = bnds.x_0 + bnds.width_0 / 2;
  this.centerY = bnds.y_0 + bnds.height_0 / 2;
  this.radius = bnds.width_0 / 2;
  bnds.height_0 < bnds.width_0 && (this.radius = bnds.height_0 / 2);
  if (this.graph.data_0.numVisibleRows == 0) {
    $addNoDataExistsMessage(this.graph);
    return;
  }
  this.initColors();
  showingOther = false;
  numRowsToDisplay = $getNumRows(this.graph.data_0);
  numRowsToDisplay > this.slicesBeforeOther + 1 && (showingOther = true);
  (this.graph.typeAttributes.isNightingale || this.graph.typeAttributes.isNautilus) && (this.maxVisibleValue = $getMaxVisibleValue(this, showingOther));
  i = 0;
  visibleIndex = 0;
  curRow = $getRow(this.graph.data_0, 0);
  while (curRow) {
    dataIndex = curRow.origIndex;
    curIndex = curRow.curIndex;
    cell = $getCell(this.graph.data_0, dataIndex, this.graph.currentColumn);
    if (!!cell && !isNaN_0($getValue(cell)) && !curRow.hidden) {
      value_0 = $getValue(cell);
      pctOfTotal = 0;
      total != 0 && (pctOfTotal = value_0 / total);
      angle = pctOfTotal * 360;
      fill = new CFFill($getColorForCellValueCategoryNameAndIndex(this.graph, cell, this.graph.data_0.valueColumnName, curIndex));
      showAsFiltered = inShowAsFilteredMode && curRow.showAsFiltered;
      showAsFiltered && (fill = new CFFill($deSaturateAndLighten(fill.color_0, 0.9, 0.4)));
      stroke = null;
      if (this.graph.outlineStyle) {
        fill = getOutlineFill(fill);
        stroke = getOutlineStroke(fill, null);
      }
      lastState = this.getLastState_0(cell, curIndex);
      if (i < this.slicesBeforeOther || $getNumRows(this.graph.data_0) == this.slicesBeforeOther + 1) {
        sd = new SrsSliceInfo(this, cell, startAngle, startAngle + angle, fill, stroke, lastState);
        cell.altName = null;
      }
       else if (i == this.slicesBeforeOther) {
        sd = new SrsSliceInfo(this, cell, startAngle, 270, fill, stroke, lastState);
        cell.row.isOtherRow = true;
        $setAlternateName(cell, this.graph.getLocalizedString('OTHER'));
        sd.isOtherSlice = true;
      }
       else {
        sd = new SrsSliceInfo(this, cell, 270, 270, fill, stroke, lastState);
      }
      inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (sd.highlightAlways = true);
      $add_1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, sd);
      startAngle += angle;
      ++visibleIndex;
    }
    ++i;
    curRow = $getRow(this.graph.data_0, i);
  }
  this.graph.setNeedsFormat(false);
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.format_0(rnd);
    }
  }
  this.drawAllPieSlices(rnd);
}
;
_.freeResources = function freeResources_27(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.labelFont = null;
}
;
_.getDataLabelForSlice = function getDataLabelForSlice(rnd, slice_0, shape_0, fnt){
  if (this.showDataLabels && !this.graph.treatAsSmall) {
    return this.getDataLabelShape(rnd, fnt, shape_0, slice_0);
  }
  return null;
}
;
_.getDataLabelShape = function getDataLabelShape(rnd, labelFont, sliceShape, slice_0){
  var centerAngle, centerPoint, coloredFont, containingShape, duplicateLabelFont, endRadius, left, name_0, onlyOneSlice, radius, ti, tiAry, tiWrapped, tmpValue, top_0;
  if (this.innerRadius == 0) {
    radius = $getRadius(slice_0, this.innerRadius);
    radius == this.radius && (radius = radius - 15);
    centerAngle = slice_0.startAngle + (slice_0.endAngle - slice_0.startAngle) / 2;
    endRadius = radius * 2 / 3;
    onlyOneSlice = false;
    this.graph.data_0.numVisibleCols == 1 && this.graph.data_0.numVisibleRows == 1 && (onlyOneSlice = true);
    $getPctOfColValue(slice_0.cell) > 0.7?(endRadius = radius * 2 / 6):$getPctOfColValue(slice_0.cell) > 0.3 && (endRadius = radius * 2 / 4);
    centerPoint = $GetArcLineEndPoint(endRadius, -centerAngle, this.centerX, this.centerY);
    onlyOneSlice && (centerPoint = new CFPoint(this.centerX, this.centerY));
    name_0 = slice_0.cell.altName;
    (name_0 == null || name_0.length == 0) && (name_0 = $getRowName(slice_0.cell));
    tmpValue = 0;
    if (slice_0.isOtherSlice) {
      tmpValue = slice_0.cell.value_0;
      $setValue(slice_0.cell, $getOtherValue(this.graph.data_0, this.slicesBeforeOther, this.graph.currentColumn));
    }
    this.graph.getChartOptionAsString('datalabel_text') != null && (name_0 = $getFormattedDataLabel(this.graph.dataLabel, slice_0.cell));
    slice_0.isOtherSlice && $setValue(slice_0.cell, tmpValue);
    tiWrapped = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, name_0, labelFont, radius * 2, -1, -1));
    left = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.x_0 - tiWrapped.textDimension.width_0 / 2)));
    top_0 = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.y_0 - tiWrapped.textDimension.height_0 / 2)));
    containingShape = sliceShape;
    onlyOneSlice && (containingShape = new CFShape_1(new CFRect(centerPoint.x_0 - radius, centerPoint.y_0 - radius, radius * 2, radius * 2), null, null));
    if ($containsBounds(containingShape, left, top_0, round_int(tiWrapped.textDimension.width_0), round_int(tiWrapped.textDimension.height_0), rnd)) {
      if (tiWrapped.wrappedLines.array.length == 1) {
        duplicateLabelFont = $getColoredFont(slice_0, labelFont, sliceShape);
        tiAry = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 1, 0, 1);
        tiAry[0] = new CFTextItem_2(name_0, duplicateLabelFont, left, top_0);
        return tiAry;
      }
       else {
        left = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.x_0 - tiWrapped.textDimension.width_0 / 2)));
        top_0 = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.y_0 - tiWrapped.textDimension.height_0 / 2)));
        coloredFont = $getColoredFont(slice_0, labelFont, sliceShape);
        return $getCFTextItemsForWrappedLines(tiWrapped, rnd, new CFRect(left, top_0, tiWrapped.textDimension.width_0 + 1, tiWrapped.textDimension.height_0 + 1), coloredFont, HALIGN_CENTER, VALIGN_MIDDLE);
      }
    }
     else {
      ti = getWrappedTextForWidthWithMaxLines(rnd, name_0, labelFont, tiWrapped.textDimension.width_0 * $intern_8, -1, -1);
      left = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.x_0 - ti.textDimension.width_0 / 2)));
      top_0 = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.y_0 - ti.textDimension.height_0 / 2)));
      if ($containsBounds(containingShape, left, top_0, round_int(ti.textDimension.width_0), round_int(ti.textDimension.height_0), rnd) && !ti.aWordIsSplit) {
        coloredFont = $getColoredFont(slice_0, labelFont, sliceShape);
        return $getCFTextItemsForWrappedLines(ti, rnd, new CFRect(left, top_0, ti.textDimension.width_0 + 1, ti.textDimension.height_0 + 1), coloredFont, HALIGN_CENTER, VALIGN_MIDDLE);
      }
       else {
        ti = getWrappedTextForWidthWithMaxLines(rnd, name_0, labelFont, tiWrapped.textDimension.width_0 * 0.5, -1, -1);
        left = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.x_0 - ti.textDimension.width_0 / 2)));
        top_0 = toInt_0(fromDouble_0($wnd.Math.round(centerPoint.y_0 - ti.textDimension.height_0 / 2)));
        if ($containsBounds(containingShape, left, top_0, round_int(ti.textDimension.width_0), round_int(ti.textDimension.height_0), rnd) && !ti.aWordIsSplit) {
          coloredFont = $getColoredFont(slice_0, labelFont, sliceShape);
          return $getCFTextItemsForWrappedLines(ti, rnd, new CFRect(left, top_0, ti.textDimension.width_0 + 1, ti.textDimension.height_0 + 1), coloredFont, HALIGN_CENTER, VALIGN_MIDDLE);
        }
      }
    }
  }
  return null;
}
;
_.getDrillFilter = function getDrillFilter_4(shapeInfo, clicked){
  var curRow, filter, filterBase, index_0, otherNames, sliceInfo;
  if (!shapeInfo || !instanceOf(shapeInfo, 71))
    return null;
  sliceInfo = castTo(shapeInfo, 71);
  if (!!sliceInfo && !!sliceInfo.cell && sliceInfo.isOtherSlice && shapeInfo.cell.altName != null && $equals_2(shapeInfo.cell.altName, this.graph.getLocalizedString('OTHER'))) {
    if ($usingCardBus(this.graph.chart) && clicked) {
      $handleClickOnOtherInCardBusMode(this.graph, shapeInfo.cell.row, this.slicesBeforeOther);
      return this.graph.drillFilter;
    }
     else {
      otherNames = new ArrayList;
      index_0 = 0;
      curRow = $getRow(this.graph.data_0, 0);
      while (curRow) {
        index_0 >= this.slicesBeforeOther && $add_1(otherNames, curRow.name_0);
        ++index_0;
        curRow = $getRow(this.graph.data_0, index_0);
      }
      filterBase = new FilterBase($getRowParentName(shapeInfo.cell), 'IN', shapeInfo.cell.row);
      filterBase.values = otherNames;
      $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
      filter = getDrillFilterFromValues(filterBase);
      return $clinit_StrUtil() , getDrillFilterFromFilters(filter, null);
    }
  }
  return null;
}
;
_.getFontForLabels = function getFontForLabels(rnd){
  var dlShapes, fnt, i, idx, idx$iterator, index_0, initNotShownSliceLabelsCount, labelsDisplayedAtCurSize, lastFontSize, lastLabelsDisplayedAtCurSize, notShownSliceLabels, shapeAry, sliceAry, srsInfo, srsInfo$iterator;
  fnt = $duplicate_2(this.labelFont);
  sliceAry = initUnidimensionalArray(Lcom_domo_charting_graphs_SrsSliceInfo_2_classLit, $intern_9, 71, castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length, 0, 1);
  shapeAry = initUnidimensionalArray(Lcom_domo_charting_model_CFShape_2_classLit, $intern_9, 6, castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length, 0, 1);
  index_0 = 0;
  for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 18);
    sliceAry[index_0] = castTo(srsInfo, 71);
    shapeAry[index_0] = $getShapePct_2(sliceAry[index_0], 'none', 1, null);
    ++index_0;
  }
  if (this.showDataLabels && !this.graph.treatAsSmall) {
    notShownSliceLabels = new ArrayList;
    for (i = 0; i < sliceAry.length; i++) {
      if (shapeAry[i]) {
        dlShapes = this.getDataLabelForSlice(rnd, sliceAry[i], shapeAry[i], fnt);
        dlShapes == null && $add_1(notShownSliceLabels, valueOf(i));
      }
      if (sliceAry[i].isOtherSlice)
        break;
    }
    if (notShownSliceLabels.array.length > 0) {
      initNotShownSliceLabelsCount = notShownSliceLabels.array.length;
      lastLabelsDisplayedAtCurSize = 0;
      lastFontSize = fnt.size_0;
      $setSize_0(fnt, fnt.size_0 - 1);
      while (fnt.size_0 >= MIN_FONT_SIZE) {
        labelsDisplayedAtCurSize = 0;
        for (idx$iterator = new ArrayList$1(notShownSliceLabels); idx$iterator.i < idx$iterator.this$01.array.length;) {
          idx = castTo($next_3(idx$iterator), 29);
          dlShapes = this.getDataLabelForSlice(rnd, sliceAry[idx.value_0], shapeAry[idx.value_0], fnt);
          dlShapes != null && ++labelsDisplayedAtCurSize;
          if (sliceAry[idx.value_0].isOtherSlice)
            break;
        }
        if (labelsDisplayedAtCurSize == initNotShownSliceLabelsCount) {
          lastFontSize = fnt.size_0;
          break;
        }
         else if (labelsDisplayedAtCurSize != lastLabelsDisplayedAtCurSize) {
          lastFontSize = fnt.size_0;
          lastLabelsDisplayedAtCurSize = labelsDisplayedAtCurSize;
        }
        $setSize_0(fnt, fnt.size_0 - 1);
      }
      fnt.size_0 = lastFontSize;
      fnt.lineHeight = NaN;
    }
  }
  return fnt;
}
;
_.getLastState_0 = function getLastState_0(cell, index_0){
  return $getLastState_0(this, cell, index_0);
}
;
_.getPiePath = function getPiePath(sliceInfo, innerRadius, startAngle, endAngle){
  var path;
  path = new CFPath;
  if (innerRadius > 0) {
    $add(path, new CFPathArcElement_0(this.centerX, this.centerY, this.radius * innerRadius, endAngle, startAngle, true));
    $add(path, new CFPathArcElement(this.centerX, this.centerY, $getRadius(sliceInfo, innerRadius), startAngle, endAngle));
  }
   else {
    $add(path, new CFPathElement_0(0, this.centerX, this.centerY));
    $add(path, new CFPathArcElement(this.centerX, this.centerY, $getRadius(sliceInfo, innerRadius), startAngle, endAngle));
  }
  $add(path, new CFPathElement_0(4, 0, 0));
  return path;
}
;
_.initColors = function initColors_2(){
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), this.slicesBeforeOther + 1, false);
}
;
_.processChartOptions = function processChartOptions_23(){
  $processChartOptions_8(this);
}
;
_.resetForTypeChange = function resetForTypeChange_13(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
  this.dataHasBeenSorted = false;
  this.sorted && !!this.graph.data_0 && $sortRows(this.graph.data_0, 0);
}
;
_.setCategoryIsHidden = function setCategoryIsHidden_0(categoryIndex, value_0){
  var handled, i, numOtherSlices;
  handled = false;
  if (categoryIndex == this.slicesBeforeOther) {
    numOtherSlices = $getNumRows(this.graph.data_0) - this.slicesBeforeOther;
    if (categoryIndex >= 0 && categoryIndex < $getNumRows(this.graph.data_0) && (!value_0 || this.graph.data_0.numVisibleRows > numOtherSlices)) {
      for (i = categoryIndex; i < $getNumRows(this.graph.data_0); i++)
        $setRowHiddenValue(this.graph.data_0, i, value_0);
      this.graph.data_0.hasHiddenRows || $addChartOption(this.graph, 'row_filter', 'none');
      this.graph.previousGraphType = this.graph.graphType;
      this.graph.setNeedsFormat(true);
      $setAnimationData(this.graph, 0, 500, 'Transition', 'circleOut');
      $setAnimateDrawNeeded(this.graph.chart);
    }
    handled = true;
  }
  return handled;
}
;
_.setDLFontSize = function setDLFontSize(value_0){
  if (value_0 != null) {
    if ($equalsIgnoreCase(value_0, 'Larger')) {
      $setSize_0(this.labelFont, 18);
      this.fixedFontLabelSize = true;
    }
     else if ($equalsIgnoreCase(value_0, 'Largest')) {
      $setSize_0(this.labelFont, 20);
      this.fixedFontLabelSize = true;
    }
     else if ($equalsIgnoreCase(value_0, 'Smaller')) {
      $setSize_0(this.labelFont, 12);
      this.fixedFontLabelSize = true;
    }
     else {
      $setSize_0(this.labelFont, 14);
      this.fixedFontLabelSize = false;
    }
  }
}
;
_.setData = function setData_22(data_0){
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    $updateDataGrid_0(this);
  }
  this.dataHasBeenSorted = false;
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
}
;
_.setFrame = function setFrame_14(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, dlShapes, ge, item_0, item$index, item$max, lblFont, otherEncountered, pctComplete, prevSlice, shape_0, slice_0, slice$iterator, sliceStart, srsInfo, srsInfo$iterator, timePerSlice;
  if (this.graph.seriesShapes.array.length > 0 && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0) {
    if (!castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).animInfo) {
      switch (type_0) {
        case 'Pie1':
          {
            timePerSlice = round_int($wnd.Math.round(toDouble_0(div(sub_1(endTime, startTime), this.graph.seriesShapes.array.length))));
            sliceStart = startTime;
            for (slice$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList); slice$iterator.i < slice$iterator.this$01.array.length;) {
              slice_0 = castTo($next_3(slice$iterator), 18);
              animInfo = new AnimInfoSrs(sliceStart, add_1(sliceStart, timePerSlice), easingType);
              slice_0.animInfo = animInfo;
              sliceStart = add_1(sliceStart, timePerSlice);
            }
            break;
          }

        case 'Initial':
        case 'Transition':
        case 'PieToDonut':
        case 'DonutToPie':
        default:{
            for (slice$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList); slice$iterator.i < slice$iterator.this$01.array.length;) {
              slice_0 = castTo($next_3(slice$iterator), 18);
              animInfo = new AnimInfoSrs(startTime, endTime, easingType);
              slice_0.animInfo = animInfo;
            }
          }

      }
    }
    this.graph.geAry.clear_0();
    prevSlice = null;
    lblFont = null;
    otherEncountered = false;
    for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      slice_0 = castTo(srsInfo, 71);
      if (slice_0.animInfo) {
        pctComplete = $getPercentComplete(slice_0.animInfo, curTime);
        ge = new GraphicElement;
        shape_0 = $getShapePct_2(slice_0, type_0, pctComplete, prevSlice);
        if (shape_0) {
          $addShape_0(ge, shape_0, srsInfo);
          if ((pctComplete >= 1 || this.graph.typeAttributes.isPopPlay) && !otherEncountered) {
            if (!lblFont) {
              lblFont = $duplicate_2(this.labelFont);
              this.fixedFontLabelSize || (lblFont = this.getFontForLabels(rnd));
            }
            dlShapes = this.getDataLabelForSlice(rnd, slice_0, shape_0, lblFont);
            if (dlShapes != null) {
              for (item$index = 0 , item$max = dlShapes.length; item$index < item$max; ++item$index) {
                item_0 = dlShapes[item$index];
                !ge.textAry && (ge.textAry = new ArrayList);
                $add_1(ge.textAry, item_0);
              }
            }
            slice_0.isOtherSlice && (otherEncountered = true);
          }
          pctComplete >= 1 && ($equals_2(type_0, 'PieToDonut')?(this.innerRadius = 0.57):$equals_2(type_0, 'DonutToPie') && (this.innerRadius = 0));
          $addGraphicElement_0(this.graph, ge);
        }
      }
      prevSlice = slice_0;
    }
  }
}
;
_.setHoverData = function setHoverData_19(data_0, rnd){
  return $setHoverData_2(this, data_0, rnd);
}
;
_.setHoverEffects_0 = function setHoverEffects_10(hoverData, rnd){
  var altHoverData, dataObj, depComp, depComp$iterator, ge, ge$iterator, inShowAsFiltered;
  if ($hasInteractions(this.graph)) {
    hoverData != null && instanceOf(hoverData, 12) && (hoverData = null);
    altHoverData = null;
    inShowAsFiltered = !!this.graph.chart && $usingCardBus(this.graph.chart) && this.graph.data_0.hasFilteredRows;
    for (ge$iterator = this.graph.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this.graph, ge);
      if (dataObj != null && (hoverData == null || !instanceOf(hoverData, 132))) {
        if (hoverData != null && instanceOf(hoverData, 7) && instanceOf(dataObj, 18) && maskUndefined(castTo(dataObj, 18).cell.row) === maskUndefined(hoverData)) {
          $showElementInNormalColor_1(this, ge, dataObj);
          altHoverData = dataObj;
        }
         else 
          maskUndefined(dataObj) !== maskUndefined(hoverData) && hoverData != null && (!inShowAsFiltered || instanceOf(dataObj, 18) && !castTo(dataObj, 18).highlightAlways)?$showElementInGray(this, ge):$showElementInNormalColor_1(this, ge, dataObj);
      }
    }
    if (this.graph.dependentComps) {
      for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        depComp.setHoverEffects(hoverData, rnd);
        altHoverData != null && depComp.setHoverEffects(altHoverData, rnd);
      }
    }
    (this.graph.treatAsSmall || this.graph.simplifiedForMobile || this.graph.verticalLayout) && this.setHoverText(hoverData);
    return true;
  }
   else {
    this.setHoverText(hoverData);
  }
  return false;
}
;
_.setHoverText = function setHoverText_4(hoverData){
  var current, hoverLabel, isOtherSlice, value_0;
  $removeHints(this.graph);
  this.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this.graph);
    if (instanceOf(hoverData, 71)) {
      current = castTo(hoverData, 71);
      isOtherSlice = false;
      value_0 = 0;
      if (current.cell.altName != null && $equals_2(current.cell.altName, this.graph.getLocalizedString('OTHER'))) {
        isOtherSlice = true;
        value_0 = current.cell.value_0;
        $setValue(current.cell, $getOtherValue(this.graph.data_0, this.slicesBeforeOther, this.graph.currentColumn));
      }
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this.graph, current.hoverText);
      isOtherSlice && $setValue(current.cell, value_0);
    }
  }
}
;
_.setInnerRadius = function setInnerRadius(innerRadius){
  this.innerRadius = innerRadius;
}
;
_.setItemsBeforeOther = function setItemsBeforeOther(itemsBeforeOther){
  var depComp, depComp$iterator;
  this.slicesBeforeOther = itemsBeforeOther;
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      instanceOf(depComp, 65) && (castTo(depComp, 65).itemsBeforeOther = itemsBeforeOther);
      instanceOf(depComp, 106) && (castTo(depComp, 106).itemsBeforeOther = itemsBeforeOther);
    }
  }
}
;
_.abbreviateValues = false;
_.centerX = 0;
_.centerY = 0;
_.dataHasBeenSorted = false;
_.fixedFontLabelSize = false;
_.hideHoverLegend = false;
_.hideLegend = false;
_.innerRadius = 0;
_.maxVisibleValue = NaN;
_.radius = 0;
_.showDataLabels = true;
_.showPercentInLegend = false;
_.slicesBeforeOther = 12;
_.sorted = true;
var MIN_FONT_SIZE = 8;
var Lcom_domo_charting_graphs_HandlerPie_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerPie', 128);
function HandlerNightingale(){
  HandlerPie.call(this);
}

defineClass(332, 128, {128:1}, HandlerNightingale);
_.format_0 = function format_18(rnd){
  var angle, bnds, cell, curIndex, curRow, dataIndex, depComp, depComp$iterator, fill, i, lastState, numRowsToDisplay, pctOfTotal, sd, showingOther, startAngle, visibleIndex;
  $setAutoAbbreviateState(this.graph.numberFormatter, false);
  $processChartOptions_8(this);
  $hideNaNValueRows(this.graph.data_0);
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  bnds = this.graph.bnds;
  this.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $add_1(this.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
  this.graph.currentColumn == -1 && $setColumnToAbsoluteValueData(this.graph.data_0);
  $getAbsoluteVisibleSum($getColumn(this.graph.data_0, this.graph.currentColumn), $intern_21, false);
  startAngle = -90;
  this.centerX = bnds.x_0 + bnds.width_0 / 2;
  this.centerY = bnds.y_0 + bnds.height_0 / 2;
  this.radius = bnds.width_0 / 2;
  bnds.height_0 < bnds.width_0 && (this.radius = bnds.height_0 / 2);
  if (this.graph.data_0.numVisibleRows == 0) {
    $addNoDataExistsMessage(this.graph);
    return;
  }
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), this.slicesBeforeOther + 1, false);
  showingOther = false;
  numRowsToDisplay = this.graph.data_0.numVisibleRows;
  if (numRowsToDisplay > this.slicesBeforeOther + 1) {
    numRowsToDisplay = this.slicesBeforeOther + 1;
    showingOther = true;
  }
  this.maxVisibleValue = $getMaxVisibleValue(this, showingOther);
  i = 0;
  visibleIndex = 0;
  curRow = $getFirstVisibleRow(this.graph.data_0);
  while (curRow) {
    dataIndex = curRow.origIndex;
    curIndex = curRow.curIndex;
    cell = $getCell(this.graph.data_0, dataIndex, this.graph.currentColumn);
    if (!!cell && !isNaN_0($getValue(cell))) {
      $getValue(cell);
      pctOfTotal = 1 / numRowsToDisplay;
      angle = pctOfTotal * 360;
      fill = new CFFill($getColorForCellValueCategoryNameAndIndex(this.graph, cell, this.graph.data_0.valueColumnName, curIndex));
      lastState = $getLastState_0(this, cell, curIndex);
      if (i < this.slicesBeforeOther || this.graph.data_0.numVisibleRows == this.slicesBeforeOther + 1) {
        sd = new SrsSliceInfo(this, cell, startAngle, startAngle + angle, fill, null, lastState);
        cell.altName = null;
      }
       else if (i == this.slicesBeforeOther) {
        sd = new SrsSliceInfo(this, cell, startAngle, 270, fill, null, lastState);
        cell.row.isOtherRow = true;
        $setAlternateName(cell, this.graph.getLocalizedString('OTHER'));
        sd.isOtherSlice = true;
      }
       else {
        sd = new SrsSliceInfo(this, cell, 270, 270, fill, null, lastState);
      }
      $add_1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, sd);
      startAngle += angle;
      ++visibleIndex;
    }
    curRow = $getNextVisibleRow(this.graph.data_0, curRow);
    ++i;
  }
  this.graph.setNeedsFormat(false);
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.format_0(rnd);
    }
  }
  $drawAllPieSlices(this, rnd);
}
;
var Lcom_domo_charting_graphs_HandlerNightingale_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerNightingale', 332);
function $createSeriesInfoObjs_0(this$static, sGraph, rows_0){
  var LineList, angle, cell, curCol, curRow, fill, fullLineInfo, i, incrementAngle, lastState, linePointInfo, numCategories, point, points, radarScale, radius, rowIndex, seriesColor, stroke, value_0, valueScale;
  if (!rows_0)
    return;
  numCategories = rows_0.size_1();
  incrementAngle = 360 / numCategories;
  (this$static.graph.isThumbnail || numCategories > 50 || this$static.graph.data_0.numVisibleCols > 50 || this$static.graph.bnds.width_0 < 150) && (this$static.lineWidth_0 = 1);
  valueScale = $getValueScale(sGraph);
  if (!instanceOf(valueScale, 95))
    return;
  radarScale = castTo(valueScale, 95);
  curCol = $getFirstVisibleCol(this$static.graph.data_0);
  while (curCol) {
    fullLineInfo = null;
    LineList = new ArrayList;
    points = new ArrayList;
    seriesColor = $getColorForSeriesNameOrIndex_0(this$static.graph, curCol, curCol.curIndex);
    fill = ($clinit_CFFill() , TRANSPARENT_0);
    stroke = new CFStroke(seriesColor, this$static.lineWidth_0);
    rowIndex = 0;
    angle = -90;
    for (i = 0; i < rows_0.size_1(); i++) {
      curRow = castTo(rows_0.get_1(i), 7);
      if (!curRow)
        continue;
      cell = $getCell(this$static.graph.data_0, curRow.curIndex, curCol.curIndex);
      if (!!cell && !isNaN_0($getValue(cell))) {
        value_0 = $getValue(cell);
        radius = $getPositionForValue(radarScale, value_0);
        point = $getPointForRadiusAndAngle(radarScale, radius, angle);
        points.array[points.array.length] = point;
        lastState = $getLastShapeForCell(this$static.sGraph, cell, false);
        linePointInfo = new SrsLineInfo(cell, point, 0, false, fill, stroke, lastState, 400);
        LineList.array[LineList.array.length] = linePointInfo;
      }
      angle += incrementAngle;
      ++rowIndex;
    }
    if (points.array.length > 0) {
      points.array.length == 1 && $add_1(points, $getPointForRadiusAndAngle(radarScale, 0, 0));
      $add_1(points, (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)));
    }
    if (LineList.array.length > 0 && !this$static.graph.typeAttributes.symbolsOnly) {
      lastState = $getLastState(this$static, (checkCriticalElementIndex(0, LineList.array.length) , castTo(LineList.array[0], 18)).cell, true);
      fullLineInfo = new SrsLineInfo_1((checkCriticalElementIndex(0, LineList.array.length) , castTo(LineList.array[0], 18)).cell, points, stroke, 0, false, true, lastState);
    }
    $add_1(this$static.graph.seriesShapes, new SeriesInfo(LineList, fullLineInfo));
    curCol = $getNextVisibleCol(this$static.graph.data_0, curCol);
  }
  $drawAllLinesAndPoints_0(this$static, -1);
}

function $drawAllLinesAndPoints_0(this$static, index_0){
  var curIndex, drawGrayLineOnly, srsItem, srsItem$iterator;
  curIndex = 0;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    drawGrayLineOnly = false;
    curIndex != index_0 && index_0 != -1 && (drawGrayLineOnly = true);
    $drawLineAndPoints(this$static, srsItem, drawGrayLineOnly);
    ++curIndex;
  }
}

function $drawLineAndPoints(this$static, srsItem, drawGrayLineOnly){
  var fullLineInfo, previous, srsInfo, srsInfo$iterator, stroke, ge, line, seriesColor, seriesFill, lineShape;
  if (srsItem.fullSeriesInfo) {
    fullLineInfo = castTo(srsItem.fullSeriesInfo, 28);
    stroke = srsItem.fullSeriesInfo.stroke_0;
    drawGrayLineOnly && (stroke = new CFStroke(($clinit_CFColor() , DISABLED_LIGHT_GRAY), this$static.lineWidth_0));
    stroke.noMouse = true;
    ge = new GraphicElement;
    line = new CFPath_12(fullLineInfo.pointlist, true);
    line.shouldAntiAlias = true;
    seriesColor = stroke.color_0;
    drawGrayLineOnly && (seriesColor = ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
    seriesFill = $getFillColorForSeries_0(this$static, seriesColor);
    lineShape = new CFShape_0(line, seriesFill, stroke);
    $addShape_0(ge, lineShape, fullLineInfo);
    $addGraphicElement_0(this$static.graph, ge);
  }
  if (!drawGrayLineOnly) {
    previous = null;
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      $drawLinePointFromSrsInfo(this$static, castTo(srsInfo, 28), previous, drawGrayLineOnly);
      previous = castTo(srsInfo, 28);
    }
  }
}

function $drawLinePointFromSrsInfo(this$static, linePointInfo, previous, drawGray){
  var ge, shape_0;
  if (!previous || !$sameRoundedPoint(linePointInfo.point, previous.point)) {
    ge = new GraphicElement;
    shape_0 = $getShape(linePointInfo, null, this$static.graph.bnds, false, false);
    drawGray && $setFill(shape_0, ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
    $addShape_0(ge, shape_0, linePointInfo);
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $getFillColorForSeries_0(this$static, seriesColor){
  var alpha_0, fillColor, seriesFill;
  alpha_0 = round_int((100 - this$static.transparencyPct) * 2.55);
  fillColor = new CFColor_0(seriesColor.red, seriesColor.green, seriesColor.blue, alpha_0);
  seriesFill = new CFFill(fillColor);
  seriesFill.noMouse = true;
  return seriesFill;
}

function $getRadarScale(this$static){
  var radarScale;
  radarScale = null;
  instanceOf($getValueScale(this$static.sGraph), 95) && (radarScale = castTo($getValueScale(this$static.sGraph), 95));
  return radarScale;
}

function HandlerRadar(){
  HandlerLine.call(this);
}

defineClass(331, 110, $intern_42, HandlerRadar);
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_8(sGraph, type_0, curTime, valueScale){
  var center, fullLineInfo, ge, pctComplete, radarScale, seriesFill, shape_0, srsItem, srsItem$iterator;
  radarScale = $getRadarScale(this);
  if (!radarScale)
    return;
  pctComplete = 0;
  center = $getPointForRadiusAndAngle(radarScale, 0, 0);
  $remove_3(radarScale.backGeAry, radarScale.catLabelGE);
  $remove_3(radarScale.frontGeAry, radarScale.valueLabelGE);
  $remove_3(radarScale.geAry, radarScale.scaleLinesGE);
  for (srsItem$iterator = new ArrayList$1(this.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    if (!!srsItem.fullSeriesInfo && instanceOf(srsItem.fullSeriesInfo, 28)) {
      fullLineInfo = castTo(srsItem.fullSeriesInfo, 28);
      ge = new GraphicElement;
      pctComplete = $getPercentComplete(fullLineInfo.animInfo, curTime);
      seriesFill = $getFillColorForSeries_0(this, srsItem.fullSeriesInfo.stroke_0.color_0);
      shape_0 = $getShapePctFromPoint(fullLineInfo, type_0, sGraph, pctComplete, seriesFill, center);
      $addShape_0(ge, shape_0, fullLineInfo);
      $addGraphicElement_0(this.graph, ge);
    }
    pctComplete > 0.99 && $drawLineAndPoints(this, srsItem, false);
  }
  $drawCategoryLabels(radarScale);
  $drawValueScaleLabels(radarScale);
  $drawScaleLines(radarScale);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_11(sGraph, rows_0, baseScale, valScale, valScale2){
  $createSeriesInfoObjs_0(this, sGraph, rows_0);
}
;
_.drawAllLinesAndPoints = function drawAllLinesAndPoints_0(sGraph, index_0){
  $drawAllLinesAndPoints_0(this, index_0);
}
;
_.drawDataLabel = function drawDataLabel_6(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var dlText, existingScaleLabelRects, textPosRect, thisPoint, radarScale, existingScaleLabelRects_0;
  if (!!shpInfo && instanceOf(shpInfo, 28)) {
    existingScaleLabelRects = (radarScale = null , instanceOf($getValueScale(this.sGraph), 95) && (radarScale = castTo($getValueScale(this.sGraph), 95)) , existingScaleLabelRects_0 = null , !!radarScale && (existingScaleLabelRects_0 = radarScale.valueScale.existingLableRects) , existingScaleLabelRects_0);
    thisPoint = castTo(shpInfo, 28);
    dlText = $getFormattedDataLabel(dataLabel, thisPoint.cell);
    textPosRect = $getRectForPositionFromPoint(dataLabel, rnd, thisPoint.point, dlText);
    return $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, existingScaleLabelRects);
  }
  return false;
}
;
_.drawLinePointFromSrsInfo = function drawLinePointFromSrsInfo_0(linePointInfo, previous, drawGray){
  $drawLinePointFromSrsInfo(this, linePointInfo, previous, drawGray);
}
;
_.format_0 = function format_19(rnd){
  var radarScale, rows_0, valueScale;
  this.graph.supportsDrag = false;
  this.sGraph = castTo(this.graph, 40);
  if (!this.graph.data_0 || $getNumRows(this.graph.data_0) == 0)
    return;
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  valueScale = $getValueScale(this.sGraph);
  rows_0 = null;
  if (instanceOf(valueScale, 95)) {
    radarScale = castTo($getValueScale(this.sGraph), 95);
    rows_0 = radarScale.rowsToDisplay;
  }
  $createSeriesInfoObjs_0(this, this.sGraph, rows_0);
  this.graph.setNeedsFormat(false);
}
;
_.handleLogScaleChartOption = function handleLogScaleChartOption_0(valueScale, value_0){
  var radarScale;
  radarScale = $getRadarScale(this);
  !!radarScale && $changeValueScaleToLogScale(radarScale, isTrue(value_0));
  return valueScale;
}
;
_.handlerSpecificHoverEffects = function handlerSpecificHoverEffects_5(hoverData, rnd, seriesIndex){
  var radarScale;
  radarScale = $getRadarScale(this);
  !!radarScale && $setDimLabels(radarScale, seriesIndex != -1);
  $handlerSpecificHoverEffects_0(this, hoverData, rnd, seriesIndex);
}
;
_.processChartOptions = function processChartOptions_24(){
  var transparencyPctVal;
  this.transparencyPct = 90;
  if (this.graph.hasChartOptions()) {
    transparencyPctVal = getDouble_0(this.graph.getChartOptionAsString('series_transparency'), NaN);
    isNaN(transparencyPctVal) || (this.transparencyPct = transparencyPctVal);
    this.transparencyPct < 0 && (this.transparencyPct = 0);
    this.transparencyPct > 100 && (this.transparencyPct = 100);
  }
  $processChartOptions_7(this);
}
;
_.resetForTypeChange = function resetForTypeChange_14(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_23(data_0){
  var theData;
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = data_0;
    if ($getNumRows(data_0) > $intern_36 || $getNumCols(data_0) > $intern_36) {
      theData = $clone_0(this.currentViewDataGrid, $intern_36, $intern_36);
      this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
      this.currentViewDataGrid = theData;
      $warnNotAllDataShown(this.graph.chart);
    }
    this.graph.data_0 = this.currentViewDataGrid;
  }
}
;
_.setShowScaleLabels = function setShowScaleLabels_0(key, value_0){
  var keyLowerCase, scale, theValue;
  keyLowerCase = key.toLowerCase();
  scale = $getValueScale(this.sGraph);
  theValue = !isNever(value_0);
  !!scale && instanceOf(scale, 95) && (keyLowerCase.indexOf('cat_') != -1?$setShowCategoryLabels(castTo(scale, 95), theValue):$setShowValueLabels(castTo(scale, 95), theValue));
}
;
_.transparencyPct = 90;
var Lcom_domo_charting_graphs_HandlerRadar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerRadar', 331);
function $drawSliderBubbleAndGetShape(this$static, xPos, yPos){
  var bubbleShape, geBubble, innerBubbleShape, innerRadius, radius;
  radius = this$static.sliderBubbleDiameter / 2;
  innerRadius = this$static.sliderBubbleInnerDiameter / 2;
  geBubble = new GraphicElement;
  bubbleShape = new CFShape_0(new CFPath_0(xPos - radius, yPos - radius, this$static.sliderBubbleDiameter), new CFFill_1('#99CCEE'), null);
  !geBubble.shapeAry && (geBubble.shapeAry = new ArrayList);
  $add_1(geBubble.shapeAry, bubbleShape);
  innerBubbleShape = new CFShape_0(new CFPath_0(xPos - innerRadius, yPos - innerRadius, this$static.sliderBubbleInnerDiameter), ($clinit_CFFill() , WHITE_0), null);
  !geBubble.shapeAry && (geBubble.shapeAry = new ArrayList);
  $add_1(geBubble.shapeAry, bubbleShape);
  !geBubble.shapeAry && (geBubble.shapeAry = new ArrayList);
  $add_1(geBubble.shapeAry, innerBubbleShape);
  $addGraphicElement_0(this$static.graph, geBubble);
  this$static.graph.chart.mobile && (bubbleShape = new CFShape_0(new CFPath_0(xPos - 30, yPos - 30, 60), TRANSPARENT_0, null));
  return bubbleShape;
}

function $getCurFilterString_0(this$static){
  var columnName, filterBase, first, last, numberFormatter;
  columnName = $getName(this$static.minCol);
  if (typeIsDate(this$static.minCol.type_0)) {
    if (this$static.minCol.type_0 != null && $equals_2(this$static.minCol.type_0, 'DATETIME')) {
      first = FormatDate(fromDouble_0(this$static.curMinimumValue), 'yyyy-MM-dd HH:mm:ss', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      last = FormatDate(fromDouble_0(this$static.curMaximumValue), 'yyyy-MM-dd HH:mm:ss', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    }
     else {
      first = FormatDate(fromDouble_0(this$static.curMinimumValue), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      last = FormatDate(fromDouble_0(this$static.curMaximumValue), 'yyyy-MM-dd', this$static.graph.chart.locale, this$static.graph.chart.timeZone);
    }
    filterBase = new FilterBase(columnName, 'BETWEEN', this$static.minCol);
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, first);
    !filterBase.values && (filterBase.values = new ArrayList);
    $add_1(filterBase.values, last);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    return getDrillFilterFromValues(filterBase);
  }
   else {
    filterBase = new FilterBase(columnName, 'BETWEEN', this$static.minCol);
    numberFormatter = new NumberFormatter;
    numberFormatter.autoAbbreviate = false;
    numberFormatter.needsNewNumFormat = true;
    numberFormatter.decimalPlaces = 2;
    numberFormatter.needsNewNumFormat = true;
    numberFormatter.useThousandSeparator = false;
    numberFormatter.needsNewNumFormat = true;
    $addValue(filterBase, $formatNumber_1(numberFormatter, this$static.curMinimumValue));
    $addValue(filterBase, $formatNumber_1(numberFormatter, this$static.curMaximumValue));
    filterBase.fiscal = false;
    return getDrillFilterFromValues(filterBase);
  }
}

function $setSelectionFromFilter_0(this$static, filter){
  var columnType, operand, values;
  if (filter != null && !$equals_2(filter, 'none')) {
    values = getValueListFromFilter(filter);
    operand = getOperandFromFilter(filter);
    columnType = getColumnTypeFromFilter(filter);
    if (columnType != null && typeIsDate(columnType) && isNaN_0(this$static.curMinimumValue)) {
      if (operand != null && $equals_2(operand, 'BETWEEN') && values.array.length == 2) {
        this$static.curMinimumValue = toDouble_0(getTimeMSForDateString((checkCriticalElementIndex(0, values.array.length) , castToString(values.array[0])), null, null, null).value_0);
        this$static.curMaximumValue = toDouble_0(add_1(getTimeMSForDateString((checkCriticalElementIndex(1, values.array.length) , castToString(values.array[1])), null, null, null).value_0, $intern_40));
        this$static.rangeSetFromOptions = true;
      }
    }
     else if (columnType != null && typeIsNumeric(columnType) && isNaN_0(this$static.curMinimumValue)) {
      if (operand != null && $equals_2(operand, 'BETWEEN') && values.array.length == 2) {
        this$static.curMinimumValue = __parseAndValidateDouble((checkCriticalElementIndex(0, values.array.length) , castToString(values.array[0])));
        this$static.curMaximumValue = __parseAndValidateDouble((checkCriticalElementIndex(1, values.array.length) , castToString(values.array[1])));
        this$static.rangeSetFromOptions = true;
      }
    }
  }
}

function HandlerRangeSelector(){
  this.errorFont = new CFFont_0(null, 14, new CFColor_2('#E4584F'));
}

defineClass(195, 118, {195:1}, HandlerRangeSelector);
_.cancelDrag_0 = function cancelDrag_4(){
  this.inDrag_0 = false;
  this.draggingMin = false;
  this.draggingMax = false;
  this.graph.setNeedsFormat(true);
  return true;
}
;
_.format_0 = function format_20(rnd){
  var barShape, ddShape, errorText, ge, geDrill, geErrorText, geMaxText, geMaxValText, geMinText, geMinValText, graphBounds, height, left, maxDim, maxText, maxTextRect, maxValDim, maxValText, minDim, minText, minTextRect, minValDim, minValText, outputFormat, selBarShape, showMinMaxText, sliderBkgRect, sliderCurBkgRect, top_0, width_0;
  this.sliderFont = new CFFont_0(null, 12, $getTextColor(this.graph.chart.palette));
  showMinMaxText = true;
  this.graph.supportsDrag = true;
  this.graph.hasInteractions = true;
  $clearAllGeArrays(this.graph);
  graphBounds = this.graph.bnds;
  if (this.error_0 != 0) {
    errorText = '';
    this.error_0 == 4?(errorText = getString('RANGE_SEL_ERR_MIN_MAX_SAME', this.graph.chart.locale)):this.error_0 == 2?(errorText = getString('RANGE_SEL_ERR_DATA_MISMATCH', this.graph.chart.locale)):this.error_0 == 3?(errorText = getString('RANGE_SEL_ERR_DATA_NOT_NUMERIC', this.graph.chart.locale)):this.error_0 == 1 && (errorText = getString('RANGE_SEL_ERR_MAX_LESS_MIN', this.graph.chart.locale));
    $inflate(graphBounds, -5);
    geErrorText = ($clinit_StrUtil() , drawTextInBounds(rnd, graphBounds, errorText, this.errorFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
    $addGraphicElement_0(this.graph, geErrorText);
    this.graph.setNeedsFormat(false);
    return;
  }
  width_0 = graphBounds.width_0;
  height = this.sliderLineHeight;
  top_0 = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.y_0 + (graphBounds.height_0 - (height + 45)) / 2)));
  sliderBkgRect = new CFRect(graphBounds.x_0, top_0, width_0, height);
  sliderBkgRect.width_0 = sliderBkgRect.width_0 + -4;
  sliderBkgRect.x_0 -= -2;
  this.minBubbleXPos = sliderBkgRect.x_0 + this.sliderBubbleDiameter / 2;
  this.maxBubbleXPos = sliderBkgRect.x_0 + sliderBkgRect.width_0 - this.sliderBubbleDiameter / 2 + 1;
  if (this.rangeSetFromOptions) {
    this.valPerPixel = (this.maxValue - this.minValue) / (this.maxBubbleXPos - this.minBubbleXPos - this.sliderBubbleDiameter);
    this.curMinBubbleXPos = (this.curMinimumValue - this.minValue) / this.valPerPixel + this.minBubbleXPos;
    this.curMinBubbleXPos < this.minBubbleXPos && (this.curMinBubbleXPos = this.minBubbleXPos);
    this.curMaxBubbleXPos = this.maxBubbleXPos - (this.maxValue - this.curMaximumValue) / this.valPerPixel;
    this.curMaxBubbleXPos > this.maxBubbleXPos && (this.curMaxBubbleXPos = this.maxBubbleXPos);
    this.rangeSetFromOptions = false;
  }
   else {
    if (isNaN_0(this.curMinBubbleXPos)) {
      this.curMinBubbleXPos = this.minBubbleXPos;
      this.curMaxBubbleXPos = this.maxBubbleXPos;
      this.valPerPixel = (this.maxValue - this.minValue) / (this.maxBubbleXPos - this.minBubbleXPos - this.sliderBubbleDiameter);
    }
    this.curMinimumValue = this.minValue + (this.curMinBubbleXPos - this.minBubbleXPos) * this.valPerPixel;
    this.curMaximumValue = this.maxValue - (this.maxBubbleXPos - this.curMaxBubbleXPos) * this.valPerPixel;
  }
  minText = getString('MINIMUM', this.graph.chart.locale);
  maxText = getString('MAXIMUM', this.graph.chart.locale);
  minDim = rnd.measureText_0(minText, this.sliderFont);
  maxDim = rnd.measureText_0(maxText, this.sliderFont);
  minValText = '' + this.curMinimumValue;
  maxValText = '' + this.curMaximumValue;
  if (typeIsDate(this.minCol.type_0)) {
    outputFormat = 'MM/dd/yyy';
    this.dateOutputFormat != null && (outputFormat = this.dateOutputFormat);
    minValText = FormatDate(fromDouble_0(this.curMinimumValue), outputFormat, this.graph.chart.locale, this.graph.chart.timeZone);
    maxValText = FormatDate(fromDouble_0(this.curMaximumValue), outputFormat, this.graph.chart.locale, this.graph.chart.timeZone);
  }
   else if (this.graph.numberFormatter) {
    $setAutoAbbreviateState(this.graph.numberFormatter, false);
    minValText = $formatNumber_1(this.graph.numberFormatter, this.curMinimumValue);
    maxValText = $formatNumber_1(this.graph.numberFormatter, this.curMaximumValue);
  }
  minValDim = rnd.measureText_0(minValText, this.sliderFont);
  maxValDim = rnd.measureText_0(maxValText, this.sliderFont);
  minValDim.width_0 > minDim.width_0 && (minDim = minValDim);
  maxValDim.width_0 > maxDim.width_0 && (maxDim = maxValDim);
  if (minDim.width_0 + maxDim.width_0 + 25 > graphBounds.width_0 || graphBounds.height_0 < this.sliderBubbleDiameter + 45) {
    showMinMaxText = false;
    top_0 = toDouble_0(fromDouble_0($wnd.Math.round(graphBounds.y_0 + (graphBounds.height_0 - height) / 2)));
    sliderBkgRect.y_0 = top_0;
  }
  ge = new GraphicElement;
  barShape = new CFShape_1(sliderBkgRect, new CFFill_1('#CDCDCD'), null);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, barShape);
  sliderCurBkgRect = new CFRect(this.curMinBubbleXPos, top_0, this.curMaxBubbleXPos - this.curMinBubbleXPos, height);
  selBarShape = new CFShape_1(sliderCurBkgRect, new CFFill_1('#99CCEE'), null);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, selBarShape);
  $addGraphicElement_0(this.graph, ge);
  this.minShape = $drawSliderBubbleAndGetShape(this, this.curMinBubbleXPos, sliderBkgRect.y_0 + sliderBkgRect.height_0 / 2);
  this.maxShape = $drawSliderBubbleAndGetShape(this, this.curMaxBubbleXPos, sliderBkgRect.y_0 + sliderBkgRect.height_0 / 2);
  if (showMinMaxText) {
    top_0 = sliderBkgRect.y_0 + sliderBkgRect.height_0 / 2 + this.sliderBubbleDiameter;
    minTextRect = new CFRect(sliderBkgRect.x_0, top_0, sliderBkgRect.width_0, 100);
    geMinText = ($clinit_StrUtil() , drawTextInBounds(rnd, minTextRect, minText, this.sliderFont, 0, 0, 5, null, null));
    $addGraphicElement_0(this.graph, geMinText);
    left = sliderBkgRect.x_0 + sliderBkgRect.width_0 - (maxDim.width_0 + 1);
    maxTextRect = new CFRect(left, top_0, sliderBkgRect.width_0, 100);
    geMaxText = drawTextInBounds(rnd, maxTextRect, maxText, this.sliderFont, 0, 0, 5, null, null);
    $addGraphicElement_0(this.graph, geMaxText);
    $setY_0(minTextRect, minTextRect.y_0 + minDim.height_0);
    geMinValText = drawTextInBounds(rnd, minTextRect, minValText, this.sliderFont, 0, 0, 5, null, null);
    $addGraphicElement_0(this.graph, geMinValText);
    $setY_0(maxTextRect, maxTextRect.y_0 + minDim.height_0);
    geMaxValText = drawTextInBounds(rnd, maxTextRect, maxValText, this.sliderFont, 0, 0, 5, null, null);
    $addGraphicElement_0(this.graph, geMaxValText);
  }
  if (!$usingCardBus(this.graph.chart)) {
    ddShape = new CFShape_1(this.graph.bnds, ($clinit_CFFill() , TRANSPARENT_0), null);
    ddShape.drillFilter = '{"filters":[]}';
    geDrill = new GraphicElement;
    !geDrill.shapeAry && (geDrill.shapeAry = new ArrayList);
    $add_1(geDrill.shapeAry, ddShape);
    $addGraphicElement_0(this.graph, geDrill);
  }
  this.graph.setNeedsFormat(false);
}
;
_.handleDrag_0 = function handleDrag_5(startX, startY, curX, curY){
  if (this.graph.rnd) {
    if (startX == curX && startY == curY)
      return false;
    if (!this.inDrag_0) {
      if ($pointInPath_0(this.minShape, round_int(startX), round_int(startY), this.graph.rnd)) {
        this.draggingMin = true;
        this.inDrag_0 = true;
        this.dragPointXOffset = startX - this.curMinBubbleXPos;
      }
       else if ($pointInPath_0(this.maxShape, round_int(startX), round_int(startY), this.graph.rnd)) {
        this.draggingMax = true;
        this.inDrag_0 = true;
        this.dragPointXOffset = startX - this.curMaxBubbleXPos;
      }
    }
    if (this.inDrag_0) {
      if (this.draggingMin) {
        this.curMinBubbleXPos = curX - this.dragPointXOffset;
        this.curMinBubbleXPos < this.minBubbleXPos && (this.curMinBubbleXPos = this.minBubbleXPos);
        this.curMinBubbleXPos > this.curMaxBubbleXPos - this.sliderBubbleDiameter && (this.curMinBubbleXPos = this.curMaxBubbleXPos - this.sliderBubbleDiameter);
      }
       else if (this.draggingMax) {
        this.curMaxBubbleXPos = curX - this.dragPointXOffset;
        this.curMaxBubbleXPos > this.maxBubbleXPos && (this.curMaxBubbleXPos = this.maxBubbleXPos);
        this.curMaxBubbleXPos < this.curMinBubbleXPos + this.sliderBubbleDiameter && (this.curMaxBubbleXPos = this.curMinBubbleXPos + this.sliderBubbleDiameter);
      }
      this.graph.setNeedsFormat(true);
      return true;
    }
  }
  return false;
}
;
_.handleDragEnd_0 = function handleDragEnd_5(startX, startY, curX, curY){
  var filter;
  if (this.curMinBubbleXPos == this.minBubbleXPos && this.curMaxBubbleXPos == this.maxBubbleXPos) {
    $removeChartOption(this.graph, 'row_filter');
    this.graph.drillFilter = 'none';
    $sendCardBusApplyFiltersMessage(this.graph.chart, 'none');
  }
   else {
    filter = $getCurFilterString_0(this);
    $addChartOption(this.graph, 'row_filter', filter);
  }
  this.inDrag_0 = false;
  this.draggingMin = false;
  this.draggingMax = false;
  return false;
}
;
_.processChartOptions = function processChartOptions_25(){
  var key, key$iterator, value_0;
  this.dateOutputFormat = null;
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'date_output_format':
          this.dateOutputFormat = value_0;
          this.dateOutputFormat = ($clinit_StrUtil() , entityDecodeString(this.dateOutputFormat));
          this.dateOutputFormat = convertBrToNewLine(this.dateOutputFormat);
          this.dateOutputFormat = convertPopChartDateMacros(this.dateOutputFormat);
          break;
        case 'row_filter':
          $setSelectionFromFilter_0(this, value_0);
      }
    }
  }
  if (this.graph.hasChartOptions() && this.graph.getChartOptionAsString('date_output_format') != null) {
    this.dateOutputFormat = this.graph.getChartOptionAsString('date_output_format');
    this.dateOutputFormat = ($clinit_StrUtil() , entityDecodeString(this.dateOutputFormat));
    this.dateOutputFormat = convertBrToNewLine(this.dateOutputFormat);
    this.dateOutputFormat = convertPopChartDateMacros(this.dateOutputFormat);
  }
}
;
_.removeFilter_1 = function removeFilter_4(filterToRemove){
  this.curMinBubbleXPos = this.minBubbleXPos;
  this.curMaxBubbleXPos = this.maxBubbleXPos;
  this.rangeSetFromOptions = false;
  this.curMinimumValue = this.minValue;
  this.curMaximumValue = this.maxValue;
  $removeChartOption(this.graph, 'row_filter');
  $setDrillFilter(this.graph, null);
  this.graph.setNeedsFormat(true);
  return true;
}
;
_.setData = function setData_24(data_0){
  var col, i, maxCol, maxIndex, maxType, minIndex, minType, values, values0;
  minIndex = -1;
  maxIndex = -1;
  for (i = 0; i < $getNumCols(data_0); i++) {
    col = $getColumn(data_0, i);
    $equals_2(col.mapping, 'MIN') && (minIndex = i);
    $equals_2(col.mapping, 'MAX') && (maxIndex = i);
  }
  minIndex == -1 && maxIndex != -1 && (minIndex = maxIndex);
  maxIndex == -1 && minIndex != -1 && (maxIndex = minIndex);
  this.minCol = $getColumn(data_0, minIndex);
  maxCol = $getColumn(data_0, maxIndex);
  minType = this.minCol.type_0;
  maxType = maxCol.type_0;
  if ($equals_2(minType, 'STRING') || $equals_2(maxType, 'STRING'))
    this.error_0 = 3;
  else if (typeIsDate(minType) && typeIsNumeric(maxType) || typeIsDate(maxType) && typeIsNumeric(minType))
    this.error_0 = 2;
  else {
    if (typeIsDate(minType)) {
      this.minValue = toDouble_0($getMinTimeMS(this.minCol));
      this.maxValue = toDouble_0($getMaxTimeMS(maxCol));
    }
     else {
      this.minValue = (values0 = $getValuesNonProjected(this.minCol, true, false) , getMinValueForValues(values0));
      this.maxValue = (values = $getValuesNonProjected(maxCol, true, false) , getMaxValueForValues(values));
    }
    this.maxValue < this.minValue && (this.error_0 = 1);
  }
}
;
_.setFrame = function setFrame_15(type_0, easingType, startTime, curTime, endTime, rnd){
}
;
_.setHoverEffects_0 = function setHoverEffects_11(hoverData, rnd){
  return false;
}
;
_.showCancelZoomIndicatorWhenFiltered = function showCancelZoomIndicatorWhenFiltered_1(){
  return false;
}
;
_.curMaxBubbleXPos = NaN;
_.curMaximumValue = NaN;
_.curMinBubbleXPos = NaN;
_.curMinimumValue = NaN;
_.dateOutputFormat = null;
_.dragPointXOffset = 0;
_.draggingMax = false;
_.draggingMin = false;
_.error_0 = 0;
_.inDrag_0 = false;
_.maxBubbleXPos = 0;
_.maxValue = 0;
_.minBubbleXPos = 0;
_.minCol = null;
_.minValue = 0;
_.rangeSetFromOptions = false;
_.sliderBubbleDiameter = 15;
_.sliderBubbleInnerDiameter = 9;
_.sliderFont = null;
_.sliderLineHeight = 3;
_.valPerPixel = 0;
var Lcom_domo_charting_graphs_HandlerRangeSelector_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerRangeSelector', 195);
function $addBackgroundFillIfSpecified(this$static){
  var bkgRect, ge;
  if (this$static.bkgColor) {
    bkgRect = new CFRect(0, 0, this$static.graph.chart.dimension.width_0, this$static.graph.chart.dimension.height_0);
    !!this$static.sGraph.annotationView && !!$getBndsOrLastBnds(this$static.sGraph.annotationView) && !this$static.sGraph.chart.hideAnnotations && (this$static.sGraph.annotationView.position == 2?$setWidth(bkgRect, bkgRect.width_0 - $getBndsOrLastBnds(this$static.sGraph.annotationView).width_0):$setHeight(bkgRect, bkgRect.height_0 - $getBndsOrLastBnds(this$static.sGraph.annotationView).height_0));
    ge = new GraphicElement_0(new CFShape_1(bkgRect, new CFFill(this$static.bkgColor), null));
    $add_0(this$static.graph.backGeAry, 0, ge);
  }
}

function $getCompArrowDim(this$static, valWidth, valHeight){
  var arrowRect;
  arrowRect = $getArrowRect(castTo(this$static.grphComp.handler, 100), new CFRect(0, 0, valWidth, valHeight));
  return new CFDimension(-arrowRect.x_0, arrowRect.height_0);
}

function $getGaugeDataGrid(this$static, data_0){
  var cell, col, cols_0, curValue, dg, firstValText, lastRow, lastValText, nextToLastRow, prevValue, row, rows_0;
  prevValue = $getValue($getFirstCell($getFirstVisibleRow(data_0)));
  curValue = $getValue($getFirstCell($getLastVisibleRow(data_0)));
  firstValText = this$static.graph.getLocalizedString('FIRST_VALUE');
  lastValText = this$static.graph.getLocalizedString('LAST_VALUE');
  if (this$static.graph.getChartOptionAsString('comp_data_used') != null && $equalsIgnoreCase(this$static.graph.getChartOptionAsString('comp_data_used'), 'last 2 values')) {
    if (data_0.numVisibleRows > 1) {
      lastRow = $getLastVisibleRow(data_0);
      prevValue = $getValue($getFirstCell($getPrevVisibleRow(this$static.graph.data_0, lastRow)));
      firstValText = this$static.graph.getLocalizedString('NEXTTOLAST_VALUE');
    }
  }
  if (this$static.showNextToLastOnCompGauge) {
    lastRow = $getLastVisibleRow(data_0);
    nextToLastRow = $getPrevVisibleCol(data_0, lastRow);
    !!nextToLastRow && (prevValue = $getValue($getFirstCell(nextToLastRow)));
  }
  rows_0 = new ArrayList;
  cols_0 = new ArrayList;
  row = new ColRowInfo_3(firstValText, '' + prevValue, 'DOUBLE', 0, null, true, 0);
  col = new ColRowInfo_3(null, lastValText, 'DOUBLE', 0, new Cell(curValue), false, 0);
  cell = $getFirstCell(col);
  cell.row = row;
  $put_0(row.cellMap, valueOf(0), cell);
  rows_0.array[rows_0.array.length] = row;
  cols_0.array[cols_0.array.length] = col;
  dg = new DataGrid_0('Test', 'Item-Value', rows_0, cols_0, null);
  return dg;
}

function $layoutItemsAndSetBounds(this$static, rnd, valDim, compValDim, compArrowDim, drawBnds){
  var baseLine, chartDim, compFontHeight, compGaugeRightOfVal, desc, lineBelow, lineLeft, lineTop, showCompGauge, showLine, showValGauge, singleFontHeight, top_0, totalCompWidth;
  chartDim = this$static.sGraph.chart.dimension;
  showLine = false;
  compGaugeRightOfVal = false;
  lineBelow = false;
  compFontHeight = $getLineHeight(this$static.compValueFont, rnd);
  singleFontHeight = $getLineHeight(this$static.valueFont, rnd);
  totalCompWidth = 0;
  !!this$static.grphComp && (totalCompWidth = compArrowDim.width_0 + 10 + compValDim.width_0);
  if (!!this$static.grphNum && !!valDim && !!this$static.grphComp && !!compValDim && !!compArrowDim) {
    showValGauge = true;
    if (drawBnds.height_0 >= $wnd.Math.max(compFontHeight, singleFontHeight) + 20) {
      if (drawBnds.width_0 > totalCompWidth + valDim.width_0) {
        showCompGauge = true;
        compGaugeRightOfVal = true;
        showLine = true;
        lineBelow = true;
      }
       else if (drawBnds.height_0 >= compFontHeight + singleFontHeight + 20) {
        showCompGauge = true;
        showLine = true;
        lineBelow = true;
      }
       else if (drawBnds.height_0 > singleFontHeight + 20) {
        showCompGauge = false;
        showLine = true;
        lineBelow = true;
      }
       else {
        showValGauge = false;
        showCompGauge = false;
        showLine = true;
      }
    }
     else {
      if (drawBnds.width_0 > totalCompWidth + valDim.width_0 + 72) {
        showCompGauge = true;
        compGaugeRightOfVal = true;
        showLine = true;
        lineBelow = false;
      }
       else if (drawBnds.width_0 >= totalCompWidth + 72) {
        showCompGauge = false;
        showLine = true;
        lineBelow = false;
      }
       else {
        showCompGauge = false;
        showValGauge = false;
        showLine = true;
      }
    }
  }
   else if (!!this$static.grphNum && !!valDim) {
    showValGauge = true;
    showCompGauge = false;
    if (drawBnds.height_0 >= singleFontHeight + 20) {
      showLine = true;
      lineBelow = true;
    }
     else if (drawBnds.width_0 > valDim.width_0 + 72) {
      showLine = true;
      lineBelow = false;
    }
     else {
      showValGauge = false;
      showLine = true;
    }
  }
   else if (!!this$static.grphComp && !!compValDim && !!compArrowDim) {
    showValGauge = false;
    showCompGauge = true;
    if (drawBnds.height_0 >= compFontHeight + 20) {
      showLine = true;
      lineBelow = true;
    }
     else if (drawBnds.width_0 > totalCompWidth + 72) {
      showLine = true;
      lineBelow = false;
    }
     else {
      showCompGauge = false;
      showLine = true;
    }
  }
   else {
    showValGauge = false;
    showCompGauge = false;
  }
  baseLine = 0;
  top_0 = drawBnds.y_0;
  lineTop = drawBnds.y_0;
  lineLeft = drawBnds.x_0;
  if (showValGauge) {
    this$static.grphNum.setBounds(new CFRect(drawBnds.x_0, top_0, round_int(valDim.width_0) + 2, round_int(valDim.height_0) + 2));
    desc = $getDescender(this$static.valueFont, rnd);
    baseLine = $getBottom(this$static.grphNum.bnds) - desc;
    lineTop = $getBottom(this$static.grphNum.bnds);
    lineLeft = $getRight(this$static.grphNum.bnds);
  }
   else 
    !this$static.hideSingleValue && !!this$static.grphNum && $setBounds_0(this$static.grphNum, $intern_12, $intern_12, 10, 10);
  if (showCompGauge) {
    if (compGaugeRightOfVal) {
      if (showValGauge) {
        top_0 = baseLine - (compValDim.height_0 - $getDescender(this$static.compValueFont, rnd));
        $setBounds_0(this$static.grphComp, round_int($getRight(this$static.grphNum.bnds) + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
      }
       else {
        $setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
      }
      lineLeft = $getRight(this$static.grphComp.bnds);
    }
     else {
      showValGauge?$setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int($getBottom(this$static.grphNum.bnds)), round_int(compValDim.width_0), round_int(compValDim.height_0)):$setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
      lineTop = $getBottom(this$static.grphComp.bnds);
    }
  }
   else 
    !this$static.hideComparative && !!this$static.grphComp && $setBounds_0(this$static.grphComp, $intern_12, $intern_12, 10, 10);
  showLine?!showValGauge && !showCompGauge?$setBounds_0(this$static.sGraph, 0, 0, round_int(chartDim.width_0), round_int(chartDim.height_0)):lineBelow?$setBounds_0(this$static.sGraph, 0, round_int(lineTop), round_int(chartDim.width_0), round_int(chartDim.height_0 - lineTop)):$setBounds_0(this$static.sGraph, round_int(lineLeft), round_int(drawBnds.y_0), round_int(chartDim.width_0 - lineLeft), round_int(chartDim.height_0 - drawBnds.y_0)):$setBounds_0(this$static.sGraph, $intern_12, $intern_12, 100, 100);
}

function $setComparativeValFontSize(this$static, value_0){
  if (value_0 == null)
    return;
  value_0 = value_0.toLowerCase();
  ($equals_2(value_0, 'medium') || $equals_2(value_0, 'large')) && $setSize_0(this$static.compValueFont, 24);
}

function $setDepData(this$static, data_0){
  var comp, comp$iterator, subGraph;
  if (!this$static.hideComparative || !this$static.hideSingleValue) {
    this$static.gaugeData = $getGaugeDataGrid(this$static, data_0);
    if (this$static.gaugeData) {
      if (this$static.graph.dependentComps) {
        for (comp$iterator = new ArrayList$1(this$static.graph.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
          comp = castTo($next_3(comp$iterator), 23);
          if (instanceOf(comp, 43)) {
            subGraph = castTo(comp, 43);
            subGraph.typeAttributes.isSingleValue?subGraph.setData($clone(data_0)):subGraph.setData(this$static.gaugeData);
            $setNumberFormatter(subGraph, new NumberFormatter_0(this$static.graph.numberFormatter));
            subGraph.processChartOptions();
            comp.setNeedsFormat(true);
          }
        }
      }
    }
  }
}

function $setSingleValFontSize(this$static, value_0){
  if (value_0 == null)
    return;
  value_0 = value_0.toLowerCase();
  $equals_2(value_0, 'small') && $setSize_0(this$static.valueFont, 16);
}

function $setSizes(this$static){
  var chartDim, compArrowDim, compValDim, leftScale, messageHeight, rnd, top_0, valDim, value_0, formattedValue, dataCell, compGaugeHandler, prevValue, curValue, percentValue, formattedCompValue;
  messageHeight = 0;
  !!this$static.sGraph && !!this$static.sGraph.warningGoalMessageDim && (messageHeight = this$static.sGraph.warningGoalMessageDim.height_0);
  if (!!this$static.graph.rnd && (!this$static.hideSingleValue || !this$static.hideComparative)) {
    rnd = this$static.graph.rnd;
    chartDim = this$static.sGraph.chart.dimension;
    valDim = null;
    compValDim = null;
    compArrowDim = null;
    !!this$static.grphNum && (valDim = (value_0 = $getCurrentValueOfVisibleForGauge(castTo(this$static.grphNum.handler, 113)) , formattedValue = this$static.grphNum.formatNumber(value_0) , rnd.measureText_0(formattedValue, this$static.valueFont)));
    if (!!this$static.grphComp && !!this$static.grphComp.handler && instanceOf(this$static.grphComp.handler, 100)) {
      compValDim = (dataCell = $getFirstCell($getColumn(this$static.gaugeData, 0)) , compGaugeHandler = castTo(this$static.grphComp.handler, 100) , prevValue = getDouble_0($getName(dataCell.row), 0) , curValue = $getValue(dataCell) , percentValue = getPercentValue(prevValue, curValue) , formattedCompValue = $getValuesStrForGauge(compGaugeHandler, percentValue, prevValue, curValue) , rnd.measureText_0(formattedCompValue, this$static.compValueFont));
      compArrowDim = $getCompArrowDim(this$static, compValDim.width_0, compValDim.height_0);
    }
    $layoutItemsAndSetBounds(this$static, rnd, valDim, compValDim, compArrowDim, new CFRect(0, messageHeight, chartDim.width_0, chartDim.height_0 - messageHeight));
  }
  if (this$static.sGraph.bnds.x_0 < $intern_12) {
    top_0 = this$static.sGraph.bnds.y_0;
    $setY_0(this$static.sGraph.bnds, messageHeight);
    $setHeight(this$static.sGraph.bnds, this$static.sGraph.bnds.height_0 + top_0 - messageHeight);
    leftScale = $getScaleByPosition(this$static.sGraph, 0);
    leftScale.startMargin = top_0 - messageHeight;
  }
}

function HandlerSparkBar(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
  this.valueFont = new CFFont_0(null, 24, ($clinit_CFColor() , BLACK));
  this.compValueFont = new CFFont_0(null, 16, BLACK);
}

defineClass(328, 60, $intern_37, HandlerSparkBar);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_11(chart){
  var compAry, dimension, graphHeight, halfGraphWidth, ta;
  this.graph.removeDependentCompsFromCompArray();
  $clearDependentComponents(this.graph);
  dimension = this.graph.chart.dimension;
  if (this.graph.hasChartOptions()) {
    this.hideSingleValue = isTrue(this.graph.getChartOptionAsString('hide_single_value'));
    this.hideComparative = isTrue(this.graph.getChartOptionAsString('hide_change_value'));
    this.sGraph.hideAnnotationList = isTrue(this.graph.getChartOptionAsString('hide_annotation_list'));
    this.hideSingleValue && !!this.grphNum && (this.grphNum = null);
    this.hideComparative && !!this.grphComp && (this.grphComp = null);
  }
  if (this.hideSingleValue && this.hideComparative) {
    $setBounds_0(this.graph, 0, 0, round_int(dimension.width_0), round_int(dimension.height_0));
    return;
  }
  graphHeight = dimension.height_0 / 2;
  halfGraphWidth = dimension.width_0 / 2;
  compAry = this.graph.chart.compAry;
  if (!this.grphNum && !this.hideSingleValue || !this.grphComp) {
    ta = new TypeAttributes;
    if (!this.hideSingleValue) {
      ta.isSingleValue = true;
      this.grphNum = createGraph('graphNum', 14, ta, this.graph.chart, false, null);
      $setBounds_0(this.grphNum, 0, 0, round_int(halfGraphWidth), round_int(graphHeight));
      if (instanceOf(this.grphNum.handler, 113)) {
        castTo(this.grphNum.handler, 113).useAllAvailableSpace = true;
        castTo(this.grphNum.handler, 113).defaultCurValToLastRow = true;
        castTo(this.grphNum.handler, 113).isUsedAsSubGraph = true;
      }
      $setChartOptions(this.grphNum, this.graph.chartOptions);
      this.grphNum.processChartOptions();
      $addDependentComp(this.graph, this.grphNum);
    }
    if (!this.hideComparative) {
      ta = new TypeAttributes;
      ta.isCompNoFillGauge = true;
      this.grphComp = createGraph('graphComp', 15, ta, this.graph.chart, false, null);
      $setBounds_0(this.grphComp, round_int(halfGraphWidth), 0, round_int(halfGraphWidth), round_int(graphHeight));
      if (instanceOf(this.grphComp.handler, 100)) {
        castTo(this.grphComp.handler, 100).useAllAvailableSpace = true;
        castTo(this.grphComp.handler, 100).isUsedAsSubGraph = true;
        castTo(this.grphComp.handler, 100).arrowStyle = 2;
      }
      $setChartOptions(this.grphComp, this.graph.chartOptions);
      this.grphComp.processChartOptions();
      $addDependentComp(this.graph, this.grphComp);
    }
    $setBounds_0(this.graph, 0, round_int(graphHeight), round_int(dimension.width_0), round_int(graphHeight));
  }
   else {
    !!this.grphNum && $addDependentComp(this.graph, this.grphNum);
    !!this.grphComp && $addDependentComp(this.graph, this.grphComp);
  }
  !!this.grphNum && $indexOf_1(compAry, this.grphNum, 0) == -1 && $add_1(compAry, this.grphNum);
  !!this.grphComp && $indexOf_1(compAry, this.grphComp, 0) == -1 && $add_1(compAry, this.grphComp);
  $addAnnotationListIfNeeded(this, chart);
}
;
_.closeZoomInFilter = function closeZoomInFilter_3(){
  $setNeedsFormat_2(this.sGraph, true);
  !!this.grphNum && this.grphNum.setNeedsFormat(true);
  !!this.grphComp && this.grphComp.setNeedsFormat(true);
  this.gaugeData = null;
  return false;
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_9(sGraph, type_0, curTime, valueScale){
  $createDrawObjectsForFrame(this, sGraph, type_0, curTime, valueScale);
  $addBackgroundFillIfSpecified(this);
}
;
_.drawAllBars = function drawAllBars_1(index_0, hoverData){
  $drawAllBars(this, index_0, hoverData);
  $addBackgroundFillIfSpecified(this);
}
;
_.filterDataFromSrsShapes = function filterDataFromSrsShapes_0(shapeInfoList){
  $filterDataFromSrsShapes(this, shapeInfoList);
  $setNeedsFormat_2(this.sGraph, true);
  !!this.grphNum && this.grphNum.setNeedsFormat(true);
  !!this.grphComp && this.grphComp.setNeedsFormat(true);
  this.gaugeData = null;
}
;
_.format_0 = function format_21(rnd){
  $setSizes(this);
  $format_0(this, rnd);
}
;
_.preScaleLegendFormat = function preScaleLegendFormat_0(){
  var scale, scale$iterator;
  $setDepData(this, this.sGraph.data_0);
  this.sGraph.allowAnnotationSpaceWithHiddenScales = true;
  for (scale$iterator = new ArrayList$1(this.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.isHidden = true;
  }
  $setSizes(this);
  return;
}
;
_.processChartOptions = function processChartOptions_26(){
  var key, key$iterator, value_0, valueScale;
  $processChartOptions_4(this);
  valueScale = $getValueScaleByNumber(this.sGraph, 0);
  !!valueScale && (valueScale.alwaysIncludeZero = false);
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'size_single_val':
          $setSingleValFontSize(this, value_0);
          break;
        case 'size_change_val':
          $setComparativeValFontSize(this, value_0);
          break;
        case 'bkg_fill_color':
          this.bkgColor = new CFColor_2(value_0);
      }
    }
  }
}
;
_.setData = function setData_25(data_0){
  $setData_2(this, data_0);
  $setNumberFormatFromColumnFormat(this.graph);
  this.graph.updateNumberFormats(true);
  $hasTimeData(data_0) && $sortRows(data_0, SORT_DATE);
  $setDepData(this, this.sGraph.data_0);
}
;
_.hideComparative = false;
_.hideSingleValue = false;
_.showNextToLastOnCompGauge = false;
var Lcom_domo_charting_graphs_HandlerSparkBar_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerSparkBar', 328);
function $addBackgroundFillIfSpecified_0(this$static){
  var bkgRect, ge;
  if (this$static.bkgColor) {
    bkgRect = new CFRect(0, 0, this$static.graph.chart.dimension.width_0, this$static.graph.chart.dimension.height_0);
    !!this$static.sGraph.annotationView && !!$getBndsOrLastBnds(this$static.sGraph.annotationView) && !this$static.sGraph.chart.hideAnnotations && (this$static.sGraph.annotationView.position == 2?$setWidth(bkgRect, bkgRect.width_0 - $getBndsOrLastBnds(this$static.sGraph.annotationView).width_0):$setHeight(bkgRect, bkgRect.height_0 - $getBndsOrLastBnds(this$static.sGraph.annotationView).height_0));
    ge = new GraphicElement_0(new CFShape_1(bkgRect, new CFFill(this$static.bkgColor), null));
    $add_0(this$static.graph.backGeAry, 0, ge);
  }
}

function $getCompArrowDim_0(this$static, valWidth, valHeight){
  var arrowRect;
  arrowRect = $getArrowRect(castTo(this$static.grphComp.handler, 100), new CFRect(0, 0, valWidth, valHeight));
  return new CFDimension(-arrowRect.x_0, arrowRect.height_0);
}

function $getGaugeDataGrid_0(this$static, data_0){
  var cell, col, cols_0, curValue, dg, firstValText, lastRow, lastValText, nextToLastRow, prevValue, row, rows_0;
  prevValue = $getValue($getFirstCell($getFirstVisibleRow(data_0)));
  curValue = $getValue($getFirstCell($getLastVisibleRow(data_0)));
  firstValText = this$static.graph.getLocalizedString('FIRST_VALUE');
  lastValText = this$static.graph.getLocalizedString('LAST_VALUE');
  if (this$static.graph.getChartOptionAsString('comp_data_used') != null && $equalsIgnoreCase(this$static.graph.getChartOptionAsString('comp_data_used'), 'last 2 values')) {
    if (data_0.numVisibleRows > 1) {
      lastRow = $getLastVisibleRow(data_0);
      prevValue = $getValue($getFirstCell($getPrevVisibleRow(this$static.graph.data_0, lastRow)));
      firstValText = this$static.graph.getLocalizedString('NEXTTOLAST_VALUE');
    }
  }
  if (this$static.showNextToLastOnCompGauge) {
    lastRow = $getLastVisibleRow(data_0);
    nextToLastRow = $getPrevVisibleCol(data_0, lastRow);
    !!nextToLastRow && (prevValue = $getValue($getFirstCell(nextToLastRow)));
  }
  rows_0 = new ArrayList;
  cols_0 = new ArrayList;
  row = new ColRowInfo_3(firstValText, '' + prevValue, 'DOUBLE', 0, null, true, 0);
  col = new ColRowInfo_3(null, lastValText, 'DOUBLE', 0, new Cell(curValue), false, 0);
  cell = $getFirstCell(col);
  cell.row = row;
  $put_0(row.cellMap, valueOf(0), cell);
  rows_0.array[rows_0.array.length] = row;
  cols_0.array[cols_0.array.length] = col;
  dg = new DataGrid_0('Test', 'Item-Value', rows_0, cols_0, null);
  return dg;
}

function $layoutItemsAndSetBounds_0(this$static, rnd, valDim, compValDim, compArrowDim, drawBnds){
  var baseLine, chartDim, compFontHeight, compGaugeRightOfVal, desc, halfLineWidth, lineBelow, lineLeft, lineTop, showCompGauge, showValGauge, singleFontHeight, top_0, totalCompWidth;
  chartDim = this$static.sGraph.chart.dimension;
  compGaugeRightOfVal = false;
  lineBelow = false;
  compFontHeight = $getLineHeight(this$static.compValueFont, rnd);
  singleFontHeight = $getLineHeight(this$static.valueFont, rnd);
  totalCompWidth = 0;
  !!this$static.grphComp && (totalCompWidth = compArrowDim.width_0 + 10 + compValDim.width_0);
  if (!!this$static.grphNum && !!valDim && !!this$static.grphComp && !!compValDim && !!compArrowDim) {
    showValGauge = true;
    if (drawBnds.height_0 >= $wnd.Math.max(compFontHeight, singleFontHeight) + 20) {
      if (drawBnds.width_0 > totalCompWidth + valDim.width_0) {
        showCompGauge = true;
        compGaugeRightOfVal = true;
        lineBelow = true;
      }
       else if (drawBnds.height_0 >= compFontHeight + singleFontHeight + 20) {
        showCompGauge = true;
        lineBelow = true;
      }
       else if (drawBnds.height_0 > singleFontHeight + 20) {
        showCompGauge = false;
        lineBelow = true;
      }
       else {
        showValGauge = false;
        showCompGauge = false;
      }
    }
     else {
      if (drawBnds.width_0 > totalCompWidth + valDim.width_0 + 72) {
        showCompGauge = true;
        compGaugeRightOfVal = true;
        lineBelow = false;
      }
       else if (drawBnds.width_0 >= totalCompWidth + 72) {
        showCompGauge = false;
        lineBelow = false;
      }
       else {
        showCompGauge = false;
        showValGauge = false;
      }
    }
  }
   else if (!!this$static.grphNum && !!valDim) {
    showValGauge = true;
    showCompGauge = false;
    drawBnds.height_0 >= singleFontHeight + 20?(lineBelow = true):drawBnds.width_0 > valDim.width_0 + 72?(lineBelow = false):(showValGauge = false);
  }
   else if (!!this$static.grphComp && !!compValDim && !!compArrowDim) {
    showValGauge = false;
    showCompGauge = true;
    drawBnds.height_0 >= compFontHeight + 20?(lineBelow = true):drawBnds.width_0 > totalCompWidth + 72?(lineBelow = false):(showCompGauge = false);
  }
   else {
    showValGauge = false;
    showCompGauge = false;
  }
  baseLine = 0;
  top_0 = drawBnds.y_0;
  lineTop = drawBnds.y_0;
  lineLeft = drawBnds.x_0;
  if (this$static.grphNum) {
    if (showValGauge) {
      this$static.grphNum.setBounds(new CFRect(drawBnds.x_0, top_0, round_int(valDim.width_0) + 2, round_int(valDim.height_0) + 2));
      desc = $getDescender(this$static.valueFont, rnd);
      baseLine = $getBottom(this$static.grphNum.bnds) - desc;
      lineTop = $getBottom(this$static.grphNum.bnds);
      lineLeft = $getRight(this$static.grphNum.bnds);
    }
     else 
      this$static.hideSingleValue || $setBounds_0(this$static.grphNum, $intern_12, $intern_12, 10, 10);
  }
  if (this$static.grphComp) {
    if (showCompGauge) {
      if (compGaugeRightOfVal) {
        if (showValGauge) {
          top_0 = baseLine - (compValDim.height_0 - $getDescender(this$static.compValueFont, rnd));
          $setBounds_0(this$static.grphComp, round_int($getRight(this$static.grphNum.bnds) + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
        }
         else {
          $setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
        }
        lineLeft = $getRight(this$static.grphComp.bnds);
      }
       else {
        showValGauge?$setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int($getBottom(this$static.grphNum.bnds)), round_int(compValDim.width_0), round_int(compValDim.height_0)):$setBounds_0(this$static.grphComp, round_int(drawBnds.x_0 + compArrowDim.width_0 + 10), round_int(top_0), round_int(compValDim.width_0), round_int(compValDim.height_0));
        lineTop = $getBottom(this$static.grphComp.bnds);
      }
    }
     else 
      this$static.hideComparative || $setBounds_0(this$static.grphComp, $intern_12, $intern_12, 10, 10);
  }
  halfLineWidth = $getLineWidthFromThicknessOverride(this$static, 2) / 2 + 1;
  !showValGauge && !showCompGauge?$setBounds_0(this$static.sGraph, 0, 0, round_int(chartDim.width_0), round_int(chartDim.height_0 - halfLineWidth)):lineBelow?$setBounds_0(this$static.sGraph, 0, round_int(lineTop), round_int(chartDim.width_0), round_int(chartDim.height_0 - lineTop - halfLineWidth)):$setBounds_0(this$static.sGraph, round_int(lineLeft), round_int(drawBnds.y_0), round_int(chartDim.width_0 - lineLeft), round_int(chartDim.height_0 - drawBnds.y_0));
}

function $setComparativeValFontSize_0(this$static, value_0){
  if (value_0 == null)
    return;
  value_0 = value_0.toLowerCase();
  ($equals_2(value_0, 'medium') || $equals_2(value_0, 'large')) && $setSize_0(this$static.compValueFont, 24);
}

function $setDepData_0(this$static, data_0){
  var comp, comp$iterator, subGraph;
  if (!this$static.hideComparative || !this$static.hideSingleValue) {
    this$static.gaugeData = $getGaugeDataGrid_0(this$static, data_0);
    if (!!this$static.gaugeData && !!this$static.graph.dependentComps) {
      for (comp$iterator = new ArrayList$1(this$static.graph.dependentComps); comp$iterator.i < comp$iterator.this$01.array.length;) {
        comp = castTo($next_3(comp$iterator), 23);
        if (instanceOf(comp, 43)) {
          subGraph = castTo(comp, 43);
          subGraph.typeAttributes.isSingleValue?subGraph.setData($clone(data_0)):subGraph.setData(this$static.gaugeData);
          $setNumberFormatter(subGraph, new NumberFormatter_0(this$static.graph.numberFormatter));
          subGraph.processChartOptions();
          comp.setNeedsFormat(true);
        }
      }
    }
  }
}

function $setSingleValFontSize_0(this$static, value_0){
  if (value_0 == null)
    return;
  value_0 = value_0.toLowerCase();
  $equals_2(value_0, 'small') && $setSize_0(this$static.valueFont, 16);
}

function $setSizes_0(this$static){
  var chartDim, compArrowDim, compValDim, drawBnds, leftScale, messageHeight, rnd, top_0, valDim, value_0, formattedValue, dataCell, compGaugeHandler, prevValue, curValue, percentValue, formattedCompValue;
  messageHeight = 0;
  !!this$static.sGraph && !!this$static.sGraph.warningGoalMessageDim && (messageHeight = this$static.sGraph.warningGoalMessageDim.height_0);
  if (!!this$static.graph.rnd && (!this$static.hideSingleValue || !this$static.hideComparative)) {
    rnd = this$static.graph.rnd;
    chartDim = this$static.sGraph.chart.dimension;
    valDim = null;
    compValDim = null;
    compArrowDim = null;
    !!this$static.grphNum && (valDim = (value_0 = $getCurrentValueOfVisibleForGauge(castTo(this$static.grphNum.handler, 113)) , formattedValue = this$static.grphNum.formatNumber(value_0) , rnd.measureText_0(formattedValue, this$static.valueFont)));
    if (!!this$static.grphComp && !!this$static.grphComp.handler && instanceOf(this$static.grphComp.handler, 100)) {
      compValDim = (dataCell = $getFirstCell($getColumn(this$static.gaugeData, 0)) , compGaugeHandler = castTo(this$static.grphComp.handler, 100) , prevValue = getDouble_0($getName(dataCell.row), 0) , curValue = $getValue(dataCell) , percentValue = getPercentValue(prevValue, curValue) , formattedCompValue = $getValuesStrForGauge(compGaugeHandler, percentValue, prevValue, curValue) , rnd.measureText_0(formattedCompValue, this$static.compValueFont));
      compArrowDim = $getCompArrowDim_0(this$static, compValDim.width_0, compValDim.height_0);
    }
    drawBnds = new CFRect(0, messageHeight, chartDim.width_0, chartDim.height_0 - messageHeight);
    if (this$static.textLeftMargin > 0) {
      $setX_0(drawBnds, this$static.textLeftMargin);
      $setWidth(drawBnds, drawBnds.width_0 - this$static.textLeftMargin);
    }
    $layoutItemsAndSetBounds_0(this$static, rnd, valDim, compValDim, compArrowDim, drawBnds);
  }
  if (this$static.sGraph.bnds.x_0 < $intern_12) {
    top_0 = this$static.sGraph.bnds.y_0;
    $setY_0(this$static.sGraph.bnds, messageHeight);
    $setHeight(this$static.sGraph.bnds, this$static.sGraph.bnds.height_0 + top_0 - messageHeight);
    leftScale = $getScaleByPosition(this$static.sGraph, 0);
    leftScale.startMargin = top_0 - messageHeight;
  }
}

function HandlerSparkLine(){
  HandlerLine.call(this);
  this.valueFont = new CFFont_0(null, 24, ($clinit_CFColor() , BLACK));
  this.compValueFont = new CFFont_0(null, 16, BLACK);
}

defineClass(330, 110, $intern_42, HandlerSparkLine);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_12(chart){
  var compAry, dimension, graphHeight, halfGraphWidth, ta;
  this.graph.removeDependentCompsFromCompArray();
  $clearDependentComponents(this.graph);
  dimension = this.graph.chart.dimension;
  if (this.graph.hasChartOptions()) {
    this.hideSingleValue = isTrue(this.graph.getChartOptionAsString('hide_single_value'));
    this.hideComparative = isTrue(this.graph.getChartOptionAsString('hide_change_value'));
    this.sGraph.hideAnnotationList = isTrue(this.graph.getChartOptionAsString('hide_annotation_list'));
    this.hideSingleValue && !!this.grphNum && (this.grphNum = null);
    this.hideComparative && !!this.grphComp && (this.grphComp = null);
  }
  if (this.hideSingleValue && this.hideComparative) {
    $setBounds_0(this.graph, 0, 0, round_int(dimension.width_0), round_int(dimension.height_0));
    return;
  }
  graphHeight = dimension.height_0 / 2;
  halfGraphWidth = dimension.width_0 / 2;
  compAry = this.graph.chart.compAry;
  if (!this.grphNum && !this.hideSingleValue || !this.grphComp) {
    ta = new TypeAttributes;
    if (!this.hideSingleValue) {
      ta.isSingleValue = true;
      this.grphNum = createGraph('graphNum', 14, ta, this.graph.chart, false, null);
      $setBounds_0(this.grphNum, 0, 0, round_int(halfGraphWidth), round_int(graphHeight));
      if (instanceOf(this.grphNum.handler, 113)) {
        castTo(this.grphNum.handler, 113).useAllAvailableSpace = true;
        castTo(this.grphNum.handler, 113).defaultCurValToLastRow = true;
        castTo(this.grphNum.handler, 113).isUsedAsSubGraph = true;
      }
      $setChartOptions(this.grphNum, this.graph.chartOptions);
      this.grphNum.processChartOptions();
      $addDependentComp(this.graph, this.grphNum);
    }
    if (!this.hideComparative) {
      ta = new TypeAttributes;
      ta.isCompNoFillGauge = true;
      this.grphComp = createGraph('graphComp', 15, ta, this.graph.chart, false, null);
      $setBounds_0(this.grphComp, round_int(halfGraphWidth), 0, round_int(halfGraphWidth), round_int(graphHeight));
      if (instanceOf(this.grphComp.handler, 100)) {
        castTo(this.grphComp.handler, 100).useAllAvailableSpace = true;
        castTo(this.grphComp.handler, 100).isUsedAsSubGraph = true;
        castTo(this.grphComp.handler, 100).arrowStyle = 2;
      }
      $setChartOptions(this.grphComp, this.graph.chartOptions);
      this.grphComp.processChartOptions();
      $addDependentComp(this.graph, this.grphComp);
    }
    $setBounds_0(this.graph, 0, round_int(graphHeight), round_int(dimension.width_0), round_int(graphHeight));
  }
   else {
    !!this.grphNum && $addDependentComp(this.graph, this.grphNum);
    !!this.grphComp && $addDependentComp(this.graph, this.grphComp);
  }
  !!this.grphNum && $indexOf_1(compAry, this.grphNum, 0) == -1 && $add_1(compAry, this.grphNum);
  !!this.grphComp && $indexOf_1(compAry, this.grphComp, 0) == -1 && $add_1(compAry, this.grphComp);
  $addAnnotationListIfNeeded(this, chart);
}
;
_.closeZoomInFilter = function closeZoomInFilter_4(){
  $setNeedsFormat_2(this.sGraph, true);
  !!this.grphNum && this.grphNum.setNeedsFormat(true);
  !!this.grphComp && this.grphComp.setNeedsFormat(true);
  this.gaugeData = null;
  return false;
}
;
_.createDrawObjectsForFrame = function createDrawObjectsForFrame_10(sGraph, type_0, curTime, valueScale){
  $createDrawObjectsForFrame_2(this, sGraph, type_0, curTime, valueScale);
  $addBackgroundFillIfSpecified_0(this);
}
;
_.drawAllLinesAndPoints = function drawAllLinesAndPoints_1(sGraph, index_0){
  $drawAllLinesAndPoints(this, sGraph, index_0);
  $addBackgroundFillIfSpecified_0(this);
}
;
_.filterDataFromSrsShapes = function filterDataFromSrsShapes_1(shapeInfoList){
  $filterDataFromSrsShapes(this, shapeInfoList);
  $setNeedsFormat_2(this.sGraph, true);
  !!this.grphNum && this.grphNum.setNeedsFormat(true);
  !!this.grphComp && this.grphComp.setNeedsFormat(true);
  this.gaugeData = null;
}
;
_.format_0 = function format_22(rnd){
  this.graph.typeAttributes.curvedLines = true;
  this.graph.getChartOptionAsString('spark_line_style') != null && $equalsIgnoreCase(this.graph.getChartOptionAsString('spark_line_style'), 'plain') && (this.graph.typeAttributes.curvedLines = false);
  $setSizes_0(this);
  $format_0(this, rnd);
}
;
_.getBackGEForAreaBelowLineShapes = function getBackGEForAreaBelowLineShapes_0(lineInfo, pathAry){
  var areaPath, fillColor, geArea;
  geArea = new GraphicElement;
  areaPath = $getAreaBelowLinePath(this, pathAry, $getLineWidthFromThicknessOverride(this, 2) / 2 + 1);
  if (!this.fillBelowSingleLine) {
    fillColor = $duplicate_0(lineInfo.stroke_0.color_0);
    fillColor.alpha_0 = 16;
    this.fillBelowSingleLine = new CFFill(fillColor);
  }
  $addShape(geArea, new CFShape_0(areaPath, ($clinit_CFFill() , WHITE_0), null));
  $addShape(geArea, new CFShape_0(areaPath, this.fillBelowSingleLine, null));
  return geArea;
}
;
_.preScaleLegendFormat = function preScaleLegendFormat_1(){
  var scale, scale$iterator;
  $setDepData_0(this, this.sGraph.data_0);
  this.sGraph.allowAnnotationSpaceWithHiddenScales = true;
  for (scale$iterator = new ArrayList$1(this.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.isHidden = true;
  }
  $setSizes_0(this);
  return;
}
;
_.processChartOptions = function processChartOptions_27(){
  var key, key$iterator, value_0, valueScale;
  $processChartOptions_7(this);
  valueScale = $getValueScaleByNumber(this.sGraph, 0);
  !!valueScale && (valueScale.alwaysIncludeZero = false);
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'size_single_val':
          $setSingleValFontSize_0(this, value_0);
          break;
        case 'size_change_val':
          $setComparativeValFontSize_0(this, value_0);
          break;
        case 'bkg_fill_color':
          this.bkgColor = new CFColor_2(value_0);
          break;
        case 'summary_left_margin':
          this.textLeftMargin = getInt(value_0, 0);
      }
    }
  }
}
;
_.setData = function setData_26(data_0){
  $setData_5(this, data_0);
  $setNumberFormatFromColumnFormat(this.graph);
  this.graph.updateNumberFormats(true);
  $hasTimeData(data_0) && $sortRows(data_0, SORT_DATE);
  $setDepData_0(this, this.sGraph.data_0);
}
;
_.hideComparative = false;
_.hideSingleValue = false;
_.showNextToLastOnCompGauge = false;
_.textLeftMargin = 0;
var Lcom_domo_charting_graphs_HandlerSparkLine_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerSparkLine', 330);
function HandlerStock(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(334, 60, $intern_37, HandlerStock);
_.calcMinMaxOverride = function calcMinMaxOverride_6(scale, curMin, curMax){
  var cell, cell$iterator, entry, highVal, lowVal, max_0, min_0, outerIter, row;
  row = $getFirstVisibleRow(this.graph.data_0);
  max_0 = $intern_20;
  min_0 = $intern_19;
  while (row) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      highVal = $getValue(cell);
      !isNaN(highVal) && highVal > max_0 && (max_0 = highVal);
      !isNaN(highVal) && highVal < min_0 && (min_0 = highVal);
      if ($getMetaDataCell(cell, 0)) {
        lowVal = $getValue($getMetaDataCell(cell, 0));
        !isNaN(lowVal) && lowVal > max_0 && (max_0 = lowVal);
        !isNaN(lowVal) && lowVal < min_0 && (min_0 = lowVal);
      }
    }
    row = $getNextVisibleRow(this.graph.data_0, row);
  }
  return new MinMax(min_0, max_0);
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_12(sGraph, rows_0, baseScale, valScale, valScale2){
  var STOCK_DOWN_FILL, STOCK_UP_FILL, barInfo, barList, barWidth, catScalePos, cell, cell$iterator, closePos, closeVal, curCol, curIndex, entry, fill, hiLowRect, highPos, highVal, lowPos, lowVal, minCatPos, minValuePos, numRows, openCloseRect, openPos, openVal, outerIter, reverseRowMap, valueScale;
  STOCK_UP_FILL = new CFFill($getColor(this.graph, 'CandlestickUpGreen', '#A0D771'));
  STOCK_DOWN_FILL = new CFFill($getColor(this.graph, 'CandlestickDnRed', '#E45850'));
  this.suppressHints = true;
  this.barWidthPercent = DEFAULT_BAR_WIDTH_PERCENT_STOCK;
  if (!rows_0)
    return;
  reverseRowMap = buildReverseRowMap(rows_0);
  numRows = rows_0.size_1();
  !this.graph.typeAttributes.isHighLow && !this.graph.typeAttributes.isHighLowOpenClose && (this.dontAntiAliasBars = true);
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    valueScale = $getValueScale(sGraph);
    if (valueScale) {
      minValuePos = valueScale.getMinPosition();
      barList = new ArrayList;
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(curCol.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !!cell.row && !cell.row.hidden) {
          curIndex = castTo($get_1(reverseRowMap, cell.row), 29).value_0;
          instanceOf(baseScale, 56) && (curIndex = cell.row.curIndex);
          catScalePos = baseScale.getPositionForValue(curIndex);
          highVal = $getValue(cell);
          isNaN(highVal) && (highVal = 0);
          lowVal = 0;
          !!cell && !!$getMetaDataCell(cell, 0) && !isNaN_0($getValue($getMetaDataCell(cell, 0))) && (lowVal = $getValue($getMetaDataCell(cell, 0)));
          highPos = valueScale.getPositionForValue(highVal);
          lowPos = valueScale.getPositionForValue(lowVal);
          openPos = highPos;
          closePos = lowPos;
          if (this.graph.typeAttributes.isHighLow) {
            fill = new CFFill($getColorForIndex_0(this.graph, curCol.curIndex));
          }
           else {
            openVal = 0;
            closeVal = 0;
            !!cell && !!$getMetaDataCell(cell, OPEN) && !isNaN_0($getValue($getMetaDataCell(cell, OPEN))) && (openVal = $getValue($getMetaDataCell(cell, OPEN)));
            !!cell && !!$getMetaDataCell(cell, CLOSE) && !isNaN_0($getValue($getMetaDataCell(cell, CLOSE))) && (closeVal = $getValue($getMetaDataCell(cell, CLOSE)));
            openPos = valueScale.getPositionForValue(openVal);
            closePos = valueScale.getPositionForValue(closeVal);
            fill = STOCK_UP_FILL;
            closeVal < openVal && (fill = STOCK_DOWN_FILL);
          }
          hiLowRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, highPos, lowPos, barWidth);
          openCloseRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, openPos, closePos, barWidth);
          if (openCloseRect.height_0 < 3 && openCloseRect.height_0 > -3) {
            $setY_0(openCloseRect, openCloseRect.y_0 + openCloseRect.height_0 / 2 - 1.5);
            openCloseRect.height_0 = 3;
          }
          barInfo = new SrsStockInfo(this, cell, hiLowRect, openCloseRect, fill);
          barList.array[barList.array.length] = barInfo;
        }
      }
      $add_1(this.graph.seriesShapes, new SeriesInfo(barList, null));
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  $drawAllBars(this, -1, null);
}
;
_.processChartOptions = function processChartOptions_28(){
  var hoverTextOverride, valueScale;
  valueScale = $getValueScaleByNumber(this.sGraph, 0);
  !!valueScale && (valueScale.alwaysIncludeZero = false);
  hoverTextOverride = $getEncodedChartOption(this.graph);
  (hoverTextOverride == null || hoverTextOverride.length == 0) && (this.graph.typeAttributes.isHighLow?(this.graph.hoverLabelText = this.graph.getLocalizedString('HIGH') + ' = %_HIGH_VALUE\n' + this.graph.getLocalizedString('LOW') + ' = %_LOW_VALUE'):(this.graph.hoverLabelText = this.graph.getLocalizedString('OPEN') + ' = %_OPEN_VALUE\n' + this.graph.getLocalizedString('CLOSE') + ' = %_CLOSE_VALUE\n' + this.graph.getLocalizedString('HIGH') + ' = %_HIGH_VALUE\n' + this.graph.getLocalizedString('LOW') + ' = %_LOW_VALUE'));
  $processChartOptions_4(this);
}
;
_.setData = function setData_27(data_0){
  var close_col, columnOrder, high_col, low_col, name_col, open_col;
  if (data_0) {
    if (data_0.orderedColumnList) {
      name_col = $getColumnIndexForMappedName(data_0, 'CATEGORY');
      high_col = $getColumnIndexForMappedName(data_0, 'HIGH');
      low_col = $getColumnIndexForMappedName(data_0, 'LOW');
      open_col = $getColumnIndexForMappedName(data_0, 'OPEN');
      close_col = $getColumnIndexForMappedName(data_0, 'CLOSE');
      columnOrder = new ArrayList;
      $add_1(columnOrder, valueOf(name_col));
      $add_1(columnOrder, valueOf(high_col));
      $add_1(columnOrder, valueOf(low_col));
      open_col >= 0 && $add_1(columnOrder, valueOf(open_col));
      close_col >= 0 && $add_1(columnOrder, valueOf(close_col));
      data_0 = $transformOrderedColumnToNoGroupItemValue(data_0, columnOrder, false);
      !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
      this.sGraph.data_0 = data_0;
    }
  }
  $setData_2(this, data_0);
}
;
var CLOSE = 2, OPEN = 1;
var Lcom_domo_charting_graphs_HandlerStock_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerStock', 334);
function $drawAllPieSlices_0(this$static, rnd){
  var dlShapes, ge, i, item_0, item$index, item$max, lblFont, otherEncountered, shape_0, slice_0, srsInfo, srsInfo$iterator;
  lblFont = $duplicate_2(this$static.labelFont);
  this$static.fixedFontLabelSize || (lblFont = $getFontForLabels(this$static, rnd));
  this$static.graph.geAry.clear_0();
  $resetTotalsAndSums(this$static.graph.data_0);
  otherEncountered = false;
  for (i = 0; i < this$static.graph.seriesShapes.array.length; i++) {
    for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this$static.graph.seriesShapes, i), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      slice_0 = castTo(srsInfo, 71);
      ge = new GraphicElement;
      shape_0 = $getShapePct_2(slice_0, 'none', 1, null);
      if (shape_0) {
        $addShape_0(ge, shape_0, srsInfo);
        if (!otherEncountered) {
          dlShapes = $getDataLabelForSlice(this$static, rnd, slice_0, shape_0, lblFont);
          if (dlShapes != null) {
            for (item$index = 0 , item$max = dlShapes.length; item$index < item$max; ++item$index) {
              item_0 = dlShapes[item$index];
              !ge.textAry && (ge.textAry = new ArrayList);
              $add_1(ge.textAry, item_0);
            }
          }
          slice_0.isOtherSlice && (otherEncountered = true);
        }
      }
      $addGraphicElement_0(this$static.graph, ge);
    }
  }
}

function $getColNameForMappedName(data_0, row, mappedName){
  var catCell, catIdx;
  catIdx = $getColumnIndexForMappedName(data_0, mappedName);
  if (catIdx != -1) {
    catCell = $getCellByCellIndex(row, catIdx);
    if (!!catCell && $getColOrigName(catCell) != null)
      return $getColOrigName(catCell);
  }
  return null;
}

function $getColorIndexForRow(this$static, rowIndex){
  var baseCell, colorIndex;
  baseCell = $getCell(this$static.graph.data_0, rowIndex, 1);
  if (baseCell) {
    colorIndex = castTo($getStringValue(this$static.baseNameMap, baseCell.valueStr), 29);
    if (colorIndex)
      return colorIndex.value_0;
  }
  return 0;
}

function $getDataLabelForSlice(this$static, rnd, slice_0, shape_0, fnt){
  if (this$static.showDataLabels && !this$static.graph.treatAsSmall) {
    return $getDataLabelShape(this$static, rnd, fnt, shape_0, slice_0);
  }
  return null;
}

function $getDataLabelShape(this$static, rnd, labelFont, sliceShape, slice_0){
  var bottomLeftX, bottomLeftY, centerAngle, centerPoint, coloredFont, dim, innerLevelRadius, lenPt, levelRadius, name_0, tiAry, widthPt, xOffset, yOffset;
  levelRadius = this$static.radius * 0.85 / this$static.numLevels;
  innerLevelRadius = $getInnerRadiusForLevel(this$static, slice_0.level) + levelRadius / 2;
  centerAngle = slice_0.startAngle + (slice_0.endAngle - slice_0.startAngle) / 2;
  centerAngle = centerAngle % 360;
  centerPoint = $GetArcLineEndPoint(innerLevelRadius, -centerAngle, this$static.centerX, this$static.centerY);
  name_0 = slice_0.cell.altName;
  (name_0 == null || name_0.length == 0) && (name_0 = $getRowName(slice_0.cell));
  this$static.graph.getChartOptionAsString('datalabel_text') != null && (name_0 = $getFormattedDataLabel(this$static.graph.dataLabel, slice_0.cell));
  name_0 = truncateString(rnd, name_0, levelRadius - 4, labelFont);
  centerAngle < 270 && centerAngle > 90 && (centerAngle += 180);
  dim = rnd.measureText_0(name_0, labelFont);
  lenPt = getPointForAngle(dim.width_0, centerAngle);
  widthPt = getPointForAngle(dim.height_0, centerAngle + 90);
  xOffset = lenPt.x_0 / 2;
  yOffset = lenPt.y_0 / 2;
  bottomLeftX = round_int(centerPoint.x_0 - xOffset + widthPt.x_0 / 4);
  bottomLeftY = round_int(centerPoint.y_0 - yOffset + widthPt.y_0 / 4);
  if ($rotatedTextFitsInShape(rnd, name_0, labelFont, bottomLeftX, bottomLeftY, round_int(centerAngle), sliceShape)) {
    coloredFont = $getColoredFont(slice_0, labelFont, sliceShape);
    tiAry = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 1, 0, 1);
    tiAry[0] = new CFTextItem_1(name_0, coloredFont, bottomLeftX, bottomLeftY, round_int(centerAngle));
    return tiAry;
  }
  return null;
}

function $getDrillFilterForMappedName(this$static, data_0, row, mappedName){
  var cat1Cell, cat1Idx, drillFilter, filterBase;
  cat1Idx = $getColumnIndexForMappedName(data_0, mappedName);
  if (cat1Idx != -1) {
    cat1Cell = $getCellByCellIndex(row, cat1Idx);
    if (!!cat1Cell && cat1Cell.valueStr != null && $trim(cat1Cell.valueStr).length > 0) {
      filterBase = new FilterBase($getColOrigName(cat1Cell), 'EQUALS', cat1Cell.column);
      $addValue(filterBase, cat1Cell.valueStr);
      $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
      drillFilter = getDrillFilterFromValues(filterBase);
      return drillFilter;
    }
  }
  return null;
}

function $getFontForLabels(this$static, rnd){
  var cell, dim, dlTextAry, fnt, hasDataLabelOverride, i, idx, idx$iterator, initNotShownSliceLabelsCount, labelsDisplayedAtCurSize, lastFontSize, lastLabelsDisplayedAtCurSize, name_0, notShownSliceLabels, shape_0, srsInfo, srsInfo$iterator, srsShapeInfo, srsShapeInfo$iterator, textWidth;
  fnt = $duplicate_2(this$static.labelFont);
  dlTextAry = new ArrayList;
  hasDataLabelOverride = this$static.graph.getChartOptionAsString('datalabel_text') != null;
  for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 19);
    for (srsShapeInfo$iterator = new ArrayList$1(srsInfo.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
      srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
      shape_0 = $getShapePct_2(castTo(srsShapeInfo, 71), 'none', 1, null);
      if (shape_0) {
        cell = srsShapeInfo.cell;
        name_0 = cell.altName;
        (name_0 == null || name_0.length == 0) && (name_0 = $getRowName(cell));
        hasDataLabelOverride && (name_0 = $getFormattedDataLabel(this$static.graph.dataLabel, cell));
        dlTextAry.array[dlTextAry.array.length] = name_0;
      }
    }
  }
  if (this$static.showDataLabels && !this$static.graph.treatAsSmall) {
    notShownSliceLabels = new ArrayList;
    textWidth = this$static.radius * 0.85 / this$static.numLevels - 4;
    for (i = 0; i < dlTextAry.array.length; i++) {
      dim = rnd.measureText_0((checkCriticalElementIndex(i, dlTextAry.array.length) , castToString(dlTextAry.array[i])), fnt);
      dim.width_0 > textWidth && $add_1(notShownSliceLabels, valueOf(i));
    }
    if (notShownSliceLabels.array.length > 0) {
      initNotShownSliceLabelsCount = notShownSliceLabels.array.length;
      lastLabelsDisplayedAtCurSize = 0;
      lastFontSize = fnt.size_0;
      $setSize_0(fnt, fnt.size_0 - 1);
      while (fnt.size_0 >= MIN_FONT_SIZE) {
        labelsDisplayedAtCurSize = 0;
        for (idx$iterator = new ArrayList$1(notShownSliceLabels); idx$iterator.i < idx$iterator.this$01.array.length;) {
          idx = castTo($next_3(idx$iterator), 29);
          dim = rnd.measureText_0(castToString($get_2(dlTextAry, idx.value_0)), fnt);
          dim.width_0 <= textWidth && ++labelsDisplayedAtCurSize;
        }
        if (labelsDisplayedAtCurSize == initNotShownSliceLabelsCount) {
          lastFontSize = fnt.size_0;
          break;
        }
         else if (labelsDisplayedAtCurSize != lastLabelsDisplayedAtCurSize) {
          lastFontSize = fnt.size_0;
          lastLabelsDisplayedAtCurSize = labelsDisplayedAtCurSize;
        }
        $setSize_0(fnt, fnt.size_0 - 1);
      }
      lastFontSize == this$static.labelFont.size_0?$setSize_0(fnt, MIN_FONT_SIZE):(fnt.size_0 = lastFontSize , fnt.lineHeight = NaN);
    }
  }
  return fnt;
}

function $getInnerRadiusForLevel(this$static, level){
  var levelRadius;
  levelRadius = this$static.radius * 0.85 / this$static.numLevels;
  return levelRadius * level + this$static.radius * 0.15;
}

function $getLastState_1(this$static, cell, index_0){
  var sd, stroke;
  if (!this$static.graph.lastShapes)
    return null;
  if (this$static.sorted) {
    if (index_0 < castTo($get_2(this$static.graph.lastShapes, 0), 19).srsShapeList.array.length)
      return castTo($get_2(castTo($get_2(this$static.graph.lastShapes, 0), 19).srsShapeList, index_0), 18);
    else {
      stroke = new CFStroke(new CFColor(255, 255, 255), 1);
      stroke.join_0 = 1;
      sd = new SrsSliceInfo(this$static, cell, 270, 270, new CFFill(($clinit_CFColor() , BLACK)), stroke, null);
      return sd;
    }
  }
   else {
    return $getLastShapeForCell(this$static.graph, cell, false);
  }
}

function $getMaxDrillLevelForCell(cell, data_0, row){
  var catName, colLevelName;
  colLevelName = $getColOrigName(cell);
  catName = $getColNameForMappedName(data_0, row, 'CATEGORY1');
  if (catName != null && $equals_2(catName, colLevelName))
    return 1;
  catName = $getColNameForMappedName(data_0, row, 'CATEGORY2');
  if (catName != null && $equals_2(catName, colLevelName))
    return 2;
  catName = $getColNameForMappedName(data_0, row, 'CATEGORY3');
  if (catName != null && $equals_2(catName, colLevelName))
    return 3;
  catName = $getColNameForMappedName(data_0, row, 'CATEGORY4');
  if (catName != null && $equals_2(catName, colLevelName))
    return 4;
  catName = $getColNameForMappedName(data_0, row, 'CATEGORY5');
  if (catName != null && $equals_2(catName, colLevelName))
    return 5;
  return -1;
}

function $getRotatedPoint(x_0, y_0, rotationX, rotationY, angle){
  var angleRadians, originX, originY, rotatedX, rotatedY;
  angleRadians = angle * $intern_6;
  originX = x_0 - rotationX;
  originY = y_0 - rotationY;
  rotatedX = originX * $wnd.Math.cos(angleRadians) - originY * $wnd.Math.sin(angleRadians);
  rotatedY = originX * $wnd.Math.sin(angleRadians) + originY * $wnd.Math.cos(angleRadians);
  return new CFPoint(rotatedX + rotationX, rotatedY + rotationY);
}

function $processChartOptions_9(this$static){
  var key, key$iterator, leg, value_0;
  this$static.graph.hoverLabelText = '%_CATEGORY_NAME : %_VALUE : %_PERCENT_OF_TOTAL';
  if (this$static.graph.hasChartOptions()) {
    leg = $getLegend(this$static.graph);
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'hide_pie_labels':
          this$static.showDataLabels = isFalse(value_0);
          break;
        case 'unsorted_data':
          this$static.sorted = isFalse(value_0);
          break;
        case 'max_before_other':
          $setItemsBeforeOther(this$static, getInt(value_0, 12));
          break;
        case 'legend_value':
          if (!!leg && value_0 != null && value_0.toLowerCase().indexOf('and') != -1) {
            castTo(leg, 65).valueDisplayType = 1;
            $setShowPercentOfTotal(castTo(leg, 65), this$static.showPercentInLegend);
          }
           else if (!!leg && value_0 != null && value_0.toLowerCase().indexOf('label') != -1) {
            castTo(leg, 65).valueDisplayType = 2;
          }
           else {
            this$static.showPercentInLegend = $equals_2(value_0, 'Percentage');
            !!leg && $setShowPercentOfTotal(castTo(leg, 65), this$static.showPercentInLegend);
          }

          break;
        case 'show_value_and_pct':
          this$static.showPercentInLegend = $equals_2(value_0, 'Percentage');
          !!leg && isTrue(value_0) && (castTo(leg, 65).valueDisplayType = 1);
          break;
        case 'decimal_places':
          $applyDecimalPlaces(this$static.graph.numberFormatter, value_0);
          this$static.graph.updateNumberFormats(false);
          break;
        case 'hide_hover_legend':
          this$static.hideHoverLegend = isTrue(value_0);
          break;
        case 'label_font_size':
          $setDLFontSize(this$static, value_0);
      }
    }
  }
}

function $rotatedTextFitsInShape(rnd, text_0, font, bottomLeftX, bottomLeftY, angle, shape_0){
  var bottomLeft, bottomRight, textDim, textRect, topLeft, topRight;
  textDim = rnd.measureText_0(text_0, font);
  textRect = new CFRect(bottomLeftX, bottomLeftY - textDim.height_0, textDim.width_0, textDim.height_0);
  topLeft = $getRotatedPoint(textRect.x_0, textRect.y_0, bottomLeftX, bottomLeftY, angle);
  if (!!shape_0 && $pointInPath_0(shape_0, round_int(topLeft.x_0), round_int(topLeft.y_0), rnd)) {
    bottomLeft = $getRotatedPoint(textRect.x_0, textRect.y_0 + textRect.height_0, bottomLeftX, bottomLeftY, angle);
    if ($pointInPath_0(shape_0, round_int(bottomLeft.x_0), round_int(bottomLeft.y_0), rnd)) {
      topRight = $getRotatedPoint(textRect.x_0 + textRect.width_0, textRect.y_0, bottomLeftX, bottomLeftY, angle);
      if ($pointInPath_0(shape_0, round_int(topRight.x_0), round_int(topRight.y_0), rnd)) {
        bottomRight = $getRotatedPoint(textRect.x_0 + textRect.width_0, textRect.y_0 + textRect.height_0, bottomLeftX, bottomLeftY, angle);
        if ($pointInPath_0(shape_0, round_int(bottomRight.x_0), round_int(bottomRight.y_0), rnd)) {
          return true;
        }
      }
    }
  }
  return false;
}

function $setDLFontSize(this$static, value_0){
  if (value_0 != null) {
    if ($equalsIgnoreCase(value_0, 'Larger')) {
      $setSize_0(this$static.labelFont, 18);
      this$static.fixedFontLabelSize = true;
    }
     else if ($equalsIgnoreCase(value_0, 'Largest')) {
      $setSize_0(this$static.labelFont, 20);
      this$static.fixedFontLabelSize = true;
    }
     else if ($equalsIgnoreCase(value_0, 'Smaller')) {
      $setSize_0(this$static.labelFont, 12);
      this$static.fixedFontLabelSize = true;
    }
     else {
      $setSize_0(this$static.labelFont, 14);
      this$static.fixedFontLabelSize = false;
    }
  }
}

function $setHoverEffects_5(this$static, hoverData, rnd){
  var dataObj, depComp, depComp$iterator, ge, ge$iterator, labelColor, labelFont, objIndex, pieWedge, sd, shapeAry, shapeIdx, srsColor, ti, ti$iterator;
  if ($hasInteractions(this$static.graph)) {
    hoverData != null && instanceOf(hoverData, 12) && (hoverData = null);
    for (ge$iterator = this$static.graph.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this$static.graph, ge);
      if (dataObj != null && (hoverData == null || !instanceOf(hoverData, 132))) {
        if (maskUndefined(dataObj) !== maskUndefined(hoverData) && hoverData != null) {
          shapeAry = ge.shapeAry;
          pieWedge = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
          $setFill_0(pieWedge, new CFFill(($clinit_CFColor() , DISABLED_LIGHT_GRAY)));
          if (!!ge.textAry && ge.textAry.array.length >= 1) {
            for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
              ti = castTo($next_3(ti$iterator), 26);
              labelFont = ti.font_0;
              $setColor_1(labelFont, WHITE);
            }
          }
        }
         else {
          shapeIdx = 0;
          instanceOf(dataObj, 71) && (shapeIdx = castTo(dataObj, 71).level);
          objIndex = $indexOf_1(castTo($get_2(this$static.graph.seriesShapes, shapeIdx), 19).srsShapeList, dataObj, 0);
          sd = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, shapeIdx), 19).srsShapeList, objIndex), 18);
          shapeAry = ge.shapeAry;
          pieWedge = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
          $setFill_0(pieWedge, sd.fill_0);
          if (!!ge.textAry && ge.textAry.array.length >= 1) {
            srsColor = sd.fill_0.color_0;
            labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, $withoutAlpha(srsColor));
            for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
              ti = castTo($next_3(ti$iterator), 26);
              labelFont = ti.font_0;
              labelFont.color_0 = labelColor;
            }
          }
        }
      }
    }
    if (this$static.graph.dependentComps) {
      for (depComp$iterator = new ArrayList$1(this$static.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        depComp.setHoverEffects(hoverData, rnd);
      }
    }
    $hasLegends(this$static.graph) || $setHoverText_5(this$static, hoverData);
    return true;
  }
   else {
    $setHoverText_5(this$static, hoverData);
  }
  return false;
}

function $setHoverText_5(this$static, hoverData){
  var current, hoverLabel, isOtherSlice, value_0;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 71)) {
      current = castTo(hoverData, 71);
      isOtherSlice = false;
      value_0 = 0;
      if (!!current.cell.row && current.cell.row.isOtherRow) {
        isOtherSlice = true;
        value_0 = current.cell.value_0;
        $setValue(current.cell, $getOtherValue(this$static.graph.data_0, this$static.slicesBeforeOther, this$static.graph.currentColumn));
      }
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this$static.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this$static.graph, current.hoverText);
      isOtherSlice && $setValue(current.cell, value_0);
    }
  }
}

function $setItemsBeforeOther(this$static, itemsBeforeOther){
  var depComp, depComp$iterator;
  this$static.slicesBeforeOther = itemsBeforeOther;
  if (this$static.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this$static.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      instanceOf(depComp, 65) && (castTo(depComp, 65).itemsBeforeOther = itemsBeforeOther);
      instanceOf(depComp, 106) && (castTo(depComp, 106).itemsBeforeOther = itemsBeforeOther);
    }
  }
}

function $setValuesOnSortedData(this$static, data_0){
  var cell, cellAry, curRow, i, i0, i1, name_0, nameAry, prevLevelCell, prevRowPrevLevelCell, rowNum, valAry, value_0;
  cellAry = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 5, 0, 1);
  nameAry = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 5, 6, 1);
  valAry = initUnidimensionalArray(D_classLit, $intern_24, 41, 5, 15, 1);
  this$static.baseLevelItemCount = 1;
  curRow = $getRow(data_0, 0);
  for (i0 = 0; i0 < this$static.numLevels; i0++) {
    cellAry[i0] = $getCellByCellIndex(curRow, i0 + 1);
    nameAry[i0] = cellAry[i0].valueStr;
    valAry[i0] = $getValue($getCellByCellIndex(curRow, 0));
  }
  $putStringValue(this$static.baseNameMap, nameAry[0], valueOf(0));
  this$static.graphTotal = valAry[0];
  for (rowNum = 1; rowNum < $getNumRows(data_0); rowNum++) {
    curRow = $getRow(data_0, rowNum);
    for (i1 = 0; i1 < this$static.numLevels; i1++) {
      cell = $getCellByCellIndex(curRow, i1 + 1);
      name_0 = cell.valueStr;
      value_0 = $getValue($getCellByCellIndex(curRow, 0));
      if (!isNaN(value_0)) {
        i1 == 0 && (this$static.graphTotal += value_0);
        if (!$equals_2(name_0, nameAry[i1]) && nameAry[i1].length == 0) {
          if (rowNum > 0) {
            prevRowPrevLevelCell = $getCellByCellIndex($getRow(data_0, rowNum - 1), i1);
            prevLevelCell = $getCellByCellIndex(curRow, i1);
            $equalsIgnoreCase(prevLevelCell.valueStr, prevRowPrevLevelCell.valueStr) && (name_0 = '');
          }
        }
        if ($equals_2(name_0, nameAry[i1])) {
          valAry[i1] += value_0;
        }
         else {
          cellAry[i1].altValue = valAry[i1];
          $setAlternateName(cellAry[i1], cellAry[i1].valueStr);
          cellAry[i1] = cell;
          nameAry[i1] = name_0;
          valAry[i1] = value_0;
          if (i1 == 0) {
            $putStringValue(this$static.baseNameMap, name_0, valueOf(this$static.baseLevelItemCount));
            ++this$static.baseLevelItemCount;
          }
        }
      }
    }
  }
  for (i = 0; i < this$static.numLevels; i++) {
    if (!isNaN(valAry[i])) {
      cellAry[i].altValue = valAry[i];
      $setAlternateName(cellAry[i], cellAry[i].valueStr);
    }
  }
}

function $sortData(this$static, data_0){
  var cat1Index, cat2Index, cat3Index, cat4Index, cat5Index, i, valIndex;
  this$static.orderedCols = new ArrayList;
  valIndex = $getColumnIndexForMappedName(data_0, 'VALUE');
  valIndex != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, valIndex));
  cat1Index = $getColumnIndexForMappedName(data_0, 'CATEGORY1');
  cat1Index != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, cat1Index));
  cat2Index = $getColumnIndexForMappedName(data_0, 'CATEGORY2');
  cat2Index != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, cat2Index));
  cat3Index = $getColumnIndexForMappedName(data_0, 'CATEGORY3');
  cat3Index != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, cat3Index));
  cat4Index = $getColumnIndexForMappedName(data_0, 'CATEGORY4');
  cat4Index != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, cat4Index));
  cat5Index = $getColumnIndexForMappedName(data_0, 'CATEGORY5');
  cat5Index != -1 && $add_1(this$static.orderedCols, $getColumn(data_0, cat5Index));
  for (i = this$static.orderedCols.array.length - 1; i >= 0; i--) {
    data_0.cols_0.remove($get_2(this$static.orderedCols, i));
    data_0.cols_0.add_1(0, castTo($get_2(this$static.orderedCols, i), 7));
  }
  $setCurIndices(data_0.cols_0);
  this$static.numLevels = this$static.orderedCols.array.length - 1;
  data_0.rows_0.sort_0(new HandlerSunburst$1(this$static));
  $setCurIndices(data_0.rows_0);
}

function HandlerSunburst(){
  HandlerPie.call(this);
  this.orderedCols = new ArrayList;
  this.baseNameMap = new HashMap;
}

function getFullString(row, orderedCols){
  var catNameCell, col, fullString, i, origColIndex;
  fullString = '';
  for (i = 1; i <= orderedCols.array.length - 1; i++) {
    col = (checkCriticalElementIndex(i, orderedCols.array.length) , castTo(orderedCols.array[i], 7));
    origColIndex = col.origIndex;
    catNameCell = castTo($get_1(row.cellMap, valueOf(origColIndex)), 16);
    fullString += catNameCell.valueStr + ' ';
  }
  return fullString;
}

defineClass(143, 128, {128:1, 143:1}, HandlerSunburst);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_13(chart){
  var dimension, graphHeight, graphLegWidth, graphWidth, leftLegendWidth, legend, legendHeight, legendWidth, margin, totalLegend;
  chart.includeJsonMap || $setAllowInteractions(this.graph, true);
  this.graph.removeDependentCompsFromCompArray();
  $clearDependentComponents(this.graph);
  dimension = this.graph.chart.dimension;
  this.graph.getChartOptionAsString('hide_hover_legend') != null && (this.hideHoverLegend = isTrue(this.graph.getChartOptionAsString('hide_hover_legend')));
  this.hideLegend = true;
  if (dimension.height_0 * 2 / 3 >= dimension.width_0) {
    legendHeight = dimension.height_0 * 0.5;
    graphHeight = dimension.height_0 * 0.5;
    this.hideLegend && (graphHeight = dimension.height_0 - 10);
    margin = round_int(dimension.height_0 * 0.07);
    $setBounds_0(this.graph, 5, 5, round_int(dimension.width_0) - 10, round_int(graphHeight));
    if (!this.hideLegend) {
      legend = new LegendPie_0(chart, this.graph);
      $setBounds_0(legend, 5, round_int(graphHeight + margin), round_int(dimension.width_0) - 10, round_int(legendHeight));
      $addDependentComp(this.graph, legend);
    }
  }
   else {
    if (dimension.width_0 > 700 && dimension.height_0 > 211 && dimension.height_0 * 1.5 <= dimension.width_0) {
      legendWidth = dimension.width_0 * 5 / 16;
      leftLegendWidth = legendWidth;
      graphWidth = dimension.width_0 * 6 / 16;
      if (this.hideHoverLegend && this.hideLegend) {
        legendWidth = 0;
        leftLegendWidth = 0;
        graphWidth = dimension.width_0;
      }
       else if (this.hideHoverLegend || this.hideLegend) {
        legendWidth = dimension.width_0 / 2;
        leftLegendWidth = legendWidth;
        graphWidth = dimension.width_0 / 2;
        this.hideLegend && (leftLegendWidth = 0);
      }
      margin = round_int(dimension.width_0 * 0.07);
      $setBounds_0(this.graph, round_int(leftLegendWidth), 5, round_int(graphWidth) - 5, round_int(dimension.height_0) - 10);
      if (!this.hideLegend) {
        legend = new LegendPie_0(chart, this.graph);
        (dimension.height_0 < 380 || leftLegendWidth < 220) && $setSmallerLegend(legend);
        $setBounds_0(legend, 0, 0, round_int(leftLegendWidth), round_int(dimension.height_0));
        legend.rightMargin = margin;
        dimension.width_0 > 900 && (legend.leftMargin = 30);
        $addDependentComp(this.graph, legend);
      }
      if (!this.hideHoverLegend) {
        totalLegend = new TotalLegend(chart, this.graph);
        $setBounds_0(totalLegend, round_int(leftLegendWidth + graphWidth), 0, round_int(legendWidth), round_int(dimension.height_0));
        totalLegend.leftMargin = margin;
        dimension.width_0 > 900 && (totalLegend.rightMargin = 30);
        dimension.height_0 > 280?(totalLegend.topMargin = 50):(totalLegend.topMargin = 2);
        $addDependentComp(this.graph, totalLegend);
      }
    }
     else if (dimension.width_0 > 400 && dimension.height_0 > 210) {
      legendWidth = dimension.width_0 * 4.5 / 10;
      graphWidth = dimension.width_0 * 5.5 / 10;
      if (this.hideLegend) {
        legendWidth = 5;
        graphWidth = dimension.width_0 - 10;
      }
      margin = round_int(dimension.width_0 * 0.07);
      $setBounds_0(this.graph, round_int(legendWidth), 5, round_int(graphWidth) - 5, round_int(dimension.height_0) - 10);
      if (!this.hideLegend) {
        legend = new LegendPie_0(chart, this.graph);
        dimension.height_0 < 280 || legendWidth < 180?$setSmallestLegend(legend):(dimension.height_0 < 380 || legendWidth < 220) && $setSmallerLegend(legend);
        dimension.width_0 > 900 && (legend.leftMargin = 30);
        $setBounds_0(legend, 0, 0, round_int(legendWidth), round_int(dimension.height_0));
        legendWidth < 220?(legend.rightMargin = 15):(legend.rightMargin = margin);
        $addDependentComp(this.graph, legend);
      }
    }
     else if (!this.hideHoverLegend && dimension.width_0 > dimension.height_0 * 2.5 && dimension.width_0 > 300 && dimension.height_0 >= 100) {
      margin = dimension.width_0 * 0.05;
      graphLegWidth = (dimension.width_0 - margin * 3) / 2;
      $setBounds_0(this.graph, round_int(margin), 3, round_int(graphLegWidth), round_int(dimension.height_0) - 6);
      totalLegend = new TotalLegend(chart, this.graph);
      $setBounds_0(totalLegend, round_int(graphLegWidth + 2 * margin), 0, round_int(graphLegWidth), round_int(dimension.height_0));
      $addDependentComp(this.graph, totalLegend);
    }
     else if (!this.hideHoverLegend && this.graph.chart.mobile && !this.graph.treatAsSmall && !this.graph.simplifiedForMobile && $hasInteractions(this.graph)) {
      graphHeight = dimension.height_0 - 30;
      $setBounds_0(this.graph, 5, 30, round_int(dimension.width_0) - 10, round_int(graphHeight) - 5);
      legend = new LegendPie_0(chart, this.graph);
      legend.isSingleLineHoverLegend = true;
      $setBounds_0(legend, 10, 0, round_int(dimension.width_0) - 20, 30);
      $addDependentComp(this.graph, legend);
    }
     else {
      $setBounds_0(this.graph, 5, 5, round_int(dimension.width_0) - 10, round_int(dimension.height_0) - 10);
    }
  }
  !!this.graph.playControl && (this.graph.playControl = null);
}
;
_.drawAllPieSlices = function drawAllPieSlices_0(rnd){
  $drawAllPieSlices_0(this, rnd);
}
;
_.format_0 = function format_23(rnd){
  var angle, baseColor, bnds, cell, colorDeterminingCell, colorIndex, curIndex, curRow, depComp, depComp$iterator, fill, fillColor, i, i0, lastState, level, pctOfTotal, previousLevel1Name, sd, startAngle, stroke, total, value_0, visibleIndex;
  $setAutoAbbreviateState(this.graph.numberFormatter, false);
  $processChartOptions_9(this);
  this.slicesBeforeOther = $intern_12;
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  bnds = this.graph.bnds;
  this.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  for (i0 = 0; i0 < this.numLevels; i0++)
    $add_1(this.graph.seriesShapes, new SeriesInfo(new ArrayList, null));
  total = this.graphTotal;
  this.centerX = bnds.x_0 + bnds.width_0 / 2;
  this.centerY = bnds.y_0 + bnds.height_0 / 2;
  this.radius = bnds.width_0 / 2;
  bnds.height_0 < bnds.width_0 && (this.radius = bnds.height_0 / 2);
  if (this.graph.data_0.numVisibleRows == 0) {
    $addNoDataExistsMessage(this.graph);
    return;
  }
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, this.baseLevelItemCount, this.baseLevelItemCount, false);
  for (level = 0; level < this.numLevels; level++) {
    i = 0;
    startAngle = -90;
    visibleIndex = 0;
    baseColor = null;
    previousLevel1Name = null;
    curRow = $getRow(this.graph.data_0, 0);
    while (curRow) {
      curIndex = curRow.curIndex;
      colorIndex = $getColorIndexForRow(this, i);
      colorDeterminingCell = $getCell(this.graph.data_0, i, 1);
      if (!!colorDeterminingCell && !isNaN_0(colorDeterminingCell.altValue) && !curRow.hidden) {
        colorDeterminingCell.valueStr != null && !$equals_2(colorDeterminingCell.valueStr, previousLevel1Name) && (baseColor = null);
        !baseColor && (baseColor = $getColorForValueAndColumnName(this.graph, colorDeterminingCell.altValue, $getColumn(this.graph.data_0, 0).name_0, $getColumn(this.graph.data_0, 0).name_0));
        !baseColor && (baseColor = $getColorForNameInColumnOrIndex(this.graph, colorDeterminingCell.valueStr, colorDeterminingCell.column, colorIndex));
        previousLevel1Name = colorDeterminingCell.valueStr;
      }
      cell = $getCell(this.graph.data_0, i, level + 1);
      if (!!cell && !isNaN_0(cell.altValue) && !curRow.hidden) {
        value_0 = cell.altValue;
        pctOfTotal = 0;
        total != 0 && (pctOfTotal = value_0 / total);
        angle = pctOfTotal * 360;
        if (cell.valueStr != null && cell.valueStr.length > 0) {
          fillColor = new CFColor_0(baseColor.red, baseColor.green, baseColor.blue, baseColor.alpha_0);
          fillColor.alpha_0 = 255 - level * 35;
          fill = new CFFill(fillColor);
          stroke = new CFStroke(new CFColor(255, 255, 255), 1);
          lastState = $getLastState_1(this, cell, curIndex);
          sd = new SrsSliceInfo_0(this, cell, level, startAngle, startAngle + angle, fill, stroke, lastState);
          $add_1(castTo($get_2(this.graph.seriesShapes, level), 19).srsShapeList, sd);
          ++visibleIndex;
        }
        startAngle += angle;
      }
      ++i;
      curRow = $getRow(this.graph.data_0, i);
    }
  }
  this.graph.setNeedsFormat(false);
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.format_0(rnd);
    }
  }
  $drawAllPieSlices_0(this, rnd);
}
;
_.freeResources = function freeResources_28(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.labelFont = null;
  this.labelFont = null;
  this.orderedCols = null;
}
;
_.getDataLabelForSlice = function getDataLabelForSlice_0(rnd, slice_0, shape_0, fnt){
  return $getDataLabelForSlice(this, rnd, slice_0, shape_0, fnt);
}
;
_.getDataLabelShape = function getDataLabelShape_0(rnd, labelFont, sliceShape, slice_0){
  return $getDataLabelShape(this, rnd, labelFont, sliceShape, slice_0);
}
;
_.getDrillFilter = function getDrillFilter_5(shapeInfo, clicked){
  var data_0, drillLevel, filter, filters, row, sliceInfo;
  filters = new ArrayList;
  sliceInfo = castTo(shapeInfo, 71);
  if (!!sliceInfo && !!sliceInfo.cell && !!sliceInfo.cell.row) {
    row = sliceInfo.cell.row;
    data_0 = this.graph.data_0;
    if (data_0) {
      drillLevel = $getMaxDrillLevelForCell(sliceInfo.cell, data_0, row);
      if (drillLevel != -1) {
        filter = $getDrillFilterForMappedName(this, data_0, row, 'CATEGORY1');
        if (filter != null && drillLevel >= 1) {
          filters.array[filters.array.length] = filter;
          filter = $getDrillFilterForMappedName(this, data_0, row, 'CATEGORY2');
          if (filter != null && drillLevel >= 2) {
            filters.array[filters.array.length] = filter;
            filter = $getDrillFilterForMappedName(this, data_0, row, 'CATEGORY3');
            if (filter != null && drillLevel >= 3) {
              filters.array[filters.array.length] = filter;
              filter = $getDrillFilterForMappedName(this, data_0, row, 'CATEGORY4');
              if (filter != null && drillLevel >= 4) {
                filters.array[filters.array.length] = filter;
                filter = $getDrillFilterForMappedName(this, data_0, row, 'CATEGORY5');
                filter != null && drillLevel == 5 && (filters.array[filters.array.length] = filter , true);
              }
            }
          }
        }
        if (filters.array.length > 0)
          return getDrillFilterFromFilterList(filters);
      }
    }
  }
  return null;
}
;
_.getFontForLabels = function getFontForLabels_0(rnd){
  return $getFontForLabels(this, rnd);
}
;
_.getLastState_0 = function getLastState_1(cell, index_0){
  return $getLastState_1(this, cell, index_0);
}
;
_.getPiePath = function getPiePath_0(sliceInfo, innerRadius, startAngle, endAngle){
  var levelInnerRadius, levelRadius, path;
  path = new CFPath;
  levelRadius = this.radius * 0.85 / this.numLevels;
  levelInnerRadius = $getInnerRadiusForLevel(this, sliceInfo.level);
  $add(path, new CFPathArcElement_0(this.centerX, this.centerY, levelInnerRadius, endAngle, startAngle, true));
  $add(path, new CFPathArcElement(this.centerX, this.centerY, levelInnerRadius + levelRadius, startAngle, endAngle));
  $add(path, new CFPathElement_0(4, 0, 0));
  return path;
}
;
_.initColors = function initColors_3(){
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, this.baseLevelItemCount, this.baseLevelItemCount, false);
}
;
_.processChartOptions = function processChartOptions_29(){
  $processChartOptions_9(this);
}
;
_.resetForTypeChange = function resetForTypeChange_15(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
  this.dataHasBeenSorted = false;
}
;
_.setCategoryIsHidden = function setCategoryIsHidden_1(categoryIndex, value_0){
  var handled, i, numOtherSlices;
  handled = false;
  if (categoryIndex == this.slicesBeforeOther) {
    numOtherSlices = $getNumRows(this.graph.data_0) - this.slicesBeforeOther;
    if (categoryIndex >= 0 && categoryIndex < $getNumRows(this.graph.data_0) && (!value_0 || this.graph.data_0.numVisibleRows > numOtherSlices)) {
      for (i = categoryIndex; i < $getNumRows(this.graph.data_0); i++)
        $setRowHiddenValue(this.graph.data_0, i, value_0);
      this.graph.data_0.hasHiddenRows || $addChartOption(this.graph, 'row_filter', 'none');
      this.graph.previousGraphType = this.graph.graphType;
      this.graph.setNeedsFormat(true);
      $setAnimationData(this.graph, 0, 500, 'Transition', 'circleOut');
      $setAnimateDrawNeeded(this.graph.chart);
    }
    handled = true;
  }
  return handled;
}
;
_.setDLFontSize = function setDLFontSize_0(value_0){
  $setDLFontSize(this, value_0);
}
;
_.setData = function setData_28(data_0){
  var theData;
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    $sortData(this, this.currentViewDataGrid);
    $setValuesOnSortedData(this, this.currentViewDataGrid);
    this.graph.data_0 = this.currentViewDataGrid;
    $setRowsAsNonTimeData(this.graph.data_0);
  }
  this.dataHasBeenSorted = false;
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
}
;
_.setFrame = function setFrame_16(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, dlShapes, ge, item_0, item$index, item$max, lblFont, level, level0, otherEncountered, pctComplete, prevSlice, shape_0, slice_0, slice$iterator, sliceStart, srsInfo, srsInfo$iterator, timePerSlice;
  if (this.graph.seriesShapes.array.length > 0 && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0) {
    for (level0 = 0; level0 < this.numLevels; level0++) {
      if (!castTo($get_2(castTo($get_2(this.graph.seriesShapes, level0), 19).srsShapeList, 0), 18).animInfo) {
        switch (type_0) {
          case 'Pie1':
            {
              timePerSlice = round_int($wnd.Math.round(toDouble_0(div(sub_1(endTime, startTime), this.graph.seriesShapes.array.length))));
              sliceStart = startTime;
              for (slice$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, level0), 19).srsShapeList); slice$iterator.i < slice$iterator.this$01.array.length;) {
                slice_0 = castTo($next_3(slice$iterator), 18);
                animInfo = new AnimInfoSrs(sliceStart, add_1(sliceStart, timePerSlice), easingType);
                slice_0.animInfo = animInfo;
                sliceStart = add_1(sliceStart, timePerSlice);
              }
              break;
            }

          case 'Initial':
          case 'Transition':
          case 'PieToDonut':
          case 'DonutToPie':
          default:{
              for (slice$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, level0), 19).srsShapeList); slice$iterator.i < slice$iterator.this$01.array.length;) {
                slice_0 = castTo($next_3(slice$iterator), 18);
                animInfo = new AnimInfoSrs(startTime, endTime, easingType);
                slice_0.animInfo = animInfo;
              }
            }

        }
      }
    }
    this.graph.geAry.clear_0();
    otherEncountered = false;
    for (level = 0; level < this.numLevels; level++) {
      prevSlice = null;
      lblFont = null;
      for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, level), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        slice_0 = castTo(srsInfo, 71);
        if (slice_0.animInfo) {
          pctComplete = $getPercentComplete(slice_0.animInfo, curTime);
          ge = new GraphicElement;
          shape_0 = $getShapePct_2(slice_0, type_0, pctComplete, prevSlice);
          if (shape_0) {
            $addShape_0(ge, shape_0, srsInfo);
            if ((pctComplete >= 1 || this.graph.typeAttributes.isPopPlay) && !otherEncountered) {
              if (!lblFont) {
                lblFont = $duplicate_2(this.labelFont);
                this.fixedFontLabelSize || (lblFont = $getFontForLabels(this, rnd));
              }
              dlShapes = $getDataLabelForSlice(this, rnd, slice_0, shape_0, lblFont);
              if (dlShapes != null) {
                for (item$index = 0 , item$max = dlShapes.length; item$index < item$max; ++item$index) {
                  item_0 = dlShapes[item$index];
                  !ge.textAry && (ge.textAry = new ArrayList);
                  $add_1(ge.textAry, item_0);
                }
              }
              slice_0.isOtherSlice && (otherEncountered = true);
            }
            pctComplete >= 1 && ($equals_2(type_0, 'PieToDonut')?(this.innerRadius = 0.57):$equals_2(type_0, 'DonutToPie') && (this.innerRadius = 0));
            $addGraphicElement_0(this.graph, ge);
          }
        }
        prevSlice = slice_0;
      }
    }
  }
}
;
_.setHoverData = function setHoverData_20(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = $setHoverData_2(this, data_0, rnd);
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_5(this, this.hoverData, rnd) || redrawNeeded;
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_12(hoverData, rnd){
  return $setHoverEffects_5(this, hoverData, rnd);
}
;
_.setHoverText = function setHoverText_5(hoverData){
  $setHoverText_5(this, hoverData);
}
;
_.setInnerRadius = function setInnerRadius_0(innerRadius){
  this.innerRadius = innerRadius;
}
;
_.setItemsBeforeOther = function setItemsBeforeOther_0(itemsBeforeOther){
  $setItemsBeforeOther(this, itemsBeforeOther);
}
;
_.baseLevelItemCount = 0;
_.graphTotal = 0;
_.numLevels = 0;
var Lcom_domo_charting_graphs_HandlerSunburst_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerSunburst', 143);
function $compare_16(this$static, o1, o2){
  var o1Name, o2Name;
  o1Name = getFullString(o1, this$static.this$01.orderedCols);
  o2Name = getFullString(o2, this$static.this$01.orderedCols);
  return compare_28((checkCriticalNotNull(o1Name) , o1Name), (checkCriticalNotNull(o2Name) , o2Name));
}

function HandlerSunburst$1(this$0){
  this.this$01 = this$0;
}

defineClass(333, 1, {}, HandlerSunburst$1);
_.compare = function compare_17(o1, o2){
  return $compare_16(this, castTo(o1, 7), castTo(o2, 7));
}
;
_.equals_0 = function equals_20(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerSunburst$1_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerSunburst/1', 333);
function $createDrawObjectsForFrame_3(this$static, rnd, curTime){
  var ge, label_0, labelColor, lastState, pctComplete, rectInfo, shape_0, srsColor, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator, tmpGe;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 82)) {
        rectInfo = castTo(srsInfo, 82);
        if (rectInfo.animInfo) {
          pctComplete = $getPercentComplete(rectInfo.animInfo, curTime);
          lastState = $getLastShapeForCell(this$static.graph, srsInfo.cell, true);
          !!lastState && instanceOf(lastState, 82)?(shape_0 = $getShapePct_0(rectInfo, pctComplete, castTo(lastState, 82))):(shape_0 = $getShapePct(rectInfo, pctComplete));
          ge = new GraphicElement;
          $addShape_0(ge, shape_0, rectInfo);
          $addGraphicElement_0(this$static.graph, ge);
          if (pctComplete >= 0.99 && !this$static.graph.isThumbnail && rectInfo.rect.height_0 > 4) {
            label_0 = $getFormattedDataLabel(this$static.graph.dataLabel, rectInfo.cell);
            srsColor = shape_0.fill_0.color_0;
            labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, srsColor);
            tmpGe = ($clinit_StrUtil() , drawTextInBounds(rnd, $getInflated(rectInfo.rect, -5), label_0, new CFFont_0(null, this$static.maxFontSize, labelColor), $getHLabelAlign(this$static), $getVLabelAlign(this$static), 5, null, null));
            !!tmpGe.textAry && tmpGe.textAry.array.length > 0 && !$equals_2('...', castTo($get_2(tmpGe.textAry, 0), 26).text_0) && $addGEItems(ge, tmpGe);
          }
        }
      }
    }
  }
}

function $drawAllRects(this$static, rnd){
  var ge, label_0, labelColor, rectInfo, shape_0, srsColor, srsInfo, srsInfo$iterator, srsItem, srsItem$iterator, tmpGe;
  for (srsItem$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsItem$iterator.i < srsItem$iterator.this$01.array.length;) {
    srsItem = castTo($next_3(srsItem$iterator), 19);
    for (srsInfo$iterator = new ArrayList$1(srsItem.srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 82)) {
        rectInfo = castTo(srsInfo, 82);
        shape_0 = new CFShape_1(rectInfo.rect, rectInfo.fill_0, rectInfo.stroke_0);
        ge = new GraphicElement;
        $addShape_0(ge, shape_0, rectInfo);
        $addGraphicElement_0(this$static.graph, ge);
        if (!this$static.graph.isThumbnail && rectInfo.rect.height_0 >= 6) {
          srsColor = shape_0.fill_0.color_0;
          labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, srsColor);
          label_0 = $getFormattedDataLabel(this$static.graph.dataLabel, rectInfo.cell);
          tmpGe = ($clinit_StrUtil() , drawTextInBounds(rnd, $getInflated(rectInfo.rect, -5), label_0, new CFFont_0(null, this$static.maxFontSize, labelColor), $getHLabelAlign(this$static), $getVLabelAlign(this$static), 5, null, null));
          !!tmpGe.textAry && tmpGe.textAry.array.length > 0 && castTo($get_2(tmpGe.textAry, 0), 26).text_0.length > 0 && !$equals_2('...', castTo($get_2(tmpGe.textAry, 0), 26).text_0) && $addGEItems(ge, tmpGe);
        }
      }
    }
  }
}

function $getHLabelAlign(this$static){
  if (this$static.topLeftText)
    return 0;
  return HALIGN_CENTER;
}

function $getMaxItemsToDisplay(this$static){
  if (this$static.maxBeforeOther <= 1)
    return $intern_10;
  if ($getNumRows(this$static.graph.data_0) <= this$static.maxBeforeOther + 1)
    return $intern_10;
  return this$static.maxBeforeOther + 1;
}

function $getTreeRect(this$static){
  var bnds, comp, legendWidth, margin, top_0, treeRect;
  bnds = this$static.graph.bnds;
  if (!!this$static.graph.dependentComps && this$static.graph.dependentComps.array.length > 0) {
    comp = castTo($get_2(this$static.graph.dependentComps, 0), 23);
    if (instanceOf(comp, 106)) {
      if (bnds.width_0 > 600 && bnds.height_0 > 350) {
        treeRect = $getInflated(bnds, -15);
        legendWidth = castTo($get_2(this$static.graph.dependentComps, 0), 23).bnds.width_0;
        $setWidth(treeRect, treeRect.width_0 - (legendWidth + this$static.graphLegendMargin));
      }
       else {
        treeRect = new CFRect(bnds.x_0, bnds.y_0, bnds.width_0, bnds.height_0);
        margin = bnds.width_0 * 0.05;
        legendWidth = castTo($get_2(this$static.graph.dependentComps, 0), 23).bnds.width_0;
        $setWidth(treeRect, bnds.width_0 - (legendWidth + margin));
      }
    }
     else if (instanceOf(comp, 65)) {
      top_0 = comp.bnds.y_0 + 30;
      treeRect = new CFRect(0, top_0, bnds.width_0, bnds.height_0 - top_0);
    }
     else {
      treeRect = new CFRect(0, 30, bnds.width_0, bnds.height_0 - 30);
    }
  }
   else if (bnds.width_0 > 300 && bnds.height_0 > 300) {
    treeRect = $getInflated(bnds, -5);
    this$static.maxFontSize = 15;
  }
   else {
    treeRect = $getInflated(bnds, -2);
    this$static.maxFontSize = 12;
  }
  return treeRect;
}

function $getVLabelAlign(this$static){
  if (this$static.topLeftText)
    return 0;
  return VALIGN_MIDDLE;
}

function $setDataForOther(this$static){
  var cell, curIndex, curRow, otherRow, sum, value_0;
  $clearAlternateValues_0(this$static.graph.data_0);
  $clearAlternateNames(this$static.graph.data_0);
  if (this$static.maxBeforeOther != 0 && this$static.maxBeforeOther + 1 < this$static.graph.data_0.numVisibleRows) {
    sum = 0;
    curIndex = 0;
    otherRow = null;
    curRow = $getFirstVisibleRow(this$static.graph.data_0);
    while (curRow) {
      cell = $getFirstCell(curRow);
      if (curIndex >= this$static.maxBeforeOther) {
        if (curIndex == this$static.maxBeforeOther) {
          otherRow = curRow;
          curRow.isOtherRow = true;
        }
        value_0 = cell.value_0;
        isNaN(value_0) || (sum += value_0);
      }
      curRow = $getNextVisibleRow(this$static.graph.data_0, curRow);
      ++curIndex;
    }
    if (otherRow) {
      $setAlternateName($getFirstCell(otherRow), getString('OTHER', this$static.graph.chart.locale));
      $setAlternateValue($getFirstCell(otherRow), sum);
    }
  }
}

function $setHoverEffects_6(this$static, hoverData, rnd){
  var dataObj, depComp, depComp$iterator, ge, ge$iterator, inShowAsFiltered;
  if ($hasInteractions(this$static.graph)) {
    inShowAsFiltered = !!this$static.graph.chart && $usingCardBus(this$static.graph.chart) && this$static.graph.data_0.hasFilteredRows;
    for (ge$iterator = this$static.graph.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this$static.graph, ge);
      dataObj != null && (hoverData != null && instanceOf(hoverData, 7) && instanceOf(dataObj, 18) && maskUndefined(castTo(dataObj, 18).cell.row) === maskUndefined(hoverData)?$showElementInNormalColor_2(this$static, ge, dataObj):maskUndefined(dataObj) !== maskUndefined(hoverData) && hoverData != null && (!inShowAsFiltered || instanceOf(dataObj, 18) && !castTo(dataObj, 18).highlightAlways)?$showElementInGray(this$static, ge):$showElementInNormalColor_2(this$static, ge, dataObj));
    }
    if (this$static.graph.dependentComps) {
      for (depComp$iterator = new ArrayList$1(this$static.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
        depComp = castTo($next_3(depComp$iterator), 23);
        depComp.setHoverEffects(hoverData, rnd);
      }
    }
    (this$static.graph.treatAsSmall || this$static.graph.simplifiedForMobile || this$static.graph.verticalLayout) && $setHoverText_6(this$static, hoverData);
    return true;
  }
   else {
    $setHoverText_6(this$static, hoverData);
  }
  return false;
}

function $setHoverText_6(this$static, hoverData){
  var current, hoverLabel;
  $removeHints(this$static.graph);
  this$static.graph.currentHoverString = null;
  if (hoverData != null) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    if (instanceOf(hoverData, 18)) {
      current = castTo(hoverData, 18);
      $setHoverText_7(current, $getFormattedHoverText_0(hoverLabel, this$static.graph.hoverNumberFormatter, current.cell));
      $setHoverText(this$static.graph, current.hoverText);
    }
  }
}

function $showElementInNormalColor_2(this$static, ge, dataObj){
  var fillColor, font, labelColor, objIndex, sd, shapeAry, ti, ti$iterator, treeRect;
  objIndex = $indexOf_1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, dataObj, 0);
  sd = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, objIndex), 18);
  shapeAry = ge.shapeAry;
  treeRect = (checkCriticalElementIndex(0, shapeAry.array.length) , castTo(shapeAry.array[0], 6));
  $setFill_0(treeRect, sd.fill_0);
  $setStroke(treeRect, new CFStroke(($clinit_CFColor() , WHITE), 1));
  if (ge.textAry) {
    for (ti$iterator = new ArrayList$1(ge.textAry); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      font = ti.font_0;
      fillColor = sd.fill_0.color_0;
      labelColor = $getLabelColorForSeriesColor(this$static.graph.colorMgr, fillColor);
      font.color_0 = labelColor;
    }
  }
}

function HandlerTreeMap(){
}

defineClass(202, 118, {202:1}, HandlerTreeMap);
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_14(chart){
  var bnds, curLegend, legend, legendWidth, margin, totalLegend;
  bnds = this.graph.bnds;
  this.graph.getChartOptionAsString('hide_hover_legend') != null && (this.hideHoverLegend = isTrue(this.graph.getChartOptionAsString('hide_hover_legend')));
  if (!this.hideHoverLegend && bnds.width_0 > 600 && bnds.height_0 > 350) {
    if (!!this.graph.dependentComps && this.graph.dependentComps.array.length > 0)
      return;
    totalLegend = new TotalLegend(chart, this.graph);
    $setBounds_0(totalLegend, round_int(bnds.x_0 + bnds.width_0) - 200, 35, 170, round_int(bnds.height_0));
    $addDependentComp(this.graph, totalLegend);
  }
   else if (!this.hideHoverLegend && bnds.width_0 > bnds.height_0 * 1.5 && bnds.width_0 > 300 && bnds.height_0 >= 100) {
    margin = bnds.width_0 * 0.05;
    legendWidth = (bnds.width_0 - margin) / 3;
    totalLegend = new TotalLegend(chart, this.graph);
    $setBounds_0(totalLegend, round_int(bnds.x_0 + bnds.width_0 - legendWidth), 0, round_int(legendWidth), round_int(bnds.height_0));
    $addDependentComp(this.graph, totalLegend);
  }
   else if (!this.hideHoverLegend && this.graph.chart.mobile && $hasInteractions(this.graph) && bnds.width_0 > 250 && bnds.height_0 > 250) {
    curLegend = $getLegend(this.graph);
    if (!curLegend || !instanceOf(curLegend, 65)) {
      legend = new LegendPie_0(chart, this.graph);
      legend.isSingleLineHoverLegend = true;
      $setBounds_0(legend, 10, 0, round_int(bnds.width_0) - 20, 30);
      legend.valueDisplayType = 1;
      legend.itemsBeforeOther = this.maxBeforeOther;
      $addDependentComp(this.graph, legend);
    }
  }
   else 
    $clearDependentComponents(this.graph);
}
;
_.format_0 = function format_24(rnd){
  var cell, curIndex, data_0, dataIndex, depComp, depComp$iterator, fill, hasFilteredData, inShowAsFilteredMode, index_0, maxItemsToDisplay, rect, rect$iterator, rects, row, showAsFiltered, srsInfo, srsInfoList, stroke, tmi, treeRect;
  $setDataForOther(this);
  if (this.graph.dependentComps) {
    for (depComp$iterator = new ArrayList$1(this.graph.dependentComps); depComp$iterator.i < depComp$iterator.this$01.array.length;) {
      depComp = castTo($next_3(depComp$iterator), 23);
      depComp.setNeedsFormat(true);
    }
  }
  tmi = new TreeMapInfo;
  $setAutoAbbreviateState(this.graph.numberFormatter, false);
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredRows;
  $setDataLabelFormatString(this.graph, this.labelFormatString);
  !this.graph.dataLabel && $getOrCreateDataLabel(this.graph);
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
  data_0 = new ArrayList;
  srsInfoList = new ArrayList;
  stroke = new CFStroke(($clinit_CFColor() , WHITE), 1);
  index_0 = 0;
  maxItemsToDisplay = $getMaxItemsToDisplay(this);
  if (this.graph.seriesShapes.array.length > 0) {
    $setLastShapes(this.graph, this.graph.seriesShapes);
    this.graph.seriesShapes = new ArrayList;
  }
  row = $getFirstVisibleRow(this.graph.data_0);
  while (row) {
    dataIndex = row.origIndex;
    curIndex = row.curIndex;
    cell = $getCell(this.graph.data_0, dataIndex, this.graph.currentColumn);
    if (!!cell && !isNaN_0($getValue(cell)) && $getValue(cell) != 0) {
      fill = new CFFill($getColorForCellValueCategoryNameAndIndex(this.graph, cell, this.graph.data_0.valueColumnName, curIndex));
      showAsFiltered = inShowAsFilteredMode && row.showAsFiltered;
      showAsFiltered && (fill = new CFFill($deSaturateAndLighten(fill.color_0, 0.9, 0.4)));
      srsInfo = new SrsRectInfo(cell, null, fill, stroke);
      $add_1(data_0, $getValue(cell));
      inShowAsFilteredMode && hasFilteredData && !showAsFiltered && (srsInfo.highlightAlways = true);
      srsInfoList.array[srsInfoList.array.length] = srsInfo;
      ++index_0;
    }
    if (srsInfoList.array.length >= maxItemsToDisplay)
      break;
    row = $getNextVisibleRow(this.graph.data_0, row);
  }
  $add_1(this.graph.seriesShapes, new SeriesInfo(srsInfoList, null));
  treeRect = $getTreeRect(this);
  rects = $getTreemapRects(tmi, data_0, treeRect.width_0, treeRect.height_0, treeRect.x_0, treeRect.y_0);
  index_0 = 0;
  for (rect$iterator = new ArrayList$1(rects); rect$iterator.i < rect$iterator.this$01.array.length;) {
    rect = castTo($next_3(rect$iterator), 4);
    $setRect((checkCriticalElementIndex(index_0, srsInfoList.array.length) , castTo(srsInfoList.array[index_0], 82)), rect);
    ++index_0;
  }
  this.graph.setNeedsFormat(false);
  $drawAllRects(this, rnd);
}
;
_.freeResources = function freeResources_29(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.labelFormatString = null;
}
;
_.getDrillFilter = function getDrillFilter_6(shapeInfo, clicked){
  var curRow, curRow$iterator, filter, filterBase, index_0, otherNames;
  if (!!shapeInfo && !!shapeInfo.cell && !!shapeInfo.cell.row && shapeInfo.cell.row.isOtherRow) {
    if ($usingCardBus(this.graph.chart) && clicked) {
      $handleClickOnOtherInCardBusMode(this.graph, shapeInfo.cell.row, this.maxBeforeOther);
      return this.graph.drillFilter;
    }
    otherNames = new ArrayList;
    index_0 = 0;
    for (curRow$iterator = this.graph.data_0.rows_0.iterator(); curRow$iterator.hasNext_0();) {
      curRow = castTo(curRow$iterator.next_1(), 7);
      if (!curRow.hidden) {
        index_0 >= this.maxBeforeOther && $add_1(otherNames, curRow.name_0);
        ++index_0;
      }
    }
    filterBase = new FilterBase($getRowParentName(shapeInfo.cell), 'IN', shapeInfo.cell.row);
    filterBase.values = otherNames;
    $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
    return $clinit_StrUtil() , getDrillFilterFromFilters(filter, null);
  }
  return null;
}
;
_.initColors = function initColors_4(){
  this.graph.colorAry = $getSeriesColors(this.graph.colorMgr, $getNumRows(this.graph.data_0), $getNumRows(this.graph.data_0), false);
}
;
_.processChartOptions = function processChartOptions_30(){
  var key, key$iterator, value_0;
  this.labelFormatString = '%_NAME';
  (this.graph.getChartOptionAsString('hover_text') == null || this.graph.getChartOptionAsString('hover_text').length == 0) && (this.graph.hoverLabelText = '%_CATEGORY_NAME : %_VALUE');
  this.topLeftText = false;
  this.maxBeforeOther = 0;
  if (this.graph.hasChartOptions()) {
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'max_before_other':
          this.maxBeforeOther = getInt(value_0, 0);
          !!$getLegend(this.graph) && instanceOf($getLegend(this.graph), 65) && (castTo($getLegend(this.graph), 65).itemsBeforeOther = this.maxBeforeOther);
          break;
        case 'pv_decimal_places':
          $applyPercentDecimalPlaces(this.graph.dataLabelNumberFormatter, value_0);
          $applyPercentDecimalPlaces(this.graph.numberFormatter, value_0);
          break;
        case 'text_position':
          this.topLeftText = $equalsIgnoreCase(value_0, 'topleft');
          break;
        case 'label_text':
          this.labelFormatString = value_0;
      }
    }
  }
}
;
_.resetForTypeChange = function resetForTypeChange_16(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    this.graph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
  if (this.graph.data_0) {
    this.graph.data_0.summaryColumn = null;
    $clearAlternateValues_0(this.graph.data_0);
    $clearAlternateNames(this.graph.data_0);
  }
}
;
_.setData = function setData_29(data_0){
  var theData;
  if (data_0) {
    this.originalData = data_0;
    this.currentViewDataGrid = null;
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $clone(this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    $getNumCols(this.currentViewDataGrid) > 1 && !this.currentViewDataGrid.dataHasAlreadyBeenTransposed && $transposeRowsCols(this.currentViewDataGrid);
    this.graph.data_0 = this.currentViewDataGrid;
    $setRowsAsNonTimeData(this.graph.data_0);
  }
  $setColumnToAbsoluteValueData(this.graph.data_0) && $setWarningMessage(this.graph.chart, getString('WARN_NEGATIVE_NUMBERS', this.graph.chart.locale));
  this.graph.data_0.numVisibleRows > $intern_10 && $warnNotAllDataShown(this.graph.chart);
}
;
_.setFrame = function setFrame_17(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, rect, rect$iterator, srsInfo, srsInfo$iterator, startOffset, totalOffset;
  if (this.graph.seriesShapes.array.length > 0) {
    if (!!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && !castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).animInfo) {
      for (srsInfo$iterator = new ArrayList$1(this.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 19);
        if ($equals_2(type_0, 'VBar2')) {
          startOffset = 0;
          totalOffset = srsInfo.srsShapeList.array.length * 50;
          for (rect$iterator = new ArrayList$1(srsInfo.srsShapeList); rect$iterator.i < rect$iterator.this$01.array.length;) {
            rect = castTo($next_3(rect$iterator), 18);
            animInfo = new AnimInfoSrs(add_1(startTime, startOffset), sub_1(endTime, totalOffset), easingType);
            rect.animInfo = animInfo;
            startOffset += 50;
            totalOffset -= 50;
          }
        }
         else {
          for (rect$iterator = new ArrayList$1(srsInfo.srsShapeList); rect$iterator.i < rect$iterator.this$01.array.length;) {
            rect = castTo($next_3(rect$iterator), 18);
            animInfo = new AnimInfoSrs(startTime, endTime, easingType);
            rect.animInfo = animInfo;
          }
        }
      }
    }
    this.graph.geAry.clear_0();
    $createDrawObjectsForFrame_3(this, rnd, curTime);
    compare_22(curTime, endTime) >= 0 && $hasDataLabels(this.graph) && $drawDataLabels(this.graph.dataLabel, rnd, false);
  }
}
;
_.setHoverData = function setHoverData_21(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_6(this, this.hoverData, rnd);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_13(hoverData, rnd){
  return $setHoverEffects_6(this, hoverData, rnd);
}
;
_.graphLegendMargin = 50;
_.hideHoverLegend = false;
_.maxBeforeOther = 0;
_.maxFontSize = 20;
_.topLeftText = false;
var Lcom_domo_charting_graphs_HandlerTreeMap_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerTreeMap', 202);
function $getWaterfallFormatData(this$static, data_0){
  this$static.graph.hoverLabelText = '%_ITEM_NAME %_GROUP_NAME : %_ORIG_VALUE';
  $processChartOptions_10(this$static);
  return $getMetaDataSize(data_0) == 2?$getWaterfallFormatDataNumGroup(this$static, data_0):$getWaterfallFormatDataNormal(this$static, data_0);
}

function $getWaterfallFormatDataNormal(this$static, data_0){
  var cell, colIndex, curNewCol, curValue, dataFormat, key, key$iterator, keys_0, newCell, newColList, newDataGrid, newRow, newRowList, rowIndex, rowInfo, rowInfo$iterator, startValueSet, summaryCol, value_0, valueStr;
  summaryCol = new ColRowInfo_2(this$static.summaryText, 'STRING');
  data_0.cols_0.add_0(summaryCol);
  dataFormat = $getFirstDataFormat(data_0);
  newRowList = new ArrayList;
  newColList = new ArrayList;
  curValue = 0;
  rowIndex = 0;
  colIndex = 0;
  startValueSet = false;
  curNewCol = null;
  for (rowInfo$iterator = data_0.rows_0.iterator(); rowInfo$iterator.hasNext_0();) {
    rowInfo = castTo(rowInfo$iterator.next_1(), 7);
    keys_0 = new ArrayList_1(new AbstractMap$1(rowInfo.cellMap));
    sort_4(keys_0.array, keys_0.array.length, null);
    for (key$iterator = new ArrayList$1(keys_0); key$iterator.i < key$iterator.this$01.array.length;) {
      key = castTo($next_3(key$iterator), 29);
      cell = castTo($get_1(rowInfo.cellMap, key), 16);
      value_0 = 0;
      if ($getMetaDataCell(cell, 0)) {
        valueStr = $getMetaDataCell(cell, 0).valueStr;
        valueStr != null?(value_0 = getDouble_0(valueStr, 0)):(value_0 = $getValue($getMetaDataCell(cell, 0)));
      }
      isNaN(value_0) || (curValue += value_0);
      newCell = new Cell(value_0);
      newCell.altValue = curValue;
      if (!startValueSet) {
        startValueSet = true;
        newCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
        $addMetaData_1(newCell, 0, 'blue', 'STRING');
      }
      newRow = new ColRowInfo_3($getName($getColumn(data_0, 0)), $getValueStrOrValue(cell), 'STRING', colIndex, newCell, true, rowIndex);
      $setMetadata(newRow, new ColumnMetadata_0($getColumn(data_0, 0).metadata));
      newRowList.array[newRowList.array.length] = newRow;
      if (!curNewCol) {
        curNewCol = new ColRowInfo_3(rowInfo.parentName, $getName(rowInfo), rowInfo.type_0, rowIndex, newCell, false, colIndex);
        $setMetadata(curNewCol, new ColumnMetadata_0(rowInfo.metadata));
        curNewCol.format = dataFormat;
        newColList.array[newColList.array.length] = curNewCol;
      }
       else {
        $addItem_0(curNewCol, newCell, false, colIndex);
      }
      ++colIndex;
    }
    if (rowIndex == $getNumRows(data_0) - 1 || this$static.showSummaryBars) {
      newCell = new Cell(curValue);
      newCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
      $addMetaData_1(newCell, 0, 'blue', 'STRING');
      newRow = new ColRowInfo_3('', this$static.summaryText, 'STRING', colIndex, newCell, true, rowIndex);
      newRowList.array[newRowList.array.length] = newRow;
      $addItem_0(curNewCol, newCell, false, colIndex++);
    }
    curNewCol = null;
    ++rowIndex;
  }
  newDataGrid = new DataGrid_0(data_0.name_0, 'waterfall', newRowList, newColList, null);
  $setOrigColNameList(newDataGrid, data_0.origColNameList);
  $setDateJoinColumn(newDataGrid, data_0.dateJoinColumn);
  return newDataGrid;
}

function $getWaterfallFormatDataNumGroup(this$static, data_0){
  var c, cell, cells_0, colIndex, colName, colNameVals, colNamesOrdered, curValue, dataFormat, groupCol, i, itemCell, key, key$iterator, keys_0, newCell, newColInfo, newColList, newDataGrid, newRow, newRowInfo, newRowList, newSummaryCell, rowIndex, startValueSet, summaryCol, value_0;
  summaryCol = new ColRowInfo_2(this$static.summaryText, 'STRING');
  data_0.cols_0.add_0(summaryCol);
  newRowList = new ArrayList;
  newColList = new ArrayList;
  colNameVals = new TreeMap;
  colNamesOrdered = new ArrayList;
  dataFormat = $getFirstDataFormat(data_0);
  curValue = 0;
  rowIndex = 0;
  colIndex = 0;
  startValueSet = false;
  groupCol = $getColumn(data_0, 0);
  keys_0 = new ArrayList_1(new AbstractMap$1(groupCol.cellMap));
  sort_4(keys_0.array, keys_0.array.length, null);
  for (key$iterator = new ArrayList$1(keys_0); key$iterator.i < key$iterator.this$01.array.length;) {
    key = castTo($next_3(key$iterator), 29);
    cell = castTo($get_1(groupCol.cellMap, key), 16);
    colName = $getValueAsString(cell);
    if (getEntryValueOrNull($getEntry_0(colNameVals, colName)) == null) {
      cells_0 = new ArrayList;
      cells_0.array[cells_0.array.length] = cell;
      $put_4(colNameVals, colName, cells_0);
      colNamesOrdered.array[colNamesOrdered.array.length] = colName;
    }
     else {
      cells_0 = castTo(getEntryValueOrNull($getEntry_0(colNameVals, colName)), 42);
      cells_0.add_0(cell);
    }
  }
  for (c = 0; c < colNamesOrdered.array.length; c++) {
    colName = (checkCriticalElementIndex(c, colNamesOrdered.array.length) , castToString(colNamesOrdered.array[c]));
    newColInfo = null;
    cells_0 = castTo(getEntryValueOrNull($getEntry_0(colNameVals, colName)), 42);
    for (i = 0; i < cells_0.size_1(); i++) {
      cell = castTo(cells_0.get_1(i), 16);
      itemCell = $getMetaDataCell(cell, 0);
      newCell = new Cell_0($getMetaDataCell(cell, 1));
      value_0 = $getValue(newCell);
      curValue += value_0;
      newCell.altValue = curValue;
      if (!startValueSet) {
        startValueSet = true;
        newCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
        $addMetaData_1(newCell, 0, 'blue', 'STRING');
      }
      newRowInfo = new ColRowInfo_3('', itemCell.valueStr, 'STRING', rowIndex, newCell, true, colIndex);
      newRowList.array[newRowList.array.length] = newRowInfo;
      if (i == 0) {
        newColInfo = new ColRowInfo_3('', $getValueAsString(cell), 'STRING', 0, newCell, false, rowIndex);
        newColInfo.format = dataFormat;
        newColList.array[newColList.array.length] = newColInfo;
      }
       else {
        $addItem_0(newColInfo, newCell, false, rowIndex);
      }
      ++rowIndex;
    }
    if (c == colNamesOrdered.array.length - 1 || this$static.showSummaryBars) {
      newSummaryCell = new Cell(curValue);
      newSummaryCell.metaData = initUnidimensionalArray(Lcom_domo_charting_data_Cell_2_classLit, $intern_9, 16, 1, 0, 1);
      $addMetaData_1(newSummaryCell, 0, 'blue', 'STRING');
      newRow = new ColRowInfo_3('', this$static.summaryText, 'STRING', colIndex, newSummaryCell, true, rowIndex);
      newRowList.array[newRowList.array.length] = newRow;
      $addItem_0(newColInfo, newSummaryCell, false, colIndex);
    }
    ++colIndex;
  }
  newDataGrid = new DataGrid_0(data_0.name_0, 'waterfall', newRowList, newColList, null);
  $setOrigColNameList(newDataGrid, data_0.origColNameList);
  $setDateJoinColumn(newDataGrid, data_0.dateJoinColumn);
  return newDataGrid;
}

function $processChartOptions_10(this$static){
  var key, key$iterator, value_0;
  this$static.summaryText = 'Summary';
  this$static.reverseColorDir = false;
  $convertDatalabelAndHoverMacros(this$static.graph, '%_VALUE', '%_ORIG_VALUE');
  $processChartOptions_4(this$static);
  if (this$static.graph.hasChartOptions()) {
    for (key$iterator = this$static.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this$static.graph.getChartOptionAsString(key);
      switch (key) {
        case 'show_summary_bars':
          this$static.showSummaryBars = $equalsIgnoreCase(value_0, 'true');
          break;
        case 'summary_text':
          this$static.summaryText = ($clinit_StrUtil() , entityDecodeString(value_0));
          break;
        case 'dont_include_zero':
          isTrue(value_0) && $setAlwaysIncludeZero(this$static, 'include_zero', 'false');
          break;
        case 'color_direction':
          $startsWith(value_0.toLowerCase(), 'negative') && (this$static.reverseColorDir = true);
      }
    }
  }
}

function HandlerWaterfall(){
  $clinit_HandlerBar();
  HandlerBar.call(this);
}

defineClass(336, 60, $intern_37, HandlerWaterfall);
_.createSeriesInfoObjs = function createSeriesInfoObjs_13(sGraph, rows_0, baseScale, valScale, valScale2){
  var BLUE_FILL, GREEN_FILL, RED_FILL, barInfo, barList, barRect, barWidth, catScalePos, cell, curCol, curRow, fill, height, lastState, minCatPos, minValuePos, numRows, origValue, origValuesScalePos, rowIndex, value_0, valueScale, valueScalePos, width_0, zeroValuePos;
  GREEN_FILL = new CFFill($getColor(this.graph, 'WaterfallGreen', '#A0D771'));
  RED_FILL = new CFFill($getColor(this.graph, 'WaterfallRed', '#E45850'));
  BLUE_FILL = new CFFill($getColor(this.graph, 'WaterfallBlue', '#95CBEC'));
  if (!rows_0)
    return;
  numRows = rows_0.size_1();
  barWidth = $getBarWidth(this, numRows);
  minCatPos = baseScale.getMinPosition();
  curCol = $getFirstVisibleCol(this.graph.data_0);
  valueScale = $getValueScaleForColumn(curCol, valScale, valScale2);
  if (valueScale) {
    minValuePos = valueScale.getMinPosition();
    zeroValuePos = valueScale.getPositionForValue(0);
    barList = new ArrayList;
    curRow = $getFirstVisibleRow(this.graph.data_0);
    rowIndex = 0;
    while (curRow) {
      cell = $getFirstCell(curRow);
      value_0 = $getValue(cell);
      origValue = cell.value_0;
      if (!isNaN(value_0)) {
        catScalePos = baseScale.getPositionForValue(rowIndex);
        valueScalePos = valueScale.getPositionForValue(value_0);
        origValuesScalePos = valueScale.getPositionForValue(origValue);
        barRect = $getBarRect(this, minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, barWidth);
        if (!$getMetaDataCell(cell, 0) || !$equals_2($getMetaDataCell(cell, 0).valueStr, 'blue')) {
          if (origValue > 0) {
            if (sGraph.isHorizontal) {
              width_0 = origValuesScalePos - zeroValuePos;
              $setX_0(barRect, barRect.x_0 + barRect.width_0 - width_0);
              barRect.width_0 = width_0;
              value_0 < 0 && (barRect.x_0 = minValuePos + valueScalePos - width_0);
            }
             else {
              barRect.height_0 = origValuesScalePos - zeroValuePos;
              value_0 < 0 && (barRect.y_0 = minValuePos - valueScalePos);
            }
            fill = GREEN_FILL;
            this.reverseColorDir && (fill = RED_FILL);
          }
           else {
            if (sGraph.isHorizontal) {
              $setX_0(barRect, barRect.x_0 + barRect.width_0);
              barRect.width_0 = zeroValuePos - origValuesScalePos;
              value_0 < 0 && (barRect.x_0 = minValuePos + valueScalePos);
            }
             else {
              height = zeroValuePos - origValuesScalePos;
              barRect.height_0 = height;
              $setY_0(barRect, barRect.y_0 - height);
              value_0 < 0 && (barRect.y_0 = minValuePos - valueScalePos - barRect.height_0);
            }
            fill = RED_FILL;
            this.reverseColorDir && (fill = GREEN_FILL);
          }
        }
         else {
          fill = BLUE_FILL;
        }
        lastState = $getLastShapeForCell(this.sGraph, cell, false);
        barInfo = new SrsBarInfo_1(this, cell, barRect, null, fill, null, -1, lastState);
        barList.array[barList.array.length] = barInfo;
      }
      curRow = $getNextVisibleRow(this.graph.data_0, curRow);
      ++rowIndex;
    }
    $add_1(this.graph.seriesShapes, new SeriesInfo(barList, null));
  }
  $drawAllBars(this, -1, null);
}
;
_.format_0 = function format_25(rnd){
  this.graph.supportsDrag = false;
  $format_0(this, rnd);
}
;
_.freeResources = function freeResources_30(dataToKeep){
  $freeResources_18(this, dataToKeep);
  this.summaryText = null;
}
;
_.getHintTextOverride = function getHintTextOverride_1(){
  return '%_ORIG_VALUE';
}
;
_.processChartOptions = function processChartOptions_31(){
  $processChartOptions_10(this);
}
;
_.resetForTypeChange = function resetForTypeChange_17(){
  if (this.originalData) {
    !!this.graph.data_0 && this.graph.data_0 != this.originalData && $freeResources_11(this.graph.data_0);
    $clearHiddenRows(this.originalData);
    this.sGraph.data_0 = this.originalData;
  }
  this.currentViewDataGrid = null;
}
;
_.setData = function setData_30(data_0){
  var columnOrder, limit, columnOrder_0, theData;
  if (data_0) {
    if (data_0.orderedColumnList) {
      columnOrder = (columnOrder_0 = new ArrayList , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'CATEGORY'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'VALUE1'))) , $add_1(columnOrder_0, valueOf($getColumnIndexForMappedName(data_0, 'VALUE2'))) , columnOrder_0);
      data_0 = $transformOrderedColumnToNoGroupItemValue(data_0, columnOrder, true);
    }
    limit = $getMobileLimit(this.graph, 500, $intern_36);
    $setOriginalData(this, data_0);
    (limit < $getNumRows(data_0) || limit < $getMaxCellsPerRow(data_0)) && $warnNotAllDataShown(this.graph.chart);
    $limitNoGroupItemValueSeries(this, this.currentViewDataGrid, limit);
    !this.currentViewDataGrid && (this.currentViewDataGrid = this.originalData);
    theData = $getWaterfallFormatData(this, this.currentViewDataGrid);
    this.currentViewDataGrid != this.originalData && this.currentViewDataGrid != theData && this.currentViewDataGrid != this.graph.data_0 && $freeResources_11(this.currentViewDataGrid);
    this.currentViewDataGrid = theData;
    this.sGraph.data_0 = this.currentViewDataGrid;
  }
}
;
_.reverseColorDir = false;
_.showSummaryBars = false;
_.summaryText = 'Summary';
var Lcom_domo_charting_graphs_HandlerWaterfall_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerWaterfall', 336);
function $clinit_HandlerWordCloud(){
  $clinit_HandlerWordCloud = emptyMethod;
  defaultColor_0 = ($clinit_CFColor() , TEXT_DARK_GRAY);
}

function $addWordToDrawArrayBasedOnPercentComplete(rnd, hoverLabel, ge, srsInfo, pctComplete, colorOverride){
  var textItem, visibleRect, theShape;
  textItem = $getWordAsTextItemPercentComplete(srsInfo, rnd, pctComplete, colorOverride);
  if (textItem) {
    pctComplete >= 1 && $addShape(ge, (visibleRect = $getVisbleRect(srsInfo) , theShape = new CFShape_1(visibleRect, ($clinit_CFFill() , TRANSPARENT_0), null) , theShape.dataObject = srsInfo , $setHoverText_8(theShape, $getFormattedHoverText_0(hoverLabel, srsInfo.handler.graph.getHoverFormatterForCell(srsInfo.cell), srsInfo.cell)) , theShape));
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, textItem);
  }
}

function $adjustAngle(this$static, angle){
  angle += $intern_6 * $nextDouble(this$static.random) * 10;
  angle > $intern_2 && (angle -= $intern_2);
  return angle;
}

function $adjustRadius(this$static, radius){
  radius += 0.5;
  radius > (this$static.graph.bnds.width_0 + this$static.graph.bnds.height_0) / 2 && (radius = -1);
  return radius;
}

function $calcFontSizeRatio(this$static){
  var minWeightForMinSize;
  if (this$static.wordsToShow.array.length > 0) {
    this$static.maxWeight = castTo($get_2(this$static.wordsToShow, 0), 97).weight;
    this$static.minWeight = castTo($get_2(this$static.wordsToShow, this$static.wordsToShow.array.length - 1), 97).weight;
    minWeightForMinSize = this$static.minWeight;
    minWeightForMinSize < 0 && (minWeightForMinSize = 0);
    this$static.range = this$static.maxWeight - this$static.minWeight;
    this$static.range == 0 && (this$static.range = 1);
    this$static.minFontSize = round_int(minWeightForMinSize * this$static.maxFontSize / this$static.maxWeight);
    this$static.minFontSize < this$static.minFontSizeToUse && (this$static.minFontSize = this$static.minFontSizeToUse);
    this$static.fontSizeRatio = (this$static.maxFontSize - this$static.minFontSize) / this$static.range;
  }
}

function $calcWordFontSizes(this$static, rnd){
  $calcFontSizeRatio(this$static);
  this$static.minFontSize > this$static.maxFontSize && (this$static.minFontSize = this$static.maxFontSize);
  while ($wordAreaGreaterThanTotalArea(this$static, rnd)) {
    if ($reduceMaxFontSize(this$static))
      $calcFontSizeRatio(this$static);
    else 
      break;
  }
}

function $createDrawObjectsAndHighlightOneWord(this$static, rnd, hoverData){
  var ge, hasFilteredData, highlightWord, hoverLabel, inShowAsFilteredMode, srsInfo, srsInfo$iterator, wordColor, wordInfo;
  highlightWord = null;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  this$static.graph.geAry.clear_0();
  inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
  hasFilteredData = !!this$static.graph.data_0 && this$static.graph.data_0.hasFilteredRows;
  hoverData != null && instanceOf(hoverData, 97)?(highlightWord = castTo(hoverData, 97)):hoverData != null && instanceOf(hoverData, 7) && (highlightWord = $getWordForDataRow(this$static, castTo(hoverData, 7)));
  if (this$static.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0) {
    ge = new GraphicElement;
    for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 97)) {
        wordInfo = castTo(srsInfo, 97);
        wordColor = $getFontColor(wordInfo);
        inShowAsFilteredMode && hasFilteredData?srsInfo.cell.row.showAsFiltered && (wordColor = $deSaturateAndLighten($getFontColor(wordInfo), 0.9, 0.4)):!!highlightWord && (wordColor = ($clinit_CFColor() , DISABLED_DARK_GRAY));
        wordInfo != highlightWord && $addWordToDrawArrayBasedOnPercentComplete(rnd, hoverLabel, ge, wordInfo, 1, wordColor);
      }
    }
    if (highlightWord) {
      wordColor = $getFontColor(highlightWord);
      inShowAsFilteredMode && hasFilteredData && highlightWord.cell.row.showAsFiltered && (wordColor = $deSaturateAndLighten($getFontColor(highlightWord), 0.1, 0.5));
      $addWordToDrawArrayBasedOnPercentComplete(rnd, hoverLabel, ge, highlightWord, 1, wordColor);
      $setHoverText(this$static.graph, $getFormattedHoverText_0(hoverLabel, this$static.graph.getHoverFormatterForCell(highlightWord.cell), highlightWord.cell));
    }
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $createDrawObjectsForFrame_4(this$static, rnd, curTime){
  var ge, hasFilteredData, hoverLabel, inShowAsFilteredMode, pctComplete, showAsFiltered, srsInfo, srsInfo$iterator, wordColorOverride;
  inShowAsFilteredMode = $usingCardBus(this$static.graph.chart);
  hasFilteredData = !!this$static.graph.data_0 && this$static.graph.data_0.hasFilteredRows;
  hoverLabel = $getOrCreateHoverLabel(this$static.graph);
  this$static.graph.geAry.clear_0();
  if (this$static.graph.seriesShapes.array.length > 0 && !!castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0) {
    ge = new GraphicElement;
    for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (instanceOf(srsInfo, 97)) {
        pctComplete = 1;
        !!srsInfo.animInfo && (pctComplete = $getPercentComplete(srsInfo.animInfo, curTime));
        wordColorOverride = null;
        showAsFiltered = inShowAsFilteredMode && hasFilteredData && srsInfo.cell.row.showAsFiltered;
        showAsFiltered && !!$getFontColor(castTo(srsInfo, 97)) && (wordColorOverride = $deSaturateAndLighten($getFontColor(castTo(srsInfo, 97)), 0.9, 0.4));
        $addWordToDrawArrayBasedOnPercentComplete(rnd, hoverLabel, ge, castTo(srsInfo, 97), pctComplete, wordColorOverride);
      }
    }
    $addGraphicElement_0(this$static.graph, ge);
  }
}

function $createListOfWeightedWords(this$static){
  var cell, currentWordCount, data_0, row, word;
  data_0 = this$static.graph.data_0;
  if (!data_0 || data_0.numVisibleRows == 0)
    return;
  currentWordCount = 0;
  this$static.wordsToShow.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  row = $getFirstVisibleRow(data_0);
  while (currentWordCount < this$static.numWordsToShow && !!row) {
    cell = $getFirstVisibleCell(data_0, row);
    if (!!cell && $getName(row) != null && $getName(row).length > 0) {
      word = new SrsWeightedWordInfo(this$static, cell, $getName(row));
      $add_1(this$static.wordsToShow, word);
      ++currentWordCount;
    }
    row = $getNextVisibleRow(data_0, row);
  }
}

function $findSpotForWord(this$static, word){
  var X, Y, angle, node, radius, testLocation, oldSize, newSize;
  angle = $nextDouble(this$static.random) * $intern_2;
  radius = this$static.startingRadius;
  while (true) {
    if ($positionRect(word, (X = radius * $wnd.Math.cos(angle) , X + this$static.centerX), (Y = radius * $wnd.Math.sin(angle) , Y + this$static.centerY), this$static.graph.getInnerBounds())) {
      testLocation = $getVisbleRect(word);
      if ($getNodeContainingRect(this$static.rTree, testLocation)) {
        angle = $adjustAngle(this$static, angle);
        radius = $adjustRadius(this$static, radius);
        if (radius < 0) {
          if (word.font_0.size_0 <= this$static.minFontSizeToUse)
            return false;
          angle = $nextDouble(this$static.random) * $intern_2;
          radius = this$static.startingRadius;
          oldSize = round_int(word.font_0.size_0);
          newSize = round_int(word.font_0.size_0 * 0.9);
          newSize == oldSize && --newSize;
          $calcDimensions(word, this$static.graph.rnd, word.font_0, newSize, word.font_0.color_0);
        }
      }
       else {
        node = new CFRNode(testLocation);
        $addNode(this$static.rTree, node);
        break;
      }
    }
     else 
      return false;
  }
  return true;
}

function $getFirstVisibleCell(data_0, row){
  var cell, count, i;
  count = $getNumCols(data_0);
  cell = null;
  for (i = 0; i < count; i++) {
    cell = $getCellByCellIndex(row, i);
    if (!!cell && !cell.column.hidden)
      return cell;
  }
  return cell;
}

function $getFontSizeForWeight(this$static, weight){
  var fontSizeForWeight;
  fontSizeForWeight = round_int((weight - this$static.minWeight) * this$static.fontSizeRatio + 0.5) + this$static.minFontSize;
  return fontSizeForWeight;
}

function $getWordForDataRow(this$static, row){
  var srsInfo, srsInfo$iterator;
  if (!!this$static.graph.seriesShapes && this$static.graph.seriesShapes.array.length > 0) {
    for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
      srsInfo = castTo($next_3(srsInfo$iterator), 18);
      if (!!srsInfo.cell && srsInfo.cell.row == row)
        return castTo(srsInfo, 97);
    }
  }
  return null;
}

function $placeWords(this$static){
  var data_0, firstWord, listOfWords, node, seriesInfo, visibleRect, word, word$iterator;
  data_0 = this$static.graph.data_0;
  if (!data_0 || data_0.numVisibleRows == 0)
    return;
  this$static.rTree = new CFRNode_0;
  listOfWords = new ArrayList_0(this$static.wordsToShow.array.length);
  firstWord = true;
  for (word$iterator = new ArrayList$1(this$static.wordsToShow); word$iterator.i < word$iterator.this$01.array.length;) {
    word = castTo($next_3(word$iterator), 97);
    if (firstWord) {
      $positionRect(word, this$static.centerX, this$static.centerY, this$static.graph.bnds);
      $setBottom(word.rect, this$static.centerY);
      visibleRect = $getVisbleRect(word);
      visibleRect.y_0 < this$static.graph.bnds.y_0 && $setY_0(word.rect, word.rect.y_0 + (this$static.graph.bnds.y_0 - visibleRect.y_0));
      visibleRect = $getVisbleRect(word);
      this$static.startingRadius = round_int(visibleRect.height_0) / 2 | 0;
      listOfWords.array[listOfWords.array.length] = word;
      node = new CFRNode(visibleRect);
      $addNode(this$static.rTree, node);
      firstWord = false;
    }
     else {
      $findSpotForWord(this$static, word)?(listOfWords.array[listOfWords.array.length] = word , true):undefined;
    }
  }
  seriesInfo = new SeriesInfo(listOfWords, null);
  this$static.graph.seriesShapes.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  $add_1(this$static.graph.seriesShapes, seriesInfo);
}

function $reduceMaxFontSize(this$static){
  this$static.maxFontSize = round_int(0.9 * this$static.maxFontSize);
  this$static.minFontSize = round_int(0.9 * this$static.minFontSize);
  this$static.minFontSize < this$static.minFontSizeToUse && (this$static.minFontSize = this$static.minFontSizeToUse);
  if (this$static.maxFontSize <= this$static.minFontSizeToUse) {
    this$static.maxFontSize = this$static.minFontSizeToUse;
    return false;
  }
  return true;
}

function $setHoverEffects_7(this$static, hoverData, rnd){
  var hoverLabel, hoverPoint, hoverText, rect, redrawNeeded;
  redrawNeeded = false;
  if ($hasInteractions(this$static.graph)) {
    $createDrawObjectsAndHighlightOneWord(this$static, rnd, hoverData);
    redrawNeeded = true;
  }
  if (hoverData != null) {
    hoverText = this$static.graph.currentHoverString;
    if (!rnd.supportsNativeHover() && instanceOf(hoverData, 97) && hoverText != null && hoverText.length > 0) {
      clearGraphicElementArray(this$static.graph.frontGeAry);
      hoverLabel = $getOrCreateHoverLabel(this$static.graph);
      rect = castTo(hoverData, 97).rect;
      hoverPoint = new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0 / 2);
      $setY(hoverPoint, rect.y_0 + rect.height_0 / 4);
      $addPrimary_2(hoverLabel, rnd, hoverText, hoverPoint, 0, false);
    }
  }
   else {
    clearGraphicElementArray(this$static.graph.frontGeAry);
  }
  return redrawNeeded;
}

function $sortDataIfNeeded(this$static){
  if (!this$static.dataHasBeenSorted) {
    $sortRowsDesc(this$static.graph.data_0, SORT_SUM, false);
    this$static.dataHasBeenSorted = true;
  }
}

function $wordAreaGreaterThanTotalArea(this$static, rnd){
  var areaForCalc, calculatedWordArea, colorToUse, count, word, word$iterator, wordArea, wordColor, wordFontSize;
  calculatedWordArea = 0;
  areaForCalc = this$static.totalArea * 0.9;
  wordColor = this$static.firstColor;
  $setColor_1(this$static.wordFont, this$static.firstColor);
  count = 0;
  for (word$iterator = new ArrayList$1(this$static.wordsToShow); word$iterator.i < word$iterator.this$01.array.length;) {
    word = castTo($next_3(word$iterator), 97);
    count == 5?(wordColor = this$static.secondColor):count == 10 && (wordColor = defaultColor_0);
    wordFontSize = $getFontSizeForWeight(this$static, word.weight) + 1;
    colorToUse = word.color_0?word.color_0:wordColor;
    do {
      --wordFontSize;
      wordArea = $calcDimensions(word, rnd, this$static.wordFont, wordFontSize, colorToUse);
    }
     while (wordFontSize > this$static.minFontSize && (word.rect.width_0 > this$static.graph.bnds.width_0 || word.rect.height_0 > this$static.graph.bnds.height_0));
    if (wordFontSize == this$static.minFontSizeToUse && word.rect.width_0 > this$static.graph.bnds.width_0) {
      $truncateToWidth(word, rnd, this$static.wordFont, wordFontSize, this$static.graph.bnds.width_0);
      wordArea = $calcDimensions(word, rnd, this$static.wordFont, wordFontSize, colorToUse);
    }
    calculatedWordArea = round_int(calculatedWordArea + wordArea);
    if (calculatedWordArea > areaForCalc || word.rect.width_0 > this$static.graph.bnds.width_0 || word.rect.height_0 > this$static.graph.bnds.height_0)
      return true;
    ++count;
  }
  return false;
}

function HandlerWordCloud(){
  $clinit_HandlerWordCloud();
  this.wordsToShow = new ArrayList;
  this.wordFont = new CFFont_0(null, 12, defaultColor_0);
}

defineClass(338, 118, {}, HandlerWordCloud);
_.format_0 = function format_26(rnd){
  this.random = new Random;
  this.firstColor = $getColor(this.graph, 'WordCloudFirstOrange', '#FEAD59');
  this.secondColor = $getColor(this.graph, 'WordCloudSecBlue', '#76B1DD');
  this.graph.hoverLabelText = '%_VALUE';
  this.maxFontSize = 256;
  this.numWordsToShow = round_int(this.graph.bnds.width_0 * this.graph.bnds.height_0) / $intern_10 | 0;
  if (this.numWordsToShow < 25) {
    this.numWordsToShow = 25;
    this.minFontSizeToUse = 6;
  }
  this.centerX = this.graph.bnds.x_0 + this.graph.bnds.width_0 / 2;
  this.centerY = this.graph.bnds.y_0 + this.graph.bnds.height_0 / 2;
  this.graph.geAry.clear_0();
  $resetDataLabel(this.graph);
  this.graph.hasChartOptions();
  this.totalArea = this.graph.bnds.width_0 * this.graph.bnds.height_0;
  $sortDataIfNeeded(this);
  $createListOfWeightedWords(this);
  $calcWordFontSizes(this, rnd);
  $placeWords(this);
  $createDrawObjectsForFrame_4(this, rnd, 0);
  this.graph.setNeedsFormat(false);
  $setAnimateDrawNeeded(this.graph.chart);
}
;
_.freeResources = function freeResources_31(dataToKeep){
  $freeResources_17(this, dataToKeep);
  this.firstColor = null;
  this.secondColor = null;
  this.rTree = null;
  this.wordFont = null;
  this.random = null;
  this.wordsToShow = null;
}
;
_.processChartOptions = function processChartOptions_32(){
  this.graph.hasChartOptions();
}
;
_.resetForTypeChange = function resetForTypeChange_18(){
  if (this.dataHasBeenSorted && !!this.graph.data_0) {
    $sortRows(this.graph.data_0, 0);
    this.dataHasBeenSorted = false;
  }
}
;
_.setData = function setData_31(data_0){
  $setNumberFormatFromColumnFormat(this.graph);
  this.dataHasBeenSorted = false;
  $setAnimationData(this.graph, 0, $intern_10, 'Transition', 'bounceOut');
}
;
_.setFrame = function setFrame_18(type_0, easingType, startTime, curTime, endTime, rnd){
  var animInfo, numWords, offset, srsInfo, srsInfo$iterator, timeOffsetPerWord;
  if (this.graph.seriesShapes.array.length > 0) {
    if (!!castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList && castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length > 0 && !castTo($get_2(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList, 0), 18).animInfo) {
      numWords = castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList.array.length;
      timeOffsetPerWord = 500 / numWords | 0;
      offset = 0;
      for (srsInfo$iterator = new ArrayList$1(castTo($get_2(this.graph.seriesShapes, 0), 19).srsShapeList); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
        srsInfo = castTo($next_3(srsInfo$iterator), 18);
        animInfo = new AnimInfoSrs(fromDouble_0(toDouble_0(startTime) + offset), endTime, easingType);
        srsInfo.animInfo = animInfo;
        offset += timeOffsetPerWord;
      }
    }
    $createDrawObjectsForFrame_4(this, rnd, curTime);
  }
}
;
_.setHoverData = function setHoverData_22(data_0, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverData) !== maskUndefined(data_0)) {
    this.hoverData = data_0;
    redrawNeeded = $setHoverEffects_7(this, this.hoverData, rnd);
  }
  return redrawNeeded;
}
;
_.setHoverEffects_0 = function setHoverEffects_14(hoverData, rnd){
  return $setHoverEffects_7(this, hoverData, rnd);
}
;
_.centerX = 0;
_.centerY = 0;
_.dataHasBeenSorted = false;
_.firstColor = null;
_.fontSizeRatio = 1;
_.maxFontSize = 0;
_.maxWeight = 0;
_.minFontSize = 0;
_.minFontSizeToUse = 8;
_.minWeight = 0;
_.numWordsToShow = 600;
_.range = 1;
_.secondColor = null;
_.startingRadius = 1;
_.totalArea = 0;
var defaultColor_0;
var Lcom_domo_charting_graphs_HandlerWordCloud_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerWordCloud', 338);
function $addMeanUpperLowerSeries(this$static, cell, valueScale, xPos){
  var mean2Stroke, meanStroke, metricCell, upperLower2Stroke, upperLowerStroke;
  if (!cell)
    return;
  upperLowerStroke = null;
  upperLower2Stroke = null;
  meanStroke = this$static.meanStroke;
  mean2Stroke = this$static.mean2Stroke;
  if ($hasXYMedian(cell) && !!$getMetaDataCell(cell, MEAN_VALUE) && !$equalsIgnoreCase($getName($getMetadataInfo(this$static.graph.data_0, MEAN_VALUE)), 'RowIndex')) {
    !this$static.meanList && (this$static.meanList = new ArrayList);
    !!this$static.meanStrokeClr && (meanStroke = new CFStroke(this$static.meanStrokeClr, 1));
    $addMetricToList(this$static, cell, valueScale, xPos, MEAN_VALUE, this$static.meanList, meanStroke);
  }
  (!!$getMetaDataCell(cell, LOWER_VALUE) || !!$getMetaDataCell(cell, UPPER_VALUE)) && (upperLowerStroke = new CFStroke($getRangeFillColor(this$static), 1));
  if ($hasXYLower(cell) && !!$getMetaDataCell(cell, LOWER_VALUE)) {
    !this$static.lowerList && (this$static.lowerList = new ArrayList);
    $addMetricToList(this$static, cell, valueScale, xPos, LOWER_VALUE, this$static.lowerList, upperLowerStroke);
  }
  if ($hasXYUpper(cell) && !!$getMetaDataCell(cell, UPPER_VALUE)) {
    !this$static.upperList && (this$static.upperList = new ArrayList);
    $addMetricToList(this$static, cell, valueScale, xPos, UPPER_VALUE, this$static.upperList, upperLowerStroke);
  }
  if ($hasXYOutlier(cell) && !!$getMetaDataCell(cell, OUTLIER_VALUE)) {
    !this$static.outlierList && (this$static.outlierList = new ArrayList);
    metricCell = $getMetaDataCell(cell, OUTLIER_VALUE);
    !!metricCell && $getValue(metricCell) > 0 && $addMetricToList(this$static, cell, valueScale, xPos, 0, this$static.outlierList, new CFStroke(this$static.outlierColor, 1));
  }
  if ($hasXYMedian2(cell) && !!$getMetaDataCell(cell, MEAN_VALUE2)) {
    !this$static.mean2List && (this$static.mean2List = new ArrayList);
    !!this$static.meanStrokeClr2 && (mean2Stroke = new CFStroke(this$static.meanStrokeClr2, 1));
    $addMetricToList(this$static, cell, valueScale, xPos, MEAN_VALUE2, this$static.mean2List, mean2Stroke);
  }
  (!!$getMetaDataCell(cell, LOWER_VALUE2) || !!$getMetaDataCell(cell, UPPER_VALUE2)) && (upperLower2Stroke = new CFStroke($getRange2FillColor(this$static), 1));
  if ($hasXYLower2(cell) && !!$getMetaDataCell(cell, LOWER_VALUE2)) {
    !this$static.lower2List && (this$static.lower2List = new ArrayList);
    $addMetricToList(this$static, cell, valueScale, xPos, LOWER_VALUE2, this$static.lower2List, upperLower2Stroke);
  }
  if ($hasXYUpper2(cell) && !!$getMetaDataCell(cell, UPPER_VALUE2)) {
    !this$static.upper2List && (this$static.upper2List = new ArrayList);
    $addMetricToList(this$static, cell, valueScale, xPos, UPPER_VALUE2, this$static.upper2List, upperLower2Stroke);
  }
}

function $addMetricToList(this$static, cell, valueScale, xPos, metricIndex, metricList, stroke){
  var lastRoundedPoint, linePoint, metricCell, pointInfo, roundedPoint, value_0, valueScalePos;
  value_0 = NaN;
  metricCell = $getMetaDataCell(cell, metricIndex);
  !!metricCell && (value_0 = $getValue(metricCell));
  valueScalePos = valueScale.position == 1 || valueScale.position == 3?valueScale.getMinPosition() + valueScale.getPositionForValue(value_0):valueScale.getMinPosition() - valueScale.getPositionForValue(value_0);
  linePoint = new CFPoint(xPos, valueScalePos);
  lastRoundedPoint = null;
  roundedPoint = null;
  if (metricList.array.length > 0) {
    lastRoundedPoint = castTo($get_2(metricList, metricList.array.length - 1), 28).point;
    !!lastRoundedPoint && (lastRoundedPoint = new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(lastRoundedPoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(lastRoundedPoint.y_0)))));
  }
  !!lastRoundedPoint && (roundedPoint = new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(linePoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(linePoint.y_0)))));
  if (!lastRoundedPoint || !$equals_1(lastRoundedPoint, roundedPoint)) {
    metricIndex == OUTLIER_VALUE?(pointInfo = new SrsLineInfo(cell, linePoint, 1, true, null, new CFStroke(this$static.outlierColor, 2), null, 400)):(pointInfo = new SrsLineInfo(cell, linePoint, 0, true, null, stroke, null, 400));
    metricList.array[metricList.array.length] = pointInfo;
  }
}

function $calcBubbleRatio(this$static){
  var bubbleLength, bubbleRange;
  if (this$static.maxBubbleValue != $intern_20 && this$static.minBubbleValue != $intern_19) {
    this$static.minBubbleValue >= 0 && (this$static.minBubbleValue = 0);
    bubbleLength = this$static.maxBubbleDiameter - this$static.minBubbleDiameter;
    bubbleRange = this$static.maxBubbleValue - this$static.minBubbleValue;
    bubbleRange == 0?(this$static.bubbleRatio = 1):(this$static.bubbleRatio = bubbleLength / bubbleRange);
  }
}

function $clearRegressionLines(this$static){
  var srsInfo, srsInfo$iterator;
  for (srsInfo$iterator = new ArrayList$1(this$static.graph.seriesShapes); srsInfo$iterator.i < srsInfo$iterator.this$01.array.length;) {
    srsInfo = castTo($next_3(srsInfo$iterator), 19);
    !!srsInfo.regressionLinePoints && (srsInfo.regressionLinePoints = null);
  }
}

function $drawScaleMarkerLines(this$static){
  var lineWidth, markerGE, markerStroke, rect, xMin, xPos, xScale, yMin, yPos, yScale;
  if (!isNaN_0(this$static.xScaleLine) || !isNaN_0(this$static.yScaleLine)) {
    rect = this$static.graph.getInnerBounds();
    lineWidth = 3;
    this$static.graph.bnds.width_0 < 250 && this$static.graph.bnds.height_0 < 250 && (lineWidth = 1);
    markerGE = new GraphicElement;
    markerStroke = new CFStroke_1('#7B7E80', lineWidth);
    if (!isNaN_0(this$static.xScaleLine)) {
      xScale = $getXScale(this$static.sGraph, false);
      xMin = xScale.getMinPosition();
      xPos = xScale.getPositionForValue(this$static.xScaleLine) + xMin;
      $addShape(markerGE, new CFShape_0(new CFPath_1(xPos, rect.y_0, xPos, rect.y_0 + rect.height_0), null, markerStroke));
    }
    if (!isNaN_0(this$static.yScaleLine)) {
      yScale = $getYScale(this$static.sGraph, false);
      yMin = yScale.getMinPosition();
      yPos = yMin - yScale.getPositionForValue(this$static.yScaleLine);
      $addShape(markerGE, new CFShape_0(new CFPath_1(rect.x_0, yPos, rect.x_0 + rect.width_0, yPos), null, markerStroke));
    }
    this$static.graph.geAry.add_1(0, markerGE);
  }
}

function $getBubbleDiameter(this$static, bubbleValue){
  var diameter;
  diameter = this$static.minBubbleDiameter;
  this$static.graph.typeAttributes.isBubble && !isNaN_0(this$static.bubbleRatio) && (diameter = (bubbleValue - this$static.minBubbleValue) * this$static.bubbleRatio + this$static.minBubbleDiameter);
  return diameter;
}

function $getBubbleValueFormatter(this$static, hover){
  var numberFormatter;
  if (hover) {
    numberFormatter = this$static.graph.hoverNumberFormatter;
    numberFormatter = $getHoverFormatterFromOtherFormatter(this$static, numberFormatter);
  }
   else {
    numberFormatter = this$static.graph.dataLabelNumberFormatter;
    numberFormatter = $getDataLabelFormatterFromOtherFormatter(this$static, numberFormatter);
  }
  return numberFormatter;
}

function $getDataLabelFormatterFromOtherFormatter(this$static, numberFormatter){
  if (numberFormatter) {
    numberFormatter = new NumberFormatter_0(numberFormatter);
    this$static.dataLabelDecimalPlaces != null && $applyDecimalPlaces(numberFormatter, this$static.dataLabelDecimalPlaces);
  }
  return numberFormatter;
}

function $getHoverFormatterFromOtherFormatter(this$static, numberFormatter){
  if (numberFormatter) {
    numberFormatter = new NumberFormatter_0(numberFormatter);
    this$static.hoverUseScaleAbbreviations || (numberFormatter.autoAbbreviate = false , numberFormatter.needsNewNumFormat = true);
    this$static.hoverDecimalPlaces != null && $applyDecimalPlaces(numberFormatter, this$static.hoverDecimalPlaces);
    this$static.hoverNegativeNumber != null && $applyNegativeFormat(numberFormatter, this$static.hoverNegativeNumber);
    this$static.hoverFormat != null && $applyValueFormatOverride(numberFormatter, this$static.hoverFormat);
    this$static.hoverDivideScaleBy != null && $setDivideScaleBy(numberFormatter, this$static.hoverDivideScaleBy, true);
  }
  return numberFormatter;
}

function $getItemsInDragRect(this$static, dragRect){
  var selectedSrsShapes, seriesInfo, seriesInfo$iterator, shapeInfo, shapeInfo$iterator;
  selectedSrsShapes = new ArrayList;
  for (seriesInfo$iterator = new ArrayList$1(this$static.sGraph.seriesShapes); seriesInfo$iterator.i < seriesInfo$iterator.this$01.array.length;) {
    seriesInfo = castTo($next_3(seriesInfo$iterator), 19);
    for (shapeInfo$iterator = new ArrayList$1(seriesInfo.srsShapeList); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
      shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
      shapeInfo.inDragRect(dragRect) && (selectedSrsShapes.array[selectedSrsShapes.array.length] = shapeInfo , true);
    }
  }
  return selectedSrsShapes;
}

function $getSeriesInfoForLineInfo(this$static, lineInfoList){
  var points, shpInfo, shpInfo$iterator, srsInfo;
  points = new ArrayList;
  for (shpInfo$iterator = new ArrayList$1(lineInfoList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
    shpInfo = castTo($next_3(shpInfo$iterator), 18);
    if (instanceOf(shpInfo, 28)) {
      $add_1(points, castTo(shpInfo, 28).point);
      castTo(shpInfo, 28).symbolType = 1;
      castTo(shpInfo, 28).filledSymbol = true;
      castTo(shpInfo, 28).fill_0 = new CFFill(this$static.outlierColor);
    }
  }
  srsInfo = new SeriesInfo(lineInfoList, null);
  return srsInfo;
}

function $getSeriesInfoForLineInfo_0(this$static, lineInfoList, stroke){
  var fullLineInfo, points, shpInfo, shpInfo$iterator, srsInfo;
  points = new ArrayList;
  for (shpInfo$iterator = new ArrayList$1(lineInfoList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
    shpInfo = castTo($next_3(shpInfo$iterator), 18);
    instanceOf(shpInfo, 28) && $add_1(points, castTo(shpInfo, 28).point);
  }
  fullLineInfo = new SrsLineInfo_1($getFirstCellFromList(lineInfoList), points, stroke, 0, true, this$static.hideNullDataGaps, null);
  srsInfo = new SeriesInfo(lineInfoList, fullLineInfo);
  return srsInfo;
}

function $getTimeFilter(this$static, selectedSeriesShapes){
  var columnName, filter, filterBase, shapeInfo, shapeInfo$iterator, timeMax, timeMin, xMax, xMin;
  xMax = xMin = toDouble_0((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell.timeMS);
  timeMax = timeMin = (checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell.valueStr;
  $getRowIsCalendarColumn((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell);
  $getRowFilterType((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell);
  columnName = 'Time';
  for (shapeInfo$iterator = new ArrayList$1(selectedSeriesShapes); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    if (toDouble_0(shapeInfo.cell.timeMS) > xMax) {
      xMax = toDouble_0(shapeInfo.cell.timeMS);
      timeMax = shapeInfo.cell.valueStr;
    }
    if (toDouble_0(shapeInfo.cell.timeMS) < xMin) {
      xMin = toDouble_0(shapeInfo.cell.timeMS);
      timeMin = shapeInfo.cell.valueStr;
    }
    columnName = $getRowOrigName(shapeInfo.cell);
  }
  filterBase = new FilterBase(columnName, 'BETWEEN', $getMetaDataCell((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell, 0).row);
  $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
  $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, timeMin);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, timeMax);
  filter = getDrillFilterFromValues(filterBase);
  return filter;
}

function $getXCategoryFilter(selectedSeriesShapes){
  var catName, catNames, catNamesAry, columnName, filter, filterBase, shapeInfo, shapeInfo$iterator;
  catNames = new HashMap;
  catName = (checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell.valueStr;
  $getRowDataType((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell);
  catName == null?$put_1(catNames.hashCodeMap, null, null):$put_2(catNames.stringMap, catName, catName);
  columnName = 'X';
  for (shapeInfo$iterator = new ArrayList$1(selectedSeriesShapes); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    catName = shapeInfo.cell.valueStr;
    (catName == null?getEntryValueOrNull($getEntry(catNames.hashCodeMap, null)):$get_3(catNames.stringMap, catName)) == null && (catName == null?$put_1(catNames.hashCodeMap, null, null):$put_2(catNames.stringMap, catName, catName));
    columnName = $getRowOrigName(shapeInfo.cell);
  }
  catNamesAry = new ArrayList_1(new AbstractMap$1(catNames));
  filterBase = new FilterBase(columnName, 'IN', $getMetaDataCell((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell, 0).row);
  filterBase.values = catNamesAry;
  filter = getDrillFilterFromValues(filterBase);
  return filter;
}

function $getXFilter(selectedSeriesShapes){
  var columnName, filter, filterBase, shapeInfo, shapeInfo$iterator, xMax, xMin;
  xMax = xMin = $getValue((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell);
  columnName = 'X';
  for (shapeInfo$iterator = new ArrayList$1(selectedSeriesShapes); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    $getValue(shapeInfo.cell) > xMax && (xMax = $getValue(shapeInfo.cell));
    $getValue(shapeInfo.cell) < xMin && (xMin = $getValue(shapeInfo.cell));
    columnName = $getRowOrigName(shapeInfo.cell);
  }
  filterBase = new FilterBase(columnName, 'BETWEEN', $getMetaDataCell((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell, 0).row);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, '' + xMin);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, '' + xMax);
  filter = getDrillFilterFromValues(filterBase);
  return filter;
}

function $getXValueFormatter(this$static, hover){
  var numberFormatter, scale;
  numberFormatter = this$static.graph.numberFormatter;
  scale = $getXScale(this$static.sGraph, false);
  if (hover) {
    if (!!scale && instanceOf(scale, 27)) {
      castTo(scale, 27).hoverUseScaleFormat = true;
      numberFormatter = $getHoverNumberFormatter(castTo(scale, 27));
    }
    numberFormatter = $getHoverFormatterFromOtherFormatter(this$static, numberFormatter);
  }
   else {
    numberFormatter = this$static.graph.dataLabelNumberFormatter;
    !!scale && instanceOf(scale, 27) && (numberFormatter = $getDataLabelNumberFormatter(castTo(scale, 27)));
    numberFormatter = $getDataLabelFormatterFromOtherFormatter(this$static, numberFormatter);
  }
  return numberFormatter;
}

function $getYFilter(selectedSeriesShapes){
  var columnName, filter, filterBase, shapeInfo, shapeInfo$iterator, yMax, yMin;
  yMax = yMin = $getValue($getMetaDataCell((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell, 0));
  columnName = 'Y';
  for (shapeInfo$iterator = new ArrayList$1(selectedSeriesShapes); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
    shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
    $getValue($getMetaDataCell(shapeInfo.cell, 0)) > yMax && (yMax = $getValue($getMetaDataCell(shapeInfo.cell, 0)));
    $getValue($getMetaDataCell(shapeInfo.cell, 0)) < yMin && (yMin = $getValue($getMetaDataCell(shapeInfo.cell, 0)));
    columnName = $getColParentName(shapeInfo.cell);
  }
  filterBase = new FilterBase(columnName, 'BETWEEN', $getMetaDataCell((checkCriticalElementIndex(0, selectedSeriesShapes.array.length) , castTo(selectedSeriesShapes.array[0], 18)).cell, 0).column);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, '' + yMin);
  !filterBase.values && (filterBase.values = new ArrayList);
  $add_1(filterBase.values, '' + yMax);
  filter = getDrillFilterFromValues(filterBase);
  return filter;
}

function $getYValueFormatter(this$static, hover){
  var numberFormatter, scale;
  numberFormatter = this$static.graph.numberFormatter;
  scale = $getYScale(this$static.sGraph, false);
  if (hover) {
    if (!!scale && instanceOf(scale, 27)) {
      castTo(scale, 27).hoverUseScaleFormat = true;
      numberFormatter = $getHoverNumberFormatter(castTo(scale, 27));
    }
    numberFormatter = $getHoverFormatterFromOtherFormatter(this$static, numberFormatter);
  }
   else {
    numberFormatter = this$static.graph.dataLabelNumberFormatter;
    !!scale && instanceOf(scale, 27) && (numberFormatter = $getDataLabelNumberFormatter(castTo(scale, 27)));
    numberFormatter = $getDataLabelFormatterFromOtherFormatter(this$static, numberFormatter);
  }
  return numberFormatter;
}

function $hasValidPointValues(shpInfoList){
  var shpInfo, shpInfo$iterator;
  if (!!shpInfoList && shpInfoList.array.length > 0 && instanceOf((checkCriticalElementIndex(0, shpInfoList.array.length) , shpInfoList.array[0]), 28) && !!(checkCriticalElementIndex(0, shpInfoList.array.length) , castTo(shpInfoList.array[0], 28)).point) {
    for (shpInfo$iterator = new ArrayList$1(shpInfoList); shpInfo$iterator.i < shpInfo$iterator.this$01.array.length;) {
      shpInfo = castTo($next_3(shpInfo$iterator), 18);
      if (instanceOf(shpInfo, 28) && !!castTo(shpInfo, 28).point && !isNaN_0(castTo(shpInfo, 28).point.y_0))
        return true;
    }
    return false;
  }
  return true;
}

function $setHideGrids(this$static, value_0){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this$static.sGraph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.hideGrids = value_0;
  }
}

function $setupSeriesFormatInfo(this$static){
  var catScale, numFormatter, numberFormatter, valScale;
  numberFormatter = $getColumnFormatForSeriesIndex(this$static.sGraph, 2);
  !!numberFormatter && $setNumberFormatter(this$static.sGraph, numberFormatter);
  $setValueScaleColumnFormatBasedOnSeriesIndex(this$static.sGraph, 0, 1, 1);
  catScale = $getCategoryScale(this$static.sGraph);
  if (!!catScale && instanceOf(catScale, 27)) {
    valScale = castTo(catScale, 27);
    numFormatter = $getColumnFormatForSeriesIndex(this$static.sGraph, 0);
    !!numFormatter && !!numFormatter && (valScale.numberFormatter = numFormatter);
  }
  $updateNumberFormats_0(this$static.sGraph, false);
}

function $sortMeanUpperLowerDataAndAdd(this$static){
  var mean2Stroke, meanStroke, srsInfo;
  meanStroke = this$static.meanStroke;
  mean2Stroke = this$static.mean2Stroke;
  (!!this$static.upperList || !!this$static.lowerList) && new CFStroke($getRangeFillColor(this$static), 1);
  if (this$static.upperList) {
    if ($hasValidPointValues(this$static.upperList))
      $sort(this$static.upperList, new HandlerXY$2);
    else {
      this$static.upperList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.upperList = null;
    }
  }
  if (this$static.lowerList) {
    if ($hasValidPointValues(this$static.lowerList))
      $sort(this$static.lowerList, new HandlerXY$2);
    else {
      this$static.lowerList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.lowerList = null;
    }
  }
  if (this$static.meanList) {
    !!this$static.meanStrokeClr && (meanStroke = new CFStroke(this$static.meanStrokeClr, 1));
    if ($hasValidPointValues(this$static.meanList)) {
      $sort(this$static.meanList, new HandlerXY$2);
      if (this$static.graph.typeAttributes.isXYForecast) {
        srsInfo = $getSeriesInfoForLineInfo_0(this$static, this$static.meanList, meanStroke);
        $add_1(this$static.graph.seriesShapes, srsInfo);
      }
    }
     else {
      this$static.meanList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.meanList = null;
    }
  }
  if (this$static.outlierList) {
    if ($hasValidPointValues(this$static.outlierList)) {
      $sort(this$static.outlierList, new HandlerXY$2);
      if (this$static.graph.typeAttributes.isXYOutlier) {
        srsInfo = $getSeriesInfoForLineInfo(this$static, this$static.outlierList);
        $add_1(this$static.graph.seriesShapes, srsInfo);
      }
    }
     else {
      this$static.outlierList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.outlierList = null;
    }
  }
  (!!this$static.upper2List || !!this$static.lower2List) && new CFStroke($getRange2FillColor(this$static), 1);
  if (this$static.upper2List) {
    if ($hasValidPointValues(this$static.upper2List))
      $sort(this$static.upper2List, new HandlerXY$2);
    else {
      this$static.upper2List.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.upper2List = null;
    }
  }
  if (this$static.lower2List) {
    if ($hasValidPointValues(this$static.lower2List))
      $sort(this$static.lower2List, new HandlerXY$2);
    else {
      this$static.lower2List.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.lower2List = null;
    }
  }
  if (this$static.mean2List) {
    !!this$static.meanStrokeClr2 && (mean2Stroke = new CFStroke(this$static.meanStrokeClr2, 1));
    if ($hasValidPointValues(this$static.mean2List)) {
      $sort(this$static.mean2List, new HandlerXY$2);
      if (this$static.graph.typeAttributes.isXYForecast) {
        srsInfo = $getSeriesInfoForLineInfo_0(this$static, this$static.mean2List, mean2Stroke);
        $add_1(this$static.graph.seriesShapes, srsInfo);
      }
    }
     else {
      this$static.mean2List.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
      this$static.mean2List = null;
    }
  }
}

function HandlerXY(){
  HandlerLine.call(this);
}

defineClass(121, 110, {110:1, 64:1, 121:1}, HandlerXY);
_.addDataFilterIfNeeded = function addDataFilterIfNeeded_1(dragRect){
  var selectedSeriesShapes;
  if (dragRect) {
    selectedSeriesShapes = $getItemsInDragRect(this, dragRect);
    if (selectedSeriesShapes.array.length > 0) {
      $addChartOption(this.sGraph, 'range_filter_y', $getYFilter(selectedSeriesShapes));
      $hasTimeScale(this.sGraph)?$addChartOption(this.sGraph, 'range_filter_time', $getTimeFilter(this, selectedSeriesShapes)):!!$getCategoryScale(this.sGraph) && instanceOf($getCategoryScale(this.sGraph), 123)?$addChartOption(this.sGraph, 'range_filter_cat_x', $getXCategoryFilter(selectedSeriesShapes)):$addChartOption(this.sGraph, 'range_filter_x', $getXFilter(selectedSeriesShapes));
    }
    this.graph.setNeedsFormat(true);
  }
}
;
_.addLegendsOrSubComponents = function addLegendsOrSubComponents_15(chart){
  if (this.graph.typeAttributes.isXYLine) {
    $addLegendsOrSubComponents_0(this, chart);
  }
   else {
    this.sGraph.legend = new LegendScaledGraph(chart, this.graph.name_0 + '_legend', this.sGraph, 3);
    $addDependentComp(this.sGraph, this.sGraph.legend);
  }
}
;
_.calcMinMaxOverride = function calcMinMaxOverride_7(scale, curMin, curMax){
  var bubbleVal, cell, cell$iterator, entry, max_0, metric, min_0, outerIter, row, value_0, yVal;
  if (scale.type_0 == 0) {
    row = $getFirstVisibleRow(this.graph.data_0);
    max_0 = $intern_20;
    min_0 = $intern_19;
    instanceOf(scale, 73) && (max_0 = $intern_39);
    while (row) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !cell.hidden && !cell.column.hidden) {
          if ($getMetaDataCell(cell, 0)) {
            yVal = $getValue($getMetaDataCell(cell, 0));
            !isNaN(yVal) && yVal > max_0 && (max_0 = yVal);
            !isNaN(yVal) && yVal < min_0 && (instanceOf(scale, 73)?yVal > 0 && (min_0 = yVal):(min_0 = yVal));
          }
          if ($getMetaDataCell(cell, BUBBLE_VALUE)) {
            bubbleVal = $getValue($getMetaDataCell(cell, BUBBLE_VALUE));
            if (!isNaN(bubbleVal)) {
              bubbleVal > this.maxBubbleValue && (this.maxBubbleValue = bubbleVal);
              bubbleVal < this.minBubbleValue && (this.minBubbleValue = bubbleVal);
            }
          }
          for (metric = MEAN_VALUE; metric <= UPPER_VALUE2; metric++) {
            if ($getMetaDataCell(cell, metric)) {
              value_0 = $getValue($getMetaDataCell(cell, metric));
              if (!isNaN(value_0)) {
                value_0 > max_0 && (max_0 = value_0);
                value_0 < min_0 && (min_0 = value_0);
              }
            }
          }
        }
      }
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    $calcBubbleRatio(this);
    this.yMinMax = new MinMax(min_0, max_0);
    return this.yMinMax;
  }
   else if (scale.type_0 == ST_CATEGORY && !instanceOf(scale, 56)) {
    row = $getFirstVisibleRow(this.graph.data_0);
    max_0 = $intern_20;
    min_0 = $intern_19;
    instanceOf(scale, 73) && (max_0 = $intern_39);
    while (row) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !cell.hidden && !cell.column.hidden) {
          value_0 = $getValue(cell);
          if (!isNaN(value_0)) {
            value_0 > max_0 && (max_0 = value_0);
            value_0 < min_0 && (instanceOf(scale, 73)?value_0 > 0 && (min_0 = value_0):(min_0 = value_0));
          }
        }
      }
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    this.xMinMax = new MinMax(min_0, max_0);
  }
  return this.xMinMax;
}
;
_.closeZoomInFilter = function closeZoomInFilter_5(){
  if (this.sGraph.data_0) {
    $setAllCellsHiddenValue(this.sGraph.data_0);
    $addChartOption(this.sGraph, 'range_filter_y', 'none');
    $addChartOption(this.sGraph, 'range_filter_x', 'none');
    $addChartOption(this.sGraph, 'range_filter_cat_x', 'none');
    $addChartOption(this.sGraph, 'range_filter_time', 'none');
  }
  return true;
}
;
_.createSeriesInfoObjs = function createSeriesInfoObjs_14(sGraph, rows_0, baseScale, valScale, valScale2){
  var LineList, bubbleCell, bubbleValue, catScalePos, cell, cell$iterator, cellValues, curCol, fill, fullLineInfo, hasFilteredData, inShowAsFilteredMode, lastState, linePoint, lineStyle, minCatPos, minMaxScale, pointInfo, points, roundedLastPoint, seriesColor, showAsFiltered, srsInfo, stroke, vScale, value_0, valueScale, valueScalePos, yCell;
  if (!rows_0)
    return;
  this.meanList = null;
  this.upperList = null;
  this.lowerList = null;
  this.outlierList = null;
  this.mean2List = null;
  this.upper2List = null;
  this.lower2List = null;
  inShowAsFilteredMode = $usingCardBus(this.graph.chart);
  hasFilteredData = !!this.graph.data_0 && this.graph.data_0.hasFilteredCols;
  minMaxScale = castTo($getScaleByTypeNumber(sGraph, ST_MINMAX, 0), 67);
  minMaxScale.regressionLineLastPoint = true;
  minMaxScale.regressionLineSolid = true;
  minMaxScale.regressionStrokeWidth = 2;
  minMaxScale.suppressMinMaxAvg = true;
  minCatPos = baseScale.getMinPosition();
  curCol = $getFirstVisibleCol(this.graph.data_0);
  while (curCol) {
    showAsFiltered = inShowAsFilteredMode && hasFilteredData && curCol.showAsFiltered;
    vScale = $getValueScaleForColumn(curCol, valScale, valScale2);
    if (!!vScale && instanceOf(vScale, 27)) {
      valueScale = castTo(valScale, 27);
      fullLineInfo = null;
      LineList = new ArrayList;
      points = new ArrayList;
      fill = new CFFill(($clinit_CFColor() , TRANSPARENT));
      cellValues = new ArrayList;
      cellValues.addAll(new AbstractMap$2(curCol.cellMap));
      this.graph.typeAttributes.isXYLine && (cellValues = (cellValues.sort_0(new HandlerXY$1) , cellValues));
      roundedLastPoint = null;
      for (cell$iterator = cellValues.iterator(); cell$iterator.hasNext_0();) {
        cell = castTo(cell$iterator.next_1(), 16);
        if (!cell.hidden && (!isNaN_0($getValue(cell)) || neq(cell.timeMS, 0) || instanceOf(baseScale, 123) && cell.valueStr != null)) {
          seriesColor = $getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex);
          showAsFiltered && (seriesColor = $deSaturateAndLighten(seriesColor, 0.9, 0.4));
          stroke = new CFStroke(seriesColor, 2);
          instanceOf(baseScale, 56)?(catScalePos = $getPositionForTime(castTo(baseScale, 56), cell.timeMS)):instanceOf(baseScale, 123)?(catScalePos = $getScalePositionForValueStr(castTo(baseScale, 123), cell.valueStr)):(catScalePos = baseScale.getPositionForValue($getValue(cell)));
          value_0 = 0;
          bubbleValue = 0;
          yCell = $getMetaDataCell(cell, 0);
          !!yCell && (value_0 = $getValue(yCell));
          bubbleCell = $getMetaDataCell(cell, BUBBLE_VALUE);
          !!bubbleCell && (bubbleValue = $getValue(bubbleCell));
          bubbleValue > this.maxBubbleValue && (this.maxBubbleValue = bubbleValue);
          valueScalePos = valueScale.position == 1 || valueScale.position == 3?valueScale.getMinPosition() + valueScale.getPositionForValue(value_0):valueScale.getMinPosition() - valueScale.getPositionForValue(value_0);
          linePoint = new CFPoint(minCatPos + catScalePos, valueScalePos);
          if (!roundedLastPoint || !!bubbleCell || !$equals_1(roundedLastPoint, new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(linePoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(linePoint.y_0)))))) {
            points.array[points.array.length] = linePoint;
            lastState = $getLastShapeForCell(this.sGraph, cell, false);
            pointInfo = new SrsXYInfo(this, cell, linePoint, bubbleValue, fill, stroke, lastState);
            LineList.array[LineList.array.length] = pointInfo;
            roundedLastPoint = new CFPoint(toDouble_0(fromDouble_0($wnd.Math.round(linePoint.x_0))), toDouble_0(fromDouble_0($wnd.Math.round(linePoint.y_0))));
          }
          $addMeanUpperLowerSeries(this, cell, valueScale, minCatPos + catScalePos);
        }
      }
      if (this.graph.typeAttributes.isXYLine && LineList.array.length > 0) {
        stroke = new CFStroke_0($getColorForSeriesNameOrIndex_0(this.graph, curCol, curCol.curIndex), this.lineWidth_0);
        lastState = new SrsLineInfo_0((checkCriticalElementIndex(0, LineList.array.length) , castTo(LineList.array[0], 18)).cell, LineList, this.graph);
        lineStyle = 0;
        this.graph.typeAttributes.curvedLines && (lineStyle = 1);
        fullLineInfo = new SrsLineInfo_1($getFirstCellFromList(LineList), points, stroke, lineStyle, true, this.hideNullDataGaps, lastState);
      }
      srsInfo = new SeriesInfo(LineList, fullLineInfo);
      $addRegressionAndProjectionDataToSrsInfo(this, minMaxScale, null, curCol, srsInfo);
      $add_1(this.graph.seriesShapes, srsInfo);
    }
    curCol = $getNextVisibleCol(this.graph.data_0, curCol);
  }
  $sortMeanUpperLowerDataAndAdd(this);
  $drawAllLinesAndPoints(this, sGraph, -1);
  $drawScaleMarkerLines(this);
}
;
_.drawDataLabel = function drawDataLabel_7(dataLabel, rnd, existingLableRects, shpInfo, data_0){
  var dlPoint, dlText, pointRadius, textPosRect, thisPoint;
  if (!!shpInfo && instanceOf(shpInfo, 145) && dataLabel.showLabelsOn != 1) {
    thisPoint = castTo(shpInfo, 145);
    dlText = $getFormattedDataLabel(dataLabel, thisPoint.cell);
    pointRadius = 6;
    this.graph.typeAttributes.isBubble && (pointRadius = $getBubbleDiameter(this, thisPoint.bubbleValue) / 2);
    dlPoint = new CFPoint_0(thisPoint.point);
    dataLabel.position == 8 || dataLabel.position == 0?$setY(dlPoint, dlPoint.y_0 - pointRadius):dataLabel.position == 9 && $setY(dlPoint, dlPoint.y_0 + pointRadius);
    textPosRect = $getTextRectForPoint(dataLabel, rnd, dataLabel.font_0, dlPoint, dlText, dataLabel.position, false, true);
    return $addDataLabelIfNotOverlapping(dataLabel, rnd, dlText, textPosRect, existingLableRects, null);
  }
  return false;
}
;
_.drawGridItems = function drawGridItems_0(){
  $drawScaleMarkerLines(this);
}
;
_.freeResources = function freeResources_32(dataToKeep){
  $freeResources_20(this, dataToKeep);
  this.xMinMax = null;
  this.yMinMax = null;
  this.mmTime = null;
  this.hoverDecimalPlaces = null;
  this.hoverNegativeNumber = null;
  this.hoverFormat = null;
  this.hoverDivideScaleBy = null;
  this.dataLabelDecimalPlaces = null;
}
;
_.getDefaultLegendPosition = function getDefaultLegendPosition_2(){
  return 3;
}
;
_.getDragShadeRect = function getDragShadeRect_1(xScale, yScale, startX, startY, curX, curY){
  var rect;
  rect = this.sGraph.innerBounds;
  startX < rect.x_0 && (startX = rect.x_0);
  startX > rect.x_0 + rect.width_0 && (startX = rect.x_0 + rect.width_0);
  startY < rect.y_0 && (startY = rect.y_0);
  startY > rect.y_0 + rect.height_0 && (startY = rect.y_0 + rect.height_0);
  curX < rect.x_0 && (curX = rect.x_0);
  curX > rect.x_0 + rect.width_0 && (curX = rect.x_0 + rect.width_0);
  curY < rect.y_0 && (curY = rect.y_0);
  curY > rect.y_0 + rect.height_0 && (curY = rect.y_0 + rect.height_0);
  if (curX != startX && curY != startY) {
    return this.graph.typeAttributes.isXYLine?new CFRect(startX, rect.y_0, curX - startX, rect.height_0):new CFRect(startX, startY, curX - startX, curY - startY);
  }
  return null;
}
;
_.getDrillFilter = function getDrillFilter_7(shapeInfo, clicked){
  var cell, colHeaderName, columnName, dateStr, filter1, filter2, filterBase, rowHeaderName, rowName, xColName, xValue, yCell, tolerance;
  if ($usingCardBus(this.graph.chart))
    return null;
  cell = shapeInfo.cell;
  if (!!cell && !shapeInfo.neverDrill) {
    if (instanceOf($getCategoryScale(this.sGraph), 36)) {
      rowName = cell.valueStr;
      rowHeaderName = $getRowOrigName(cell);
      $getRowDataSourceId(cell);
      filterBase = new FilterBase(rowHeaderName, 'EQUALS', cell.row);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, rowName);
      $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
    }
     else if (neq(cell.timeMS, 0)) {
      xColName = $getRowOrigName(cell);
      dateStr = cell.valueStr;
      filterBase = new FilterBase(xColName, 'EQUALS', cell.row);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, dateStr);
      $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
      filter1 = getDrillFilterFromValues(filterBase);
    }
     else {
      xColName = $getRowOrigName(cell);
      xValue = $getValue(cell);
      filterBase = new FilterBase(xColName, 'BETWEEN', cell.row);
      filter1 = ($clinit_StrUtil() , tolerance = xValue / 1000000 , new ArrayList , !filterBase.values && (filterBase.values = new ArrayList) , $add_1(filterBase.values, '' + (xValue - tolerance)) , !filterBase.values && (filterBase.values = new ArrayList) , $add_1(filterBase.values, '' + (xValue + tolerance)) , getDrillFilterFromValues(filterBase));
    }
    filter2 = null;
    yCell = $getMetaDataCell(cell, 0);
    if (!!cell.column && cell.column.parentName != null) {
      columnName = $getColName(cell);
      colHeaderName = $getColParentName(cell);
      $getColDataSourceId(cell);
      filterBase = new FilterBase(colHeaderName, 'EQUALS', cell.column);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, columnName);
      $setDataJoinColumn(filterBase, this.graph.data_0.dateJoinColumn);
      $setFiscal(filterBase, this.graph.data_0.isFiscalCalendar);
      filter2 = getDrillFilterFromValues(filterBase);
    }
     else 
      !!yCell && !isNaN_0($getValue(yCell)) && $getColName(yCell) != null;
    filter2 != null && (filter1 = filter2);
    return getDrillFilterFromFilters(filter1, null);
  }
  return null;
}
;
_.getFinalDragRectFromShadeRect = function getFinalDragRectFromShadeRect_1(shadeRect){
  if (shadeRect.height_0 < 0) {
    $setHeight(shadeRect, -shadeRect.height_0);
    $setY_0(shadeRect, shadeRect.y_0 - shadeRect.height_0);
  }
  if (shadeRect.width_0 < 0) {
    $setWidth(shadeRect, -shadeRect.width_0);
    $setX_0(shadeRect, shadeRect.x_0 - shadeRect.width_0);
  }
  return shadeRect;
}
;
_.getHintTextOverride = function getHintTextOverride_2(){
  return '%_XVALUE : %_YVALUE';
}
;
_.getHoverTextOverride = function getHoverTextOverride_0(cell, formatString){
  var fmtString, hasMeanValue;
  fmtString = formatString;
  hasMeanValue = $hasXYMedian(cell) && !!$getMetadataInfo(this.graph.data_0, MEAN_VALUE) && !$equalsIgnoreCase($getName($getMetadataInfo(this.graph.data_0, MEAN_VALUE)), 'RowIndex') && !!$getMetaDataCell(cell, MEAN_VALUE) && !isNaN_0($getValue($getMetaDataCell(cell, MEAN_VALUE)));
  this.graph.typeAttributes.isXYForecast && hasMeanValue && $hasXyYValue(cell) && isNaN_0($getValue($getMetaDataCell(cell, 0))) && (fmtString = '%_SERIES_NAME : %_XVALUE');
  $hasXYUpper(cell) && !!$getMetaDataCell(cell, UPPER_VALUE) && !isNaN_0($getValue($getMetaDataCell(cell, UPPER_VALUE))) && (fmtString += '\n%_TF5_NAME : %_TF5_VALUE');
  hasMeanValue && (fmtString += '\n%_TF3_NAME : %_TF3_VALUE');
  $hasXYLower(cell) && !!$getMetaDataCell(cell, LOWER_VALUE) && !isNaN_0($getValue($getMetaDataCell(cell, LOWER_VALUE))) && (fmtString += '\n%_TF4_NAME : %_TF4_VALUE');
  $hasXYUpper2(cell) && !!$getMetaDataCell(cell, UPPER_VALUE2) && !isNaN_0($getValue($getMetaDataCell(cell, UPPER_VALUE2))) && (fmtString += '\n%_TF9_NAME : %_TF9_VALUE');
  $hasXYMedian2(cell) && !!$getMetaDataCell(cell, MEAN_VALUE2) && !isNaN_0($getValue($getMetaDataCell(cell, MEAN_VALUE2))) && (fmtString += '\n%_TF7_NAME : %_TF7_VALUE');
  $hasXYLower2(cell) && !!$getMetaDataCell(cell, LOWER_VALUE2) && !isNaN_0($getValue($getMetaDataCell(cell, LOWER_VALUE2))) && (fmtString += '\n%_TF8_NAME : %_TF8_VALUE');
  return fmtString;
}
;
_.getItemsInDragRect = function getItemsInDragRect_0(dragRect){
  return $getItemsInDragRect(this, dragRect);
}
;
_.getLastState = function getLastState_2(cell, getFullSeriesItem){
  return getFullSeriesItem?null:$getLastShapeForCell(this.sGraph, cell, false);
}
;
_.getMinMaxTimeValues = function getMinMaxTimeValues_1(scale){
  var cell, cell$iterator, entry, hasMonthDaysThatAreDifferent, maxTime, minTime, outerIter, rowInfo, testDay, time;
  minTime = $intern_31;
  maxTime = $intern_30;
  hasMonthDaysThatAreDifferent = false;
  testDay = 0;
  rowInfo = $getFirstVisibleRow(this.graph.data_0);
  while (rowInfo) {
    for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(rowInfo.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
      cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
      if (!cell.hidden && !cell.column.hidden) {
        time = cell.timeMS;
        if (compare_22(time, 0) != 0) {
          compare_22(time, minTime) < 0 && (minTime = time);
          compare_22(time, maxTime) > 0 && (maxTime = time);
          testDay == 0?(testDay = getDayOfMonth(time)):hasMonthDaysThatAreDifferent || (hasMonthDaysThatAreDifferent = containsMonthDaysOtherThanTestDay(time, testDay));
        }
      }
    }
    rowInfo = $getNextVisibleRow(this.graph.data_0, rowInfo);
  }
  this.mmTime = new MinMaxTime_0(minTime, maxTime);
  this.mmTime.hasMonthDaysThatAreDifferent = hasMonthDaysThatAreDifferent;
  return this.mmTime;
}
;
_.getPaddingX = function getPaddingX_4(){
  var bubblePadding, cell, cell$iterator, entry, maxX, minX, outerIter, paddingEnd, paddingStart, row, scale, scaleMaxValue, scaleMinValue, xPos, xScale;
  scale = $getCategoryScale(this.sGraph);
  if (!!this.xMinMax && !!scale && instanceOf(scale, 27)) {
    xScale = castTo(scale, 27);
    paddingEnd = 0;
    paddingStart = 0;
    scaleMinValue = xScale.min_0;
    scaleMaxValue = xScale.max_0;
    minX = xScale.getPositionForValue(scaleMinValue);
    maxX = xScale.getPositionForValue(scaleMaxValue);
    row = $getFirstVisibleRow(this.graph.data_0);
    while (row) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !cell.hidden && !cell.column.hidden && $getValue(cell) >= scaleMinValue && $getValue(cell) <= scaleMaxValue) {
          xPos = xScale.getPositionForValue($getValue(cell));
          bubblePadding = this.minBubbleDiameter / 2;
          !!$getMetaDataCell(cell, BUBBLE_VALUE) && (bubblePadding = $getBubbleDiameter(this, $getValue($getMetaDataCell(cell, BUBBLE_VALUE))) / 2);
          xPos - bubblePadding < minX - paddingStart && (paddingStart = minX - (xPos - bubblePadding));
          xPos + bubblePadding > maxX + paddingEnd && (paddingEnd = xPos + bubblePadding - maxX);
        }
      }
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    return new CFDimension($wnd.Math.ceil(paddingStart), $wnd.Math.ceil(paddingEnd));
  }
   else if (!!this.mmTime && !!scale && instanceOf(scale, 56)) {
    xScale = castTo(scale, 56);
    paddingEnd = 0;
    paddingStart = 0;
    minX = $getPositionForTime(xScale, xScale.adjustedMinTime);
    maxX = $getPositionForTime(xScale, xScale.adjustedMaxTime);
    row = $getFirstVisibleRow(this.graph.data_0);
    while (row) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !cell.hidden && !cell.column.hidden) {
          xPos = $getPositionForTime(xScale, cell.timeMS);
          bubblePadding = this.minBubbleDiameter / 2;
          !!$getMetaDataCell(cell, BUBBLE_VALUE) && (bubblePadding = $getBubbleDiameter(this, $getValue($getMetaDataCell(cell, BUBBLE_VALUE))) / 2);
          xPos - bubblePadding < minX - paddingStart && (paddingStart = minX - (xPos - bubblePadding));
          xPos + bubblePadding > maxX + paddingEnd && (paddingEnd = xPos + bubblePadding - maxX);
        }
      }
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    return new CFDimension($wnd.Math.ceil(paddingStart), $wnd.Math.ceil(paddingEnd));
  }
  return new CFDimension(0, 0);
}
;
_.getPaddingY = function getPaddingY_4(){
  var bubblePadding, cell, cell$iterator, entry, maxY, minY, outerIter, paddingEnd, paddingStart, row, scaleMaxValue, scaleMinValue, yPos, yScale, yValue;
  yScale = $getValueScaleByNumber(this.sGraph, 0);
  if (!!this.yMinMax && !!yScale) {
    paddingEnd = 0;
    paddingStart = 0;
    scaleMinValue = yScale.min_0;
    scaleMaxValue = yScale.max_0;
    minY = yScale.getPositionForValue(scaleMinValue);
    maxY = yScale.getPositionForValue(scaleMaxValue);
    row = $getFirstVisibleRow(this.graph.data_0);
    while (row) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if (!!cell && !cell.hidden && !cell.column.hidden && !!$getMetaDataCell(cell, 0)) {
          yValue = $getValue($getMetaDataCell(cell, 0));
          if (yValue >= scaleMinValue && yValue <= scaleMaxValue) {
            yPos = yScale.getPositionForValue(yValue);
            bubblePadding = this.minBubbleDiameter / 2;
            !!$getMetaDataCell(cell, BUBBLE_VALUE) && (bubblePadding = $getBubbleDiameter(this, $getValue($getMetaDataCell(cell, BUBBLE_VALUE))) / 2);
            yPos - bubblePadding < minY - paddingStart && (paddingStart = minY - (yPos - bubblePadding));
            yPos + bubblePadding > maxY + paddingEnd && (paddingEnd = yPos + bubblePadding - maxY);
          }
        }
      }
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    return new CFDimension($wnd.Math.ceil(paddingEnd), $wnd.Math.ceil(paddingStart));
  }
  return new CFDimension(0, 0);
}
;
_.getSeriesShapeKeyFromCell = function getSeriesShapeKeyFromCell_0(cell){
  var sb, value_0;
  if (cell) {
    if (this.graph.typeAttributes.isXYLine) {
      sb = new StringBuilder;
      $append_1(sb, $getValue(cell));
      sb.string += '|^|^|';
      $append_1(sb, $getYValue(cell));
      return sb.string;
    }
     else {
      value_0 = cell.valueStr;
      value_0 == null && (value_0 = '' + $getValue(cell));
      sb = new StringBuilder_1(value_0);
      if (cell.column) {
        sb.string += '|^|^|';
        $append_3(sb, $getColName(cell));
      }
      if ($getMetaDataCell(cell, 0)) {
        sb.string += '|^|^|';
        $append_1(sb, $getValue($getMetaDataCell(cell, 0)));
      }
      return sb.string;
    }
  }
  return null;
}
;
_.getSymbolTypeForSeriesNum = function getSymbolTypeForSeriesNum_0(srsNum){
  if (this.graph.typeAttributes.isXYLine)
    return $getSymbolTypeForSeriesNum(this, srsNum);
  return 1;
}
;
_.numberFormattingProcessed = function numberFormattingProcessed_4(){
  return true;
}
;
_.processChartOptions = function processChartOptions_33(){
  var dataFiltered, hideGridsVal, hoverTextOverride, key, key$iterator, minSize, object, value_0, xScale, xScaleLineVal, yScale, yScaleLineVal;
  $setHideGrids(this, false);
  $removeGoalScaleMarker(this.sGraph);
  $setDataLabelUseScaleFormat(this, 'true');
  $setHoverUseScaleFormat(this, 'true');
  yScale = $getValueScaleByNumber(this.sGraph, 0);
  !!yScale && (yScale.alwaysIncludeZero = false);
  xScale = $getCategoryScale(this.sGraph);
  !!xScale && instanceOf(xScale, 27) && (castTo(xScale, 27).alwaysIncludeZero = false);
  $processChartOptions_7(this);
  dataFiltered = false;
  if (this.graph.hasChartOptions()) {
    if (this.graph.getChartOptionAsString('range_filter_y') != null) {
      object = this.graph.chartOptions.get_0('range_filter_y');
      $filterY(this.graph.data_0, object);
      dataFiltered = true;
    }
    if (this.graph.getChartOptionAsString('range_filter_x') != null) {
      object = this.graph.chartOptions.get_0('range_filter_x');
      $filterX(this.graph.data_0, object);
      dataFiltered = true;
    }
    if (this.graph.getChartOptionAsString('range_filter_cat_x') != null) {
      object = this.graph.chartOptions.get_0('range_filter_cat_x');
      $filterCatX(this.graph.data_0, object);
      dataFiltered = true;
    }
    if (this.graph.getChartOptionAsString('range_filter_time') != null) {
      object = this.graph.chartOptions.get_0('range_filter_time');
      $filterTime(this.graph.data_0, object);
      dataFiltered = true;
    }
    xScaleLineVal = this.graph.getChartOptionAsString('x_scale_value');
    xScaleLineVal != null && (this.xScaleLine = getDouble_0(xScaleLineVal, NaN));
    yScaleLineVal = this.graph.getChartOptionAsString('y_scale_value');
    yScaleLineVal != null && (this.yScaleLine = getDouble_0(yScaleLineVal, NaN));
    hideGridsVal = this.graph.getChartOptionAsString('hide_all_grids');
    hideGridsVal != null && $setHideGrids(this, isTrue(hideGridsVal));
    for (key$iterator = this.graph.getChartOptionKeys().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value_0 = this.graph.getChartOptionAsString(key);
      switch (key) {
        case 'decimal_places_hvr':
          this.hoverDecimalPlaces = value_0;
          break;
        case 'negative_numbers_hvr':
          this.hoverNegativeNumber = value_0;
          break;
        case 'hover_format':
          this.hoverFormat = value_0;
          break;
        case 'divide_value_scale_by_hvr':
          this.hoverDivideScaleBy = value_0;
          break;
        case 'hover_use_scale_abbrev':
          this.hoverUseScaleAbbreviations = isTrue(value_0);
          break;
        case 'decimal_places_dl':
          this.dataLabelDecimalPlaces = value_0;
      }
    }
  }
  dataFiltered && $clearRegressionLines(this);
  hoverTextOverride = $getEncodedChartOption(this.graph);
  if (hoverTextOverride == null || hoverTextOverride.length == 0) {
    this.graph.hoverLabelText = '%_SERIES_NAME : %_XVALUE\n%_TF1_NAME : %_YVALUE';
    this.graph.typeAttributes.isBubble && (this.graph.hoverLabelText = '%_SERIES_NAME : %_XVALUE\n%_TF1_NAME : %_YVALUE\n%_TF2_NAME : %_BUBBLE_VALUE');
  }
  minSize = this.graph.bnds.width_0;
  this.graph.bnds.height_0 < minSize && (minSize = this.graph.bnds.height_0);
  this.maxBubbleDiameter = minSize / 6;
  this.maxBubbleDiameter > 90 && (this.maxBubbleDiameter = 90);
  this.maxBubbleDiameter < 40?(this.minBubbleDiameter = 4):(this.minBubbleDiameter = 8);
}
;
_.resetForTypeChange = function resetForTypeChange_19(){
  !!this.originalData && (this.originalData == this.graph.data_0?$unTransposeRowsCols(this.graph.data_0):(this.graph.data_0 = this.originalData));
  this.originalData = null;
}
;
_.setData = function setData_32(data_0){
  if (data_0) {
    this.maxBubbleValue = $intern_20;
    this.minBubbleValue = $intern_19;
    this.bubbleRatio = NaN;
    !this.originalData && (this.originalData = data_0);
    data_0.orderedColumnList && (data_0 = $transformOrderedColumnToXYBubble(data_0));
    $transposeRowsCols(data_0);
    $setData_5(this, data_0);
  }
  $setupSeriesFormatInfo(this);
}
;
_.bubbleRatio = NaN;
_.hoverUseScaleAbbreviations = false;
_.maxBubbleDiameter = 94;
_.maxBubbleValue = $intern_20;
_.minBubbleDiameter = 8;
_.minBubbleValue = $intern_19;
_.xScaleLine = NaN;
_.yScaleLine = NaN;
var BUBBLE_VALUE = 1, LOWER_VALUE = 3, LOWER_VALUE2 = 7, MEAN_VALUE = 2, MEAN_VALUE2 = 6, OUTLIER_VALUE = 5, UPPER_VALUE = 4, UPPER_VALUE2 = 8;
var Lcom_domo_charting_graphs_HandlerXY_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerXY', 121);
function $compare_17(o1, o2){
  var o1XVal, o2XVal;
  if (neq(o1.timeMS, 0)) {
    o1XVal = valueOf_0(o1.timeMS);
    o2XVal = valueOf_0(o2.timeMS);
    return compare_26(o1XVal.value_0, o2XVal.value_0);
  }
   else {
    o1XVal = $getValue(o1);
    o2XVal = $getValue(o2);
    return compare_24((checkCriticalNotNull(o1XVal) , o1XVal), (checkCriticalNotNull(o2XVal) , o2XVal));
  }
}

function HandlerXY$1(){
}

defineClass(319, 1, {}, HandlerXY$1);
_.compare = function compare_18(o1, o2){
  return $compare_17(castTo(o1, 16), castTo(o2, 16));
}
;
_.equals_0 = function equals_21(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerXY$1_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerXY/1', 319);
function $compare_18(o1, o2){
  var o1XVal, o2XVal;
  o1XVal = $intern_20;
  if (instanceOf(o1, 28)) {
    o1XVal = castTo(o1, 28).point.x_0;
    isNaN(o1XVal) && (o1XVal = $intern_20);
  }
  o2XVal = $intern_20;
  if (instanceOf(o2, 28)) {
    o2XVal = castTo(o2, 28).point.x_0;
    isNaN(o2XVal) && (o2XVal = $intern_20);
  }
  return $compareTo_1(o1XVal, o2XVal);
}

function HandlerXY$2(){
}

defineClass(140, 1, {}, HandlerXY$2);
_.compare = function compare_19(o1, o2){
  return $compare_18(castTo(o1, 18), castTo(o2, 18));
}
;
_.equals_0 = function equals_22(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_HandlerXY$2_2_classLit = createForClass('com.domo.charting.graphs', 'HandlerXY/2', 140);
function HoverInfo(text_0, point){
  this.text_0 = text_0;
  this.point = point;
  this.position = 0;
}

defineClass(89, 1, {89:1}, HoverInfo);
_.position = 0;
var Lcom_domo_charting_graphs_HoverInfo_2_classLit = createForClass('com.domo.charting.graphs', 'HoverInfo', 89);
function $$init_8(this$static){
  this$static.labels = new ArrayList;
  this$static.existingLabelRects = new ArrayList;
}

function $addHint(this$static, rnd, numberFormatter, cell, barInfo, labelPosition, tooltipStyle, hoverData){
  var point, rect;
  rect = $getRectForDisplay(barInfo, barInfo.getRect());
  !!barInfo.stackedProjRect && (rect = barInfo.stackedProjRect);
  !$usingCardBus(this$static.graph.chart) && hoverData != null && instanceOf(hoverData, 37) && castTo(hoverData, 37).type_0 != 13 && !this$static.graph.typeAttributes.isStream && !$hasProjections(this$static.sGraph)?(rect = $getRectForDisplay(barInfo, $getOrigRect(barInfo))):hoverData != null && instanceOf(hoverData, 16) && !this$static.graph.typeAttributes.isStream && !$hasProjections(this$static.sGraph) && (rect = $getRectForDisplay(barInfo, $getOrigRect(barInfo)));
  point = $getTextPointForRect(rect, labelPosition);
  $addHint_0(this$static, rnd, numberFormatter, cell, point, labelPosition, tooltipStyle, false);
}

function $addHint_0(this$static, rnd, numberFormatter, cell, point, labelPosition, tooltipStyle, isForecastItem){
  var bkgPath, bkgRect, graphicElement, hintText, rect, testRect, text_0, textItems;
  if (!cell || !!cell.column && cell.column.isRunningTotal && isNaN_0(cell.value_0))
    return;
  hintText = '%_VALUE';
  isForecastItem && (hintText = '%_FORECAST_VALUE');
  this$static.graph.handler.getHintTextOverride() != null && (hintText = this$static.graph.handler.getHintTextOverride());
  text_0 = $getFormattedText(this$static, hintText, cell, numberFormatter, this$static.graph, true);
  graphicElement = new GraphicElement;
  rect = $getTextRectForPoint(this$static, rnd, this$static.font_0, point, text_0, labelPosition, tooltipStyle, true);
  if (tooltipStyle) {
    $inflate(rect, 2);
    rect.width_0 = rect.width_0 + 6;
    rect.x_0 -= 3;
    $setHeight(rect, rect.height_0);
  }
  testRect = new CFRect(rect.x_0 - 3, rect.y_0, rect.width_0 + 6, rect.height_0);
  if (!$intersectsWithList(testRect, this$static.existingLabelRects)) {
    textItems = $getTextItemForPosition(this$static, rnd, this$static.font_0, text_0, rect, labelPosition);
    if (tooltipStyle) {
      if (labelPosition == 0 || labelPosition == 10 || labelPosition == 11) {
        $setY_0(rect, rect.y_0 + 2);
        bkgPath = new CFPath_6(rect, 2, point, 0);
      }
       else if (labelPosition == 4) {
        $setX_0(rect, rect.x_0 - 4);
        bkgPath = new CFPath_6(rect, 2, point, 1);
      }
       else if (labelPosition == 6) {
        $setRight(rect, rect.x_0 + rect.width_0 + 4);
        bkgPath = new CFPath_6(rect, 2, point, 3);
      }
       else 
        bkgPath = new CFPath_6(rect, 2, point, 4);
      bkgRect = new CFShape_0(bkgPath, new CFFill_1('#FFFFFFBA'), new CFStroke_1('#B4B8BA', 1));
      bkgRect.fill_0.noMouse = true;
      !graphicElement.shapeAry && (graphicElement.shapeAry = new ArrayList);
      $add_1(graphicElement.shapeAry, bkgRect);
    }
    $addTextItems(graphicElement, textItems);
    $addFrontGraphicElement_0(this$static.graph, graphicElement);
    $add_1(this$static.labels, graphicElement);
    $add_1(this$static.existingLabelRects, rect);
  }
}

function $addHint_1(this$static, rnd, numberFormatter, lineInfo, point, labelPosition, tooltipStyle){
  $addHint_0(this$static, rnd, numberFormatter, lineInfo.cell, point, labelPosition, tooltipStyle, lineInfo.isForecastPoint);
}

function $addPrimary(this$static, rnd, numberFormatter, cell, point, labelPosition){
  var text_0;
  text_0 = $getFormattedHoverText_0(this$static, numberFormatter, cell);
  $addPrimary_2(this$static, rnd, text_0, point, labelPosition, false);
}

function $addPrimary_0(this$static, rnd, numberFormatter, cell, rect, labelPosition){
  var point, text_0;
  labelPosition = $getPositionOverride(this$static, cell, labelPosition);
  point = $getTextPointForRect(rect, labelPosition);
  text_0 = $getFormattedHoverText_0(this$static, numberFormatter, cell);
  $addPrimary_2(this$static, rnd, text_0, point, labelPosition, false);
}

function $addPrimary_1(this$static, rnd, hoverText, cell, rect, labelPosition){
  var point;
  labelPosition = $getPositionOverride(this$static, cell, labelPosition);
  point = $getTextPointForRect(rect, labelPosition);
  $addPrimary_2(this$static, rnd, hoverText, point, labelPosition, false);
}

function $addPrimary_2(this$static, rnd, hoverText, point, labelPosition, keepInnerBounds){
  var graphicElement, rect;
  if (rnd.supportsNativeHover()) {
    $setHoverText(this$static.graph, hoverText);
    rect = $getTextRectForPoint(this$static, rnd, this$static.primaryFont, point, '-', labelPosition, true, keepInnerBounds);
    $add_1(this$static.existingLabelRects, rect);
  }
   else {
    rect = $getTextRectForPoint(this$static, rnd, this$static.primaryFont, point, hoverText, labelPosition, true, keepInnerBounds);
    graphicElement = $getCaptionGraphicElement(rnd, this$static.primaryFont, hoverText, point, rect, labelPosition);
    $addFrontGraphicElement_0(this$static.graph, graphicElement);
    $add_1(this$static.labels, graphicElement);
    $add_1(this$static.existingLabelRects, rect);
  }
}

function $getCaptionGraphicElement(rnd, font, hoverText, point, rect, labelPosition){
  var graphicElement, textItems, textInfo, vAlign, bkgPath, bkgRect;
  graphicElement = new GraphicElement;
  textItems = (textInfo = getWrappedTextForWidthWithMaxLines(rnd, hoverText, font, 300, -1, -1) , vAlign = VALIGN_BOTTOM , $getCFTextItemsForWrappedLines(textInfo, rnd, rect, font, 0, vAlign));
  $inflate(rect, 2);
  rect.width_0 = rect.width_0 + 6;
  rect.x_0 -= 3;
  labelPosition == 0 || labelPosition == 10 || labelPosition == 11 || labelPosition == 2?(bkgPath = new CFPath_6(rect, 2, point, 0)):labelPosition == 4?(bkgPath = new CFPath_6(rect, 2, point, 1)):labelPosition == 6 || labelPosition == 12?(bkgPath = new CFPath_6(rect, 2, point, 3)):(bkgPath = new CFPath_6(rect, 2, point, 4));
  bkgRect = new CFShape_0(bkgPath, new CFFill_1('#000000CC'), null);
  bkgRect.fill_0.noMouse = true;
  !graphicElement.shapeAry && (graphicElement.shapeAry = new ArrayList);
  $add_1(graphicElement.shapeAry, bkgRect);
  $addTextItems(graphicElement, textItems);
  return graphicElement;
}

function $getCaptionGraphicElement_0(this$static, rnd, hoverText, point, rect, labelPosition){
  return $getCaptionGraphicElement(rnd, this$static.primaryFont, hoverText, point, rect, labelPosition);
}

function $getFormattedHoverText_0(this$static, numberFormatter, cell){
  var fmtString, text_0;
  fmtString = this$static.graph.handler.getHoverTextOverride(cell, this$static.formatString);
  text_0 = $getFormattedText(this$static, fmtString, cell, numberFormatter, this$static.graph, true);
  !!cell && !!cell.row && cell.row.isForecastRow && (text_0 = text_0 + ' (' + this$static.graph.getLocalizedString('PROJECTED') + ')');
  return text_0;
}

function $getTextRectForPoint_0(this$static, rnd, point, text_0, position){
  return $getTextRectForPoint(this$static, rnd, this$static.primaryFont, point, text_0, position, true, true);
}

function $removeAll(this$static){
  var label_0, label$iterator;
  for (label$iterator = new ArrayList$1(this$static.labels); label$iterator.i < label$iterator.this$01.array.length;) {
    label_0 = castTo($next_3(label$iterator), 12);
    $removeFrontGraphicElement(this$static.graph, label_0);
  }
}

function HoverLabel(comp){
  DataLabelBase.call(this, comp);
  $$init_8(this);
  this.primaryFont = new CFFont_0(null, 12, ($clinit_CFColor() , WHITE));
}

function HoverLabel_0(graph){
  DataLabelBase.call(this, graph);
  $$init_8(this);
  this.formatString = '%_CATEGORY_NAME %_SERIES_NAME : %_VALUE';
  graph.hasTimeScale() && (this.formatString = '%_SERIES_NAME %_CATEGORY_NAME : %_VALUE');
  (graph.data_0.numVisibleCols == 1 || graph.data_0.isPeriodOverPeriod) && (this.formatString = '%_CATEGORY_NAME : %_VALUE');
  this.primaryFont = new CFFont_0(null, 12, ($clinit_CFColor() , WHITE));
}

defineClass(122, 175, {122:1}, HoverLabel, HoverLabel_0);
var Lcom_domo_charting_graphs_HoverLabel_2_classLit = createForClass('com.domo.charting.graphs', 'HoverLabel', 122);
function ItemAttrs(displayBelow, showLabel, fontSize){
  this.displayBelow = displayBelow;
  this.showLabel = showLabel;
  this.fontSize = fontSize;
}

defineClass(163, 1, {163:1}, ItemAttrs);
_.displayBelow = false;
_.fontSize = 0;
_.showLabel = false;
var Lcom_domo_charting_graphs_ItemAttrs_2_classLit = createForClass('com.domo.charting.graphs', 'ItemAttrs', 163);
function $drawSupportingFgLayer(this$static, rnd){
  drawGEAry(rnd, this$static.frontGeAry);
}

function $freeResources_21(this$static, dataToKeep){
  $freeResources_2(this$static, dataToKeep);
  this$static.font_0 = null;
  this$static.component = null;
  this$static.legendItems = null;
  this$static.frontGeAry = null;
  this$static.titleText = null;
  this$static.lastBnds = null;
}

function $getBndsOrLastBnds_0(this$static){
  if (this$static.bnds)
    return this$static.bnds;
  return this$static.lastBnds;
}

function $getExistingLegendItemInfoForSeries_0(this$static, colInfo){
  var legendItem, legendItem$iterator;
  if (!!this$static.legendItems && this$static.legendItems.size_1() > 0) {
    for (legendItem$iterator = this$static.legendItems.iterator(); legendItem$iterator.hasNext_0();) {
      legendItem = castTo(legendItem$iterator.next_1(), 37);
      if (legendItem.colInfo == colInfo)
        return legendItem;
    }
  }
  return null;
}

function $handleClickInLegendItemInfo_0(this$static, shapeClicked, graph, usingCardBus, dataObj){
  var colInfo;
  if (usingCardBus && ($equals_2('legacy', graph.data_0.originalDataType) || graph.data_0.isPeriodOverPeriod))
    return false;
  if (dataObj.type_0 == 5 || dataObj.type_0 == 12) {
    if ($handleClickScrollDown(this$static))
      return true;
  }
   else if (dataObj.type_0 == 11) {
    if ($handleClickScrollUp(this$static))
      return true;
  }
   else {
    colInfo = dataObj.colInfo;
    if (!!graph && !!colInfo) {
      if (usingCardBus) {
        $setSeriesIsFiltered(graph, colInfo.curIndex, !colInfo.showAsFiltered);
        this$static.drillFilter = graph.drillFilter;
        shapeClicked.drillFilter = null;
      }
       else 
        $setSeriesIsHidden(graph, colInfo.curIndex, !colInfo.hidden);
      return true;
    }
  }
  return false;
}

function $handleClickOnSrsShapeInCardBusMode(this$static, graph, rowInfo){
  $setRowFilteredValue(graph.data_0, !rowInfo.showAsFiltered, rowInfo);
  graph.data_0.hasFilteredRows && graph.data_0.numFilteredRows == $getNumRows(graph.data_0) && $setRowFilteredValue(graph.data_0, !rowInfo.showAsFiltered, rowInfo);
  $setDrillFromDataBasedOnShowAsFiltered(graph, true);
  this$static.drillFilter = graph.drillFilter;
  this$static.needsFormat = true;
  graph.setNeedsFormat(true);
}

function $handleClickScrollDown(this$static){
  var thisLeg;
  if (instanceOf(this$static, 66)) {
    thisLeg = castTo(this$static, 66);
    if (thisLeg.currentPage + 1 < thisLeg.pageFirstIndices.array.length) {
      ++thisLeg.currentPage;
      this$static.needsFormat = true;
      this$static.component.setNeedsFormat(true);
      return true;
    }
  }
  return false;
}

function $handleClickScrollUp(this$static){
  var thisLeg;
  if (instanceOf(this$static, 66)) {
    thisLeg = castTo(this$static, 66);
    if (thisLeg.currentPage > 0) {
      --thisLeg.currentPage;
      thisLeg.currentPage == 0 && (thisLeg.scrollUpItem = null);
      this$static.needsFormat = true;
      this$static.component.setNeedsFormat(true);
      return true;
    }
  }
  return false;
}

function $handleClickUsingRowInfo(this$static, graph, rowInfo){
  var filter, hadHiddenRows, hasHiddenRows;
  hadHiddenRows = graph.data_0.hasHiddenRows;
  $setCategoryIsHidden(graph, rowInfo.curIndex, !rowInfo.hidden);
  hasHiddenRows = graph.data_0.hasHiddenRows;
  if (hasHiddenRows) {
    filter = $getDynamicRowFilter(graph.data_0, graph.hasTimeScale());
    !graph.chartOptions && (graph.chartOptions = new HashMap);
    graph.chartOptions.put('row_filter', filter);
  }
  (hasHiddenRows || hadHiddenRows) && $logZoomState(this$static.chart, true);
}

function $moveRelativeToGraphBounds_1(this$static, annotationView){
  var annotBottom, annotLeft, annotRight, annotTop, grphBnds;
  annotBottom = 0;
  annotTop = 0;
  annotRight = 0;
  annotLeft = 0;
  !!annotationView && !!annotationView.bnds && (annotationView.position == 2?(annotRight = annotationView.bnds.width_0):annotationView.position == 1?(annotBottom = annotationView.bnds.height_0):annotationView.position == 0?(annotLeft = annotationView.bnds.width_0):annotationView.position == 3 && (annotTop = annotationView.bnds.height_0));
  grphBnds = this$static.component.bnds;
  if (instanceOf(this$static.component, 85) || instanceOf(this$static.component, 43) && castTo(this$static.component, 43).textAndTicksInBounds) {
    if (this$static.bnds) {
      if (this$static.position == 1) {
        $setY_0(this$static.bnds, grphBnds.y_0 + grphBnds.height_0 - (this$static.bnds.height_0 + annotBottom));
        $setWidth(this$static.bnds, grphBnds.width_0 - annotRight);
      }
       else if (this$static.position == 0) {
        $setX_0(this$static.bnds, grphBnds.x_0 + annotLeft);
        $setHeight(this$static.bnds, grphBnds.height_0 - annotBottom);
      }
       else if (this$static.position == 3) {
        $setY_0(this$static.bnds, grphBnds.y_0 + annotTop);
        $setWidth(this$static.bnds, grphBnds.width_0 - annotRight);
      }
       else if (this$static.position == 2) {
        $setX_0(this$static.bnds, grphBnds.x_0 + grphBnds.width_0 - (this$static.bnds.width_0 + annotRight));
        $setHeight(this$static.bnds, grphBnds.height_0 - annotBottom);
      }
    }
  }
   else {
    this$static.position == 0?$setX_0(this$static.bnds, grphBnds.x_0 - this$static.bnds.width_0):this$static.position == 3 && $setY_0(this$static.bnds, grphBnds.y_0 - this$static.bnds.height_0);
  }
}

function $reset_3(this$static){
  $reset_0(this$static);
  this$static.font_0 = new CFFont_0(null, 12, $getTextColor(this$static.chart.palette));
  this$static.legendItems = new ArrayList;
  this$static.titleText = null;
  this$static.isHidden = false;
  this$static.autoPosition = false;
  this$static.position = 0;
  this$static.hoverFromLegend = false;
  this$static.markerSize = 10;
  this$static.markerSizeOverride > 0 && (this$static.markerSize = this$static.markerSizeOverride);
  this$static.lineHeight = 28;
  this$static.vCentered = true;
  this$static.compLegendMargin = 20;
  this$static.startMargin = 0;
  this$static.endMargin = 0;
  this$static.frontGeAry = new ArrayList;
}

function $setMarkerSize(this$static, value_0){
  this$static.markerSize = value_0;
  this$static.markerSizeOverride = value_0;
}

function LegendBase(theChart, name_0, component){
  ComponentCSR.call(this, theChart, name_0);
  this.component = component;
}

defineClass(104, 63, {23:1, 63:1, 104:1});
_.createDrawObjects = function createDrawObjects(){
}
;
_.draw_1 = function draw_9(rnd){
  this.needsFormat && this.format_0(rnd);
  $draw_1(this, rnd);
}
;
_.format_0 = function format_27(rnd){
  var ge;
  if (!!this.component && this.component.needsFormat)
    return;
  clearGraphicElementArray(this.geAry);
  this.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  ge = new GraphicElement;
  if (this.component) {
    this.numberFormatter = this.component.numberFormatter;
    this.component.getData();
    this.component.getColorAry();
  }
  this.geAry.add_0(ge);
  this.needsFormat = false;
}
;
_.freeResources = function freeResources_33(dataToKeep){
  $freeResources_21(this, dataToKeep);
}
;
_.handleClick = function handleClick_12(shapeClicked){
  var dataObj, graph, map_0, rowInfo, usingCardBus;
  graph = null;
  usingCardBus = $usingCardBus(this.chart);
  map_0 = null;
  instanceOf(this.component, 43)?(graph = castTo(this.component, 43)):instanceOf(this.component, 85) && (map_0 = castTo(this.component, 85));
  if ((!!graph || !!map_0) && !!shapeClicked) {
    this.drillFilter = null;
    if (!!map_0 || !!graph && $hasInteractions(graph)) {
      dataObj = $getDataObjectForShape_0(graph, shapeClicked);
      if (instanceOf(dataObj, 37)) {
        if (this.handleClickInLegendItemInfo(shapeClicked, graph, usingCardBus, castTo(dataObj, 37)))
          return true;
      }
       else if (!!graph && instanceOf(dataObj, 18) && castTo(dataObj, 18).supportsDynamicFilter) {
        rowInfo = castTo(dataObj, 18).cell.row;
        if (graph) {
          usingCardBus?this.handleClickOnSrsShapeInCardBusMode(graph, rowInfo):$handleClickUsingRowInfo(this, graph, rowInfo);
          return true;
        }
      }
       else if (!!graph && instanceOf(dataObj, 7)) {
        rowInfo = castTo(dataObj, 7);
        if (graph) {
          $handleClickUsingRowInfo(this, graph, rowInfo);
          return true;
        }
      }
       else if (instanceOf(shapeClicked.comp, 65)) {
        return $handleClick_3(castTo(shapeClicked.comp, 65), dataObj);
      }
    }
  }
  return false;
}
;
_.handleClickInLegendItemInfo = function handleClickInLegendItemInfo(shapeClicked, graph, usingCardBus, dataObj){
  return $handleClickInLegendItemInfo_0(this, shapeClicked, graph, usingCardBus, dataObj);
}
;
_.handleClickOnSrsShapeInCardBusMode = function handleClickOnSrsShapeInCardBusMode(graph, rowInfo){
  $handleClickOnSrsShapeInCardBusMode(this, graph, rowInfo);
}
;
_.reset_0 = function reset_5(){
  $reset_3(this);
}
;
_.setFont = function setFont(fnt){
  this.font_0 = fnt;
}
;
_.setHoverData = function setHoverData_23(data_0, rnd){
  if (!!this.component && data_0 != null) {
    this.hoverFromLegend = true;
    return this.component.setHoverData(data_0, rnd);
  }
  return false;
}
;
_.setHoverEffects = function setHoverEffects_15(hoverData, rnd){
}
;
_.setNeedsFormat = function setNeedsFormat_5(value_0){
  this.needsFormat = value_0;
  if (this.needsFormat) {
    this.legendItems.clear_0();
    this.lastBnds = this.bnds;
    this.bnds = null;
  }
}
;
_.autoPosition = false;
_.compLegendMargin = 0;
_.endMargin = 0;
_.hoverFromLegend = false;
_.isHidden = false;
_.lineHeight = 0;
_.markerSize = 0;
_.markerSizeOverride = 0;
_.position = 0;
_.startMargin = 0;
_.vCentered = false;
var Lcom_domo_charting_graphs_LegendBase_2_classLit = createForClass('com.domo.charting.graphs', 'LegendBase', 104);
function $clinit_Legend(){
  $clinit_Legend = emptyMethod;
  grayMarkerFill_0 = new CFFill(($clinit_CFColor() , DISABLED_DARK_GRAY));
  grayMarkerStroke_0 = new CFStroke(DISABLED_DARK_GRAY, 2);
  new CFStroke(BLACK, 2);
}

function $addAdditionalGraphItems(this$static){
  var addlLegendItems, lii, lii$iterator;
  this$static.additionalItemsAdded = 0;
  addlLegendItems = this$static.getAdditionalLegendItems();
  if (!!addlLegendItems && addlLegendItems.array.length > 0) {
    for (lii$iterator = new ArrayList$1(addlLegendItems); lii$iterator.i < lii$iterator.this$01.array.length;) {
      lii = castTo($next_3(lii$iterator), 37);
      this$static.legendItems.add_1(0, lii);
    }
    this$static.additionalItemsAdded = addlLegendItems.array.length;
  }
}

function $addMoreItemAtIndex(this$static, moreIndex, sideMargins){
  var lastLii, liiMore, lines, numMore, titleCount;
  titleCount = 0;
  this$static.titleText != null && (titleCount = 1);
  numMore = $getNumDataItems(this$static) + titleCount - moreIndex;
  this$static.currentPage == 0 && (numMore += this$static.additionalItemsAdded);
  !!this$static.pageFirstIndices && this$static.pageFirstIndices.array.length > this$static.currentPage && (this$static.reverseOrder?this$static.pageFirstIndices.array.length > this$static.currentPage + 1 && (numMore = castTo($get_2(this$static.pageFirstIndices, this$static.currentPage + 1), 29).value_0):(numMore -= castTo($get_2(this$static.pageFirstIndices, this$static.currentPage), 29).value_0));
  lastLii = castTo(this$static.legendItems.get_1(moreIndex), 37);
  liiMore = new LegendItemInfo_1(this$static, '' + numMore + ' ' + this$static.component.getLocalizedString('MORE_ITEMS'), new CFFill_1('Transparent'), null);
  liiMore.bnds = lastLii.bnds;
  liiMore.type_0 = 5;
  if (this$static.position == 0 || this$static.position == 2) {
    lines = new ArrayList;
    $add_1(lines, '' + numMore + ' ' + getString('MORE_ITEMS', 'en'));
    liiMore.textInfo = new TextInfo_0(lines, lastLii.textInfo.textDimension, false);
  }
   else {
    liiMore.textInfo = new TextInfo('' + numMore + ' ' + getString('MORE_ITEMS', 'en'), lastLii.textInfo.textDimension);
  }
  castTo(this$static.legendItems.get_1(moreIndex), 37).bnds = null;
  this$static.legendItems.add_1(moreIndex, liiMore);
  this$static.currentPage > 0 && (sideMargins == 0?(this$static.scrollDnItem = new LegendItemInfo(this$static, 12, new CFRect(this$static.bnds.x_0, $getBottom(liiMore.bnds), this$static.bnds.width_0, 15))):(this$static.scrollDnItem = new LegendItemInfo(this$static, 12, new CFRect($getRight(this$static.bnds) - sideMargins, this$static.bnds.y_0, 15, this$static.bnds.height_0))));
}

function $createDrawObjects_1(this$static){
  var lii, lii$iterator, sLegend;
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    sLegend = castTo(lii.legend, 66);
    !!lii.bnds && (lii.type_0 == 11?$drawScrollUp(lii):lii.type_0 == 12?$drawScrollDn(lii):!!lii.textInfo && !!lii.textInfo.wrappedLines?$drawWrappedLineLegendItem(lii, sLegend):!!lii.textInfo && lii.textInfo.singleLine != null && $drawSingleLineLegendItem(lii, sLegend));
  }
  !!this$static.scrollUpItem && $drawItem_0(this$static.scrollUpItem);
  !!this$static.scrollDnItem && $drawItem_0(this$static.scrollDnItem);
}

function $drawSrsLegendItemNotShown(this$static, shapeInfo, rnd){
  var bounds, lii, tmpGE;
  $hideMoreLegendItem(this$static);
  bounds = castTo(this$static.legendItems.get_1(this$static.legendItems.size_1() - 1), 37).bnds;
  this$static.moreIndex != -1 && this$static.moreIndex < this$static.legendItems.size_1() && (bounds = castTo(this$static.legendItems.get_1(this$static.moreIndex), 37).bnds);
  if (!!shapeInfo && !!shapeInfo.cell) {
    lii = this$static.getLegendItemInfoForSeries(this$static, shapeInfo.cell.column);
    if (lii) {
      lii.bnds = bounds;
      if (this$static.position == 0 || this$static.position == 2) {
        lii.isTemporary = true;
        !lii.textInfo && $getTextDimensionsTruncated(lii, rnd, round_int(bounds.width_0) - (this$static.markerSize + this$static.markerTextMargin + this$static.horzSpaceBetweenItems));
        tmpGE = $drawWrappedLineLegendItem(lii, this$static);
        $insertShape(tmpGE, new CFShape_1(bounds, ($clinit_CFFill() , WHITE_0), null));
      }
       else {
        lii.isTemporary = true;
        !lii.textInfo && $getTextDimensions(lii, rnd, round_int(bounds.width_0), false);
        tmpGE = $drawSingleLineLegendItem(lii, this$static);
        $insertShape(tmpGE, new CFShape_1(bounds, ($clinit_CFFill() , WHITE_0), null));
      }
    }
  }
}

function $formatFromGraph_1(this$static, rnd){
  var colInfo, grphBnds, grphBnds0, i, legendCols, lii, nonExistantItems;
  this$static.markerSize = round_int(this$static.font_0.size_0 * $intern_8);
  this$static.markerSizeOverride > 0 && (this$static.markerSize = this$static.markerSizeOverride);
  this$static.component.bnds.width_0 < 450 && (this$static.position == 1 || this$static.position == 3) && (this$static.vertSpaceBetweenItems = 2);
  $processChartOptions(this$static);
  !this$static.bnds && (grphBnds0 = this$static.component.bnds , this$static.position == 1?(this$static.bnds = new CFRect(grphBnds0.x_0, grphBnds0.y_0 + grphBnds0.height_0, grphBnds0.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds0.x_0, grphBnds0.y_0, 0, grphBnds0.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds0.x_0, grphBnds0.y_0, grphBnds0.width_0, 0)):this$static.position == 2 && (this$static.bnds = new CFRect(grphBnds0.x_0 + grphBnds0.width_0, grphBnds0.y_0, 0, grphBnds0.height_0)));
  this$static.position == 0 || this$static.position == 2?(this$static.maxItemsToDisplay = 50):(this$static.maxItemsToDisplay = 100);
  this$static.legendItems.clear_0();
  clearGraphicElementArray(this$static.geAry);
  this$static.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  legendCols = this$static.getLegendColumns();
  if (!this$static.isHidden && !!legendCols && (legendCols.size_1() > 1 || legendCols.size_1() > 0 && this$static.showWithOneSeries)) {
    if (this$static.component) {
      this$static.numberFormatter = this$static.component.numberFormatter;
      i = 0;
      this$static.currentPage > 0?this$static.reverseOrder?(i = castTo($get_2(this$static.pageFirstIndices, this$static.currentPage), 29).value_0 - (this$static.maxItemsToDisplay + 1)):(i = castTo($get_2(this$static.pageFirstIndices, this$static.currentPage), 29).value_0):this$static.reverseOrder && legendCols.size_1() > this$static.maxItemsToDisplay + 2 && (i = legendCols.size_1() - (this$static.maxItemsToDisplay + 2));
      nonExistantItems = 0;
      for (; this$static.legendItems.size_1() + nonExistantItems < this$static.maxItemsToDisplay + 2 && i < legendCols.size_1(); i++) {
        if (i >= 0) {
          colInfo = castTo(legendCols.get_1(i), 7);
          lii = this$static.getLegendItemInfoForSeries(this$static, colInfo);
          this$static.legendItems.add_0(lii);
        }
         else {
          ++nonExistantItems;
        }
      }
      this$static.reverseOrder && reverse(this$static.legendItems);
      this$static.currentPage == 0 && $addAdditionalGraphItems(this$static);
      if (this$static.legendItems.size_1() > 10 && this$static.autoPosition && this$static.position == 2) {
        this$static.bnds = null;
        this$static.position = 1;
        grphBnds = this$static.component.bnds;
        this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2 && (this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0));
      }
      this$static.spaceDim = rnd.measureText_0(' ', this$static.font_0);
      (this$static.position == 3 || this$static.position == 1) && $setNumColsAndMaxItemsDisplayedForSpace(this$static, rnd);
      (this$static.maxItemsToDisplay > 1 || this$static.legendItems.size_1() == 1) && (this$static.position == 0 || this$static.position == 2?$formatSideLegend(this$static, rnd):this$static.formatBottomTopLegend(rnd));
    }
  }
  this$static.needsFormat = false;
}

function $formatSideLegend(this$static, rnd){
  var dim, innerHeight_0, left, maxLegendItemWidth, maxWidthMultiplier, moreText, numItems, sideWidth, titleInfo, top_0, totalHeight;
  this$static.legendItems.size_1() > this$static.maxItemsToDisplay && (this$static.legendItems = this$static.legendItems.subList(0, this$static.maxItemsToDisplay - 1));
  sideWidth = this$static.sideLegendWidth;
  if (this$static.currentPage == 0) {
    maxLegendItemWidth = $getMaxLegendItemWidth(this$static, rnd);
    this$static.markerSize + this$static.markerTextMargin + maxLegendItemWidth + this$static.sideLegendOutsideMargin < sideWidth && (sideWidth = this$static.markerSize + this$static.markerTextMargin + maxLegendItemWidth + this$static.sideLegendOutsideMargin);
    maxWidthMultiplier = 0.3;
    !!this$static.chart && this$static.chart.isPageLayout && instanceOf(this$static.component, 40) && !castTo(this$static.component, 40).isHorizontal && this$static.component.data_0.rows_0.size_1() == 1 && (maxWidthMultiplier = 0.6);
    !!this$static.chart && this$static.chart.isPageLayout && sideWidth > this$static.chart.dimension.width_0 * maxWidthMultiplier && (sideWidth = this$static.chart.dimension.width_0 * maxWidthMultiplier);
    numItems = $getNumDataItems(this$static);
    if (numItems > this$static.maxItemsToDisplay || this$static.moreIndex > -1) {
      moreText = '' + numItems + ' ' + this$static.component.getLocalizedString('MORE_ITEMS');
      dim = rnd.measureText_0(moreText, this$static.font_0);
      dim.width_0 > sideWidth && (sideWidth = dim.width_0);
    }
    $setWidth(this$static.bnds, sideWidth + this$static.compLegendMargin);
    this$static.calculatedSideWidth = round_int(sideWidth);
  }
   else {
    $setWidth(this$static.bnds, this$static.calculatedSideWidth + this$static.compLegendMargin);
  }
  top_0 = this$static.bnds.y_0 + this$static.startMargin;
  this$static.textAreaWidth = round_int(this$static.bnds.width_0) - (this$static.markerSize + this$static.markerTextMargin + this$static.sideLegendOutsideMargin);
  if (this$static.titleText != null) {
    titleInfo = new LegendItemInfo_1(this$static, this$static.titleText, null, null);
    titleInfo.type_0 = 9;
    this$static.legendItems.add_1(0, titleInfo);
  }
  totalHeight = $getTotalSideLegendHeight(this$static, rnd);
  innerHeight_0 = this$static.bnds.height_0 - (this$static.startMargin + this$static.endMargin);
  totalHeight < innerHeight_0 && this$static.vCentered && (top_0 = this$static.bnds.y_0 + this$static.startMargin + innerHeight_0 / 2 - totalHeight / 2);
  left = this$static.bnds.x_0;
  this$static.position == 2 && (left += this$static.compLegendMargin);
  $setSideLegendItemsBounds(this$static, left, top_0);
  this$static.position == 2 && this$static.bnds.width_0 > 0?(this$static.rightLegendLastTop = top_0):(this$static.rightLegendLastTop = 0);
}

function $getBottomMarginForSideLegend(this$static){
  if (this$static.scrollUpItem)
    return 15;
  return 5;
}

function $getHeightNeededForTitle(this$static, rnd){
  var titleInfo;
  if (this$static.titleText != null) {
    titleInfo = $getTitleLegendItem(this$static, rnd, 0, this$static.bnds.width_0 - this$static.bottomTopLegendMargin * 2);
    return titleInfo.textInfo.textDimension.height_0 + this$static.titleMarkerMargin;
  }
  return 0;
}

function $getLegendItemText(this$static, colInfo, text_0){
  var dlBase, legendText;
  if (colInfo) {
    if (this$static.legendTextTemplate != null) {
      dlBase = (!this$static.dataLabelBase && (this$static.dataLabelBase = new DataLabelBase(this$static.component)) , !!this$static.dataLabelBase && this$static.legendTextTemplate != null && this$static.legendTextTemplate.length > 0 && $setFormatString(this$static.dataLabelBase, this$static.legendTextTemplate) , this$static.dataLabelBase);
      if (dlBase) {
        legendText = $getFormattedText(dlBase, this$static.legendTextTemplate, $getFirstCell(colInfo), this$static.numberFormatter, this$static.component, false);
        legendText = convertBrToNewLine(legendText);
        return legendText;
      }
    }
    return $getName(colInfo);
  }
  return text_0;
}

function $getMaxLegendItemWidth(this$static, rnd){
  var col, col$iterator, dim, hasWrappedLines, legendCols, legendItem, legendItem$iterator, longestText, maxLen, maxWidth, name_0, text_0, textInfo;
  maxWidth = 0;
  hasWrappedLines = false;
  for (legendItem$iterator = this$static.legendItems.iterator(); legendItem$iterator.hasNext_0();) {
    legendItem = castTo(legendItem$iterator.next_1(), 37);
    text_0 = $getItemText(legendItem);
    if (text_0 != null && text_0.indexOf('\n') != -1) {
      hasWrappedLines = true;
      textInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, text_0, this$static.font_0, $intern_10, -1, -1));
      textInfo.textDimension.width_0 > maxWidth && (maxWidth = textInfo.textDimension.width_0);
    }
     else {
      dim = rnd.measureText_0(text_0, this$static.font_0);
      dim.width_0 > maxWidth && (maxWidth = dim.width_0);
    }
  }
  if (this$static.titleText != null) {
    dim = rnd.measureText_0(this$static.titleText, this$static.font_0);
    dim.width_0 > maxWidth && (maxWidth = dim.width_0);
  }
  if (!hasWrappedLines) {
    legendCols = this$static.getLegendColumns();
    longestText = '';
    maxLen = 0;
    for (col$iterator = legendCols.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      name_0 = $getLegendItemText(this$static, col, null);
      if (name_0 != null && name_0.length > maxLen) {
        maxLen = name_0.length;
        longestText = name_0;
      }
    }
    dim = rnd.measureText_0(longestText, this$static.font_0);
    dim.width_0 > maxWidth && (maxWidth = dim.width_0);
  }
  return maxWidth;
}

function $getMaxTruncatedWidthBottomLegend(this$static){
  var lii, lii$iterator, maxWidth;
  maxWidth = 0;
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    lii.textInfo.textDimension.width_0 > maxWidth && (maxWidth = lii.textInfo.textDimension.width_0);
  }
  return maxWidth;
}

function $getMaxWidthBottomLegend(this$static, rnd, legendItems, allowWrap){
  var col, col$iterator, dim, legendCols, lii, lii$iterator, longestText, maxLen, maxWidth, name_0, numMeasured, textDim;
  maxWidth = 0;
  for (lii$iterator = legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    allowWrap?(textDim = $getTextDimensions(lii, rnd, $intern_10, true)):(textDim = $getTextDimensions(lii, rnd, 0, false));
    textDim.width_0 > maxWidth && (maxWidth = textDim.width_0);
  }
  if (!allowWrap) {
    legendCols = this$static.getLegendColumns();
    longestText = '';
    maxLen = 0;
    numMeasured = 0;
    for (col$iterator = legendCols.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if (numMeasured == legendItems.size_1())
        break;
      name_0 = $getLegendItemText(this$static, col, null);
      if (name_0 != null && name_0.length > maxLen) {
        maxLen = name_0.length;
        longestText = name_0;
      }
      ++numMeasured;
    }
    dim = rnd.measureText_0(longestText, this$static.font_0);
    dim.width_0 > maxWidth && (maxWidth = dim.width_0);
  }
  return maxWidth;
}

function $getNumColsForMaxWidth(this$static, rnd, maxWidth, totalWidth, legendItems){
  var fullColumnWidth, numColsToUse, numItemsToDisplay, numRows, numUnTruncatedCols, possibleWidth, truncatedItemWidth;
  truncatedItemWidth = -1;
  totalWidth -= this$static.horzSpaceBetweenItems;
  numColsToUse = 0;
  numItemsToDisplay = legendItems.size_1();
  numItemsToDisplay > this$static.maxItemsToDisplay && (numItemsToDisplay = this$static.maxItemsToDisplay);
  fullColumnWidth = this$static.markerSize + this$static.markerTextMargin + maxWidth + this$static.horzSpaceBetweenItems;
  numUnTruncatedCols = round_int(totalWidth / fullColumnWidth);
  numUnTruncatedCols <= 0 && (numUnTruncatedCols = 1);
  numRows = numItemsToDisplay / numUnTruncatedCols | 0;
  if (numUnTruncatedCols < 2 && numRows <= this$static.maxRowsBeforeWrap) {
    numColsToUse = 1;
    truncatedItemWidth = totalWidth * this$static.percentLegendWidthOfTotalWidth;
  }
   else if (numRows > this$static.maxRowsBeforeWrap) {
    possibleWidth = totalWidth / 3;
    numColsToUse = 3;
    possibleWidth > 150 && (numColsToUse = 5);
  }
  if (numColsToUse == 0) {
    numColsToUse = numUnTruncatedCols;
    numUnTruncatedCols > numItemsToDisplay && (numColsToUse = numItemsToDisplay);
  }
   else 
    truncatedItemWidth == -1 && (truncatedItemWidth = totalWidth / numColsToUse);
  truncatedItemWidth != -1 && $truncateItemsToWidth(this$static, rnd, truncatedItemWidth);
  numUnTruncatedCols != numColsToUse || truncatedItemWidth < fullColumnWidth?(this$static.valuesTruncated = true):(this$static.valuesTruncated = false);
  return numColsToUse;
}

function $getNumDataItems(this$static){
  var legendCols, numItems;
  numItems = 0;
  legendCols = this$static.getLegendColumns();
  !!legendCols && (numItems = legendCols.size_1());
  return numItems;
}

function $getTitleLegendItem(this$static, rnd, top_0, width_0){
  var titleDim, titleInfo;
  titleInfo = new LegendItemInfo_1(this$static, this$static.titleText, null, null);
  titleInfo.type_0 = 9;
  titleDim = $getTextDimensions(titleInfo, rnd, 0, false);
  $setBounds_2(titleInfo, new CFRect($getCenterX(this$static.bnds) - titleDim.width_0 / 2, top_0, width_0, titleInfo.textInfo.textDimension.height_0));
  return titleInfo;
}

function $getTmpLegendItemAry(this$static, numItemsToAdd){
  var lii, lii$iterator, numItemsAdded, tmpLegendItems;
  tmpLegendItems = new ArrayList;
  numItemsAdded = 0;
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    if (numItemsAdded == numItemsToAdd)
      break;
    tmpLegendItems.array[tmpLegendItems.array.length] = lii;
    ++numItemsAdded;
  }
  return tmpLegendItems;
}

function $getTotalSideLegendHeight(this$static, rnd){
  var lii, lii$iterator, textDim, totalHeight;
  totalHeight = 0;
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    textDim = $getTextDimensions(lii, rnd, this$static.textAreaWidth, true);
    totalHeight += textDim.height_0;
    lii.type_0 == 9 && (totalHeight += this$static.titleMarkerMargin);
  }
  totalHeight += (this$static.legendItems.size_1() - 1) * this$static.vertSpaceBetweenItems;
  return totalHeight;
}

function $hideMoreLegendItem(this$static){
  var whiteFont;
  if (this$static.moreTextItem) {
    whiteFont = $duplicate_2(this$static.font_0);
    $setColor_1(whiteFont, ($clinit_CFColor() , WHITE));
    $setFont(this$static.moreTextItem, whiteFont);
  }
}

function $removeTemporaryItemIfExists(this$static){
  var dataObj, ge;
  this$static.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  if (this$static.geAry.size_1() > 0) {
    ge = castTo(this$static.geAry.get_1(this$static.geAry.size_1() - 1), 12);
    dataObj = $getDataObjectForGE_0(this$static, ge);
    dataObj != null && instanceOf(dataObj, 37) && castTo(dataObj, 37).isTemporary && this$static.geAry.remove(ge);
  }
}

function $setBottomLegendItemBounds(this$static, rnd, left, top_0, width_0){
  var curLeft, itemNum, liHeight, lii, lii$iterator, maxColWidth, maxPossibleColWidth, outsideMargin, rowHeight, spaceBetweenItems, startingLeft, titleHeight, titleInfo, tmpRowHeight, truncText;
  titleInfo = null;
  maxColWidth = $getMaxTruncatedWidthBottomLegend(this$static) + this$static.markerSize + this$static.markerTextMargin;
  titleHeight = 0;
  if (this$static.numCols > 1) {
    maxPossibleColWidth = (width_0 - (this$static.numCols - 1) * this$static.horzSpaceBetweenItems) / this$static.numCols;
    maxColWidth += (maxPossibleColWidth - maxColWidth) / 2;
  }
  this$static.currentPage > 0?(maxColWidth = this$static.calculatedSideWidth):(this$static.calculatedSideWidth = round_int(maxColWidth));
  outsideMargin = (width_0 - (this$static.numCols * maxColWidth + (this$static.numCols - 1) * this$static.horzSpaceBetweenItems)) / 2;
  if (this$static.titleText != null && this$static.position == 3) {
    titleInfo = $getTitleLegendItem(this$static, rnd, top_0, width_0);
    titleHeight = titleInfo.textInfo.textDimension.height_0;
    top_0 += titleInfo.textInfo.textDimension.height_0 + this$static.titleMarkerMargin;
  }
  itemNum = 1;
  startingLeft = left + outsideMargin;
  curLeft = startingLeft;
  rowHeight = 0;
  spaceBetweenItems = this$static.horzSpaceBetweenItems;
  this$static.numCols == 1 && (spaceBetweenItems = 0);
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    if (lii.type_0 != 9) {
      $setBounds_2(lii, new CFRect(curLeft, top_0, maxColWidth, lii.textInfo.textDimension.height_0));
      if (!!lii.textInfo && lii.textInfo.textDimension.width_0 > maxColWidth - (this$static.markerTextMargin + spaceBetweenItems - 2)) {
        truncText = truncateString(rnd, lii.textInfo.singleLine, maxColWidth - (this$static.markerTextMargin + spaceBetweenItems - 2), this$static.font_0);
        lii.textInfo = new TextInfo(truncText, rnd.measureText_0(truncText, this$static.font_0));
      }
      ++itemNum;
      curLeft += maxColWidth + this$static.horzSpaceBetweenItems;
      tmpRowHeight = lii.textInfo.textDimension.height_0;
      tmpRowHeight > rowHeight && (rowHeight = tmpRowHeight);
      if (itemNum > this$static.numCols) {
        curLeft = startingLeft;
        top_0 += rowHeight + this$static.vertSpaceBetweenItems;
        itemNum = 1;
        rowHeight = 0;
      }
    }
  }
  if (this$static.legendItems.size_1() > 0) {
    if ($getNumDataItems(this$static) > this$static.maxItemsToDisplay + 1 && this$static.legendItems.size_1() == this$static.maxItemsToDisplay) {
      this$static.moreIndex = this$static.legendItems.size_1() - 1;
      $addMoreItemAtIndex(this$static, this$static.moreIndex, round_int(outsideMargin + this$static.bottomTopLegendMargin));
      $setPagingIndices(this$static);
    }
     else {
      this$static.scrollDnItem = null;
    }
    this$static.currentPage > 0 && (this$static.scrollUpItem = new LegendItemInfo(this$static, 11, new CFRect(this$static.bnds.x_0 + 10, this$static.bnds.y_0, 15, this$static.bnds.height_0)));
    if (curLeft != startingLeft) {
      liHeight = castTo(this$static.legendItems.get_1(this$static.legendItems.size_1() - 1), 37).textInfo.textDimension.height_0;
      liHeight == 0 && (liHeight = $getLineHeight(this$static.font_0, rnd));
      top_0 += liHeight + this$static.vertSpaceBetweenItems;
    }
    if (this$static.titleText != null && this$static.position == 1) {
      titleInfo = $getTitleLegendItem(this$static, rnd, top_0 + this$static.titleMarkerMargin - (round_int($getDescender(this$static.font_0, rnd)) + 1), width_0);
      titleHeight = titleInfo.textInfo.textDimension.height_0 + this$static.titleMarkerMargin;
    }
    !!titleInfo && this$static.legendItems.add_0(titleInfo);
    this$static.position == 3?$setHeight(this$static.bnds, top_0 + titleHeight + this$static.compLegendMargin - this$static.vertSpaceBetweenItems - this$static.bnds.y_0):$setHeight(this$static.bnds, top_0 + titleHeight - this$static.vertSpaceBetweenItems - this$static.bnds.y_0);
  }
   else {
    this$static.bnds.height_0 = 0;
    return;
  }
}

function $setLegendPositionForChartOption(this$static, value_0){
  var lowerValue;
  lowerValue = value_0.toLowerCase();
  switch (lowerValue) {
    case 'top':
      this$static.position = 3;
      break;
    case 'right':
      this$static.position = 2;
      break;
    case 'bottom':
      this$static.position = 1;
      break;
    case 'left':
      this$static.position = 0;
      break;
    case 'hide':
      this$static.isHidden = true;
      break;
    case 'auto':
      if (!this$static.autoPosition) {
        this$static.position = 2;
        this$static.autoPosition = true;
      }

  }
}

function $setNumColsAndMaxItemsDisplayedForSpace(this$static, rnd){
  var itemHeight, j, lastNumCols, legendItemSpace, maxHeightDivisor, maxLegendHeight, maxRows, maxWidth, titleHeight, tmpLegendItems;
  maxHeightDivisor = 4;
  !!this$static.chart && this$static.chart.isPageLayout && instanceOf(this$static.component, 40) && castTo(this$static.component, 40).isHorizontal && this$static.component.data_0.rows_0.size_1() == 1 && (maxHeightDivisor = 2);
  maxWidth = $getMaxWidthBottomLegend(this$static, rnd, this$static.legendItems, true);
  this$static.numCols = $getNumColsForMaxWidth(this$static, rnd, maxWidth, this$static.bnds.width_0 - this$static.bottomTopLegendMargin * 2, this$static.legendItems);
  if (this$static.numCols < this$static.legendItems.size_1()) {
    maxWidth = $getMaxWidthBottomLegend(this$static, rnd, this$static.legendItems, false);
    this$static.numCols = $getNumColsForMaxWidth(this$static, rnd, maxWidth, this$static.bnds.width_0 - this$static.bottomTopLegendMargin * 2, this$static.legendItems);
  }
  titleHeight = $getHeightNeededForTitle(this$static, rnd);
  itemHeight = castTo(this$static.legendItems.get_1(0), 37).textInfo.textDimension.height_0;
  maxLegendHeight = this$static.chart.dimension.height_0 / maxHeightDivisor;
  legendItemSpace = maxLegendHeight - (titleHeight + this$static.bottomTopLegendMargin);
  maxRows = round_int(legendItemSpace / (itemHeight + this$static.vertSpaceBetweenItems));
  this$static.maxItemsToDisplay = this$static.numCols * maxRows;
  if (this$static.maxItemsToDisplay < this$static.legendItems.size_1()) {
    tmpLegendItems = $getTmpLegendItemAry(this$static, this$static.maxItemsToDisplay);
    lastNumCols = this$static.numCols;
    for (j = 0; j < 4; j++) {
      maxWidth = $getMaxWidthBottomLegend(this$static, rnd, tmpLegendItems, false);
      this$static.numCols = $getNumColsForMaxWidth(this$static, rnd, maxWidth, this$static.bnds.width_0 - this$static.bottomTopLegendMargin * 2, tmpLegendItems);
      if (this$static.numCols == lastNumCols) {
        break;
      }
       else {
        this$static.maxItemsToDisplay = this$static.numCols * maxRows;
        tmpLegendItems = $getTmpLegendItemAry(this$static, this$static.maxItemsToDisplay);
        lastNumCols = this$static.numCols;
      }
    }
  }
}

function $setPagingIndices(this$static){
  var lastItemBeforeMore, lastItemBeforeMoreIndex, legendCols;
  legendCols = this$static.getLegendColumns();
  lastItemBeforeMore = castTo(this$static.legendItems.get_1(this$static.moreIndex - 1), 37);
  lastItemBeforeMoreIndex = -1;
  !!lastItemBeforeMore && !!lastItemBeforeMore.colInfo && (lastItemBeforeMoreIndex = legendCols.indexOf_0(lastItemBeforeMore.colInfo));
  this$static.currentPage == 0 && this$static.pageFirstIndices.array.length == 0?this$static.reverseOrder?$add_1(this$static.pageFirstIndices, valueOf(legendCols.size_1() - 1)):$add_1(this$static.pageFirstIndices, new Integer(0)):this$static.pageFirstIndices.array.length <= this$static.currentPage + 1?$add_1(this$static.pageFirstIndices, new Integer(lastItemBeforeMoreIndex)):$set(this$static.pageFirstIndices, this$static.currentPage + 1, new Integer(lastItemBeforeMoreIndex));
}

function $setSideLegendItemsBounds(this$static, left, top_0){
  var index_0, liBnds, lii, lii$iterator, textDim;
  this$static.moreIndex = -1;
  index_0 = 0;
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    if (this$static.currentPage > 0 && lii.type_0 != 9 && index_0 == 0) {
      this$static.scrollUpItem = new LegendItemInfo(this$static, 11, new CFRect(this$static.bnds.x_0, top_0, this$static.bnds.width_0, 15));
      top_0 += 15;
    }
    textDim = lii.textInfo.textDimension;
    liBnds = new CFRect(left, top_0, this$static.textAreaWidth, textDim.height_0);
    if (liBnds.y_0 >= this$static.bnds.y_0 && liBnds.y_0 + liBnds.height_0 < $getBottom(this$static.bnds) - $getBottomMarginForSideLegend(this$static)) {
      liBnds.x_0 + liBnds.width_0 > $getRight(this$static.bnds) && $setWidth(liBnds, $getRight(this$static.bnds) - liBnds.x_0);
      lii.bnds = liBnds;
    }
     else {
      if (this$static.moreIndex == -1) {
        if (top_0 + this$static.spaceDim.height_0 <= $getBottom(this$static.bnds) - $getBottomMarginForSideLegend(this$static)) {
          $setHeight(liBnds, this$static.spaceDim.height_0);
          $setWidth(liBnds, this$static.bnds.width_0);
          lii.bnds = liBnds;
          this$static.moreIndex = index_0;
        }
         else {
          lii.bnds = null;
          this$static.moreIndex = index_0 - 1;
        }
      }
      break;
    }
    top_0 += textDim.height_0 + this$static.vertSpaceBetweenItems;
    if (lii.type_0 == 9) {
      top_0 += this$static.titleMarkerMargin;
      if (this$static.currentPage > 0) {
        this$static.scrollUpItem = new LegendItemInfo(this$static, 11, new CFRect(this$static.bnds.x_0, top_0, this$static.bnds.width_0, 15));
        top_0 += 15;
      }
    }
    ++index_0;
  }
  if (this$static.moreIndex != -1 && this$static.moreIndex > 0) {
    $setPagingIndices(this$static);
    $addMoreItemAtIndex(this$static, this$static.moreIndex, 0);
  }
   else {
    this$static.scrollDnItem = null;
  }
}

function $truncateItemsToWidth(this$static, rnd, truncatedItemWidth){
  var lii, lii$iterator, textWidth, truncText;
  textWidth = truncatedItemWidth - (this$static.markerSize + this$static.markerTextMargin + this$static.horzSpaceBetweenItems);
  for (lii$iterator = this$static.legendItems.iterator(); lii$iterator.hasNext_0();) {
    lii = castTo(lii$iterator.next_1(), 37);
    if (lii.textInfo.textDimension.width_0 > textWidth) {
      truncText = truncateString(rnd, lii.textInfo.singleLine, textWidth, this$static.font_0);
      lii.textInfo = new TextInfo(truncText, rnd.measureText_0(truncText, this$static.font_0));
    }
  }
}

function Legend(chart, name_0, component){
  LegendBase.call(this, chart, name_0, component);
  this.bottomTopLegendMargin = 15;
  this.scrollUpItem = null;
  this.scrollDnItem = null;
  this.pageFirstIndices = new ArrayList;
  this.maxRowsBeforeWrap = 5;
  this.percentLegendWidthOfTotalWidth = 0.8;
  this.font_0 = new CFFont_0(null, 11, $getTextColor(this.chart.palette));
}

function checkForHoveredItemFoundAndSetLegendItemState(hoverData, geAry, curSelectedIsMoreItem, font, component){
  $clinit_Legend();
  var dataObj, ge, grayFont, hoveredItemFound, i, isCurrentItem, legItemInfo, textItem, textItem$iterator, textItems;
  grayFont = $duplicate_2(font);
  $setColor_1(grayFont, ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
  hoveredItemFound = false;
  for (i = 0; i < geAry.size_1(); i++) {
    ge = castTo(geAry.get_1(i), 12);
    dataObj = $getDataObjectForGE_0(component, ge);
    if (dataObj != null && instanceOf(dataObj, 37)) {
      legItemInfo = castTo(dataObj, 37);
      if (legItemInfo.type_0 != 9) {
        isCurrentItem = false;
        hoverData != null && instanceOf(hoverData, 37)?(isCurrentItem = maskUndefined(hoverData) === maskUndefined(dataObj)):hoverData != null && instanceOf(hoverData, 18) && (isCurrentItem = castTo(component, 43).handler.isLegendItemSameSeries(legItemInfo, castTo(hoverData, 18)));
        isCurrentItem && (hoveredItemFound = true);
        legItemInfo.type_0 != 11 && legItemInfo.type_0 != 12 && setHoverFillAndStrokeForLegendItem(ge, legItemInfo, isCurrentItem || curSelectedIsMoreItem, hoverData, component);
        textItems = ge.textAry;
        if (textItems) {
          for (textItem$iterator = new ArrayList$1(textItems); textItem$iterator.i < textItem$iterator.this$01.array.length;) {
            textItem = castTo($next_3(textItem$iterator), 26);
            !isCurrentItem && hoverData != null && !curSelectedIsMoreItem?(textItem.font_0 = grayFont):(textItem.font_0 = font);
          }
        }
      }
    }
  }
  return hoveredItemFound;
}

function setHoverFillAndStrokeForLegendItem(ge, legItemInfo, isCurrentItem, hoverData, component){
  var fillColor, shape_0, shape$iterator, shapes;
  shapes = ge.shapeAry;
  for (shape$iterator = new ArrayList$1(shapes); shape$iterator.i < shape$iterator.this$01.array.length;) {
    shape_0 = castTo($next_3(shape$iterator), 6);
    if (!$fillIsColor(shape_0, ($clinit_CFColor() , TRANSPARENT))) {
      if (!isCurrentItem && hoverData != null) {
        if (legItemInfo.type_0 == 3 && !legItemInfo.colInfo.hidden && !legItemInfo.colInfo.showAsFiltered) {
          $setFill_0(shape_0, grayMarkerFill_0);
        }
         else if (!!legItemInfo.colInfo && (legItemInfo.colInfo.hidden || legItemInfo.colInfo.showAsFiltered)) {
          $setStroke(shape_0, grayMarkerStroke_0);
          !!shape_0.fill_0 && $setFill_0(shape_0, ($clinit_CFFill() , WHITE_0));
        }
         else {
          !!shape_0.stroke_0 && $setStroke(shape_0, grayMarkerStroke_0);
          !!shape_0.fill_0 && $setFill_0(shape_0, grayMarkerFill_0);
        }
      }
       else {
        if (legItemInfo.type_0 == 3) {
          if (!!legItemInfo.colInfo && (legItemInfo.colInfo.hidden || legItemInfo.colInfo.showAsFiltered)) {
            $setStroke(shape_0, grayMarkerStroke_0);
            $setFill_0(shape_0, ($clinit_CFFill() , WHITE_0));
          }
           else {
            fillColor = null;
            legItemInfo.stroke_0?(fillColor = legItemInfo.stroke_0.color_0):!!legItemInfo.fill_0 && (fillColor = legItemInfo.fill_0.color_0);
            $setFill_0(shape_0, new CFFill(fillColor));
          }
        }
         else {
          if (!!legItemInfo.colInfo && (legItemInfo.colInfo.hidden || legItemInfo.colInfo.showAsFiltered)) {
            $setStroke(shape_0, grayMarkerStroke_0);
            !!shape_0.fill_0 && $setFill_0(shape_0, ($clinit_CFFill() , WHITE_0));
          }
           else {
            !!shape_0.stroke_0 && $setStroke(shape_0, $getStroke(legItemInfo));
            !!shape_0.fill_0 && $setFill_0(shape_0, legItemInfo.fill_0);
          }
        }
      }
      if (!!component && instanceOf(component, 43) && castTo(component, 43).outlineStyle) {
        $setFill_0(shape_0, getOutlineFill(shape_0.fill_0));
        $setStroke(shape_0, getOutlineStroke(shape_0.fill_0, shape_0.stroke_0));
      }
    }
  }
}

defineClass(66, 104, $intern_43);
_.createDrawObjects = function createDrawObjects_0(){
  $createDrawObjects_1(this);
}
;
_.format_0 = function format_28(rnd){
  return;
}
;
_.formatBottomTopLegend = function formatBottomTopLegend(rnd){
  var top_0;
  this.legendItems.size_1() > this.maxItemsToDisplay + 1 && (this.legendItems = this.legendItems.subList(0, this.maxItemsToDisplay));
  this.position == 1?(top_0 = this.bnds.y_0 + this.compLegendMargin):(top_0 = this.bnds.y_0 + 2);
  $setBottomLegendItemBounds(this, rnd, this.bnds.x_0 + this.bottomTopLegendMargin, top_0, this.bnds.width_0 - this.bottomTopLegendMargin * 2);
}
;
_.freeResources = function freeResources_34(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.spaceDim = null;
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems_3(){
  return null;
}
;
_.getLegendColumns = function getLegendColumns_1(){
  return null;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_4(legend, colInfo){
  return null;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_7(x_0, y_0, rnd){
  if (!this.component.hasInteractions_0())
    return null;
  return $getShapeUnderPoint_0(this, x_0, y_0, rnd);
}
;
_.processChartOption = function processChartOption_1(key){
  var boolValue, compLegendMarginOverride, handled, legendChanged, oldAutoPosition, oldIsHidden, oldPosition, sGraph, scl, scl$iterator, value_0;
  sGraph = castTo(this.component, 40);
  legendChanged = false;
  handled = true;
  value_0 = $getChartOptionAsString(this, key);
  switch (key) {
    case 'legend_position':
      if ((sGraph.verticalLayout || sGraph.horizontalLayout) && !(this.component.getChartOptionAsString('lrg_legend_position') != null || this.component.getChartOptionAsString('details_legend_position') != null)) {
        oldPosition = this.position;
        oldAutoPosition = this.autoPosition;
        oldIsHidden = this.isHidden;
        $setLegendPositionForChartOption(this, value_0);
        (oldPosition != this.position || oldAutoPosition != this.autoPosition || oldIsHidden != this.isHidden) && (legendChanged = true);
      }

      break;
    case 'lrg_legend_position':
      if (sGraph.verticalLayout) {
        oldPosition = this.position;
        oldAutoPosition = this.autoPosition;
        oldIsHidden = this.isHidden;
        $setLegendPositionForChartOption(this, value_0);
        (oldPosition != this.position || oldAutoPosition != this.autoPosition || oldIsHidden != this.isHidden) && (legendChanged = true);
      }

      break;
    case 'details_legend_position':
      if (sGraph.horizontalLayout) {
        oldPosition = this.position;
        oldAutoPosition = this.autoPosition;
        oldIsHidden = this.isHidden;
        $setLegendPositionForChartOption(this, value_0);
        (oldPosition != this.position || oldAutoPosition != this.autoPosition || oldIsHidden != this.isHidden) && (legendChanged = true);
      }

      break;
    case 'legend_reverse_layout':
      boolValue = isTrue(value_0);
      boolValue != this.reverseOrder && (legendChanged = true);
      this.reverseOrder = boolValue;
      break;
    case 'legend_title_text':
      $equals_2(value_0, this.titleText) || (legendChanged = true);
      this.titleText = value_0;
      break;
    case 'show_single_series_legend':
      this.showWithOneSeries = isTrue(value_0);
      break;
    case 'legend_text':
      this.legendTextTemplate = ($clinit_StrUtil() , entityDecodeString(value_0));
      this.legendTextTemplate = convertBrToNewLine(this.legendTextTemplate);
      break;
    case 'legend_comp_margin':
      compLegendMarginOverride = getInt(value_0, 20);
      compLegendMarginOverride < 0 && (compLegendMarginOverride = 0);
      this.compLegendMargin = compLegendMarginOverride;
      break;
    default:handled = false;
  }
  if (legendChanged) {
    this.legendItems.clear_0();
    this.startMargin = 0;
    this.endMargin = 0;
    for (scl$iterator = new ArrayList$1(sGraph.scales); scl$iterator.i < scl$iterator.this$01.array.length;) {
      scl = castTo($next_3(scl$iterator), 53);
      scl.startMargin = 0;
      scl.endMargin = 0;
    }
  }
  return handled;
}
;
_.reset_0 = function reset_6(){
  $reset_3(this);
  this.sideLegendWidth = 180;
  this.sideLegendOutsideMargin = 20;
  this.markerTextMargin = 5;
  this.maxItemsToDisplay = 25;
  this.vertSpaceBetweenItems = 5;
  this.horzSpaceBetweenItems = 10;
  this.titleMarkerMargin = 8;
  this.reverseOrder = false;
  this.numCols = 0;
  this.additionalItemsAdded = 0;
  this.textAreaWidth = 0;
  this.moreIndex = -1;
  this.scrollDnItem = null;
  this.scrollUpItem = null;
  this.font_0 = new CFFont_0(null, 11, $getTextColor(this.chart.palette));
  this.markerSize = round_int(this.font_0.size_0) - 2;
  this.markerSizeOverride > 0 && (this.markerSize = this.markerSizeOverride);
}
;
_.setFont = function setFont_0(fnt){
  this.font_0 = fnt;
  this.markerSize = round_int(this.font_0.size_0) - 2;
  this.markerSizeOverride > 0 && (this.markerSize = this.markerSizeOverride);
}
;
_.setHoverEffects = function setHoverEffects_16(hoverData, rnd){
  var curSelectedIsMoreItem, hoveredItemFound;
  if (!instanceOf(this.component, 43))
    return;
  curSelectedIsMoreItem = false;
  if (this.isHidden || this.legendItems.size_1() == 0)
    return;
  if (instanceOfString(hoverData))
    return;
  if (instanceOf(hoverData, 46))
    return;
  if (!this.component.hasInteractions_0())
    return;
  instanceOf(hoverData, 37) && (castTo(hoverData, 37).type_0 == 5 || castTo(hoverData, 37).type_0 == 11 || castTo(hoverData, 37).type_0 == 12) && (curSelectedIsMoreItem = true);
  $removeTemporaryItemIfExists(this);
  hoveredItemFound = checkForHoveredItemFoundAndSetLegendItemState(hoverData, this.geAry, curSelectedIsMoreItem, this.font_0, this.component);
  !hoveredItemFound && hoverData != null && instanceOf(hoverData, 18) && $drawSrsLegendItemNotShown(this, castTo(hoverData, 18), rnd);
}
;
_.additionalItemsAdded = 0;
_.bottomTopLegendMargin = 0;
_.calculatedSideWidth = 0;
_.currentPage = 0;
_.horzSpaceBetweenItems = 0;
_.markerTextMargin = 0;
_.maxItemsToDisplay = 0;
_.maxRowsBeforeWrap = 0;
_.moreIndex = 0;
_.numCols = 0;
_.percentLegendWidthOfTotalWidth = 0;
_.reverseOrder = false;
_.rightLegendLastTop = 0;
_.showWithOneSeries = false;
_.sideLegendOutsideMargin = 0;
_.sideLegendWidth = 0;
_.textAreaWidth = 0;
_.textMarkerYOffset = 0;
_.titleMarkerMargin = 0;
_.valuesTruncated = false;
_.vertSpaceBetweenItems = 0;
var grayMarkerFill_0, grayMarkerStroke_0;
var Lcom_domo_charting_graphs_Legend_2_classLit = createForClass('com.domo.charting.graphs', 'Legend', 66);
function $$init_9(this$static){
}

function $addMarker(this$static, ge, markerBnds, isHiddenOverlay, legend, hitBnds){
  var capBnds, fillColor, fillWithStroke, hitRect, legStroke, marker, markerShape, radius, symPath;
  legStroke = $getLegendStroke(this$static, isHiddenOverlay);
  if ((this$static.type_0 == 1 || this$static.type_0 == 7) && !isHiddenOverlay)
    markerShape = new CFShape_0(new CFPath_1(markerBnds.x_0, markerBnds.y_0 + markerBnds.height_0 / 2, markerBnds.x_0 + markerBnds.width_0, markerBnds.y_0 + markerBnds.height_0 / 2), null, legStroke);
  else if (this$static.type_0 == 2 && !isHiddenOverlay) {
    symPath = getSymbolPath(this$static.symbolType, markerBnds.x_0 + markerBnds.width_0 / 2, markerBnds.y_0 + markerBnds.height_0 / 2);
    markerShape = new CFShape_0(symPath, this$static.fill_0, legStroke);
  }
   else if (this$static.type_0 == 3 && !isHiddenOverlay) {
    symPath = getSymbolPath(this$static.symbolType, markerBnds.x_0 + markerBnds.width_0 / 2, markerBnds.y_0 + markerBnds.height_0 / 2);
    fillColor = null;
    legStroke?(fillColor = legStroke.color_0):!!this$static.fill_0 && (fillColor = this$static.fill_0.color_0);
    fillWithStroke = new CFFill(fillColor);
    markerShape = new CFShape_0(symPath, fillWithStroke, null);
  }
   else if (this$static.type_0 == 10 && !isHiddenOverlay) {
    capBnds = new CFRect(markerBnds.x_0, markerBnds.y_0, markerBnds.width_0, markerBnds.height_0);
    $setY_0(capBnds, capBnds.y_0 + capBnds.height_0 / 2 - 1);
    capBnds.height_0 = 2;
    markerShape = new CFShape_0(new CFPath_3(capBnds), $getLegendFill(this$static, isHiddenOverlay), null);
  }
   else if (this$static.type_0 == 4) {
    radius = this$static.variableMarkerSize / 2;
    markerShape = new CFShape_0(new CFPath_0(markerBnds.x_0 + markerBnds.width_0 / 2 - radius, markerBnds.y_0 + markerBnds.height_0 - this$static.variableMarkerSize + 2, this$static.variableMarkerSize), this$static.fill_0, null);
  }
   else 
    markerShape = new CFShape_0(new CFPath_3(markerBnds), $getLegendFill(this$static, isHiddenOverlay), legStroke);
  if (!!legend && !!legend.component && instanceOf(legend.component, 43) && castTo(legend.component, 43).outlineStyle) {
    $setFill_0(markerShape, getOutlineFill(markerShape.fill_0));
    $setStroke(markerShape, getOutlineStroke(markerShape.fill_0, markerShape.stroke_0));
  }
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, markerShape);
  hitRect = new CFRect_0(markerBnds);
  $inflate(hitRect, 2);
  !!hitBnds && (hitRect = hitBnds);
  marker = new CFShape_0(new CFPath_3(hitRect), new CFFill_1('Transparent'), null);
  marker.drillFilter = '{"internal": "legend item"}';
  $addShape_0(ge, marker, this$static);
}

function $addShapeOverLegendItem(this$static, ge){
  var overItem;
  overItem = new CFShape_0(new CFPath_3($getHoverRegionBnds(this$static, this$static.bnds)), new CFFill_1('Transparent'), null);
  overItem.drillFilter = '{"internal": "legend item"}';
  $addShape_0(ge, overItem, this$static);
}

function $dontHoverLegendItem(this$static){
  if (this$static.type_0 == 7 || this$static.type_0 == 8)
    return true;
  return false;
}

function $drawItem_0(this$static){
  var sLegend;
  sLegend = castTo(this$static.legend, 66);
  !!this$static.bnds && (this$static.type_0 == 11?$drawScrollUp(this$static):this$static.type_0 == 12?$drawScrollDn(this$static):!!this$static.textInfo && !!this$static.textInfo.wrappedLines?$drawWrappedLineLegendItem(this$static, sLegend):!!this$static.textInfo && this$static.textInfo.singleLine != null && $drawSingleLineLegendItem(this$static, sLegend));
}

function $drawScrollDn(this$static){
  var ge, path;
  ge = new GraphicElement;
  path = new CFPath;
  if (this$static.bnds.width_0 > this$static.bnds.height_0) {
    $add(path, new CFPathElement_0(0, this$static.bnds.x_0 + 30, this$static.bnds.y_0 + 3));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 35, this$static.bnds.y_0 + 8));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 40, this$static.bnds.y_0 + 3));
  }
   else {
    $add(path, new CFPathElement_0(0, this$static.bnds.x_0, $getCenterY(this$static.bnds) - 5));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 5, $getCenterY(this$static.bnds)));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0, $getCenterY(this$static.bnds) + 5));
  }
  path.shouldAntiAlias = true;
  $addShape(ge, new CFShape_0(path, null, new CFStroke_1('#000000', 1)));
  $addShape_0(ge, new CFShape_1(this$static.bnds, ($clinit_CFFill() , TRANSPARENT_0), null), this$static);
  $addGraphicElement_0(this$static.legend, ge);
}

function $drawScrollUp(this$static){
  var ge, path;
  ge = new GraphicElement;
  path = new CFPath;
  if (this$static.bnds.width_0 > this$static.bnds.height_0) {
    $add(path, new CFPathElement_0(0, this$static.bnds.x_0 + 30, this$static.bnds.y_0 + 5));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 35, this$static.bnds.y_0));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 40, this$static.bnds.y_0 + 5));
  }
   else {
    $add(path, new CFPathElement_0(0, this$static.bnds.x_0 + 5, $getCenterY(this$static.bnds) - 5));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0, $getCenterY(this$static.bnds)));
    $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 5, $getCenterY(this$static.bnds) + 5));
  }
  path.shouldAntiAlias = true;
  $addShape(ge, new CFShape_0(path, null, new CFStroke_1('#000000', 1)));
  $addShape_0(ge, new CFShape_1(this$static.bnds, ($clinit_CFFill() , TRANSPARENT_0), null), this$static);
  $addGraphicElement_0(this$static.legend, ge);
}

function $drawSingleLineLegendItem(this$static, sLegend){
  var baseLineOffset, ge, legFont, markerBnds, textMarkerOffset, ti, top_0;
  ge = new GraphicElement;
  legFont = $getLegendFont(this$static);
  baseLineOffset = $getCapHeightInt(legFont, this$static.legend.component.rnd);
  top_0 = this$static.bnds.y_0;
  $addShapeOverLegendItem(this$static, ge);
  markerBnds = new CFRect(this$static.bnds.x_0, top_0 + baseLineOffset - (this$static.legend.markerSize + 1), this$static.legend.markerSize, this$static.legend.markerSize);
  !!this$static.colInfo && (this$static.colInfo.hidden || this$static.colInfo.showAsFiltered)?$addMarker(this$static, ge, markerBnds, true, sLegend, null):$addMarker(this$static, ge, markerBnds, false, sLegend, null);
  textMarkerOffset = this$static.legend.markerSize + sLegend.markerTextMargin;
  (this$static.type_0 == 5 || this$static.type_0 == 9) && (textMarkerOffset = 0);
  !this$static.textInfo && ($clinit_System() , out_0);
  ti = new CFTextItem_0(this$static.textInfo.singleLine, legFont, round_int(this$static.bnds.x_0 + textMarkerOffset), round_int(top_0) + baseLineOffset + sLegend.textMarkerYOffset);
  !ge.textAry && (ge.textAry = new ArrayList);
  $add_1(ge.textAry, ti);
  this$static.type_0 == 5 && (this$static.legend.moreTextItem = ti);
  $addGraphicElement_0(this$static.legend, ge);
  return ge;
}

function $drawWrappedLineLegendItem(this$static, sLegend){
  var baseLineOffset, ge, isHiddenColumn, legFont, line, line$iterator, lineHeight, markerBnds, markerDrawn, textMarkerOffset, ti, top_0;
  ge = new GraphicElement;
  if (this$static.textInfo) {
    legFont = $getLegendFont(this$static);
    lineHeight = this$static.textInfo.textDimension.height_0 / this$static.textInfo.wrappedLines.array.length;
    baseLineOffset = $getCapHeightInt(legFont, this$static.legend.component.rnd);
    top_0 = this$static.bnds.y_0;
    markerDrawn = false;
    for (line$iterator = new ArrayList$1(this$static.textInfo.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      $addShapeOverLegendItem(this$static, ge);
      if (!markerDrawn) {
        markerBnds = new CFRect(this$static.bnds.x_0, top_0 + baseLineOffset - (this$static.legend.markerSize + 1), this$static.legend.markerSize, this$static.legend.markerSize);
        isHiddenColumn = !!this$static.colInfo && (this$static.colInfo.hidden || this$static.colInfo.showAsFiltered);
        $addMarker(this$static, ge, markerBnds, isHiddenColumn, sLegend, null);
        markerDrawn = true;
      }
      textMarkerOffset = this$static.legend.markerSize + sLegend.markerTextMargin;
      (this$static.type_0 == 5 || this$static.type_0 == 9) && (textMarkerOffset = 0);
      ti = new CFTextItem_0(line, legFont, round_int(this$static.bnds.x_0 + textMarkerOffset), round_int(top_0) + baseLineOffset + sLegend.textMarkerYOffset);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, ti);
      this$static.type_0 == 5 && (this$static.legend.moreTextItem = ti);
      top_0 += lineHeight;
    }
    $addGraphicElement_0(this$static.legend, ge);
  }
  return ge;
}

function $getCardBusHighlightFilter(this$static){
  var colDataSourceId, columnHeader, columnName, filter, filterBase;
  if (this$static.colInfo) {
    columnHeader = this$static.colInfo.parentName;
    columnName = $getName(this$static.colInfo);
    colDataSourceId = $getDataSourceId(this$static.colInfo);
    if (columnHeader != null && columnName != null && colDataSourceId != null) {
      filterBase = new FilterBase(columnHeader, 'EQUALS', this$static.colInfo);
      !filterBase.values && (filterBase.values = new ArrayList);
      $add_1(filterBase.values, columnName);
      !!this$static.legend && !!this$static.legend.component && !!this$static.legend.component.data_0 && $setDataJoinColumn(filterBase, this$static.legend.component.data_0.dateJoinColumn);
      $setFiscal(filterBase, this$static.legend.component.data_0.isFiscalCalendar);
      filter = getDrillFilterFromValues(filterBase);
      return $clinit_StrUtil() , getDrillFilterFromFilters(filter, null);
    }
  }
  return null;
}

function $getHoverRegionBnds(this$static, bnds){
  var halfVMargin, horzExtra;
  halfVMargin = 0;
  horzExtra = 0;
  if (!!this$static.legend && instanceOf(this$static.legend, 66)) {
    halfVMargin = castTo(this$static.legend, 66).vertSpaceBetweenItems / 2;
    horzExtra = castTo(this$static.legend, 66).horzSpaceBetweenItems;
  }
  if (halfVMargin != 0)
    return new CFRect(bnds.x_0, bnds.y_0 - halfVMargin, bnds.width_0 + horzExtra, bnds.height_0 + 2 * halfVMargin);
  return bnds;
}

function $getItemText(this$static){
  if (instanceOf(this$static.legend, 66))
    return $getLegendItemText(castTo(this$static.legend, 66), this$static.colInfo, this$static.text_0);
  return this$static.text_0;
}

function $getLegendFill(this$static, isHiddenOverlay){
  var legFill;
  legFill = this$static.fill_0;
  if (isHiddenOverlay && !!legFill) {
    legFill = $duplicate_1(legFill);
    $setColor_0(legFill, ($clinit_CFColor() , WHITE));
  }
   else 
    !!this$static.legend.component && instanceOf(this$static.legend.component, 43) && castTo(this$static.legend.component, 43).outlineStyle && !!this$static.fill_0 && (legFill = getOutlineFill(legFill));
  return legFill;
}

function $getLegendFont(this$static){
  var legFont;
  legFont = this$static.legend.font_0;
  if (!!this$static.colInfo && this$static.colInfo.hidden) {
    legFont = $duplicate_2(legFont);
    $setColor_1(legFont, $getTextColor(this$static.legend.chart.palette));
  }
  return legFont;
}

function $getLegendStroke(this$static, isHiddenOverlay){
  var legStroke;
  legStroke = $getStroke(this$static);
  if (isHiddenOverlay) {
    if (legStroke) {
      legStroke = $duplicate_7(legStroke);
      $setColor_2(legStroke, ($clinit_CFColor() , DISABLED_DARK_GRAY));
    }
     else 
      legStroke = new CFStroke(($clinit_CFColor() , DISABLED_DARK_GRAY), 2);
  }
   else 
    !!this$static.legend.component && instanceOf(this$static.legend.component, 43) && castTo(this$static.legend.component, 43).outlineStyle && !!this$static.fill_0 && (legStroke = getOutlineStroke(this$static.fill_0, legStroke));
  return legStroke;
}

function $getStroke(this$static){
  var retStroke;
  retStroke = this$static.stroke_0;
  if (this$static.type_0 == 2 && !!this$static.stroke_0 && this$static.stroke_0.width_0 > 2) {
    retStroke = $duplicate_7(this$static.stroke_0);
    retStroke.width_0 = 2;
  }
  return retStroke;
}

function $getTextDimensions(this$static, rnd, textAreaWidth, wrapText){
  var dim, text_0;
  if (wrapText && !this$static.textInfo) {
    this$static.textInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, $getItemText(this$static), this$static.legend.font_0, textAreaWidth, -1, -1));
    return this$static.textInfo.textDimension;
  }
   else {
    text_0 = $getItemText(this$static);
    dim = rnd.measureText_0(text_0, this$static.legend.font_0);
    this$static.textInfo = new TextInfo(text_0, dim);
    return dim;
  }
}

function $getTextDimensionsTruncated(this$static, rnd, textAreaWidth){
  var truncatedText;
  truncatedText = truncateString(rnd, $getItemText(this$static), textAreaWidth, this$static.legend.font_0);
  this$static.textInfo = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, truncatedText, this$static.legend.font_0, textAreaWidth, -1, -1));
  return this$static.textInfo.textDimension;
}

function $setBounds_2(this$static, bnds){
  this$static.bnds = bnds;
}

function $setVariableMarkerSize(this$static, size_0){
  this$static.variableMarkerSize = size_0;
}

function LegendItemInfo(legend, type_0, bnds){
  $$init_9(this);
  this.legend = legend;
  this.type_0 = type_0;
  this.bnds = bnds;
}

function LegendItemInfo_0(legend, colInfo, fill, stroke){
  $$init_9(this);
  this.legend = legend;
  this.colInfo = colInfo;
  this.fill_0 = fill;
  this.stroke_0 = stroke;
}

function LegendItemInfo_1(legend, text_0, fill, stroke){
  $$init_9(this);
  this.legend = legend;
  this.text_0 = text_0;
  this.fill_0 = fill;
  this.stroke_0 = stroke;
}

defineClass(37, 1, {37:1}, LegendItemInfo, LegendItemInfo_0, LegendItemInfo_1);
_.isTemporary = false;
_.symbolType = 0;
_.type_0 = 0;
_.variableMarkerSize = 0;
var Lcom_domo_charting_graphs_LegendItemInfo_2_classLit = createForClass('com.domo.charting.graphs', 'LegendItemInfo', 37);
function LegendMapArea(chart, name_0, map_0){
  $clinit_Legend();
  Legend.call(this, chart, name_0, map_0);
  this.map_0 = map_0;
  this.position = 1;
  this.markerSize = 15;
  this.showWithOneSeries = true;
}

defineClass(197, 66, {23:1, 63:1, 66:1, 104:1, 197:1}, LegendMapArea);
_.freeResources = function freeResources_35(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.spaceDim = null;
  this.map_0 = null;
}
;
_.getLegendColumns = function getLegendColumns_2(){
  var i, legendCols, numRanges, range, rangeCol, ranges;
  numRanges = this.map_0.rangeValues.array.length;
  ranges = this.map_0.ranges_0;
  legendCols = new ArrayList;
  for (i = 0; i < ranges.array.length && i < numRanges; i++) {
    range = (checkCriticalElementIndex(i, ranges.array.length) , castTo(ranges.array[i], 58));
    rangeCol = new ColRowInfo;
    $setName(rangeCol, range.text_0);
    $setCurIndex(rangeCol, $indexOf_1(ranges, range, 0));
    legendCols.array[legendCols.array.length] = rangeCol;
  }
  return legendCols;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_5(legend, colInfo){
  var index_0, ranges;
  ranges = this.map_0.ranges_0;
  if (colInfo) {
    index_0 = colInfo.curIndex;
    return new LegendItemInfo_0(legend, colInfo, new CFFill($duplicate_0((checkCriticalElementIndex(index_0, ranges.array.length) , castTo(ranges.array[index_0], 58)).color_0)), null);
  }
  return null;
}
;
_.handleClickInLegendItemInfo = function handleClickInLegendItemInfo_0(shapeClicked, graph, usingCardBus, liiClicked){
  var colInfo;
  if (instanceOf(this.map_0, 144))
    return $handleClickInLegendItemInfo_0(this, shapeClicked, graph, usingCardBus, liiClicked);
  colInfo = liiClicked.colInfo;
  if (!!liiClicked && !!colInfo && usingCardBus)
    return $handleClickInLegendItemInfo(this.map_0, liiClicked, true);
  else 
    this.drillFilter = $getDrillFilterFromLegendItemInfo(this.map_0, liiClicked);
  return false;
}
;
_.setDrillFilter = function setDrillFilter_2(shape_0, clicked){
  var dataObject;
  dataObject = $getDataObjectForShape_0(this.map_0, shape_0);
  !!shape_0 && dataObject != null && instanceOf(dataObject, 37)?(this.drillFilter = $getDrillFilterFromLegendItemInfo(this.map_0, castTo(dataObject, 37))):!!shape_0 && shape_0.drillFilter != null && (this.drillFilter = shape_0.drillFilter);
}
;
var Lcom_domo_charting_graphs_LegendMapArea_2_classLit = createForClass('com.domo.charting.graphs', 'LegendMapArea', 197);
function LegendMapLatLongSize(chart, map_0, position){
  $clinit_Legend();
  Legend.call(this, chart, 'size_legend', map_0);
  this.map_0 = map_0;
  this.position = position;
  this.font_0 = new CFFont_0(null, 14, $getTextColor(map_0.chart.palette));
  this.showWithOneSeries = true;
}

defineClass(125, 66, {23:1, 63:1, 66:1, 104:1, 125:1}, LegendMapLatLongSize);
_.formatBottomTopLegend = function formatBottomTopLegend_0(rnd){
  var maxWidth, top_0;
  this.legendItems.size_1() > this.maxItemsToDisplay + 1 && (this.legendItems = this.legendItems.subList(0, this.maxItemsToDisplay));
  maxWidth = $getMaxWidthBottomLegend(this, rnd, this.legendItems, false);
  if (this.chart.mobile) {
    this.percentLegendWidthOfTotalWidth = 0.9;
    this.maxRowsBeforeWrap = 10;
  }
  this.numCols = $getNumColsForMaxWidth(this, rnd, maxWidth, this.bnds.width_0 - this.bottomTopLegendMargin * 2, this.legendItems);
  this.position == 1?(top_0 = this.bnds.y_0 + this.compLegendMargin):(top_0 = this.bnds.y_0 + 2);
  $setBottomLegendItemBounds(this, rnd, this.bnds.x_0 + this.bottomTopLegendMargin, top_0, this.bnds.width_0 - this.bottomTopLegendMargin * 2);
}
;
_.freeResources = function freeResources_36(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.spaceDim = null;
  this.map_0 = null;
}
;
_.getLegendColumns = function getLegendColumns_3(){
  var maxMarkerSize, newLegendCols, numberFormatter, rangeCol, ranges, rng, rng$iterator, rngText, valCol;
  if (!this.legendCols) {
    newLegendCols = new ArrayList;
    ranges = this.map_0.ranges;
    valCol = $getValueColFromRow(this.component.data_0, $getRow(this.component.data_0, 0));
    numberFormatter = this.component.numberFormatter;
    if (!!valCol && !valCol.format) {
      numberFormatter = new NumberFormatter_1(this.component.chart.locale);
      numberFormatter.autoAbbreviate = true;
      numberFormatter.needsNewNumFormat = true;
    }
     else 
      this.forceAutoAbbreviate && (numberFormatter.autoAbbreviate = true , numberFormatter.needsNewNumFormat = true);
    maxMarkerSize = 0;
    if (ranges) {
      for (rng$iterator = new ArrayList$1(ranges); rng$iterator.i < rng$iterator.this$01.array.length;) {
        rng = castTo($next_3(rng$iterator), 134);
        rngText = $getLegendText(rng, numberFormatter);
        rangeCol = new ColRowInfo;
        rangeCol.name_0 = rngText;
        $setSum(rangeCol, rng.bubbleSize);
        $setCurIndex(rangeCol, $indexOf_1(ranges, rng, 0));
        newLegendCols.array[newLegendCols.array.length] = rangeCol;
        rng.bubbleSize > maxMarkerSize && (maxMarkerSize = rng.bubbleSize);
      }
      $setMarkerSize(this, toInt_0(fromDouble_0($wnd.Math.round(maxMarkerSize))));
    }
    this.legendCols = newLegendCols;
  }
  return this.legendCols;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_6(legend, colInfo){
  var fillColor, lii;
  if (colInfo) {
    fillColor = $getFillColorForSeries(this.map_0, null);
    $getSeriesNameCount(this.map_0) > 0 && (fillColor = new CFColor_2('#CDCDCD'));
    lii = new LegendItemInfo_0(legend, colInfo, new CFFill(fillColor), null);
    $setVariableMarkerSize(lii, (isNaN_0(colInfo.sum) && (colInfo.sum = $calcSum(colInfo, false, true, false)) , colInfo.sum));
    lii.type_0 = 4;
    return lii;
  }
  return null;
}
;
_.forceAutoAbbreviate = false;
var Lcom_domo_charting_graphs_LegendMapLatLongSize_2_classLit = createForClass('com.domo.charting.graphs', 'LegendMapLatLongSize', 125);
function LegendMapLatLongSrs(chart, map_0, position){
  $clinit_Legend();
  Legend.call(this, chart, 'srs_legend', map_0);
  this.map_0 = map_0;
  this.position = position;
  this.font_0 = new CFFont_0(null, 14, $getTextColor(map_0.chart.palette));
}

defineClass(208, 66, $intern_43, LegendMapLatLongSrs);
_.freeResources = function freeResources_37(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.spaceDim = null;
  this.map_0 = null;
}
;
_.getLegendColumns = function getLegendColumns_4(){
  var grid, legendCols;
  legendCols = new ArrayList;
  grid = this.map_0.seriesLegendDataGrid;
  !!grid && (legendCols = grid.rows_0);
  return legendCols;
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_7(legend, colInfo){
  var fillColor, lii;
  if (colInfo) {
    fillColor = $getFillColorForSeries(this.map_0, $getName(colInfo));
    lii = new LegendItemInfo_0(legend, colInfo, new CFFill(fillColor), null);
    lii.type_0 = 3;
    lii.symbolType = 1;
    return lii;
  }
  return null;
}
;
var Lcom_domo_charting_graphs_LegendMapLatLongSrs_2_classLit = createForClass('com.domo.charting.graphs', 'LegendMapLatLongSrs', 208);
function $$init_10(this$static){
  this$static.lineStroke = new CFStroke(($clinit_CFColor() , DISABLED_LIGHT_GRAY), 1);
  this$static.leftMargin = 2;
  this$static.totalValue = 0;
}

function $addLegendMarker(this$static, itemBnds, markerYOffset, isOtherOrMoreItem, fill, stroke, geLegItem, isOtherHvrLegend, row, isOther){
  var funnelPath, marker;
  if (isOtherHvrLegend && isOtherOrMoreItem)
    return;
  if (!!this$static.graph && this$static.graph.graphType == 13) {
    if (!isOtherOrMoreItem) {
      funnelPath = new CFPath_7('m 0,0; l 100,0; q 70,60,70,140; l 30,140; q 30,60,0,0; z ;');
      $scaleAndPositionToRect(funnelPath, new CFRect(itemBnds.x_0, itemBnds.y_0 + markerYOffset, this$static.markerSize, this$static.markerSize));
      row.hidden?(marker = new CFShape_0(funnelPath, new CFFill(($clinit_CFColor() , WHITE)), new CFStroke(fill.color_0, 1))):(marker = new CFShape_0(funnelPath, fill, stroke));
      !geLegItem.shapeAry && (geLegItem.shapeAry = new ArrayList);
      $add_1(geLegItem.shapeAry, marker);
    }
  }
   else if (!!this$static.graph && (this$static.graph.graphType == 22 || this$static.graph.graphType == 27)) {
    marker = new CFShape_0(new CFPath_3(new CFRect(itemBnds.x_0, itemBnds.y_0 + markerYOffset, this$static.markerSize, this$static.markerSize)), fill, null);
    !geLegItem.shapeAry && (geLegItem.shapeAry = new ArrayList);
    $add_1(geLegItem.shapeAry, marker);
  }
   else {
    !!this$static.graph && this$static.graph.outlineStyle && (fill = getOutlineFill(fill));
    if (!isOtherOrMoreItem || isOther) {
      row.hidden?(marker = new CFShape_0(new CFPath_0(itemBnds.x_0, itemBnds.y_0 + markerYOffset, this$static.markerSize), new CFFill(($clinit_CFColor() , WHITE)), new CFStroke(fill.color_0, 1))):(marker = new CFShape_0(new CFPath_0(itemBnds.x_0, itemBnds.y_0 + markerYOffset, this$static.markerSize), fill, stroke));
      !geLegItem.shapeAry && (geLegItem.shapeAry = new ArrayList);
      $add_1(geLegItem.shapeAry, marker);
    }
  }
  isOtherOrMoreItem && (this$static.otherFill = fill);
}

function $addOtherHeader(this$static, baseLineOffset, lineStroke, ge, itemBnds){
  var geLegItem, hdrFont, hdrLine, line, nameTextItem;
  if (this$static.valueDisplayType != 2) {
    hdrLine = new CFShape_0(new CFPath_1(itemBnds.x_0, itemBnds.y_0, itemBnds.x_0 + itemBnds.width_0, itemBnds.y_0), null, lineStroke);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, hdrLine);
  }
  geLegItem = new GraphicElement;
  hdrFont = $duplicate_2(this$static.font_0);
  hdrFont.face_0 = 1;
  nameTextItem = new CFTextItem_0(this$static.component.getLocalizedString('CATEGORIES_IN_OTHER'), hdrFont, round_int(itemBnds.x_0), round_int(itemBnds.y_0) + baseLineOffset);
  !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
  $add_1(geLegItem.textAry, nameTextItem);
  $offset(itemBnds, 0, $getAdjustedLineHeight(this$static));
  if (this$static.valueDisplayType == 2) {
    line = new CFShape_0(new CFPath_1(itemBnds.x_0, itemBnds.y_0, itemBnds.x_0 + itemBnds.width_0, itemBnds.y_0), null, lineStroke);
    !geLegItem.shapeAry && (geLegItem.shapeAry = new ArrayList);
    $add_1(geLegItem.shapeAry, line);
  }
  this$static.geAry.add_0(geLegItem);
}

function $addOtherMoreTextItems(this$static, rnd, data_0, index_0, baseLineOffset, itemBnds, geLegItem, isOtherHvrLegend){
  var dim, itemsBeforeOther, nameTextItem, numMoreItems, valTextLeft, valuePctStr, valueStr, valueTextItem, value_0;
  itemsBeforeOther = $getItemsBeforeOther(this$static);
  if (isOtherHvrLegend) {
    nameTextItem = new CFTextItem_0('' + ($getNumOtherRows(this$static) - this$static.itemsInOtherHover) + ' ' + this$static.component.getLocalizedString('MORE_ITEMS'), this$static.font_0, round_int(itemBnds.x_0), round_int(itemBnds.y_0) + baseLineOffset);
    !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
    $add_1(geLegItem.textAry, nameTextItem);
  }
   else {
    if (!$isFunnelOrMap(this$static)) {
      valueStr = (value_0 = $getOtherValue_0(this$static, data_0) , '' + $formatNumber_0(this$static, value_0));
      valuePctStr = $getOtherValuePctOfTotalStr(this$static, data_0);
      this$static.showPercentOfTotal && this$static.valueDisplayType != 1 && (valueStr = valuePctStr);
      if (index_0 == itemsBeforeOther && !$getRow(data_0, itemsBeforeOther).hidden && (this$static.valueDisplayType != 2 || this$static.isSingleLineHoverLegend)) {
        if (this$static.valueDisplayType == 1) {
          dim = rnd.measureText_0(valuePctStr, this$static.font_0);
          valueTextItem = new CFTextItem_0(valuePctStr, this$static.font_0, toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0 - dim.width_0))), round_int(itemBnds.y_0) + baseLineOffset);
          !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
          $add_1(geLegItem.textAry, valueTextItem);
          this$static.isSingleLineHoverLegend && (this$static.pctAreaWidth = dim.width_0 + dim.height_0);
        }
        dim = rnd.measureText_0(valueStr, this$static.font_0);
        valTextLeft = toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0 - (dim.width_0 + this$static.pctAreaWidth))));
        valueTextItem = new CFTextItem_0(valueStr, this$static.font_0, valTextLeft, round_int(itemBnds.y_0) + baseLineOffset);
        !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
        $add_1(geLegItem.textAry, valueTextItem);
      }
    }
    nameTextItem = new CFTextItem_0(this$static.component.getLocalizedString('OTHER'), this$static.font_0, round_int(itemBnds.x_0) + 18, round_int(itemBnds.y_0) + baseLineOffset);
    if (!this$static.isSingleLineHoverLegend && index_0 != itemsBeforeOther) {
      numMoreItems = $getNumRows(data_0) - index_0;
      itemsBeforeOther - index_0 < numMoreItems && (numMoreItems = itemsBeforeOther - index_0 + 1);
      nameTextItem = new CFTextItem_0('' + numMoreItems + ' ' + this$static.component.getLocalizedString('MORE_ITEMS'), this$static.font_0, round_int(itemBnds.x_0), round_int(itemBnds.y_0) + baseLineOffset);
    }
    !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
    $add_1(geLegItem.textAry, nameTextItem);
  }
}

function $addScrollUpIndicator(this$static, top_0, left){
  var ge, hoverRect, path, scrollColor;
  ge = new GraphicElement;
  path = new CFPath;
  $add(path, new CFPathElement_0(0, left + 10, top_0 - 4));
  $add(path, new CFPathElement_0(1, left + 15, top_0 - 9));
  $add(path, new CFPathElement_0(1, left + 20, top_0 - 4));
  path.shouldAntiAlias = true;
  hoverRect = new CFRect(left, top_0 - 10, 30, 10);
  scrollColor = new CFColor_2('#000000');
  !!$getTextColor(this$static.graph.chart.palette) && (scrollColor = $getTextColor(this$static.graph.chart.palette));
  $addShape(ge, new CFShape_0(path, null, new CFStroke(scrollColor, 1)));
  $addShape_0(ge, new CFShape_1(hoverRect, ($clinit_CFFill() , TRANSPARENT_0), null), this$static);
  this$static.scrollUpItem = ge;
  ge.dataObject = ge;
  this$static.geAry.add_0(ge);
}

function $addSeriesTextItem(this$static, rnd, baseLineOffset, itemBnds, pctAreaWidth, dataIndex, cell, geLegItem, isOtherHvrLegend){
  var dim, nameText, nameTextItem, valTextLeft, valuePctStr, valueStr, valueTextItem, valuePct, valuePctStr_0, suffixlength;
  valTextLeft = toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0)));
  if (!!cell.row && !cell.row.hidden && (this$static.valueDisplayType != 2 || this$static.isSingleLineHoverLegend)) {
    valueStr = $formatNumber_0(this$static, cell.value_0);
    valuePctStr = (valuePct = $getPctOfAbsoluteVisibleColOrigValue(cell) * 100 , this$static.showPercentOfPrevious && (valuePct = $getPercentOfPreviousVal_0(this$static, dataIndex)) , valuePctStr_0 = '' + $formatPercentNumber(this$static.numberFormatter, valuePct, false) , this$static.isSingleLineHoverLegend && (valuePctStr_0 = '' + $formatPercentNumber(this$static.component.numberFormatter, valuePct, false)) , suffixlength = '%'.length , !$equals_2(valuePctStr_0.substr(valuePctStr_0.length - suffixlength, suffixlength), '%') && valuePctStr_0.length > 0 && (valuePctStr_0 += '%') , valuePctStr_0);
    !isOtherHvrLegend && !!cell.row && cell.row.isOtherRow && (valuePctStr = $getOtherValuePctOfTotalStr(this$static, $getDataGrid(this$static)));
    this$static.showPercentOfTotal && this$static.valueDisplayType != 1 && (valueStr = valuePctStr);
    if (this$static.valueDisplayType == 1) {
      dim = rnd.measureText_0(valuePctStr, this$static.font_0);
      valueTextItem = new CFTextItem_0(valuePctStr, this$static.font_0, toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0 - dim.width_0))), round_int(itemBnds.y_0) + baseLineOffset);
      !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
      $add_1(geLegItem.textAry, valueTextItem);
      this$static.isSingleLineHoverLegend && (pctAreaWidth = dim.width_0 + dim.height_0);
    }
    dim = rnd.measureText_0(valueStr, this$static.font_0);
    valTextLeft = toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0 - (dim.width_0 + pctAreaWidth))));
    valueTextItem = new CFTextItem_0(valueStr, this$static.font_0, valTextLeft, round_int(itemBnds.y_0) + baseLineOffset);
    !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
    $add_1(geLegItem.textAry, valueTextItem);
  }
  nameText = truncateString(rnd, $getRowName(cell), valTextLeft - (itemBnds.x_0 + 23), this$static.font_0);
  nameTextItem = new CFTextItem_0(nameText, this$static.font_0, round_int(itemBnds.x_0) + 18, round_int(itemBnds.y_0) + baseLineOffset);
  !geLegItem.textAry && (geLegItem.textAry = new ArrayList);
  $add_1(geLegItem.textAry, nameTextItem);
}

function $format_3(this$static, rnd){
  this$static.rnd = rnd;
  this$static.map_0?(this$static.valueDisplayType = 0):!!this$static.graph && this$static.graph.graphType == 13 && (this$static.valueDisplayType = 1);
  $processChartOptions_11(this$static);
  if (!!this$static.component && this$static.component.needsFormat)
    return;
  $formatLegend(this$static, $getItemsBeforeOther(this$static), false);
  this$static.needsFormat = false;
}

function $formatLegend(this$static, itemsBeforeOther, isOtherHvrLegend){
  var adjustedLeftMargin, adjustedLineHeight, cell, curIndex, curRow, data_0, dataIndex, fill, ge, geLegItem, hoverRect, i, inShowAsFilteredMode, isOtherOrMoreItem, itemBnds, itemsToDisplay, left, line, numRowsWithData, pctDim, showAsFiltered, ssi, stroke, tmpSSI, top_0, totalHeight;
  inShowAsFilteredMode = $usingCardBus(this$static.chart);
  adjustedLineHeight = $getAdjustedLineHeight(this$static);
  adjustedLeftMargin = this$static.leftMargin;
  this$static.valueDisplayType == 2 && this$static.leftMargin == 2 && (adjustedLeftMargin = 20);
  this$static.baseLineOffset = toInt_0(fromDouble_0($wnd.Math.round(adjustedLineHeight * 0.66)));
  clearGraphicElementArray(this$static.geAry);
  ge = new GraphicElement;
  data_0 = $getDataGrid(this$static);
  if (!!this$static.component && !!data_0) {
    numRowsWithData = $getNumRows(data_0);
    numRowsWithData < itemsBeforeOther + 1 && (itemsBeforeOther = 100000);
    this$static.numberFormatter = new NumberFormatter_0(this$static.component.numberFormatter);
    this$static.valueDisplayType == 1 && $setUse3digitFormat(this$static.numberFormatter);
    this$static.maxLines = round_int((this$static.bnds.height_0 - 20) / adjustedLineHeight);
    isOtherHvrLegend && (this$static.maxLines = this$static.maxLines - 1);
    itemsToDisplay = $getItemsToDisplay(this$static, this$static.maxLines, numRowsWithData, itemsBeforeOther, isOtherHvrLegend);
    this$static.isSingleLineHoverLegend && itemsToDisplay < 1 && (itemsToDisplay = 1);
    totalHeight = adjustedLineHeight * itemsToDisplay;
    isOtherHvrLegend && (totalHeight += adjustedLineHeight);
    totalHeight > this$static.bnds.height_0 && (totalHeight = this$static.maxLines * adjustedLineHeight);
    top_0 = round_int(this$static.bnds.y_0);
    this$static.vCentered && (top_0 += toInt_0(fromDouble_0($wnd.Math.round((this$static.bnds.height_0 - totalHeight) / 2))));
    left = round_int(this$static.bnds.x_0) + adjustedLeftMargin;
    itemBnds = new CFRect(left, top_0, this$static.bnds.width_0 - (adjustedLeftMargin + this$static.rightMargin), adjustedLineHeight);
    this$static.isSingleLineHoverLegend && $setupTotal(this$static, data_0, itemBnds);
    this$static.markerYOffset = toInt_0(fromDouble_0($wnd.Math.round((adjustedLineHeight - this$static.markerSize) / 2)));
    this$static.pctAreaWidth = 0;
    if (this$static.valueDisplayType == 1) {
      pctDim = this$static.rnd.measureText_0('55.5%', this$static.font_0);
      this$static.pctAreaWidth = pctDim.width_0 + pctDim.height_0;
    }
    isOtherHvrLegend && $addOtherHeader(this$static, this$static.baseLineOffset, this$static.lineStroke, ge, itemBnds);
    this$static.pageStartIndex < 0 && (this$static.pageStartIndex = 0);
    if (this$static.pageStartIndex == 0 && !!this$static.scrollUpItem) {
      this$static.geAry.remove(this$static.scrollUpItem);
      this$static.scrollUpItem = null;
    }
    i = this$static.pageStartIndex;
    isOtherHvrLegend && (i = itemsBeforeOther);
    curRow = $getRow(data_0, i);
    while (curRow) {
      dataIndex = curRow.origIndex;
      curIndex = curRow.curIndex;
      !!this$static.map_0 && (dataIndex = curIndex);
      isOtherOrMoreItem = false;
      !isOtherHvrLegend && i == this$static.pageStartIndex + itemsToDisplay - 1 && i < numRowsWithData - 1?(isOtherOrMoreItem = true):isOtherHvrLegend && i == itemsBeforeOther + this$static.maxLines - 2 && itemsBeforeOther + this$static.maxLines <= numRowsWithData && (isOtherOrMoreItem = true);
      cell = $getCell(data_0, dataIndex, $getCurrentColumn(this$static));
      if (i >= this$static.pageStartIndex + itemsToDisplay && !isOtherHvrLegend)
        break;
      else if (isOtherHvrLegend && i > itemsBeforeOther + this$static.maxLines - 2)
        break;
      if (this$static.valueDisplayType != 2) {
        line = new CFShape_0(new CFPath_1(itemBnds.x_0, itemBnds.y_0, itemBnds.x_0 + itemBnds.width_0, itemBnds.y_0), null, this$static.lineStroke);
        !ge.shapeAry && (ge.shapeAry = new ArrayList);
        $add_1(ge.shapeAry, line);
      }
      fill = null;
      stroke = null;
      showAsFiltered = inShowAsFilteredMode && curRow.showAsFiltered;
      if (this$static.graph) {
        fill = new CFFill($getColorForCellValueCategoryNameAndIndex(this$static.graph, cell, this$static.graph.data_0.valueColumnName, curIndex));
        showAsFiltered && (fill = new CFFill($deSaturateAndLighten(fill.color_0, 0.9, 0.4)));
        if (this$static.graph.outlineStyle) {
          fill = getOutlineFill(fill);
          stroke = getOutlineStroke(fill, null);
        }
      }
       else 
        !!this$static.map_0 && (fill = new CFFill($getFillColorForRow(this$static.map_0, curRow)));
      if (isOtherHvrLegend && !!this$static.otherFill) {
        fill = this$static.otherFill;
        if (this$static.graph.outlineStyle) {
          fill = getOutlineFill(fill);
          stroke = getOutlineStroke(fill, stroke);
        }
      }
      geLegItem = new GraphicElement;
      $addLegendMarker(this$static, itemBnds, this$static.markerYOffset, isOtherOrMoreItem, fill, stroke, geLegItem, isOtherHvrLegend, curRow, i == itemsBeforeOther);
      if (isOtherOrMoreItem) {
        $addOtherMoreTextItems(this$static, this$static.rnd, data_0, i, this$static.baseLineOffset, itemBnds, geLegItem, isOtherHvrLegend);
        this$static.otherItemBnds = new CFRect(itemBnds.x_0, itemBnds.y_0, itemBnds.width_0, itemBnds.height_0);
        this$static.geOtherMoreItem = geLegItem;
      }
       else 
        $addSeriesTextItem(this$static, this$static.rnd, this$static.baseLineOffset, itemBnds, this$static.pctAreaWidth, dataIndex, cell, geLegItem, isOtherHvrLegend);
      if (!isOtherHvrLegend && !this$static.chart.includeJsonMap) {
        hoverRect = new CFShape_0(new CFPath_3(new CFRect(itemBnds.x_0, itemBnds.y_0 + 1, itemBnds.width_0, adjustedLineHeight)), new CFFill_1('#00000000'), null);
        ssi = $getShapeInfoForIndex(this$static, i);
        if (isOtherOrMoreItem && i != itemsBeforeOther) {
          $addShape_0(geLegItem, hoverRect, this$static.geOtherMoreItem);
        }
         else if (ssi) {
          $addShape_0(geLegItem, hoverRect, ssi);
        }
         else {
          tmpSSI = new SrsShapeInfo(cell, fill, null, null);
          tmpSSI.supportsDynamicFilter = true;
          $addShape_0(geLegItem, hoverRect, tmpSSI);
        }
      }
      this$static.geAry.add_0(geLegItem);
      itemBnds.x_0 = itemBnds.x_0;
      itemBnds.y_0 = itemBnds.y_0 + adjustedLineHeight;
      ++i;
      curRow = $getRow(data_0, i);
    }
    if (this$static.valueDisplayType != 2) {
      line = new CFShape_0(new CFPath_1(itemBnds.x_0, itemBnds.y_0, itemBnds.x_0 + itemBnds.width_0, itemBnds.y_0), null, this$static.lineStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, line);
    }
    this$static.pageStartIndex > 0 && !isOtherHvrLegend && $addScrollUpIndicator(this$static, top_0, round_int(itemBnds.x_0));
  }
  this$static.geAry.add_1(0, ge);
  if (this$static.isSingleLineHoverLegend) {
    clearGraphicElementArray(this$static.geAry);
    this$static.geAry.add_0(this$static.totalGE);
  }
}

function $getAdjustedLineHeight(this$static){
  var adjLineHeight;
  adjLineHeight = this$static.lineHeight;
  this$static.valueDisplayType == 2 && (this$static.markerSize == 6?(adjLineHeight = this$static.lineHeight - 3):(adjLineHeight = this$static.lineHeight - 6));
  return adjLineHeight;
}

function $getCurrentColumn(this$static){
  if (this$static.graph)
    return this$static.graph.currentColumn;
  return 0;
}

function $getDataGrid(this$static){
  if (this$static.graph)
    return this$static.graph.data_0;
  else if (this$static.map_0)
    return this$static.map_0.seriesLegendDataGrid;
  return null;
}

function $getItemsBeforeOther(this$static){
  if ($isFunnelOrMap(this$static))
    return 50000;
  return this$static.itemsBeforeOther;
}

function $getItemsToDisplay(this$static, maxItems, numRowsWithData, itemsBeforeOther, isOtherHvrLegend){
  var itemsToDisplay, numOtherVisibleRows, totalNumItemsToDisplay;
  if (isOtherHvrLegend) {
    itemsToDisplay = maxItems - 1;
    numOtherVisibleRows = $getNumOtherRows(this$static);
    numOtherVisibleRows < itemsToDisplay && (itemsToDisplay = numOtherVisibleRows);
    return itemsToDisplay;
  }
   else {
    totalNumItemsToDisplay = numRowsWithData;
    itemsBeforeOther != 100000 && (totalNumItemsToDisplay = itemsBeforeOther + 1);
    this$static.pageStartIndex + maxItems > totalNumItemsToDisplay?(itemsToDisplay = totalNumItemsToDisplay - this$static.pageStartIndex):(itemsToDisplay = maxItems);
    return itemsToDisplay;
  }
}

function $getNumOtherRows(this$static){
  var numOther;
  numOther = $getNumRows(this$static.component.data_0) - $getItemsBeforeOther(this$static);
  numOther < 0 && (numOther = 0);
  return numOther;
}

function $getOtherValue_0(this$static, data_0){
  var itemsBeforeOther, otherValue;
  itemsBeforeOther = $getItemsBeforeOther(this$static);
  otherValue = $getOtherValue(data_0, itemsBeforeOther, $getCurrentColumn(this$static));
  return otherValue;
}

function $getOtherValuePctOfTotalStr(this$static, data_0){
  var suffixlength, totalValue, value_0, valueStr;
  value_0 = $getOtherValue_0(this$static, data_0);
  totalValue = $getGridTotal(data_0);
  value_0 = value_0 / totalValue * 100;
  valueStr = '' + $formatPercentNumber(this$static.numberFormatter, value_0, false);
  this$static.isSingleLineHoverLegend && (valueStr = '' + $formatPercentNumber(this$static.component.numberFormatter, value_0, false));
  suffixlength = '%'.length;
  !$equals_2(valueStr.substr(valueStr.length - suffixlength, suffixlength), '%') && valueStr.length > 0 && (valueStr += '%');
  return valueStr;
}

function $getPercentOfPreviousVal_0(this$static, index_0){
  var curValue, pctOfPrev, prevValue;
  pctOfPrev = 100;
  if (index_0 > 0) {
    prevValue = $getPreviousVisibleValue(this$static, index_0);
    if (!isNaN(prevValue)) {
      curValue = $getValue($getFirstCell($getRow($getDataGrid(this$static), index_0)));
      pctOfPrev = 100;
      prevValue != 0 && (pctOfPrev = curValue / prevValue * 100);
      pctOfPrev > 0 && $getFirstCell($getRow($getDataGrid(this$static), index_0)).value_0 < 0 && (pctOfPrev *= -1);
    }
  }
  return pctOfPrev;
}

function $getPreviousVisibleValue(this$static, index_0){
  var curIndex;
  curIndex = index_0 - 1;
  while (curIndex >= 0) {
    if (!$getRow($getDataGrid(this$static), curIndex).hidden) {
      return $getValue($getFirstCell($getRow($getDataGrid(this$static), curIndex)));
    }
    --curIndex;
  }
  return NaN;
}

function $getShapeInfoForIndex(this$static, index_0){
  var i, ssi;
  if (this$static.graph) {
    i = index_0;
    index_0 >= castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length && (i = castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList.array.length - 1);
    while (i >= 0) {
      ssi = castTo($get_2(castTo($get_2(this$static.graph.seriesShapes, 0), 19).srsShapeList, i), 18);
      if ($getCurRowIndex(ssi.cell) == index_0)
        return ssi;
      --i;
    }
  }
  return null;
}

function $handleClick_3(this$static, dataObj){
  if (dataObj != null && instanceOf(dataObj, 12)) {
    if (maskUndefined(dataObj) === maskUndefined(this$static.scrollUpItem)) {
      this$static.pageStartIndex -= this$static.maxLines - 2;
      this$static.pageStartIndex < 0 && (this$static.pageStartIndex = 0);
      this$static.needsFormat = true;
      return true;
    }
     else if (maskUndefined(dataObj) === maskUndefined(this$static.geOtherMoreItem)) {
      this$static.pageStartIndex = this$static.pageStartIndex + (this$static.maxLines - 2);
      this$static.needsFormat = true;
      return true;
    }
  }
  return false;
}

function $handleClickOnOtherInCardBusMode_0(this$static, rowInfo){
  var curIndex, dataGrid, newState, row;
  if (!!rowInfo && rowInfo.curIndex == this$static.itemsBeforeOther) {
    dataGrid = this$static.graph.data_0;
    curIndex = rowInfo.curIndex;
    row = $getRow(dataGrid, curIndex);
    newState = !row.showAsFiltered;
    while (curIndex < $getNumRows(dataGrid)) {
      row = $getRow(dataGrid, curIndex++);
      $setRowFilteredValue(dataGrid, newState, row);
    }
    dataGrid.hasFilteredRows = false;
    dataGrid.numFilteredRows > 0 && (dataGrid.hasFilteredRows = true);
    $setDrillFromDataBasedOnShowAsFiltered(this$static.graph, true);
    this$static.graph.setNeedsFormat(true);
    return true;
  }
  return false;
}

function $isFunnelOrMap(this$static){
  if (!!this$static.map_0 || !!this$static.graph && this$static.graph.graphType == 13)
    return true;
  return false;
}

function $processChartOptions_11(this$static){
  if (!!this$static.graph && this$static.graph.graphType == 13 && this$static.graph.chart.version_0 < 2) {
    this$static.showPercentOfTotal = true;
    this$static.showPercentOfPrevious = false;
  }
  $processChartOptions(this$static);
}

function $setShowPercentOfTotal(this$static, value_0){
  this$static.showPercentOfTotal = value_0;
}

function $setSmallerLegend(this$static){
  $setSize_0(this$static.font_0, 10);
  this$static.markerSize = 8;
  this$static.lineHeight = 21;
}

function $setSmallestLegend(this$static){
  $setSize_0(this$static.font_0, 9);
  this$static.markerSize = 6;
  this$static.lineHeight = 15;
}

function $setupTotal(this$static, data_0, itemBnds){
  var dim, formattedTotalValue, line, lineHeight, origTotal, totalNumberFormatter, totalTextItem, totalValueTextItem, valTextLeft;
  if (!data_0)
    return;
  totalNumberFormatter = new NumberFormatter_0(this$static.component.numberFormatter);
  this$static.totalValue = $getAbsoluteVisibleSum($getColumn(data_0, $getCurrentColumn(this$static)), $intern_21, false);
  origTotal = $getOriginalVisibleSum($getColumn(data_0, $getCurrentColumn(this$static)));
  origTotal < 0 && -origTotal == this$static.totalValue && (this$static.totalValue = origTotal);
  this$static.totalGE = new GraphicElement;
  lineHeight = $getLineHeight(this$static.font_0, this$static.rnd);
  totalTextItem = new CFTextItem_0(this$static.component.getLocalizedString('TOTAL'), this$static.font_0, round_int(itemBnds.x_0), round_int(itemBnds.y_0) + this$static.baseLineOffset);
  $addTextItem(this$static.totalGE, totalTextItem);
  formattedTotalValue = $formatNumber_1(totalNumberFormatter, origTotal);
  dim = this$static.rnd.measureText_0(formattedTotalValue, this$static.font_0);
  valTextLeft = toInt_0(fromDouble_0($wnd.Math.round(itemBnds.x_0 + itemBnds.width_0 - (dim.width_0 + this$static.pctAreaWidth))));
  totalValueTextItem = new CFTextItem_0(formattedTotalValue, this$static.font_0, valTextLeft, round_int(itemBnds.y_0) + this$static.baseLineOffset);
  $addTextItem(this$static.totalGE, totalValueTextItem);
  line = new CFShape_0(new CFPath_1(itemBnds.x_0, itemBnds.y_0 + lineHeight + 5, itemBnds.x_0 + itemBnds.width_0, itemBnds.y_0 + lineHeight + 5), null, this$static.lineStroke);
  $addShape(this$static.totalGE, line);
}

function LegendPie(chart, name_0, map_0){
  LegendBase.call(this, chart, name_0, map_0);
  $$init_10(this);
  this.map_0 = map_0;
  this.position = 2;
  this.lineHeight = 25;
}

function LegendPie_0(chart, graph){
  LegendBase.call(this, chart, 'legend', graph);
  $$init_10(this);
  this.graph = graph;
}

defineClass(65, 104, {23:1, 63:1, 104:1, 65:1}, LegendPie, LegendPie_0);
_.format_0 = function format_29(rnd){
  $format_3(this, rnd);
}
;
_.freeResources = function freeResources_38(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.graph = null;
  this.map_0 = null;
  this.otherItemBnds = null;
  this.geHoverItem = null;
  this.mainGEAry = null;
  this.otherFill = null;
  this.totalGE = null;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_8(x_0, y_0, rnd){
  if (!!this.graph && !$hasInteractions(this.graph))
    return null;
  return $getShapeUnderPoint_0(this, x_0, y_0, rnd);
}
;
_.handleClickOnSrsShapeInCardBusMode = function handleClickOnSrsShapeInCardBusMode_0(graph, rowInfo){
  if (instanceOf(graph.handler, 128) && $handleClickOnOtherInCardBusMode_0(this, rowInfo)) {
    this.drillFilter = graph.drillFilter;
    this.needsFormat = true;
    return;
  }
  $handleClickOnSrsShapeInCardBusMode(this, graph, rowInfo);
}
;
_.processChartOption = function processChartOption_2(key){
  var handled, value_0;
  handled = false;
  value_0 = $getChartOptionAsString(this, key);
  if ($equals_2(key, 'fnl_legend_pct')) {
    this.showPercentOfPrevious = $equals_2(value_0.toLowerCase(), 'percent of previous');
    handled = true;
  }
  if ($equals_2(key, 'fnl_display_in_legend')) {
    $equals_2(value_0.toLowerCase(), 'value and percentage')?(this.valueDisplayType = 1):(this.valueDisplayType = 0);
    this.showPercentOfTotal = $equals_2(value_0.toLowerCase(), 'percentage only');
    handled = true;
  }
  $equals_2(key, 'legend_summary') && $equals_2(value_0.toLowerCase(), 'none') && (this.valueDisplayType = 2);
  if (isTrue(this.component.getChartOptionAsString('legacy_funnel')) && this.component.chart.version_0 < 6) {
    this.valueDisplayType = 1;
    this.showPercentOfTotal = true;
    this.showPercentOfPrevious = false;
  }
  return handled;
}
;
_.reset_0 = function reset_7(){
  $reset_3(this);
  this.itemsBeforeOther = 12;
  this.itemsInOtherHover = 11;
  this.leftMargin = 2;
  this.rightMargin = 0;
}
;
_.setDrillFilter = function setDrillFilter_3(shape_0, clicked){
  var dataObject;
  dataObject = $getDataObjectForShape_0(this.graph, shape_0);
  if (!!shape_0 && dataObject != null && instanceOf(dataObject, 18) && !!this.graph) {
    this.graph.setDrillFilter(shape_0, clicked);
    this.drillFilter = this.graph.drillFilter;
  }
   else 
    this.drillFilter = null;
}
;
_.setHoverData = function setHoverData_24(data_0, rnd){
  if (!!this.graph && data_0 != null) {
    this.hoverFromLegend = true;
    return this.graph.setHoverData(data_0, rnd);
  }
  return false;
}
;
_.setHoverEffects = function setHoverEffects_17(hoverData, rnd){
  var actualIndex, curObjIsSelected, dataObj, ge, ge$iterator, grayFont, grayMarkerFill, grayMarkerStroke, hoverItemIndex, index_0, initPageStartIndex, itemsBeforeOther, line, lineHeight, shape_0, shape$iterator, shapeInfo, shapes, srsRectInfo, srsShapeInfo, textItem, textItem$iterator, textItems, whiteFont;
  if (hoverData != null && instanceOf(hoverData, 12))
    return;
  itemsBeforeOther = $getItemsBeforeOther(this);
  if (this.geHoverItem) {
    this.geAry.remove(this.geHoverItem);
    this.geHoverItem = null;
  }
  hoverData == null && !!this.totalGE && this.geAry.add_0(this.totalGE);
  if (this.mainGEAry) {
    this.geAry = this.mainGEAry;
    this.mainGEAry = null;
  }
  hoverItemIndex = -1;
  actualIndex = -1;
  instanceOf(hoverData, 18) && (actualIndex = $getCurRowIndex(castTo(hoverData, 18).cell));
  if (this.isSingleLineHoverLegend) {
    if (instanceOf(hoverData, 18)) {
      this.geAry.remove(this.totalGE);
      srsShapeInfo = castTo(hoverData, 18);
      lineHeight = $getLineHeight(this.font_0, rnd);
      this.geHoverItem = new GraphicElement;
      $addLegendMarker(this, this.bnds, this.markerYOffset, false, srsShapeInfo.fill_0, null, this.geHoverItem, false, srsShapeInfo.cell.row, actualIndex == itemsBeforeOther);
      srsShapeInfo.cell.row.curIndex == itemsBeforeOther && itemsBeforeOther > 0?$addOtherMoreTextItems(this, rnd, $getDataGrid(this), actualIndex, this.baseLineOffset, this.bnds, this.geHoverItem, false):!!this.graph && this.graph.graphType == 27?$addSeriesTextItem(this, rnd, this.baseLineOffset, this.bnds, this.pctAreaWidth, $getCurRowIndex(srsShapeInfo.cell), srsShapeInfo.cell, this.geHoverItem, false):$addSeriesTextItem(this, rnd, this.baseLineOffset, this.bnds, this.pctAreaWidth, $getOrigRowIndex(srsShapeInfo.cell), srsShapeInfo.cell, this.geHoverItem, false);
      line = new CFShape_0(new CFPath_1(this.bnds.x_0, this.bnds.y_0 + lineHeight + 5, $getRight(this.bnds), this.bnds.y_0 + lineHeight + 5), null, this.lineStroke);
      $addShape(this.geHoverItem, line);
      $addGraphicElement_0(this, this.geHoverItem);
    }
  }
   else {
    if (hoverData != null && instanceOf(hoverData, 132))
      return;
    if ($isFunnelOrMap(this)) {
      if (instanceOf(hoverData, 82)) {
        srsRectInfo = castTo(hoverData, 82);
        if ((actualIndex > itemsBeforeOther && this.hoverFromLegend || actualIndex >= itemsBeforeOther && !this.hoverFromLegend) && $getNumRowsWithData($getDataGrid(this), itemsBeforeOther + 3) > itemsBeforeOther + 1) {
          this.geHoverItem = new GraphicElement;
          $addLegendMarker(this, this.otherItemBnds, this.markerYOffset, false, srsRectInfo.fill_0, null, this.geHoverItem, false, srsRectInfo.cell.row, actualIndex == itemsBeforeOther);
          $addSeriesTextItem(this, rnd, this.baseLineOffset, this.otherItemBnds, this.pctAreaWidth, $getOrigRowIndex(srsRectInfo.cell), srsRectInfo.cell, this.geHoverItem, false);
          hoverItemIndex = $getCurRowIndex(srsRectInfo.cell);
          $addGraphicElement_0(this, this.geHoverItem);
        }
      }
    }
    if (!this.hoverFromLegend && hoverData != null) {
      initPageStartIndex = this.pageStartIndex;
      actualIndex > this.lastSelectedIndex && actualIndex >= this.pageStartIndex + this.maxLines - 1?(this.pageStartIndex = actualIndex - (this.maxLines - 2)):actualIndex < this.lastSelectedIndex && actualIndex < this.pageStartIndex && (this.pageStartIndex = actualIndex);
      this.pageStartIndex < 0 && (this.pageStartIndex = 0);
      this.pageStartIndex != initPageStartIndex && $format_3(this, rnd);
    }
    actualIndex != -1 && (this.lastSelectedIndex = actualIndex);
    grayMarkerFill = new CFFill(($clinit_CFColor() , DISABLED_LIGHT_GRAY));
    this.graph.outlineStyle && (grayMarkerFill = getOutlineFill(grayMarkerFill));
    grayMarkerStroke = new CFStroke(DISABLED_LIGHT_GRAY, 1);
    grayFont = $duplicate_2(this.font_0);
    $setColor_1(grayFont, DISABLED_LIGHT_GRAY);
    whiteFont = $duplicate_2(this.font_0);
    $setColor_1(whiteFont, WHITE);
    index_0 = 0;
    for (ge$iterator = this.geAry.iterator(); ge$iterator.hasNext_0();) {
      ge = castTo(ge$iterator.next_1(), 12);
      dataObj = $getDataObjectForGE_0(this.graph, ge);
      if (dataObj != null && instanceOf(dataObj, 18)) {
        curObjIsSelected = false;
        maskUndefined(dataObj) === maskUndefined(hoverData) && hoverData != null && (curObjIsSelected = true);
        shapeInfo = castTo(dataObj, 18);
        shapes = ge.shapeAry;
        for (shape$iterator = new ArrayList$1(shapes); shape$iterator.i < shape$iterator.this$01.array.length;) {
          shape_0 = castTo($next_3(shape$iterator), 6);
          if (!$fillIsColor(shape_0, TRANSPARENT)) {
            if (!!shapeInfo.cell && shapeInfo.cell.row.hidden) {
              curObjIsSelected || hoverData == null?$setStroke(shape_0, new CFStroke(shapeInfo.fill_0.color_0, 1)):(shape_0.stroke_0 = grayMarkerStroke);
            }
             else if ($usingCardBus(this.graph.chart) && this.graph.data_0.numFilteredRows > 0 && !!shapeInfo.cell) {
              shapeInfo.cell.row.showAsFiltered?$setFill(shape_0, $deSaturateAndLighten(shapeInfo.fill_0.color_0, 0.9, 0.4)):$setFill_0(shape_0, shapeInfo.fill_0);
            }
             else {
              if (curObjIsSelected || hoverData == null) {
                $setFill_0(shape_0, shapeInfo.fill_0);
                this.graph.outlineStyle && $setStroke(shape_0, getOutlineStroke(shapeInfo.fill_0, null));
              }
               else {
                shape_0.fill_0 = grayMarkerFill;
                this.graph.outlineStyle && (shape_0.stroke_0 = grayMarkerStroke);
              }
            }
          }
        }
        textItems = ge.textAry;
        for (textItem$iterator = new ArrayList$1(textItems); textItem$iterator.i < textItem$iterator.this$01.array.length;) {
          textItem = castTo($next_3(textItem$iterator), 26);
          hoverItemIndex != -1 && index_0 == this.geAry.size_1() - 2?(textItem.font_0 = whiteFont):maskUndefined(dataObj) !== maskUndefined(hoverData) && hoverData != null?(textItem.font_0 = grayFont):$setFont(textItem, this.font_0);
        }
      }
      ++index_0;
    }
    (!!this.graph && this.graph.graphType == 8 || this.graph.graphType == 9) && hoverData != null && instanceOf(hoverData, 71) && actualIndex == itemsBeforeOther && (this.hoverFromLegend || (this.mainGEAry = this.geAry , this.geAry = new ArrayList , $formatLegend(this, $getItemsBeforeOther(this), true) , undefined));
  }
  this.hoverFromLegend = false;
}
;
_.setNeedsFormat = function setNeedsFormat_6(value_0){
  this.needsFormat = value_0;
}
;
_.baseLineOffset = 0;
_.isSingleLineHoverLegend = false;
_.itemsBeforeOther = 0;
_.itemsInOtherHover = 0;
_.lastSelectedIndex = 0;
_.leftMargin = 0;
_.markerYOffset = 0;
_.maxLines = 0;
_.pageStartIndex = 0;
_.pctAreaWidth = 0;
_.rightMargin = 0;
_.showPercentOfPrevious = false;
_.showPercentOfTotal = false;
_.totalValue = 0;
_.valueDisplayType = 0;
var Lcom_domo_charting_graphs_LegendPie_2_classLit = createForClass('com.domo.charting.graphs', 'LegendPie', 65);
function $formatFromGraph_2(this$static, rnd){
  var curRangeIndex, dataHasNullVals, ge, grphBnds, heatMap, highTextDim, highValStr, highValue, left, lowTextDim, lowValStr, lowValue, marker, markerRect, markerSize, noDataTextDim, numRanges, ti, top_0, totalWidth, totalWithNoDataWidth, top_1;
  $processChartOptions(this$static);
  !this$static.bnds && (grphBnds = this$static.component.bnds , this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2 && (this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0)));
  if (!this$static.isHidden) {
    this$static.legendItems.clear_0();
    clearGraphicElementArray(this$static.geAry);
    if (this$static.component) {
      this$static.numberFormatter = this$static.component.numberFormatter;
      $getLineHeight(this$static.font_0, rnd);
      top_0 = this$static.bnds.y_0 + this$static.compLegendMargin;
      left = this$static.component.bnds.x_0;
      markerSize = this$static.font_0.size_0 + 3;
      if (instanceOf(this$static.component, 43) && instanceOf(castTo(this$static.component, 43).handler, 212)) {
        heatMap = castTo(castTo(this$static.component, 43).handler, 212);
        numRanges = 0;
        !!heatMap.getRanges() && (numRanges = heatMap.getRanges().array.length);
        curRangeIndex = numRanges - 1;
        if (curRangeIndex >= 0) {
          highValue = castTo($get_2(heatMap.getRanges(), curRangeIndex), 48).max_0;
          lowValue = castTo($get_2(heatMap.getRanges(), 0), 48).min_0;
          dataHasNullVals = $hasNullValues_0(this$static);
          highValStr = this$static.component.formatNumber(highValue);
          lowValStr = this$static.component.formatNumber(lowValue);
          highTextDim = rnd.measureText_0(highValStr, this$static.font_0);
          lowTextDim = rnd.measureText_0(lowValStr, this$static.font_0);
          noDataTextDim = rnd.measureText_0(this$static.component.getLocalizedString('NO_DATA'), this$static.font_0);
          totalWidth = lowTextDim.width_0 + highTextDim.width_0 + 2 * this$static.textMarkerMargin + (numRanges - 1) * this$static.markerMarkerMargin + numRanges * markerSize;
          totalWithNoDataWidth = totalWidth + noDataTextDim.width_0 + this$static.noDataMargin + markerSize + this$static.textMarkerMargin;
          dataHasNullVals && totalWithNoDataWidth < this$static.bnds.width_0 && (totalWidth = totalWithNoDataWidth);
          left += (this$static.bnds.width_0 - totalWidth) / 2;
          ti = new CFTextItem_2(lowValStr, this$static.font_0, round_int(left), round_int(top_0));
          ge = new GraphicElement;
          !ge.textAry && (ge.textAry = new ArrayList);
          $add_1(ge.textAry, ti);
          left += lowTextDim.width_0 + this$static.textMarkerMargin;
          curRangeIndex = 0;
          while (curRangeIndex < numRanges) {
            markerRect = new CFRect(left, top_0, markerSize, markerSize);
            marker = new CFShape_1(markerRect, new CFFill(castTo($get_2(heatMap.getRangeColors(), curRangeIndex), 15)), null);
            !ge.shapeAry && (ge.shapeAry = new ArrayList);
            $add_1(ge.shapeAry, marker);
            left += markerSize + this$static.markerMarkerMargin;
            ++curRangeIndex;
          }
          left += this$static.textMarkerMargin;
          ti = new CFTextItem_2(highValStr, this$static.font_0, round_int(left), round_int(top_0));
          !ge.textAry && (ge.textAry = new ArrayList);
          $add_1(ge.textAry, ti);
          if ($hasNullValues_0(this$static) && totalWithNoDataWidth < this$static.bnds.width_0) {
            left += highTextDim.width_0 + this$static.noDataMargin;
            markerRect = new CFRect(left, top_0, markerSize, markerSize);
            marker = new CFShape_1(markerRect, new CFFill(heatMap.getNoDataColor()), null);
            !ge.shapeAry && (ge.shapeAry = new ArrayList);
            $add_1(ge.shapeAry, marker);
            left += markerSize + this$static.textMarkerMargin;
            ti = new CFTextItem_2(this$static.component.getLocalizedString('NO_DATA'), this$static.font_0, round_int(left), round_int(top_0));
            !ge.textAry && (ge.textAry = new ArrayList);
            $add_1(ge.textAry, ti);
          }
          this$static.geAry.add_0(ge);
        }
      }
      top_1 = this$static.bnds.y_0;
      this$static.position == 1 && (top_1 += this$static.compLegendMargin);
      $setBottomLegendItemBounds_0(this$static, rnd, top_1);
    }
  }
  this$static.needsFormat = false;
}

function $hasNullValues_0(this$static){
  var numCols, row, row$iterator;
  numCols = $getNumCols(this$static.component.getData());
  for (row$iterator = this$static.component.getData().rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    if ($hasNullValues(row))
      return true;
    if ((new AbstractMap$1(row.cellMap)).this$01.size_1() != numCols)
      return true;
  }
  return false;
}

function $setBottomLegendItemBounds_0(this$static, rnd, top_0){
  top_0 += $getLineHeight(this$static.font_0, rnd);
  this$static.position == 3?$setHeight(this$static.bnds, top_0 + this$static.compLegendMargin - this$static.bnds.y_0):$setHeight(this$static.bnds, top_0 - this$static.bnds.y_0);
}

function LegendRange(chart, name_0, graph){
  LegendBase.call(this, chart, name_0, graph);
  this.position = 1;
}

defineClass(133, 104, {23:1, 63:1, 104:1, 133:1}, LegendRange);
_.format_0 = function format_30(rnd){
  return;
}
;
_.processChartOption = function processChartOption_3(key){
  $getChartOptionAsString(this, key);
  return false;
}
;
_.reset_0 = function reset_8(){
  $reset_3(this);
  this.textMarkerMargin = 10;
  this.markerMarkerMargin = 1;
  this.noDataMargin = 30;
}
;
_.markerMarkerMargin = 0;
_.noDataMargin = 0;
_.textMarkerMargin = 0;
var Lcom_domo_charting_graphs_LegendRange_2_classLit = createForClass('com.domo.charting.graphs', 'LegendRange', 133);
function $getAdditionalLegendItems_1(this$static){
  if (this$static.sGraph.handler)
    return this$static.sGraph.handler.getAdditionalLegendItems();
  return null;
}

function $getLegendItemInfoForSeries_0(this$static, legend, colInfo){
  var lii;
  lii = null;
  !!this$static.sGraph.handler && (lii = this$static.sGraph.handler.getLegendItemInfoForSeries(legend, colInfo));
  if (lii)
    return lii;
  if (colInfo)
    return new LegendItemInfo_0(legend, colInfo, new CFFill($getColorForSeriesNameOrIndex_0(this$static.sGraph, colInfo, colInfo.curIndex)), null);
  return null;
}

function LegendScaledGraph(chart, name_0, graph, position){
  $clinit_Legend();
  Legend.call(this, chart, name_0, graph);
  this.sGraph = graph;
  this.position = position;
  this.markerSize = round_int(this.font_0.size_0) - 2;
}

defineClass(153, 66, {23:1, 63:1, 66:1, 104:1, 153:1}, LegendScaledGraph);
_.freeResources = function freeResources_39(dataToKeep){
  $freeResources_21(this, dataToKeep);
  this.spaceDim = null;
  this.sGraph = null;
}
;
_.getAdditionalLegendItems = function getAdditionalLegendItems_4(){
  return $getAdditionalLegendItems_1(this);
}
;
_.getLegendColumns = function getLegendColumns_5(){
  return castTo(this.sGraph.handler, 64).getLegendColumns();
}
;
_.getLegendItemInfoForSeries = function getLegendItemInfoForSeries_8(legend, colInfo){
  return $getLegendItemInfoForSeries_0(this, legend, colInfo);
}
;
var Lcom_domo_charting_graphs_LegendScaledGraph_2_classLit = createForClass('com.domo.charting.graphs', 'LegendScaledGraph', 153);
function $clinit_TableCSR(){
  $clinit_TableCSR = emptyMethod;
  red_negative = new CFColor_2('CC2C1C');
  new CFColor_2('FFBCB6');
  light_gray_fill = new CFColor_2('00000008');
  dark_gray_fill = new CFColor_2('FFFFFF08');
  Border_Stroke = new CFStroke_1('DDDDDD', 0.5);
  COL_HOVER_COLOR = new CFColor_2('#e8f2ff');
  ROW_HOVER_COLOR = new CFColor_2('#e8fff2');
  CELL_HOVER_COLOR = new CFColor_2('#ffe8e8');
}

function $adjustViewPortYOffset(this$static, numZooms){
  var oldYOffset, rowHeight;
  if (numZooms == 0)
    return false;
  oldYOffset = this$static.viewPortY;
  if (this$static.tableSize.height_0 > this$static.bnds.height_0) {
    rowHeight = $getFirstRowHeight(this$static.tableGrid);
    numZooms > 4 && (numZooms = 4);
    numZooms < -4 && (numZooms = -4);
    this$static.viewPortY = round_int(this$static.viewPortY + numZooms * rowHeight);
    this$static.viewPortY < 0 && (this$static.viewPortY = 0);
    this$static.viewPortY + this$static.bnds.height_0 > this$static.tableSize.height_0 + rowHeight && (this$static.viewPortY = round_int(this$static.tableSize.height_0 - this$static.bnds.height_0 + rowHeight));
  }
  if (this$static.viewPortY != oldYOffset)
    return true;
  return false;
}

function $applyAllowWrap(this$static){
  !!this$static.tableGrid && $applyAllowWrap_0(this$static.tableGrid);
}

function $applyColumnAlignment(this$static, key, value_0){
  var alignment, columnIndex;
  if (this$static.tableGrid) {
    columnIndex = $getColumnNumberFromKey(key, 'column_');
    alignment = getAlignmentFromString(value_0);
    $applyColumnAlignment_0(this$static.tableGrid, columnIndex, alignment);
  }
}

function $applyColumnTextStyle(this$static, key, value_0){
  var columnIndex, style;
  if (this$static.tableGrid) {
    columnIndex = $getColumnNumberFromKey(key, 'attr_Column_col');
    style = getStyleFromString(value_0);
    $applyColumnTextStyle_0(this$static.tableGrid, columnIndex, style);
  }
}

function $applyConditionalFormats(this$static){
  if (!this$static.conditionalFormats || this$static.conditionalFormats.array.length == 0 || !this$static.tableGrid)
    return;
  this$static.tableGrid.applyConditionalFormats(this$static.conditionalFormats);
}

function $applyFontColor(this$static){
  !this$static.tableTextColor && (this$static.tableTextColor = $getTextColor(this$static.chart.palette));
  !!this$static.tableTextColor && !!this$static.tableGrid && $applyFontColor_0(this$static.tableGrid, this$static.tableTextColor);
  if (!!$getBackgroundColor(this$static.chart.palette) && !isLightColor($getBackgroundColor(this$static.chart.palette))) {
    this$static.alternateRowColor = dark_gray_fill;
    this$static.headerRowColor = dark_gray_fill;
  }
}

function $applyHeaderColumnAlignment(this$static, alignment){
  !!this$static.tableGrid && $applyHeaderColumnAlignment_0(this$static.tableGrid, alignment);
}

function $applyHeaderTextStyle(this$static, style){
  !!this$static.tableGrid && $applyHeaderTextStyle_0(this$static.tableGrid, style);
}

function $applySubTotalColors(this$static){
  var tRowCol, tRowCol$iterator, tRowCol$iterator0;
  if (!!this$static.tableGrid && !!this$static.tableGrid.rows_0 && this$static.tableGrid.rows_0.array.length > 0 && !!this$static.tableGrid.cols_0 && this$static.tableGrid.cols_0.array.length > 0) {
    for (tRowCol$iterator0 = new ArrayList$1(this$static.tableGrid.rows_0); tRowCol$iterator0.i < tRowCol$iterator0.this$01.array.length;) {
      tRowCol = castTo($next_3(tRowCol$iterator0), 30);
      tRowCol.isSubTotalRowCol && $setSubtotalAttributes(this$static, tRowCol);
    }
    for (tRowCol$iterator = new ArrayList$1(this$static.tableGrid.cols_0); tRowCol$iterator.i < tRowCol$iterator.this$01.array.length;) {
      tRowCol = castTo($next_3(tRowCol$iterator), 30);
      tRowCol.isSubTotalRowCol && $setSubtotalAttributes(this$static, tRowCol);
    }
  }
}

function $applyTotalColors(this$static){
  var tRowCol, tRowCol$iterator, tRowCol$iterator0;
  if (!!this$static.tableGrid && !!this$static.tableGrid.rows_0 && this$static.tableGrid.rows_0.array.length > 0 && !!this$static.tableGrid.cols_0 && this$static.tableGrid.cols_0.array.length > 0) {
    for (tRowCol$iterator0 = new ArrayList$1(this$static.tableGrid.rows_0); tRowCol$iterator0.i < tRowCol$iterator0.this$01.array.length;) {
      tRowCol = castTo($next_3(tRowCol$iterator0), 30);
      tRowCol.isTotalRowCol && $setTotalAttributes(this$static, tRowCol);
    }
    for (tRowCol$iterator = new ArrayList$1(this$static.tableGrid.cols_0); tRowCol$iterator.i < tRowCol$iterator.this$01.array.length;) {
      tRowCol = castTo($next_3(tRowCol$iterator), 30);
      tRowCol.isTotalRowCol && $setTotalAttributes(this$static, tRowCol);
    }
  }
}

function $applyUseLogScale(this$static, useLog){
  this$static.useLogScale = useLog;
  !!this$static.tableGrid && $applyUseLogScale_0(this$static.tableGrid, useLog);
}

function $calcMaxRowsColumnsToDisplay(this$static){
  var numRowsToDisplay;
  if (this$static.isXLargeSize) {
    this$static.maxColsToDisplay = 10;
    this$static.fontSizeString != null && $equals_2(this$static.fontSizeString, 'smallest') && (this$static.maxColsToDisplay = 14);
    this$static.maxRowsToDisplay = 100;
  }
   else if (this$static.isLargeSize) {
    this$static.maxColsToDisplay = 3;
    this$static.fontSizeString != null && $equals_2(this$static.fontSizeString, 'smallest') && (this$static.maxColsToDisplay = 4);
    this$static.maxRowsToDisplay = 100;
    this$static.fontSize == 12 && (this$static.fontSize = 11);
  }
   else if (this$static.isMediumSize) {
    this$static.maxColsToDisplay = 2;
    this$static.fontSizeString != null && $equals_2(this$static.fontSizeString, 'smallest') && (this$static.maxColsToDisplay = 3);
    this$static.maxRowsToDisplay = 100;
    this$static.fontSize == 12 && (this$static.fontSize = 10);
  }
   else if (this$static.tableGrid) {
    this$static.maxColsToDisplay = $getNumVisibleCols_0(this$static.tableGrid);
    this$static.maxRowsToDisplay = this$static.tableGrid.rows_0.array.length;
    if (this$static.maxColsToDisplay * this$static.maxRowsToDisplay > 500000) {
      this$static.maxColsToDisplay > $intern_10 && (this$static.maxColsToDisplay = $intern_10);
      numRowsToDisplay = 500000 / this$static.maxColsToDisplay | 0;
      numRowsToDisplay < this$static.maxRowsToDisplay && (this$static.maxRowsToDisplay = numRowsToDisplay);
    }
  }
  this$static.maxColsToDisplay > $getNumVisibleCols_0(this$static.tableGrid) && (this$static.maxColsToDisplay = $getNumVisibleCols_0(this$static.tableGrid));
}

function $checkForFinancialStyleNegativeNumbers(this$static){
  var value_0;
  if ($hasChartOptions_0(this$static)) {
    value_0 = $getChartOptionAsString_0(this$static, 'parenthesize_negatives');
    if (value_0 != null) {
      this$static.negativesFinancialStyle = isTrue(value_0);
      !!this$static.numberFormatter && this$static.negativesFinancialStyle && $applyUseNegativeWithParens(this$static.numberFormatter);
    }
  }
}

function $createDefaultNumberformatter(this$static){
  this$static.numberFormatter = new NumberFormatter_1(this$static.chart.locale);
  $setAlwaysShowDecimalPlaces(this$static.numberFormatter, true);
  $setAutoAbbreviateState(this$static.numberFormatter, false);
}

function $freeResources_22(this$static, dataToKeep){
  $freeResources_15(this$static, dataToKeep);
  !!this$static.tableGrid && $freeResources_23(this$static.tableGrid);
  this$static.tableGrid = null;
  !!this$static.conditionalFormats && (this$static.conditionalFormats.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.conditionalFormats = null;
  !!this$static.rangeColors && (this$static.rangeColors.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.rangeColors = null;
  this$static.hoverCell = null;
}

function $getChartOptionAsString_0(this$static, key){
  if (!this$static.chartOptions)
    return null;
  return getObjectFromMapAsString(this$static.chartOptions, key);
}

function $getChartOptionKeys_0(this$static){
  if (this$static.chartOptions)
    return this$static.chartOptions.keySet_0();
  return null;
}

function $getColumnNumberFromKey(key, prefix){
  var columnIndex, numericPart;
  numericPart = $substring(key, prefix.length);
  columnIndex = getInt(numericPart, 0);
  return columnIndex - 1;
}

function $getDisplayWidth(this$static){
  if (this$static.tableSize)
    return this$static.tableSize.width_0;
  return this$static.bnds.width_0;
}

function $getFillColorForTRowCol(row, col, rowColor, colColor){
  var result;
  result = rowColor?rowColor:colColor;
  row.drawHoverState?(result = ROW_HOVER_COLOR):!!col && col.drawHoverState && (result = COL_HOVER_COLOR);
  return result;
}

function $getFontForFace(this$static, face_0){
  switch (face_0) {
    case 1:
      return this$static.boldFont;
    case 2:
      return this$static.italicFont;
    case 3:
      return this$static.boldItalicFont;
    default:return this$static.plainFont;
  }
}

function $hasChartOptions_0(this$static){
  if (!!this$static.chartOptions && this$static.chartOptions.size_1() > 0)
    return true;
  return false;
}

function $processChartOptions_12(this$static){
  var key, key$iterator, result, result0, value_0, value0;
  this$static.colorPalette = 'gradient-3';
  this$static.hasCustomPalette && (this$static.colorPalette = 'gradient-1');
  this$static.hiddenColumns = null;
  this$static.columnWidths = null;
  this$static.rangeByColumn = false;
  this$static.useLogScale = false;
  this$static.fontSize = 12;
  this$static.totalRowTextColor = null;
  this$static.totalRowColor = null;
  this$static.headerRowTextColor = null;
  this$static.subTotalRowColor = null;
  this$static.subTotalRowTextColor = null;
  this$static.negativesInRed = false;
  getString('GRAND_TOTAL', this$static.chart.locale);
  getString('TOTAL', this$static.chart.locale);
  this$static.totalRowStyle = 1;
  this$static.subtotalRowStyle = 0;
  if ($hasChartOptions_0(this$static)) {
    for (key$iterator = $getChartOptionKeys_0(this$static).iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      value0 = $getChartOptionAsString_0(this$static, key);
      key = key.toLowerCase();
      if ($equals_2(key.substr(0, 7), 'column_') && !$equals_2(key, 'column_widths'))
        $applyColumnAlignment(this$static, key, value0);
      else if ($equals_2(key.substr(0, 15), 'attr_column_col'))
        $applyColumnTextStyle(this$static, key, value0);
      else {
        switch (key) {
          case 'color_theme':
            this$static.colorPalette = value0;
            break;
          case 'attr_header_row':
            $applyHeaderTextStyle(this$static, getStyleFromString(value0));
            break;
          case 'allow_wrap':
            $applyAllowWrap((isTrue(value0) , this$static));
            break;
          case 'column_widths':
            this$static.columnWidths = value0;
            break;
          case 'hide_columns':
            this$static.hiddenColumns = value0;
            break;
          case 'use_logscale':
            $applyUseLogScale(this$static, isTrue(value0));
            break;
          case 'range_by_column':
            this$static.rangeByColumn = isTrue(value0);
            break;
          case 'subtotal_rows':
          case 'subtotal_rows_percent_of_total':
          case 'total_row':
            isTrue(value0);
            break;
          case 'font_color':
            this$static.tableTextColor = getColor(value0);
            break;
          case 'font_size':
            value0 != null && $setFontSize(this$static, value0.toLowerCase());
            break;
          case 'header_row_fill_color':
            this$static.headerRowColor = getColor(value0);
            break;
          case 'header_row_font_color':
            this$static.headerRowTextColor = getColor(value0);
            break;
          case 'total_row_fill_color':
            this$static.totalRowColor = getColor(value0);
            break;
          case 'total_row_font_color':
            this$static.totalRowTextColor = getColor(value0);
            break;
          case 'subtotal_row_fill_color':
            this$static.subTotalRowColor = getColor(value0);
            break;
          case 'subtotal_row_font_color':
            this$static.subTotalRowTextColor = getColor(value0);
            break;
          case 'red_negatives':
            this$static.negativesInRed = isTrue(value0);
            break;
          case 'subtotal_rows_label_position':
            $equals_2('before', $trim(value0.toLowerCase()));
            break;
          case 'subtotal_rows_label':
            result0 = ($clinit_StrUtil() , entityDecodeString(value0));
            convertBrToNewLine(result0);
            break;
          case 'total_row_label':
            result = ($clinit_StrUtil() , entityDecodeString(value0));
            convertBrToNewLine(result);
            break;
          case 'attr_total_row':
            this$static.totalRowStyle = getStyleFromString(value0);
            break;
          case 'attr_subtotal_rows':
            this$static.subtotalRowStyle = getStyleFromString(value0);
        }
      }
    }
    value_0 = $getChartOptionAsString_0(this$static, 'header_row');
    value_0 != null && value_0.length > 0 && $applyHeaderColumnAlignment(this$static, getAlignmentFromString(value_0));
  }
  !!this$static.colorMgr && (this$static.rangeColors = $getRangeColorsForName(this$static.colorMgr, this$static.colorPalette));
}

function $resetColors(this$static){
  this$static.tableTextColor = null;
  this$static.alternateRowColor = light_gray_fill;
  this$static.headerRowColor = light_gray_fill;
  this$static.tableBorderStroke = Border_Stroke;
  !!$getScaleLineColor(this$static.chart.palette) && (this$static.tableBorderStroke = new CFStroke($getScaleLineColor(this$static.chart.palette), 1));
}

function $setFontSize(this$static, value_0){
  if (value_0 != null) {
    this$static.fontSizeString = value_0;
    $equals_2(value_0, 'largest')?(this$static.fontSize = 16):$equals_2(value_0, 'larger')?(this$static.fontSize = 13):$equals_2(value_0, 'smaller')?(this$static.fontSize = 10):$equals_2(value_0, 'smallest') && (this$static.fontSize = 9);
  }
  return null;
}

function $setHoverRowsAndColsForHoverCell(this$static){
  if (this$static.hoverCell) {
    !!this$static.hoverCell.row && (this$static.hoverCell.row.drawHoverState = true);
    !!this$static.hoverCell.column && (this$static.hoverCell.column.drawHoverState = true);
  }
}

function $setNeedsFormat_1(this$static, value_0){
  this$static.needsFormat = value_0;
  this$static.tableFormatted = false;
  this$static.viewPortX = 0;
  this$static.viewPortY = 0;
}

function $setSubtotalAttributes(this$static, tRowCol){
  var entry, outerIter, tCell, tCell$iterator;
  tRowCol.fillColor = this$static.subTotalRowColor;
  tRowCol.textColor = this$static.subTotalRowTextColor;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(tRowCol.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    $setStyle(tCell, this$static.subtotalRowStyle);
    $applyColors(tCell, this$static.subTotalRowColor, this$static.subTotalRowTextColor);
    this$static.negativesInRed && !!tCell.cell && !isNaN_0($getValue(tCell.cell)) && $getValue(tCell.cell) < 0 && $setTextColor(tCell, red_negative);
  }
}

function $setTotalAttributes(this$static, tRowCol){
  var entry, outerIter, tCell, tCell$iterator;
  tRowCol.isTotalRowCol = true;
  tRowCol.fillColor = this$static.totalRowColor;
  tRowCol.textColor = this$static.totalRowTextColor;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(tRowCol.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    $setStyle(tCell, this$static.totalRowStyle);
    $applyColors(tCell, this$static.totalRowColor, this$static.totalRowTextColor);
    this$static.negativesInRed && !!tCell.cell && !isNaN_0($getValue(tCell.cell)) && $getValue(tCell.cell) < 0 && $setTextColor(tCell, red_negative);
  }
}

function $setupPaddingForFontSize(this$static){
  this$static.leftCellPadding = 5;
  this$static.rightCellPadding = 5;
  this$static.topCellPadding = 4;
  this$static.bottomCellPadding = 4;
  if (this$static.fontSize <= 11) {
    this$static.topCellPadding = this$static.bottomCellPadding = 1;
    this$static.leftCellPadding = this$static.rightCellPadding = 4;
  }
  if (this$static.isMediumSize) {
    this$static.topCellPadding = 0;
    this$static.bottomCellPadding = 0;
  }
}

function $updateCanvasSize(this$static){
  var canvasSize;
  if (this$static.tableGrid) {
    canvasSize = $getTableDimensions(this$static.tableGrid, this$static.rnd, this$static.maxColsToDisplay);
    (!this$static.tableSize || this$static.tableSize != canvasSize) && (this$static.tableSize = canvasSize);
  }
}

function $updateFontsForSize(this$static){
  var size_0;
  size_0 = this$static.fontSize;
  this$static.plainFont = new CFFont_0(null, size_0, ($clinit_CFColor() , BLACK));
  this$static.boldFont = new CFFont_1(null, size_0, BLACK, 1);
  this$static.italicFont = new CFFont_1(null, size_0, BLACK, 2);
  this$static.boldItalicFont = new CFFont_1(null, size_0, BLACK, 3);
}

function TableCSR(theChart, name_0, type_0){
  $clinit_TableCSR();
  Graph.call(this, theChart, name_0, type_0);
  this.fontSize = 12;
  this.headerRowColor = light_gray_fill;
  this.totalRowStyle = 1;
  this.subtotalRowStyle = 0;
  getString('GRAND_TOTAL', this.chart.locale);
  getString('TOTAL', this.chart.locale);
  this.leftCellPadding = 5;
  this.rightCellPadding = 5;
  this.topCellPadding = 4;
  this.bottomCellPadding = 4;
  this.alternateRowColor = light_gray_fill;
  this.tableBorderStroke = Border_Stroke;
}

function getAlignmentFromString(value_0){
  $clinit_TableCSR();
  if (value_0 != null) {
    value_0 = value_0.toLowerCase();
    switch (value_0) {
      case 'center':
        return 1;
      case 'right':
        return 2;
    }
  }
  return 0;
}

defineClass(236, 43, $intern_35, TableCSR);
_.draw_1 = function draw_10(rnd){
  this.needsFormat && this.format_0(rnd);
  !!this.tableGrid && $formatCellsInCurrentView(this.tableGrid, this.rnd, this.maxColsToDisplay, this.viewPortY);
  $updateCanvasSize(this);
  this.backGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this.geAry.clear_0();
  this.frontGeAry.clear_0();
  !!this.tableGrid && $createDrawArraysForCurrentView(this.tableGrid, this.rnd, this.viewPortX, this.viewPortY, this.maxColsToDisplay);
  drawGEAry(rnd, this.backGeAry);
  drawGEAry(rnd, this.geAry);
  drawGEAry(rnd, this.frontGeAry);
}
;
_.format_0 = function format_31(rnd){
  var e;
  this.conditionalFormats = this.chart.conditionalFormats;
  this.rnd = rnd;
  $resetColors(this);
  if (!this.tableGrid || this.tableGrid.rows_0.array.length == 0 || $getNumVisibleCols_0(this.tableGrid) == 0) {
    $addNoDataExistsMessage(this);
    return;
  }
  if (this.needsFormat) {
    if (!this.tableFormatted) {
      try {
        $updateFontsForSize(this);
        $checkForFinancialStyleNegativeNumbers(this);
        !!this.tableGrid && $applyHeaderTextStyle_0(this.tableGrid, 1);
        $applyColumnFormats(this.tableGrid, this.columnFormats);
        if (!this.data_0)
          return;
        !!this.tableGrid && $alignColumnsForColumnsOfNumbers(this.tableGrid);
        this.processChartOptions();
        this.hiddenColumns != null && !!this.tableGrid && $applyHiddenColumns(this.tableGrid, this.hiddenColumns);
        $calcMaxRowsColumnsToDisplay(this);
        $updateFontsForSize(this);
        $setupPaddingForFontSize(this);
        $applyFontColor(this);
        $applyColumnAttributes(this.tableGrid, this.columnFormats);
        !!this.tableGrid && (!!this.headerRowColor || !!this.headerRowTextColor) && this.tableGrid.applyHeaderColors(this.headerRowColor, this.headerRowTextColor);
        $applySubTotalColors(this);
        this.columnWidths != null && !!this.tableGrid && $applyColumnWidths(this.tableGrid, this.columnWidths);
        this.heatmapType && !!this.tableGrid && $applyColorRanges(this.tableGrid, this.rangeByColumn, this.useLogScale);
        $applyConditionalFormats(this);
        $applyTotalColors(this);
        !!this.tableGrid && $applyAlternatingRowColors(this.tableGrid, this.alternateRowColor);
        !!this.tableGrid && $layoutCells(this.tableGrid);
        $setNeedsFormat_1(this, false);
        $updateCanvasSize(this);
        this.needsFormat = false;
        this.tableFormatted = true;
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 38)) {
          e = $e0;
          if (this.testMode)
            throw toJs(e);
          rnd.log_0(getExceptionStackTrace(e));
        }
         else 
          throw toJs($e0);
      }
    }
  }
}
;
_.formatNumber = function formatNumber_0(theValue){
  if (this.numberFormatter)
    return $formatNumber_1(this.numberFormatter, theValue);
  return 'No Chart Number formatter';
}
;
_.freeResources = function freeResources_40(dataToKeep){
  $freeResources_22(this, dataToKeep);
}
;
_.getChartOptionAsString = function getChartOptionAsString_0(key){
  return $getChartOptionAsString_0(this, key);
}
;
_.getChartOptionKeys = function getChartOptionKeys_0(){
  return $getChartOptionKeys_0(this);
}
;
_.getCompositeFilters = function getCompositeFilters_2(filters){
  var endIndex, filter, startIndex, subFilter;
  if (this.drillFilter != null && this.drillFilter.indexOf('filters":[{') != -1) {
    startIndex = this.drillFilter.indexOf('{', 5);
    endIndex = this.drillFilter.lastIndexOf(']');
    subFilter = $substring_0(this.drillFilter, startIndex, endIndex);
    startIndex = subFilter.indexOf('},{');
    while (startIndex > 0) {
      filter = subFilter.substr(0, startIndex + 1);
      filters.array[filters.array.length] = filter;
      subFilter = $substring_0(subFilter, startIndex + 2, subFilter.length);
      startIndex = subFilter.indexOf('},{');
    }
    subFilter != null && (filters.array[filters.array.length] = subFilter , true);
  }
}
;
_.getFirstColumnFormat = function getFirstColumnFormat_0(){
  var entry, key, key$iterator, outerIter, theNumberFormatter;
  if (!!this.columnFormats && $size(this.columnFormats.map_0) > 0) {
    for (key$iterator = (outerIter = (new AbstractMap$1(this.columnFormats)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
      key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
      theNumberFormatter = new NumberFormatter_0(this.numberFormatter);
      $applyColumnFormat(theNumberFormatter, castTo($get_4(this.columnFormats, key), 68));
      return theNumberFormatter;
    }
  }
  return null;
}
;
_.getLocalizedString = function getLocalizedString_0(key){
  return getString(key, this.chart.locale);
}
;
_.getTableCellBorder = function getTableCellBorder(tCell){
  return new TCellBorder;
}
;
_.handleDrag_0 = function handleDrag_6(startX, startY, curX, curY){
  var minLeft, result;
  result = false;
  if (!this.inDrag_0) {
    this.dragStartViewPortX = this.viewPortX;
    this.inDrag_0 = true;
  }
  this.viewPortX = this.dragStartViewPortX - round_int(startX - curX);
  minLeft = this.bnds.width_0 - this.tableSize.width_0;
  this.viewPortX < minLeft && (this.viewPortX = round_int(minLeft));
  this.viewPortX > 0 && (this.viewPortX = 0);
  this.dragStartViewPortX != this.viewPortX && (result = true);
  return result;
}
;
_.handleDragEnd_0 = function handleDragEnd_6(startX, startY, curX, curY){
  this.inDrag_0 = false;
  return false;
}
;
_.hasChartOptions = function hasChartOptions_0(){
  return $hasChartOptions_0(this);
}
;
_.onResize = function onResize_0(){
  this.tableFormatted = false;
  !!this.tableGrid && $resetOverallColumnWidthsToMinimum(this.tableGrid, this.maxColsToDisplay);
}
;
_.processChartOptions = function processChartOptions_34(){
  $processChartOptions_12(this);
}
;
_.setBounds = function setBounds_2(bounds){
  bounds?(this.bnds = new CFRect(bounds.x_0, bounds.y_0, bounds.width_0, bounds.height_0)):(this.bnds = null);
  $setLayoutFlagsBasedOnSize(this);
  this.isMediumSize = this.isLargeSize = this.isXLargeSize = false;
  bounds.width_0 < 300?(this.isMediumSize = true):bounds.width_0 < 600?(this.isLargeSize = true):bounds.width_0 < 940 && (this.isXLargeSize = true);
}
;
_.setData = function setData_33(dataGrid){
  $clinit_System();
  fromDouble_0(now_2());
  $createDefaultNumberformatter(this);
  this.data_0 = dataGrid;
  if (!dataGrid || dataGrid.numVisibleRows == 0 || dataGrid.numVisibleCols == 0) {
    $addNoDataExistsMessage(this);
    return;
  }
  !!this.tableGrid && $freeResources_23(this.tableGrid);
  this.tableGrid = new TableGrid(dataGrid, this);
  $setNeedsFormat_1(this, true);
}
;
_.setDrillFilter = function setDrillFilter_4(shape_0, clicked){
  this.drillFilter = null;
  !!shape_0 && shape_0.dataObject != null && instanceOf(shape_0.dataObject, 70) && (this.drillFilter = $getDrillFilter_0(castTo(shape_0.dataObject, 70)));
}
;
_.setHoverData = function setHoverData_25(hoverData, rnd){
  var redrawNeeded;
  redrawNeeded = false;
  if (maskUndefined(this.hoverCell) !== maskUndefined(hoverData)) {
    !!this.tableGrid && $clearHover(this.tableGrid);
    if (hoverData == null)
      this.hoverCell = null;
    else if (instanceOf(hoverData, 70)) {
      this.hoverCell = castTo(hoverData, 70);
      this.setHoverRowsAndColsForHoverCell();
    }
    redrawNeeded = true;
  }
  return redrawNeeded;
}
;
_.setHoverRowsAndColsForHoverCell = function setHoverRowsAndColsForHoverCell(){
  $setHoverRowsAndColsForHoverCell(this);
}
;
_.setNeedsFormat = function setNeedsFormat_7(value_0){
  $setNeedsFormat_1(this, value_0);
}
;
_.shouldDrawCellText = function shouldDrawCellText(tCell){
  return true;
}
;
_.shouldFillCell = function shouldFillCell(tCell){
  return true;
}
;
_.supportsDrag_0 = function supportsDrag_3(){
  if (!!this.tableSize && (this.tableSize.height_0 > this.bnds.height_0 || this.tableSize.width_0 > this.bnds.width_0))
    return true;
  return false;
}
;
_.supportsZoom = function supportsZoom_1(){
  return true;
}
;
_.zoomIn = function zoomIn_1(zoomPoint, numZooms){
  return $adjustViewPortYOffset(this, numZooms);
}
;
_.zoomOut = function zoomOut_1(zoomPoint, numZooms){
  return $adjustViewPortYOffset(this, numZooms);
}
;
_.bottomCellPadding = 0;
_.dragStartViewPortX = 0;
_.fontSize = 0;
_.hasCustomPalette = false;
_.heatmapType = false;
_.inDrag_0 = false;
_.isLargeSize = false;
_.isMediumSize = false;
_.isXLargeSize = false;
_.leftCellPadding = 0;
_.maxColsToDisplay = 0;
_.maxRowsToDisplay = 0;
_.negativesFinancialStyle = false;
_.negativesInRed = false;
_.rangeByColumn = false;
_.rightCellPadding = 0;
_.subtotalRowStyle = 0;
_.tableFormatted = false;
_.testMode = false;
_.topCellPadding = 0;
_.totalRowStyle = 0;
_.useLogScale = false;
_.viewPortX = 0;
_.viewPortY = 0;
var Border_Stroke, CELL_HOVER_COLOR, COL_HOVER_COLOR, ROW_HOVER_COLOR, dark_gray_fill, light_gray_fill, red_negative;
var Lcom_domo_charting_graphs_TableCSR_2_classLit = createForClass('com.domo.charting.graphs', 'TableCSR', 236);
function $addAllTotalValuesToTable(this$static, mainGrid, totalGrids, properties, rowList, colList, colIndexMap, rowIndexMap){
  var subtotalGrid, subtotalGrid$iterator, totalRow, valCol, valIndex;
  if ((this$static.showTotals || this$static.showSubTotals) && !!totalGrids && totalGrids.array.length > 0 && !!mainGrid) {
    for (subtotalGrid$iterator = new ArrayList$1(totalGrids); subtotalGrid$iterator.i < subtotalGrid$iterator.this$01.array.length;) {
      subtotalGrid = castTo($next_3(subtotalGrid$iterator), 61);
      $addTotalValuesToTable(subtotalGrid, properties, rowList, colList, colIndexMap, rowIndexMap);
    }
    totalRow = castTo($get_2(rowList, rowList.array.length - 1), 30);
    !!totalRow && (totalRow.isTotalRowCol = true);
    for (valIndex = 0; valIndex < properties.pivotValues.array.length; valIndex++) {
      valCol = castTo($get_2(colList, colList.array.length - valIndex - 1), 30);
      !!valCol && (valCol.isTotalRowCol = true);
    }
  }
}

function $addColumnForHeaderNames(this$static, rowList, colList, colIndexMap, levelNames, comboLevelNames){
  var cell, colHeaderName, colHeaderName$iterator, colIndex, column, comboName, row, rowIndex;
  column = null;
  rowIndex = 0;
  colIndex = colList.size_1();
  for (colHeaderName$iterator = new ArrayList$1(levelNames); colHeaderName$iterator.i < colHeaderName$iterator.this$01.array.length;) {
    colHeaderName = castToString($next_3(colHeaderName$iterator));
    if (!column) {
      column = new TRowCol(false);
      column.table = this$static;
      column.name_0 = colHeaderName;
      column.originalName == null && (column.originalName = colHeaderName);
    }
    cell = new TCell_0(colHeaderName);
    $addItem_2(column, cell, false, $size(column.cells_0));
    row = castTo(rowList.get_1(rowIndex++), 30);
    cell.row = row;
    $put_0(row.cells_0, valueOf(colIndex), cell);
  }
  colList.add_0(column);
  comboName = $getCombinationName(comboLevelNames, null);
  colIndexMap.put(comboName, valueOf(colIndex));
}

function $addHeaderColumnNames(this$static, rowList, colList, colIndexMap, workingMap, pivotValues, levelNames, addTotal){
  var comboLevelNames, levelNamesCopy, name_0, nameIndex, names, nextLevelMap, nextLevelNameList, totalName, valueName, valueName$iterator;
  if (!!workingMap && workingMap.size_1() > 0) {
    names = new ArrayList_1(workingMap.keySet_0());
    sort_4(names.array, names.array.length, null);
    for (nameIndex = 0; nameIndex < names.array.length; nameIndex++) {
      name_0 = (checkCriticalElementIndex(nameIndex, names.array.length) , castToString(names.array[nameIndex]));
      nextLevelMap = castTo(workingMap.get_0(name_0), 68);
      if (!!nextLevelMap && nextLevelMap.size_1() > 0) {
        nextLevelNameList = new ArrayList_1(levelNames);
        nextLevelNameList.array[nextLevelNameList.array.length] = name_0;
        $addHeaderColumnNames(this$static, rowList, colList, colIndexMap, nextLevelMap, pivotValues, nextLevelNameList, this$static.showSubTotals);
      }
       else {
        for (valueName$iterator = pivotValues.iterator(); valueName$iterator.hasNext_0();) {
          valueName = castToString(valueName$iterator.next_1());
          levelNamesCopy = new ArrayList_1(levelNames);
          levelNamesCopy.array[levelNamesCopy.array.length] = name_0;
          levelNamesCopy.array[levelNamesCopy.array.length] = valueName;
          $addColumnForHeaderNames(this$static, rowList, colList, colIndexMap, levelNamesCopy, levelNamesCopy);
        }
      }
    }
  }
   else {
    for (valueName$iterator = pivotValues.iterator(); valueName$iterator.hasNext_0();) {
      valueName = castToString(valueName$iterator.next_1());
      levelNamesCopy = new ArrayList;
      levelNamesCopy.array[levelNamesCopy.array.length] = valueName;
      $addColumnForHeaderNames(this$static, rowList, colList, colIndexMap, levelNamesCopy, levelNamesCopy);
    }
  }
  if (addTotal) {
    for (valueName$iterator = pivotValues.iterator(); valueName$iterator.hasNext_0();) {
      valueName = castToString(valueName$iterator.next_1());
      totalName = $getLevelNamesTotal(levelNames);
      levelNamesCopy = new ArrayList_1(new AbstractList$SubList(levelNames, 1, levelNames.array.length));
      levelNamesCopy.array[levelNamesCopy.array.length] = totalName;
      levelNamesCopy.array[levelNamesCopy.array.length] = '';
      levelNamesCopy.array[levelNamesCopy.array.length] = valueName;
      comboLevelNames = new ArrayList_1(levelNames);
      comboLevelNames.array[comboLevelNames.array.length] = totalName;
      comboLevelNames.array[comboLevelNames.array.length] = valueName;
      $addColumnForHeaderNames(this$static, rowList, colList, colIndexMap, levelNamesCopy, comboLevelNames);
      castTo(colList.get_1(colList.size_1() - 1), 30).isSubTotalRowCol = true;
    }
  }
}

function $addHeaderRowsNames(this$static, rowList, colList, rowIndexMap, workingMap, levelNames, addTotal){
  var comboLevelNames, levelNamesCopy, name_0, nameIndex, names, nextLevelMap, nextLevelNameList, totalName;
  if (!!workingMap && workingMap.size_1() > 0) {
    names = new ArrayList_1(workingMap.keySet_0());
    sort_4(names.array, names.array.length, null);
    for (nameIndex = 0; nameIndex < names.array.length; nameIndex++) {
      name_0 = (checkCriticalElementIndex(nameIndex, names.array.length) , castToString(names.array[nameIndex]));
      nextLevelMap = castTo(workingMap.get_0(name_0), 68);
      if (!!nextLevelMap && nextLevelMap.size_1() > 0) {
        nextLevelNameList = new ArrayList_1(levelNames);
        nextLevelNameList.array[nextLevelNameList.array.length] = name_0;
        $addHeaderRowsNames(this$static, rowList, colList, rowIndexMap, nextLevelMap, nextLevelNameList, this$static.showSubTotals);
      }
       else {
        levelNamesCopy = new ArrayList_1(levelNames);
        levelNamesCopy.array[levelNamesCopy.array.length] = name_0;
        $addRowForHeaderNames(this$static, rowList, colList, rowIndexMap, levelNamesCopy, levelNamesCopy);
      }
    }
  }
  if (addTotal) {
    totalName = $getLevelNamesTotal(levelNames);
    levelNamesCopy = new ArrayList_1(new AbstractList$SubList(levelNames, 1, levelNames.array.length));
    levelNamesCopy.array[levelNamesCopy.array.length] = totalName;
    levelNamesCopy.array[levelNamesCopy.array.length] = '';
    comboLevelNames = new ArrayList_1(levelNames);
    comboLevelNames.array[comboLevelNames.array.length] = totalName;
    $addRowForHeaderNames(this$static, rowList, colList, rowIndexMap, levelNamesCopy, comboLevelNames);
    castTo(rowList.get_1(rowList.size_1() - 1), 30).isSubTotalRowCol = true;
  }
}

function $addRowForHeaderNames(this$static, rowList, colList, rowIndexMap, levelNames, comboLevelNames){
  var cell, colIndex, column, comboName, row, rowHeaderName, rowHeaderName$iterator, rowIndex;
  row = null;
  rowIndex = rowList.size_1();
  colIndex = 0;
  for (rowHeaderName$iterator = new ArrayList$1(levelNames); rowHeaderName$iterator.i < rowHeaderName$iterator.this$01.array.length;) {
    rowHeaderName = castToString($next_3(rowHeaderName$iterator));
    if (!row) {
      row = new TRowCol(true);
      row.table = this$static;
    }
    cell = new TCell_0(rowHeaderName);
    $addItem_2(row, cell, true, $size(row.cells_0));
    column = castTo(colList.get_1(colIndex++), 30);
    cell.column = column;
    $put_0(column.cells_0, valueOf(rowIndex), cell);
  }
  rowList.add_0(row);
  comboName = $getCombinationName(comboLevelNames, null);
  rowIndexMap.put(comboName, valueOf(rowIndex));
}

function $addStringToMap(map_0, value_0){
  var result;
  result = castTo(map_0.get_0(value_0), 68);
  if (!result) {
    result = new HashMap;
    map_0.put(value_0, result);
  }
  return result;
}

function $addTotalValuesToTable(dataGrid, properties, rowList, colList, colIndexMap, rowIndexMap){
  var cell, colComboIndex, colIndexes, column, dataRow, dataRow$iterator, row, rowComboIndex, rowIndexes, valueIndex, valueIndexes;
  rowIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotRows);
  colIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotColumns);
  valueIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotValues);
  for (dataRow$iterator = dataGrid.rows_0.iterator(); dataRow$iterator.hasNext_0();) {
    dataRow = castTo(dataRow$iterator.next_1(), 7);
    for (valueIndex = 0; valueIndex < properties.pivotValues.array.length; valueIndex++) {
      cell = new TCell($getCellByCellIndex(dataRow, (checkCriticalElementIndex(valueIndex, valueIndexes.array.length) , castTo(valueIndexes.array[valueIndex], 29)).value_0));
      cell.hAlign = 2;
      rowComboIndex = $getRowCombinationIndexForTotalRow(dataRow, rowIndexMap, rowIndexes, properties.pivotRows.array.length).value_0;
      colComboIndex = $getColumnCombinaitonIndexForTotalRow(dataRow, colIndexMap, colIndexes, properties.pivotColumns.array.length, castToString($get_2(properties.pivotValues, valueIndex))).value_0;
      if (rowComboIndex >= 0 && colComboIndex >= 0) {
        row = (checkCriticalElementIndex(rowComboIndex, rowList.array.length) , castTo(rowList.array[rowComboIndex], 30));
        column = (checkCriticalElementIndex(colComboIndex, colList.array.length) , castTo(colList.array[colComboIndex], 30));
        cell.row = row;
        $put_0(row.cells_0, valueOf(colComboIndex), cell);
        cell.column = column;
        $put_0(column.cells_0, valueOf(rowComboIndex), cell);
        !column.columnFormat && !!cell.cell.column.format && $setColumnFormat(column, cell.cell.column.format);
        column.type_0 == null && cell.cell.column.type_0 != null && $setType_0(column, cell.cell.column.type_0);
      }
    }
  }
}

function $addValuesToTable(dataGrid, properties, rowList, colList, colIndexMap, rowIndexMap){
  var cell, colComboIndex, colIndexes, column, dataRow, dataRow$iterator, row, rowComboIndex, rowIndexes, valueIndex, valueIndexes;
  rowIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotRows);
  colIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotColumns);
  valueIndexes = $getColumnIndexesForNames(dataGrid, properties.pivotValues);
  for (dataRow$iterator = dataGrid.rows_0.iterator(); dataRow$iterator.hasNext_0();) {
    dataRow = castTo(dataRow$iterator.next_1(), 7);
    for (valueIndex = 0; valueIndex < properties.pivotValues.array.length; valueIndex++) {
      cell = new TCell($getCellByCellIndex(dataRow, (checkCriticalElementIndex(valueIndex, valueIndexes.array.length) , castTo(valueIndexes.array[valueIndex], 29)).value_0));
      cell.hAlign = 2;
      rowComboIndex = $getRowCombinationIndex(dataRow, rowIndexMap, rowIndexes, colIndexes).value_0;
      colComboIndex = $getColumnCombinaitonIndex(dataRow, colIndexMap, colIndexes, castToString($get_2(properties.pivotValues, valueIndex))).value_0;
      if (rowComboIndex >= 0 && colComboIndex >= 0) {
        row = (checkCriticalElementIndex(rowComboIndex, rowList.array.length) , castTo(rowList.array[rowComboIndex], 30));
        column = (checkCriticalElementIndex(colComboIndex, colList.array.length) , castTo(colList.array[colComboIndex], 30));
        $setParentName_0(column, castToString($get_2(properties.pivotValues, valueIndex)));
        cell.row = row;
        $put_0(row.cells_0, valueOf(colComboIndex), cell);
        cell.column = column;
        $put_0(column.cells_0, valueOf(rowComboIndex), cell);
        !column.columnFormat && !!cell.cell.column.format && $setColumnFormat(column, cell.cell.column.format);
        column.type_0 == null && cell.cell.column.type_0 != null && $setType_0(column, cell.cell.column.type_0);
      }
    }
  }
}

function $checkCellEmpty(tRowCol, index_0){
  var testCell;
  if (tRowCol) {
    testCell = $getCellByIndex(tRowCol, valueOf(index_0));
    if (!testCell || $getValueStr_0(testCell) == null || $getValueStr_0(testCell).length == 0)
      return true;
  }
  return false;
}

function $checkCellMatch(tRowCol, tCell, index_0){
  var testCell;
  if (tRowCol) {
    testCell = $getCellByIndex(tRowCol, valueOf(index_0));
    if (!!testCell && $equals_2($getValueStr_0(testCell), $getValueStr_0(tCell)))
      return true;
  }
  return false;
}

function $checkEmptyBelow(this$static, rowIndex, colIndex){
  var next;
  if (this$static.tableGrid.rows_0.array.length > rowIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30);
    return $checkCellEmpty(next, colIndex);
  }
  return false;
}

function $checkEmptyRight(this$static, rowIndex, colIndex){
  var next;
  if (this$static.tableGrid.cols_0.array.length > colIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30);
    return $checkCellEmpty(next, rowIndex);
  }
  return false;
}

function $checkHeaderBelow(this$static, rowIndex){
  var next;
  if (this$static.tableGrid.rows_0.array.length > rowIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30);
    if (!!next && next.isHeaderRowCol)
      return true;
  }
  return false;
}

function $checkHeaderRight(this$static, colIndex){
  var next;
  if (this$static.tableGrid.cols_0.array.length > colIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30);
    if (!!next && next.isHeaderRowCol)
      return true;
  }
  return false;
}

function $checkMatchBelow(this$static, tCell, rowIndex, colIndex){
  var next;
  if (this$static.tableGrid.rows_0.array.length > rowIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30);
    return $checkCellMatch(next, tCell, colIndex);
  }
  return false;
}

function $checkMatchToRight(this$static, tCell, rowIndex, colIndex){
  var next;
  if (this$static.tableGrid.cols_0.array.length > colIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30);
    return $checkCellMatch(next, tCell, rowIndex);
  }
  return false;
}

function $checkSubtotalBelow(this$static, rowIndex){
  var next;
  if (this$static.tableGrid.rows_0.array.length > rowIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30);
    if (!!next && next.isSubTotalRowCol)
      return true;
  }
  return false;
}

function $checkSubtotalRight(this$static, colIndex){
  var next;
  if (this$static.tableGrid.cols_0.array.length > colIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30);
    if (!!next && next.isSubTotalRowCol)
      return true;
  }
  return false;
}

function $checkTotalRight(this$static, colIndex){
  var next;
  if (this$static.tableGrid.cols_0.array.length > colIndex + 1) {
    next = castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30);
    if (!!next && next.isTotalRowCol)
      return true;
  }
  return false;
}

function $cleanupOldPivotDataGrids(this$static, pivotTotals){
  var incoming, incoming$iterator, keep, outgoing, outgoing$iterator, remove, remove$iterator, removeList;
  if (this$static.pivotTotalDataGrids) {
    removeList = new ArrayList;
    for (outgoing$iterator = new ArrayList$1(this$static.pivotTotalDataGrids); outgoing$iterator.i < outgoing$iterator.this$01.array.length;) {
      outgoing = castTo($next_3(outgoing$iterator), 61);
      keep = false;
      for (incoming$iterator = new ArrayList$1(pivotTotals); incoming$iterator.i < incoming$iterator.this$01.array.length;) {
        incoming = castTo($next_3(incoming$iterator), 61);
        if (incoming == outgoing) {
          keep = true;
          break;
        }
      }
      keep || (removeList.array[removeList.array.length] = outgoing , true);
    }
    if (removeList.array.length > 0) {
      for (remove$iterator = new ArrayList$1(removeList); remove$iterator.i < remove$iterator.this$01.array.length;) {
        remove = castTo($next_3(remove$iterator), 61);
        $freeResources_11(remove);
      }
    }
    this$static.pivotTotalDataGrids.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
}

function $createTableGridFromPivotData(this$static){
  var colIndexMap, colLevelNames, colList, colRowIndex, column, comboNameList, pivotCols, pivotRows, properties, row, row0, rowIndexMap, rowLevelNames, rowList, sortedValueNames, theName, theName$iterator, theName$iterator0, totalList, value_0, value$iterator, valueName;
  !!this$static.tableGrid && $freeResources_23(this$static.tableGrid);
  colList = new ArrayList;
  rowList = new ArrayList;
  colIndexMap = new HashMap;
  rowIndexMap = new HashMap;
  properties = new SumoProperties(this$static.data_0);
  pivotRows = $getPivotStructures(this$static.data_0, properties.pivotRows);
  pivotCols = $getPivotStructures(this$static.data_0, properties.pivotColumns);
  for (theName$iterator0 = new ArrayList$1(properties.pivotRows); theName$iterator0.i < theName$iterator0.this$01.array.length;) {
    theName = castToString($next_3(theName$iterator0));
    column = new TRowCol(false);
    column.table = this$static;
    column.parentName = theName;
    column.isHeaderRowCol = true;
    colList.array[colList.array.length] = column;
  }
  for (theName$iterator = new ArrayList$1(properties.pivotColumns); theName$iterator.i < theName$iterator.this$01.array.length;) {
    theName = castToString($next_3(theName$iterator));
    row0 = new TRowCol(true);
    row0.table = this$static;
    row0.parentName = theName;
    row0.isHeaderRowCol = true;
    rowList.array[rowList.array.length] = row0;
  }
  row = new TRowCol(true);
  row.table = this$static;
  row.isHeaderRowCol = true;
  rowList.array[rowList.array.length] = row;
  if (properties.pivotRows.array.length == 0) {
    row = new TRowCol(true);
    row.table = this$static;
    rowList.array[rowList.array.length] = row;
  }
  rowLevelNames = new ArrayList;
  $addHeaderRowsNames(this$static, rowList, colList, rowIndexMap, pivotRows, rowLevelNames, false);
  if (this$static.showTotals && !!pivotRows && pivotRows.hashCodeMap.size_0 + pivotRows.stringMap.size_0 > 0) {
    totalList = new ArrayList;
    totalList.array[totalList.array.length] = 'GRAND TOTAL';
    totalList.array[totalList.array.length] = '';
    comboNameList = new ArrayList;
    comboNameList.array[comboNameList.array.length] = 'GRAND TOTAL';
    $addRowForHeaderNames(this$static, rowList, colList, rowIndexMap, totalList, comboNameList);
    castTo($get_2(rowList, rowList.array.length - 1), 30).isTotalRowCol = true;
  }
  colLevelNames = new ArrayList;
  sortedValueNames = new ArrayList_1(properties.pivotValues);
  sortedValueNames.array.length > 1 && sort_4(sortedValueNames.array, sortedValueNames.array.length, null);
  $addHeaderColumnNames(this$static, rowList, colList, colIndexMap, pivotCols, properties.pivotValues, colLevelNames, false);
  if (this$static.showTotals && !!pivotCols && pivotCols.hashCodeMap.size_0 + pivotCols.stringMap.size_0 > 0) {
    for (value$iterator = new ArrayList$1(properties.pivotValues); value$iterator.i < value$iterator.this$01.array.length;) {
      value_0 = castToString($next_3(value$iterator));
      totalList = new ArrayList;
      for (colRowIndex = 0; colRowIndex < properties.pivotColumns.array.length; colRowIndex++)
        totalList.array[totalList.array.length] = null;
      valueName = value_0.toLocaleUpperCase() + ' TOTAL';
      totalList.array[totalList.array.length] = valueName;
      comboNameList = new ArrayList;
      comboNameList.array[comboNameList.array.length] = valueName;
      $addColumnForHeaderNames(this$static, rowList, colList, colIndexMap, totalList, comboNameList);
      castTo($get_2(colList, colList.array.length - 1), 30).isTotalRowCol = true;
    }
  }
  $addValuesToTable(this$static.data_0, properties, rowList, colList, colIndexMap, rowIndexMap);
  $addAllTotalValuesToTable(this$static, this$static.data_0, this$static.pivotTotalDataGrids, properties, rowList, colList, colIndexMap, rowIndexMap);
  this$static.tableGrid = new PivotTableGrid(rowList, colList);
  $setNumHeaderRows(this$static.tableGrid, properties.pivotColumns.array.length + 1);
  $setNumHeaderCols(this$static.tableGrid, properties.pivotRows.array.length);
  $setTable(this$static.tableGrid, this$static);
}

function $getColumnCombinaitonIndex(row, colIndexMap, colIndexes, valueColumnName){
  var comboName, index_0;
  comboName = $getColumnCombinationName(row, colIndexes, valueColumnName);
  if (comboName != null) {
    index_0 = castTo(comboName == null?getEntryValueOrNull($getEntry(colIndexMap.hashCodeMap, null)):$get_3(colIndexMap.stringMap, comboName), 29);
    if (index_0)
      return index_0;
  }
  return valueOf(0);
}

function $getColumnCombinaitonIndexForTotalRow(row, colIndexMap, colIndexes, colLevels, valueColumnName){
  var comboName, index_0;
  comboName = $getColumnCombinationNameForTotalRow(row, colIndexes, colLevels, valueColumnName);
  if (comboName != null) {
    index_0 = castTo(comboName == null?getEntryValueOrNull($getEntry(colIndexMap.hashCodeMap, null)):$get_3(colIndexMap.stringMap, comboName), 29);
    if (index_0)
      return index_0;
  }
  return valueOf(-1);
}

function $getColumnCombinationName(row, indexes, valueColumnName){
  var cell, index_0, index$iterator, nameList;
  if (row) {
    if (!indexes || indexes.array.length == 0)
      return valueColumnName;
    nameList = new ArrayList;
    for (index$iterator = new ArrayList$1(indexes); index$iterator.i < index$iterator.this$01.array.length;) {
      index_0 = castTo($next_3(index$iterator), 29).value_0;
      cell = $getCellByCellIndex(row, index_0);
      !!cell && $add_1(nameList, cell.valueStr);
    }
    return $getCombinationName(nameList, valueColumnName);
  }
  return null;
}

function $getColumnCombinationNameForTotalRow(colRowInfo, indexes, colLevels, valueColumnName){
  var cell, index_0, index$iterator, lastLevel, nameList;
  if (colRowInfo) {
    if (indexes.array.length == 0 && colLevels > 0)
      return valueColumnName.toLocaleUpperCase() + ' TOTAL';
    nameList = new ArrayList;
    lastLevel = '';
    for (index$iterator = new ArrayList$1(indexes); index$iterator.i < index$iterator.this$01.array.length;) {
      index_0 = castTo($next_3(index$iterator), 29).value_0;
      cell = $getCellByCellIndex(colRowInfo, index_0);
      if (cell) {
        $add_1(nameList, cell.valueStr);
        lastLevel = cell.valueStr;
      }
    }
    indexes.array.length < colLevels && $add_1(nameList, lastLevel.toLocaleUpperCase() + ' TOTAL');
    return $getCombinationName(nameList, valueColumnName);
  }
  return null;
}

function $getColumnIndexesForNames(dataGrid, pivotNames){
  var col, col$iterator, colIndex, colIndexes, pivotName, pivotName$iterator;
  if (!pivotNames || pivotNames.array.length == 0)
    return null;
  colIndexes = new ArrayList;
  for (pivotName$iterator = new ArrayList$1(pivotNames); pivotName$iterator.i < pivotName$iterator.this$01.array.length;) {
    pivotName = castToString($next_3(pivotName$iterator));
    colIndex = 0;
    for (col$iterator = dataGrid.cols_0.iterator(); col$iterator.hasNext_0();) {
      col = castTo(col$iterator.next_1(), 7);
      if ($equals_2(pivotName, col.name_0)) {
        $add_1(colIndexes, valueOf(colIndex));
        break;
      }
      ++colIndex;
    }
  }
  return colIndexes;
}

function $getCombinationName(list, lastEntry){
  var count, i, sb;
  sb = new StringBuilder;
  if (list.array.length > 0) {
    count = list.array.length;
    for (i = 0; i < count; i++) {
      $append_3(sb, (checkCriticalElementIndex(i, list.array.length) , castToString(list.array[i])));
      i < count - 1 && (sb.string += '::' , sb);
    }
  }
  lastEntry != null && $append_3((sb.string += '::' , sb), lastEntry);
  return sb.string;
}

function $getLevelNamesTotal(levelNames){
  var level, sb;
  sb = new StringBuilder;
  level = castToString($get_2(levelNames, levelNames.array.length - 1)).toLocaleUpperCase();
  sb.string += '' + level;
  sb.string += ' TOTAL';
  return sb.string;
}

function $getPivotStructures(dataGrid, pivotNames){
  var cell, colIndexes, index_0, index$iterator, map_0, row, row$iterator, workingMap;
  if (!pivotNames || pivotNames.array.length == 0)
    return null;
  colIndexes = $getColumnIndexesForNames(dataGrid, pivotNames);
  map_0 = new HashMap;
  for (row$iterator = dataGrid.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    workingMap = map_0;
    for (index$iterator = new ArrayList$1(colIndexes); index$iterator.i < index$iterator.this$01.array.length;) {
      index_0 = castTo($next_3(index$iterator), 29);
      cell = $getCellByCellIndex(row, index_0.value_0);
      !!cell && (workingMap = $addStringToMap(workingMap, cell.valueStr));
    }
  }
  return map_0;
}

function $getRowCombinationIndex(row, rowIndexMap, rowIndexes, colIndexes){
  var index_0, rowComboName;
  if (!rowIndexes || rowIndexes.array.length == 0) {
    index_0 = 1;
    !!colIndexes && (index_0 += colIndexes.array.length);
    return valueOf(index_0);
  }
  rowComboName = $getRowCombinationName(row, rowIndexes);
  if (rowComboName != null) {
    index_0 = castTo(rowComboName == null?getEntryValueOrNull($getEntry(rowIndexMap.hashCodeMap, null)):$get_3(rowIndexMap.stringMap, rowComboName), 29);
    if (index_0)
      return index_0;
  }
  return valueOf(-1);
}

function $getRowCombinationIndexForTotalRow(row, rowIndexMap, rowIndexes, rowLevels){
  var index_0, rowComboName;
  rowComboName = $getRowCombinationNameForTotalRow(row, rowIndexes, rowLevels);
  if (rowComboName != null) {
    index_0 = castTo(rowComboName == null?getEntryValueOrNull($getEntry(rowIndexMap.hashCodeMap, null)):$get_3(rowIndexMap.stringMap, rowComboName), 29);
    if (index_0)
      return index_0;
  }
  return valueOf(-1);
}

function $getRowCombinationName(row, indexes){
  var cell, index_0, index$iterator, nameList;
  if (row) {
    nameList = new ArrayList;
    for (index$iterator = new ArrayList$1(indexes); index$iterator.i < index$iterator.this$01.array.length;) {
      index_0 = castTo($next_3(index$iterator), 29).value_0;
      cell = $getCellByCellIndex(row, index_0);
      !!cell && $add_1(nameList, cell.valueStr);
    }
    return $getCombinationName(nameList, null);
  }
  return null;
}

function $getRowCombinationNameForTotalRow(row, indexes, rowLevels){
  var cell, index_0, index$iterator, lastLevel, nameList;
  if (row) {
    if (indexes.array.length == 0 && rowLevels > 0)
      return 'GRAND TOTAL';
    nameList = new ArrayList;
    lastLevel = '';
    for (index$iterator = new ArrayList$1(indexes); index$iterator.i < index$iterator.this$01.array.length;) {
      index_0 = castTo($next_3(index$iterator), 29).value_0;
      cell = $getCellByCellIndex(row, index_0);
      if (cell) {
        $add_1(nameList, cell.valueStr);
        lastLevel = cell.valueStr;
      }
    }
    indexes.array.length < rowLevels && $add_1(nameList, lastLevel.toLocaleUpperCase() + ' TOTAL');
    return $getCombinationName(nameList, null);
  }
  return null;
}

function $processChartOptions_13(this$static){
  var key, key$iterator;
  $processChartOptions_12(this$static);
  this$static.showTotals = this$static.showSubTotals = false;
  if (!!this$static.chartOptions && this$static.chartOptions.size_1() > 0) {
    for (key$iterator = this$static.chartOptions.keySet_0().iterator(); key$iterator.hasNext_0();) {
      key = castToString(key$iterator.next_1());
      $processSingleChartOption(this$static, key);
    }
  }
}

function $processSingleChartOption(this$static, key){
  var value_0;
  switch (key) {
    case 'showTotals':
      value_0 = $getChartOptionAsString_0(this$static, 'showTotals');
      this$static.showTotals = isTrue(value_0);
      break;
    case 'showSubTotals':
      value_0 = $getChartOptionAsString_0(this$static, 'showSubTotals');
      this$static.showSubTotals = isTrue(value_0);
  }
}

function $setColOfHeaderRowToHoverState(this$static, tCell, left, right){
  var cellAbove, col, colIndex, previous, previous0, row, rowIndex;
  if (!tCell)
    return;
  row = tCell.row;
  col = tCell.column;
  rowIndex = row.curIndex;
  colIndex = col.curIndex;
  col.drawHoverState = true;
  if (rowIndex == 0) {
    left && colIndex > 0 && (previous = castTo($get_2(this$static.tableGrid.cols_0, colIndex - 1), 30) , $checkCellMatch(previous, tCell, 0)) && $setColOfHeaderRowToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.cols_0, colIndex - 1), 30), valueOf(0)), true, false);
    right && $checkMatchToRight(this$static, tCell, 0, colIndex) && $setColOfHeaderRowToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30), valueOf(0)), false, true);
  }
   else {
    cellAbove = $getCellByIndex(col, valueOf(rowIndex - 1));
    left && colIndex > 0 && (previous0 = castTo($get_2(this$static.tableGrid.cols_0, colIndex - 1), 30) , $checkCellMatch(previous0, tCell, rowIndex)) && (!cellAbove || (previous = castTo($get_2(this$static.tableGrid.cols_0, colIndex - 1), 30) , $checkCellMatch(previous, cellAbove, rowIndex - 1))) && $setColOfHeaderRowToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.cols_0, colIndex - 1), 30), valueOf(rowIndex)), true, false);
    right && $checkMatchToRight(this$static, tCell, rowIndex, colIndex) && (!cellAbove || $checkMatchToRight(this$static, cellAbove, rowIndex - 1, colIndex)) && $setColOfHeaderRowToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.cols_0, colIndex + 1), 30), valueOf(rowIndex)), false, true);
  }
}

function $setRowOfHeaderColToHoverState(this$static, tCell, up, down){
  var cellToLeft, col, colIndex, previous, previous0, row, rowIndex;
  if (!tCell)
    return;
  row = tCell.row;
  col = tCell.column;
  rowIndex = row.curIndex;
  colIndex = col.curIndex;
  row.drawHoverState = true;
  if (colIndex == 0) {
    up && rowIndex > 0 && (previous = castTo($get_2(this$static.tableGrid.rows_0, rowIndex - 1), 30) , $checkCellMatch(previous, tCell, 0)) && $setRowOfHeaderColToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.rows_0, rowIndex - 1), 30), valueOf(0)), true, false);
    down && $checkMatchBelow(this$static, tCell, rowIndex, 0) && $setRowOfHeaderColToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30), valueOf(0)), false, true);
  }
   else {
    cellToLeft = $getCellByIndex(row, valueOf(colIndex - 1));
    up && rowIndex > 0 && (previous0 = castTo($get_2(this$static.tableGrid.rows_0, rowIndex - 1), 30) , $checkCellMatch(previous0, tCell, colIndex)) && (!cellToLeft || (previous = castTo($get_2(this$static.tableGrid.rows_0, rowIndex - 1), 30) , $checkCellMatch(previous, cellToLeft, colIndex - 1))) && $setRowOfHeaderColToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.rows_0, rowIndex - 1), 30), valueOf(colIndex)), true, false);
    down && $checkMatchBelow(this$static, tCell, rowIndex, colIndex) && (!cellToLeft || $checkMatchBelow(this$static, cellToLeft, rowIndex, colIndex - 1)) && $setRowOfHeaderColToHoverState(this$static, $getCellByIndex(castTo($get_2(this$static.tableGrid.rows_0, rowIndex + 1), 30), valueOf(colIndex)), false, true);
  }
}

function PivotTableCSR(theChart, name_0, type_0){
  $clinit_TableCSR();
  TableCSR.call(this, theChart, name_0, type_0);
}

defineClass(340, 236, $intern_35, PivotTableCSR);
_.format_0 = function format_32(rnd){
  var e;
  this.conditionalFormats = this.chart.conditionalFormats;
  this.rnd = rnd;
  $resetColors(this);
  this.tableFormatted || $processChartOptions_13(this);
  if (!this.pivotCreated) {
    $createTableGridFromPivotData(this);
    this.pivotCreated = true;
  }
  if (!this.tableGrid || this.tableGrid.rows_0.array.length == 0 || $getNumVisibleCols_0(this.tableGrid) == 0) {
    $addNoDataExistsMessage(this);
    return;
  }
  if (this.needsFormat) {
    if (!this.tableFormatted) {
      try {
        $updateFontsForSize(this);
        $checkForFinancialStyleNegativeNumbers(this);
        !!this.tableGrid && $applyHeaderTextStyle_0(this.tableGrid, 1);
        $applyColumnFormats(this.tableGrid, this.columnFormats);
        if (!this.data_0)
          return;
        !!this.tableGrid && $alignColumnsForColumnsOfNumbers(this.tableGrid);
        this.hiddenColumns != null && !!this.tableGrid && $applyHiddenColumns(this.tableGrid, this.hiddenColumns);
        $calcMaxRowsColumnsToDisplay(this);
        $updateFontsForSize(this);
        $setupPaddingForFontSize(this);
        $applyFontColor(this);
        $applyColumnAttributes(this.tableGrid, this.columnFormats);
        !!this.tableGrid && (!!this.headerRowColor || !!this.headerRowTextColor) && this.tableGrid.applyHeaderColors(this.headerRowColor, this.headerRowTextColor);
        $applySubTotalColors(this);
        this.columnWidths != null && !!this.tableGrid && $applyColumnWidths(this.tableGrid, this.columnWidths);
        this.heatmapType && !!this.tableGrid && $applyColorRanges(this.tableGrid, this.rangeByColumn, this.useLogScale);
        $applyConditionalFormats(this);
        $applyTotalColors(this);
        !!this.tableGrid && $layoutCells(this.tableGrid);
        $setNeedsFormat_1(this, false);
        $updateCanvasSize(this);
        this.needsFormat = false;
        this.tableFormatted = true;
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 38)) {
          e = $e0;
          if (this.testMode)
            throw toJs(e);
          rnd.log_0(getExceptionStackTrace(e));
        }
         else 
          throw toJs($e0);
      }
    }
  }
}
;
_.freeResources = function freeResources_41(dataToKeep){
  var grid, grid$iterator;
  $freeResources_22(this, dataToKeep);
  if (!!this.pivotTotalDataGrids && this.pivotTotalDataGrids.array.length > 0) {
    for (grid$iterator = new ArrayList$1(this.pivotTotalDataGrids); grid$iterator.i < grid$iterator.this$01.array.length;) {
      grid = castTo($next_3(grid$iterator), 61);
      $freeResources_11(grid);
    }
    this.pivotTotalDataGrids.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this.tableGrid = null;
}
;
_.getTableCellBorder = function getTableCellBorder_0(tCell){
  var col, colIndex, previous, result, row, rowIndex, value_0;
  result = new TCellBorder;
  row = tCell.row;
  col = tCell.column;
  rowIndex = row.curIndex;
  colIndex = col.curIndex;
  if (row.isHeaderRowCol) {
    if (col.isTotalRowCol) {
      value_0 = $getValueStr_0(tCell);
      if (value_0 == null || value_0.length == 0)
        return null;
    }
    if (!castTo($get_2(this.tableGrid.rows_0, rowIndex + 1), 30).isHeaderRowCol) {
      rowIndex > 0 && (previous = castTo($get_2(this.tableGrid.rows_0, rowIndex - 1), 30) , $checkCellEmpty(previous, colIndex) && (result.top_0 = false));
      return result;
    }
    if (colIndex > 0) {
      previous = castTo($get_2(this.tableGrid.cols_0, colIndex - 1), 30);
      if ($checkCellMatch(previous, tCell, rowIndex)) {
        result.left_0 = false;
        $checkHeaderBelow(this, rowIndex) && (result.bottom = false);
      }
      if ($checkMatchToRight(this, tCell, rowIndex, colIndex) && !$checkTotalRight(this, colIndex)) {
        result.right = false;
        $checkHeaderBelow(this, rowIndex) && (result.bottom = false);
      }
      rowIndex == 0 && (result.bottom = false);
      rowIndex > 0 && (result.top_0 = false);
      !$checkHeaderBelow(this, rowIndex) && $checkEmptyBelow(this, rowIndex, colIndex) && (result.bottom = false);
      col.isSubTotalRowCol && (result.left_0 = false);
      $checkSubtotalRight(this, colIndex) && !$checkEmptyRight(this, rowIndex, colIndex) && (result.right = false);
    }
  }
   else if (col.isHeaderRowCol) {
    if (rowIndex > 0) {
      previous = castTo($get_2(this.tableGrid.rows_0, rowIndex - 1), 30);
      if ($checkCellMatch(previous, tCell, colIndex)) {
        result.top_0 = false;
        $checkHeaderRight(this, colIndex) && (result.right = false);
      }
      if ($checkMatchBelow(this, tCell, rowIndex, colIndex)) {
        result.bottom = false;
        $checkHeaderRight(this, colIndex) && (result.right = false);
      }
      colIndex == 0 && $checkHeaderRight(this, 0) && (result.right = false);
      colIndex > 0 && (result.left_0 = false);
      $checkEmptyRight(this, rowIndex, colIndex) && (result.right = false);
      row.isSubTotalRowCol && (result.top_0 = false);
      $checkSubtotalBelow(this, rowIndex) && !$checkEmptyBelow(this, rowIndex, colIndex) && (result.bottom = false);
      if (row.isTotalRowCol) {
        result.top_0 = true;
        result.bottom = true;
      }
    }
  }
  return result;
}
;
_.processChartOptions = function processChartOptions_35(){
  $processChartOptions_13(this);
}
;
_.setData = function setData_34(dataGrid){
  $clinit_System();
  fromDouble_0(now_2());
  this.needsFormat = true;
  this.tableFormatted = false;
  this.pivotCreated = false;
  $createDefaultNumberformatter(this);
  this.data_0 = dataGrid;
  if (!dataGrid || dataGrid.numVisibleRows == 0 || dataGrid.numVisibleCols == 0) {
    $addNoDataExistsMessage(this);
    return;
  }
  $setNeedsFormat_1(this, true);
}
;
_.setHoverRowsAndColsForHoverCell = function setHoverRowsAndColsForHoverCell_0(){
  !!this.hoverCell && !!this.hoverCell.row && !!this.hoverCell.column?this.hoverCell.row.isHeaderRowCol?$setColOfHeaderRowToHoverState(this, this.hoverCell, true, true):this.hoverCell.column.isHeaderRowCol?$setRowOfHeaderColToHoverState(this, this.hoverCell, true, true):$setHoverRowsAndColsForHoverCell(this):$setHoverRowsAndColsForHoverCell(this);
}
;
_.shouldDrawCellText = function shouldDrawCellText_0(tCell){
  var col, colIndex, previous, row, rowIndex;
  row = tCell.row;
  col = tCell.column;
  rowIndex = row.curIndex;
  colIndex = col.curIndex;
  if (row.isHeaderRowCol) {
    if (!castTo($get_2(this.tableGrid.rows_0, rowIndex + 1), 30).isHeaderRowCol)
      return true;
    if (colIndex > 0) {
      previous = castTo($get_2(this.tableGrid.cols_0, colIndex - 1), 30);
      if ($checkCellMatch(previous, tCell, rowIndex))
        return false;
    }
  }
   else if (col.isHeaderRowCol) {
    if (rowIndex > 0) {
      previous = castTo($get_2(this.tableGrid.rows_0, rowIndex - 1), 30);
      if ($checkCellMatch(previous, tCell, colIndex))
        return false;
    }
  }
  return true;
}
;
_.shouldFillCell = function shouldFillCell_0(tCell){
  var col, row, value_0;
  row = tCell.row;
  col = tCell.column;
  if (row.isHeaderRowCol && col.isTotalRowCol) {
    value_0 = $getValueStr_0(tCell);
    if (value_0 == null || value_0.length == 0)
      return false;
  }
  return true;
}
;
_.updateWithDefinition = function updateWithDefinition_3(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
  $updateWithDefinition_0(this, compDef, datasourceMap, oldDataGrid, fromCreation);
  if (!!pivotTotals && pivotTotals.array.length > 0) {
    $cleanupOldPivotDataGrids(this, pivotTotals);
    this.pivotTotalDataGrids = pivotTotals;
  }
}
;
_.pivotCreated = false;
_.showSubTotals = false;
_.showTotals = false;
var Lcom_domo_charting_graphs_PivotTableCSR_2_classLit = createForClass('com.domo.charting.graphs', 'PivotTableCSR', 340);
function $adjustColumnExtraHorizontalPadding(this$static, currentWidth, targetWidth, maxCols){
  var col, colIndex, perColumn, totalAdded, visColCount;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    perColumn = toDouble_0(fromDouble_0($wnd.Math.round((targetWidth - currentWidth) / maxCols)));
    totalAdded = 0;
    visColCount = 0;
    colIndex = 0;
    while (visColCount < maxCols && colIndex < this$static.cols_0.array.length) {
      col = castTo($get_2(this$static.cols_0, colIndex++), 30);
      if (col.hidden || col.isHeaderRowCol)
        continue;
      visColCount == maxCols - 1 && (perColumn = targetWidth - currentWidth - totalAdded);
      col.extraHorizontalPadding = perColumn;
      totalAdded += perColumn;
      ++visColCount;
    }
  }
}

function $alignColumnsForColumnsOfNumbers(this$static){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      $alignCellsInColumn(col);
    }
  }
}

function $applyAllowWrap_0(this$static){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      $applyWrapping(col);
    }
  }
}

function $applyAlternatingRowColors(this$static, alternateColor){
  var row, row$iterator, rowNum;
  if (!!this$static.rows_0 && this$static.rows_0.array.length > 0) {
    rowNum = 0;
    for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 30);
      rowNum++ % 2 == 1 && $applyFillColorToCellsIfNotSet(row, alternateColor);
    }
  }
}

function $applyColorRanges(this$static, rangeByColumn, useLogScale){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    rangeByColumn || $calcOverallRange(this$static, useLogScale);
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.isNumeric && $applyColorRanges_0(col);
    }
  }
}

function $applyColumnAlignment_0(this$static, columnIndex, alignment){
  var col;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > columnIndex) {
    col = castTo($get_2(this$static.cols_0, columnIndex), 30);
    $applyAlignmentToAllCells(col, alignment);
  }
}

function $applyColumnAttributes(this$static, columnFormats){
  var align_0, bgColor, col, col$iterator, colformat, fill, style, text_0, textColor;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      colformat = null;
      !!columnFormats && (colformat = castTo($get_4(columnFormats, col.originalName), 68));
      !colformat && (colformat = col.columnFormat);
      if (colformat) {
        style = $getColumnFormatOptionAsString(colformat, 'addStyle');
        style != null && $applyTextStyleToAllCells(col, getStyleFromString(style));
        align_0 = $getColumnFormatOptionAsString(colformat, 'align');
        align_0 != null && $applyAlignmentToAllCells(col, getAlignmentFromString(align_0));
        bgColor = $getColumnFormatOptionAsString(colformat, 'backgroundColor');
        textColor = $getColumnFormatOptionAsString(colformat, 'textColor');
        fill = null;
        text_0 = null;
        bgColor != null && (fill = new CFColor_2(bgColor));
        textColor != null && (text_0 = new CFColor_2(textColor));
        $applyColorsToColumn(col, fill, text_0);
        $applyColorsToCells(col, fill, text_0);
      }
    }
  }
}

function $applyColumnFormats(this$static, columnFormats){
  var col, col$iterator, colformat, theNumberFormatter;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      colformat = null;
      !!columnFormats && (colformat = castTo($get_4(columnFormats, col.originalName), 68));
      !colformat && (colformat = col.columnFormat);
      if (colformat) {
        theNumberFormatter = new NumberFormatter_0(this$static.table.numberFormatter);
        $applyColumnFormat(theNumberFormatter, colformat);
        theNumberFormatter.autoAbbreviate = false;
        theNumberFormatter.needsNewNumFormat = true;
        col.numberFormatter = theNumberFormatter;
      }
    }
  }
}

function $applyColumnTextStyle_0(this$static, columnIndex, style){
  var col;
  if (!!this$static.cols_0 && this$static.cols_0.array.length >= columnIndex && columnIndex > 0) {
    col = castTo($get_2(this$static.cols_0, columnIndex - 1), 30);
    $applyTextStyleToAllCells(col, style);
  }
}

function $applyColumnWidths(this$static, columnWidths){
  var i, i0, widths;
  if (columnWidths != null && !!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    widths = $split(columnWidths, ',', 0);
    for (i0 = 0; i0 < widths.length; i0++) {
      i0 >= 0 && i0 < this$static.cols_0.array.length && $applyWidth((castTo($get_2(this$static.cols_0, i0), 30) , widths[i0]));
    }
    if (widths.length < this$static.cols_0.array.length) {
      for (i = widths.length; i < this$static.cols_0.array.length; i++)
        $applyWidth((castTo($get_2(this$static.cols_0, i), 30) , '10'));
    }
  }
}

function $applyFontColor_0(this$static, textColor){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.textColor = textColor;
      $setCellsTextColor(col, textColor);
    }
  }
}

function $applyHeaderColumnAlignment_0(this$static, alignment){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.hAlign = alignment;
    }
  }
}

function $applyHeaderTextStyle_0(this$static, style){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.style_0 = style;
    }
  }
}

function $applyHiddenColumns(this$static, hiddenColumns){
  var columns, hideColumn, i;
  if (hiddenColumns != null && !!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    columns = $split(hiddenColumns, ',', 0);
    for (i = 0; i < columns.length; i++) {
      hideColumn = getInt(columns[i], -1);
      hideColumn >= 1 && hideColumn < this$static.cols_0.array.length + 1 && (castTo($get_2(this$static.cols_0, hideColumn - 1), 30).hidden = true);
    }
  }
}

function $applyUseLogScale_0(this$static, useLog){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.useLogScale = useLog;
    }
  }
}

function $calcOverallRange(this$static, useLogScale){
  var col, col$iterator, colMax, colMin, max_0, min_0;
  if (useLogScale)
    $calcOverallRangeLog(this$static);
  else if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    min_0 = NaN;
    max_0 = NaN;
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      colMin = $getMinValue_0(col);
      colMax = $getMaxValue_0(col);
      (isNaN_0((checkCriticalNotNull(min_0) , min_0)) || !isNaN(colMin) && colMin < (checkCriticalNotNull(min_0) , min_0)) && (min_0 = colMin);
      (isNaN_0((checkCriticalNotNull(max_0) , max_0)) || !isNaN(colMax) && colMax > (checkCriticalNotNull(max_0) , max_0)) && (max_0 = colMax);
    }
    $setRangesForEachColumn(this$static, min_0, max_0);
  }
}

function $calcOverallRangeLog(this$static){
  var col, col$iterator, colMax, colMin, max_0, min_0;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    min_0 = NaN;
    max_0 = NaN;
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      colMin = $getMinValueNonNegative_0(col);
      colMax = $getMaxValue_0(col);
      (isNaN_0((checkCriticalNotNull(min_0) , min_0)) || !isNaN(colMin) && colMin < (checkCriticalNotNull(min_0) , min_0)) && (min_0 = colMin);
      (isNaN_0((checkCriticalNotNull(max_0) , max_0)) || !isNaN(colMax) && colMax > (checkCriticalNotNull(max_0) , max_0)) && (max_0 = colMax);
      (checkCriticalNotNull(max_0) , max_0) <= 0 && (max_0 = NaN);
    }
    $setRangesForEachColumn(this$static, min_0, max_0);
  }
}

function $calculateOverallColumnWidth(this$static, maxCols){
  var col, colIndex, total, visColCount;
  total = 0;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    visColCount = 0;
    colIndex = 0;
    while (visColCount < maxCols && colIndex < this$static.cols_0.array.length) {
      col = castTo($get_2(this$static.cols_0, colIndex++), 30);
      if (col.hidden)
        continue;
      total += col.colWidth + col.table.leftCellPadding + col.table.rightCellPadding + col.extraHorizontalPadding;
      ++visColCount;
    }
  }
  total += 1;
  return total;
}

function $clearHover(this$static){
  var col, col$iterator, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 30);
      row.drawHoverState = false;
    }
  }
  if (this$static.cols_0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.drawHoverState = false;
    }
  }
}

function $createDrawArraysForCurrentView(this$static, rnd, viewPortX, viewPortY, maxCols){
  this$static.drawHeaderRows(rnd, viewPortX, 0, maxCols);
  this$static.drawHeaderCols(rnd, viewPortY);
  $drawBodyInViewPort(this$static, rnd, viewPortX, viewPortY, maxCols);
}

function $drawBodyInViewPort(this$static, rnd, viewPortX, viewPortY, maxCols){
  var clipRect, endPos, row, rowIndex, viewRect, yPos, xPos, yEnd, pathElements, path, line, graphicElement, yPos_0, xPos_0, xEnd, pathElements_0, path_0, line_0, graphicElement_0;
  viewRect = this$static.table.bnds;
  yPos = this$static.headerRowHeight;
  clipRect = new CFRect(viewRect.x_0 + this$static.headerColWidth, viewRect.y_0 + this$static.headerRowHeight, viewRect.width_0 - this$static.headerColWidth, viewRect.height_0 - this$static.headerRowHeight);
  $setClipRect(this$static, clipRect);
  if (!!this$static.rows_0 && this$static.rows_0.array.length > 0) {
    endPos = viewRect.y_0 + viewRect.height_0;
    rowIndex = $getStartingRowIndexForCurrentView(this$static, viewPortY);
    for (; rowIndex < this$static.rows_0.array.length; rowIndex++) {
      row = castTo($get_2(this$static.rows_0, rowIndex), 30);
      $createDrawObjects_3(row, rnd, viewPortX, yPos, this$static, this$static.table, maxCols, viewRect.width_0);
      yPos += row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
      if (yPos > endPos)
        break;
    }
  }
  xPos = this$static.headerColWidth;
  yEnd = this$static.table.tableSize.height_0 > viewRect.height_0?viewRect.height_0:this$static.table.tableSize.height_0;
  pathElements = new ArrayList;
  $add_1(pathElements, new CFPathElement_0(0, xPos, 0));
  $add_1(pathElements, new CFPathElement_0(1, xPos, yEnd));
  path = new CFPath_9(pathElements);
  line = new CFShape_0(path, null, this$static.table.tableBorderStroke);
  graphicElement = new GraphicElement_0(line);
  $addGraphicElement_0(this$static.table, graphicElement);
  yPos_0 = this$static.headerRowHeight;
  xPos_0 = viewRect.x_0;
  xEnd = this$static.table.tableSize.width_0 > viewRect.width_0?viewRect.width_0:this$static.table.tableSize.width_0;
  pathElements_0 = new ArrayList;
  $add_1(pathElements_0, new CFPathElement_0(0, xPos_0, yPos_0));
  $add_1(pathElements_0, new CFPathElement_0(1, xEnd, yPos_0));
  path_0 = new CFPath_9(pathElements_0);
  line_0 = new CFShape_0(path_0, null, this$static.table.tableBorderStroke);
  graphicElement_0 = new GraphicElement_0(line_0);
  $addGraphicElement_0(this$static.table, graphicElement_0);
  $endClip(this$static);
}

function $endClip(this$static){
  var endClip, geClip;
  endClip = new CFShape;
  endClip.isClip = true;
  geClip = new GraphicElement;
  !geClip.shapeAry && (geClip.shapeAry = new ArrayList);
  $add_1(geClip.shapeAry, endClip);
  $addGraphicElement_0(this$static.table, geClip);
}

function $formatCellsInCurrentView(this$static, rnd, maxColsToDisplay, viewPortY){
  var displayWidth, endPos, minGridWidth, row, rowIndex, startingRowIndex, viewRect, yPos;
  viewRect = this$static.table.bnds;
  displayWidth = $getDisplayWidth(this$static.table);
  yPos = 0;
  endPos = viewRect.y_0 + viewRect.height_0 + viewPortY;
  $formatHeaderRow(this$static, rnd);
  $formatHeaderCols(this$static, rnd);
  yPos += this$static.headerRowHeight;
  startingRowIndex = this$static.getFirstTableRow();
  if (!!this$static.rows_0 && this$static.rows_0.array.length > 0) {
    for (rowIndex = startingRowIndex; rowIndex < this$static.rows_0.array.length; rowIndex++) {
      row = castTo($get_2(this$static.rows_0, rowIndex), 30);
      if (row) {
        $formatIfNeeded_0(row, rnd);
        yPos += row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
      }
      if (yPos > endPos)
        break;
    }
    minGridWidth = $resetOverallColumnWidthsToMinimum(this$static, maxColsToDisplay);
    minGridWidth < displayWidth && $adjustColumnExtraHorizontalPadding(this$static, minGridWidth, displayWidth, maxColsToDisplay - this$static.numHeaderCols);
    $calculateOverallColumnWidth(this$static, maxColsToDisplay);
  }
}

function $formatHeaderCols(this$static, rnd){
  var colIndex, tRowCol;
  if (!this$static.headerColsFormatted) {
    this$static.headerColWidth = 0;
    if (this$static.numHeaderCols > 0 && !!this$static.rows_0 && this$static.rows_0.array.length > 0) {
      for (colIndex = 0; colIndex < this$static.numHeaderCols; colIndex++) {
        tRowCol = castTo($get_2(this$static.cols_0, colIndex), 30);
        $formatIfNeeded_0(tRowCol, rnd);
        this$static.headerColWidth += tRowCol.colWidth + tRowCol.table.leftCellPadding + tRowCol.table.rightCellPadding + tRowCol.extraHorizontalPadding;
      }
    }
  }
  this$static.headerColsFormatted = true;
}

function $formatHeaderRow(this$static, rnd){
  var col, col$iterator, dim, rowIndex, tRowCol;
  if (!this$static.headerRowFormatted) {
    this$static.headerRowHeight = 0;
    if (this$static.numHeaderRows > 0) {
      this$static.headerRowHeight = 0;
      for (rowIndex = 0; rowIndex < this$static.numHeaderRows; rowIndex++) {
        tRowCol = castTo($get_2(this$static.rows_0, rowIndex), 30);
        if (tRowCol) {
          $formatIfNeeded_0(tRowCol, rnd);
          this$static.headerRowHeight += tRowCol.rowHeight + tRowCol.table.topCellPadding + tRowCol.table.bottomCellPadding;
        }
      }
    }
     else {
      if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
        for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
          col = castTo($next_3(col$iterator), 30);
          dim = $formatNameIfNeeded(col, rnd, this$static.table);
          dim.height_0 > this$static.headerRowHeight && (this$static.headerRowHeight = dim.height_0);
        }
      }
      this$static.headerRowHeight += this$static.table.topCellPadding + this$static.table.bottomCellPadding;
    }
  }
  this$static.headerRowFormatted = true;
}

function $freeResources_23(this$static){
  var col, col$iterator, row, row$iterator;
  if (this$static.rows_0) {
    for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 30);
      $freeResources_29(row);
    }
    this$static.rows_0.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  if (this$static.cols_0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      $freeResources_29(col);
    }
    this$static.cols_0.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.rows_0 = null;
  this$static.cols_0 = null;
  this$static.table = null;
}

function $getColumnByOriginalName_0(this$static, column){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      if (col.originalName != null && $equals_2(col.originalName, column))
        return col;
    }
  }
  return null;
}

function $getColumnFormatOptionAsString(columnFormat, key){
  if (!columnFormat)
    return null;
  return getObjectFromMapAsString(columnFormat, key);
}

function $getFirstRowHeight(this$static){
  var result;
  result = 0;
  !!this$static.rows_0 && this$static.rows_0.array.length > 0 && (result = $getRowDisplayHeight_0(castTo($get_2(this$static.rows_0, 0), 30)));
  return result;
}

function $getNumVisibleCols_0(this$static){
  var col, col$iterator, count;
  count = 0;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      !!col && !col.hidden && ++count;
    }
  }
  return count;
}

function $getStartingRowIndexForCurrentView(this$static, viewPortY){
  var curRowPosition, row, rowHeight, rowIndex, startingRowIndex;
  curRowPosition = 0;
  startingRowIndex = this$static.getFirstTableRow();
  rowIndex = startingRowIndex;
  if (viewPortY > 0) {
    for (rowIndex = startingRowIndex; rowIndex < this$static.rows_0.array.length; rowIndex++) {
      row = castTo($get_2(this$static.rows_0, rowIndex), 30);
      rowHeight = row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
      if (curRowPosition + rowHeight > viewPortY)
        break;
      curRowPosition += row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
    }
  }
  return rowIndex;
}

function $getTableDimensions(this$static, rnd, maxCols){
  var curRowHeight, firstRowHeight, gridWidth, row, rowIndex, startingRowIndex, yPos;
  yPos = 0;
  gridWidth = 0;
  $formatHeaderRow(this$static, rnd);
  yPos += this$static.headerRowHeight;
  if (!!this$static.rows_0 && this$static.rows_0.array.length > 0) {
    firstRowHeight = 0;
    startingRowIndex = this$static.getFirstTableRow();
    for (rowIndex = startingRowIndex; rowIndex < this$static.rows_0.array.length; rowIndex++) {
      row = castTo($get_2(this$static.rows_0, rowIndex), 30);
      if (row) {
        if (firstRowHeight == 0) {
          $formatIfNeeded_0(row, rnd);
          firstRowHeight = row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
        }
        curRowHeight = row.rowHeight + row.table.topCellPadding + row.table.bottomCellPadding;
        curRowHeight == 0 && (curRowHeight = firstRowHeight);
        yPos += curRowHeight;
      }
    }
    gridWidth = $calculateOverallColumnWidth(this$static, maxCols);
    gridWidth < this$static.table.bnds.width_0 && (gridWidth = this$static.table.bnds.width_0);
  }
  return new CFDimension(gridWidth, yPos);
}

function $layoutCells(this$static){
  var row, row$iterator;
  if (!!this$static.rows_0 && this$static.rows_0.array.length > 0) {
    for (row$iterator = new ArrayList$1(this$static.rows_0); row$iterator.i < row$iterator.this$01.array.length;) {
      row = castTo($next_3(row$iterator), 30);
      $setValueStrFromValueForAllCells(row);
    }
  }
}

function $resetOverallColumnWidthsToMinimum(this$static, maxCols){
  var col, col$iterator;
  if (!!this$static.cols_0 && this$static.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      col.extraHorizontalPadding = 0;
    }
  }
  return $calculateOverallColumnWidth(this$static, maxCols);
}

function $setClipRect(this$static, clipRect){
  var clipPath, clipShape, geClip;
  clipPath = new CFPath_3(clipRect);
  clipShape = new CFShape_0(clipPath, null, null);
  clipShape.isClip = true;
  geClip = new GraphicElement;
  !geClip.shapeAry && (geClip.shapeAry = new ArrayList);
  $add_1(geClip.shapeAry, clipShape);
  $addGraphicElement_0(this$static.table, geClip);
}

function $setIndices(tRowCols){
  var index_0, tRowCol, tRowCol$iterator;
  index_0 = 0;
  if (tRowCols.array.length > 0) {
    for (tRowCol$iterator = new ArrayList$1(tRowCols); tRowCol$iterator.i < tRowCol$iterator.this$01.array.length;) {
      tRowCol = castTo($next_3(tRowCol$iterator), 30);
      $setCurIndex_0(tRowCol, index_0++);
    }
  }
}

function $setNumHeaderCols(this$static, numHeaderCols){
  this$static.numHeaderCols = numHeaderCols;
}

function $setNumHeaderRows(this$static, numHeaderRows){
  this$static.numHeaderRows = numHeaderRows;
}

function $setRangesForEachColumn(this$static, min_0, max_0){
  var col, col$iterator;
  for (col$iterator = new ArrayList$1(this$static.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
    col = castTo($next_3(col$iterator), 30);
    col.rangeMin = min_0;
    col.rangeMax = max_0;
  }
}

function $setTable(this$static, table){
  this$static.table = table;
}

function TableGrid(theDataGrid, tableCSR){
  var cell, colList, column, i, i0, numCols, numRows, row, row$iterator, rowList, tRow, tCell;
  this.dataGrid = theDataGrid;
  this.table = tableCSR;
  if (this.dataGrid) {
    colList = new ArrayList;
    rowList = new ArrayList;
    numRows = $getNumRows(this.dataGrid);
    numCols = $getNumCols(this.dataGrid);
    if (numRows > 0 && numCols > 0) {
      for (i0 = 0; i0 < numCols; i0++) {
        column = new TRowCol(false);
        $setTable_0(column, this.table);
        $setOriginalName(column, $getColumn(this.dataGrid, i0).name_0);
        $setName_0(column, $getName($getColumn(this.dataGrid, i0)));
        $setType_0(column, $getColumn(this.dataGrid, i0).type_0);
        $setColumnFormat(column, $getColumn(this.dataGrid, i0).format);
        colList.array[colList.array.length] = column;
      }
      for (row$iterator = this.dataGrid.rows_0.iterator(); row$iterator.hasNext_0();) {
        row = castTo(row$iterator.next_1(), 7);
        tRow = new TRowCol(true);
        $setTable_0(tRow, this.table);
        for (i = 0; i < numCols; i++) {
          cell = $getCellByCellIndex(row, i);
          cell?(tCell = new TCell(cell)):(tCell = new TCell_0(''));
          $addItem_1((checkCriticalElementIndex(i, colList.array.length) , castTo(colList.array[i], 30)), tCell);
          $addItem_2(tRow, tCell, true, $size(tRow.cells_0));
        }
        rowList.array[rowList.array.length] = tRow;
      }
      this.cols_0 = colList;
      this.rows_0 = rowList;
    }
  }
}

defineClass(242, 1, {}, TableGrid);
_.applyConditionalFormats = function applyConditionalFormats(conditionalFormats){
  var col, format, format$iterator;
  if (!conditionalFormats || conditionalFormats.array.length == 0)
    return;
  for (format$iterator = new ArrayList$1(conditionalFormats); format$iterator.i < format$iterator.this$01.array.length;) {
    format = castTo($next_3(format$iterator), 119);
    col = $getColumnByOriginalName_0(this, format.filter.column);
    !!col && $applyConditionalFormat(col, format, true, false, true);
  }
}
;
_.applyHeaderColors = function applyHeaderColors(headerRowColor, headerRowTextColor){
  var col, col$iterator;
  if (!!this.cols_0 && this.cols_0.array.length > 0) {
    for (col$iterator = new ArrayList$1(this.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      $applyColorsToColumn(col, headerRowColor, headerRowTextColor);
    }
  }
}
;
_.drawHeaderCols = function drawHeaderCols(rnd, viewPortY){
}
;
_.drawHeaderRows = function drawHeaderRows(rnd, xPos, yPos, maxCols){
  var col, col$iterator, visibleCount;
  if (!!this.cols_0 && this.cols_0.array.length > 0) {
    visibleCount = 0;
    for (col$iterator = new ArrayList$1(this.cols_0); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 30);
      if (col.hidden)
        continue;
      $createDrawObjectForName(col, rnd, xPos, yPos, this.headerRowHeight, this.table);
      xPos += col.colWidth + col.table.leftCellPadding + col.table.rightCellPadding + col.extraHorizontalPadding;
      if (++visibleCount == maxCols)
        break;
    }
  }
}
;
_.getFirstTableRow = function getFirstTableRow(){
  return 0;
}
;
_.headerColWidth = 0;
_.headerColsFormatted = false;
_.headerRowFormatted = false;
_.headerRowHeight = 0;
_.numHeaderCols = 0;
_.numHeaderRows = 0;
var Lcom_domo_charting_graphs_TableGrid_2_classLit = createForClass('com.domo.charting.graphs', 'TableGrid', 242);
function PivotTableGrid(theRows, theCols){
  this.rows_0 = theRows;
  $setIndices(theRows);
  this.cols_0 = theCols;
  $setIndices(theCols);
}

defineClass(360, 242, {}, PivotTableGrid);
_.applyConditionalFormats = function applyConditionalFormats_0(conditionalFormats){
  var colMatchFound, colMatchName, format, format$iterator, index_0, index0, tRowCol;
  if (!conditionalFormats || conditionalFormats.array.length == 0)
    return;
  for (format$iterator = new ArrayList$1(conditionalFormats); format$iterator.i < format$iterator.this$01.array.length;) {
    format = castTo($next_3(format$iterator), 119);
    colMatchName = format.filter.column;
    if (colMatchName != null && colMatchName.length > 0) {
      colMatchFound = false;
      for (index0 = 0; index0 < this.numHeaderRows; index0++) {
        tRowCol = castTo($get_2(this.rows_0, index0), 30);
        if ($equals_2(colMatchName, tRowCol.parentName)) {
          $applyConditionalFormat(tRowCol, format, false, checkNotNull(format.applyToRow), false);
          colMatchFound = true;
          break;
        }
      }
      if (!colMatchFound) {
        for (index_0 = 0; index_0 < this.numHeaderCols; index_0++) {
          tRowCol = castTo($get_2(this.cols_0, index_0), 30);
          if ($equals_2(colMatchName, tRowCol.parentName)) {
            $applyConditionalFormat(tRowCol, format, checkNotNull(format.applyToRow), false, false);
            colMatchFound = true;
            break;
          }
        }
      }
      if (!colMatchFound) {
        for (index_0 = this.numHeaderCols; index_0 < this.cols_0.array.length; index_0++) {
          tRowCol = castTo($get_2(this.cols_0, index_0), 30);
          $equals_2(colMatchName, tRowCol.parentName) && $applyConditionalFormat(tRowCol, format, false, false, true);
        }
      }
    }
  }
}
;
_.applyHeaderColors = function applyHeaderColors_0(headerRowColor, headerRowTextColor){
  var col, colIndex, row, rowIndex;
  if (!!this.rows_0 && this.rows_0.array.length > 0) {
    for (rowIndex = 0; rowIndex < this.numHeaderRows; rowIndex++) {
      row = castTo($get_2(this.rows_0, rowIndex), 30);
      $applyColorsToCells(row, headerRowColor, headerRowTextColor);
    }
    for (colIndex = 0; colIndex < this.numHeaderCols; colIndex++) {
      col = castTo($get_2(this.cols_0, colIndex), 30);
      $applyColorsToCells(col, headerRowColor, headerRowTextColor);
    }
  }
}
;
_.drawHeaderCols = function drawHeaderCols_0(rnd, viewPortY){
  var clipRect, endPos, rowIndex, tRowCol, viewRect, yPos;
  viewRect = this.table.bnds;
  if (this.numHeaderCols > 0 && !!this.cols_0 && this.cols_0.array.length > 0) {
    yPos = this.headerRowHeight;
    endPos = viewRect.y_0 + viewRect.height_0;
    clipRect = new CFRect(viewRect.x_0, viewRect.y_0 + this.headerRowHeight, this.headerColWidth, viewRect.height_0 - this.headerRowHeight);
    $setClipRect(this, clipRect);
    rowIndex = $getStartingRowIndexForCurrentView(this, viewPortY);
    for (; rowIndex < this.rows_0.array.length; rowIndex++) {
      tRowCol = castTo($get_2(this.rows_0, rowIndex), 30);
      if (tRowCol) {
        $createDrawObjects_3(tRowCol, rnd, 0, yPos, this, this.table, this.numHeaderCols, viewRect.width_0);
        yPos += tRowCol.rowHeight + tRowCol.table.topCellPadding + tRowCol.table.bottomCellPadding;
        if (yPos > endPos)
          break;
      }
    }
    $endClip(this);
  }
}
;
_.drawHeaderRows = function drawHeaderRows_0(rnd, xPos, yPos, maxCols){
  var clipRect, rowIndex, tRowCol, viewRect;
  viewRect = this.table.bnds;
  if (this.headerColWidth > 0) {
    clipRect = new CFRect(viewRect.x_0 + this.headerColWidth, viewRect.y_0, viewRect.width_0 - this.headerColWidth, this.headerRowHeight);
    $setClipRect(this, clipRect);
  }
  for (rowIndex = 0; rowIndex < this.numHeaderRows; rowIndex++) {
    tRowCol = castTo($get_2(this.rows_0, rowIndex), 30);
    if (tRowCol) {
      $createDrawObjects_3(tRowCol, rnd, xPos, yPos, this, this.table, maxCols, viewRect.width_0);
      yPos += tRowCol.rowHeight + tRowCol.table.topCellPadding + tRowCol.table.bottomCellPadding;
    }
  }
  this.headerColWidth > 0 && $endClip(this);
}
;
_.getFirstTableRow = function getFirstTableRow_0(){
  return this.numHeaderRows;
}
;
var Lcom_domo_charting_graphs_PivotTableGrid_2_classLit = createForClass('com.domo.charting.graphs', 'PivotTableGrid', 360);
function $addLabel(this$static, rnd, name_0){
  var ti;
  if (!!rnd && name_0 != null) {
    !!this$static.geLabel && this$static.geAry.remove(this$static.geLabel);
    ti = new CFTextItem(rnd, this$static.bnds, name_0, new CFFont_0(null, 20, $getTextColor(this$static.graph.chart.palette)), HALIGN_CENTER, VALIGN_MIDDLE);
    this$static.geLabel = new GraphicElement_2(ti);
    this$static.geAry.add_0(this$static.geLabel);
  }
}

function $format_4(this$static, x_0, y_0, width_0){
  var ge, shape_0, path, playBtn, path_0, rect, pauseBtn;
  this$static.bnds = new CFRect(x_0, y_0, width_0, 30);
  shape_0 = new CFShape_1(new CFRect_0(this$static.bnds), ($clinit_CFFill() , WHITE_0), null);
  ge = new GraphicElement_0(shape_0);
  ge.dataObject = this$static;
  this$static.geAry.add_0(ge);
  $selectCurrentColumn(this$static);
  path = new CFPath;
  $add(path, new CFPathElement_0(0, this$static.bnds.x_0 + 20, this$static.bnds.y_0 + 5));
  $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 20, $getBottom(this$static.bnds) - 5));
  $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 20 + this$static.bnds.height_0 - 10, $getCenterY(this$static.bnds)));
  $add(path, new CFPathElement_0(1, this$static.bnds.x_0 + 20, this$static.bnds.y_0 + 5));
  $add(path, new CFPathElement);
  playBtn = new CFShape_0(path, BLACK_0, new CFStroke_1('#CDCDCD', 1));
  !!playBtn.path && (playBtn.path.shouldAntiAlias = true);
  this$static.gePlayBtn = new GraphicElement_0(playBtn);
  $setDataObject(this$static.gePlayBtn, this$static);
  this$static.geAry.add_0(this$static.gePlayBtn);
  path_0 = new CFPath;
  rect = new CFRect(this$static.bnds.x_0 + 20, this$static.bnds.y_0 + 5, 7, this$static.bnds.height_0 - 10);
  $add(path_0, new CFPathRectElement_0(rect));
  rect = new CFRect(rect.x_0, rect.y_0, rect.width_0, rect.height_0);
  rect.x_0 = rect.x_0 + 10.5;
  rect.y_0 = rect.y_0;
  $add(path_0, new CFPathRectElement_0(rect));
  pauseBtn = new CFShape_0(path_0, BLACK_0, new CFStroke_1('#CDCDCD', 1));
  !!pauseBtn.path && (pauseBtn.path.shouldAntiAlias = true);
  this$static.gePauseBtn = new GraphicElement_0(pauseBtn);
  $setDataObject(this$static.gePauseBtn, this$static);
  this$static.geAry.add_0(this$static.gePauseBtn);
  this$static.gePauseBtn.hidden = true;
}

function $handleClick_4(this$static){
  if (!!this$static.graph && !!this$static.graph.data_0) {
    if (this$static.paused) {
      this$static.paused = false;
      this$static.gePauseBtn.hidden = false;
      this$static.gePlayBtn.hidden = true;
      this$static.curColIndex > 0 && --this$static.curColIndex;
      this$static.animCount = 1;
      $selectCurrentColumn(this$static);
      this$static.graph.setNeedsFormat(true);
      !!$getLegend(this$static.graph) && $getLegend(this$static.graph).setNeedsFormat(true);
      $setAnimationData(this$static.graph, 0, 500, 'Play', 'linear');
      $setAnimateDrawNeeded(this$static.chart);
      return true;
    }
     else {
      this$static.gePauseBtn.hidden = true;
      this$static.gePlayBtn.hidden = false;
      this$static.curColIndex == 0?(this$static.curColIndex = $getNumCols(this$static.graph.data_0) - 1):(this$static.paused = true);
      this$static.animCount = 1;
      $selectCurrentColumn(this$static);
      this$static.graph.setNeedsFormat(true);
      !!$getLegend(this$static.graph) && $getLegend(this$static.graph).setNeedsFormat(true);
      $setAnimationData(this$static.graph, 0, 500, 'Play', 'linear');
      $setAnimateDrawNeeded(this$static.chart);
      return true;
    }
  }
  return false;
}

function $selectCurrentColumn(this$static){
  var col, i;
  if (this$static.graph.graphType == 8 || this$static.graph.graphType == 9) {
    $setCurrentColumn(this$static.graph, this$static.curColIndex);
    col = $getColumn(this$static.graph.data_0, this$static.curColIndex);
    !!col && $getName(col) != null && $addLabel(this$static, this$static.graph.rnd, $getName(col));
  }
   else {
    if (this$static.curColIndex >= 0 && !!this$static.graph.data_0 && this$static.curColIndex < $getNumCols(this$static.graph.data_0)) {
      $setColumnHiddenValue(this$static.graph.data_0, this$static.curColIndex, false);
      for (i = 0; i < $getNumCols(this$static.graph.data_0); i++) {
        i != this$static.curColIndex && $setColumnHiddenValue(this$static.graph.data_0, i, true);
      }
      $setPeriodOverPeriodDates(this$static.graph.data_0, this$static.curColIndex);
      col = $getColumn(this$static.graph.data_0, this$static.curColIndex);
      !!col && col.altName != null && $addLabel(this$static, this$static.graph.rnd, col.altName);
    }
  }
}

function $setNextState(this$static){
  var continueAnimation;
  continueAnimation = false;
  if (!this$static.paused) {
    continueAnimation = true;
    if (this$static.curColIndex > 0) {
      this$static.gePauseBtn.hidden = false;
      this$static.gePlayBtn.hidden = true;
      if (this$static.animCount == 1) {
        --this$static.animCount;
        this$static.graph.setNeedsFormat(true);
        !!$getLegend(this$static.graph) && $getLegend(this$static.graph).setNeedsFormat(true);
        $replaceAnimationData(this$static.graph, 0, 750, 'Play', 'linear');
        $setAnimateDrawNeeded(this$static.chart);
      }
       else {
        --this$static.curColIndex;
        this$static.animCount = 1;
        $selectCurrentColumn(this$static);
        this$static.graph.setNeedsFormat(true);
        !!$getLegend(this$static.graph) && $getLegend(this$static.graph).setNeedsFormat(true);
        $replaceAnimationData(this$static.graph, 0, 250, 'Play', 'linear');
        $setAnimateDrawNeeded(this$static.chart);
      }
    }
     else if (this$static.curColIndex == 0 && this$static.animCount == 1) {
      this$static.gePauseBtn.hidden = true;
      this$static.gePlayBtn.hidden = false;
      --this$static.animCount;
      this$static.graph.setNeedsFormat(true);
      !!$getLegend(this$static.graph) && $getLegend(this$static.graph).setNeedsFormat(true);
      $replaceAnimationData(this$static.graph, 0, 100, 'Play', 'linear');
      $setAnimateDrawNeeded(this$static.chart);
    }
     else {
      continueAnimation = false;
    }
  }
  return continueAnimation;
}

function PlayControl(theChart, graph){
  Component.call(this, theChart, 'PlayCtrl');
  this.graph = graph;
}

defineClass(132, 23, {23:1, 132:1}, PlayControl);
_.handleClick = function handleClick_13(shapeClicked){
  return $handleClick_4(this);
}
;
_.animCount = 0;
_.curColIndex = 0;
_.paused = false;
var Lcom_domo_charting_graphs_PlayControl_2_classLit = createForClass('com.domo.charting.graphs', 'PlayControl', 132);
function $freeResources_24(this$static){
  this$static.valuePoint = null;
  this$static.drawPoint = null;
  this$static.hoverText = null;
  this$static.cell = null;
  this$static.srsShapeInfo = null;
}

function $setDrawInfo(this$static, drawPoint, hoverPosition, graph){
  var actValStr, diff, diffStr, projValStr, projValue;
  this$static.drawPoint = drawPoint;
  this$static.hoverPosition = hoverPosition;
  projValue = this$static.projectedValue;
  !!this$static.cell && !!this$static.cell.column && this$static.cell.column.isRunningTotal && (projValue = this$static.cell.altValue + (this$static.cell.projectedValue - this$static.cell.value_0));
  diff = this$static.actualValue - projValue;
  actValStr = $formatNumber_1(graph.hoverNumberFormatter, this$static.actualValue) + ' ' + getString('ACTUAL', graph.chart.locale);
  projValStr = $formatNumber_1(graph.hoverNumberFormatter, projValue) + ' ' + getString('PROJECTED', graph.chart.locale);
  diffStr = $formatNumber_1(graph.hoverNumberFormatter, diff) + ' ' + getString('DIFFERENCE', graph.chart.locale);
  diff > 0 && (diffStr = '+' + diffStr);
  if (!!this$static.cell && this$static.cell.projectedIsActual) {
    this$static.hoverText = actValStr;
  }
   else {
    this$static.hoverText = actValStr + '\n' + diffStr + '\n' + projValStr;
    diff < 0 && (this$static.hoverText = projValStr + '\n' + diffStr + '\n' + actValStr);
  }
}

function ProjectionInfo(actualValue, projectedValue, valPoint, cell){
  this.actualValue = actualValue;
  this.projectedValue = projectedValue;
  this.valuePoint = valPoint;
  this.cell = cell;
}

defineClass(87, 1, {87:1}, ProjectionInfo);
_.actualValue = 0;
_.hoverPosition = 0;
_.projectedValue = 0;
var Lcom_domo_charting_graphs_ProjectionInfo_2_classLit = createForClass('com.domo.charting.graphs', 'ProjectionInfo', 87);
function RegressionData(m, b, regressionPoints){
  this.m_0 = m;
  this.b = b;
  this.regressionPoints = regressionPoints;
}

function calcAndGetRegressionDataForPoints(points){
  var b, i, m, point, point$iterator, resultPoints, sumX, sumXX, sumXY, sumY, x_0, y_0;
  sumX = 0;
  sumY = 0;
  sumXX = 0;
  sumXY = 0;
  for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
    point = castTo($next_3(point$iterator), 10);
    x_0 = point.x_0;
    y_0 = point.y_0;
    sumX += x_0;
    sumY += y_0;
    sumXX += x_0 * x_0;
    sumXY += x_0 * y_0;
  }
  m = (points.array.length * sumXY - sumX * sumY) / (points.array.length * sumXX - sumX * sumX);
  b = sumY / points.array.length - m * sumX / points.array.length;
  resultPoints = new ArrayList;
  for (i = 0; i < points.array.length; i++) {
    x_0 = (checkCriticalElementIndex(i, points.array.length) , castTo(points.array[i], 10)).x_0;
    y_0 = x_0 * m + b;
    $add_1(resultPoints, new CFPoint(x_0, y_0));
  }
  return new RegressionData(m, b, resultPoints);
}

defineClass(209, 1, {209:1}, RegressionData);
_.b = 0;
_.m_0 = 0;
var Lcom_domo_charting_graphs_RegressionData_2_classLit = createForClass('com.domo.charting.graphs', 'RegressionData', 209);
function RegressionInfo(lastActualValIndex, regressionVals){
  this.lastActualValIndex = lastActualValIndex;
  this.regressionValues = regressionVals;
}

defineClass(181, 1, {}, RegressionInfo);
_.lastActualValIndex = 0;
var Lcom_domo_charting_graphs_RegressionInfo_2_classLit = createForClass('com.domo.charting.graphs', 'RegressionInfo', 181);
function $clinit_ScaleGraph(){
  $clinit_ScaleGraph = emptyMethod;
  noPadding_0 = new CFDimension(0, 0);
}

function $addScale(this$static, index_0, scale){
  $add_0(this$static.scales, index_0, scale);
  this$static.treatAsSmall && (scale.isHidden = true);
}

function $addScale_0(this$static, scale){
  $add_1(this$static.scales, scale);
  this$static.treatAsSmall && (scale.isHidden = true);
}

function $adjustDataLabelFontSizeIfNeeded(this$static){
  var categoryScale, labelFontSize;
  if (this$static.isHorizontal) {
    categoryScale = $getCategoryScale(this$static);
    if (!!categoryScale && instanceOf(categoryScale, 36)) {
      labelFontSize = $getCurrentLabelFontSize(castTo(categoryScale, 36));
      labelFontSize > 0 && !!this$static.dataLabel && !!this$static.dataLabel.font_0 && labelFontSize < this$static.dataLabel.font_0.size_0 && $setSize_0(this$static.dataLabel.font_0, labelFontSize);
    }
  }
}

function $annotationsHidden_0(this$static){
  if (!!this$static.chart && this$static.chart.hideAnnotations || this$static.hideAnnotations)
    return true;
  return false;
}

function $clearScaleHover(this$static, rnd){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.setHoverEffects_1(null, rnd, -1);
  }
}

function $drawOrFormatAnnotations(this$static, formatOnly){
  var annotPos, annotation, annotation$iterator, annotationList, annotations, catIndexMap, catRowMap, curIndex, displayedAnnotations, entry, key, key$iterator, label_0, outerIter, point, row, row$iterator, scale, timeMS, visibleIndex;
  if (!this$static.annotations || this$static.annotations.size_1() == 0)
    return;
  displayedAnnotations = new ArrayList;
  if (formatOnly) {
    for (annotation$iterator = this$static.annotations.iterator(); annotation$iterator.hasNext_0();) {
      annotation = castTo(annotation$iterator.next_1(), 46);
      annotation.isVisible = false;
    }
    this$static.annotationsFormatted = true;
  }
  if ((!!this$static.annotations && this$static.annotations.size_1() > 0 || this$static.chart.inAddAnnotationMode) && !$annotationsHidden_0(this$static)) {
    scale = $getCategoryScale(this$static);
    if (!!scale && !!this$static.annotationMap) {
      if (instanceOf(scale, 56)) {
        for (key$iterator = (outerIter = (new AbstractMap$1(this$static.annotationMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
          key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
          timeMS = getTimeMSForDateString(key, null, null, null);
          if (eq(timeMS.value_0, 0)) {
            annotations = castTo($getStringValue(this$static.annotationMap, key), 42);
            !!annotations && annotations.size_1() > 0 && castTo(annotations.get_1(0), 46).point1 != null && (timeMS = getTimeMSForDateString(castTo(annotations.get_1(0), 46).point1, null, null, null));
          }
          if (!!timeMS && neq(timeMS.value_0, 0)) {
            row = $getRowForTimeMS(this$static, timeMS);
            !row && (row = $getRowForName(this$static, key));
            annotationList = castTo($getStringValue(this$static.annotationMap, key), 42);
            annotationList = ($clinit_Annotation() , annotationList.sort_0(new Annotation$1) , annotationList);
            annotPos = $getPositionForTime(castTo(scale, 56), timeMS.value_0);
            if (annotPos >= 0 && annotPos <= scale.getLength()) {
              annotPos += scale.getMinPosition();
              point = new CFPoint(0, 0);
              this$static.isHorizontal?(point.y_0 = annotPos):(point.x_0 = annotPos);
              if (formatOnly) {
                for (annotation$iterator = annotationList.iterator(); annotation$iterator.hasNext_0();) {
                  annotation = castTo(annotation$iterator.next_1(), 46);
                  annotation.row = row;
                  annotation.isVisible = true;
                  displayedAnnotations.array[displayedAnnotations.array.length] = annotation;
                }
              }
               else 
                $drawAnnotationHints(this$static, annotationList, point);
            }
          }
        }
      }
       else {
        catIndexMap = new HashMap;
        catRowMap = new HashMap;
        if (this$static.data_0.hasHiddenRows) {
          visibleIndex = 0;
          for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
            row = castTo(row$iterator.next_1(), 7);
            if (!row.hidden) {
              $putStringValue(catIndexMap, $getName(row), valueOf(visibleIndex++));
              $putStringValue(catRowMap, $getName(row), row);
            }
          }
        }
         else {
          for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
            row = castTo(row$iterator.next_1(), 7);
            $putStringValue(catIndexMap, $getName(row), valueOf(row.curIndex));
            $putStringValue(catRowMap, $getName(row), row);
          }
        }
        for (key$iterator = (outerIter = (new AbstractMap$1(this$static.annotationMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); key$iterator.val$outerIter2.hasNext_0();) {
          key = (entry = castTo(key$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
          curIndex = castTo(key == null?getEntryValueOrNull($getEntry(catIndexMap.hashCodeMap, null)):$get_3(catIndexMap.stringMap, key), 29);
          row = castTo(key == null?getEntryValueOrNull($getEntry(catRowMap.hashCodeMap, null)):$get_3(catRowMap.stringMap, key), 7);
          if (curIndex) {
            annotationList = castTo($getStringValue(this$static.annotationMap, key), 42);
            annotationList = ($clinit_Annotation() , annotationList.sort_0(new Annotation$1) , annotationList);
            annotPos = scale.getMinPosition() + scale.getPositionForValue(curIndex.value_0);
            point = new CFPoint(0, 0);
            this$static.isHorizontal?(point.y_0 = annotPos):(point.x_0 = annotPos);
            if (formatOnly) {
              for (annotation$iterator = annotationList.iterator(); annotation$iterator.hasNext_0();) {
                annotation = castTo(annotation$iterator.next_1(), 46);
                annotation.row = row;
                annotation.isVisible = true;
                displayedAnnotations.array[displayedAnnotations.array.length] = annotation;
              }
            }
             else 
              $drawAnnotationHints(this$static, annotationList, point);
          }
        }
      }
    }
    if (formatOnly && displayedAnnotations.array.length > 0) {
      $sort(displayedAnnotations, new ScaleGraph$1);
      label_0 = 'A';
      for (annotation$iterator = new ArrayList$1(displayedAnnotations); annotation$iterator.i < annotation$iterator.this$01.array.length;) {
        annotation = castTo($next_3(annotation$iterator), 46);
        annotation.label_0 = label_0;
        label_0 = $getNextAnnotationLabel(label_0);
      }
    }
  }
}

function $format_5(this$static, rnd){
  var lastArg, numCols, numRows, scale, scale$iterator, useLineColors;
  this$static.rnd = rnd;
  if (!!this$static.playControl && !this$static.treatAsSmall && !this$static.isThumbnail && !this$static.typeAttributes.isPopPlay) {
    $setHeight(this$static.bnds, this$static.chart.dimension.height_0);
    $setWidth(this$static.bnds, this$static.chart.dimension.width_0);
  }
  clearGraphicElementArray(this$static.backGeAry);
  clearGraphicElementArray(this$static.geAry);
  this$static.frontGeAry.clear_0();
  this$static.dataLabel = new DataLabel(this$static);
  this$static.dataLabelText != null && this$static.dataLabelVisible && $setFormatString(this$static.dataLabel, this$static.dataLabelText);
  $resetAnnotations(this$static);
  this$static.resetHiddenRowsButton = null;
  $setCloseZoomSize(this$static);
  this$static.legend = $getLegend(this$static);
  this$static.annotationView = $getAnnotationView(this$static);
  if (!this$static.data_0 || this$static.data_0.numVisibleRows == 0 || this$static.data_0.numVisibleCols == 0) {
    $addNoDataExistsMessage(this$static);
    !!this$static.legend && instanceOf(this$static.legend, 66) && $formatFromGraph_1(castTo(this$static.legend, 66), rnd);
    for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      scale.format_1(rnd, 0, 0, 0);
    }
    return;
  }
   else {
    for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      $reset_4(scale);
    }
  }
  !!this$static.legend && (this$static.treatAsSmall || this$static.simplifiedForMobile || this$static.typeAttributes.isPopPlay?(this$static.legend.isHidden = true):this$static.verticalLayout?(this$static.legend.position = 1):!!this$static.handler && instanceOf(this$static.handler, 64) && (this$static.legend.position = castTo(this$static.handler, 64).getDefaultLegendPosition()));
  $processChartOptions_2(this$static);
  $setCategoryScaleToCorrectScaleType(this$static);
  if (this$static.typeAttributes.isPopPlay && !this$static.playControl) {
    $setHeight(this$static.bnds, this$static.bnds.height_0 - 30);
    this$static.playControl = new PlayControl(this$static.chart, this$static);
    $format_4(this$static.playControl, round_int(this$static.bnds.x_0), round_int($getBottom(this$static.bnds)), round_int(this$static.bnds.width_0));
  }
  $resizeVerticallyIfNeeded_0(this$static, rnd);
  useLineColors = false;
  (this$static.graphType == 2 || this$static.graphType == 3 || this$static.typeAttributes.isSymbolOverlay || this$static.typeAttributes.isSymbol) && (useLineColors = true);
  this$static.graphType == 11 && this$static.typeAttributes.isHighLow && (useLineColors = true);
  $initColors(this$static, useLineColors);
  !!this$static.handler && this$static.handler.initColors();
  numCols = $getNumCols(this$static.data_0);
  numRows = this$static.data_0.numVisibleRows;
  !!this$static.annotations && this$static.annotations.size_1() > 0 && !$annotationsHidden_0(this$static) && $combineAnnotationsIntoMap(this$static);
  $formatScalesAndLegend(this$static, rnd, numRows, numCols);
  $setInnerBounds(this$static);
  $adjustDataLabelFontSizeIfNeeded(this$static);
  !!this$static.handler && this$static.handler.format_0(rnd);
  !!this$static.chart && this$static.chart.includeJsonMap && $processSeriesInfoForJsonMap(this$static);
  !!this$static.scaleMarkers && this$static.scaleMarkers.size_1() > 0 && $addScaleMarkers(this$static, this$static.scaleMarkers);
  this$static.geTopScaleMarkerText = $getTopScaleMarkerTextGe(this$static, rnd);
  $hasTopScaleMarkers(this$static) && !!this$static.geTopScaleMarkerText?$setGoalShape(this$static.chart, (lastArg = this$static.geTopScaleMarkerText , new CFDimension(this$static.bnds.width_0, 20) , lastArg)):(this$static.chart.goalShape = null , undefined);
}

function $formatScalesAndLegend(this$static, rnd, numRows, numCols){
  var grphBnds, i, numPasses, scale, scale$iterator, scale$iterator0, scale$iterator1, scale$iterator2, grphBnds_0, legendBottom, legendTop, legendRight, legendLeft, legend, annotationView, forecastUIPanel;
  !!this$static.handler && this$static.handler.preScaleLegendFormat();
  for (scale$iterator0 = new ArrayList$1(this$static.scales); scale$iterator0.i < scale$iterator0.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator0), 53);
    instanceOf(scale, 27) && castTo(scale, 27).checkForWarningOnNegativeNumbers() && $setWarningMessage(this$static.chart, getString('WARN_INVALID_FOR_LOG_SCALE', this$static.chart.locale));
  }
  numPasses = 1;
  this$static.textAndTicksInBounds?(numPasses = 4):!!this$static.annotationView && (numPasses = 2);
  for (scale$iterator1 = new ArrayList$1(this$static.scales); scale$iterator1.i < scale$iterator1.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator1), 53);
    grphBnds = scale.graph.bnds;
    scale.position == 1?(scale.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):scale.position == 0?(scale.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):scale.position == 3?(scale.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):scale.position == 2?(scale.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0)):(scale.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0));
  }
  for (i = 0; i < numPasses; i++) {
    if (i > 0 && !!this$static.annotationView && $hasVisibleAnnotations(this$static)) {
      !this$static.annotationView.bnds && $setInitialBounds(this$static.annotationView);
      $formatFromGraph(this$static.annotationView, rnd);
      $moveRelativeToGraphBounds(this$static.annotationView);
    }
    if (this$static.legend) {
      instanceOf(this$static.legend, 66)?$formatFromGraph_1(castTo(this$static.legend, 66), rnd):instanceOf(this$static.legend, 133)?$formatFromGraph_2(castTo(this$static.legend, 133), rnd):this$static.legend.format_0(rnd);
      $moveRelativeToGraphBounds_1(this$static.legend, this$static.annotationView);
    }
    if (i > 0 && !!this$static.forecastUIPanel) {
      !this$static.forecastUIPanel.bnds && $setInitialBounds_0(this$static.forecastUIPanel);
      $formatFromGraph_0(this$static.forecastUIPanel, rnd);
      $moveRelativeToGraphBounds_0(this$static.forecastUIPanel, this$static.annotationView, this$static.legend);
    }
    this$static.textAndTicksInBounds && $syncScaleMargins(this$static);
    for (scale$iterator2 = new ArrayList$1(this$static.scales); scale$iterator2.i < scale$iterator2.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator2), 53);
      scale.format_1(rnd, numRows, numCols, i);
      grphBnds_0 = scale.graph.bnds;
      legendBottom = 0;
      legendTop = 0;
      legendRight = 0;
      legendLeft = 0;
      legend = $getLegend(scale.graph);
      !!legend && !!legend.bnds && (legend.position == 2?(legendRight = legend.bnds.width_0):legend.position == 1?(legendBottom = legend.bnds.height_0):legend.position == 0?(legendLeft = legend.bnds.width_0):legend.position == 3 && (legendTop = legend.bnds.height_0));
      annotationView = $getAnnotationView(scale.graph);
      !!annotationView && !!annotationView.bnds && (annotationView.position == 2?(legendRight += annotationView.bnds.width_0):annotationView.position == 1?(legendBottom += annotationView.bnds.height_0):annotationView.position == 0?(legendLeft += annotationView.bnds.width_0):annotationView.position == 3 && (legendTop += annotationView.bnds.height_0));
      forecastUIPanel = $getForecastUIPanel(scale.graph);
      !!forecastUIPanel && !!forecastUIPanel.bnds && (legendRight += forecastUIPanel.bnds.width_0);
      scale.graph.textAndTicksInBounds?!!scale.bnds && (scale.position == 1?$setY_0(scale.bnds, grphBnds_0.y_0 + grphBnds_0.height_0 - (legendBottom + scale.bnds.height_0)):scale.position == 0?$setX_0(scale.bnds, grphBnds_0.x_0 + legendLeft):scale.position == 3?$setY_0(scale.bnds, grphBnds_0.y_0 + legendTop):scale.position == 2 && $setX_0(scale.bnds, grphBnds_0.x_0 + grphBnds_0.width_0 - (scale.bnds.width_0 + legendRight))):scale.position == 0?$setX_0(scale.bnds, grphBnds_0.x_0 - scale.bnds.width_0):scale.position == 3 && $setY_0(scale.bnds, grphBnds_0.y_0 - scale.bnds.height_0);
    }
    this$static.textAndTicksInBounds && $syncScaleMargins(this$static);
    if (this$static.annotationView) {
      $drawOrFormatAnnotations(this$static, true);
      $createDrawObjects(this$static.annotationView);
    }
    !!this$static.forecastUIPanel && $createDrawObjects_0(this$static.forecastUIPanel);
  }
  !!this$static.legend && this$static.legend.createDrawObjects();
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.createGridDrawObjects(rnd);
    scale.addLabels(rnd);
  }
}

function $getBarHandler(this$static){
  if (instanceOf(this$static.handler, 60))
    return castTo(this$static.handler, 60);
  if (instanceOf(this$static.handler, 111))
    return castTo(this$static.handler, 111).barHandler;
  return null;
}

function $getCategoryScale(this$static){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    if (scale.type_0 == ST_CATEGORY)
      return scale;
  }
  return null;
}

function $getCategoryScaleFontHeight(this$static, rnd){
  var height, scale, scaleFont;
  height = 20;
  scale = $getCategoryScale(this$static);
  if (scale) {
    scaleFont = scale.labelFont;
    !!scaleFont && (height = (isNaN_0(scaleFont.lineHeight) && (scaleFont.lineHeight = rnd.measureText_0('A', scaleFont).height_0) , scaleFont.lineHeight));
  }
  return height;
}

function $getCurrentDragRectGE(this$static){
  var dataObj, ge, ge$iterator;
  for (ge$iterator = this$static.frontGeAry.iterator(); ge$iterator.hasNext_0();) {
    ge = castTo(ge$iterator.next_1(), 12);
    dataObj = $getDataObjectForGE_0(this$static, ge);
    if (dataObj != null && instanceOfString(dataObj) && $equals_2(castToString(dataObj), 'DragRect'))
      return ge;
  }
  return null;
}

function $getDataLabelFormatterForCell(this$static, cell){
  var numberFormatter, valueScale;
  valueScale = $getValueScaleForCell(this$static, cell);
  numberFormatter = this$static.dataLabelNumberFormatter;
  !!valueScale && (numberFormatter = $getDataLabelNumberFormatter(valueScale));
  return numberFormatter;
}

function $getGridBkgGE(this$static){
  var adjacentScale, bkgGe, gridRect, gridShape, innerBndsAdj, innerBndsVS, valScale;
  valScale = $getValueScaleByNumber(this$static, 0);
  if (valScale) {
    adjacentScale = $getAdjacentScale(valScale);
    innerBndsAdj = $getInnerBoundsRectWithPadding(adjacentScale);
    innerBndsVS = $getInnerBoundsRectWithPadding(valScale);
    bkgGe = new GraphicElement;
    valScale.position == 3 || valScale.position == 1?(gridRect = new CFRect(innerBndsVS.x_0, innerBndsAdj.y_0, innerBndsVS.width_0, innerBndsAdj.height_0)):(gridRect = new CFRect(innerBndsAdj.x_0, innerBndsVS.y_0, innerBndsAdj.width_0, innerBndsVS.height_0));
    gridShape = new CFShape_1(gridRect, new CFFill(this$static.gridBkgColor), null);
    !bkgGe.shapeAry && (bkgGe.shapeAry = new ArrayList);
    $add_1(bkgGe.shapeAry, gridShape);
    return bkgGe;
  }
  return null;
}

function $getHoverFormatterForCell(this$static, cell){
  var numberFormatter, valueScale;
  valueScale = $getValueScaleForCell(this$static, cell);
  numberFormatter = this$static.hoverNumberFormatter;
  !!valueScale && (numberFormatter = $getHoverNumberFormatter(valueScale));
  numberFormatter = $setHoverFormatOverrides(this$static, numberFormatter);
  return numberFormatter;
}

function $getHoverLabelTextForCell(this$static, cell, defaultText){
  var valueScale;
  valueScale = $getValueScaleForCell(this$static, cell);
  if (!!valueScale && valueScale.hoverLabelTextOverride != null)
    return valueScale.hoverLabelTextOverride;
  return defaultText;
}

function $getHvrDataStrForScale(this$static, scaleType, scale){
  var index_0;
  index_0 = $indexOf_1(this$static.scales, scale, 0);
  return 'obj:scale' + scaleType + ':' + index_0;
}

function $getLineHandler(this$static){
  if (instanceOf(this$static.handler, 110))
    return castTo(this$static.handler, 110);
  if (instanceOf(this$static.handler, 111))
    return castTo(this$static.handler, 111).lineHandler;
  return null;
}

function $getNearestShapeUnderPoint(this$static, x_0, y_0, rnd, innerBounds, isHorizontal){
  var shape_0;
  shape_0 = getNearestShapeUnderPointForGEAry(x_0, y_0, this$static.geAry, rnd, this$static, innerBounds, isHorizontal);
  return shape_0;
}

function $getNextAnnotationLabel(curLabel){
  var lastChar, nextChar, nextPrevChar, prevLastChar;
  if (curLabel == null || $trim(curLabel).length == 0)
    return curLabel;
  lastChar = $charAt_0(curLabel, curLabel.length - 1);
  if (lastChar == 90) {
    if (curLabel.length > 1) {
      prevLastChar = $charAt_0(curLabel, curLabel.length - 2);
      nextPrevChar = String.fromCharCode(prevLastChar + 1 & $intern_26);
      curLabel = $substring_0(curLabel, 0, curLabel.length - 2) + ('' + nextPrevChar) + 'A';
    }
     else {
      return 'AA';
    }
  }
   else {
    nextChar = String.fromCharCode(lastChar + 1 & $intern_26);
    curLabel = $substring_0(curLabel, 0, curLabel.length - 1) + ('' + nextChar);
  }
  return curLabel;
}

function $getNumExtraProjectedItems(this$static){
  var minMaxScale;
  minMaxScale = castTo($getScaleByTypeNumber(this$static, ST_MINMAX, 0), 67);
  if (minMaxScale)
    return minMaxScale.extraProjectionIncrements;
  return 0;
}

function $getPaddingX(this$static){
  if (this$static.handler)
    return this$static.handler.getPaddingX();
  return noPadding_0;
}

function $getPaddingY(this$static){
  if (this$static.handler)
    return this$static.handler.getPaddingY();
  return noPadding_0;
}

function $getRowForName(this$static, name_0){
  var row, row$iterator;
  if (name_0 != null) {
    for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if ($getName(row) != null && $equals_2($getName(row), name_0))
        return row;
    }
  }
  return null;
}

function $getRowForTimeMS(this$static, timeMS){
  var row, row$iterator;
  if (timeMS) {
    for (row$iterator = this$static.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      if (neq(row.timeMS, 0) && eq(row.timeMS, timeMS.value_0))
        return row;
    }
  }
  return null;
}

function $getScaleByPosition(this$static, position){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    if (scale.position == position)
      return scale;
  }
  return null;
}

function $getScaleByTypeNumber(this$static, type_0, number){
  var count, scale, scale$iterator;
  count = 0;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    if (scale.type_0 == type_0) {
      if (number == count)
        return scale;
      ++count;
    }
  }
  return null;
}

function $getScaleForHvrDataStr(this$static, hvrDataStr){
  var index_0, indexStr, separatorPos;
  if (hvrDataStr != null && $equals_2(hvrDataStr.substr(0, 5), 'scale') && hvrDataStr.indexOf(':') != -1) {
    separatorPos = hvrDataStr.indexOf(':');
    indexStr = hvrDataStr.substr(separatorPos + 1, hvrDataStr.length - (separatorPos + 1));
    index_0 = getInt(indexStr, -1);
    if (index_0 != -1 && index_0 < this$static.scales.array.length)
      return castTo($get_2(this$static.scales, index_0), 53);
  }
  return null;
}

function $getScrollableHeightForChartWithDataTable(this$static, rnd, currentHeight){
  var scale, tableHeight;
  scale = $getScaleByPosition(this$static, 1);
  if (instanceOf(scale, 36)) {
    tableHeight = $getTableHeight(castTo(scale, 36), rnd, true);
    if (tableHeight > currentHeight * 0.3) {
      return round_int(currentHeight * 0.85 + tableHeight);
    }
  }
  return currentHeight;
}

function $getShapeUnderPoint_2(this$static, x_0, y_0, rnd){
  var allowSDO, annotGeAry, dataObject, i, innerBnds, scale, shape_0;
  shape_0 = null;
  if (this$static.curDisplayedAnnotation) {
    annotGeAry = new ArrayList;
    $add_1(annotGeAry, this$static.curDisplayedAnnotation.popup);
    shape_0 = getShapeUnderPointForGEAry(x_0, y_0, annotGeAry, rnd, this$static);
  }
  !!shape_0 && !!this$static.playControl && (shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this$static.playControl.geAry, rnd, this$static));
  if (!shape_0) {
    if (this$static.scales) {
      for (i = 0; i < this$static.scales.array.length; i++) {
        scale = castTo($get_2(this$static.scales, i), 53);
        shape_0 = getShapeUnderPointForGEAry(x_0, y_0, scale.frontGeAry, rnd, this$static);
        if (shape_0)
          break;
        shape_0 = getShapeUnderPointForGEAry(x_0, y_0, scale.geAry, rnd, this$static);
        if (shape_0)
          break;
      }
    }
  }
  !shape_0 && (shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this$static.frontGeAry, rnd, this$static));
  if (!shape_0) {
    shape_0 = getShapeUnderPointForGEAry(x_0, y_0, this$static.geAry, rnd, this$static);
    innerBnds = this$static.innerBounds;
    if (!!innerBnds && !!shape_0) {
      innerBnds = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
      $inflate(innerBnds, 5);
      $containsPoint_0(innerBnds, new CFPoint(x_0, y_0)) || (shape_0 = null);
      dataObject = $getDataObjectForShape_0(this$static, shape_0);
      allowSDO = this$static.handler.allowSetDataObjectWhenUsingCardBus(dataObject);
      allowSDO && !!shape_0 && $usingCardBus(this$static.chart) && dataObject != null && instanceOf(dataObject, 18) && ($equals_2('legacy', this$static.data_0.originalDataType) || this$static.data_0.isPeriodOverPeriod) && $setDataObject_0(shape_0, castTo(dataObject, 18).cell.row);
    }
  }
  return shape_0;
}

function $getTimeScale(this$static){
  var i;
  for (i = 0; i < this$static.scales.array.length; i++) {
    if (instanceOf($get_2(this$static.scales, i), 56))
      return castTo($get_2(this$static.scales, i), 56);
  }
  return null;
}

function $getTopScaleMarkerTextGe(this$static, rnd){
  var left, scale, sm, sm$iterator, topSMGE;
  topSMGE = null;
  left = this$static.bnds.x_0;
  if ($hasTopScaleMarkers(this$static)) {
    topSMGE = new GraphicElement;
    for (sm$iterator = this$static.scaleMarkers.iterator(); sm$iterator.hasNext_0();) {
      sm = castTo(sm$iterator.next_1(), 86);
      if (sm.goalDisplay == 2) {
        scale = $getValueScaleByNumber(this$static, 0);
        sm.onSecondaryScale && (scale = $getValueScaleByNumber(this$static, 1));
        if (!scale)
          return null;
        left = $addTopTextToGE(sm, rnd, scale, topSMGE, left, this$static.bnds.y_0 - 20);
        left += 5;
      }
    }
  }
  return topSMGE;
}

function $getValueScale(this$static){
  var scale, scale$iterator;
  if (this$static.scales) {
    for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      if (scale.type_0 == 0 || instanceOf(scale, 95))
        return scale;
    }
  }
  return null;
}

function $getValueScaleByNumber(this$static, number){
  var count, scale, scale$iterator;
  count = 0;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    if (scale.type_0 == 0 && instanceOf(scale, 27) || instanceOf(scale, 95)) {
      if (number == count)
        return castTo(scale, 27);
      ++count;
    }
  }
  return null;
}

function $getValueScaleForCell(this$static, cell){
  var colRowInfo, scale, valScale;
  valScale = this$static.handler.getValueScaleForCell(cell);
  if (!valScale) {
    colRowInfo = null;
    !!cell && (colRowInfo = cell.column);
    valScale = (!!colRowInfo && colRowInfo.usesSecondaryScale?(scale = $getValueScaleByNumber(this$static, 1)):(scale = $getValueScaleByNumber(this$static, 0)) , scale);
  }
  return valScale;
}

function $getValueScaleForColumn(col, valueScale, valueScale2){
  if (col.usesSecondaryScale)
    return valueScale2;
  return valueScale;
}

function $getXScale(this$static, secondary){
  var tbScale;
  tbScale = $getScaleByPosition(this$static, 1);
  if (!!tbScale && tbScale.isSecondary == secondary && !instanceOf(tbScale, 67))
    return tbScale;
  tbScale = $getScaleByPosition(this$static, 3);
  if (!!tbScale && tbScale.isSecondary == secondary)
    return tbScale;
  return null;
}

function $getYScale(this$static, secondary){
  var lrScale;
  lrScale = $getScaleByPosition(this$static, 0);
  if (!!lrScale && lrScale.isSecondary == secondary && !instanceOf(lrScale, 67))
    return lrScale;
  lrScale = $getScaleByPosition(this$static, 2);
  if (!!lrScale && lrScale.isSecondary == secondary)
    return lrScale;
  return null;
}

function $hasDataTable(this$static){
  var bottomScale;
  bottomScale = $getScaleByPosition(this$static, 1);
  if (!!bottomScale && instanceOf(bottomScale, 36) && $getShowDataTable(castTo(bottomScale, 36), true))
    return true;
  return false;
}

function $hasDualValueScales(this$static){
  var bottomScale, leftScale, rightScale, topScale;
  if (this$static.isHorizontal) {
    topScale = $getScaleByPosition(this$static, 3);
    bottomScale = $getScaleByPosition(this$static, 1);
    if (!!topScale && !!bottomScale && instanceOf(topScale, 27) && instanceOf(bottomScale, 27))
      return true;
  }
   else {
    leftScale = $getScaleByPosition(this$static, 0);
    rightScale = $getScaleByPosition(this$static, 2);
    if (!!leftScale && !!rightScale && instanceOf(leftScale, 27) && instanceOf(rightScale, 27))
      return true;
  }
  return false;
}

function $hasProjections(this$static){
  var scale;
  scale = castTo($getScaleByTypeNumber(this$static, ST_MINMAX, 0), 67);
  if (!!scale && scale.projectionMethod != 0)
    return true;
  return false;
}

function $hasTimeScale(this$static){
  var i;
  for (i = 0; i < this$static.scales.array.length; i++) {
    if (instanceOf($get_2(this$static.scales, i), 56))
      return true;
  }
  return false;
}

function $hasTopScaleMarkers(this$static){
  var sm, sm$iterator;
  if (this$static.scaleMarkers) {
    for (sm$iterator = this$static.scaleMarkers.iterator(); sm$iterator.hasNext_0();) {
      sm = castTo(sm$iterator.next_1(), 86);
      if (sm.goalDisplay == 2 && !this$static.treatAsSmall && !this$static.isThumbnail && sm.type_0 != 2)
        return true;
    }
  }
  return false;
}

function $hasVisibleAnnotations(this$static){
  var annotation, annotation$iterator;
  for (annotation$iterator = this$static.annotations.iterator(); annotation$iterator.hasNext_0();) {
    annotation = castTo(annotation$iterator.next_1(), 46);
    if (annotation.isVisible)
      return true;
  }
  return false;
}

function $is100pctStacked(this$static){
  return this$static.typeAttributes.percentOfCategoryData && this$static.typeAttributes.isStacked && !this$static.typeAttributes.isNestedBar && (this$static.graphType == 1 || this$static.graphType == 0);
}

function $isHStackedBar(this$static){
  return (this$static.graphType == 1 || this$static.graphType == 5 || this$static.graphType == 31) && this$static.typeAttributes.isStacked;
}

function $isStackedBar(this$static){
  return (this$static.graphType == 0 || this$static.graphType == 4 || this$static.graphType == 30) && this$static.typeAttributes.isStacked;
}

function $isStackedNonNested(this$static){
  return ((this$static.graphType == 0 || this$static.graphType == 4 || this$static.graphType == 30) && this$static.typeAttributes.isStacked || (this$static.graphType == 1 || this$static.graphType == 5 || this$static.graphType == 31) && this$static.typeAttributes.isStacked) && !this$static.typeAttributes.isNestedBar;
}

function $removeDependentCompsFromCompArray_0(this$static){
  $removeDependentCompsFromCompArray(this$static);
  this$static.legend = null;
  this$static.annotationView = null;
  this$static.forecastUIPanel = null;
}

function $removeGoalScaleMarker(this$static){
  var marker, marker$iterator, markerToRemove, scale, scale$iterator;
  if (!!this$static.scaleMarkers && this$static.scaleMarkers.size_1() > 0) {
    markerToRemove = null;
    for (marker$iterator = this$static.scaleMarkers.iterator(); marker$iterator.hasNext_0();) {
      marker = castTo(marker$iterator.next_1(), 86);
      if (marker.isGoal) {
        markerToRemove = marker;
        break;
      }
    }
    if (markerToRemove) {
      this$static.scaleMarkers.remove(markerToRemove);
      for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
        scale = castTo($next_3(scale$iterator), 53);
        instanceOf(scale, 27) && $removeScaleMarker(castTo(scale, 27), markerToRemove);
      }
    }
  }
}

function $removeScale(this$static, scale){
  !!scale && $remove_3(this$static.scales, scale);
}

function $resetVerticalHeight(this$static){
  var chartDimension;
  if (!this$static.isThumbnail && !this$static.treatAsSmall && !this$static.simplifiedForMobile && this$static.originalHeight > 0 && this$static.originalHeight != this$static.bnds.height_0 && this$static.rnd.supportsCanvasResize() != 0) {
    chartDimension = this$static.chart.originalDimension;
    this$static.rnd.setCanvasSize(round_int(chartDimension.width_0), round_int(chartDimension.height_0));
    $resetVerticalSizeOnly(this$static.chart);
    $setVerticalSizeOnly(this$static.chart, chartDimension.height_0);
    this$static.originalHeight = -1;
  }
}

function $resizeVerticallyIfNeeded_0(this$static, rnd){
  var chartDimension, currentHeight, height, maxHeight, numRows, resize;
  if ($resizeable(this$static)) {
    numRows = this$static.data_0.numVisibleRows;
    this$static.displayLimit > 0 && numRows > this$static.displayLimit + 1 && (numRows = this$static.displayLimit + 1);
    maxHeight = rnd.supportsCanvasResize();
    maxHeight == -1 && (maxHeight = 20000);
    chartDimension = this$static.chart.dimension;
    currentHeight = round_int(chartDimension.height_0);
    !this$static.isHorizontal && $hasDataTable(this$static)?this$static.originalHeight != -1?(height = $getScrollableHeightForChartWithDataTable(this$static, rnd, this$static.originalHeight)):(height = $getScrollableHeightForChartWithDataTable(this$static, rnd, currentHeight)):(height = round_int(numRows * ($getCategoryScaleFontHeight(this$static, rnd) + 1)));
    resize = false;
    if (this$static.bnds.height_0 != height) {
      if (this$static.bnds.height_0 < height) {
        height > maxHeight && (height = maxHeight);
        this$static.originalHeight == -1 && (this$static.originalHeight = currentHeight);
        resize = true;
      }
       else if (height > this$static.originalHeight && this$static.originalHeight != -1)
        resize = true;
      else if (height < this$static.originalHeight) {
        height = this$static.originalHeight;
        resize = true;
      }
      if (resize) {
        rnd.setCanvasSize(round_int(chartDimension.width_0), height);
        $setVerticalSizeOnly(this$static.chart, height);
      }
    }
  }
}

function $setCategoryScaleToCorrectScaleType(this$static){
  var baseScale, groupedScaleCombined, newScale, newTrellisScale, oldCatScale, scalePosition, showDataTable;
  showDataTable = isTrue($getChartOptionAsString(this$static, 'show_data_table'));
  groupedScaleCombined = false;
  $getChartOptionAsString(this$static, 'show_extra_categories') != null && $equalsIgnoreCase($getChartOptionAsString(this$static, 'show_extra_categories'), 'Below') && (groupedScaleCombined = true);
  baseScale = $getCategoryScale(this$static);
  if (!!baseScale && !instanceOf(baseScale, 95) && this$static.graphType != 26 && this$static.graphType != 16 && !$isTrellis(this$static) && !showDataTable) {
    if (!instanceOf(baseScale, 56) && !!this$static.data_0 && $hasTimeData(this$static.data_0) && $timeScaleAllowed(this$static) && (this$static.data_0.numVisibleRows > 1 || $getMetaDataSize(this$static.data_0) > 0) && $versionAllowsTimeChange(this$static)) {
      scalePosition = baseScale.position;
      $remove_3(this$static.scales, baseScale);
      oldCatScale = baseScale;
      newScale = new TimeScale(scalePosition, this$static);
      $setLabelFont(newScale, baseScale.labelFont);
      baseScale = newScale;
      $setType_1(baseScale, ST_CATEGORY);
      $add_1(this$static.scales, baseScale);
      this$static.treatAsSmall && (baseScale.isHidden = true);
      graphHasSymbols(this$static.typeAttributes, this$static.graphType) && !$isLineBar(this$static) && (baseScale.minSize = 10);
      oldCatScale.title_0 != null && $setTitle(baseScale, oldCatScale.title_0);
      oldCatScale.isHidden && (baseScale.isHidden = true);
      $sortRows(this$static.data_0, SORT_DATE);
    }
     else if (this$static.graphType == 12 && !!this$static.data_0 && ($equals_2($getRow(this$static.data_0, 0).type_0, 'STRING') || $getRow(this$static.data_0, 0).type_0.indexOf('DATE') != -1 && this$static.neverUseTimeScale)) {
      scalePosition = baseScale.position;
      $remove_3(this$static.scales, baseScale);
      oldCatScale = baseScale;
      if (!!baseScale && !instanceOf(baseScale, 123)) {
        newScale = new XYCategoryScale(scalePosition, this$static);
        $setLabelFont(newScale, baseScale.labelFont);
        baseScale = newScale;
        $setType_1(baseScale, ST_CATEGORY);
      }
      $add_1(this$static.scales, baseScale);
      this$static.treatAsSmall && (baseScale.isHidden = true);
      graphHasSymbols(this$static.typeAttributes, this$static.graphType) && !$isLineBar(this$static) && (baseScale.minSize = 10);
      oldCatScale.title_0 != null && $setTitle(baseScale, oldCatScale.title_0);
      $getChartOptionAsString(this$static, 'cat_scale_date_output_format') != null && instanceOf(this$static.handler, 64) && (!this$static.data_0.isFiscalCalendar || !$equals_2(this$static.data_0.dateGrain, 'QUARTER') && !$equals_2(this$static.data_0.dateGrain, 'MONTH')) && $setScaleDateOutputFormat(castTo(this$static.handler, 64), $getChartOptionAsString(this$static, 'cat_scale_date_output_format'));
    }
     else if (instanceOf(baseScale, 56) && (!$hasTimeData(this$static.data_0) || this$static.data_0.numVisibleRows < 2 && $getMetaDataSize(this$static.data_0) < 1)) {
      $setCategoryScaleToNonTimeScale(this$static);
    }
     else if (instanceOf(baseScale, 56)) {
      $sortRows(this$static.data_0, SORT_DATE);
    }
     else if ($hasTimeData(this$static.data_0) && !this$static.data_0.preSorted && !this$static.isThumbnail) {
      if (!this$static.chartOptions || this$static.chartOptions.get_0('total_sort') == null || equals_Ljava_lang_Object__Z__devirtual$(this$static.chartOptions.get_0('total_sort'), 'none')) {
        $sortRows(this$static.data_0, SORT_DATE);
        $padTimeData(this$static.data_0, this$static, this$static.chart.locale);
      }
    }
  }
   else 
    instanceOf(baseScale, 95) && $hasTimeData(this$static.data_0) && $sortRows(this$static.data_0, SORT_DATE);
  if ($isTrellis(this$static) && !!baseScale && instanceOf(baseScale, 36) && baseScale.position == 1 && !groupedScaleCombined) {
    if (!$getScaleByPosition(this$static, 3)) {
      newTrellisScale = new CategoryScale(3, this$static, true);
      $add_1(this$static.scales, newTrellisScale);
      this$static.treatAsSmall && (newTrellisScale.isHidden = true);
    }
  }
}

function $setCategoryScaleToNonTimeScale(this$static){
  var baseScale, newScale, scalePosition;
  baseScale = $getCategoryScale(this$static);
  if (!instanceOf(baseScale, 36)) {
    scalePosition = baseScale.position;
    $remove_3(this$static.scales, baseScale);
    newScale = new CategoryScale(scalePosition, this$static, false);
    $setLabelFont(newScale, baseScale.labelFont);
    baseScale = newScale;
    $setType_1(baseScale, ST_CATEGORY);
    (this$static.graphType == 2 || this$static.graphType == 3 || this$static.graphType == 6 || this$static.graphType == 7 || this$static.graphType == 19 || this$static.graphType == 21) && (!this$static.typeAttributes || !this$static.typeAttributes.stepLines) && $getNumRows(this$static.data_0) > 1 && $setIsLineType(castTo(baseScale, 36), true);
    $add_1(this$static.scales, baseScale);
    this$static.treatAsSmall && (baseScale.isHidden = true);
  }
}

function $setDateOutputFormat(this$static, value_0){
  value_0 != null && $equals_2(value_0.toLowerCase(), 'default') && (value_0 = null);
  this$static.dateOutputFormat = value_0;
}

function $setForecastUIPanelState(this$static){
  supportsForecastFromScale(this$static, true) && !!this$static.forecastUIPanel?$setEnabled(this$static.forecastUIPanel, true):!!this$static.forecastUIPanel && $setEnabled(this$static.forecastUIPanel, false);
}

function $setInnerBounds(this$static){
  var xScale, xScaleRect, yScale, yScaleRect;
  yScale = $getYScale(this$static, false);
  xScale = $getXScale(this$static, false);
  if (!!xScale && !!yScale) {
    xScaleRect = $getMarginBoundsRect(xScale);
    yScaleRect = $getMarginBoundsRect(yScale);
    this$static.innerBounds = new CFRect(xScaleRect.x_0, yScaleRect.y_0, xScaleRect.width_0, yScaleRect.height_0);
  }
}

function $setNeedsFormat_2(this$static, value_0){
  var scl, scl$iterator;
  if (value_0) {
    this$static.needsFormat = true;
    !!this$static.legend && this$static.legend.setNeedsFormat(true);
    !!this$static.handler && this$static.handler.setNeedsFormat(true);
    !!this$static.annotationView && $setNeedsFormat(this$static.annotationView, true);
    $resetAnnotations(this$static);
    for (scl$iterator = new ArrayList$1(this$static.scales); scl$iterator.i < scl$iterator.this$01.array.length;) {
      scl = castTo($next_3(scl$iterator), 53);
      scl.setNeedsFormat_0();
    }
  }
   else {
    this$static.needsFormat = false;
  }
}

function $setNumExtraProjectedItems(this$static, value_0){
  var minMaxScale;
  minMaxScale = castTo($getScaleByTypeNumber(this$static, ST_MINMAX, 0), 67);
  !!minMaxScale && (minMaxScale.extraProjectionIncrements = value_0);
}

function $setScalesMinSize(this$static, value_0){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    scale.minSize = value_0;
  }
}

function $setValueScaleColumnFormatBasedOnSeriesIndex(this$static, valueScaleIndex, seriesIndex, endSeriesIndex){
  var numFormatter, valueScale;
  valueScale = $getValueScaleByNumber(this$static, valueScaleIndex);
  if (valueScale) {
    while (seriesIndex <= endSeriesIndex) {
      numFormatter = $getColumnFormatForSeriesIndex(this$static, seriesIndex);
      if (numFormatter) {
        !!numFormatter && (valueScale.numberFormatter = numFormatter);
        break;
      }
      ++seriesIndex;
    }
  }
}

function $setWarningGoalMessageDim(this$static, warningGoalMessageDim){
  this$static.warningGoalMessageDim = warningGoalMessageDim;
}

function $shapeIsValidAnnotationPointIfAdding(this$static, shape_0){
  if (this$static.chart.inAddAnnotationMode)
    return this$static.handler.shapeIsValidAnnotationPoint(shape_0);
  return true;
}

function $showDataTable(this$static){
  var scale;
  scale = $getCategoryScale(this$static);
  if (instanceOf(scale, 36) && scale.position == 1 && $getShowDataTable(castTo(scale, 36), false))
    return true;
  return false;
}

function $syncScaleMargins(this$static){
  var bottomScale, forecastRight, leftScale, legendBottom, legendLeft, legendRight, legendTop, rightScale, scl, topScale;
  bottomScale = $getScaleByPosition(this$static, 1);
  topScale = $getScaleByPosition(this$static, 3);
  leftScale = $getScaleByPosition(this$static, 0);
  rightScale = $getScaleByPosition(this$static, 2);
  legendBottom = 0;
  legendTop = 0;
  legendRight = 0;
  legendLeft = 0;
  !!this$static.legend && !!this$static.legend.bnds && (this$static.legend.position == 2?(legendRight = this$static.legend.bnds.width_0):this$static.legend.position == 1?(legendBottom = this$static.legend.bnds.height_0):this$static.legend.position == 0?(legendLeft = this$static.legend.bnds.width_0):this$static.legend.position == 3 && (legendTop = this$static.legend.bnds.height_0));
  !!this$static.annotationView && !!this$static.annotationView.bnds && (this$static.annotationView.position == 2?(legendRight += this$static.annotationView.bnds.width_0):this$static.annotationView.position == 1?(legendBottom += this$static.annotationView.bnds.height_0):this$static.annotationView.position == 0?(legendLeft += this$static.annotationView.bnds.width_0):this$static.annotationView.position == 3 && (legendTop += this$static.annotationView.bnds.height_0));
  if (!!this$static.forecastUIPanel && !!this$static.forecastUIPanel.bnds) {
    forecastRight = this$static.forecastUIPanel.bnds.width_0;
    legendRight += forecastRight;
  }
  if (!!bottomScale && !!bottomScale.bnds) {
    if (!!leftScale && !!leftScale.bnds) {
      bottomScale.bnds.height_0 + legendBottom > leftScale.endMargin && $setEndMargin(leftScale, bottomScale.bnds.height_0 + legendBottom);
      leftScale.bnds.width_0 + legendLeft > bottomScale.startMargin && $setStartMargin(bottomScale, leftScale.bnds.width_0 + legendLeft);
      bottomScale.startMargin > leftScale.bnds.width_0 + legendLeft && $setWidth(leftScale.bnds, bottomScale.startMargin);
    }
     else 
      legendLeft > 0 && (bottomScale.startMargin = legendLeft);
    if (!!rightScale && !!rightScale.bnds) {
      bottomScale.bnds.height_0 + legendBottom > rightScale.endMargin && $setEndMargin(rightScale, bottomScale.bnds.height_0 + legendBottom);
      rightScale.bnds.width_0 + legendRight > bottomScale.endMargin && $setEndMargin(bottomScale, rightScale.bnds.width_0 + legendRight);
    }
     else 
      legendRight > 0 && (bottomScale.endMargin = legendRight);
  }
   else if (legendBottom > 0) {
    !!rightScale && (rightScale.endMargin = legendBottom);
    !!leftScale && (leftScale.endMargin = legendBottom);
  }
  if (!!topScale && !!topScale.bnds) {
    if (!!leftScale && !!leftScale.bnds) {
      topScale.bnds.height_0 + legendTop > leftScale.startMargin && $setStartMargin(leftScale, topScale.bnds.height_0 + legendTop);
      leftScale.bnds.width_0 + legendLeft > topScale.startMargin && $setStartMargin(topScale, leftScale.bnds.width_0 + legendLeft);
    }
     else 
      legendLeft > 0 && (topScale.startMargin = legendLeft);
    if (!!rightScale && !!rightScale.bnds) {
      topScale.bnds.height_0 + legendTop > rightScale.startMargin && $setStartMargin(rightScale, topScale.bnds.height_0 + legendTop);
      rightScale.bnds.width_0 + legendRight > topScale.endMargin && $setEndMargin(topScale, rightScale.bnds.width_0 + legendRight);
    }
     else 
      legendRight > 0 && (topScale.endMargin = legendRight);
  }
   else if (legendTop > 0) {
    !!rightScale && (rightScale.startMargin = legendTop);
    !!leftScale && (leftScale.startMargin = legendTop);
  }
  if (this$static.legend) {
    if (this$static.legend.position == 2 || this$static.legend.position == 0) {
      scl = leftScale;
      !leftScale && (scl = rightScale);
      if (scl) {
        this$static.legend.startMargin = scl.startMargin;
        this$static.legend.endMargin = scl.endMargin;
      }
    }
     else {
      scl = bottomScale;
      !bottomScale && (scl = topScale);
      if (scl) {
        this$static.legend.startMargin = scl.startMargin;
        this$static.legend.endMargin = scl.endMargin;
      }
    }
  }
}

function $timeScaleAllowed(this$static){
  var tmpDisplayLimit;
  if (this$static.neverUseTimeScale)
    return false;
  if (isTrue($getChartOptionAsString(this$static, 'never_use_time_scale'))) {
    this$static.neverUseTimeScale = true;
    return false;
  }
  if (!!this$static.data_0 && $hasChartOptions(this$static) && $getChartOptionAsString(this$static, 'display_limit') != null) {
    tmpDisplayLimit = getInt($getChartOptionAsString(this$static, 'display_limit'), 0);
    if (tmpDisplayLimit > 0 && $getNumRows(this$static.data_0) > tmpDisplayLimit + 1) {
      this$static.neverUseTimeScale = true;
      return false;
    }
  }
  return true;
}

function $updateNumberFormats_0(this$static, copyToScalesFromGraph){
  var numberFormatter, scale, scale$iterator, valueScale;
  $updateNumberFormats(this$static);
  if (this$static.scales) {
    for (scale$iterator = new ArrayList$1(this$static.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      if (instanceOf(scale, 27)) {
        valueScale = castTo(scale, 27);
        copyToScalesFromGraph && (valueScale.graph?(valueScale.numberFormatter = new NumberFormatter_0(valueScale.graph.numberFormatter)):(valueScale.numberFormatter = new NumberFormatter));
        numberFormatter = valueScale.numberFormatter;
        $applyOverrides(numberFormatter, this$static.chartOptions);
      }
    }
  }
}

function $versionAllowsTimeChange(this$static){
  var version;
  version = this$static.chart.version_0;
  if (version < 1) {
    if (this$static.graphType == 4 || this$static.graphType == 0 && !this$static.typeAttributes.isStacked && $getNumCols(this$static.data_0) > 1)
      return false;
  }
  if (version < 6) {
    if (this$static.graphType == 6 || this$static.graphType == 11 || this$static.isHorizontal || this$static.graphType == 0 && (this$static.typeAttributes.isNestedBar || this$static.typeAttributes.isBullet || this$static.typeAttributes.percentOfCategoryData || this$static.typeAttributes.percentOfSeriesData || this$static.typeAttributes.isSymbol || this$static.typeAttributes.isSymbolOverlay))
      return false;
  }
  if (this$static.typeAttributes.isMarimekko)
    return false;
  return true;
}

function ScaleGraph(theChart, name_0, type_0){
  $clinit_ScaleGraph();
  Graph.call(this, theChart, name_0, type_0);
}

defineClass(40, 43, {23:1, 63:1, 43:1, 40:1}, ScaleGraph);
_.adjustLayout = function adjustLayout_2(){
  var scale, scale$iterator;
  if (this.treatAsSmall || this.simplifiedForMobile) {
    !!this.legend && (this.legend.isHidden = true);
    if (this.treatAsSmall) {
      for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
        scale = castTo($next_3(scale$iterator), 53);
        scale.isHidden = true;
      }
      this.dataLabelVisible = false;
      this.hasInteractions = this.allowInteractions;
    }
    this.simplifiedForMobile && (this.hasInteractions = this.allowInteractions);
  }
   else if (this.verticalLayout && !!this.legend) {
    this.legend.position = 1;
    $hasChartOptions(this) && $getChartOptionAsString(this, 'datalabel_text') != null && (this.dataLabelVisible = true);
    this.hasInteractions = this.allowInteractions;
  }
}
;
_.allowHoverTextForPoint = function allowHoverTextForPoint_0(x_0, y_0){
  var rect, valueScale;
  if ((!!this.annotations && this.annotations.size_1() > 0 || this.chart.inAddAnnotationMode) && !$annotationsHidden_0(this)) {
    valueScale = $getValueScaleByNumber(this, 0);
    if (valueScale) {
      rect = $getInnerBoundsRect(valueScale);
      if (rect) {
        if (this.isHorizontal && x_0 > rect.x_0 + rect.width_0)
          return false;
        else if (!this.isHorizontal && y_0 < rect.y_0)
          return false;
      }
    }
  }
  return true;
}
;
_.cancelDrag_0 = function cancelDrag_5(){
  var geDrag;
  if ($isTrellis(this))
    return false;
  geDrag = $getCurrentDragRectGE(this);
  if (geDrag) {
    this.frontGeAry.remove(geDrag);
    return true;
  }
  return false;
}
;
_.drawAnnotations = function drawAnnotations_0(){
  this.annotationsFormatted || $drawOrFormatAnnotations(this, true);
  $drawOrFormatAnnotations(this, false);
}
;
_.drawSupportingBgLayer = function drawSupportingBgLayer_0(rnd){
  var gridBkgGE, scale, scale$iterator;
  if (this.gridBkgColor) {
    gridBkgGE = $getGridBkgGE(this);
    !!gridBkgGE && $draw_2(gridBkgGE, rnd);
  }
  for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    drawGEAry(rnd, scale.backGeAry);
  }
  !!this.playControl && $draw_1(this.playControl, rnd);
}
;
_.drawSupportingFgLayer = function drawSupportingFgLayer_0(rnd){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    drawGEAry(rnd, scale.frontGeAry);
  }
  !!this.legend && $drawSupportingFgLayer(this.legend, rnd);
}
;
_.drawSupportingMainLayer = function drawSupportingMainLayer_0(rnd){
  var scale, scale$iterator;
  for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    drawGEAry(rnd, scale.geAry);
  }
}
;
_.format_0 = function format_33(rnd){
  $format_5(this, rnd);
}
;
_.freeResources = function freeResources_42(dataToKeep){
  var scale, scale$iterator;
  $freeResources_15(this, dataToKeep);
  !!this.warningGoalMessageDim && (this.warningGoalMessageDim = null);
  if (this.scales) {
    for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      scale.freeResources_0();
    }
    this.scales = null;
  }
  if (this.forecastUIPanel) {
    $freeResources_14(this.forecastUIPanel, dataToKeep);
    this.forecastUIPanel = null;
  }
  if (this.annotationView) {
    $freeResources_12(this.annotationView, dataToKeep);
    this.annotationView = null;
  }
  this.innerBounds = null;
  this.dateOutputFormat = null;
  this.geTopScaleMarkerText = null;
}
;
_.getCurFontSize = function getCurFontSize_0(){
  var fontSize, scale, scale$iterator;
  fontSize = $getCurFontSize(this);
  if (fontSize == -1) {
    for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
      scale = castTo($next_3(scale$iterator), 53);
      if (scale.labelFont)
        return scale.labelFont.size_0;
    }
  }
   else {
    return fontSize;
  }
  return -1;
}
;
_.getDataLabelFormatterForCell = function getDataLabelFormatterForCell_0(cell){
  return $getDataLabelFormatterForCell(this, cell);
}
;
_.getHoverFormatterForCell = function getHoverFormatterForCell_0(cell){
  return $getHoverFormatterForCell(this, cell);
}
;
_.getInnerBounds = function getInnerBounds_0(){
  return this.innerBounds;
}
;
_.getShapeUnderPoint = function getShapeUnderPoint_9(x_0, y_0, rnd){
  return $getShapeUnderPoint_2(this, x_0, y_0, rnd);
}
;
_.handleClick = function handleClick_14(shapeClicked){
  var dataObj, needsRepaint, scale;
  needsRepaint = $handleClick_0(this, shapeClicked);
  if (!needsRepaint) {
    if (shapeClicked) {
      dataObj = $getDataObjectForShape(shapeClicked, this);
      if (dataObj != null && instanceOf(dataObj, 37) && $showDataTable(this)) {
        scale = $getCategoryScale(this);
        instanceOf(scale, 36) && $handleClickOnLegendItemInfo(castTo(scale, 36), shapeClicked, castTo(dataObj, 37)) && (needsRepaint = true);
      }
    }
  }
  return needsRepaint;
}
;
_.handleDrag_0 = function handleDrag_7(startX, startY, curX, curY){
  var ge, geDrag, result, shadeRect, shape_0, xScale, yScale;
  if ($isTrellis(this))
    return false;
  yScale = $getYScale(this, false);
  xScale = $getXScale(this, false);
  result = false;
  geDrag = $getCurrentDragRectGE(this);
  if (geDrag) {
    this.frontGeAry.remove(geDrag);
    result = true;
  }
  if (!!yScale && !!xScale && !!this.handler) {
    shadeRect = this.handler.getDragShadeRect(xScale, yScale, startX, startY, curX, curY);
    if (shadeRect) {
      ge = new GraphicElement;
      shape_0 = new CFShape_1(shadeRect, new CFFill($getColor(this, 'DragSelect', '#99CCEE50')), null);
      $addShape_0(ge, shape_0, 'DragRect');
      this.frontGeAry.add_0(ge);
      result = true;
    }
  }
  return result;
}
;
_.handleDragEnd_0 = function handleDragEnd_7(startX, startY, curX, curY){
  var dragRect, geDrag, shadeRect, xScale, yScale;
  if ($isTrellis(this))
    return false;
  yScale = $getYScale(this, false);
  xScale = $getXScale(this, false);
  geDrag = $getCurrentDragRectGE(this);
  if (geDrag) {
    this.frontGeAry.remove(geDrag);
    $setRedrawNeeded(this.chart, true);
  }
  if (!!yScale && !!xScale && !!this.handler && !!this.data_0 && $getNumCols(this.data_0) > 0 && $getNumRows(this.data_0) > 0) {
    shadeRect = this.handler.getDragShadeRect(xScale, yScale, startX, startY, curX, curY);
    if (shadeRect) {
      dragRect = this.handler.getFinalDragRectFromShadeRect(shadeRect);
      this.handler.addDataFilterIfNeeded(dragRect);
      if ((!!this.annotations && this.annotations.size_1() > 0 || this.chart.inAddAnnotationMode) && !!this.annotationView) {
        $setNeedsFormat(this.annotationView, true);
        $resetAnnotations(this);
      }
      $logZoomState(this.chart, true);
      return true;
    }
  }
  return false;
}
;
_.handleRowFiltersHiddenSeriesAndSort = function handleRowFiltersHiddenSeriesAndSort_0(){
  var sortValue, totalSort, value_0;
  $hasChartOptions(this) && $handleRowFiltersHiddenSeries(this, this.data_0);
  if ($hasChartOptions(this) && $getChartOptionAsString(this, 'total_sort') != null && $supportsSortingFromScale(this) && !$getValueScaleByNumber(this, 1)) {
    value_0 = $getChartOptionAsString(this, 'total_sort');
    totalSort = $getTotalSort(value_0);
    sortValue = $getSortFromString(value_0);
    this.handler.onBeforeSort();
    if (sortValue != 0) {
      if (!this.currentSortSetFromChartOptions) {
        this.currentSort = sortValue;
        this.currentSortSetFromChartOptions = true;
      }
      totalSort < 0?this.typeAttributes.percentOfCategoryData && totalSort == -SORT_SUM?$sortRowsDesc(this.data_0, SORT_SUM_ORIG, false):$sortRowsDesc(this.data_0, -totalSort, false):this.typeAttributes.percentOfCategoryData && totalSort == SORT_SUM?$sortRows(this.data_0, SORT_SUM_ORIG):$sortRows(this.data_0, totalSort);
    }
     else 
      !!this.data_0 && (this.hadTimeScaleBeforeSort || $hasTimeData(this.data_0) && !this.data_0.preSorted && !this.neverUseTimeScale)?$sortRows(this.data_0, SORT_DATE):!!this.data_0 && $sortRows(this.data_0, 0);
  }
}
;
_.hasDataTable = function hasDataTable_0(){
  return $hasDataTable(this);
}
;
_.hasTimeScale = function hasTimeScale_1(){
  return $hasTimeScale(this);
}
;
_.isHorizontal_0 = function isHorizontal_1(){
  return this.isHorizontal;
}
;
_.removeDependentCompsFromCompArray = function removeDependentCompsFromCompArray_0(){
  $removeDependentCompsFromCompArray_0(this);
}
;
_.reset_0 = function reset_9(){
  var scale, scale$iterator;
  $reset_2(this);
  this.supportsDrag = true;
  this.scales = new ArrayList;
  this.isHorizontal = false;
  this.neverUseTimeScale = false;
  this.hadTimeScaleBeforeSort = false;
  this.innerBounds = null;
  this.legend = null;
  this.annotationView = null;
  this.forecastUIPanel = null;
  this.annotationsFormatted = false;
  this.originalHeight != -1 && $resetVerticalHeight(this);
  this.scaleMarkers = null;
  this.geTopScaleMarkerText = null;
  for (scale$iterator = new ArrayList$1(this.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
    scale = castTo($next_3(scale$iterator), 53);
    instanceOf(scale, 27) && (castTo(scale, 27).scaleMarkers = null);
  }
  $resetAnnotations(this);
}
;
_.resetForSizeChange = function resetForSizeChange_1(){
  var i;
  $removeDependentCompsFromCompArray_0(this);
  this.dependentComps = null;
  for (i = 0; i < this.scales.array.length; i++)
    $reset_4(castTo($get_2(this.scales, i), 53));
}
;
_.resetForTypeChange = function resetForTypeChange_20(){
  $resetForTypeChange(this);
  this.originalHeight != -1 && $resetVerticalHeight(this);
  this.isHorizontal = false;
  this.scales.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}
;
_.setNeedsFormat = function setNeedsFormat_8(value_0){
  $setNeedsFormat_2(this, value_0);
}
;
_.updateNumberFormats = function updateNumberFormats_0(copyToScalesFromGraph){
  $updateNumberFormats_0(this, copyToScalesFromGraph);
}
;
_.updateWithDefinition = function updateWithDefinition_4(compDef, datasourceMap, oldDataGrid, fromCreation, pivotTotals){
  var scale;
  $updateWithDefinition_0(this, compDef, datasourceMap, oldDataGrid, fromCreation);
  if (compDef) {
    if (this.typeAttributes.percentOfSeriesData) {
      scale = $getValueScaleByNumber(this, 0);
      $applyValueFormatOverride(scale.numberFormatter, 'percentage');
      $setNeedsFormat_2(this, true);
    }
  }
}
;
_.hadTimeScaleBeforeSort = false;
_.hideAnnotationList = false;
_.hideAnnotations = false;
_.hideForecastUI = false;
_.isHorizontal = false;
_.neverUseTimeScale = false;
var noPadding_0;
var Lcom_domo_charting_graphs_ScaleGraph_2_classLit = createForClass('com.domo.charting.graphs', 'ScaleGraph', 40);
function $compare_19(o1, o2){
  return $compareTo_3(new Long(o2.createdDate), new Long(o1.createdDate));
}

function ScaleGraph$1(){
}

defineClass(305, 1, {}, ScaleGraph$1);
_.compare = function compare_20(o1, o2){
  return $compare_19(castTo(o1, 46), castTo(o2, 46));
}
;
_.equals_0 = function equals_23(other){
  return this === other;
}
;
var Lcom_domo_charting_graphs_ScaleGraph$1_2_classLit = createForClass('com.domo.charting.graphs', 'ScaleGraph/1', 305);
function $addProjectionValPoint(this$static, projInfo){
  this$static.projectionInfo = projInfo;
}

function $addRegressionLinePoints(this$static, regressionLinePoints){
  this$static.regressionLinePoints = regressionLinePoints;
}

function $createSeriesShapeMap(this$static, graph, lastShapeMap){
  var cell, key, shape_0, shape$iterator;
  for (shape$iterator = new ArrayList$1(this$static.srsShapeList); shape$iterator.i < shape$iterator.this$01.array.length;) {
    shape_0 = castTo($next_3(shape$iterator), 18);
    cell = shape_0.cell;
    if (cell) {
      if (!!graph.typeAttributes && graph.typeAttributes.isPopPlay)
        key = $getRowName(cell) + '|^|^|';
      else if (!!graph.typeAttributes && graph.typeAttributes.isXYLine) {
        if (instanceOf(shape_0, 28) && !!castTo(shape_0, 28).point && (isNaN_0(castTo(shape_0, 28).point.y_0) || isNaN_0(castTo(shape_0, 28).point.x_0)))
          continue;
        key = $getValue(cell) + '|^|^|' + $getYValue(cell);
      }
       else 
        key = $getRowName(cell) + '|^|^|' + $getColName(cell);
      key == null?$put_1(lastShapeMap.hashCodeMap, null, shape_0):$put_2(lastShapeMap.stringMap, key, shape_0);
    }
  }
}

function $freeResources_25(this$static){
  var srsShapeInfo, srsShapeInfo$iterator;
  if (!!this$static.srsShapeList && this$static.srsShapeList.array.length > 0) {
    for (srsShapeInfo$iterator = new ArrayList$1(this$static.srsShapeList); srsShapeInfo$iterator.i < srsShapeInfo$iterator.this$01.array.length;) {
      srsShapeInfo = castTo($next_3(srsShapeInfo$iterator), 18);
      !!srsShapeInfo && srsShapeInfo.freeResources_0();
    }
    this$static.srsShapeList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  }
  this$static.srsShapeList = null;
  !!this$static.regressionLinePoints && this$static.regressionLinePoints.array.length > 0 && (this$static.regressionLinePoints.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.regressionLinePoints = null;
  !!this$static.projectionInfo && $freeResources_24(this$static.projectionInfo);
  this$static.projectionInfo = null;
  !!this$static.fullSeriesInfo && this$static.fullSeriesInfo.freeResources_0();
  this$static.fullSeriesInfo = null;
}

function $getProjectedLinePointIndex(this$static, projectedCell){
  var i, j, pointList, projPoint;
  if ($isLine(this$static) && !!this$static.fullSeriesInfo && !!this$static.srsShapeList && instanceOf(this$static.fullSeriesInfo, 28)) {
    for (i = this$static.srsShapeList.array.length - 1; i >= 0; i--) {
      if (castTo($get_2(this$static.srsShapeList, i), 18).cell == projectedCell) {
        projPoint = castTo($get_2(this$static.srsShapeList, i), 28).point;
        if (projPoint) {
          pointList = castTo(this$static.fullSeriesInfo, 28).pointlist;
          for (j = pointList.array.length - 1; j >= 0; j--) {
            checkCriticalElementIndex(j, pointList.array.length);
            if (pointList.array[j] != null && (checkCriticalElementIndex(j, pointList.array.length) , maskUndefined(pointList.array[j]) === maskUndefined(projPoint)))
              return j;
          }
        }
        break;
      }
    }
  }
  return -1;
}

function $isBar(this$static){
  if (!!this$static.fullSeriesInfo && this$static.fullSeriesInfo.isBar())
    return true;
  else if (!!this$static.srsShapeList && this$static.srsShapeList.array.length > 0 && castTo($get_2(this$static.srsShapeList, 0), 18).isBar())
    return true;
  return false;
}

function $isLine(this$static){
  if (!!this$static.fullSeriesInfo && this$static.fullSeriesInfo.isLine_0())
    return true;
  else if (!!this$static.srsShapeList && this$static.srsShapeList.array.length > 0 && castTo($get_2(this$static.srsShapeList, 0), 18).isLine_0())
    return true;
  return false;
}

function SeriesInfo(srsShapeList, fullSeriesInfo){
  this.srsShapeList = srsShapeList;
  this.fullSeriesInfo = fullSeriesInfo;
}

defineClass(19, 1, {19:1}, SeriesInfo);
var Lcom_domo_charting_graphs_SeriesInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SeriesInfo', 19);
function $freeResources_26(this$static){
  this$static.cell = null;
  this$static.fill_0 = null;
  this$static.stroke_0 = null;
  this$static.animInfo = null;
  !!this$static.lastState && this$static.lastState.freeResources_0();
  this$static.lastState = null;
  !!this$static.hitShape && $freeResources_31(this$static.hitShape);
  this$static.hitShape = null;
  this$static.hoverText = null;
}

function $getAnimLineFromCenter(points, center, percentComplete){
  var animPoints, point, point$iterator;
  animPoints = new ArrayList;
  for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
    point = castTo($next_3(point$iterator), 10);
    $add_1(animPoints, getAnimPoint(center, point, percentComplete));
  }
  return animPoints;
}

function $getAnimLineFromLine(fromPts, toPts, percentComplete){
  var animPoints, i, i0;
  animPoints = new ArrayList;
  for (i0 = 0; i0 < toPts.array.length && i0 < fromPts.array.length; i0++)
    $add_1(animPoints, getAnimPoint((checkCriticalElementIndex(i0, fromPts.array.length) , castTo(fromPts.array[i0], 10)), (checkCriticalElementIndex(i0, toPts.array.length) , castTo(toPts.array[i0], 10)), percentComplete));
  for (i = fromPts.array.length; i < toPts.array.length; i++)
    $add_1(animPoints, getAnimPoint(castTo($get_2(fromPts, fromPts.array.length - 1), 10), (checkCriticalElementIndex(i, toPts.array.length) , castTo(toPts.array[i], 10)), percentComplete));
  return animPoints;
}

function $getAnimLineFromZero(points, zeroPos, isHorzGraph, percentComplete){
  var animPoints, point, point$iterator;
  animPoints = new ArrayList;
  for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
    point = castTo($next_3(point$iterator), 10);
    $add_1(animPoints, $getAnimPointFromZero(point, zeroPos, isHorzGraph, percentComplete));
  }
  return animPoints;
}

function $getAnimPointFromZero(point, zeroPos, isHorzGraph, percentComplete){
  if (point) {
    return isHorzGraph?new CFPoint(zeroPos + (point.x_0 - zeroPos) * percentComplete, point.y_0):new CFPoint(point.x_0, zeroPos - (zeroPos - point.y_0) * percentComplete);
  }
  return null;
}

function $getAnimRectGrowFromZero(endRect, isHorizontal, zeroPos, percentComplete){
  var startRect;
  if (isHorizontal) {
    startRect = new CFRect(zeroPos, endRect.y_0, 0, endRect.height_0);
    return getAnimRectLeftWidthWithEndTopHeight(startRect, endRect, percentComplete);
  }
   else {
    startRect = new CFRect(endRect.x_0, zeroPos, endRect.width_0, 0);
    return getAnimRectTopHeightWithEndLeftWidth(startRect, endRect, percentComplete);
  }
}

function $setAnimInfo(this$static, animInfo){
  this$static.animInfo = animInfo;
}

function $setHitShape(this$static, hitShape){
  this$static.hitShape = hitShape;
}

function $setHoverText_7(this$static, hoverText){
  this$static.hoverText = hoverText;
}

function SrsShapeInfo(cell, fill, stroke, lastState){
  this.cell = cell;
  this.fill_0 = fill;
  this.stroke_0 = stroke;
  this.lastState = lastState;
  if (!!lastState && !!lastState.lastState) {
    lastState.lastState.freeResources_0();
    lastState.lastState = null;
  }
}

function getSymbolPath(symbolType, x_0, y_0){
  switch (symbolType) {
    case 3:
      return new CFPath_2(x_0, y_0, 9, 9, 3);
    case 4:
      return new CFPath_2(x_0, y_0, 10, 12, 4);
    case 5:
      return new CFPath_2(x_0, y_0, 9, 9, 5);
    case 6:
      return new CFPath_2(x_0, y_0, 6, 6, 6);
    case 7:
      return new CFPath_2(x_0, y_0, 6, 6, 7);
    case 8:
      return new CFPath_2(x_0, y_0, 7, 7, 8);
    case 9:
      return new CFPath_2(x_0, y_0, 6, 8, 9);
    case 10:
      return new CFPath_2(x_0, y_0, 7, 7, 10);
    case 11:
      return new CFPath_2(x_0, y_0, 10, 10, 1);
    default:return new CFPath_2(x_0, y_0, 8, 8, symbolType);
  }
}

function getSymbolPath_0(symbolType, x_0, y_0, scale){
  switch (symbolType) {
    case 3:
      return new CFPath_2(x_0, y_0, 9 * scale, 9 * scale, 3);
    case 4:
      return new CFPath_2(x_0, y_0, 10 * scale, 12 * scale, 4);
    case 5:
      return new CFPath_2(x_0, y_0, 9 * scale, 9 * scale, 5);
    case 6:
      return new CFPath_2(x_0, y_0, 6 * scale, 6 * scale, 6);
    case 7:
      return new CFPath_2(x_0, y_0, 6 * scale, 6 * scale, 7);
    case 8:
      return new CFPath_2(x_0, y_0, 7 * scale, 7 * scale, 8);
    case 9:
      return new CFPath_2(x_0, y_0, 6 * scale, 8 * scale, 9);
    case 10:
      return new CFPath_2(x_0, y_0, 7 * scale, 7 * scale, 10);
    case 11:
      return new CFPath_2(x_0, y_0, 10 * scale, 10 * scale, 1);
    default:return new CFPath_2(x_0, y_0, 8 * scale, 8 * scale, symbolType);
  }
}

defineClass(18, 1, {18:1}, SrsShapeInfo);
_.freeResources_0 = function freeResources_43(){
  $freeResources_26(this);
}
;
_.inDragRect = function inDragRect(dragRect){
  return false;
}
;
_.isBar = function isBar(){
  return false;
}
;
_.isLine_0 = function isLine(){
  return false;
}
;
_.drillOnColOnly = false;
_.highlightAlways = false;
_.neverDrill = false;
_.supportsDynamicFilter = false;
var Lcom_domo_charting_graphs_SrsShapeInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsShapeInfo', 18);
function $$init_11(this$static){
}

function $freeResources_27(this$static){
  $freeResources_26(this$static);
  this$static.handler = null;
  this$static.rect = null;
  this$static.stackedOffset = null;
  this$static.stackedProjRect = null;
  this$static.origStackedProjRect = null;
  !!this$static.hoverPath && $freeResources_30(this$static.hoverPath);
  this$static.hoverPath = null;
  this$static.rects = null;
  this$static.origOffsets = null;
  !!this$static.projectionInfo && $freeResources_24(this$static.projectionInfo);
  this$static.projectionInfo = null;
}

function $getOrigRect(this$static){
  var origRect;
  origRect = $duplicate_5(this$static.rect);
  !!this$static.stackedOffset && $offset(origRect, this$static.stackedOffset.x_0, this$static.stackedOffset.y_0);
  return origRect;
}

function $getRectForDisplay(this$static, curRect){
  var barRect, rect;
  rect = curRect;
  !curRect && (rect = this$static.rect);
  if ($isMultiBar(this$static.handler) && (this$static.handler.graph.graphType == 0 || this$static.handler.graph.graphType == 1) && this$static.handler.graph.seriesShapes.array.length > 1) {
    barRect = new CFRect(rect.x_0, rect.y_0, rect.width_0, rect.height_0);
    this$static.handler.sGraph.isHorizontal?$setHeight(barRect, barRect.height_0 * 0.85):$setWidth(barRect, barRect.width_0 * 0.85);
    return barRect;
  }
   else {
    return rect;
  }
}

function $getRectPctOrShape(this$static, type_0, sGraph, percentComplete, zeroPos){
  var isHorz, lineInfo, lstState, prevIsHorz, rct, sclInnerRect, startRect;
  lstState = null;
  instanceOf(this$static.lastState, 25) && (lstState = castTo(this$static.lastState, 25));
  rct = this$static.rect;
  isHorz = sGraph.isHorizontal;
  prevIsHorz = isHorzGraph_0((sGraph.previousGraphType == -1 && (sGraph.previousGraphType = sGraph.graphType) , sGraph.previousGraphType));
  sclInnerRect = $getInnerBoundsRect($getCategoryScale(sGraph));
  if ($equals_2(type_0, 'Transition') || $equals_2(type_0, 'Play')) {
    if (lstState) {
      if ((sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30 || sGraph.graphType == 19) && !sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30 || sGraph.graphType == 19) && !sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31 || sGraph.previousGraphType == 21) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31 || sGraph.previousGraphType == 21) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31 || sGraph.previousGraphType == 21) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30 || sGraph.graphType == 19) && !sGraph.typeAttributes.isStacked) {
        if (percentComplete < 0.5) {
          rct = getAnimRectLeftWidthWithStartTopHeight(lstState.rect, this$static.rect, percentComplete * 2);
        }
         else {
          startRect = new CFRect(this$static.rect.x_0, lstState.rect.y_0, this$static.rect.width_0, lstState.rect.height_0);
          rct = getAnimRectTopHeightWithEndLeftWidth(startRect, this$static.rect, (percentComplete - 0.5) * 2);
        }
      }
       else if ((sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30 || sGraph.previousGraphType == 19) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 0 || sGraph.graphType == 4 || sGraph.graphType == 30) && sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30 || sGraph.previousGraphType == 19) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31 || sGraph.graphType == 21) && !sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30 || sGraph.previousGraphType == 19) && !sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 1 || sGraph.previousGraphType == 5 || sGraph.previousGraphType == 31) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31 || sGraph.graphType == 21) && !sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31 || sGraph.graphType == 21) && !sGraph.typeAttributes.isStacked || (sGraph.previousGraphType == 0 || sGraph.previousGraphType == 4 || sGraph.previousGraphType == 30) && sGraph.previousTypeAttributes.isStacked && (sGraph.graphType == 1 || sGraph.graphType == 5 || sGraph.graphType == 31) && sGraph.typeAttributes.isStacked) {
        if (percentComplete < 0.5) {
          rct = getAnimRectTopHeightWithStartLeftWidth(lstState.rect, this$static.rect, percentComplete * 2);
        }
         else {
          startRect = new CFRect(lstState.rect.x_0, this$static.rect.y_0, lstState.rect.width_0, this$static.rect.height_0);
          rct = getAnimRectLeftWidthWithEndTopHeight(startRect, this$static.rect, (percentComplete - 0.5) * 2);
        }
      }
       else 
        prevIsHorz && isHorz || !prevIsHorz && !isHorz?(rct = getAnimRectAll(lstState.rect, this$static.rect, percentComplete)):(rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, percentComplete));
    }
     else if (!!this$static.lastState && instanceOf(this$static.lastState, 28)) {
      lineInfo = castTo(this$static.lastState, 28);
      if (lineInfo.pointlist) {
        if (percentComplete < 0.5) {
          return new CFShape_0(new CFPath_11($getAnimLineFromZero(lineInfo.pointlist, zeroPos, isHorz, 1 - percentComplete * 2), lineInfo.lineStyle, isHorz, sclInnerRect, lineInfo.hideGaps, false), null, lineInfo.stroke_0);
        }
         else {
          rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, (percentComplete - 0.5) * 2);
        }
      }
       else {
        rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, percentComplete);
      }
    }
     else 
      sGraph.graphType == (sGraph.previousGraphType == -1 && (sGraph.previousGraphType = sGraph.graphType) , sGraph.previousGraphType) || (sGraph.previousGraphType == -1 && (sGraph.previousGraphType = sGraph.graphType) , sGraph.previousGraphType == -1)?(rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, percentComplete)):(rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, percentComplete));
  }
   else 
    $equals_2(type_0, 'Initial') && (rct = $getAnimRectGrowFromZero(this$static.rect, sGraph.isHorizontal, zeroPos, percentComplete));
  return rct;
}

function SrsBarInfo(handler, cell, hoverPath, fill){
  SrsShapeInfo.call(this, cell, fill, null, null);
  $$init_11(this);
  this.handler = handler;
  this.hoverPath = hoverPath;
  this.useDotPlotBars = handler.graph.typeAttributes.isDotPlot;
}

function SrsBarInfo_0(handler, cell, barRect, stackedOffset, rowIndex, fill, lastState){
  SrsShapeInfo.call(this, cell, fill, null, lastState);
  $$init_11(this);
  this.handler = handler;
  this.rect = barRect;
  this.groupedRow = -1;
  this.stackedOffset = stackedOffset;
  this.rowIndex = rowIndex;
  this.useDotPlotBars = handler.graph.typeAttributes.isDotPlot;
}

function SrsBarInfo_1(handler, cell, barRect, stackedOffset, fill, stroke, groupedRow, lastState){
  SrsShapeInfo.call(this, cell, fill, stroke, lastState);
  $$init_11(this);
  this.handler = handler;
  this.rect = barRect;
  this.groupedRow = groupedRow;
  this.stackedOffset = stackedOffset;
  this.useDotPlotBars = handler.graph.typeAttributes.isDotPlot;
}

function SrsBarInfo_2(handler, cell, barRect, stackedOffset, stackedProjRect, projValue, fill, lastState){
  SrsShapeInfo.call(this, cell, fill, null, lastState);
  this.handler = handler;
  this.rect = barRect;
  this.groupedRow = -1;
  this.stackedOffset = stackedOffset;
  this.stackedProjRect = stackedProjRect;
  if (stackedProjRect) {
    this.origStackedProjRect = new CFRect(stackedProjRect.x_0, stackedProjRect.y_0, stackedProjRect.width_0, stackedProjRect.height_0);
    if (this.rect.height_0 < stackedProjRect.height_0) {
      if (projValue < 0) {
        $setY_0(this.rect, stackedProjRect.y_0);
        $setY_0(stackedProjRect, $getBottom(this.rect));
        $setHeight(stackedProjRect, stackedProjRect.height_0 - this.rect.height_0);
      }
       else {
        $setY_0(this.rect, stackedProjRect.y_0 + stackedProjRect.height_0 - this.rect.height_0);
        $setHeight(stackedProjRect, this.rect.y_0 - stackedProjRect.y_0);
      }
    }
     else {
      $setY_0(this.rect, stackedProjRect.y_0);
      $setHeight(this.rect, stackedProjRect.height_0);
    }
  }
  this.useDotPlotBars = handler.graph.typeAttributes.isDotPlot;
}

function SrsBarInfo_3(handler, cell, rects, origOffsets, fill, areaStyle, lastState){
  SrsShapeInfo.call(this, cell, fill, null, lastState);
  $$init_11(this);
  this.handler = handler;
  this.rects = rects;
  this.origOffsets = origOffsets;
  this.areaStyle = areaStyle;
  this.drillOnColOnly = true;
  this.useDotPlotBars = handler.graph.typeAttributes.isDotPlot;
}

defineClass(25, 18, $intern_44, SrsBarInfo, SrsBarInfo_0, SrsBarInfo_1, SrsBarInfo_2, SrsBarInfo_3);
_.freeResources_0 = function freeResources_44(){
  $freeResources_27(this);
}
;
_.getDrawShapeForRect = function getDrawShapeForRect(rect){
  var innerBnds, path, radius, rectStroke, symStroke, transFill, valScale, value_0;
  if (!!rect && this.useDotPlotBars) {
    valScale = $getValueScaleByNumber(this.handler.sGraph, 0);
    !!this.cell.column && this.cell.column.usesSecondaryScale && (valScale = $getValueScaleByNumber(this.handler.sGraph, 1));
    radius = 3;
    this.handler.sGraph.treatAsSmall && (radius = 1.5);
    if (this.handler.sGraph.isHorizontal) {
      !isNaN_0($getValue(this.cell)) && $getValue(this.cell) < 0?(path = new CFPath_0(rect.x_0 - radius, rect.y_0 + rect.height_0 / 2 - radius, radius * 2)):(path = new CFPath_0(rect.x_0 + rect.width_0 - radius, rect.y_0 + rect.height_0 / 2 - radius, radius * 2));
      $add(path, new CFPathElement_0(0, rect.x_0, rect.y_0 + rect.height_0 / 2));
      $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0 / 2));
    }
     else {
      !isNaN_0($getValue(this.cell)) && $getValue(this.cell) < 0?(path = new CFPath_0(rect.x_0 + rect.width_0 / 2 - radius, rect.y_0 + rect.height_0 - radius, radius * 2)):(path = new CFPath_0(rect.x_0 + rect.width_0 / 2 - radius, rect.y_0 - radius, radius * 2));
      $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2, rect.y_0));
      $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0));
    }
    value_0 = $getValue(this.cell);
    innerBnds = this.handler.sGraph.innerBounds;
    if (!!valScale && (value_0 > 0 && valScale.max_0 < value_0 || value_0 < 0 && valScale.min_0 > value_0)) {
      if (this.handler.sGraph.isHorizontal) {
        if (value_0 > 0) {
          $add(path, new CFPathElement_0(0, innerBnds.x_0 + innerBnds.width_0 - 6, rect.y_0 + rect.height_0 / 2 - 4));
          $add(path, new CFPathElement_0(1, innerBnds.x_0 + innerBnds.width_0 - 4, rect.y_0 + rect.height_0 / 2 + 4));
          $add(path, new CFPathElement_0(0, innerBnds.x_0 + innerBnds.width_0 - 10, rect.y_0 + rect.height_0 / 2 - 4));
          $add(path, new CFPathElement_0(1, innerBnds.x_0 + innerBnds.width_0 - 8, rect.y_0 + rect.height_0 / 2 + 4));
        }
         else {
          $add(path, new CFPathElement_0(0, innerBnds.x_0 + 6, rect.y_0 + rect.height_0 / 2 - 4));
          $add(path, new CFPathElement_0(1, innerBnds.x_0 + 4, rect.y_0 + rect.height_0 / 2 + 4));
          $add(path, new CFPathElement_0(0, innerBnds.x_0 + 10, rect.y_0 + rect.height_0 / 2 - 4));
          $add(path, new CFPathElement_0(1, innerBnds.x_0 + 8, rect.y_0 + rect.height_0 / 2 + 4));
        }
      }
       else {
        if (value_0 > 0) {
          $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2 - 4, innerBnds.y_0 + 6));
          $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2 + 4, innerBnds.y_0 + 4));
          $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2 - 4, innerBnds.y_0 + 10));
          $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2 + 4, innerBnds.y_0 + 8));
        }
         else {
          $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2 - 4, innerBnds.y_0 + innerBnds.height_0 - 6));
          $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2 + 4, innerBnds.y_0 + innerBnds.height_0 - 4));
          $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2 - 4, innerBnds.y_0 + innerBnds.height_0 - 10));
          $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2 + 4, innerBnds.y_0 + innerBnds.height_0 - 8));
        }
      }
    }
    path.isCircle = true;
    path.shouldAntiAlias = true;
    return new CFShape_0(path, this.fill_0, new CFStroke(this.fill_0.color_0, 1));
  }
   else if (!!rect && !this.handler.graph.typeAttributes.isSymbol && !this.handler.graph.typeAttributes.isSymbolOverlay && !this.handler.isPctComplete() && !this.handler.graph.typeAttributes.isCategoryScatter) {
    path = new CFPath_3($getRectForDisplay(this, rect));
    if (this.handler.graph.outlineStyle)
      return new CFShape_0(path, getOutlineFill(this.fill_0), getOutlineStroke(this.fill_0, this.stroke_0));
    return new CFShape_0(path, this.fill_0, this.stroke_0);
  }
   else if (!!rect && this.handler.isPctComplete()) {
    transFill = new CFFill(($clinit_CFColor() , TRANSPARENT));
    rectStroke = new CFStroke(this.fill_0.color_0, 1);
    return new CFShape_0(new CFPath_3(rect), transFill, rectStroke);
  }
   else if (!!rect && this.handler.graph.typeAttributes.isCategoryScatter) {
    !!this.cell && !isNaN_0($getValue(this.cell)) && $getValue(this.cell) < 0?(path = new CFPath_0(rect.x_0 - rect.height_0 / 2, rect.y_0, rect.height_0)):(path = new CFPath_0(rect.x_0 + rect.width_0 - rect.height_0 / 2, rect.y_0, rect.height_0));
    path.isCircle = true;
    path.shouldAntiAlias = true;
    return new CFShape_0(path, this.fill_0, this.stroke_0);
  }
   else if (!!rect && (this.handler.graph.typeAttributes.isSymbol || this.handler.graph.typeAttributes.isSymbolOverlay)) {
    this.handler.sGraph.isHorizontal?!isNaN_0($getValue(this.cell)) && $getValue(this.cell) < 0?(path = new CFPath_0(rect.x_0 - rect.height_0 / 2, rect.y_0, rect.height_0)):(path = new CFPath_0(rect.x_0 + rect.width_0 - rect.height_0 / 2, rect.y_0, rect.height_0)):!isNaN_0($getValue(this.cell)) && $getValue(this.cell) < 0?(path = new CFPath_0(rect.x_0, rect.y_0 + rect.height_0 - rect.width_0 / 2, rect.width_0)):(path = new CFPath_0(rect.x_0, rect.y_0 - rect.width_0 / 2, rect.width_0));
    transFill = new CFFill(($clinit_CFColor() , TRANSPARENT));
    symStroke = new CFStroke(this.fill_0.color_0, 1);
    path.isCircle = true;
    path.shouldAntiAlias = true;
    return new CFShape_0(path, transFill, symStroke);
  }
  return null;
}
;
_.getHitShape = function getHitShape(){
  var path;
  if (this.handler.graph.typeAttributes.isDotPlot) {
    path = new CFPath_3(this.rect);
    return new CFShape_0(path, ($clinit_CFFill() , TRANSPARENT_0), null);
  }
   else {
    return this.hitShape;
  }
}
;
_.getRect = function getRect(){
  return this.rect;
}
;
_.getShape = function getShape(){
  return this.getDrawShapeForRect(this.rect);
}
;
_.inDragRect = function inDragRect_0(dragRect){
  return $intersects(dragRect, this.rect);
}
;
_.isBar = function isBar_0(){
  return true;
}
;
_.areaStyle = 0;
_.groupedRow = 0;
_.rowIndex = 0;
_.useDotPlotBars = false;
var Lcom_domo_charting_graphs_SrsBarInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsBarInfo', 25);
function $getDrawShapeForPercent(this$static, rect){
  var boxRectPct, disableFill, disableWhiskers, fillClr, hiLow, path, whisker;
  boxRectPct = this$static.boxRect;
  path = new CFPath_3(boxRectPct);
  disableWhiskers = castTo(this$static.handler, 177).disableWhiskers;
  disableFill = castTo(this$static.handler, 177).disableFill;
  fillClr = null;
  disableFill || (fillClr = this$static.fill_0);
  $add(path, new CFPathRectElement_0(this$static.medianRect));
  if (this$static.handler.sGraph.isHorizontal) {
    hiLow = new CFRect(rect.x_0, rect.y_0 + rect.height_0 / 2, boxRectPct.x_0 - rect.x_0, $intern_38);
    $add(path, new CFPathRectElement_0(hiLow));
    hiLow = new CFRect(boxRectPct.x_0 + boxRectPct.width_0, rect.y_0 + rect.height_0 / 2, rect.x_0 + rect.width_0 - (boxRectPct.x_0 + boxRectPct.width_0), $intern_38);
    $add(path, new CFPathRectElement_0(hiLow));
    if (!disableWhiskers) {
      whisker = new CFRect(rect.x_0, rect.y_0 + rect.height_0 * $intern_16, $intern_38, rect.height_0 * $intern_16 * 2);
      $add(path, new CFPathRectElement_0(whisker));
      whisker = new CFRect(rect.x_0 + rect.width_0, rect.y_0 + rect.height_0 * $intern_16, $intern_38, rect.height_0 * $intern_16 * 2);
      $add(path, new CFPathRectElement_0(whisker));
    }
  }
   else {
    hiLow = new CFRect(rect.x_0 + rect.width_0 / 2, rect.y_0, $intern_38, boxRectPct.y_0 - rect.y_0);
    $add(path, new CFPathRectElement_0(hiLow));
    hiLow = new CFRect(rect.x_0 + rect.width_0 / 2, boxRectPct.y_0 + boxRectPct.height_0, $intern_38, rect.y_0 + rect.height_0 - (boxRectPct.y_0 + boxRectPct.height_0));
    $add(path, new CFPathRectElement_0(hiLow));
    if (!disableWhiskers) {
      whisker = new CFRect(rect.x_0 + rect.width_0 * $intern_16, rect.y_0, rect.width_0 * $intern_16 * 2, $intern_38);
      $add(path, new CFPathRectElement_0(whisker));
      whisker = new CFRect(rect.x_0 + rect.width_0 * $intern_16, rect.y_0 + rect.height_0, rect.width_0 * $intern_16 * 2, $intern_38);
      $add(path, new CFPathRectElement_0(whisker));
    }
  }
  return new CFShape_0(path, fillClr, this$static.stroke_0);
}

function SrsBoxPlotInfo(handler, cell, hiLowRect, boxRect, medianRect, fill, stroke, lastState){
  SrsBarInfo_1.call(this, handler, cell, hiLowRect, null, fill, stroke, -1, lastState);
  this.boxRect = boxRect;
  this.medianRect = medianRect;
}

defineClass(210, 25, {25:1, 210:1, 18:1}, SrsBoxPlotInfo);
_.freeResources_0 = function freeResources_45(){
  $freeResources_27(this);
  this.boxRect = null;
  this.medianRect = null;
}
;
_.getDrawShapeForRect = function getDrawShapeForRect_0(rect){
  return $getDrawShapeForPercent(this, rect);
}
;
_.getHitShape = function getHitShape_0(){
  var path;
  path = new CFPath_3(this.rect);
  return new CFShape_0(path, ($clinit_CFFill() , TRANSPARENT_0), null);
}
;
var Lcom_domo_charting_graphs_SrsBoxPlotInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsBoxPlotInfo', 210);
function $draw_5(this$static, pctComplete){
  var curDisplayValue, diff, pctDiff;
  if (this$static.handler.graph.typeAttributes.isFilledGauge) {
    diff = this$static.curValue - this$static.minValue;
    pctDiff = pctComplete * diff;
    curDisplayValue = this$static.minValue + pctDiff;
    $drawInnerRingRangeSimple(this$static.handler, this$static.bnds, this$static.minValue, this$static.maxValue, curDisplayValue, this$static.color_0);
  }
   else if (this$static.handler.graph.typeAttributes.isAdvancedCompGauge || !this$static.handler.graph.typeAttributes.isCompNoFillGauge) {
    diff = this$static.curValue - this$static.prevValue;
    pctDiff = pctComplete * diff;
    curDisplayValue = this$static.prevValue + pctDiff;
    $drawInnerRingRange(this$static.handler, this$static.bnds, this$static.minValue, this$static.maxValue, curDisplayValue, this$static.prevValue, this$static.colors.lightClr, this$static.colors.darkClr);
    $drawInnerRingPoint(this$static.handler, this$static.bnds, this$static.minValue, this$static.maxValue, this$static.prevValue, '#BDBDBD', 0);
    $drawInnerRingPoint(this$static.handler, this$static.bnds, this$static.minValue, this$static.maxValue, curDisplayValue, '#666666', this$static.handler.CUR_VAL);
  }
}

function SrsCompGaugeInfo(handler, bnds, minValue, maxValue, curValue, prevValue, colors, color_0){
  SrsShapeInfo.call(this, null, null, null, null);
  this.handler = handler;
  this.bnds = bnds;
  this.minValue = minValue;
  this.maxValue = maxValue;
  this.curValue = curValue;
  this.prevValue = prevValue;
  this.color_0 = color_0;
  this.colors = colors;
}

defineClass(165, 18, {165:1, 18:1}, SrsCompGaugeInfo);
_.freeResources_0 = function freeResources_46(){
  $freeResources_26(this);
  this.handler = null;
  this.bnds = null;
  this.color_0 = null;
  this.colors = null;
}
;
_.curValue = 0;
_.maxValue = 0;
_.minValue = 0;
_.prevValue = 0;
var Lcom_domo_charting_graphs_SrsCompGaugeInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsCompGaugeInfo', 165);
function $getShapePct(this$static, percentComplete){
  var initialRect, rct;
  initialRect = new CFRect($getCenterX(this$static.rect), $getCenterY(this$static.rect), 1, 1);
  rct = getAnimRectAll(initialRect, this$static.rect, percentComplete);
  return new CFShape_1(rct, this$static.fill_0, this$static.stroke_0);
}

function $getShapePct_0(this$static, pctComplete, lastState){
  var initialRect, rct;
  initialRect = lastState.rect;
  rct = getAnimRectAll(initialRect, this$static.rect, pctComplete);
  return new CFShape_1(rct, this$static.fill_0, this$static.stroke_0);
}

function $getShapePctGrowFromTop(this$static, percentComplete, bndsRect){
  var initialRect, rct;
  initialRect = new CFRect(this$static.rect.x_0, bndsRect.y_0, this$static.rect.width_0, 1);
  rct = getAnimRectAll(initialRect, this$static.rect, percentComplete);
  return new CFShape_1(rct, this$static.fill_0, this$static.stroke_0);
}

function $setRect(this$static, rect){
  this$static.rect = rect;
}

function SrsRectInfo(cell, rect, fill, stroke){
  SrsShapeInfo.call(this, cell, fill, stroke, null);
  this.rect = rect;
}

defineClass(82, 18, {82:1, 18:1}, SrsRectInfo);
_.freeResources_0 = function freeResources_47(){
  $freeResources_26(this);
  this.rect = null;
}
;
var Lcom_domo_charting_graphs_SrsRectInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsRectInfo', 82);
function $setDropOutVals(this$static, path, color_0){
  this$static.doPath = path;
  this$static.doColor = color_0;
}

function SrsFoldFunnelInfo(cell, rect, fill){
  SrsRectInfo.call(this, cell, rect, fill, null);
}

defineClass(116, 82, {116:1, 82:1, 18:1}, SrsFoldFunnelInfo);
_.freeResources_0 = function freeResources_48(){
  $freeResources_26(this);
  this.rect = null;
  this.doColor = null;
  !!this.doPath && $freeResources_30(this.doPath);
}
;
var Lcom_domo_charting_graphs_SrsFoldFunnelInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsFoldFunnelInfo', 116);
function $freeResources_28(this$static){
  $freeResources_26(this$static);
  this$static.point = null;
  !!this$static.pointlist && this$static.pointlist.array.length > 0 && (this$static.pointlist.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  !!this$static.forecastPointlist && this$static.forecastPointlist.array.length > 0 && (this$static.forecastPointlist.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.pointlist = null;
  this$static.forecastPointlist = null;
}

function $getNumActualPoints(this$static){
  var actualPoints;
  actualPoints = 0;
  !!this$static.pointlist && (actualPoints = this$static.pointlist.array.length);
  return actualPoints;
}

function $getShape(this$static, animPoint, innerBounds, isHorizontal, symbolsOnly){
  var line;
  if (this$static.pointlist) {
    line = new CFPath_11(this$static.pointlist, this$static.lineStyle, isHorizontal, innerBounds, this$static.hideGaps, false);
    line.shouldAntiAlias = true;
    return new CFShape_0(line, null, this$static.stroke_0);
  }
   else {
    return this$static.getPointShape(animPoint, this$static.fill_0, symbolsOnly, this$static.filledSymbol);
  }
}

function $getShapePct_1(this$static, type_0, sGraph, percentComplete, zeroPos, isHorzGraph, symbolsOnly){
  var barInfo, line, lstState, sclInnerRect;
  lstState = null;
  instanceOf(this$static.lastState, 28) && (lstState = castTo(this$static.lastState, 28));
  sclInnerRect = $getInnerBoundsRect($getCategoryScale(sGraph));
  if ($equals_2(type_0, 'Transition')) {
    if ($isBarToLineTransititon(sGraph)) {
      if (percentComplete < 0.5) {
        if (!this$static.lastState || !instanceOf(this$static.lastState, 25))
          return null;
        barInfo = castTo(this$static.lastState, 25);
        return !this$static.pointlist?new CFShape_1($getAnimRectGrowFromZero(barInfo.rect, $isPreviousHBar(sGraph), zeroPos, 1 - percentComplete * 2), barInfo.fill_0, barInfo.stroke_0):null;
      }
       else {
        if (this$static.pointlist) {
          line = new CFPath_11($getAnimLineFromZero(this$static.pointlist, zeroPos, isHorzGraph, (percentComplete - 0.5) * 2), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false);
          line.shouldAntiAlias = true;
          return new CFShape_0(line, null, this$static.stroke_0);
        }
         else 
          return $getShape(this$static, $getAnimPointFromZero(this$static.point, zeroPos, isHorzGraph, (percentComplete - 0.5) * 2), sGraph.innerBounds, isHorzGraph, symbolsOnly);
      }
    }
     else if (this$static.point) {
      if (!!lstState && !!lstState.point)
        return $getShape(this$static, getAnimPoint(lstState.point, this$static.point, percentComplete), sGraph.innerBounds, isHorzGraph, symbolsOnly);
      return $getShape(this$static, $getAnimPointFromZero(this$static.point, zeroPos, isHorzGraph, percentComplete), sGraph.innerBounds, isHorzGraph, symbolsOnly);
    }
     else if (this$static.pointlist) {
      !!lstState && !!lstState.pointlist && $somePointsAreNotNull(lstState.pointlist)?(line = new CFPath_11($getAnimLineFromLine(lstState.pointlist, this$static.pointlist, percentComplete), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false)):(line = new CFPath_11($getAnimLineFromZero(this$static.pointlist, zeroPos, isHorzGraph, percentComplete), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false));
      line.shouldAntiAlias = true;
      return new CFShape_0(line, null, this$static.stroke_0);
    }
  }
   else if ($equals_2(type_0, 'Play')) {
    if (this$static.point) {
      if (!!lstState && !!lstState.point)
        return $getShape(this$static, getAnimPoint(lstState.point, this$static.point, percentComplete), sGraph.innerBounds, isHorzGraph, symbolsOnly);
      return $getShape(this$static, $getAnimPointFromZero(this$static.point, zeroPos, isHorzGraph, percentComplete), sGraph.innerBounds, isHorzGraph, symbolsOnly);
    }
     else if (this$static.pointlist) {
      !!lstState && !!lstState.pointlist && $somePointsAreNotNull(lstState.pointlist)?(line = new CFPath_11($getAnimLineFromLine(lstState.pointlist, this$static.pointlist, percentComplete), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false)):(line = new CFPath_11($getAnimLineFromZero(this$static.pointlist, zeroPos, isHorzGraph, percentComplete), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false));
      line.shouldAntiAlias = true;
      return new CFShape_0(line, null, this$static.stroke_0);
    }
  }
   else {
    if (this$static.point)
      return $getShape(this$static, $getAnimPointFromZero(this$static.point, zeroPos, isHorzGraph, percentComplete), sGraph.innerBounds, isHorzGraph, symbolsOnly);
    else if (this$static.pointlist) {
      line = new CFPath_11($getAnimLineFromZero(this$static.pointlist, zeroPos, isHorzGraph, percentComplete), this$static.lineStyle, sGraph.isHorizontal, sclInnerRect, this$static.hideGaps, false);
      line.shouldAntiAlias = true;
      return new CFShape_0(line, null, this$static.stroke_0);
    }
  }
  return $getShape(this$static, null, sGraph.innerBounds, isHorzGraph, symbolsOnly);
}

function $getShapePctFromPoint(this$static, type_0, sGraph, percentComplete, fill, center){
  var line, lstState;
  lstState = null;
  instanceOf(this$static.lastState, 28) && (lstState = castTo(this$static.lastState, 28));
  if ($equals_2(type_0, 'Transition')) {
    if (lstState) {
      if (!!lstState.point && !!this$static.point)
        return $getShape(this$static, getAnimPoint(lstState.point, this$static.point, percentComplete), sGraph.bnds, false, false);
      else if (!!lstState.pointlist && !!this$static.pointlist) {
        line = new CFPath_12($getAnimLineFromLine(lstState.pointlist, this$static.pointlist, percentComplete), true);
        line.shouldAntiAlias = true;
        return new CFShape_0(line, fill, this$static.stroke_0);
      }
    }
     else {
      line = new CFPath_12($getAnimLineFromCenter(this$static.pointlist, center, percentComplete), true);
      line.shouldAntiAlias = true;
      return new CFShape_0(line, fill, this$static.stroke_0);
    }
  }
   else {
    if (this$static.point)
      return $getShape(this$static, getAnimPoint(center, this$static.point, percentComplete), sGraph.bnds, false, false);
    else if (this$static.pointlist) {
      line = new CFPath_12($getAnimLineFromCenter(this$static.pointlist, center, percentComplete), true);
      line.shouldAntiAlias = true;
      return new CFShape_0(line, fill, this$static.stroke_0);
    }
  }
  return $getShape(this$static, null, sGraph.bnds, false, false);
}

function $isBarToLineTransititon(sGraph){
  var gType, prevType;
  prevType = (sGraph.previousGraphType == -1 && (sGraph.previousGraphType = sGraph.graphType) , sGraph.previousGraphType);
  gType = sGraph.graphType;
  if ((prevType == 0 || prevType == 4 || prevType == 1 || prevType == 5) && (gType == 2 || gType == 3 || gType == 5))
    return true;
  return false;
}

function $isPreviousHBar(sGraph){
  var prevType;
  prevType = (sGraph.previousGraphType == -1 && (sGraph.previousGraphType = sGraph.graphType) , sGraph.previousGraphType);
  if (prevType == 1 || prevType == 5)
    return true;
  return false;
}

function $setNumForecastItems(this$static, numForecastItems){
  var i, index_0;
  if (numForecastItems > 0) {
    index_0 = 0;
    this$static.forecastPointlist = new ArrayList;
    for (i = this$static.pointlist.array.length - 1; i >= 0 && index_0 < numForecastItems; i--) {
      $add_0(this$static.forecastPointlist, 0, castTo($get_2(this$static.pointlist, i), 10));
      $remove_2(this$static.pointlist, i);
      ++index_0;
    }
  }
}

function $somePointsAreNotNull(points){
  var point, point$iterator;
  if (points) {
    for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
      point = castTo($next_3(point$iterator), 10);
      if (point)
        return true;
    }
  }
  return false;
}

function SrsLineInfo(cell, linePoint, symbolType, filledSymbol, fill, stroke, lastState, graphHeight){
  SrsShapeInfo.call(this, cell, fill, stroke, lastState);
  this.point = linePoint;
  this.symbolType = symbolType;
  this.filledSymbol = filledSymbol;
  this.graphHeight = graphHeight;
}

function SrsLineInfo_0(cell, items, graph){
  var key, lastObj, lineInfo, shapeInfo, shapeInfo$iterator;
  SrsShapeInfo.call(this, cell, null, null, null);
  this.pointlist = new ArrayList;
  if (items.array.length > 0 && !!graph && !!graph.lastShapesMap && $size(graph.lastShapesMap) > 0 && instanceOf((checkCriticalElementIndex(0, items.array.length) , items.array[0]), 145)) {
    for (shapeInfo$iterator = new ArrayList$1(items); shapeInfo$iterator.i < shapeInfo$iterator.this$01.array.length;) {
      shapeInfo = castTo($next_3(shapeInfo$iterator), 18);
      if (instanceOf(shapeInfo, 28) && !!shapeInfo.cell) {
        lineInfo = castTo(shapeInfo, 28);
        key = $getXYCombination(lineInfo.cell);
        lastObj = $getStringValue(graph.lastShapesMap, key);
        lastObj != null && instanceOf(lastObj, 145) && $add_1(this.pointlist, castTo(lastObj, 145).point);
      }
    }
  }
}

function SrsLineInfo_1(cell, points, stroke, lineStyle, hasGaps, hideGaps, lastState){
  SrsShapeInfo.call(this, cell, null, stroke, lastState);
  this.pointlist = points;
  this.lineStyle = lineStyle;
  this.hasGaps = hasGaps;
  this.hideGaps = hideGaps;
}

function addRangeDrawingElements(sGraph, valScale, minVal, maxVal, color_0, showLines, fillOutliers, lineInfo){
  var dashedRedStroke, ge, innerBndsRect, maxLine, maxPos, maxValPos, minLine, minPos, minScalePos, minValPos, path;
  minScalePos = valScale.getMinPosition();
  minValPos = 0;
  minVal != $intern_19 && (minValPos = valScale.getPositionForValue(minVal));
  maxValPos = valScale.getPositionForValue(maxVal);
  minPos = minScalePos - minValPos;
  maxPos = minScalePos - maxValPos;
  if (sGraph.isHorizontal) {
    minPos = minScalePos + minValPos;
    maxPos = minScalePos + maxValPos;
  }
  ge = new GraphicElement;
  innerBndsRect = $duplicate_5(sGraph.innerBounds);
  if (fillOutliers && !!lineInfo) {
    path = getOutlierFillPath(sGraph, lineInfo, minPos, maxPos, innerBndsRect);
    $addShape(ge, new CFShape_0(path, new CFFill($getColor(sGraph, 'LineRangeOutlierFill', '#FDDDDD')), null));
  }
  if (sGraph.isHorizontal) {
    innerBndsRect.x_0 = minPos;
    innerBndsRect.width_0 = maxPos - minPos;
  }
   else {
    innerBndsRect.y_0 = maxPos;
    innerBndsRect.height_0 = minPos - maxPos;
  }
  $addShape(ge, new CFShape_1(innerBndsRect, new CFFill(color_0), null));
  $add_1(sGraph.backGeAry, ge);
  if (showLines) {
    ge = new GraphicElement;
    dashedRedStroke = new CFStroke($getColor(sGraph, 'LineRangeDashedRed', '#FF0000'), 1);
    $setStyle_0(dashedRedStroke, 1);
    if (sGraph.isHorizontal) {
      maxLine = new CFShape_0(new CFPath_1(maxPos, innerBndsRect.y_0, maxPos, innerBndsRect.y_0 + innerBndsRect.height_0), null, dashedRedStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, maxLine);
      minLine = new CFShape_0(new CFPath_1(minPos, innerBndsRect.y_0, minPos, innerBndsRect.y_0 + innerBndsRect.height_0), null, dashedRedStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, minLine);
    }
     else {
      maxLine = new CFShape_0(new CFPath_1(innerBndsRect.x_0, maxPos, innerBndsRect.x_0 + innerBndsRect.width_0, maxPos), null, dashedRedStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, maxLine);
      minLine = new CFShape_0(new CFPath_1(innerBndsRect.x_0, minPos, innerBndsRect.x_0 + innerBndsRect.width_0, minPos), null, dashedRedStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, minLine);
    }
    sGraph.geAry.add_1(0, ge);
  }
}

function getOutlierFillPath(sGraph, lineInfo, minPos, maxPos, innerBndsRect){
  var firstPathElement, lastPathElement, midPos, path, pathAry;
  path = new CFPath_10(lineInfo.pointlist, lineInfo.lineStyle, sGraph.isHorizontal, innerBndsRect);
  pathAry = path.pathAry;
  firstPathElement = castTo(pathAry.get_1(0), 11);
  lastPathElement = castTo(pathAry.get_1(pathAry.size_1() - 1), 11);
  if (sGraph.isHorizontal) {
    midPos = minPos + (maxPos - minPos) / 2;
    pathAry.add_0(new CFPathElement_0(1, midPos, lastPathElement.y_0));
    pathAry.add_0(new CFPathElement_0(1, midPos, firstPathElement.y_0));
  }
   else {
    midPos = maxPos + (minPos - maxPos) / 2;
    pathAry.add_0(new CFPathElement_0(1, lastPathElement.x_0, midPos));
    pathAry.add_0(new CFPathElement_0(1, firstPathElement.x_0, midPos));
  }
  pathAry.add_0(new CFPathElement);
  return path;
}

defineClass(28, 18, {28:1, 18:1}, SrsLineInfo, SrsLineInfo_0, SrsLineInfo_1);
_.freeResources_0 = function freeResources_49(){
  $freeResources_28(this);
}
;
_.getHintPoint = function getHintPoint(){
  return this.point;
}
;
_.getPointShape = function getPointShape(animPoint, fill, symbolsOnly, isFilledSymbol){
  var curPoint, fillWithStroke, scaleFactor, strokeWithFill, symPath, symStroke;
  symStroke = $duplicate_7(this.stroke_0);
  scaleFactor = this.graphHeight / 400;
  scaleFactor > 2 && (scaleFactor = 2);
  scaleFactor < 0.5 && (scaleFactor = 0.5);
  symStroke.width_0 > 2 && (symStroke.width_0 = 2);
  curPoint = this.point;
  !!animPoint && (curPoint = animPoint);
  if (this.symbolType == 0) {
    return new CFShape_0(getSymbolPath(1, curPoint.x_0, curPoint.y_0), fill, null);
  }
   else {
    symPath = getSymbolPath_0(this.symbolType, curPoint.x_0, curPoint.y_0, scaleFactor);
    symPath.shouldAntiAlias = true;
    if (isFilledSymbol) {
      fillWithStroke = new CFFill(this.stroke_0.color_0);
      strokeWithFill = new CFStroke(fill.color_0, symStroke.width_0);
      symbolsOnly && (strokeWithFill = null);
      return new CFShape_0(symPath, fillWithStroke, strokeWithFill);
    }
     else {
      return new CFShape_0(symPath, fill, symStroke);
    }
  }
}
;
_.inDragRect = function inDragRect_1(dragRect){
  return $containsPoint_0(dragRect, this.point);
}
;
_.isLine_0 = function isLine_0(){
  return true;
}
;
_.filledSymbol = false;
_.graphHeight = 0;
_.hasGaps = false;
_.hideGaps = false;
_.isForecastPoint = false;
_.lineStyle = 0;
_.symbolType = 0;
var Lcom_domo_charting_graphs_SrsLineInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsLineInfo', 28);
function $AproxIt(db){
  if (db > 0) {
    db > 0.999 && (db = 1);
    db < 1.0E-4 && (db = 0);
  }
   else {
    db < -0.999 && (db = -1);
    db > -1.0E-4 && (db = 0);
  }
  return db;
}

function $GetArcLineEndPoint(Radius, Angle, spx, spy){
  var Rad, x_0, y_0;
  Rad = $intern_28 * Angle;
  x_0 = $AproxIt($wnd.Math.cos(Rad));
  x_0 = x_0 * Radius;
  x_0 = spx + x_0;
  y_0 = $AproxIt($wnd.Math.sin(Rad));
  y_0 = y_0 * Radius;
  y_0 = spy - y_0;
  return new CFPoint(x_0, y_0);
}

function $getColoredFont(this$static, labelFont, sliceShape){
  var duplicateLabelFont, labelColor, srsColor;
  srsColor = sliceShape.fill_0.color_0;
  labelColor = $getLabelColorForSeriesColor(this$static.handler.graph.colorMgr, $withoutAlpha(srsColor));
  this$static.handler.graph.outlineStyle && !!this$static.handler.graph.chart && !!$getTextColor(this$static.handler.graph.chart.palette) && (labelColor = $getTextColor(this$static.handler.graph.chart.palette));
  duplicateLabelFont = $duplicate_2(labelFont);
  duplicateLabelFont.color_0 = labelColor;
  return duplicateLabelFont;
}

function $getRadius(this$static, innerRadius){
  var curLen, innerRadiusLen, len, radiusPct;
  if (isNaN_0(this$static.handler.maxVisibleValue)) {
    return this$static.handler.radius;
  }
   else {
    if (innerRadius > 0) {
      innerRadiusLen = this$static.handler.radius * innerRadius;
      len = this$static.handler.radius - innerRadiusLen;
      radiusPct = $getRadiusPct(this$static);
      curLen = len * radiusPct;
      return innerRadiusLen + curLen;
    }
     else {
      radiusPct = $getRadiusPct(this$static);
      return this$static.handler.radius * radiusPct;
    }
  }
}

function $getRadiusPct(this$static){
  var radiusPct, value_0;
  value_0 = $getValue(this$static.cell);
  this$static.isOtherSlice && (value_0 = $getOtherValue(this$static.handler.graph.data_0, this$static.handler.slicesBeforeOther, this$static.handler.graph.currentColumn));
  radiusPct = value_0 / this$static.handler.maxVisibleValue;
  radiusPct < 0 && (radiusPct *= -1);
  radiusPct > 1 && (radiusPct = 1);
  return radiusPct;
}

function $getShapeForPath(this$static, path, fill, stroke){
  if (this$static.handler.graph.outlineStyle) {
    stroke = getOutlineStroke(fill, stroke);
    fill = getOutlineFill(fill);
  }
  return new CFShape_0(path, fill, stroke);
}

function $getShapePct_2(this$static, type_0, percentComplete, prvSlice){
  var animInnerRadius, curStartAngle, lstState, offset, path;
  if (this$static.startAngle == this$static.endAngle) {
    this$static.animEndAngle = this$static.endAngle;
    return null;
  }
  lstState = null;
  !!this$static.lastState && instanceOf(this$static.lastState, 71) && (lstState = castTo(this$static.lastState, 71));
  if ($equals_2(type_0, 'Pie1')) {
    this$static.animEndAngle = this$static.startAngle + (this$static.endAngle - this$static.startAngle) * percentComplete;
    path = this$static.handler.getPiePath(this$static, this$static.handler.innerRadius, this$static.startAngle, this$static.animEndAngle);
    return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
  }
   else if (($equals_2(type_0, 'Initial') || $equals_2(type_0, 'Transition') || $equals_2(type_0, 'Play')) && !lstState) {
    offset = 0;
    !!prvSlice && !this$static.isMulti && (offset = this$static.startAngle - prvSlice.animEndAngle);
    this$static.animEndAngle = this$static.startAngle + (this$static.endAngle - this$static.startAngle) * percentComplete - offset;
    path = this$static.handler.getPiePath(this$static, this$static.handler.innerRadius, this$static.startAngle - offset, this$static.animEndAngle);
    return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
  }
   else if (($equals_2(type_0, 'Transition') || $equals_2(type_0, 'Play')) && !!lstState) {
    curStartAngle = lstState.startAngle + (this$static.startAngle - lstState.startAngle) * percentComplete;
    this$static.animEndAngle = lstState.endAngle + (this$static.endAngle - lstState.endAngle) * percentComplete;
    if ($equals_2(type_0, 'Play')) {
      animInnerRadius = 0;
      this$static.handler.graph.graphType == 9 && (animInnerRadius = 0.57);
      path = this$static.handler.getPiePath(this$static, animInnerRadius, curStartAngle, this$static.animEndAngle);
      return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
    }
     else if ($getPreviousGraphType(this$static.handler.graph) == 8 && this$static.handler.graph.graphType == 9) {
      animInnerRadius = percentComplete * 0.57;
      path = this$static.handler.getPiePath(this$static, animInnerRadius, curStartAngle, this$static.animEndAngle);
      return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
    }
     else if ($getPreviousGraphType(this$static.handler.graph) == 9 && this$static.handler.graph.graphType == 8) {
      animInnerRadius = 0.57 - percentComplete * 0.57;
      path = this$static.handler.getPiePath(this$static, animInnerRadius, curStartAngle, this$static.animEndAngle);
      return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
    }
     else {
      path = this$static.handler.getPiePath(this$static, this$static.handler.innerRadius, curStartAngle, this$static.animEndAngle);
      return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
    }
  }
   else {
    path = this$static.handler.getPiePath(this$static, this$static.handler.innerRadius, this$static.startAngle, this$static.endAngle);
    return $getShapeForPath(this$static, path, this$static.fill_0, this$static.stroke_0);
  }
}

function SrsSliceInfo(handler, cell, startAngle, endAngle, fill, stroke, lastState){
  SrsShapeInfo.call(this, cell, fill, stroke, lastState);
  this.handler = handler;
  this.startAngle = startAngle;
  this.endAngle = endAngle;
  this.supportsDynamicFilter = true;
  instanceOf(handler, 143) && (this.isMulti = true);
}

function SrsSliceInfo_0(handler, cell, level, startAngle, endAngle, fill, stroke, lastState){
  SrsShapeInfo.call(this, cell, fill, stroke, lastState);
  this.handler = handler;
  this.startAngle = startAngle;
  this.endAngle = endAngle;
  this.level = level;
  this.supportsDynamicFilter = true;
  this.isMulti = true;
}

defineClass(71, 18, {18:1, 71:1}, SrsSliceInfo, SrsSliceInfo_0);
_.freeResources_0 = function freeResources_50(){
  $freeResources_26(this);
  this.handler = null;
}
;
_.animEndAngle = 0;
_.endAngle = 0;
_.isMulti = false;
_.isOtherSlice = false;
_.level = 0;
_.startAngle = 0;
var Lcom_domo_charting_graphs_SrsSliceInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsSliceInfo', 71);
function $getDrawShapeForRect(this$static, rect){
  var hiLowLine, path;
  if (!this$static.handler.graph.typeAttributes.isHighLow && !this$static.handler.graph.typeAttributes.isHighLowOpenClose) {
    path = new CFPath_3(this$static.openCloseRect);
    $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0 / 2, rect.y_0));
    $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0 / 2, rect.y_0 + rect.height_0));
    return new CFShape_0(path, this$static.fill_0, new CFStroke(this$static.fill_0.color_0, 1));
  }
   else if (this$static.handler.graph.typeAttributes.isHighLowOpenClose) {
    path = new CFPath_3(rect);
    hiLowLine = $duplicate_5(this$static.openCloseRect);
    $setX_0(hiLowLine, rect.x_0 + rect.width_0 / 2 - 1);
    hiLowLine.width_0 = 2;
    $add(path, new CFPathRectElement_0(hiLowLine));
    return new CFShape_0(path, this$static.fill_0, null);
  }
   else if (this$static.handler.graph.typeAttributes.isHighLow) {
    hiLowLine = $duplicate_5(this$static.openCloseRect);
    $setX_0(hiLowLine, rect.x_0 + rect.width_0 / 2 - 1);
    hiLowLine.width_0 = 2;
    path = new CFPath_3(hiLowLine);
    return new CFShape_0(path, this$static.fill_0, null);
  }
  return null;
}

function SrsStockInfo(handler, cell, hiLowRect, openCloseRect, fill){
  SrsBarInfo_1.call(this, handler, cell, hiLowRect, null, fill, null, -1, null);
  this.openCloseRect = openCloseRect;
}

defineClass(358, 25, $intern_44, SrsStockInfo);
_.freeResources_0 = function freeResources_51(){
  $freeResources_27(this);
  this.openCloseRect = null;
}
;
_.getDrawShapeForRect = function getDrawShapeForRect_1(rect){
  return $getDrawShapeForRect(this, rect);
}
;
_.getHitShape = function getHitShape_1(){
  var path;
  path = new CFPath_3(this.rect);
  return new CFShape_0(path, ($clinit_CFFill() , TRANSPARENT_0), null);
}
;
_.getRect = function getRect_0(){
  return this.rect;
}
;
_.getShape = function getShape_0(){
  return $getDrawShapeForRect(this, this.rect);
}
;
var Lcom_domo_charting_graphs_SrsStockInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsStockInfo', 358);
function $calcDimensions(this$static, rnd, theFont, fontSize, fontColor){
  var dimension;
  this$static.font_0 = new CFFont_0(theFont.name_0, fontSize, fontColor);
  dimension = rnd.measureText_0(this$static.word, this$static.font_0);
  this$static.rect = new CFRect(0, 0, dimension.width_0, dimension.height_0);
  return dimension.width_0 * dimension.height_0;
}

function $getFontColor(this$static){
  if (this$static.font_0)
    return this$static.font_0.color_0;
  return this$static.color_0;
}

function $getVisbleRect(this$static){
  var visibleHeight, visibleRect, visibleY;
  visibleY = this$static.rect.y_0 + this$static.rect.height_0 * 0.16 - 1;
  visibleHeight = $intern_27 * this$static.rect.height_0 + 2;
  $hasDescenders(this$static) && (visibleHeight = 0.84 * this$static.rect.height_0);
  visibleRect = new CFRect(this$static.rect.x_0 - 2, visibleY, this$static.rect.width_0 + 6, visibleHeight + 1);
  return visibleRect;
}

function $getWordAsTextItemPercentComplete(this$static, rnd, pctComplete, colorOverride){
  var currentColor, currentFont, currentSize, finalSize, textItem;
  if (pctComplete > 0) {
    finalSize = this$static.font_0.size_0;
    currentSize = (finalSize - this$static.initialFontSizeForAnimation) * pctComplete + this$static.initialFontSizeForAnimation;
    currentColor = this$static.font_0.color_0;
    !!colorOverride && (currentColor = colorOverride);
    currentFont = new CFFont_0(this$static.font_0.name_0, currentSize, currentColor);
    textItem = new CFTextItem(rnd, this$static.rect, this$static.word, currentFont, HALIGN_CENTER, VALIGN_MIDDLE);
    return textItem;
  }
  return null;
}

function $hasDescenders(this$static){
  var ch_0, i;
  if (this$static.descendersChecked)
    return this$static.descenders;
  for (i = 0; i < this$static.word.length; i++) {
    ch_0 = $charAt_0(this$static.word, i);
    if (ch_0 >= 128) {
      this$static.descenders = true;
      break;
    }
    switch (ch_0) {
      case 124:
      case 123:
      case 125:
      case 91:
      case 93:
      case 103:
      case 106:
      case 112:
      case 113:
      case 121:
      case 74:
      case 81:
        this$static.descenders = true;
        this$static.descendersChecked = true;
        return this$static.descenders;
    }
  }
  this$static.descendersChecked = true;
  return false;
}

function $positionRect(this$static, X, Y, keepInside){
  if (!this$static.rect)
    return false;
  $setX_0(this$static.rect, X - this$static.rect.width_0 / 2);
  $setBottom(this$static.rect, Y);
  $keepRectInsideOtherRect(this$static.rect, keepInside);
  return true;
}

function $truncateToWidth(this$static, rnd, theFont, fontSize, width_0){
  var textInfo;
  this$static.font_0 = new CFFont_0(theFont.name_0, fontSize, theFont.color_0);
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, this$static.word, this$static.font_0, width_0, -1, 1);
  this$static.word = $getStringForIndex(textInfo);
}

function SrsWeightedWordInfo(handler, cell, word){
  var nameColor, valueColor;
  SrsShapeInfo.call(this, cell, null, null, null);
  this.handler = handler;
  this.word = word;
  this.weight = $getValue(cell);
  valueColor = $getColorForCellValue_0(handler.graph, cell, handler.graph.data_0.valueColumnName);
  nameColor = $getColorForCategoryName_0(handler.graph, cell);
  nameColor = nameColor?nameColor:valueColor;
  this.color_0 = nameColor;
}

defineClass(97, 18, {18:1, 97:1}, SrsWeightedWordInfo);
_.freeResources_0 = function freeResources_52(){
  $freeResources_26(this);
  this.handler = null;
  this.rect = null;
  this.word = null;
  this.font_0 = null;
  this.color_0 = null;
}
;
_.descenders = false;
_.descendersChecked = false;
_.initialFontSizeForAnimation = 2;
_.weight = 0;
var Lcom_domo_charting_graphs_SrsWeightedWordInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsWeightedWordInfo', 97);
function SrsXYInfo(handler, cell, point, bubbleValue, fill, stroke, lastState){
  SrsLineInfo.call(this, cell, point, 1, true, fill, stroke, lastState, 400);
  this.handler = handler;
  this.bubbleValue = bubbleValue;
}

defineClass(145, 28, {28:1, 18:1, 145:1}, SrsXYInfo);
_.freeResources_0 = function freeResources_53(){
  $freeResources_28(this);
  this.handler = null;
}
;
_.getHintPoint = function getHintPoint_0(){
  var diameter;
  if (this.handler.graph.typeAttributes.isBubble) {
    diameter = $getBubbleDiameter(this.handler, this.bubbleValue);
    return new CFPoint(this.point.x_0, this.point.y_0 - diameter / 2);
  }
  return this.point;
}
;
_.getPointShape = function getPointShape_0(animPoint, fill, symbolsOnly, isFilledSymbol){
  var curPoint, diameter, fillWithStroke, pointPath, strokeWithFill;
  curPoint = this.point;
  !!animPoint && (curPoint = animPoint);
  pointPath = new CFPath;
  diameter = $getBubbleDiameter(this.handler, this.bubbleValue);
  $add(pointPath, new CFPathCircleElement_0(curPoint.x_0, curPoint.y_0, diameter));
  fillWithStroke = new CFFill(this.stroke_0.color_0);
  this.handler.sGraph.typeAttributes.isXYLine && (fillWithStroke = new CFFill(new CFColor_0(0, 0, 0, 0)));
  strokeWithFill = new CFStroke(fill.color_0, this.stroke_0.width_0);
  symbolsOnly && (strokeWithFill = null);
  if (this.handler.graph.outlineStyle)
    return new CFShape_0(pointPath, getOutlineFill(fillWithStroke), getOutlineStroke(fillWithStroke, strokeWithFill));
  return new CFShape_0(pointPath, fillWithStroke, strokeWithFill);
}
;
_.bubbleValue = 0;
var Lcom_domo_charting_graphs_SrsXYInfo_2_classLit = createForClass('com.domo.charting.graphs', 'SrsXYInfo', 145);
function $calcStackedBarRectInfo(this$static, cell, value_0, baseScale, valueScale, curIndex, rowIndex, minValuePos, zeroValuePos, numColsInCategory, curCol, barIndex){
  var catScalePos, curBarWidth, isLogScale, origRect, valueScalePos;
  if (isNaN(value_0)) {
    this$static.barRect = null;
    return;
  }
  isLogScale = instanceOf(valueScale, 73);
  if (value_0 < 0) {
    this$static.stackedPosAry = this$static.stackedPosAryNegative;
    this$static.stackedValAry = this$static.stackedValAryNegative;
  }
   else {
    this$static.stackedPosAry = this$static.stackedPosAryPositive;
    this$static.stackedValAry = this$static.stackedValAryPositive;
  }
  catScalePos = baseScale.getPositionForValue(curIndex);
  valueScalePos = valueScale.getPositionForValue(value_0);
  if (isLogScale && $isStackedNonNested(this$static.handler.sGraph)) {
    this$static.stackedValAry[rowIndex] += value_0;
    valueScalePos = valueScale.getPositionForValue(this$static.stackedValAry[rowIndex]);
  }
  curBarWidth = this$static.barWidth;
  $isStackedNonNested(this$static.handler.sGraph) && this$static.handler.variableWidth && (curBarWidth = this$static.barWidth * $getPctOfRowValue(cell));
  this$static.barRect = $getBarRect(this$static.handler, this$static.minCatPos, catScalePos, minValuePos, valueScalePos, zeroValuePos, curBarWidth);
  isLogScale && $isStackedNonNested(this$static.handler.sGraph) && $adjustLogScaleBarRect(this$static.handler, this$static.stackedPosAry[rowIndex], minValuePos, value_0, this$static.barRect);
  this$static.origRectOffset = null;
  if (numColsInCategory > 1 && !this$static.handler.graph.typeAttributes.isSymbolOverlay) {
    origRect = $duplicate_5(this$static.barRect);
    this$static.barRect = $adjustForMultiColumn(this$static.handler, this$static.barRect, numColsInCategory, barIndex, this$static.stackedPosAry[rowIndex], value_0);
    $isStackedNonNested(this$static.handler.sGraph) && (this$static.origRectOffset = new CFPoint(origRect.x_0 - this$static.barRect.x_0, origRect.y_0 - this$static.barRect.y_0));
  }
  this$static.stackedPosAry[rowIndex] = this$static.barRect;
}

function StackedBarMetrics(handler, numRows, minCatPos, barWidth){
  this.handler = handler;
  this.stackedPosAryPositive = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  this.stackedPosAryNegative = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, numRows, 0, 1);
  this.stackedValAryPositive = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  this.stackedValAryNegative = initUnidimensionalArray(D_classLit, $intern_24, 41, numRows, 15, 1);
  this.minCatPos = minCatPos;
  this.barWidth = barWidth;
}

defineClass(234, 1, {}, StackedBarMetrics);
_.barWidth = 0;
_.minCatPos = 0;
var Lcom_domo_charting_graphs_StackedBarMetrics_2_classLit = createForClass('com.domo.charting.graphs', 'StackedBarMetrics', 234);
function $applyColors(this$static, fillColor, textColor){
  if (fillColor) {
    this$static.fillColor = fillColor;
    !textColor && (isLightColor(fillColor) || $setTextColor(this$static, ($clinit_CFColor() , WHITE)));
  }
  !!textColor && (this$static.textColor = textColor);
}

function $applyFormat(this$static, format, propogateToRow, propogateToCol){
  $applyColors(this$static, format.color_0, format.textColor);
  format.style_0 != 0 && (this$static.style_0 = format.style_0);
  propogateToRow && checkNotNull(format.applyToRow) && !!this$static.row && $applyFormatToAllCells(this$static.row, format);
  propogateToCol && checkNotNull(format.applyToRow) && !!this$static.column && $applyFormatToAllCells(this$static.column, format);
}

function $applyRangeColorFromColumn(this$static){
  if (this$static.column) {
    if (this$static.column.rangeValues) {
      this$static.fillColor = $getColorForValue(this$static.column, this$static.value_0);
      !!this$static.fillColor && (isLightColor(this$static.fillColor)?(this$static.textColor = ($clinit_CFColor() , TEXT_DARK_GRAY)):(this$static.textColor = ($clinit_CFColor() , WHITE)));
    }
  }
}

function $createDrawObjects_2(this$static, rnd, xPos, yPos, table){
  var borderPath, cellBackground, cellOverlay, cellRect, fill, font, ge, tCellBorder, textItem, textRect, theFill, result;
  if (!table)
    return;
  ge = new GraphicElement;
  cellRect = new CFRect(xPos, yPos, $getColumnDisplayWidth(this$static), $getRowDisplayHeight(this$static));
  theFill = this$static.fillColor;
  theFill = (result = theFill , !!this$static.row && !!this$static.column && (this$static.row.drawHoverState && this$static.column.drawHoverState?(result = CELL_HOVER_COLOR):this$static.row.drawHoverState?(result = ROW_HOVER_COLOR):this$static.column.drawHoverState && (result = COL_HOVER_COLOR)) , result);
  if (!!theFill && table.shouldFillCell(this$static)) {
    fill = new CFFill(theFill);
    cellBackground = new CFShape_1(cellRect, fill, null);
    !!cellBackground.path && (cellBackground.path.shouldAntiAlias = true);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, cellBackground);
  }
  if (table.shouldDrawCellText(this$static)) {
    textRect = new CFRect(xPos + table.leftCellPadding, yPos + table.topCellPadding, cellRect.width_0 - (table.leftCellPadding + table.rightCellPadding), cellRect.height_0 - (table.topCellPadding + table.bottomCellPadding));
    font = $getFontForFace(table, this$static.style_0);
    !!this$static.textColor && (font = new CFFont_1(font.name_0, font.size_0, this$static.textColor, font.face_0));
    textItem = $getTextItemForAlignmentAndRect(this$static, rnd, $getValueStrOrValue_0(this$static), textRect, font);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, textItem);
  }
  tCellBorder = table.getTableCellBorder(this$static);
  if (tCellBorder) {
    borderPath = $getPath(tCellBorder, cellRect);
    !!borderPath && $addShape(ge, new CFShape_0(borderPath, null, table.tableBorderStroke));
  }
  fill = ($clinit_CFFill() , TRANSPARENT_0);
  cellOverlay = new CFShape_1(cellRect, fill, null);
  cellOverlay.dataObject = this$static;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, cellOverlay);
  !!table.clipPath && (ge.clipPath = table.clipPath);
  table.geAry.add_0(ge);
}

function $formatIfNeeded(this$static, rnd, table){
  var value_0;
  if (!this$static.contentDimension) {
    value_0 = $getValueStrOrValue_0(this$static);
    value_0 != null && value_0.length > 0?(this$static.contentDimension = rnd.measureText_0(value_0, $getFontForFace(table, this$static.style_0))):(this$static.contentDimension = new CFDimension(0, 0));
  }
  return this$static.contentDimension;
}

function $getCellDrillFilter(dataGridCell){
  var colName, filterBase, result, rowNames, value_0;
  result = null;
  if (!!dataGridCell && !!dataGridCell.column) {
    value_0 = dataGridCell.valueStr;
    colName = $getColName(dataGridCell);
    filterBase = new FilterBase(colName, 'IN', dataGridCell.column);
    rowNames = new ArrayList;
    rowNames.array[rowNames.array.length] = value_0;
    filterBase.values = rowNames;
    result = getDrillFilterFromValues(filterBase);
  }
  return result;
}

function $getColumnDisplayWidth(this$static){
  if (this$static.column)
    return $getColDisplayWidth(this$static.column);
  return 0;
}

function $getDrillFilter_0(this$static){
  var filters;
  if (this$static.drillFilter == null) {
    if (!!this$static.cell && !!this$static.cell.row)
      this$static.drillFilter = $getDrillFilterFromNonNumericCellsInRow(this$static.cell.row);
    else {
      filters = new ArrayList;
      !!this$static.row && this$static.row.isHeaderRowCol && !!this$static.column?$getHeaderDrillFilters(this$static.column, filters, this$static.row.curIndex):!!this$static.column && this$static.column.isHeaderRowCol && !!this$static.row && $getHeaderDrillFilters(this$static.row, filters, this$static.column.curIndex);
      this$static.drillFilter = ($clinit_StrUtil() , getDrillFilterFromFiltersAndPassThrough_0(filters));
    }
  }
  return this$static.drillFilter;
}

function $getDrillFilterFromNonNumericCellsInRow(row){
  var cellMap, colMapping, dataGridCell, filters, index_0;
  cellMap = row.cellMap;
  filters = new ArrayList;
  if (!!cellMap && cellMap.hashCodeMap.size_0 + cellMap.stringMap.size_0 > 0) {
    for (index_0 = 0; index_0 < cellMap.hashCodeMap.size_0 + cellMap.stringMap.size_0; index_0++) {
      dataGridCell = castTo($get_1(cellMap, valueOf(index_0)), 16);
      if (!!dataGridCell && isNaN_0($getValue(dataGridCell))) {
        colMapping = dataGridCell.column.mapping;
        colMapping != null && colMapping.length > 0 && $add_1(filters, $getCellDrillFilter(dataGridCell));
      }
    }
  }
  if (filters.array.length > 0)
    return $clinit_StrUtil() , getDrillFilterFromFiltersAndPassThrough_0(filters);
  return null;
}

function $getRowDisplayHeight(this$static){
  if (this$static.row)
    return $getRowDisplayHeight_0(this$static.row);
  return 0;
}

function $getTextItemForAlignmentAndRect(this$static, rnd, text_0, rect, font){
  var textItem;
  textItem = new CFTextItem(rnd, rect, text_0, font, this$static.hAlign, this$static.vAlign);
  return textItem;
}

function $getValueStr_0(this$static){
  if (this$static.valueStr != null)
    return this$static.valueStr;
  else if (!!this$static.cell && this$static.cell.valueStr != null)
    return this$static.cell.valueStr;
  return '';
}

function $getValueStrOrValue_0(this$static){
  if (!isNaN_0(this$static.value_0) && !!this$static.column)
    return $formatNumber_2(this$static.column, this$static.value_0);
  return $getValueStr_0(this$static);
}

function $setStyle(this$static, theStyle){
  this$static.style_0 = theStyle;
}

function $setTextColor(this$static, textColor){
  this$static.textColor = textColor;
}

function TCell(source){
  this.cell = source;
  !!source && neq(source.timeMS, 0) && (this.value_0 = NaN);
}

function TCell_0(valueStr){
  this.valueStr = valueStr;
}

defineClass(70, 1, {70:1}, TCell, TCell_0);
_.hAlign = 0;
_.style_0 = 0;
_.vAlign = 11;
_.value_0 = NaN;
var Lcom_domo_charting_graphs_TCell_2_classLit = createForClass('com.domo.charting.graphs', 'TCell', 70);
function $getPath(this$static, rect){
  var path, pathElements;
  if (this$static.top_0 && this$static.left_0 && this$static.bottom && this$static.right)
    return new CFPath_3(rect);
  if (!this$static.top_0 && !this$static.left_0 && !this$static.bottom && !this$static.right)
    return null;
  pathElements = new ArrayList;
  if (this$static.top_0) {
    $add_1(pathElements, new CFPathElement_0(0, rect.x_0, rect.y_0));
    $add_1(pathElements, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0));
  }
  if (this$static.bottom) {
    $add_1(pathElements, new CFPathElement_0(0, rect.x_0, rect.y_0 + rect.height_0));
    $add_1(pathElements, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0));
  }
  if (this$static.left_0) {
    $add_1(pathElements, new CFPathElement_0(0, rect.x_0, rect.y_0));
    $add_1(pathElements, new CFPathElement_0(1, rect.x_0, rect.y_0 + rect.height_0));
  }
  if (this$static.right) {
    $add_1(pathElements, new CFPathElement_0(0, rect.x_0 + rect.width_0, rect.y_0));
    $add_1(pathElements, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0));
  }
  path = new CFPath_9(pathElements);
  return path;
}

function TCellBorder(){
  this.top_0 = this.left_0 = this.bottom = this.right = true;
}

defineClass(243, 1, {}, TCellBorder);
_.bottom = false;
_.left_0 = false;
_.right = false;
_.top_0 = false;
var Lcom_domo_charting_graphs_TCellBorder_2_classLit = createForClass('com.domo.charting.graphs', 'TCellBorder', 243);
function $addFilterToList(this$static, filters, tRowCol, tCell){
  var filter, filterBase, rowHeaderName, rowNames;
  rowHeaderName = tRowCol.parentName;
  filterBase = new FilterBase(rowHeaderName, 'IN', null);
  rowNames = new ArrayList;
  $add_1(rowNames, $getValueStr_0(tCell));
  filterBase.values = rowNames;
  $setDataJoinColumn(filterBase, this$static.table.data_0.dateJoinColumn);
  $setDataSourceId_0(filterBase, this$static.table.data_0.name_0);
  $setFiscal(filterBase, this$static.table.data_0.isFiscalCalendar);
  filter = getDrillFilterFromValues(filterBase);
  filters.array[filters.array.length] = filter;
}

function $addItem_1(this$static, cell){
  $addItem_2(this$static, cell, false, $size(this$static.cells_0));
}

function $addItem_2(this$static, cell, isRow, otherIndex){
  isRow?(cell.row = this$static):(cell.column = this$static);
  $put_0(this$static.cells_0, valueOf(otherIndex), cell);
}

function $alignCellsInColumn(this$static){
  var entry, outerIter, tCell, tCell$iterator;
  this$static.isNumeric = $cellsAreNumeric(this$static);
  if (this$static.isNumeric) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      tCell.hAlign = 2;
    }
    this$static.hAlign = 2;
  }
}

function $applyAlignmentToAllCells(this$static, theAlignment){
  var entry, outerIter, tCell, tCell$iterator;
  this$static.hAlign = theAlignment;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      tCell.hAlign = theAlignment;
    }
  }
}

function $applyColorRanges_0(this$static){
  var entry, outerIter, tCell, tCell$iterator;
  this$static.rangeColors = this$static.table.rangeColors;
  !this$static.rangeColors && (this$static.rangeColors = new ArrayList , $add_1(this$static.rangeColors, new CFColor_2('BBE491')) , $add_1(this$static.rangeColors, new CFColor_2('A0D771')) , $add_1(this$static.rangeColors, new CFColor_2('80C25D')) , $add_1(this$static.rangeColors, new CFColor_2('559E38')) , $add_1(this$static.rangeColors, new CFColor_2('387B26')) , undefined);
  $calcRanges(this$static);
  if (this$static.rangeValues) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      !!tCell && !!tCell.row && !$isTotalSubTotalOrHeader(tCell.row) && $applyRangeColorFromColumn(tCell);
    }
  }
}

function $applyColorsToCells(this$static, fillColor, textColor){
  var entry, outerIter, tCell, tCell$iterator;
  fillColor = fillColor;
  textColor = textColor;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      $applyColors(tCell, fillColor, textColor);
    }
  }
}

function $applyColorsToColumn(this$static, fillColor, textColor){
  if (fillColor) {
    this$static.fillColor = fillColor;
    !textColor && (isLightColor(fillColor) || $setTextColor_0(this$static, ($clinit_CFColor() , WHITE)));
  }
  !!textColor && (this$static.textColor = textColor);
}

function $applyConditionalFormat(this$static, format, propogateToRow, propogateToCol, ignoreTotalsAndSubtotals){
  var entry, outerIter, tCell, tCell$iterator;
  if (format.filter.operand == null || !format.filter.values || format.filter.values.array.length == 0) {
    $applyFormatToAllCellsPropogate(this$static, format);
    return;
  }
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      if (ignoreTotalsAndSubtotals && (!!tCell.column && $isTotalSubTotalOrHeader(tCell.column) || !!tCell.row && $isTotalSubTotalOrHeader(tCell.row)))
        continue;
      tCell.cell?isNaN_0($getValue(tCell.cell))?tCell.cell.valueStr != null && $isMatchForName(format.filter, tCell.cell.valueStr, null, this$static.name_0) && $applyFormat(tCell, format, propogateToRow, propogateToCol):$isMatchForDouble(format.filter, this$static.name_0, this$static.originalName, $getValue(tCell.cell))?$applyFormat(tCell, format, propogateToRow, propogateToCol):$isMatchForDouble(format.filter, this$static.parentName, null, $getValue(tCell.cell)) && $applyFormat(tCell, format, propogateToRow, propogateToCol):$getValueStr_0(tCell) != null && $isMatchForName(format.filter, $getValueStr_0(tCell), null, this$static.parentName) && $applyFormat(tCell, format, propogateToRow, propogateToCol);
    }
  }
}

function $applyFillColorToCellsIfNotSet(this$static, fillColor){
  var entry, outerIter, tCell, tCell$iterator;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      !tCell.fillColor && (tCell.fillColor = fillColor);
    }
  }
}

function $applyFormatToAllCells(this$static, format){
  var entry, outerIter, tCell, tCell$iterator;
  !!format.color_0 && (this$static.fillColor = format.color_0);
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      $applyFormat(tCell, format, false, false);
    }
  }
}

function $applyFormatToAllCellsPropogate(this$static, format){
  var entry, outerIter, tCell, tCell$iterator;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      $applyFormat(tCell, format, this$static.isRow, !this$static.isRow);
    }
  }
}

function $applyTextStyleToAllCells(this$static, theStyle){
  var entry, outerIter, tCell, tCell$iterator;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      tCell.style_0 = theStyle;
    }
  }
}

function $applyWidth(value_0){
  var suffixlength;
  if (value_0 != null && $trim(value_0).length > 0) {
    value_0 = $trim(value_0).toLowerCase();
    suffixlength = 'px'.length;
    $equals_2(value_0.substr(value_0.length - suffixlength, suffixlength), 'px') && (value_0 = $substring_0(value_0, 0, value_0.length - 2));
    getInt(value_0, 0);
  }
}

function $applyWrapping(this$static){
  var entry, outerIter, tCell$iterator;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    entry = $next_1(tCell$iterator.val$outerIter2);
    castTo(entry.getValue(), 70);
  }
}

function $calcLogRanges(this$static){
  var currentValue, i, increment, logOfMax, logOfMin, newMax, newMin, oneRange, range;
  isNaN_0(checkNotNull(this$static.rangeMin)) && (this$static.rangeMin = $getMinValueNonNegative_0(this$static));
  isNaN_0(checkNotNull(this$static.rangeMax)) && (this$static.rangeMax = $getMaxValue_0(this$static));
  if (checkNotNull(this$static.rangeMin) != $intern_19 && checkNotNull(this$static.rangeMax) != $intern_20 && !isNaN_0(checkNotNull(this$static.rangeMin)) && !isNaN_0(checkNotNull(this$static.rangeMax))) {
    logOfMin = $wnd.Math.log(checkNotNull(this$static.rangeMin));
    logOfMax = $wnd.Math.log(checkNotNull(this$static.rangeMax));
    range = logOfMax - logOfMin;
    increment = range / this$static.rangeColors.array.length;
    currentValue = logOfMin;
    this$static.rangeValues = new ArrayList;
    if (this$static.rangeMin == this$static.rangeMax) {
      oneRange = new MinMax(checkNotNull(this$static.rangeMin), checkNotNull(this$static.rangeMax));
      $add_1(this$static.rangeValues, oneRange);
    }
     else {
      for (i = 0; i < this$static.rangeColors.array.length; i++) {
        newMin = $wnd.Math.exp(currentValue);
        currentValue += increment;
        newMax = $wnd.Math.exp(currentValue);
        i == 0?(oneRange = new MinMax(checkNotNull(this$static.rangeMin), newMax)):i == this$static.rangeColors.array.length - 1?(oneRange = new MinMax(newMin, checkNotNull(this$static.rangeMax))):(oneRange = new MinMax(newMin, newMax));
        $add_1(this$static.rangeValues, oneRange);
      }
    }
  }
}

function $calcRanges(this$static){
  var current, i, increment, oneRange, range, roundRange;
  if (this$static.useLogScale)
    $calcLogRanges(this$static);
  else {
    isNaN_0(checkNotNull(this$static.rangeMin)) && (this$static.rangeMin = $getMinValue_0(this$static));
    isNaN_0(checkNotNull(this$static.rangeMax)) && (this$static.rangeMax = $getMaxValue_0(this$static));
    roundRange = false;
    if (checkNotNull(this$static.rangeMin) != $intern_19 && checkNotNull(this$static.rangeMax) != $intern_20) {
      this$static.rangeValues = new ArrayList;
      range = checkNotNull(this$static.rangeMax) - checkNotNull(this$static.rangeMin);
      if (this$static.rangeMin == this$static.rangeMax) {
        oneRange = new MinMax(checkNotNull(this$static.rangeMin), checkNotNull(this$static.rangeMax));
        $add_1(this$static.rangeValues, oneRange);
      }
       else {
        if (range > 30 || checkNotNull(this$static.rangeMax) > 100) {
          roundRange = true;
          this$static.rangeMin = $wnd.Math.floor(checkNotNull(this$static.rangeMin));
          this$static.rangeMax = $wnd.Math.ceil(checkNotNull(this$static.rangeMax));
        }
        increment = range / this$static.rangeColors.array.length;
        roundRange && (increment = toDouble_0(fromDouble_0($wnd.Math.round(increment))));
        current = checkNotNull(this$static.rangeMin);
        for (i = 0; i < this$static.rangeColors.array.length; i++) {
          i == this$static.rangeColors.array.length - 1?(oneRange = new MinMax(current, checkNotNull(this$static.rangeMax))):(oneRange = new MinMax(current, current + increment));
          current += increment;
          $add_1(this$static.rangeValues, oneRange);
        }
      }
    }
  }
}

function $cellsAreNumeric(this$static){
  var count, entry, expectedCount, outerIter, tCell, tCell$iterator;
  if (this$static.type_0 == null || $equals_2(this$static.type_0, 'STRING')) {
    if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
      expectedCount = $size(this$static.cells_0);
      count = 0;
      for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
        tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
        !!tCell.cell && !isNaN_0($getValue(tCell.cell)) && ++count;
      }
      if (count == expectedCount)
        return true;
    }
    return false;
  }
   else if (this$static.type_0 != null && $startsWith(this$static.type_0, 'DATE'))
    return false;
  return true;
}

function $createDrawObjectForName(this$static, rnd, xPos, yPos, rowHeight, table){
  var cellBackground, cellRect, fill, font, ge, textItem, textRect;
  if (!table)
    return;
  ge = new GraphicElement;
  cellRect = new CFRect(xPos, yPos, this$static.colWidth + this$static.table.leftCellPadding + this$static.table.rightCellPadding + this$static.extraHorizontalPadding, rowHeight);
  fill = null;
  !!this$static.fillColor && (fill = new CFFill(this$static.fillColor));
  cellBackground = new CFShape_1(cellRect, fill, table.tableBorderStroke);
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, cellBackground);
  textRect = new CFRect(xPos + table.leftCellPadding, yPos + table.topCellPadding, cellRect.width_0 - (table.leftCellPadding + table.rightCellPadding), cellRect.height_0 - (table.topCellPadding + table.bottomCellPadding));
  font = $getFontForFace(table, this$static.style_0);
  !!this$static.textColor && (font = new CFFont_1(font.name_0, font.size_0, this$static.textColor, font.face_0));
  textItem = $getTextItemForAlignmentAndRect_0(this$static, rnd, $getName_0(this$static), textRect, font);
  !ge.textAry && (ge.textAry = new ArrayList);
  $add_1(ge.textAry, textItem);
  !!table.clipPath && (ge.clipPath = table.clipPath);
  table.geAry.add_0(ge);
}

function $createDrawObjects_3(this$static, rnd, xPos, yPos, tableGrid, table, maxCols, viewPortWidth){
  var cellBackground, cellRect, col, fill, ge, index_0, tCell, theFill, visibleCount, xPosAfterCell;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    visibleCount = 0;
    index_0 = 0;
    do {
      tCell = castTo($get_1(this$static.cells_0, valueOf(index_0)), 70);
      if (tCell) {
        if (!!tCell.column && !tCell.column.hidden) {
          xPosAfterCell = xPos + $getColumnDisplayWidth(tCell);
          xPosAfterCell >= 0 && xPos < viewPortWidth && $createDrawObjects_2(tCell, rnd, xPos, yPos, table);
          xPos = xPosAfterCell;
        }
      }
       else {
        col = castTo($get_2(tableGrid.cols_0, index_0), 30);
        if (!col.hidden) {
          xPosAfterCell = xPos + (col.colWidth + col.table.leftCellPadding + col.table.rightCellPadding + col.extraHorizontalPadding);
          if (xPosAfterCell >= 0 && xPos < viewPortWidth) {
            theFill = $getFillColorForTRowCol(this$static, col, this$static.fillColor, col.fillColor);
            if (theFill) {
              cellRect = new CFRect(xPos, yPos, col.colWidth + col.table.leftCellPadding + col.table.rightCellPadding + col.extraHorizontalPadding, this$static.rowHeight + this$static.table.topCellPadding + this$static.table.bottomCellPadding);
              fill = new CFFill(theFill);
              cellBackground = new CFShape_1(cellRect, fill, null);
              !!cellBackground.path && (cellBackground.path.shouldAntiAlias = true);
              ge = new GraphicElement_0(cellBackground);
              !!table.clipPath && (ge.clipPath = table.clipPath);
              table.geAry.add_0(ge);
            }
          }
          xPos = xPosAfterCell;
        }
      }
      ++index_0;
    }
     while (++visibleCount < maxCols);
  }
}

function $formatIfNeeded_0(this$static, rnd){
  var col, dim, entry, outerIter, tCell, tCell$iterator;
  if (!this$static.formatted) {
    this$static.rowHeight = 0;
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      col = tCell.column;
      if (!!col && col.hidden)
        continue;
      dim = $formatIfNeeded(tCell, rnd, this$static.table);
      dim.height_0 > this$static.rowHeight && (this$static.rowHeight = dim.height_0);
      !!col && (isNaN_0(col.colWidth) && (col.colWidth = 0) , dim.width_0 > col.colWidth && (col.colWidth = dim.width_0));
    }
  }
  this$static.formatted = true;
}

function $formatNameIfNeeded(this$static, rnd, table){
  if (!this$static.nameDimension) {
    $getName_0(this$static) != null?(this$static.nameDimension = rnd.measureText_0($getName_0(this$static), $getFontForFace(table, this$static.style_0))):(this$static.nameDimension = new CFDimension(0, 0));
    $updateWidth(this$static, this$static.nameDimension);
  }
  return this$static.nameDimension;
}

function $formatNumber_2(this$static, value_0){
  var localFormatter, result, showDecimals;
  localFormatter = $getNumberFormatter(this$static);
  if (localFormatter != this$static.numberFormatter) {
    showDecimals = localFormatter.alwaysShowDecimalPlaces;
    $equals_2('LONG', this$static.type_0) && (localFormatter.alwaysShowDecimalPlaces = false , localFormatter.needsNewNumFormat = true);
    result = $formatNumber_1(localFormatter, value_0);
    $equals_2('LONG', this$static.type_0) && (localFormatter.alwaysShowDecimalPlaces = showDecimals , localFormatter.needsNewNumFormat = true);
  }
   else 
    result = $formatNumber_1(localFormatter, value_0);
  return result;
}

function $freeResources_29(this$static){
  var entry, outerIter, tCell, tCell$iterator;
  if (this$static.cells_0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      tCell.cell = null;
      tCell.row = null;
      tCell.column = null;
      tCell.textColor = null;
      tCell.fillColor = null;
      tCell.drillFilter = null;
      tCell.contentDimension = null;
    }
    $reset_5(this$static.cells_0);
  }
  this$static.cells_0 = null;
  !!this$static.rangeColors && (this$static.rangeColors.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.rangeColors = null;
  !!this$static.rangeValues && (this$static.rangeValues.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.rangeValues = null;
  this$static.table = null;
}

function $getCellByIndex(this$static, index_0){
  return castTo($get_1(this$static.cells_0, index_0), 70);
}

function $getColDisplayWidth(this$static){
  return this$static.colWidth + this$static.table.leftCellPadding + this$static.table.rightCellPadding + this$static.extraHorizontalPadding;
}

function $getColorForValue(this$static, value_0){
  var i, oneRange;
  for (i = 0; i < this$static.rangeValues.array.length; i++) {
    oneRange = castTo($get_2(this$static.rangeValues, i), 48);
    if (value_0 >= oneRange.min_0 && value_0 <= oneRange.max_0)
      return castTo($get_2(this$static.rangeColors, i), 15);
  }
  if (value_0 < checkNotNull(this$static.rangeMin))
    return castTo($get_2(this$static.rangeColors, 0), 15);
  return null;
}

function $getHeaderDrillFilters(this$static, filters, colRowIndex){
  var index_0, tCell, tRowCol;
  if (this$static.isRow) {
    for (index_0 = 0; index_0 <= colRowIndex; index_0++) {
      tCell = $getCellByIndex(this$static, valueOf(index_0));
      if (!!tCell && !!tCell.column) {
        tRowCol = tCell.column;
        $addFilterToList(this$static, filters, tRowCol, tCell);
      }
    }
  }
   else {
    for (index_0 = 0; index_0 <= colRowIndex; index_0++) {
      tCell = $getCellByIndex(this$static, valueOf(index_0));
      if (!!tCell && !!tCell.row) {
        tRowCol = tCell.row;
        $addFilterToList(this$static, filters, tRowCol, tCell);
      }
    }
  }
}

function $getMaxValue_0(this$static){
  var entry, max_0, outerIter, tCell, tCell$iterator;
  max_0 = $intern_20;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    !!tCell.cell && !!tCell.row && !$isTotalSubTotalOrHeader(tCell.row) && !!tCell.column && !tCell.column.hidden && !tCell.row.hidden && $getValue(tCell.cell) > max_0 && (max_0 = $getValue(tCell.cell));
  }
  return max_0;
}

function $getMinValue_0(this$static){
  var entry, min_0, outerIter, tCell, tCell$iterator;
  min_0 = $intern_19;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    !!tCell.cell && !!tCell.row && !$isTotalSubTotalOrHeader(tCell.row) && !!tCell.column && !tCell.column.hidden && !tCell.row.hidden && $getValue(tCell.cell) < min_0 && (min_0 = $getValue(tCell.cell));
  }
  return min_0;
}

function $getMinValueNonNegative_0(this$static){
  var entry, min_0, outerIter, tCell, tCell$iterator;
  min_0 = $intern_19;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    !!tCell.cell && !!tCell.row && !$isTotalSubTotalOrHeader(tCell.row) && !!tCell.column && !tCell.column.hidden && !tCell.row.hidden && $getValue(tCell.cell) > 0 && $getValue(tCell.cell) < min_0 && (min_0 = $getValue(tCell.cell));
  }
  return min_0;
}

function $getName_0(this$static){
  if (this$static.name_0 != null)
    return this$static.name_0;
  return this$static.originalName;
}

function $getNumberFormatter(this$static){
  if (this$static.numberFormatter)
    return this$static.numberFormatter;
  return this$static.table.numberFormatter;
}

function $getRowDisplayHeight_0(this$static){
  return this$static.rowHeight + this$static.table.topCellPadding + this$static.table.bottomCellPadding;
}

function $getTextItemForAlignmentAndRect_0(this$static, rnd, text_0, rect, font){
  var textItem;
  textItem = new CFTextItem(rnd, rect, text_0, font, this$static.hAlign, this$static.vAlign);
  return textItem;
}

function $isTotalSubTotalOrHeader(this$static){
  return this$static.isTotalRowCol || this$static.isSubTotalRowCol || this$static.isHeaderRowCol;
}

function $setCellsTextColor(this$static, textColor){
  var entry, outerIter, tCell, tCell$iterator;
  this$static.textColor = textColor;
  if (!!this$static.cells_0 && $size(this$static.cells_0) > 0) {
    for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
      tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
      tCell.textColor = textColor;
    }
  }
}

function $setColumnFormat(this$static, columnFormat){
  this$static.columnFormat = columnFormat;
}

function $setCurIndex_0(this$static, value_0){
  this$static.curIndex = value_0;
}

function $setName_0(this$static, theName){
  this$static.name_0 = theName;
  this$static.originalName == null && (this$static.originalName = theName);
}

function $setOriginalName(this$static, theName){
  this$static.originalName = theName;
}

function $setParentName_0(this$static, theName){
  this$static.parentName = theName;
}

function $setTable_0(this$static, theTable){
  this$static.table = theTable;
}

function $setTextColor_0(this$static, textColor){
  this$static.textColor = textColor;
}

function $setType_0(this$static, theType){
  this$static.type_0 = theType;
}

function $setValueStrFromValueForAllCells(this$static){
  var entry, outerIter, tCell, tCell$iterator;
  for (tCell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(this$static.cells_0)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); tCell$iterator.val$outerIter2.hasNext;) {
    tCell = (entry = $next_1(tCell$iterator.val$outerIter2) , castTo(entry.getValue(), 70));
    !isNaN_0(tCell.value_0) && !!tCell.column?(tCell.valueStr = $formatNumber_2(tCell.column, tCell.value_0)):!!tCell.cell && !isNaN_0($getValue(tCell.cell)) && !!tCell.column?(tCell.valueStr = $formatNumber_2(tCell.column, $getValue(tCell.cell))):tCell.valueStr == null && (!!tCell.cell && tCell.cell.valueStr != null?(tCell.valueStr = tCell.cell.valueStr):(tCell.valueStr = ''));
  }
}

function $updateWidth(this$static, dimension){
  isNaN_0(this$static.colWidth) && (this$static.colWidth = 0);
  dimension.width_0 > this$static.colWidth && (this$static.colWidth = dimension.width_0);
}

function TRowCol(isThisARow){
  this.rangeMin = NaN;
  this.rangeMax = NaN;
  this.cells_0 = new HashMap;
  this.isRow = isThisARow;
}

defineClass(30, 1, {30:1}, TRowCol);
_.colWidth = NaN;
_.columnFormat = null;
_.curIndex = 0;
_.drawHoverState = false;
_.extraHorizontalPadding = 0;
_.formatted = false;
_.hAlign = 0;
_.hidden = false;
_.isHeaderRowCol = false;
_.isNumeric = false;
_.isRow = false;
_.isSubTotalRowCol = false;
_.isTotalRowCol = false;
_.rowHeight = 0;
_.style_0 = 0;
_.useLogScale = false;
_.vAlign = 11;
var Lcom_domo_charting_graphs_TRowCol_2_classLit = createForClass('com.domo.charting.graphs', 'TRowCol', 30);
function $addMultiplePercentVals(this$static, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, percentValue, pctNumFormatter, srsSliceInfo){
  var cellLevel, level, origValue, pctVal;
  level = srsSliceInfo.level;
  cellLevel = srsSliceInfo.cell;
  origValue = cellLevel.altValue;
  while (level > 0) {
    --level;
    cellLevel = $getCellForLevel(this$static, cellLevel, level);
    if (cellLevel) {
      pctVal = origValue / cellLevel.altValue * 100;
      $addPercentValue(this$static, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, pctVal, pctNumFormatter, $getLocalizedString2Params(this$static.graph, '', cellLevel.altName));
      top_0 += 27;
    }
  }
  $addPercentValue(this$static, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, percentValue, pctNumFormatter, $getLocalizedString1Param(this$static.graph, 'PCT_OF_TOTAL', ''));
}

function $addPercentValue(this$static, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, percentValue, pctNumFormatter, addlText){
  var dimValue, pcSymtFont, pctOfTextItem, pctStr, pctSymTextItem, pctTextItem, suffixlength;
  pctStr = $formatPercentNumber(pctNumFormatter, percentValue, false);
  suffixlength = '%'.length;
  $equals_2(pctStr.substr(pctStr.length - suffixlength, suffixlength), '%') && (pctStr = $substring_0(pctStr, 0, pctStr.length - 1));
  dimValue = rnd.measureText_0(pctStr, this$static.valueFont);
  pctTextItem = new CFTextItem_0('' + pctStr, pctFont, left, top_0 + valueBaseLineOffset);
  !ge.textAry && (ge.textAry = new ArrayList);
  $add_1(ge.textAry, pctTextItem);
  pcSymtFont = $duplicate_2(this$static.postFont);
  $setColor_1(pcSymtFont, new CFColor_2('#8A8D8F'));
  if (pctStr != null && pctStr.length > 0) {
    pctSymTextItem = new CFTextItem_0('%', pcSymtFont, round_int(left + dimValue.width_0), top_0 + valueBaseLineOffset);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, pctSymTextItem);
  }
  if (addlText != null) {
    pctOfTextItem = new CFTextItem_0(addlText, pctFont, round_int(left + dimValue.width_0 + 12), top_0 + valueBaseLineOffset);
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, pctOfTextItem);
  }
}

function $format_6(this$static, rnd){
  var conversionTextItem, conversionValueTextItem, formattedConversionValue, formattedTotalValue, ge, graphType, left, line, origTotal, right, textBnds, textTop, ti, titleValue, top_0, totalTextItems, totalValueTextItem, useOnlyOrigValues, values, values0, width_0, total, serVal;
  if (!this$static.graph || this$static.graph.needsFormat)
    return;
  this$static.graph.getChartOptionAsString('hvr_legend_title_value') != null && (titleValue = this$static.graph.getChartOptionAsString('hvr_legend_title_value') , titleValue != null && ($equalsIgnoreCase(titleValue, 'None')?(this$static.titleValue = 1):$equalsIgnoreCase(titleValue, 'Minimum')?(this$static.titleValue = 2):$equalsIgnoreCase(titleValue, 'Maximum')?(this$static.titleValue = 3):$equalsIgnoreCase(titleValue, 'Average') && (this$static.titleValue = 4)));
  this$static.graph.getChartOptionAsString('hvr_legend_title_text') != null && (this$static.titleText = this$static.graph.getChartOptionAsString('hvr_legend_title_text'));
  this$static.hidePercentValue = isTrue(this$static.graph.getChartOptionAsString('hide_hvr_pct_val'));
  clearGraphicElementArray(this$static.geAry);
  ge = new GraphicElement;
  if (this$static.graph) {
    graphType = this$static.graph.graphType;
    graphType == 22 || graphType == 13 || graphType == 27?(this$static.numberFormatter = new NumberFormatter_0(this$static.graph.hoverNumberFormatter)):(this$static.numberFormatter = new NumberFormatter_0(this$static.graph.numberFormatter));
    this$static.data_0 = this$static.graph.data_0;
    useOnlyOrigValues = false;
    this$static.graph.graphType == 22 && (useOnlyOrigValues = true);
    if (this$static.graph.graphType == 32 && instanceOf(this$static.graph.handler, 143)) {
      this$static.totalValue = castTo(this$static.graph.handler, 143).graphTotal;
      origTotal = this$static.totalValue;
    }
     else {
      this$static.totalValue = $getAbsoluteVisibleSum($getColumn(this$static.data_0, this$static.graph.currentColumn), $intern_21, useOnlyOrigValues);
      origTotal = $getOriginalVisibleSum($getColumn(this$static.data_0, this$static.graph.currentColumn));
      origTotal < 0 && -origTotal == this$static.totalValue && (this$static.totalValue = origTotal);
      this$static.titleValue == 2?(origTotal = $getMinOrigValue_0($getColumn(this$static.data_0, this$static.graph.currentColumn), false)):this$static.titleValue == 3?(origTotal = (values0 = $getValuesNonProjected($getColumn(this$static.data_0, this$static.graph.currentColumn), true, false) , getMaxValueForValues(values0))):this$static.titleValue == 4 && (origTotal = (values = $getOrigValuesNonProjected($getColumn(this$static.data_0, this$static.graph.currentColumn), false, false) , getAvgValueForValues(values)));
    }
    $getColorAry(this$static.graph);
    top_0 = round_int(this$static.bnds.y_0) + this$static.topMargin;
    left = round_int(this$static.bnds.x_0) + this$static.leftMargin;
    right = $getRight(this$static.bnds) - this$static.rightMargin;
    if (this$static.titleValue != 1) {
      line = new CFShape_0(new CFPath_1(left, top_0, right, top_0), null, this$static.lineStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, line);
    }
    if (this$static.graph.graphType == 27) {
      conversionTextItem = new CFTextItem_2(this$static.graph.getLocalizedString('OVERALL_CONVERSION'), this$static.totalFont, left, top_0 + 5);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, conversionTextItem);
      formattedConversionValue = $formatPercentNumber(this$static.numberFormatter, (total = $getValue($getFirstCell($getRow(this$static.graph.data_0, 0))) , serVal = $getValue($getFirstCell($getRow(this$static.graph.data_0, $getNumRows(this$static.graph.data_0) - 1))) , serVal / total * 100), false);
      conversionValueTextItem = new CFTextItem_2(formattedConversionValue, this$static.valueFont, left, top_0 + 30);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, conversionValueTextItem);
    }
     else if (this$static.titleValue != 1) {
      totalTextItems = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 3, 0, 1);
      textTop = top_0 + 30;
      if (this$static.titleText != null && this$static.titleText.length > 0) {
        width_0 = right - left;
        ti = getWrappedTextForWidthWithMaxLines(rnd, this$static.titleText, this$static.totalFont, width_0, 300, 3);
        if (ti.wrappedLines.array.length < 2) {
          totalTextItems[0] = new CFTextItem_2(this$static.titleText, this$static.totalFont, left, top_0 + 5);
        }
         else {
          textBnds = new CFRect(left, top_0 + 5, ti.textDimension.width_0, ti.textDimension.height_0);
          totalTextItems = $getCFTextItemsForWrappedLines(ti, rnd, textBnds, this$static.totalFont, 0, 0);
          this$static.valueTopOffset = 80 + round_int((ti.wrappedLines.array.length - 1) * $getLineHeight(this$static.totalFont, rnd));
        }
        textTop = round_int(top_0 + ti.textDimension.height_0 + 5);
      }
       else 
        this$static.titleValue == 0?(totalTextItems[0] = new CFTextItem_2(this$static.graph.getLocalizedString('TOTAL'), this$static.totalFont, left, top_0 + 5)):this$static.titleValue == 4?(totalTextItems[0] = new CFTextItem_2(this$static.graph.getLocalizedString('AVERAGE'), this$static.totalFont, left, top_0 + 5)):this$static.titleValue == 2?(totalTextItems[0] = new CFTextItem_2(this$static.graph.getLocalizedString('MINIMUM'), this$static.totalFont, left, top_0 + 5)):this$static.titleValue == 3 && (totalTextItems[0] = new CFTextItem_2(this$static.graph.getLocalizedString('MAXIMUM'), this$static.totalFont, left, top_0 + 5));
      $addTextItems(ge, totalTextItems);
      formattedTotalValue = $formatNumber_1(this$static.numberFormatter, origTotal);
      totalValueTextItem = new CFTextItem_2(formattedTotalValue, this$static.valueFont, left, textTop);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, totalValueTextItem);
    }
  }
  this$static.geAry.add_0(ge);
  this$static.totalGE = ge;
  this$static.needsFormat = false;
}

function $getCellForLevel(this$static, cell, level){
  var curRowNum, row, tmpCell;
  tmpCell = $getCellByCellIndex(cell.row, level + 1);
  if (!!tmpCell && !isNaN_0(tmpCell.altValue) && tmpCell.altName != null)
    return tmpCell;
  curRowNum = $getCurRowIndex(tmpCell) - 1;
  while (curRowNum >= 0) {
    row = $getRow(this$static.graph.data_0, curRowNum);
    if (!!row && $size(row.cellMap) > level + 1) {
      tmpCell = $getCellByCellIndex(row, level + 1);
      if (tmpCell.altName != null && !isNaN_0(tmpCell.altValue))
        return tmpCell;
    }
    --curRowNum;
  }
  return null;
}

function $getMarkerShape(this$static, left, top_0, valueTopOffset, fill){
  var markerRect, stroke;
  if (this$static.graph.graphType == 22 || this$static.graph.graphType == 27) {
    this$static.markerSize = 13;
    markerRect = new CFRect(left, top_0 + valueTopOffset + 14, this$static.markerSize, this$static.markerSize);
    return new CFShape_0(new CFPath_3(markerRect), fill, null);
  }
  stroke = null;
  if (this$static.graph.outlineStyle) {
    stroke = getOutlineStroke(fill, null);
    fill = getOutlineFill(fill);
  }
  return new CFShape_0(new CFPath_0(left, top_0 + valueTopOffset + 14, this$static.markerSize), fill, stroke);
}

function TotalLegend(theChart, graph){
  ComponentCSR.call(this, theChart, 'totalLeg');
  this.markerSize = 10;
  this.totalValue = 0;
  this.itemsBeforeOther = 12;
  this.titleValue = 0;
  this.leftMargin = 0;
  this.rightMargin = 0;
  this.topMargin = 0;
  this.valueTopOffset = 80;
  this.graph = graph;
  this.totalFont = new CFFont_0(null, 18, $getTextColor(graph.chart.palette));
  this.valueFont = new CFFont_0(null, 18, $getTextColor(graph.chart.palette));
  this.postFont = new CFFont_0(null, 14, $getTextColor(graph.chart.palette));
  this.lineStroke = new CFStroke(($clinit_CFColor() , DISABLED_LIGHT_GRAY), 1);
}

defineClass(106, 63, {23:1, 63:1, 106:1}, TotalLegend);
_.draw_1 = function draw_11(rnd){
  this.needsFormat && $format_6(this, rnd);
  $draw_1(this, rnd);
}
;
_.format_0 = function format_34(rnd){
  $format_6(this, rnd);
}
;
_.freeResources = function freeResources_54(dataToKeep){
  $freeResources_2(this, dataToKeep);
  this.graph = null;
  this.totalFont = null;
  this.valueFont = null;
  this.postFont = null;
  this.lineStroke = null;
  this.totalGE = null;
}
;
_.setHoverData = function setHoverData_26(data_0, rnd){
  if (!!this.graph && data_0 != null)
    return this.graph.setHoverData(data_0, rnd);
  return false;
}
;
_.setHoverEffects = function setHoverEffects_18(hoverData, rnd){
  var cell, doFormattedValue, doMarker, doValueFont, doValueTextItem, formattedValue, ge, geTmp, lastTextItem, left, line, lineHeight, marker, name_0, path, pctFont, pctNumFormatter, percentValue, prevValue, rowIndex, singleLineTop, slicesBeforeOther, srsFFInfo, srsInfo, srsShapeInfo, suffixlength, textRect, tmpLineHeight, tmpTextItem, top_0, total, totalBaseLineOffset, value_0, valueBaseLineOffset, valueTextItem, width_0;
  this.geAry.remove(this.totalGE);
  clearGraphicElementArray(this.geAry);
  this.geAry.add_0(this.totalGE);
  if (hoverData != null && instanceOf(hoverData, 18)) {
    this.bnds.height_0 < 200 && clearGraphicElementArray(this.geAry);
    srsShapeInfo = castTo(hoverData, 18);
    top_0 = round_int(this.bnds.y_0) + this.topMargin;
    left = round_int(this.bnds.x_0) + this.leftMargin;
    width_0 = this.bnds.width_0 - (this.leftMargin + this.rightMargin);
    this.bnds.height_0 < 200 && (this.valueTopOffset = 0);
    ge = new GraphicElement;
    if (this.titleValue != 1) {
      line = new CFShape_0(new CFPath_1(left, top_0 + this.valueTopOffset, left + width_0, top_0 + this.valueTopOffset), null, this.lineStroke);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, line);
    }
    cell = srsShapeInfo.cell;
    if (cell) {
      totalBaseLineOffset = $getCapHeightInt(this.totalFont, this.graph.rnd);
      valueBaseLineOffset = $getCapHeightInt(this.valueFont, this.graph.rnd);
      marker = $getMarkerShape(this, left, top_0, this.valueTopOffset, srsShapeInfo.fill_0);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, marker);
      value_0 = cell.value_0;
      this.graph.graphType == 32 && (value_0 = cell.altValue);
      name_0 = cell.altName;
      (name_0 == null || name_0.length == 0) && (name_0 = $getRowName(cell));
      this.graph.graphType == 22 && !isNaN_0(cell.altValue) && castTo(this.graph.handler, 202).maxBeforeOther > 0 && cell.altName != null && cell.row.isOtherRow && (value_0 = cell.altValue);
      if (this.graph.graphType == 8 || this.graph.graphType == 9) {
        if (instanceOf(hoverData, 71)) {
          srsInfo = castTo(hoverData, 71);
          slicesBeforeOther = castTo(this.graph.handler, 128).slicesBeforeOther;
          if ($getCurRowIndex(srsInfo.cell) == slicesBeforeOther && $getNumRows(this.graph.data_0) > slicesBeforeOther + 1) {
            value_0 = $getOtherValue(this.data_0, this.itemsBeforeOther, this.graph.currentColumn);
            name_0 = this.graph.getLocalizedString('OTHER');
          }
        }
      }
      top_0 += 8 + this.valueTopOffset;
      textRect = new CFRect(left + 20, top_0, width_0 - 20, 160);
      geTmp = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, 'A', this.totalFont, 0, 0, 5, null, null));
      tmpTextItem = castTo($get_2(geTmp.textAry, geTmp.textAry.array.length - 1), 26);
      tmpLineHeight = $getLineHeight(this.totalFont, rnd);
      $getLineHeight(tmpTextItem.font_0, rnd) > tmpLineHeight && (tmpLineHeight = $getLineHeight(tmpTextItem.font_0, rnd));
      singleLineTop = round_int(tmpTextItem.y_0 + tmpLineHeight - totalBaseLineOffset + 5);
      this.geAry.add_0(drawTextInBounds(rnd, textRect, name_0, this.totalFont, 0, 0, 5, null, null));
      lastTextItem = castTo($get_2(castTo(this.geAry.get_1(this.geAry.size_1() - 1), 12).textAry, castTo(this.geAry.get_1(this.geAry.size_1() - 1), 12).textAry.array.length - 1), 26);
      lineHeight = $getLineHeight(this.totalFont, rnd);
      $getLineHeight(lastTextItem.font_0, rnd) > lineHeight && (lineHeight = $getLineHeight(lastTextItem.font_0, rnd));
      top_0 = round_int(lastTextItem.y_0 + lineHeight - totalBaseLineOffset + 5);
      top_0 < singleLineTop && (top_0 = singleLineTop);
      formattedValue = $formatNumber_1(this.numberFormatter, value_0);
      valueTextItem = new CFTextItem_0(formattedValue, this.valueFont, left, top_0 + valueBaseLineOffset);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, valueTextItem);
      if (this.totalValue != 0 && formattedValue != null && (suffixlength = '%'.length , !$equals_2(formattedValue.substr(formattedValue.length - suffixlength, suffixlength), '%')) && !this.hidePercentValue) {
        pctFont = $duplicate_2(this.valueFont);
        $setColor_1(pctFont, new CFColor_2('#8A8D8F'));
        percentValue = value_0 / this.totalValue * 100;
        value_0 < 0 && percentValue > 0 && (percentValue *= -1);
        if (this.graph.graphType == 27) {
          total = $getValue($getFirstCell($getRow(this.graph.data_0, 0)));
          if (castTo(this.graph.handler, 201).percOfPrevious) {
            rowIndex = $getCurRowIndex(cell);
            rowIndex > 0 && (total = $getValue($getFirstCell($getRow(this.graph.data_0, rowIndex - 1))));
          }
          percentValue = value_0 / total * 100;
        }
        pctNumFormatter = new NumberFormatter_0(this.graph.numberFormatter);
        if (!pctNumFormatter.usePercentDecimalPlaces) {
          pctNumFormatter = new NumberFormatter_1(this.chart.locale);
          pctNumFormatter.percentDecimalPlaces = 1;
          pctNumFormatter.needsNewNumFormat = true;
          pctNumFormatter.alwaysShowDecimalPlaces = false;
          pctNumFormatter.needsNewNumFormat = true;
        }
        top_0 += 27;
        this.graph.graphType != 32?$addPercentValue(this, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, percentValue, pctNumFormatter, null):$addMultiplePercentVals(this, rnd, top_0, left, ge, valueBaseLineOffset, pctFont, percentValue, pctNumFormatter, castTo(srsShapeInfo, 71));
      }
      if (this.graph.graphType == 27) {
        if (instanceOf(srsShapeInfo, 116) && !!castTo(srsShapeInfo, 116).doPath) {
          srsFFInfo = castTo(srsShapeInfo, 116);
          top_0 += 55;
          path = 'M ' + left + ' ' + top_0;
          path += ' L ' + (left + 8) + ' ' + (top_0 + 8);
          path += ' L ' + (left + 8) + ' ' + (top_0 + 20);
          path += ' L ' + left + ' ' + (top_0 + 12);
          path += ' L ' + left + ' ' + top_0;
          doMarker = new CFShape_0(new CFPath_7(path), new CFFill(castTo(srsShapeInfo, 116).doColor), null);
          !ge.shapeAry && (ge.shapeAry = new ArrayList);
          $add_1(ge.shapeAry, doMarker);
          rowIndex = $getCurRowIndex(srsFFInfo.cell);
          prevValue = $getValue($getFirstCell($getRow(this.graph.data_0, rowIndex - 1)));
          doFormattedValue = $formatNumber_1(this.numberFormatter, prevValue - value_0);
          doValueFont = new CFFont_0(null, 12, $getTextColor(this.graph.chart.palette));
          doValueTextItem = new CFTextItem_2(doFormattedValue + ' ' + this.graph.getLocalizedString('DROPPED'), doValueFont, left + 15, top_0 + 8);
          !ge.textAry && (ge.textAry = new ArrayList);
          $add_1(ge.textAry, doValueTextItem);
        }
      }
    }
    this.geAry.add_0(ge);
  }
}
;
_.hidePercentValue = false;
_.itemsBeforeOther = 0;
_.leftMargin = 0;
_.markerSize = 0;
_.rightMargin = 0;
_.titleValue = 0;
_.topMargin = 0;
_.totalValue = 0;
_.valueTopOffset = 0;
var Lcom_domo_charting_graphs_TotalLegend_2_classLit = createForClass('com.domo.charting.graphs', 'TotalLegend', 106);
function $calculateRatio(row, length_0){
  var max_0, min_0, sum;
  min_0 = $getArrayMin(row);
  max_0 = $getArrayMax(row);
  sum = $getArraySum(row);
  return $wnd.Math.max($wnd.Math.pow(length_0, 2) * max_0 / $wnd.Math.pow(sum, 2), $wnd.Math.pow(sum, 2) / ($wnd.Math.pow(length_0, 2) * min_0));
}

function $cutArea(area, rect){
  var areaheight, areawidth, newcontainer, newheight, newwidth;
  if (rect.width_0 >= rect.height_0) {
    areawidth = area / rect.height_0;
    newwidth = rect.width_0 - areawidth;
    newcontainer = new CFRect(rect.x_0 + areawidth, rect.y_0, newwidth, rect.height_0);
  }
   else {
    areaheight = area / rect.width_0;
    newheight = rect.height_0 - areaheight;
    newcontainer = new CFRect(rect.x_0, rect.y_0 + areaheight, rect.width_0, newheight);
  }
  return newcontainer;
}

function $getArrayMax(data_0){
  var max_0, value_0, value$iterator;
  max_0 = $intern_20;
  for (value$iterator = data_0.iterator(); value$iterator.hasNext_0();) {
    value_0 = castToDouble(value$iterator.next_1());
    value_0 != null && !isNaN_0((checkCriticalNotNull(value_0) , value_0)) && (checkCriticalNotNull(value_0) , value_0) > max_0 && (max_0 = (checkCriticalNotNull(value_0) , value_0));
  }
  return max_0;
}

function $getArrayMin(data_0){
  var min_0, value_0, value$iterator;
  min_0 = $intern_19;
  for (value$iterator = data_0.iterator(); value$iterator.hasNext_0();) {
    value_0 = castToDouble(value$iterator.next_1());
    value_0 != null && !isNaN_0((checkCriticalNotNull(value_0) , value_0)) && (checkCriticalNotNull(value_0) , value_0) < min_0 && (min_0 = (checkCriticalNotNull(value_0) , value_0));
  }
  return min_0;
}

function $getArraySum(data_0){
  var sum, value_0, value$iterator;
  sum = 0;
  for (value$iterator = data_0.iterator(); value$iterator.hasNext_0();) {
    value_0 = castToDouble(value$iterator.next_1());
    value_0 != null && !isNaN_0((checkCriticalNotNull(value_0) , value_0)) && (sum += $wnd.Math.abs((checkCriticalNotNull(value_0) , value_0)));
  }
  return sum;
}

function $getCoordinates(row, rect){
  var areaheight, areawidth, coordinates, i, subxoffset, subyoffset;
  coordinates = new ArrayList;
  subxoffset = rect.x_0;
  subyoffset = rect.y_0;
  areawidth = $getArraySum(row) / rect.height_0;
  areaheight = $getArraySum(row) / rect.width_0;
  if (rect.width_0 >= rect.height_0) {
    for (i = 0; i < row.size_1(); i++) {
      $add_1(coordinates, new CFRect(subxoffset, subyoffset, subxoffset + areawidth, subyoffset + checkNotNull(castToDouble(row.get_1(i))) / areawidth));
      subyoffset = subyoffset + checkNotNull(castToDouble(row.get_1(i))) / areawidth;
    }
  }
   else {
    for (i = 0; i < row.size_1(); i++) {
      $add_1(coordinates, new CFRect(subxoffset, subyoffset, subxoffset + checkNotNull(castToDouble(row.get_1(i))) / areaheight, subyoffset + areaheight));
      subxoffset = subxoffset + checkNotNull(castToDouble(row.get_1(i))) / areaheight;
    }
  }
  return coordinates;
}

function $getTreemapRects(this$static, data_0, width_0, height, xoffset, yoffset){
  var coords, coords$iterator, rects, treeMapNodes, treemapCoords;
  rects = new ArrayList;
  treeMapNodes = new ArrayList;
  treemapCoords = $squarify(this$static, $normalize(data_0, width_0 * height), new ArrayList, new CFRect(xoffset, yoffset, width_0, height), rects);
  if (treemapCoords) {
    for (coords$iterator = treemapCoords.iterator(); coords$iterator.hasNext_0();) {
      coords = castTo(coords$iterator.next_1(), 4);
      $add_1(treeMapNodes, new CFRect(coords.x_0, coords.y_0, coords.width_0 - coords.x_0, coords.height_0 - coords.y_0));
    }
  }
  return treeMapNodes;
}

function $improvesRatio(currentrow, nextnode, length_0){
  var currentratio, newratio, newrow;
  if (currentrow.size_1() == 0) {
    return true;
  }
  newrow = $listSlice(currentrow, 0);
  $add_1(newrow, nextnode);
  currentratio = $calculateRatio(currentrow, length_0);
  newratio = $calculateRatio(newrow, length_0);
  return currentratio >= newratio;
}

function $listSlice(values, startingIndex){
  var index_0, result, value_0, value$iterator;
  result = new ArrayList;
  index_0 = 0;
  for (value$iterator = values.iterator(); value$iterator.hasNext_0();) {
    value_0 = castToDouble(value$iterator.next_1());
    index_0 >= startingIndex && (result.array[result.array.length] = value_0 , true);
    ++index_0;
  }
  return result;
}

function $normalize(data_0, area){
  var i, multiplier, normalizeddata, sum, value_0;
  normalizeddata = new ArrayList;
  sum = $getArraySum(data_0);
  multiplier = area / sum;
  for (i = 0; i < data_0.array.length; i++) {
    value_0 = (checkCriticalElementIndex(i, data_0.array.length) , castToDouble(data_0.array[i]));
    value_0 != null && !isNaN_0((checkCriticalNotNull(value_0) , value_0)) && (checkCriticalNotNull(value_0) , value_0) != 0 && $add_1(normalizeddata, $wnd.Math.abs((checkCriticalNotNull(value_0) , value_0)) * multiplier);
  }
  return normalizeddata;
}

function $squarify(this$static, data_0, currentrow, container, stack_0){
  var length_0, newcontainer, nextdatapoint;
  if (data_0.size_1() == 0) {
    stack_0.addAll($getCoordinates(currentrow, container));
    return null;
  }
  length_0 = $wnd.Math.min(container.height_0, container.width_0);
  nextdatapoint = checkNotNull(castToDouble(data_0.get_1(0)));
  if ($improvesRatio(currentrow, nextdatapoint, length_0)) {
    currentrow.add_0(nextdatapoint);
    $squarify(this$static, $listSlice(data_0, 1), currentrow, container, stack_0);
  }
   else {
    newcontainer = $cutArea($getArraySum(currentrow), container);
    stack_0.addAll($getCoordinates(currentrow, container));
    $squarify(this$static, data_0, new ArrayList, newcontainer, stack_0);
  }
  return stack_0;
}

function TreeMapInfo(){
}

defineClass(354, 1, {}, TreeMapInfo);
var Lcom_domo_charting_graphs_TreeMapInfo_2_classLit = createForClass('com.domo.charting.graphs', 'TreeMapInfo', 354);
function $duplicate(this$static){
  var dupTA;
  dupTA = new TypeAttributes;
  dupTA.isStacked = this$static.isStacked;
  dupTA.curvedLines = this$static.curvedLines;
  dupTA.stepLines = this$static.stepLines;
  dupTA.isRunningTotal = this$static.isRunningTotal;
  dupTA.isNestedBar = this$static.isNestedBar;
  dupTA.isBullet = this$static.isBullet;
  dupTA.isSymbol = this$static.isSymbol;
  dupTA.isSymbolOverlay = this$static.isSymbolOverlay;
  dupTA.isGroupedStacked = this$static.isGroupedStacked;
  dupTA.isAdvancedCompGauge = this$static.isAdvancedCompGauge;
  dupTA.isCompNoFillGauge = this$static.isCompNoFillGauge;
  dupTA.isFilledGauge = this$static.isFilledGauge;
  dupTA.isHighLow = this$static.isHighLow;
  dupTA.isHighLowOpenClose = this$static.isHighLowOpenClose;
  dupTA.isGanttPercent = this$static.isGanttPercent;
  dupTA.isBubble = this$static.isBubble;
  dupTA.isFaceGauge = this$static.isFaceGauge;
  dupTA.isSingleValue = this$static.isSingleValue;
  dupTA.isProgressBar = this$static.isProgressBar;
  dupTA.isTextbox = this$static.isTextbox;
  dupTA.isRadial = this$static.isRadial;
  dupTA.isCategoryScatter = this$static.isCategoryScatter;
  dupTA.showSymbols = this$static.showSymbols;
  dupTA.symbolsOnly = this$static.symbolsOnly;
  dupTA.percentOfSeriesData = this$static.percentOfSeriesData;
  dupTA.percentOfCategoryData = this$static.percentOfCategoryData;
  dupTA.isNautilus = this$static.isNautilus;
  dupTA.isNightingale = this$static.isNightingale;
  dupTA.isPoPVariance = this$static.isPoPVariance;
  dupTA.isPeriodOverPeriod = this$static.isPeriodOverPeriod;
  dupTA.originallyStacked = this$static.originallyStacked;
  dupTA.isMarimekko = this$static.isMarimekko;
  dupTA.isDotPlot = this$static.isDotPlot;
  dupTA.isPopPlay = this$static.isPopPlay;
  dupTA.isOverlay = this$static.isOverlay;
  dupTA.isXYLine = this$static.isXYLine;
  dupTA.isXYForecast = this$static.isXYForecast;
  dupTA.isXYOutlier = this$static.isXYOutlier;
  dupTA.isStream = this$static.isStream;
  dupTA.isSpark = this$static.isSpark;
  dupTA.isNonAggregatedVersion = this$static.isNonAggregatedVersion;
  dupTA.isSelector = this$static.isSelector;
  dupTA.isDynamic = this$static.isDynamic;
  dupTA.isGrid = this$static.isGrid;
  dupTA.isRadio = this$static.isRadio;
  return dupTA;
}

function $equals(this$static, typeAttributes){
  return this$static.isStacked == typeAttributes.isStacked && this$static.curvedLines == typeAttributes.curvedLines && this$static.stepLines == typeAttributes.stepLines && this$static.isRunningTotal == typeAttributes.isRunningTotal && this$static.isNestedBar == typeAttributes.isNestedBar && this$static.isBullet == typeAttributes.isBullet && this$static.isSymbol == typeAttributes.isSymbol && this$static.isSymbolOverlay == typeAttributes.isSymbolOverlay && this$static.isGroupedStacked == typeAttributes.isGroupedStacked && this$static.isAdvancedCompGauge == typeAttributes.isAdvancedCompGauge && this$static.isCompNoFillGauge == typeAttributes.isCompNoFillGauge && this$static.isHighLow == typeAttributes.isHighLow && this$static.isHighLowOpenClose == typeAttributes.isHighLowOpenClose && this$static.isGanttPercent == typeAttributes.isGanttPercent && this$static.isBubble == typeAttributes.isBubble && this$static.isFaceGauge == typeAttributes.isFaceGauge && this$static.isSingleValue == typeAttributes.isSingleValue && this$static.isProgressBar == typeAttributes.isProgressBar && this$static.isTextbox == typeAttributes.isTextbox && this$static.isRadial == typeAttributes.isRadial && this$static.isCategoryScatter == typeAttributes.isCategoryScatter && this$static.showSymbols == typeAttributes.showSymbols && this$static.symbolsOnly == typeAttributes.symbolsOnly && this$static.percentOfSeriesData == typeAttributes.percentOfSeriesData && this$static.percentOfCategoryData == typeAttributes.percentOfCategoryData && this$static.isNautilus == typeAttributes.isNautilus && this$static.isNightingale == typeAttributes.isNightingale && this$static.isPoPVariance == typeAttributes.isPoPVariance && this$static.isPeriodOverPeriod == typeAttributes.isPeriodOverPeriod && this$static.originallyStacked == typeAttributes.originallyStacked && this$static.isMarimekko == typeAttributes.isMarimekko && this$static.isDotPlot == typeAttributes.isDotPlot && this$static.isPopPlay == typeAttributes.isPopPlay && this$static.isOverlay == typeAttributes.isOverlay && this$static.isXYLine == typeAttributes.isXYLine && this$static.isXYForecast == typeAttributes.isXYForecast && this$static.isXYOutlier == typeAttributes.isXYOutlier && this$static.isStream == typeAttributes.isStream && this$static.isSpark == typeAttributes.isSpark && this$static.isNonAggregatedVersion == typeAttributes.isNonAggregatedVersion && this$static.isSelector == typeAttributes.isSelector && this$static.isDynamic == typeAttributes.isDynamic && this$static.isGrid == typeAttributes.isGrid && this$static.isRadio == typeAttributes.isRadio;
}

function TypeAttributes(){
}

defineClass(39, 1, {}, TypeAttributes);
_.curvedLines = false;
_.isAdvancedCompGauge = false;
_.isBubble = false;
_.isBullet = false;
_.isCategoryScatter = false;
_.isCompNoFillGauge = false;
_.isDotPlot = false;
_.isDynamic = false;
_.isFaceGauge = false;
_.isFilledGauge = false;
_.isGanttPercent = false;
_.isGrid = false;
_.isGroupedStacked = false;
_.isHighLow = false;
_.isHighLowOpenClose = false;
_.isMarimekko = false;
_.isNautilus = false;
_.isNestedBar = false;
_.isNightingale = false;
_.isNonAggregatedVersion = false;
_.isOverlay = false;
_.isPeriodOverPeriod = false;
_.isPoPVariance = false;
_.isPopPlay = false;
_.isProgressBar = false;
_.isRadial = false;
_.isRadio = false;
_.isRunningTotal = false;
_.isSelector = false;
_.isSingleValue = false;
_.isSpark = false;
_.isStacked = false;
_.isStream = false;
_.isSymbol = false;
_.isSymbolOverlay = false;
_.isTextbox = false;
_.isXYForecast = false;
_.isXYLine = false;
_.isXYOutlier = false;
_.originallyStacked = false;
_.percentOfCategoryData = false;
_.percentOfSeriesData = false;
_.showSymbols = false;
_.stepLines = false;
_.symbolsOnly = false;
var Lcom_domo_charting_graphs_TypeAttributes_2_classLit = createForClass('com.domo.charting.graphs', 'TypeAttributes', 39);
function $get(this$static, index_0){
  var o;
  o = $opt(this$static, index_0);
  if (o == null) {
    throw toJs(new JSONException('JSONArray[' + index_0 + '] not found.'));
  }
  return o;
}

function $getDouble(this$static, index_0){
  var o;
  o = $get(this$static, index_0);
  if (instanceOf(o, 29))
    return checkNotNull(castTo(o, 29).value_0);
  if (instanceOfString(o)) {
    try {
      return __parseAndValidateDouble(castToString(o));
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 38))
        throw toJs($e0);
    }
  }
  throw toJs(new JSONException('JSONArray[' + index_0 + '] is not a double.'));
}

function $getDouble_0(this$static, index_0){
  var o;
  try {
    o = $get(this$static, index_0);
    if (instanceOf(o, 29))
      return checkNotNull(castTo(o, 29).value_0);
    if (instanceOfString(o)) {
      try {
        return __parseAndValidateDouble(castToString(o));
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (!instanceOf($e0, 38))
          throw toJs($e0);
      }
    }
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (!instanceOf($e1, 38))
      throw toJs($e1);
  }
  return NaN;
}

function $getInt(this$static, index_0){
  var o;
  o = $get(this$static, index_0);
  if (instanceOf(o, 29)) {
    return castTo(o, 29).value_0;
  }
   else if (instanceOf(o, 78)) {
    return toInt_0(castTo(o, 78).value_0);
  }
   else if (instanceOfString(o)) {
    try {
      return __parseAndValidateInt(castToString(o), 10);
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 38))
        throw toJs($e0);
    }
  }
  throw toJs(new JSONException('JSONArray[' + index_0 + '] is not an int.'));
}

function $getJSONArray(this$static, index_0){
  var o;
  o = $get(this$static, index_0);
  if (instanceOf(o, 92)) {
    return castTo(o, 92);
  }
  throw toJs(new JSONException('JSONArray[' + index_0 + '] is not a JSONArray.'));
}

function $getJSONObject(this$static, index_0){
  var o;
  o = $get(this$static, index_0);
  if (instanceOf(o, 69)) {
    return castTo(o, 69);
  }
  throw toJs(new JSONException('JSONArray[' + index_0 + '] is not a JSONObject.'));
}

function $length(this$static){
  if (this$static.myArrayList)
    return this$static.myArrayList.array.length;
  return 0;
}

function $opt(this$static, index_0){
  if (this$static.myArrayList)
    return index_0 < 0 || index_0 >= $length(this$static)?null:$get_2(this$static.myArrayList, index_0);
  return null;
}

function JSONArray(x_0){
  if ($nextClean(x_0) != 91) {
    throw toJs(new JSONException("A JSONArray text must start with '['" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
  }
  if ($nextClean(x_0) == 93) {
    return;
  }
  this.myArrayList = new ArrayList;
  x_0.myIndex > 0 && (x_0.myIndex -= 1);
  for (;;) {
    if ($nextClean(x_0) == 44) {
      x_0.myIndex > 0 && (x_0.myIndex -= 1);
      $add_1(this.myArrayList, null);
    }
     else {
      x_0.myIndex > 0 && (x_0.myIndex -= 1);
      $add_1(this.myArrayList, $nextValue(x_0));
    }
    switch ($nextClean(x_0)) {
      case 59:
      case 44:
        if ($nextClean(x_0) == 93) {
          return;
        }

        x_0.myIndex > 0 && (x_0.myIndex -= 1);
        break;
      case 93:
        return;
      default:throw toJs(new JSONException("Expected a ',' or ']'" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
    }
  }
}

function JSONArray_0(string){
  JSONArray.call(this, new JSONTokener(string));
}

defineClass(92, 1, {92:1}, JSONArray, JSONArray_0);
var Lcom_domo_charting_json_JSONArray_2_classLit = createForClass('com.domo.charting.json', 'JSONArray', 92);
function JSONException(message){
  Exception_0.call(this, message);
}

defineClass(35, 38, {35:1, 8:1, 38:1, 57:1}, JSONException);
_.getCause = function getCause_0(){
  return this.cause;
}
;
var Lcom_domo_charting_json_JSONException_2_classLit = createForClass('com.domo.charting.json', 'JSONException', 35);
function $clinit_JSONObject(){
  $clinit_JSONObject = emptyMethod;
  TRUE = ($clinit_Boolean() , $clinit_Boolean() , true);
  FALSE = (null , false);
  NULL = new JSONObject$Null;
}

function $get_0(this$static, key){
  var o;
  o = key == null?null:$get_4(this$static.myHashMap, key);
  if (o == null) {
    throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] not found.'));
  }
  return o;
}

function $getBoolean(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (equals_Ljava_lang_Object__Z__devirtual$(o, FALSE) || instanceOfString(o) && $equals_2(castToString(o).toLowerCase(), 'false')) {
    return false;
  }
   else if (equals_Ljava_lang_Object__Z__devirtual$(o, TRUE) || instanceOfString(o) && $equals_2(castToString(o).toLowerCase(), 'true')) {
    return true;
  }
  if (instanceOf(o, 192))
    return false;
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a Boolean.'));
}

function $getDouble_1(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (instanceOf(o, 29))
    return checkNotNull(castTo(o, 29).value_0);
  if (instanceOfString(o)) {
    try {
      return __parseAndValidateDouble(castToString(o));
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (!instanceOf($e0, 38))
        throw toJs($e0);
    }
  }
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a double.'));
}

function $getDouble_2(this$static, key, defaultValue){
  var o;
  try {
    o = $get_0(this$static, key);
    if (instanceOf(o, 29))
      return checkNotNull(castTo(o, 29).value_0);
    if (instanceOfString(o)) {
      try {
        return __parseAndValidateDouble(castToString(o));
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (!instanceOf($e0, 38))
          throw toJs($e0);
      }
    }
  }
   catch ($e1) {
    $e1 = toJava($e1);
    if (!instanceOf($e1, 38))
      throw toJs($e1);
  }
  return defaultValue;
}

function $getInt_0(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (instanceOf(o, 29)) {
    return castTo(o, 29).value_0;
  }
   else if (instanceOf(o, 78)) {
    return toInt_0(castTo(o, 78).value_0);
  }
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a number.'));
}

function $getJSONArray_0(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (instanceOf(o, 92)) {
    return castTo(o, 92);
  }
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a JSONArray.'));
}

function $getJSONObject_0(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (instanceOf(o, 69)) {
    return castTo(o, 69);
  }
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a JSONObject.'));
}

function $getLong(this$static, key){
  var o;
  o = $get_0(this$static, key);
  if (instanceOf(o, 29)) {
    return castTo(o, 29).value_0;
  }
   else if (instanceOf(o, 78)) {
    return castTo(o, 78).value_0;
  }
  throw toJs(new JSONException('JSONObject[' + quote_1(key) + '] is not a number.'));
}

function $has(this$static, key){
  return $containsKey_1(this$static.myHashMap, key);
}

function $put(this$static, key, value_0){
  if (key == null) {
    throw toJs(new JSONException('Null key.'));
  }
  value_0 != null?$put_3(this$static.myHashMap, key, value_0):$remove_7(this$static.myHashMap, key);
  return this$static;
}

function JSONObject(x_0){
  $clinit_JSONObject();
  var c, key;
  if ($nextClean(x_0) != 123) {
    throw toJs(new JSONException("A JSONObject text must begin with '{'" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
  }
  this.myHashMap = new LinkedHashMap;
  for (;;) {
    c = $nextClean(x_0);
    switch (c) {
      case 0:
        throw toJs(new JSONException("A JSONObject text must end with '}'" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
      case 125:
        return;
      default:x_0.myIndex > 0 && (x_0.myIndex -= 1);
        key = toString_24($nextValue(x_0));
    }
    c = $nextClean(x_0);
    if (c == 61) {
      $next(x_0) != 62 && x_0.myIndex > 0 && (x_0.myIndex -= 1);
    }
     else if (c != 58) {
      throw toJs(new JSONException("Expected a ':' after a key" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
    }
    $put(this, key, $nextValue(x_0));
    switch ($nextClean(x_0)) {
      case 59:
      case 44:
        if ($nextClean(x_0) == 125) {
          return;
        }

        x_0.myIndex > 0 && (x_0.myIndex -= 1);
        break;
      case 125:
        return;
      default:throw toJs(new JSONException("Expected a ',' or '}'" + (' at character ' + x_0.myIndex + ' of ' + x_0.mySource)));
    }
  }
}

function JSONObject_0(string){
  $clinit_JSONObject();
  JSONObject.call(this, new JSONTokener(string));
}

function quote_1(string){
  var b, c, i, len, sb, t;
  if (string == null || string.length == 0) {
    return '""';
  }
  c = 0;
  len = string.length;
  sb = new StringBuilder_0;
  sb.string += '"';
  for (i = 0; i < len; i += 1) {
    b = c;
    c = string.charCodeAt(i);
    switch (c) {
      case 92:
      case 34:
        sb.string += '\\';
        sb.string += String.fromCharCode(c);
        break;
      case 47:
        b == 60 && (sb.string += '\\' , sb);
        sb.string += '/';
        break;
      case 8:
        sb.string += '\\b';
        break;
      case 9:
        sb.string += '\\t';
        break;
      case 10:
        sb.string += '\\n';
        break;
      case 12:
        sb.string += '\\f';
        break;
      case 13:
        sb.string += '\\r';
        break;
      default:if (c < 32) {
          t = '000' + (c >>> 0).toString(16);
          $append_3(sb, '\\u' + $substring(t, t.length - 4));
        }
         else {
          sb.string += String.fromCharCode(c);
        }

    }
  }
  sb.string += '"';
  return sb.string;
}

defineClass(69, 1, {69:1}, JSONObject, JSONObject_0);
var FALSE, NULL, TRUE;
var Lcom_domo_charting_json_JSONObject_2_classLit = createForClass('com.domo.charting.json', 'JSONObject', 69);
function JSONObject$Null(){
}

defineClass(192, 1, {192:1}, JSONObject$Null);
_.equals_0 = function equals_24(object){
  return object == null || object === this;
}
;
_.toString_0 = function toString_8(){
  return 'null';
}
;
var Lcom_domo_charting_json_JSONObject$Null_2_classLit = createForClass('com.domo.charting.json', 'JSONObject/Null', 192);
function $allIntChars(s){
  var index_0, length_0, theChar;
  length_0 = s.length;
  for (index_0 = 1; index_0 < length_0; index_0++) {
    theChar = s.charCodeAt(index_0);
    if (theChar < 48 || theChar > 57)
      return false;
  }
  return true;
}

function $next(this$static){
  var c;
  if (this$static.myIndex < this$static.myLength) {
    c = $charAt_0(this$static.mySource, this$static.myIndex++);
    return c;
  }
  return 0;
}

function $next_0(this$static, n){
  var i, j;
  i = this$static.myIndex;
  j = i + n;
  if (j >= this$static.myLength) {
    throw toJs(new JSONException('Substring bounds error' + (' at character ' + this$static.myIndex + ' of ' + this$static.mySource)));
  }
  this$static.myIndex += n;
  return $substring_0(this$static.mySource, i, j);
}

function $nextClean(this$static){
  var c;
  while (true) {
    c = $next(this$static);
    if (c == 47) {
      switch ($next(this$static)) {
        case 47:
          do {
            c = $next(this$static);
          }
           while (c != 10 && c != 13 && c != 0);
          break;
        case 42:
          for (;;) {
            c = $next(this$static);
            if (c == 0) {
              throw toJs(new JSONException('Unclosed comment.' + (' at character ' + this$static.myIndex + ' of ' + this$static.mySource)));
            }
            if (c == 42) {
              if ($next(this$static) == 47) {
                break;
              }
              this$static.myIndex > 0 && (this$static.myIndex -= 1);
            }
          }

          break;
        default:this$static.myIndex > 0 && (this$static.myIndex -= 1);
          return 47;
      }
    }
     else if (c == 35) {
      do {
        c = $next(this$static);
      }
       while (c != 10 && c != 13 && c != 0);
    }
     else if (c == 0 || c > 32) {
      return c;
    }
  }
}

function $nextString(this$static, quote_0){
  var c, sb;
  sb = new StringBuilder;
  for (;;) {
    c = $next(this$static);
    switch (c) {
      case 0:
      case 10:
      case 13:
        throw toJs(new JSONException('Unterminated string' + (' at character ' + this$static.myIndex + ' of ' + this$static.mySource)));
      case 92:
        c = $next(this$static);
        switch (c) {
          case 98:
            sb.string += '\b';
            break;
          case 116:
            sb.string += '\t';
            break;
          case 110:
            sb.string += '\n';
            break;
          case 102:
            sb.string += '\f';
            break;
          case 114:
            sb.string += '\r';
            break;
          case 117:
            $append_0(sb, __parseAndValidateInt($next_0(this$static, 4), 16) & $intern_26);
            break;
          case 120:
            $append_0(sb, __parseAndValidateInt($next_0(this$static, 2), 16) & $intern_26);
            break;
          default:sb.string += String.fromCharCode(c);
        }

        break;
      default:if (c == quote_0) {
          return sb.string;
        }

        sb.string += String.fromCharCode(c);
    }
  }
}

function $nextValue(this$static){
  var b, c, endIndex, lowerCase, s, startIndex;
  c = $nextClean(this$static);
  switch (c) {
    case 34:
    case 39:
      return $nextString(this$static, c);
    case 123:
      this$static.myIndex > 0 && (this$static.myIndex -= 1);
      return new JSONObject(this$static);
    case 91:
      this$static.myIndex > 0 && (this$static.myIndex -= 1);
      return new JSONArray(this$static);
  }
  startIndex = this$static.myIndex - 1;
  b = c;
  while (c >= 32 && $notSpecialChar(c)) {
    c = $next(this$static);
  }
  this$static.myIndex > 0 && (this$static.myIndex -= 1);
  while ($charAt_0(this$static.mySource, startIndex) == 32)
    ++startIndex;
  endIndex = this$static.myIndex;
  while ($charAt_0(this$static.mySource, endIndex - 1) == 32)
    --endIndex;
  s = $substring_0(this$static.mySource, startIndex, endIndex);
  if (this$static.myLength == 0) {
    throw toJs(new JSONException('Missing value.' + (' at character ' + this$static.myIndex + ' of ' + this$static.mySource)));
  }
  if (b >= 48 && b <= 57 || b == 45) {
    if (b == 48) {
      if (s.length > 2 && (s.charCodeAt(1) == 120 || s.charCodeAt(1) == 88)) {
        try {
          return new Integer(__parseAndValidateInt(s.substr(2, s.length - 2), 16));
        }
         catch ($e0) {
          $e0 = toJava($e0);
          if (!instanceOf($e0, 38))
            throw toJs($e0);
        }
      }
    }
    if ($allIntChars(s)) {
      try {
        return new Integer(__parseAndValidateInt(s, 10));
      }
       catch ($e1) {
        $e1 = toJava($e1);
        if (!instanceOf($e1, 38))
          throw toJs($e1);
      }
    }
  }
  if (b == 116 || b == 84 || b == 102 || b == 70 || b == 110 || b == 78) {
    lowerCase = s.toLowerCase();
    if ($equals_2(lowerCase, 'true')) {
      return $clinit_JSONObject() , TRUE;
    }
    if ($equals_2(lowerCase, 'false')) {
      return $clinit_JSONObject() , FALSE;
    }
    if ($equals_2(lowerCase, 'null')) {
      return $clinit_JSONObject() , NULL;
    }
  }
  return s;
}

function $notSpecialChar(c){
  if (c == 44 || c == 34 || c == 58 || c == 93 || c == 125 || c == 91 || c == 123 || c == 59 || c == 61 || c == 47 || c == 92 || c == 35)
    return false;
  return true;
}

function JSONTokener(s){
  this.myIndex = 0;
  this.mySource = s;
  s != null && (this.myLength = s.length);
}

defineClass(231, 1, {}, JSONTokener);
_.toString_0 = function toString_9(){
  return ' at character ' + this.myIndex + ' of ' + this.mySource;
}
;
_.myIndex = 0;
_.myLength = 0;
var Lcom_domo_charting_json_JSONTokener_2_classLit = createForClass('com.domo.charting.json', 'JSONTokener', 231);
function Abbreviation(source){
  if (source) {
    this.name_0 = source.name_0;
    this.power = source.power;
    this.abbr_0 = source.abbr_0;
    this.value_0 = source.value_0;
  }
}

function Abbreviation_0(name_0, abbr_0, power){
  this.name_0 = name_0;
  this.power = power;
  this.abbr_0 = abbr_0;
  this.value_0 = $wnd.Math.pow(10, power);
}

defineClass(159, 1, {159:1}, Abbreviation, Abbreviation_0);
_.abbr_0 = '';
_.name_0 = '';
_.power = 0;
_.value_0 = 1;
var Lcom_domo_charting_locales_Abbreviation_2_classLit = createForClass('com.domo.charting.locales', 'Abbreviation', 159);
function $clinit_Localized(){
  $clinit_Localized = emptyMethod;
  locales = new HashMap;
  en = new HashMap;
  ja = new HashMap;
  fr = new HashMap;
  de = new HashMap;
  zh = new HashMap;
  es = new HashMap;
  $putStringValue(en, 'MORE_ITEMS', 'more ...');
  $putStringValue(en, 'NOT_ALL_DATA_SHOWN', 'Not all the data is shown.');
  $putStringValue(en, 'NO_DATA', 'No Data');
  $putStringValue(en, 'NO_DATA_EXISTS', 'No data in filtered range');
  $putStringValue(en, 'UNMAPPED_DATA', 'Unmapped Data');
  $putStringValue(en, 'TOTAL', 'Total');
  $putStringValue(en, 'GRAND_TOTAL', 'GRAND TOTAL');
  $putStringValue(en, 'COUNT', 'Count');
  $putStringValue(en, 'MANY', 'Many');
  $putStringValue(en, 'GOAL', 'Goal');
  $putStringValue(en, 'TARGET', 'Target');
  $putStringValue(en, 'OVERALL_CONVERSION', 'Overall Conversion');
  $putStringValue(en, 'DROPPED', 'Dropped');
  $putStringValue(en, 'SUMMARY', 'Summary');
  $putStringValue(en, 'HIGH', 'High');
  $putStringValue(en, 'LOW', 'Low');
  $putStringValue(en, 'OPEN', 'Open');
  $putStringValue(en, 'CLOSE', 'Close');
  $putStringValue(en, 'MEDIAN', 'Median');
  $putStringValue(en, 'Q1', 'Q1');
  $putStringValue(en, 'Q3', 'Q3');
  $putStringValue(en, 'QUARTERS', 'Q1|Q2|Q3|Q4');
  $putStringValue(en, 'NO_INTERACTIVITY', 'Interactivity has been disabled because of the number of items.');
  $putStringValue(en, 'LEGEND_MORE_INFO', 'To view legends for more items, hover\nover items in the chart');
  $putStringValue(en, 'MIN', 'Min');
  $putStringValue(en, 'MAX', 'Max');
  $putStringValue(en, 'AVG', 'Avg');
  $putStringValue(en, 'OTHER', 'Other');
  $putStringValue(en, 'CATEGORIES_IN_OTHER', 'Categories in Other');
  $putStringValue(en, 'LOWER_RANGE', 'Lower Range');
  $putStringValue(en, 'UPPER_RANGE', 'Upper Range');
  $putStringValue(en, 'TODAY', 'Today');
  $putStringValue(en, 'AM', 'AM');
  $putStringValue(en, 'PM', 'PM');
  $putStringValue(en, 'GROUP_TOTAL', 'Group total');
  $putStringValue(en, 'SCALE_MARKER', 'Scale marker');
  $putStringValue(en, 'WARN_NOT_ALL_DATA', 'Warning: Not all the data is shown.');
  $putStringValue(en, 'WARN_NEGATIVE_NUMBERS', 'Warning: Data contains negative numbers.');
  $putStringValue(en, 'WARN_INVALID_FOR_LOG_SCALE', 'Warning: Negative or zero values with log scale.');
  $putStringValue(en, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', 'Warning: Not all data is represented in the map.');
  $putStringValue(en, 'WARN_HIGHTLIGHTING_DISABLED', 'Highlighting disabled due to DataSet size');
  $putStringValue(en, 'ACTUAL', 'Actual');
  $putStringValue(en, 'PROJECTED', 'Projected');
  $putStringValue(en, 'DIFFERENCE', 'Difference');
  $putStringValue(en, 'VARIANCE', 'Variance');
  $putStringValue(en, 'MINIMUM', 'Minimum');
  $putStringValue(en, 'MAXIMUM', 'Maximum');
  $putStringValue(en, 'AVERAGE', 'Average');
  $putStringValue(en, 'STANDARD_DEVIATION', 'Standard Deviation');
  $putStringValue(en, 'STANDARD_DEVIATIONS', 'Standard Deviations');
  $putStringValue(en, 'PERCENTILE', 'Percentile');
  $putStringValue(en, 'PCT_OF', '% of');
  $putStringValue(en, 'FIRST_VALUE', 'First value');
  $putStringValue(en, 'LAST_VALUE', 'Last value');
  $putStringValue(en, 'NEXTTOLAST_VALUE', 'Next to last value');
  $putStringValue(en, 'bubble', 'Bubble');
  $putStringValue(en, 'bullet', 'H bullet');
  $putStringValue(en, 'calendar', 'Calendar');
  $putStringValue(en, 'category scatter', 'Category scatter');
  $putStringValue(en, 'gauge advanced', 'Gauge advanced');
  $putStringValue(en, 'gauge basic', 'Gauge basic');
  $putStringValue(en, 'gauge', 'Gauge');
  $putStringValue(en, 'curved symbol', 'Curved symbol');
  $putStringValue(en, 'curved line', 'Curved line');
  $putStringValue(en, 'donut', 'Donut');
  $putStringValue(en, 'face', 'Face');
  $putStringValue(en, 'filled', 'Filled');
  $putStringValue(en, 'funnel', 'Funnel');
  $putStringValue(en, 'funnel bars', 'Funnel bars');
  $putStringValue(en, 'folded funnel', 'Folded funnel');
  $putStringValue(en, 'gantt', 'Gantt');
  $putStringValue(en, 'gantt %', 'Gantt %');
  $putStringValue(en, 'gauge', 'Gauge');
  $putStringValue(en, 'heatmap', 'Heatmap');
  $putStringValue(en, 'high low', 'High low');
  $putStringValue(en, 'h 100%', 'H 100%');
  $putStringValue(en, 'h bar', 'H bar');
  $putStringValue(en, 'h boxplot', 'H boxplot');
  $putStringValue(en, 'h grouped stacked', 'H grouped stacked');
  $putStringValue(en, 'h histogram', 'H histogram');
  $putStringValue(en, 'h grouped', 'H grouped');
  $putStringValue(en, 'h nested', 'H nested');
  $putStringValue(en, 'h overlay', 'H overlay');
  $putStringValue(en, 'h % bar', 'H % bar');
  $putStringValue(en, 'h stacked', 'H stacked');
  $putStringValue(en, 'h symbol', 'H symbol');
  $putStringValue(en, 'h symbol overlay', 'H symbol overlay');
  $putStringValue(en, 'h waterfall', 'H waterfall');
  $putStringValue(en, 'line bar', 'Line bar');
  $putStringValue(en, 'line grouped stacked', 'Line grouped stacked');
  $putStringValue(en, 'line stacked', 'Line stacked');
  $putStringValue(en, 'pareto', 'Pareto');
  $putStringValue(en, 'pie', 'Pie');
  $putStringValue(en, 'bar line', 'Bar line');
  $putStringValue(en, 'variance bar line', 'Variance bar line');
  $putStringValue(en, 'line bar', 'Line bar');
  $putStringValue(en, 'variance line bar', 'Variance line bar');
  $putStringValue(en, 'line', 'Line');
  $putStringValue(en, 'variance line', 'Variance line');
  $putStringValue(en, 'grouped', 'Grouped');
  $putStringValue(en, 'progress', 'Progress');
  $putStringValue(en, 'radar', 'Radar');
  $putStringValue(en, 'running total line', 'Running total line');
  $putStringValue(en, 'value', 'Value');
  $putStringValue(en, 'area', 'Area');
  $putStringValue(en, 'step', 'Step');
  $putStringValue(en, 'candlestick', 'Candlestick');
  $putStringValue(en, 'symbol bar', 'Symbol bar');
  $putStringValue(en, 'symbol stacked', 'Symbol stacked');
  $putStringValue(en, 'symbol', 'Symbol');
  $putStringValue(en, 'text', 'Text');
  $putStringValue(en, 'treemap', 'Treemap');
  $putStringValue(en, 'line', 'Line');
  $putStringValue(en, 'multi-line', 'Multi-line');
  $putStringValue(en, '100%', '100%');
  $putStringValue(en, 'bar', 'Bar');
  $putStringValue(en, 'boxplot', 'Boxplot');
  $putStringValue(en, 'bullet', 'Bullet');
  $putStringValue(en, 'grouped stacked', 'Grouped stacked');
  $putStringValue(en, 'histogram', 'Histogram');
  $putStringValue(en, 'grouped', 'Grouped');
  $putStringValue(en, 'nested', 'Nested');
  $putStringValue(en, 'overlay', 'Overlay');
  $putStringValue(en, '% bar', '% Bar');
  $putStringValue(en, 'vert_rtbar', 'Running total bar');
  $putStringValue(en, 'running total grouped', 'Running total grouped');
  $putStringValue(en, 'running total stacked', 'Running total stacked');
  $putStringValue(en, 'stacked', 'Stacked');
  $putStringValue(en, 'symbol', 'Symbol');
  $putStringValue(en, 'symbol overlay', 'Symbol overlay');
  $putStringValue(en, 'waterfall', 'Waterfall');
  $putStringValue(en, 'word cloud', 'Word cloud');
  $putStringValue(en, 'scatter', 'Scatter');
  $putStringValue(en, 'curved_line_bar', 'Curved line bar');
  $putStringValue(en, 'curved_line_stackedbar', 'Curved line stacked');
  $putStringValue(en, 'horiz_100pct_area', 'H 100% area');
  $putStringValue(en, 'horiz_area_overlay', 'H area overlay');
  $putStringValue(en, 'horiz_bar_line', 'H bar line');
  $putStringValue(en, 'horiz_curved_100pct_area', 'H curved 100% area');
  $putStringValue(en, 'horiz_curved_area_overlay', 'H curved area overlay');
  $putStringValue(en, 'horiz_curved_stacked_area', 'H curved area');
  $putStringValue(en, 'horiz_center_area', 'H center area');
  $putStringValue(en, 'horiz_curved_symbolline', 'H curved symbol');
  $putStringValue(en, 'horiz_curvedline', 'H curved line');
  $putStringValue(en, 'horiz_line_bar', 'H line bar');
  $putStringValue(en, 'horiz_line_clusterbar', 'H line grouped stacked');
  $putStringValue(en, 'horiz_line_multi_dotplot', 'H line grouped lollipop');
  $putStringValue(en, 'horiz_line_stacked_dotplot', 'H line stacked lollipop');
  $putStringValue(en, 'horiz_line_stackedbar', 'H line stacked');
  $putStringValue(en, 'horiz_marimekko', 'H marimekko');
  $putStringValue(en, 'horiz_multi_dotplot', 'H grouped lollipop');
  $putStringValue(en, 'horiz_nested_linebar', 'H line nested bar');
  $putStringValue(en, 'horiz_rtbar', 'H running total');
  $putStringValue(en, 'horiz_rtmultibar', 'H running total grouped');
  $putStringValue(en, 'horiz_rtstackedbar', 'H running total');
  $putStringValue(en, 'horiz_stacked_dotplot', 'H stacked lollipop');
  $putStringValue(en, 'horiz_stackedtrend', 'H area');
  $putStringValue(en, 'horiz_step_100pct_area', 'H step 100% area');
  $putStringValue(en, 'horiz_step_area_overlay', 'H step area overlay');
  $putStringValue(en, 'horiz_step_stacked_area', 'H step area');
  $putStringValue(en, 'horiz_stepline', 'H step');
  $putStringValue(en, 'horiz_symbol_bar', 'H symbol bar');
  $putStringValue(en, 'horiz_symbol_stackedbar', 'H symbol stacked');
  $putStringValue(en, 'horiz_symbolline', 'H symbol line');
  $putStringValue(en, 'horiz_trendline', 'H line');
  $putStringValue(en, 'vert_100pct_area', '100% area');
  $putStringValue(en, 'vert_area_overlay', 'Area overlay');
  $putStringValue(en, 'vert_bar_line', 'Bar line');
  $putStringValue(en, 'vert_curved_100pct_area', 'Curved 100% area');
  $putStringValue(en, 'vert_curved_area_overlay', 'Curved area overlay');
  $putStringValue(en, 'vert_curved_stacked_area', 'Curved area');
  $putStringValue(en, 'vert_center_area', 'Center area');
  $putStringValue(en, 'vert_line_multi_dotplot', 'Line grouped lollipop');
  $putStringValue(en, 'vert_line_stacked_dotplot', 'Line stacked lollipop');
  $putStringValue(en, 'vert_marimekko', 'Marimekko');
  $putStringValue(en, 'vert_multi_dotplot', 'Grouped lollipop');
  $putStringValue(en, 'vert_nested_linebar', 'Line nested bar');
  $putStringValue(en, 'vert_stacked_dotplot', 'Stacked lollipop');
  $putStringValue(en, 'vert_step_100pct_area', 'Step 100% area');
  $putStringValue(en, 'vert_step_area_overlay', 'Step area overlay');
  $putStringValue(en, 'vert_step_stacked_area', 'Step area');
  $putStringValue(en, 'nautilus', 'Nautilus');
  $putStringValue(en, 'nautilus_donut', 'Nautilus donut');
  $putStringValue(en, 'nightingale_rose', 'Nightingale rose');
  $putStringValue(en, 'xy_line', 'XY line');
  $putStringValue(en, 'ds_pred_modeling', 'Predictive');
  $putStringValue(en, 'ds_forecasting', 'Forecasting');
  $putStringValue(en, 'ds_outliers', 'Outliers');
  $putStringValue(en, 'stream', 'Stream');
  $putStringValue(en, 'stream_funnel', 'Stream funnel');
  $putStringValue(en, 'flex_table', 'Flex table');
  $putStringValue(en, 'QUANTILES_3_2', 'Upper Tercile');
  $putStringValue(en, 'QUANTILES_3_1', 'Lower Tercile');
  $putStringValue(en, 'QUANTILES_4_3', 'Upper Quartile');
  $putStringValue(en, 'QUANTILES_4_2', 'Median');
  $putStringValue(en, 'QUANTILES_4_1', 'Lower Quartile');
  $putStringValue(en, 'QUANTILES_5_4', 'Fourth Quintile');
  $putStringValue(en, 'QUANTILES_5_3', 'Third Quintile');
  $putStringValue(en, 'QUANTILES_5_2', 'Second Quintile');
  $putStringValue(en, 'QUANTILES_5_1', 'First Quintile');
  $putStringValue(en, 'QUANTILES_6_5', 'Fifth Sextile');
  $putStringValue(en, 'QUANTILES_6_4', 'Fourth Sextile');
  $putStringValue(en, 'QUANTILES_6_3', 'Third Sextile');
  $putStringValue(en, 'QUANTILES_6_2', 'Second Sextile');
  $putStringValue(en, 'QUANTILES_6_1', 'First Sextile');
  $putStringValue(en, 'QUANTILES_7_6', 'Sixth Septile');
  $putStringValue(en, 'QUANTILES_7_5', 'Fifth Septile');
  $putStringValue(en, 'QUANTILES_7_4', 'Fourth Septile');
  $putStringValue(en, 'QUANTILES_7_3', 'Third Septile');
  $putStringValue(en, 'QUANTILES_7_2', 'Second Septile');
  $putStringValue(en, 'QUANTILES_7_1', 'First Septile');
  $putStringValue(en, 'QUANTILES_8_7', 'Seventh Octile');
  $putStringValue(en, 'QUANTILES_8_6', 'Sixth Octile');
  $putStringValue(en, 'QUANTILES_8_5', 'Fifth Octile');
  $putStringValue(en, 'QUANTILES_8_4', 'Fourth Octile');
  $putStringValue(en, 'QUANTILES_8_3', 'Third Octile');
  $putStringValue(en, 'QUANTILES_8_2', 'Second Octile');
  $putStringValue(en, 'QUANTILES_8_1', 'First Octile');
  $putStringValue(en, 'QUANTILES_9_8', '8/9 Tile');
  $putStringValue(en, 'QUANTILES_9_7', '7/9 Tile');
  $putStringValue(en, 'QUANTILES_9_6', '6/9 Tile');
  $putStringValue(en, 'QUANTILES_9_5', '5/9 Tile');
  $putStringValue(en, 'QUANTILES_9_4', '4/9 Tile');
  $putStringValue(en, 'QUANTILES_9_3', '3/9 Tile');
  $putStringValue(en, 'QUANTILES_9_2', '2/9 Tile');
  $putStringValue(en, 'QUANTILES_9_1', '1/9 Tile');
  $putStringValue(en, 'QUANTILES_10_9', '9 Decile');
  $putStringValue(en, 'QUANTILES_10_8', '8 Decile');
  $putStringValue(en, 'QUANTILES_10_7', '7 Decile');
  $putStringValue(en, 'QUANTILES_10_6', '6 Decile');
  $putStringValue(en, 'QUANTILES_10_5', '5 Decile');
  $putStringValue(en, 'QUANTILES_10_4', '4 Decile');
  $putStringValue(en, 'QUANTILES_10_3', '3 Decile');
  $putStringValue(en, 'QUANTILES_10_2', '2 Decile');
  $putStringValue(en, 'QUANTILES_10_1', '1 Decile');
  $putStringValue(en, 'THOUSANDSSEP', ',');
  $putStringValue(en, 'DECIMALCHAR', '.');
  $putStringValue(en, 'CURRENCYSYMBOL', '$');
  $putStringValue(en, 'MONTHLONGNAME_0', 'January');
  $putStringValue(en, 'MONTHLONGNAME_1', 'February');
  $putStringValue(en, 'MONTHLONGNAME_2', 'March');
  $putStringValue(en, 'MONTHLONGNAME_3', 'April');
  $putStringValue(en, 'MONTHLONGNAME_4', 'May');
  $putStringValue(en, 'MONTHLONGNAME_5', 'June');
  $putStringValue(en, 'MONTHLONGNAME_6', 'July');
  $putStringValue(en, 'MONTHLONGNAME_7', 'August');
  $putStringValue(en, 'MONTHLONGNAME_8', 'September');
  $putStringValue(en, 'MONTHLONGNAME_9', 'October');
  $putStringValue(en, 'MONTHLONGNAME_10', 'November');
  $putStringValue(en, 'MONTHLONGNAME_11', 'December');
  $putStringValue(en, 'MONTHSHORTNAME_0', 'Jan');
  $putStringValue(en, 'MONTHSHORTNAME_1', 'Feb');
  $putStringValue(en, 'MONTHSHORTNAME_2', 'Mar');
  $putStringValue(en, 'MONTHSHORTNAME_3', 'Apr');
  $putStringValue(en, 'MONTHSHORTNAME_4', 'May');
  $putStringValue(en, 'MONTHSHORTNAME_5', 'Jun');
  $putStringValue(en, 'MONTHSHORTNAME_6', 'Jul');
  $putStringValue(en, 'MONTHSHORTNAME_7', 'Aug');
  $putStringValue(en, 'MONTHSHORTNAME_8', 'Sep');
  $putStringValue(en, 'MONTHSHORTNAME_9', 'Oct');
  $putStringValue(en, 'MONTHSHORTNAME_10', 'Nov');
  $putStringValue(en, 'MONTHSHORTNAME_11', 'Dec');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_0', 'Jan');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_1', 'Feb');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_2', 'Mar');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_3', 'Apr');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_4', 'May');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_5', 'Jun');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_6', 'Jul');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_7', 'Aug');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_8', 'Sep');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_9', 'Oct');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_10', 'Nov');
  $putStringValue(en, 'MONTHSHORTNAMESTDCAL_11', 'Dec');
  $putStringValue(en, 'DAYLONGNAME_0', '');
  $putStringValue(en, 'DAYLONGNAME_1', 'Sunday');
  $putStringValue(en, 'DAYLONGNAME_2', 'Monday');
  $putStringValue(en, 'DAYLONGNAME_3', 'Tuesday');
  $putStringValue(en, 'DAYLONGNAME_4', 'Wednesday');
  $putStringValue(en, 'DAYLONGNAME_5', 'Thursday');
  $putStringValue(en, 'DAYLONGNAME_6', 'Friday');
  $putStringValue(en, 'DAYLONGNAME_7', 'Saturday');
  $putStringValue(en, 'DAYSHORTNAME_0', '');
  $putStringValue(en, 'DAYSHORTNAME_1', 'Sun');
  $putStringValue(en, 'DAYSHORTNAME_2', 'Mon');
  $putStringValue(en, 'DAYSHORTNAME_3', 'Tue');
  $putStringValue(en, 'DAYSHORTNAME_4', 'Wed');
  $putStringValue(en, 'DAYSHORTNAME_5', 'Thu');
  $putStringValue(en, 'DAYSHORTNAME_6', 'Fri');
  $putStringValue(en, 'DAYSHORTNAME_7', 'Sat');
  $putStringValue(en, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'MMM dd, yyyy ha');
  $putStringValue(en, 'DAY_MONTH_YEAR_FORMAT', 'MMM dd, yyyy');
  $putStringValue(en, 'MONTH_WITH_YEAR_FORMAT', 'MMM yyyy');
  $putStringValue(en, 'YEAR_ONLY_FORMAT', 'yyyy');
  $putStringValue(en, 'MONTH_ONLY_FORMAT', 'MMM');
  $putStringValue(en, 'HOUR_ONLY', 'ha');
  $putStringValue(en, 'HOUR_WITH_MINUTE', 'h:mma');
  $putStringValue(en, 'EC4001', 'Warning: Projection queries must have a time grain.');
  $putStringValue(en, 'EC4002', 'Warning: The requested projection has grain date but the joined date column is a date not datetime.');
  $putStringValue(en, 'EC4003', 'Warning: Projection query resulted in no data usable.');
  $putStringValue(en, 'EC4004', 'Warning: Projection can not project on column.');
  $putStringValue(en, 'EC4005', 'Warning: Group by not supported.');
  $putStringValue(en, 'EC4006', 'Warning: The requested projection starts before available data.');
  $putStringValue(en, 'EC4007', "Warning: Projection couldn't get period elements.");
  $putStringValue(en, 'ANNOTATION_TITLE', 'Annotation on {1}');
  $putStringValue(en, 'ANNOTATIONS', 'Annotations');
  $putStringValue(en, 'RECENTLY_ADDED', '(Recently Added)');
  $putStringValue(en, 'VAL_OF_VAL', '{1} of {2}');
  $putStringValue(en, 'PCT_OF_TOTAL', '{1} of Total');
  $putStringValue(en, 'SLICER_ALL_VALUES', 'All values ({1})');
  $putStringValue(en, 'SLICER_SELECTED', 'Selected ({1})');
  $putStringValue(en, 'SLICER_SHOW_ALL', 'Show all');
  $putStringValue(en, 'SLICER_SHOW_SELECTED', 'Show selected');
  $putStringValue(en, 'SLICER_INFO_TEXT', '{1} - {2} of {3}');
  $putStringValue(en, 'DATE_SEL_CLEAR', 'Clear');
  $putStringValue(en, 'DATE_SEL_PRESETS', 'Presets');
  $putStringValue(en, 'DATE_SEL_CALENDAR', 'Calendar');
  $putStringValue(en, 'DATE_SEL_DAYS', 'Days');
  $putStringValue(en, 'DATE_SEL_WEEKS', 'Weeks');
  $putStringValue(en, 'DATE_SEL_MONTHS', 'Months');
  $putStringValue(en, 'DATE_SEL_YEARS', 'Years');
  $putStringValue(en, 'DATE_SEL_TODAY', 'Today');
  $putStringValue(en, 'DATE_SEL_YESTERDAY', 'Yesterday');
  $putStringValue(en, 'DATE_SEL_LAST_7DAYS', 'Last 7 days');
  $putStringValue(en, 'DATE_SEL_LAST_30DAYS', 'Last 30 days');
  $putStringValue(en, 'DATE_SEL_LAST_60DAYS', 'Last 60 days');
  $putStringValue(en, 'DATE_SEL_LAST_90DAYS', 'Last 90 days');
  $putStringValue(en, 'DATE_SEL_THIS_WEEK', 'This week');
  $putStringValue(en, 'DATE_SEL_LAST_WEEK', 'Last week');
  $putStringValue(en, 'DATE_SEL_LAST_2WEEKS', 'Last 2 weeks');
  $putStringValue(en, 'DATE_SEL_LAST_3WEEKS', 'Last 3 weeks');
  $putStringValue(en, 'DATE_SEL_LAST_4WEEKS', 'Last 4 weeks');
  $putStringValue(en, 'DATE_SEL_LAST_53WEEKS', 'Last 53 weeks');
  $putStringValue(en, 'DATE_SEL_THIS_MONTH', 'This month');
  $putStringValue(en, 'DATE_SEL_LAST_MONTH', 'Last month');
  $putStringValue(en, 'DATE_SEL_LAST_2MONTHS', 'Last 2 months');
  $putStringValue(en, 'DATE_SEL_LAST_3MONTHS', 'Last 3 months');
  $putStringValue(en, 'DATE_SEL_LAST_6MONTHS', 'Last 6 months');
  $putStringValue(en, 'DATE_SEL_LAST_12MONTHS', 'Last 12 months');
  $putStringValue(en, 'DATE_SEL_LAST_13MONTHS', 'Last 13 months');
  $putStringValue(en, 'DATE_SEL_THIS_YEAR', 'This year');
  $putStringValue(en, 'DATE_SEL_LAST_YEAR', 'Last year');
  $putStringValue(en, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(en, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(en, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(en, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(en, 'en-US');
  $putStringValue(locales, 'en', en);
  $putStringValue(locales, 'fallBack', en);
}

function addDateAndNumberFormatsForLocale(localeMap, localeName){
  var abbreviations, language, parts, region;
  language = 'en';
  region = 'US';
  abbreviations = 'thousands,K,3;millions,M,6;billions,B,9;trillions,T,12';
  if (localeName.length > 0) {
    if (!$equalsIgnoreCase(localeName, 'en-US')) {
      if (localeName.indexOf('-') != -1) {
        parts = $split(localeName, '-', 0);
        language = parts[0];
        region = parts[1];
      }
       else if (localeName.indexOf('_') != -1) {
        parts = $split(localeName, '_', 0);
        language = parts[0];
        region = parts[1];
      }
    }
  }
  if ($equalsIgnoreCase(language, 'ja')) {
    abbreviations = 'sen,\u5343,3;man,\u4E07,4;oku,\u5104,8;ch\u014D,\u5146,12;kei,\u4EAC,16';
    $put_2(localeMap.stringMap, 'NAMED_ABBREVIATIONS', 'thousands,\u5343,3;millions,\u4E07,4;billions,\u5104,8;trillions,\u5146,12;');
  }
   else if ($equalsIgnoreCase(language, 'zh')) {
    abbreviations = 'qi\u0101n,\u5343,3;w\xE0n,\u4E07,4;y\xEC,\u4EBF,8;w\xE0ny\xEC,\u4E07\u4EBF,12;j\u012Bng,\u4EAC,16';
    $put_2(localeMap.stringMap, 'NAMED_ABBREVIATIONS', 'thousands,\u5343,3;millions,\u4E07,4;billions,\u4EBF,8;trillions,\u4E07\u4EBF,12;');
  }
   else 
    $put_2(localeMap.stringMap, 'NAMED_ABBREVIATIONS', 'thousands,K,3;millions,M,6;billions,B,9;trillions,T,12');
  $put_2(localeMap.stringMap, 'ABBREVIATIONS', abbreviations);
  $put_2(localeMap.stringMap, 'LANGUAGE', language);
  $put_2(localeMap.stringMap, 'REGION', region);
}

function getAbbreviationList(abbreviations, list){
  var index_0, item_0, item$index, item$max, items, power, subItems;
  if (list != null) {
    items = $split(list, ';', 0);
    abbreviations = initUnidimensionalArray(Lcom_domo_charting_locales_Abbreviation_2_classLit, $intern_9, 159, items.length, 0, 1);
    index_0 = 0;
    for (item$index = 0 , item$max = items.length; item$index < item$max; ++item$index) {
      item_0 = items[item$index];
      subItems = $split(item_0, ',', 0);
      if (subItems.length == 3) {
        power = getInt(subItems[2], 1);
        abbreviations[index_0++] = new Abbreviation_0(subItems[0], subItems[1], power);
      }
    }
  }
  return abbreviations;
}

function getAbbreviations(locale){
  $clinit_Localized();
  var list, stringsForLanguage;
  stringsForLanguage = getStringsForLanguage(locale);
  list = castToString(stringsForLanguage.get_0('ABBREVIATIONS'));
  return getAbbreviationList(null, list);
}

function getErrorCodeString(errorCode, locale){
  $clinit_Localized();
  switch (errorCode) {
    case 4001:
      return getString('EC4001', locale);
    case 4002:
      return getString('EC4002', locale);
    case 4003:
      return getString('EC4003', locale);
    case 4004:
      return getString('EC4004', locale);
    case 4005:
      return getString('EC4005', locale);
    case 4006:
      return getString('EC4006', locale);
    case 4007:
      return getString('EC4007', locale);
  }
  return null;
}

function getString(key, locale){
  $clinit_Localized();
  var out, result, stringsForLanguage;
  out = key;
  stringsForLanguage = getStringsForLanguage(locale);
  if (stringsForLanguage) {
    result = castToString(stringsForLanguage.get_0(key));
    result != null && (out = result);
  }
  return out;
}

function getStringsForLanguage(locale){
  var index_0, language, stringsForLanguage;
  stringsForLanguage = null;
  if (locale != null) {
    stringsForLanguage = castTo($getStringValue(locales, locale), 24);
    if (!stringsForLanguage && (locale.indexOf('-') != -1 || locale.indexOf('_') != -1)) {
      index_0 = $indexOf(locale, fromCodePoint(45));
      index_0 == -1 && (index_0 = $indexOf(locale, fromCodePoint(95)));
      language = locale.substr(0, index_0).toLowerCase();
      stringsForLanguage = castTo($getStringValue(locales, language), 24);
      if (!stringsForLanguage) {
        $equals_2(language, 'ja')?loadJapanese():$equals_2(language, 'fr')?loadFrench():$equals_2(language, 'de')?loadGerman():$equals_2(language, 'zh')?loadSimplifiedChinese():$equals_2(language, 'es') && loadSpanish();
        stringsForLanguage = castTo($getStringValue(locales, language), 24);
      }
    }
  }
  !stringsForLanguage && (stringsForLanguage = castTo($getStringValue(locales, 'fallBack'), 24));
  return stringsForLanguage;
}

function loadFrench(){
  $putStringValue(fr, 'MORE_ITEMS', 'plus encore...');
  $putStringValue(fr, 'NOT_ALL_DATA_SHOWN', "L'affichage ne comprend pas toutes les donn\xE9es.");
  $putStringValue(fr, 'NO_DATA', 'Aucune donn\xE9e');
  $putStringValue(fr, 'NO_DATA_EXISTS', 'Aucune donn\xE9e');
  $putStringValue(fr, 'UNMAPPED_DATA', 'Donn\xE9es non mapp\xE9es');
  $putStringValue(fr, 'TOTAL', 'Total');
  $putStringValue(fr, 'GRAND_TOTAL', 'GRAND TOTAL');
  $putStringValue(fr, 'COUNT', 'Compte');
  $putStringValue(fr, 'MANY', 'Beaucoup');
  $putStringValue(fr, 'GOAL', 'Objectif');
  $putStringValue(fr, 'TARGET', 'Cible');
  $putStringValue(fr, 'OVERALL_CONVERSION', 'Ensemble de la conversation');
  $putStringValue(fr, 'DROPPED', 'Abandonn\xE9');
  $putStringValue(fr, 'SUMMARY', 'R\xE9sum\xE9');
  $putStringValue(fr, 'HIGH', '\xC9lev\xE9');
  $putStringValue(fr, 'LOW', 'Bas');
  $putStringValue(fr, 'OPEN', 'Ouvrir');
  $putStringValue(fr, 'CLOSE', 'Fermer');
  $putStringValue(fr, 'MEDIAN', 'M\xE9diane');
  $putStringValue(fr, 'Q1', 'Q1');
  $putStringValue(fr, 'Q3', 'Q3');
  $putStringValue(fr, 'QUARTERS', 'Q1|Q2|Q3|Q4');
  $putStringValue(fr, 'NO_INTERACTIVITY', "L'interactivit\xE9 a \xE9t\xE9 d\xE9sactiv\xE9e \xE0 cause du nombre d'\xE9l\xE9ments.");
  $putStringValue(fr, 'LEGEND_MORE_INFO', "Pour afficher les l\xE9gendes de plus d'\xE9l\xE9ments, survolez ceux-ci dans le graphique.");
  $putStringValue(fr, 'MIN', 'Mini');
  $putStringValue(fr, 'MAX', 'Maxi');
  $putStringValue(fr, 'AVG', 'Moy.');
  $putStringValue(fr, 'OTHER', 'Autre');
  $putStringValue(fr, 'CATEGORIES_IN_OTHER', 'Cat\xE9gories dans Autre');
  $putStringValue(fr, 'LOWER_RANGE', 'Plage inf\xE9rieure');
  $putStringValue(fr, 'UPPER_RANGE', 'Plage sup\xE9rieure');
  $putStringValue(fr, 'TODAY', " \xAB\u202FAujourd'hui\u202F\xBB ");
  $putStringValue(fr, 'AM', ' du matin');
  $putStringValue(fr, 'PM', " de l'apr\xE8s-midi/du soir");
  $putStringValue(fr, 'GROUP_TOTAL', ' Total du groupe');
  $putStringValue(fr, 'SCALE_MARKER', " Marqueur d'\xE9chelle");
  $putStringValue(fr, 'WARN_NOT_ALL_DATA', " Avertissement\u202F: l'affichage ne comprend pas toutes les donn\xE9es.");
  $putStringValue(fr, 'WARN_NEGATIVE_NUMBERS', ' Avertissement\u202F: les donn\xE9es contiennent des nombres n\xE9gatifs.');
  $putStringValue(fr, 'WARN_INVALID_FOR_LOG_SCALE', " Avertissement\u202F: valeurs n\xE9gatives ou z\xE9ro dans l'\xE9chelle logarithmique.");
  $putStringValue(fr, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', ' Avertissement\u202F: toutes les donn\xE9es ne sont pas repr\xE9sent\xE9es sur la carte.');
  $putStringValue(fr, 'WARN_HIGHTLIGHTING_DISABLED', 'En raison de la taille du DataSet, la mise en \xE9vidence est d\xE9sactiv\xE9e.');
  $putStringValue(fr, 'ACTUAL', ' R\xE9el');
  $putStringValue(fr, 'PROJECTED', ' Projet\xE9');
  $putStringValue(fr, 'DIFFERENCE', ' Diff\xE9rence');
  $putStringValue(fr, 'VARIANCE', ' Variance');
  $putStringValue(fr, 'MINIMUM', 'Minimum');
  $putStringValue(fr, 'MAXIMUM', 'Maximum');
  $putStringValue(fr, 'AVERAGE', 'Moyenne');
  $putStringValue(fr, 'STANDARD_DEVIATION', '\xC9cart type');
  $putStringValue(fr, 'STANDARD_DEVIATIONS', '\xC9carts-types');
  $putStringValue(fr, 'PERCENTILE', 'Centiles');
  $putStringValue(fr, 'PCT_OF', '% de');
  $putStringValue(fr, 'FIRST_VALUE', 'Premi\xE8re valeur');
  $putStringValue(fr, 'LAST_VALUE', 'Derni\xE8re valeur');
  $putStringValue(fr, 'NEXTTOLAST_VALUE', 'Avant-derni\xE8re valeur');
  $putStringValue(fr, 'bubble', 'bulle');
  $putStringValue(fr, 'bullet', 'puce');
  $putStringValue(fr, 'calendar', 'calendrier');
  $putStringValue(fr, 'category scatter', 'r\xE9partition de cat\xE9gorie');
  $putStringValue(fr, 'gauge advanced', 'jauge avanc\xE9e');
  $putStringValue(fr, 'gauge basic', 'jauge de base');
  $putStringValue(fr, 'gauge', 'jauge');
  $putStringValue(fr, 'curved symbol', 'symbole incurv\xE9');
  $putStringValue(fr, 'curved line', 'ligne courbe');
  $putStringValue(fr, 'donut', 'anneau');
  $putStringValue(fr, 'face', 'face');
  $putStringValue(fr, 'filled', 'rempli');
  $putStringValue(fr, 'funnel', 'entonnoir');
  $putStringValue(fr, 'funnel bars', 'barres entonnoir');
  $putStringValue(fr, 'folded funnel', 'entonnoir pli\xE9');
  $putStringValue(fr, 'gantt', 'Gantt');
  $putStringValue(fr, 'gantt %', 'Gantt %');
  $putStringValue(fr, 'gauge', 'jauge');
  $putStringValue(fr, 'heatmap', 'carte thermique');
  $putStringValue(fr, 'high low', '\xE9lev\xE9 bas');
  $putStringValue(fr, 'h 100%', 'h 100%');
  $putStringValue(fr, 'h bar', 'barre h');
  $putStringValue(fr, 'h boxplot', 'diagramme \xE0 surfaces h');
  $putStringValue(fr, 'h grouped stacked', 'h group\xE9 et empil\xE9');
  $putStringValue(fr, 'h histogram', 'histogramme h');
  $putStringValue(fr, 'h grouped', 'h group\xE9');
  $putStringValue(fr, 'h nested', 'h imbriqu\xE9');
  $putStringValue(fr, 'h overlay', 'Superposition\xA0H');
  $putStringValue(fr, 'h % bar', 'barre h %');
  $putStringValue(fr, 'h stacked', 'h empil\xE9');
  $putStringValue(fr, 'h symbol', 'symbole h');
  $putStringValue(fr, 'h symbol overlay', 'superposition de symboles h');
  $putStringValue(fr, 'h waterfall', 'cascade h');
  $putStringValue(fr, 'line bar', 'barre de ligne');
  $putStringValue(fr, 'line grouped stacked', 'barre de cluster');
  $putStringValue(fr, 'line stacked', 'empil\xE9 en lignes');
  $putStringValue(fr, 'pareto', 'pareto');
  $putStringValue(fr, 'pie', 'camembert');
  $putStringValue(fr, 'bar line', 'ligne de barre');
  $putStringValue(fr, 'variance bar line', 'ligne de barre de variance');
  $putStringValue(fr, 'line bar', 'barre de ligne');
  $putStringValue(fr, 'variance line bar', 'barre de ligne de variance');
  $putStringValue(fr, 'line', 'ligne');
  $putStringValue(fr, 'variance line', 'ligne de variance');
  $putStringValue(fr, 'grouped', 'group\xE9');
  $putStringValue(fr, 'progress', 'progression');
  $putStringValue(fr, 'radar', 'radar');
  $putStringValue(fr, 'running total line', 'ligne du total cumul\xE9');
  $putStringValue(fr, 'value', 'valeur');
  $putStringValue(fr, 'area', 'zone');
  $putStringValue(fr, 'step', '\xE9tape');
  $putStringValue(fr, 'candlestick', 'chandelier');
  $putStringValue(fr, 'symbol bar', 'barre de symbole');
  $putStringValue(fr, 'symbol stacked', 'symbole empil\xE9');
  $putStringValue(fr, 'symbol', 'symbole');
  $putStringValue(fr, 'text', 'texte');
  $putStringValue(fr, 'treemap', 'arborescence de donn\xE9es');
  $putStringValue(fr, 'line', 'ligne');
  $putStringValue(fr, 'multi-line', 'multiligne');
  $putStringValue(fr, '100%', '100 %');
  $putStringValue(fr, 'bar', 'barre');
  $putStringValue(fr, 'boxplot', 'diagramme \xE0 surfaces');
  $putStringValue(fr, 'bullet', 'puce');
  $putStringValue(fr, 'grouped stacked', 'group\xE9 et empil\xE9');
  $putStringValue(fr, 'histogram', 'histogramme');
  $putStringValue(fr, 'grouped', 'group\xE9');
  $putStringValue(fr, 'nested', 'imbriqu\xE9');
  $putStringValue(fr, 'overlay', 'Superposition');
  $putStringValue(fr, '% bar', 'barre %');
  $putStringValue(fr, 'vert_rtbar', 'Barre de total cumul\xE9');
  $putStringValue(fr, 'running total grouped', 'total cumul\xE9 group\xE9');
  $putStringValue(fr, 'running total stacked', 'total cumul\xE9 imbriqu\xE9');
  $putStringValue(fr, 'stacked', 'empil\xE9');
  $putStringValue(fr, 'symbol', 'symbole');
  $putStringValue(fr, 'symbol overlay', 'superposition de symboles');
  $putStringValue(fr, 'waterfall', 'cascade');
  $putStringValue(fr, 'word cloud', 'nuage de mots');
  $putStringValue(fr, 'scatter', 'nuage de points');
  $putStringValue(fr, 'curved_line_bar', 'Ligne de barre\xA0courbe');
  $putStringValue(fr, 'curved_line_stackedbar', 'Ligne courbe\xA0empil\xE9e');
  $putStringValue(fr, 'horiz_100pct_area', 'Zone H\xA0100 %');
  $putStringValue(fr, 'horiz_area_overlay', 'Superposition de\xA0zone H');
  $putStringValue(fr, 'horiz_bar_line', 'Ligne de barre H');
  $putStringValue(fr, 'horiz_curved_100pct_area', 'Zone incurv\xE9e 100 % H');
  $putStringValue(fr, 'horiz_curved_area_overlay', 'Superposition de zone incurv\xE9e H');
  $putStringValue(fr, 'horiz_curved_stacked_area', 'Zone incurv\xE9e\xA0H');
  $putStringValue(fr, 'horiz_curved_symbolline', 'Symbole incurv\xE9 H');
  $putStringValue(fr, 'horiz_curvedline', 'Ligne courbe H');
  $putStringValue(fr, 'horiz_line_bar', 'Barre de ligne H');
  $putStringValue(fr, 'horiz_line_clusterbar', 'Barre imbriqu\xE9e de ligne H');
  $putStringValue(fr, 'horiz_line_multi_dotplot', 'Lollipop group\xE9 de ligne H');
  $putStringValue(fr, 'horiz_line_stacked_dotplot', 'Lollipop empil\xE9 de\xA0ligne H');
  $putStringValue(fr, 'horiz_line_stackedbar', 'Empil\xE9 de\xA0ligne H');
  $putStringValue(fr, 'horiz_marimekko', 'Marimekko H');
  $putStringValue(fr, 'horiz_multi_dotplot', 'Lollipop group\xE9 H');
  $putStringValue(fr, 'horiz_nested_linebar', 'Barre de ligne\xA0suivante\xA0H');
  $putStringValue(fr, 'horiz_rtbar', 'Barre de total cumul\xE9 H');
  $putStringValue(fr, 'horiz_rtmultibar', 'Total cumul\xE9 group\xE9 H');
  $putStringValue(fr, 'horiz_rtstackedbar', 'Empil\xE9\xA0de total cumul\xE9 H');
  $putStringValue(fr, 'horiz_stacked_dotplot', 'Lollipop empil\xE9 H');
  $putStringValue(fr, 'horiz_stackedtrend', 'Zone H');
  $putStringValue(fr, 'horiz_step_100pct_area', 'Zone en escalier 100 % H');
  $putStringValue(fr, 'horiz_step_area_overlay', 'Superposition de\xA0zone en escalier\xA0H');
  $putStringValue(fr, 'horiz_step_stacked_area', 'Zone en escalier H');
  $putStringValue(fr, 'horiz_stepline', 'En escalier H');
  $putStringValue(fr, 'horiz_symbol_bar', 'Barre de symbole H');
  $putStringValue(fr, 'horiz_symbol_stackedbar', 'Symbole empil\xE9 H');
  $putStringValue(fr, 'horiz_symbolline', 'Ligne de symbole H');
  $putStringValue(fr, 'horiz_trendline', 'Ligne H');
  $putStringValue(fr, 'vert_100pct_area', 'Zone\xA0100 %');
  $putStringValue(fr, 'vert_area_overlay', 'Superposition de\xA0zone');
  $putStringValue(fr, 'vert_bar_line', 'Ligne de barre');
  $putStringValue(fr, 'vert_curved_100pct_area', 'Zone incurv\xE9e 100 %');
  $putStringValue(fr, 'vert_curved_area_overlay', 'Superposition de zone incurv\xE9e');
  $putStringValue(fr, 'vert_curved_stacked_area', 'Zone incurv\xE9e');
  $putStringValue(fr, 'vert_line_multi_dotplot', 'Lollipop\xA0de ligne\xA0group\xE9\xA0');
  $putStringValue(fr, 'vert_line_stacked_dotplot', 'Lollipop\xA0de ligne\xA0empil\xE9');
  $putStringValue(fr, 'vert_marimekko', 'Marimekko');
  $putStringValue(fr, 'vert_multi_dotplot', 'Lollipop group\xE9');
  $putStringValue(fr, 'vert_nested_linebar', 'Barre\xA0de ligne\xA0imbriqu\xE9e');
  $putStringValue(fr, 'vert_stacked_dotplot', 'Lollipop empil\xE9');
  $putStringValue(fr, 'vert_step_100pct_area', 'Zone en escalier 100 %');
  $putStringValue(fr, 'vert_step_area_overlay', 'Superposition de\xA0zone en escalier');
  $putStringValue(fr, 'vert_step_stacked_area', 'Zone en escalier');
  $putStringValue(fr, 'nautilus', 'Nautile');
  $putStringValue(fr, 'nautilus_donut', 'Anneau de nautile');
  $putStringValue(fr, 'nightingale_rose', 'Diagramme \xE0 cr\xEAte de coq');
  $putStringValue(fr, 'xy_line', 'Ligne XY');
  $putStringValue(fr, 'ds_pred_modeling', 'Pr\xE9dictif');
  $putStringValue(fr, 'ds_forecasting', 'Pr\xE9vision');
  $putStringValue(fr, 'ds_outliers', 'Donn\xE9es aberrantes');
  $putStringValue(fr, 'stream', 'Flux');
  $putStringValue(fr, 'stream_funnel', 'Entonnoir de flux');
  $putStringValue(fr, 'flex_table', 'Flex table');
  $putStringValue(fr, 'QUANTILES_3_2', 'Tercile sup\xE9rieur');
  $putStringValue(fr, 'QUANTILES_3_1', 'Tercile inf\xE9rieur');
  $putStringValue(fr, 'QUANTILES_4_3', 'Quartile sup\xE9rieur');
  $putStringValue(fr, 'QUANTILES_4_2', 'M\xE9diane');
  $putStringValue(fr, 'QUANTILES_4_1', 'Quartile inf\xE9rieur');
  $putStringValue(fr, 'QUANTILES_5_4', 'Quatri\xE8me quintile');
  $putStringValue(fr, 'QUANTILES_5_3', 'Troisi\xE8me quintile');
  $putStringValue(fr, 'QUANTILES_5_2', 'Deuxi\xE8me quintile');
  $putStringValue(fr, 'QUANTILES_5_1', 'Premier quintile');
  $putStringValue(fr, 'QUANTILES_6_5', 'Cinqui\xE8me sextile');
  $putStringValue(fr, 'QUANTILES_6_4', 'Quatri\xE8me sextile');
  $putStringValue(fr, 'QUANTILES_6_3', 'Troisi\xE8me sextile');
  $putStringValue(fr, 'QUANTILES_6_2', 'Deuxi\xE8me sextile');
  $putStringValue(fr, 'QUANTILES_6_1', 'Premier sextile');
  $putStringValue(fr, 'QUANTILES_7_6', 'Sixi\xE8me septile');
  $putStringValue(fr, 'QUANTILES_7_5', 'Cinqui\xE8me septile');
  $putStringValue(fr, 'QUANTILES_7_4', 'Quatri\xE8me septile');
  $putStringValue(fr, 'QUANTILES_7_3', 'Troisi\xE8me septile');
  $putStringValue(fr, 'QUANTILES_7_2', 'Deuxi\xE8me septile');
  $putStringValue(fr, 'QUANTILES_7_1', 'Premier septile');
  $putStringValue(fr, 'QUANTILES_8_7', 'Septi\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_6', 'Sixi\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_5', 'Cinqui\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_4', 'Quatri\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_3', 'Troisi\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_2', 'Deuxi\xE8me octile');
  $putStringValue(fr, 'QUANTILES_8_1', 'Premier octile');
  $putStringValue(fr, 'QUANTILES_9_8', 'Vignette 8/9');
  $putStringValue(fr, 'QUANTILES_9_7', 'Vignette 7/9');
  $putStringValue(fr, 'QUANTILES_9_6', 'Vignette 6/9');
  $putStringValue(fr, 'QUANTILES_9_5', 'Vignette 5/9');
  $putStringValue(fr, 'QUANTILES_9_4', 'Vignette 4/9');
  $putStringValue(fr, 'QUANTILES_9_3', 'Vignette 3/9');
  $putStringValue(fr, 'QUANTILES_9_2', 'Vignette 2/9');
  $putStringValue(fr, 'QUANTILES_9_1', 'Vignette 1/9');
  $putStringValue(fr, 'QUANTILES_10_9', 'D\xE9cile 9');
  $putStringValue(fr, 'QUANTILES_10_8', 'D\xE9cile 8');
  $putStringValue(fr, 'QUANTILES_10_7', 'D\xE9cile 7');
  $putStringValue(fr, 'QUANTILES_10_6', 'D\xE9cile 6');
  $putStringValue(fr, 'QUANTILES_10_5', 'D\xE9cile 5');
  $putStringValue(fr, 'QUANTILES_10_4', 'D\xE9cile 4');
  $putStringValue(fr, 'QUANTILES_10_3', 'D\xE9cile 3');
  $putStringValue(fr, 'QUANTILES_10_2', 'D\xE9cile 2');
  $putStringValue(fr, 'QUANTILES_10_1', 'D\xE9cile 1');
  $putStringValue(fr, 'THOUSANDSSEP', ' ');
  $putStringValue(fr, 'DECIMALCHAR', ',');
  $putStringValue(fr, 'CURRENCYSYMBOL', '\u20AC');
  $putStringValue(fr, 'MONTHLONGNAME_0', 'Janvier');
  $putStringValue(fr, 'MONTHLONGNAME_1', 'F\xE9vrier');
  $putStringValue(fr, 'MONTHLONGNAME_2', 'Mars');
  $putStringValue(fr, 'MONTHLONGNAME_3', 'Avril');
  $putStringValue(fr, 'MONTHLONGNAME_4', 'Mai');
  $putStringValue(fr, 'MONTHLONGNAME_5', 'Juin');
  $putStringValue(fr, 'MONTHLONGNAME_6', 'Juillet');
  $putStringValue(fr, 'MONTHLONGNAME_7', 'Ao\xFBt');
  $putStringValue(fr, 'MONTHLONGNAME_8', 'Septembre');
  $putStringValue(fr, 'MONTHLONGNAME_9', 'Octobre');
  $putStringValue(fr, 'MONTHLONGNAME_10', 'Novembre');
  $putStringValue(fr, 'MONTHLONGNAME_11', ' D\xE9cembre');
  $putStringValue(fr, 'MONTHSHORTNAME_0', 'Jan');
  $putStringValue(fr, 'MONTHSHORTNAME_1', 'F\xE9v');
  $putStringValue(fr, 'MONTHSHORTNAME_2', 'Mar');
  $putStringValue(fr, 'MONTHSHORTNAME_3', 'Avr');
  $putStringValue(fr, 'MONTHSHORTNAME_4', 'Mai');
  $putStringValue(fr, 'MONTHSHORTNAME_5', 'Juin');
  $putStringValue(fr, 'MONTHSHORTNAME_6', 'Juil');
  $putStringValue(fr, 'MONTHSHORTNAME_7', 'Ao\xFB');
  $putStringValue(fr, 'MONTHSHORTNAME_8', 'Sep');
  $putStringValue(fr, 'MONTHSHORTNAME_9', 'Oct');
  $putStringValue(fr, 'MONTHSHORTNAME_10', 'Nov');
  $putStringValue(fr, 'MONTHSHORTNAME_11', ' D\xE9c');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_0', 'jan');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_1', 'f\xE9v');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_2', 'mar');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_3', 'avr');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_4', 'mai');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_5', 'juin');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_6', 'juil');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_7', 'ao\xFB');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_8', 'sep');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_9', 'oct');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_10', 'nov');
  $putStringValue(fr, 'MONTHSHORTNAMESTDCAL_11', ' d\xE9c');
  $putStringValue(fr, 'DAYLONGNAME_0', '');
  $putStringValue(fr, 'DAYLONGNAME_1', 'Dimanche');
  $putStringValue(fr, 'DAYLONGNAME_2', 'Lundi');
  $putStringValue(fr, 'DAYLONGNAME_3', 'Mardi');
  $putStringValue(fr, 'DAYLONGNAME_4', 'Mercredi');
  $putStringValue(fr, 'DAYLONGNAME_5', 'Jeudi');
  $putStringValue(fr, 'DAYLONGNAME_6', 'Vendredi');
  $putStringValue(fr, 'DAYLONGNAME_7', 'Samedi');
  $putStringValue(fr, 'DAYSHORTNAME_0', '');
  $putStringValue(fr, 'DAYSHORTNAME_1', 'Dim');
  $putStringValue(fr, 'DAYSHORTNAME_2', 'Lun');
  $putStringValue(fr, 'DAYSHORTNAME_3', 'Mar');
  $putStringValue(fr, 'DAYSHORTNAME_4', 'Mer');
  $putStringValue(fr, 'DAYSHORTNAME_5', 'Jeu');
  $putStringValue(fr, 'DAYSHORTNAME_6', 'Ven');
  $putStringValue(fr, 'DAYSHORTNAME_7', 'Sam');
  $putStringValue(fr, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'dd MMM, yyyy ha');
  $putStringValue(fr, 'DAY_MONTH_YEAR_FORMAT', 'dd MMM, yyyy');
  $putStringValue(fr, 'MONTH_WITH_YEAR_FORMAT', 'MMM yyyy');
  $putStringValue(fr, 'YEAR_ONLY_FORMAT', 'yyyy');
  $putStringValue(fr, 'MONTH_ONLY_FORMAT', 'MMM');
  $putStringValue(fr, 'HOUR_ONLY', 'ha');
  $putStringValue(fr, 'HOUR_WITH_MINUTE', 'h:mma');
  $putStringValue(fr, 'EC4001', 'Avertissement : les requ\xEAtes relatives \xE0 des projections doivent avoir une granularit\xE9 temporelle.');
  $putStringValue(fr, 'EC4002', 'Avertissement : la projection demand\xE9e a une date correspondant \xE0 la granularit\xE9, mais la colonne de date associ\xE9e est pour une date, pas pour un horodatage.');
  $putStringValue(fr, 'EC4003', "Avertissement : la requ\xEAte relative \xE0 une projection n'a pas abouti \xE0 des donn\xE9es utilisables.");
  $putStringValue(fr, 'EC4004', 'Avertissement : la projection ne peut \xEAtre projet\xE9e dans une colonne');
  $putStringValue(fr, 'EC4005', "Avertissement : le groupe n'est pas pris en charge.");
  $putStringValue(fr, 'EC4006', 'Avertissement : la projection demand\xE9e commence avant les donn\xE9es disponibles.');
  $putStringValue(fr, 'EC4007', "Avertissement : la projection n'a pas pu obtenir les \xE9l\xE9ments relatifs \xE0 cette p\xE9riode.");
  $putStringValue(fr, 'ANNOTATION_TITLE', 'Annotation sur {1}');
  $putStringValue(fr, 'ANNOTATIONS', 'Annotation');
  $putStringValue(fr, 'RECENTLY_ADDED', '(Ajout\xE9 r\xE9cemment)');
  $putStringValue(fr, 'VAL_OF_VAL', '{1} de {2}');
  $putStringValue(fr, 'PCT_OF_TOTAL', '{1} de total');
  $putStringValue(fr, 'SLICER_ALL_VALUES', 'Toutes les valeurs ({1})');
  $putStringValue(fr, 'SLICER_SELECTED', 'S\xE9lectionn\xE9 ({1})');
  $putStringValue(fr, 'SLICER_SHOW_ALL', 'Afficher tout');
  $putStringValue(fr, 'SLICER_SHOW_SELECTED', 'Afficher les s\xE9lections');
  $putStringValue(fr, 'SLICER_INFO_TEXT', '{1} - {2} sur {3}');
  $putStringValue(fr, 'DATE_SEL_CLEAR', 'Effacer');
  $putStringValue(fr, 'DATE_SEL_PRESETS', '\xC9l\xE9ments pr\xE9d\xE9finis');
  $putStringValue(fr, 'DATE_SEL_CALENDAR', 'Calendrier');
  $putStringValue(fr, 'DATE_SEL_DAYS', 'Jours');
  $putStringValue(fr, 'DATE_SEL_WEEKS', 'Semaines');
  $putStringValue(fr, 'DATE_SEL_MONTHS', 'Mois');
  $putStringValue(fr, 'DATE_SEL_YEARS', 'Ann\xE9es');
  $putStringValue(fr, 'DATE_SEL_TODAY', "Aujourd'hui");
  $putStringValue(fr, 'DATE_SEL_YESTERDAY', 'Hier');
  $putStringValue(fr, 'DATE_SEL_LAST_7DAYS', 'Les 7 derniers jours');
  $putStringValue(fr, 'DATE_SEL_LAST_30DAYS', 'Les 30 derniers jours');
  $putStringValue(fr, 'DATE_SEL_LAST_60DAYS', 'Les 60 derniers jours');
  $putStringValue(fr, 'DATE_SEL_LAST_90DAYS', 'Les 90 derniers jours');
  $putStringValue(fr, 'DATE_SEL_THIS_WEEK', 'Cette semaine');
  $putStringValue(fr, 'DATE_SEL_LAST_WEEK', 'La semaine derni\xE8re');
  $putStringValue(fr, 'DATE_SEL_LAST_2WEEKS', 'Les 2 derni\xE8res semaines');
  $putStringValue(fr, 'DATE_SEL_LAST_3WEEKS', 'Les 3 derni\xE8res semaines');
  $putStringValue(fr, 'DATE_SEL_LAST_4WEEKS', 'Les 4 derni\xE8res semaines');
  $putStringValue(fr, 'DATE_SEL_LAST_53WEEKS', 'Les 53 derni\xE8res semaines');
  $putStringValue(fr, 'DATE_SEL_THIS_MONTH', 'Ce mois-ci');
  $putStringValue(fr, 'DATE_SEL_LAST_MONTH', 'Le mois dernier');
  $putStringValue(fr, 'DATE_SEL_LAST_2MONTHS', 'Les 2 derniers mois');
  $putStringValue(fr, 'DATE_SEL_LAST_3MONTHS', 'Les 3 derniers mois');
  $putStringValue(fr, 'DATE_SEL_LAST_6MONTHS', 'Les 6 derniers mois');
  $putStringValue(fr, 'DATE_SEL_LAST_12MONTHS', 'Les 12 derniers mois');
  $putStringValue(fr, 'DATE_SEL_LAST_13MONTHS', 'Les 13 derniers mois');
  $putStringValue(fr, 'DATE_SEL_THIS_YEAR', 'Cette ann\xE9e');
  $putStringValue(fr, 'DATE_SEL_LAST_YEAR', "L'ann\xE9e derni\xE8re");
  $putStringValue(fr, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(fr, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(fr, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(fr, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(fr, 'fr-FR');
  $putStringValue(locales, 'fr', fr);
}

function loadGerman(){
  $putStringValue(de, 'MORE_ITEMS', 'mehr...');
  $putStringValue(de, 'NOT_ALL_DATA_SHOWN', 'Es werden nicht alle Daten angezeigt.');
  $putStringValue(de, 'NO_DATA', 'Keine Daten');
  $putStringValue(de, 'NO_DATA_EXISTS', 'Keine Daten vorhanden');
  $putStringValue(de, 'UNMAPPED_DATA', 'Nicht zugeordnete Daten');
  $putStringValue(de, 'TOTAL', 'Gesamt');
  $putStringValue(de, 'GRAND_TOTAL', 'ENDSUMME');
  $putStringValue(de, 'COUNT', 'Anzahl');
  $putStringValue(de, 'MANY', 'Viele');
  $putStringValue(de, 'GOAL', 'Ziel');
  $putStringValue(de, 'TARGET', 'Ziel');
  $putStringValue(de, 'OVERALL_CONVERSION', 'Gesamtkonvertierung');
  $putStringValue(de, 'DROPPED', 'Gel\xF6scht');
  $putStringValue(de, 'SUMMARY', 'Zusammenfassung');
  $putStringValue(de, 'HIGH', 'Hoch');
  $putStringValue(de, 'LOW', 'Niedrig');
  $putStringValue(de, 'OPEN', '\xD6ffnen');
  $putStringValue(de, 'CLOSE', 'Schlie\xDFen');
  $putStringValue(de, 'MEDIAN', 'Median');
  $putStringValue(de, 'Q1', 'Q1');
  $putStringValue(de, 'Q3', 'Q3');
  $putStringValue(de, 'QUARTERS', 'Q1|Q2|Q3|Q4');
  $putStringValue(de, 'NO_INTERACTIVITY', 'Aufgrund der Artikelanzahl wurde Interaktivit\xE4t deaktiviert.');
  $putStringValue(de, 'LEGEND_MORE_INFO', 'Bewegen Sie den Cursor \xFCber die Artikel im Diagramm, um Legenden f\xFCr mehr Artikel anzusehen.');
  $putStringValue(de, 'MIN', 'Min');
  $putStringValue(de, 'MAX', 'Max');
  $putStringValue(de, 'AVG', 'Durchschn.');
  $putStringValue(de, 'OTHER', 'Andere');
  $putStringValue(de, 'CATEGORIES_IN_OTHER', 'Kategorien in \u201EAndere\u201C');
  $putStringValue(de, 'LOWER_RANGE', 'Unterer Bereich');
  $putStringValue(de, 'UPPER_RANGE', 'Oberer Bereich');
  $putStringValue(de, 'TODAY', ' \u201EHeute\u201C');
  $putStringValue(de, 'AM', ' AM');
  $putStringValue(de, 'PM', ' PM');
  $putStringValue(de, 'GROUP_TOTAL', ' Summe der Gruppen');
  $putStringValue(de, 'SCALE_MARKER', 'Skalamarkierung');
  $putStringValue(de, 'WARN_NOT_ALL_DATA', 'Warnung: Es werden nicht alle Daten angezeigt.');
  $putStringValue(de, 'WARN_NEGATIVE_NUMBERS', ' Warnung: Daten enthalten negative Zahlen.');
  $putStringValue(de, 'WARN_INVALID_FOR_LOG_SCALE', ' Warnung: Negative oder Nullwerte mit logarithmischer Skalierung.');
  $putStringValue(de, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', 'Warnung: Es werden nicht alle Daten in der Karte angezeigt.');
  $putStringValue(de, 'WARN_HIGHTLIGHTING_DISABLED', 'Hervorhebung aufgrund der Gr\xF6\xDFe des DataSet deaktiviert.');
  $putStringValue(de, 'ACTUAL', ' Ist');
  $putStringValue(de, 'PROJECTED', ' Veranschlagt');
  $putStringValue(de, 'DIFFERENCE', ' Unterschied');
  $putStringValue(de, 'VARIANCE', ' Abweichung');
  $putStringValue(de, 'MINIMUM', 'Minimum');
  $putStringValue(de, 'MAXIMUM', 'Maximum');
  $putStringValue(de, 'AVERAGE', 'Durchschnitt');
  $putStringValue(de, 'STANDARD_DEVIATION', 'Standardabweichung');
  $putStringValue(de, 'STANDARD_DEVIATIONS', 'Standardabweichungen');
  $putStringValue(de, 'PERCENTILE', 'Perzentil');
  $putStringValue(de, 'PCT_OF', '% von');
  $putStringValue(de, 'FIRST_VALUE', 'Erster Wert');
  $putStringValue(de, 'LAST_VALUE', 'Letzter Wert');
  $putStringValue(de, 'NEXTTOLAST_VALUE', 'Vorletzter Wert');
  $putStringValue(de, 'bubble', 'Blase');
  $putStringValue(de, 'bullet', 'Aufz\xE4hl.zeich.');
  $putStringValue(de, 'calendar', 'Kalender');
  $putStringValue(de, 'category scatter', 'Kategorie-Punktdiagr.');
  $putStringValue(de, 'gauge advanced', 'Gauge, erweit.');
  $putStringValue(de, 'gauge basic', 'Gauge, grundl.');
  $putStringValue(de, 'gauge', 'Gauge');
  $putStringValue(de, 'curved symbol', 'gebog. Symbol');
  $putStringValue(de, 'curved line', 'gebog. Linie');
  $putStringValue(de, 'donut', 'Ringdiagr.');
  $putStringValue(de, 'face', 'Schrift');
  $putStringValue(de, 'filled', 'gef\xFCllt');
  $putStringValue(de, 'funnel', 'Trichter');
  $putStringValue(de, 'funnel bars', 'Trichterbalk.');
  $putStringValue(de, 'folded funnel', 'gefalt. Trichter');
  $putStringValue(de, 'gantt', 'Gantt');
  $putStringValue(de, 'gantt %', 'Gantt %');
  $putStringValue(de, 'gauge', 'Gauge');
  $putStringValue(de, 'heatmap', 'W\xE4rmebild');
  $putStringValue(de, 'high low', 'hoch niedrig');
  $putStringValue(de, 'h 100%', 'h. 100 %');
  $putStringValue(de, 'h bar', 'h. Balken');
  $putStringValue(de, 'h boxplot', 'h. Boxplot');
  $putStringValue(de, 'h grouped stacked', 'h. grupp. gestap.');
  $putStringValue(de, 'h histogram', 'h. Histogramm');
  $putStringValue(de, 'h grouped', 'h. gruppiert');
  $putStringValue(de, 'h nested', 'h. verschacht.');
  $putStringValue(de, 'h overlay', 'H \xDCberlagerung');
  $putStringValue(de, 'h % bar', 'h. % Balken');
  $putStringValue(de, 'h stacked', 'h. gestap.');
  $putStringValue(de, 'h symbol', 'h. Symbol');
  $putStringValue(de, 'h symbol overlay', 'h. Symbol-Overlay');
  $putStringValue(de, 'h waterfall', 'h. Wasserfall');
  $putStringValue(de, 'line bar', 'Zeil.balken');
  $putStringValue(de, 'line grouped stacked', 'Cluster-Balk.');
  $putStringValue(de, 'line stacked', 'Linie gestap.');
  $putStringValue(de, 'pareto', 'Pareto');
  $putStringValue(de, 'pie', 'Kreis');
  $putStringValue(de, 'bar line', 'Balkenlinie');
  $putStringValue(de, 'variance bar line', 'Abweich. Balkenlinie');
  $putStringValue(de, 'line bar', 'Zeil.balken');
  $putStringValue(de, 'variance line bar', 'Abweich. Zeilenbalken');
  $putStringValue(de, 'line', 'Linie');
  $putStringValue(de, 'variance line', 'Abweich. Linie');
  $putStringValue(de, 'grouped', 'gruppiert');
  $putStringValue(de, 'progress', 'Statusanz.');
  $putStringValue(de, 'radar', 'Radar');
  $putStringValue(de, 'running total line', 'Zeile m. laufend. Summe');
  $putStringValue(de, 'value', 'Wert');
  $putStringValue(de, 'area', 'Fl\xE4che');
  $putStringValue(de, 'step', 'Schritt');
  $putStringValue(de, 'candlestick', 'Kerze');
  $putStringValue(de, 'symbol bar', 'Symbol-Balk.');
  $putStringValue(de, 'symbol stacked', 'Symbol gestap.');
  $putStringValue(de, 'symbol', 'Symbol');
  $putStringValue(de, 'text', 'Text');
  $putStringValue(de, 'treemap', 'Treemap');
  $putStringValue(de, 'line', 'Linie');
  $putStringValue(de, 'multi-line', 'Multi-Linie');
  $putStringValue(de, '100%', '100 %');
  $putStringValue(de, 'bar', 'Balken');
  $putStringValue(de, 'boxplot', 'Boxplot');
  $putStringValue(de, 'bullet', 'Aufz\xE4hl.zeich.');
  $putStringValue(de, 'grouped stacked', 'grupp. gestap.');
  $putStringValue(de, 'histogram', 'Histogramm');
  $putStringValue(de, 'grouped', 'gruppiert');
  $putStringValue(de, 'nested', 'verschachtelt');
  $putStringValue(de, 'overlay', '\xDCberlagerung');
  $putStringValue(de, '% bar', '% Balken');
  $putStringValue(de, 'vert_rtbar', 'Balken m. lauf. Summe');
  $putStringValue(de, 'running total grouped', 'laufende Summe grupp.');
  $putStringValue(de, 'running total stacked', 'laufende Summe gestap.');
  $putStringValue(de, 'stacked', 'gestapelt');
  $putStringValue(de, 'symbol', 'Symbol');
  $putStringValue(de, 'symbol overlay', 'Symbol-Overlay');
  $putStringValue(de, 'waterfall', 'Wasserfall');
  $putStringValue(de, 'word cloud', 'Wort-Cloud');
  $putStringValue(de, 'scatter', 'Punktdiagr.');
  $putStringValue(de, 'curved_line_bar', 'Gebogener Linienbalken');
  $putStringValue(de, 'curved_line_stackedbar', 'Gebogene Linie, gestapelt');
  $putStringValue(de, 'horiz_100pct_area', 'H 100 % Bereich');
  $putStringValue(de, 'horiz_area_overlay', 'H Bereichs\xFCberlagerung');
  $putStringValue(de, 'horiz_bar_line', 'H Balkenlinie');
  $putStringValue(de, 'horiz_curved_100pct_area', 'H gebogener\xA0100%\xA0Bereich');
  $putStringValue(de, 'horiz_curved_area_overlay', 'H gebogene Bereichs\xFCberlagerung');
  $putStringValue(de, 'horiz_curved_stacked_area', 'H gebogener\xA0Bereich');
  $putStringValue(de, 'horiz_curved_symbolline', 'H gebogenes\xA0Symbol');
  $putStringValue(de, 'horiz_curvedline', 'H gebogene Linie');
  $putStringValue(de, 'horiz_line_bar', 'H Linienbalken');
  $putStringValue(de, 'horiz_line_clusterbar', 'H Linie Cluster-Balken');
  $putStringValue(de, 'horiz_line_multi_dotplot', 'H Linie gruppierter\xA0Lollipop');
  $putStringValue(de, 'horiz_line_stacked_dotplot', 'H Linie gestapelter Lollipop');
  $putStringValue(de, 'horiz_line_stackedbar', 'H Linie, gestapelt');
  $putStringValue(de, 'horiz_marimekko', 'H Marimekko');
  $putStringValue(de, 'horiz_multi_dotplot', 'H gruppierter\xA0Lollipop');
  $putStringValue(de, 'horiz_nested_linebar', 'H geschachtelter\xA0Linienbalken');
  $putStringValue(de, 'horiz_rtbar', 'H Balken m. lauf. Summe');
  $putStringValue(de, 'horiz_rtmultibar', 'H laufende Summe, grupp.');
  $putStringValue(de, 'horiz_rtstackedbar', 'H gestapelt\xA0mit laufender Summe');
  $putStringValue(de, 'horiz_stacked_dotplot', 'H gestapelter Lollipop');
  $putStringValue(de, 'horiz_stackedtrend', 'H\xA0Bereich');
  $putStringValue(de, 'horiz_step_100pct_area', 'H Schritt 100 % Bereich');
  $putStringValue(de, 'horiz_step_area_overlay', 'H\xA0Schrittbereichs\xFCberlagerung');
  $putStringValue(de, 'horiz_step_stacked_area', 'H Schrittbereich');
  $putStringValue(de, 'horiz_stepline', 'H Schritt');
  $putStringValue(de, 'horiz_symbol_bar', 'H Symbol-Balk.');
  $putStringValue(de, 'horiz_symbol_stackedbar', 'H Symbol, gestap.');
  $putStringValue(de, 'horiz_symbolline', 'H Symbollinie');
  $putStringValue(de, 'horiz_trendline', 'H Linie');
  $putStringValue(de, 'vert_100pct_area', '100 % Bereich');
  $putStringValue(de, 'vert_area_overlay', 'Bereichs\xFCberlagerung');
  $putStringValue(de, 'vert_bar_line', 'Balkenlinie');
  $putStringValue(de, 'vert_curved_100pct_area', 'Gebogener\xA0100 %\xA0Bereich');
  $putStringValue(de, 'vert_curved_area_overlay', 'Gebogene Bereichs\xFCberlagerung');
  $putStringValue(de, 'vert_curved_stacked_area', 'Gebogener Bereich');
  $putStringValue(de, 'vert_line_multi_dotplot', 'Linie gruppierter\xA0Lollipop');
  $putStringValue(de, 'vert_line_stacked_dotplot', 'Linie gestapelter Lollipop');
  $putStringValue(de, 'vert_marimekko', 'Marimekko');
  $putStringValue(de, 'vert_multi_dotplot', 'Gruppierter Lollipop');
  $putStringValue(de, 'vert_nested_linebar', 'Geschachtelter\xA0Linienbalken');
  $putStringValue(de, 'vert_stacked_dotplot', 'Gestapelter Lollipop');
  $putStringValue(de, 'vert_step_100pct_area', 'Schritt 100 % Bereich');
  $putStringValue(de, 'vert_step_area_overlay', 'Schrittbereichs\xFCberlagerung');
  $putStringValue(de, 'vert_step_stacked_area', 'Schrittbereich');
  $putStringValue(de, 'nautilus', 'Nautilus');
  $putStringValue(de, 'nautilus_donut', 'Nautilus-Ringdiagramm');
  $putStringValue(de, 'nightingale_rose', 'Polar-Area Diagramm');
  $putStringValue(de, 'xy_line', 'XY-Linie');
  $putStringValue(de, 'ds_pred_modeling', 'Vorhersagend');
  $putStringValue(de, 'ds_forecasting', 'Vorhersagen');
  $putStringValue(de, 'ds_outliers', 'Ausrei\xDFer');
  $putStringValue(de, 'stream', 'Datenstrom');
  $putStringValue(de, 'stream_funnel', 'Datenstromtrichter');
  $putStringValue(de, 'flex_table', 'Flex table');
  $putStringValue(de, 'QUANTILES_3_2', 'Oberes Terzil');
  $putStringValue(de, 'QUANTILES_3_1', 'Unteres Terzil');
  $putStringValue(de, 'QUANTILES_4_3', 'Oberes Quartil');
  $putStringValue(de, 'QUANTILES_4_2', 'Median');
  $putStringValue(de, 'QUANTILES_4_1', 'Unteres Quartil');
  $putStringValue(de, 'QUANTILES_5_4', 'Viertes Quintil');
  $putStringValue(de, 'QUANTILES_5_3', 'Drittes Quintil');
  $putStringValue(de, 'QUANTILES_5_2', 'Zweites Quintil');
  $putStringValue(de, 'QUANTILES_5_1', 'Erstes Quintil');
  $putStringValue(de, 'QUANTILES_6_5', 'F\xFCnftes Sextil');
  $putStringValue(de, 'QUANTILES_6_4', 'Viertes Sextil');
  $putStringValue(de, 'QUANTILES_6_3', 'Drittes Sextil');
  $putStringValue(de, 'QUANTILES_6_2', 'Zweites Sextil');
  $putStringValue(de, 'QUANTILES_6_1', 'Erstes Sextil');
  $putStringValue(de, 'QUANTILES_7_6', 'Sechstes Septil');
  $putStringValue(de, 'QUANTILES_7_5', 'F\xFCnftes Septil');
  $putStringValue(de, 'QUANTILES_7_4', 'Viertes Septil');
  $putStringValue(de, 'QUANTILES_7_3', 'Drittes Septil');
  $putStringValue(de, 'QUANTILES_7_2', 'Zweites Septil');
  $putStringValue(de, 'QUANTILES_7_1', 'Erstes Septil');
  $putStringValue(de, 'QUANTILES_8_7', 'Siebtes Octil');
  $putStringValue(de, 'QUANTILES_8_6', 'Sechstes Octil');
  $putStringValue(de, 'QUANTILES_8_5', 'F\xFCnftes Octil');
  $putStringValue(de, 'QUANTILES_8_4', 'Viertes Octil');
  $putStringValue(de, 'QUANTILES_8_3', 'Drittes Octil');
  $putStringValue(de, 'QUANTILES_8_2', 'Zweites Octil');
  $putStringValue(de, 'QUANTILES_8_1', 'Erstes Octil');
  $putStringValue(de, 'QUANTILES_9_8', '8/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_7', '7/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_6', '6/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_5', '5/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_4', '4/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_3', '3/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_2', '2/9 Kachel');
  $putStringValue(de, 'QUANTILES_9_1', '1/9 Kachel');
  $putStringValue(de, 'QUANTILES_10_9', '9 Dezil');
  $putStringValue(de, 'QUANTILES_10_8', '8 Dezil');
  $putStringValue(de, 'QUANTILES_10_7', '7 Dezil');
  $putStringValue(de, 'QUANTILES_10_6', '6 Dezil');
  $putStringValue(de, 'QUANTILES_10_5', '5 Dezil');
  $putStringValue(de, 'QUANTILES_10_4', '4 Dezil');
  $putStringValue(de, 'QUANTILES_10_3', '3 Dezil');
  $putStringValue(de, 'QUANTILES_10_2', '2 Dezil');
  $putStringValue(de, 'QUANTILES_10_1', '1 Dezil');
  $putStringValue(de, 'THOUSANDSSEP', '.');
  $putStringValue(de, 'DECIMALCHAR', ',');
  $putStringValue(de, 'CURRENCYSYMBOL', '\u20AC');
  $putStringValue(de, 'MONTHLONGNAME_0', 'Januar');
  $putStringValue(de, 'MONTHLONGNAME_1', 'Februar');
  $putStringValue(de, 'MONTHLONGNAME_2', 'M\xE4rz');
  $putStringValue(de, 'MONTHLONGNAME_3', 'April');
  $putStringValue(de, 'MONTHLONGNAME_4', 'Mai');
  $putStringValue(de, 'MONTHLONGNAME_5', 'Juni');
  $putStringValue(de, 'MONTHLONGNAME_6', 'Juli');
  $putStringValue(de, 'MONTHLONGNAME_7', 'August');
  $putStringValue(de, 'MONTHLONGNAME_8', 'September');
  $putStringValue(de, 'MONTHLONGNAME_9', 'Oktober');
  $putStringValue(de, 'MONTHLONGNAME_10', 'November');
  $putStringValue(de, 'MONTHLONGNAME_11', ' Dezember');
  $putStringValue(de, 'MONTHSHORTNAME_0', 'Jan');
  $putStringValue(de, 'MONTHSHORTNAME_1', 'Feb');
  $putStringValue(de, 'MONTHSHORTNAME_2', 'Mrz');
  $putStringValue(de, 'MONTHSHORTNAME_3', 'Apr');
  $putStringValue(de, 'MONTHSHORTNAME_4', 'Mai');
  $putStringValue(de, 'MONTHSHORTNAME_5', 'Jun');
  $putStringValue(de, 'MONTHSHORTNAME_6', 'Jul');
  $putStringValue(de, 'MONTHSHORTNAME_7', 'Aug');
  $putStringValue(de, 'MONTHSHORTNAME_8', 'Sep');
  $putStringValue(de, 'MONTHSHORTNAME_9', 'Okt');
  $putStringValue(de, 'MONTHSHORTNAME_10', 'Nov');
  $putStringValue(de, 'MONTHSHORTNAME_11', ' Dez');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_0', 'Jan');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_1', 'Feb');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_2', 'Mrz');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_3', 'Apr');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_4', 'Mai');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_5', 'Juni');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_6', 'Juli');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_7', 'Aug');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_8', 'Sep');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_9', 'Okt');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_10', 'Nov');
  $putStringValue(de, 'MONTHSHORTNAMESTDCAL_11', ' Dez');
  $putStringValue(de, 'DAYLONGNAME_0', '');
  $putStringValue(de, 'DAYLONGNAME_1', 'Sonntag');
  $putStringValue(de, 'DAYLONGNAME_2', 'Montag');
  $putStringValue(de, 'DAYLONGNAME_3', 'Dienstag');
  $putStringValue(de, 'DAYLONGNAME_4', 'Mittwoch');
  $putStringValue(de, 'DAYLONGNAME_5', 'Donnerstag');
  $putStringValue(de, 'DAYLONGNAME_6', 'Freitag');
  $putStringValue(de, 'DAYLONGNAME_7', 'Samstag');
  $putStringValue(de, 'DAYSHORTNAME_0', '');
  $putStringValue(de, 'DAYSHORTNAME_1', 'So.');
  $putStringValue(de, 'DAYSHORTNAME_2', 'Mo.');
  $putStringValue(de, 'DAYSHORTNAME_3', 'Di.');
  $putStringValue(de, 'DAYSHORTNAME_4', 'Mi.');
  $putStringValue(de, 'DAYSHORTNAME_5', 'Do.');
  $putStringValue(de, 'DAYSHORTNAME_6', 'Fr.');
  $putStringValue(de, 'DAYSHORTNAME_7', 'Sa.');
  $putStringValue(de, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'dd.MMM yyyy HH');
  $putStringValue(de, 'DAY_MONTH_YEAR_FORMAT', 'dd.MMM yyyy');
  $putStringValue(de, 'MONTH_WITH_YEAR_FORMAT', 'MMM yyyy');
  $putStringValue(de, 'YEAR_ONLY_FORMAT', 'yyyy');
  $putStringValue(de, 'MONTH_ONLY_FORMAT', 'MMM');
  $putStringValue(de, 'HOUR_ONLY', 'HH');
  $putStringValue(de, 'HOUR_WITH_MINUTE', 'HH:mm');
  $putStringValue(de, 'EC4001', 'Warnung: Projektionsanfragen ben\xF6tigen eine Zeitkomponente.');
  $putStringValue(de, 'EC4002', 'Warnung: Die angeforderte Projektion hat ein Komponentendatum, aber die kombinierte Datenspalte ist ein Datum, keine DatumZeit.');
  $putStringValue(de, 'EC4003', 'Warnung: Die Projektionsanfrage ergab keine verwendbaren Daten.');
  $putStringValue(de, 'EC4004', 'Warnung: Projektion kann nicht auf Spalte projiziert werden.');
  $putStringValue(de, 'EC4005', 'Warnung: \u201EGruppe nach\u201C wird nicht unterst\xFCtzt.');
  $putStringValue(de, 'EC4006', 'Warnung: Die angeforderte Projektion beginnt vor den verf\xFCgbaren Daten.');
  $putStringValue(de, 'EC4007', 'Warnung: Projektion konnte keine Periodenelemente abrufen.');
  $putStringValue(de, 'ANNOTATION_TITLE', 'Anmerkung zu {1}');
  $putStringValue(de, 'ANNOTATIONS', 'Anmerkungen');
  $putStringValue(de, 'RECENTLY_ADDED', '(K\xFCrzlich hinzugef\xFCgt)');
  $putStringValue(de, 'VAL_OF_VAL', '{1} von {2}');
  $putStringValue(de, 'PCT_OF_TOTAL', '{1} der Gesamtanzahl');
  $putStringValue(de, 'SLICER_ALL_VALUES', 'Alle Werte ({1})');
  $putStringValue(de, 'SLICER_SELECTED', 'Ausgew\xE4hlte ({1})');
  $putStringValue(de, 'SLICER_SHOW_ALL', 'Alle einblenden');
  $putStringValue(de, 'SLICER_SHOW_SELECTED', 'Nur ausgew\xE4hlte einblenden');
  $putStringValue(de, 'SLICER_INFO_TEXT', '{1}\u2013{2} von {3}');
  $putStringValue(de, 'DATE_SEL_CLEAR', 'L\xF6schen');
  $putStringValue(de, 'DATE_SEL_PRESETS', 'Voreinstellungen');
  $putStringValue(de, 'DATE_SEL_CALENDAR', 'Kalender');
  $putStringValue(de, 'DATE_SEL_DAYS', 'Tage');
  $putStringValue(de, 'DATE_SEL_WEEKS', 'Wochen');
  $putStringValue(de, 'DATE_SEL_MONTHS', 'Monate');
  $putStringValue(de, 'DATE_SEL_YEARS', 'Jahre');
  $putStringValue(de, 'DATE_SEL_TODAY', 'Heute');
  $putStringValue(de, 'DATE_SEL_YESTERDAY', 'Gestern');
  $putStringValue(de, 'DATE_SEL_LAST_7DAYS', 'Vergangene 7 Tage');
  $putStringValue(de, 'DATE_SEL_LAST_30DAYS', 'Vergangene 30 Tage');
  $putStringValue(de, 'DATE_SEL_LAST_60DAYS', 'Vergangene 60 Tage');
  $putStringValue(de, 'DATE_SEL_LAST_90DAYS', 'Vergangene 90 Tage');
  $putStringValue(de, 'DATE_SEL_THIS_WEEK', 'Diese Woche');
  $putStringValue(de, 'DATE_SEL_LAST_WEEK', 'Letzte Woche');
  $putStringValue(de, 'DATE_SEL_LAST_2WEEKS', 'Vergangene 2 Wochen');
  $putStringValue(de, 'DATE_SEL_LAST_3WEEKS', 'Vergangene 3 Wochen');
  $putStringValue(de, 'DATE_SEL_LAST_4WEEKS', 'Vergangene 4 Wochen');
  $putStringValue(de, 'DATE_SEL_LAST_53WEEKS', 'Vergangene 53 Wochen');
  $putStringValue(de, 'DATE_SEL_THIS_MONTH', 'Dieser Monat');
  $putStringValue(de, 'DATE_SEL_LAST_MONTH', 'Letzter Monat');
  $putStringValue(de, 'DATE_SEL_LAST_2MONTHS', 'Vergangene 2 Monate');
  $putStringValue(de, 'DATE_SEL_LAST_3MONTHS', 'Vergangene 3 Monate');
  $putStringValue(de, 'DATE_SEL_LAST_6MONTHS', 'Vergangene 6 Monate');
  $putStringValue(de, 'DATE_SEL_LAST_12MONTHS', 'Vergangene 12 Monate');
  $putStringValue(de, 'DATE_SEL_LAST_13MONTHS', 'Vergangene 13 Monate');
  $putStringValue(de, 'DATE_SEL_THIS_YEAR', 'Dieses Jahr');
  $putStringValue(de, 'DATE_SEL_LAST_YEAR', 'Letztes Jahr');
  $putStringValue(de, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(de, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(de, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(de, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(de, 'de-DE');
  $putStringValue(locales, 'de', de);
}

function loadJapanese(){
  $putStringValue(ja, 'MORE_ITEMS', '\u8A73\u7D30');
  $putStringValue(ja, 'NOT_ALL_DATA_SHOWN', '\u3044\u304F\u3064\u304B\u306E\u30C7\u30FC\u30BF\u306F\u975E\u8868\u793A\u3067\u3059');
  $putStringValue(ja, 'NO_DATA', '\u30C7\u30FC\u30BF\u306A\u3057');
  $putStringValue(ja, 'NO_DATA_EXISTS', '\u30C7\u30FC\u30BF\u304C\u3042\u308A\u307E\u305B\u3093');
  $putStringValue(ja, 'UNMAPPED_DATA', '\u30DE\u30C3\u30D7\u3055\u308C\u3066\u3044\u306A\u3044\u30C7\u30FC\u30BF');
  $putStringValue(ja, 'TOTAL', '\u5408\u8A08');
  $putStringValue(ja, 'GRAND_TOTAL', '\u7DCF\u8A08');
  $putStringValue(ja, 'COUNT', '\u30AB\u30A6\u30F3\u30C8');
  $putStringValue(ja, 'MANY', '\u8907\u6570');
  $putStringValue(ja, 'GOAL', '\u30B4\u30FC\u30EB');
  $putStringValue(ja, 'TARGET', '\u30BF\u30FC\u30B2\u30C3\u30C8');
  $putStringValue(ja, 'OVERALL_CONVERSION', '\u3053\u308C\u307E\u3067\u306E\u5C65\u6B74');
  $putStringValue(ja, 'DROPPED', '\u505C\u6B62');
  $putStringValue(ja, 'SUMMARY', '\u30B5\u30DE\u30EA\u30FC');
  $putStringValue(ja, 'HIGH', '\u9AD8');
  $putStringValue(ja, 'LOW', '\u4F4E');
  $putStringValue(ja, 'OPEN', '\u958B\u59CB');
  $putStringValue(ja, 'CLOSE', '\u7D42\u4E86');
  $putStringValue(ja, 'MEDIAN', '\u4E2D\u592E\u5024');
  $putStringValue(ja, 'Q1', 'Q1');
  $putStringValue(ja, 'Q3', 'Q3');
  $putStringValue(ja, 'QUARTERS', 'Q1|Q2|Q3|Q4');
  $putStringValue(ja, 'NO_INTERACTIVITY', '\u30C7\u30FC\u30BF\u306E\u91CF\u304C\u591A\u3044\u305F\u3081\u3001\u30A4\u30F3\u30BF\u30E9\u30AF\u30C6\u30A3\u30D6\u6A5F\u80FD\u304C\u7121\u52B9\u306B\u306A\u308A\u307E\u3057\u305F\u3002');
  $putStringValue(ja, 'LEGEND_MORE_INFO', '\u4ED6\u306E\u30A2\u30A4\u30C6\u30E0\u306E\u51E1\u4F8B\u3092\u898B\u308B\u306B\u306F\u3001\\n\u30C1\u30E3\u30FC\u30C8\u3067\u305D\u306E\u30A2\u30A4\u30C6\u30E0\u306B\u30DE\u30A6\u30B9\u3092\u5408\u308F\u305B\u307E\u3059');
  $putStringValue(ja, 'MIN', '\u6700\u4F4E');
  $putStringValue(ja, 'MAX', '\u6700\u9AD8');
  $putStringValue(ja, 'AVG', '\u5E73\u5747');
  $putStringValue(ja, 'OTHER', '\u305D\u306E\u4ED6');
  $putStringValue(ja, 'CATEGORIES_IN_OTHER', '\u305D\u306E\u4ED6\u306B\u3042\u308B\u30AB\u30C6\u30B4\u30EA\u30FC');
  $putStringValue(ja, 'LOWER_RANGE', '\u4E0B\u306E\u7BC4\u56F2');
  $putStringValue(ja, 'UPPER_RANGE', '\u4E0A\u306E\u7BC4\u56F2');
  $putStringValue(ja, 'TODAY', '\u4ECA\u65E5');
  $putStringValue(ja, 'AM', 'AM');
  $putStringValue(ja, 'PM', 'PM');
  $putStringValue(ja, 'GROUP_TOTAL', '\u30B0\u30EB\u30FC\u30D7\u5408\u8A08');
  $putStringValue(ja, 'SCALE_MARKER', '\u76EE\u76DB\u308A\u30DE\u30FC\u30AB\u30FC');
  $putStringValue(ja, 'WARN_NOT_ALL_DATA', '\u6CE8\uFF1A\u8868\u793A\u3055\u308C\u3066\u3044\u306A\u3044\u30C7\u30FC\u30BF\u3082\u3042\u308A\u307E\u3059\u3002');
  $putStringValue(ja, 'WARN_NEGATIVE_NUMBERS', '\u6CE8\uFF1A\u30C7\u30FC\u30BF\u306B\u306F\u30DE\u30A4\u30CA\u30B9\u306E\u6570\u5024\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u3059\u3002');
  $putStringValue(ja, 'WARN_INVALID_FOR_LOG_SCALE', '\u6CE8\uFF1A\u5BFE\u6570\u76EE\u76DB\u308A\u306B\u306F\u30DE\u30A4\u30CA\u30B9\u6570\u5024\u3068\u30BC\u30ED(0)\u5024\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u3059\u3002');
  $putStringValue(ja, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', '\u6CE8\uFF1A\u30DE\u30C3\u30D7\u3067\u306F\u5168\u3066\u306E\u30C7\u30FC\u30BF\u304C\u8868\u793A\u3055\u308C\u3066\u3044\u308B\u308F\u3051\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002');
  $putStringValue(ja, 'WARN_HIGHTLIGHTING_DISABLED', 'DataSet\u306E\u30B5\u30A4\u30BA\u304C\u539F\u56E0\u3067\u30CF\u30A4\u30E9\u30A4\u30C8\u304C\u7121\u52B9\u3067\u3059');
  $putStringValue(ja, 'ACTUAL', '\u5B9F\u969B');
  $putStringValue(ja, 'PROJECTED', '\u4E88\u6E2C');
  $putStringValue(ja, 'DIFFERENCE', '\u5DEE');
  $putStringValue(ja, 'VARIANCE', '\u5206\u6563');
  $putStringValue(ja, 'MINIMUM', '\u6700\u5C0F');
  $putStringValue(ja, 'MAXIMUM', '\u6700\u5927');
  $putStringValue(ja, 'AVERAGE', '\u5E73\u5747');
  $putStringValue(ja, 'STANDARD_DEVIATION', '\u6A19\u6E96\u504F\u5DEE');
  $putStringValue(ja, 'STANDARD_DEVIATIONS', '\u6A19\u6E96\u504F\u5DEE');
  $putStringValue(ja, 'PERCENTILE', '\u30D1\u30FC\u30BB\u30F3\u30BF\u30A4\u30EB');
  $putStringValue(ja, 'PCT_OF', '%\u3092\u6B21\u306B\u5BFE\u3057\u3066\uFF1A');
  $putStringValue(ja, 'FIRST_VALUE', '\u6700\u521D\u306E\u5024');
  $putStringValue(ja, 'LAST_VALUE', '\u6700\u5F8C\u306E\u5024');
  $putStringValue(ja, 'NEXTTOLAST_VALUE', '\u6700\u5F8C\u304B\u30892\u756A\u76EE\u306E\u5024');
  $putStringValue(ja, 'bubble', '\u30D0\u30D6\u30EB');
  $putStringValue(ja, 'bullet', '\u30D6\u30EC\u30C3\u30C8');
  $putStringValue(ja, 'calendar', '\u30AB\u30EC\u30F3\u30C0\u30FC');
  $putStringValue(ja, 'category scatter', '\u30AB\u30C6\u30B4\u30EA\u6563\u5E03\u56F3');
  $putStringValue(ja, 'gauge advanced', '\u9AD8\u5EA6\u30D1\u30CD\u30EB');
  $putStringValue(ja, 'gauge basic', '\u57FA\u672C\u30D1\u30CD\u30EB');
  $putStringValue(ja, 'gauge', '\u30D1\u30CD\u30EB');
  $putStringValue(ja, 'curved symbol', '\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u66F2\u7DDA');
  $putStringValue(ja, 'curved line', '\u66F2\u7DDA');
  $putStringValue(ja, 'donut', '\u30C9\u30FC\u30CA\u30C4');
  $putStringValue(ja, 'face', '\u30D5\u30A7\u30A4\u30B9\u30D1\u30CD\u30EB');
  $putStringValue(ja, 'filled', '\u30B5\u30FC\u30E2\u30E1\u30FC\u30BF\u30FC');
  $putStringValue(ja, 'funnel', '\u7E26\u578B\u30D5\u30A1\u30CD\u30EB');
  $putStringValue(ja, 'funnel bars', '\u7E26\u578B\u30D5\u30A1\u30CD\u30EB\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'folded funnel', '\u6A2A\u578B\u30D5\u30A1\u30CD\u30EB');
  $putStringValue(ja, 'gantt', '\u30AC\u30F3\u30C8');
  $putStringValue(ja, 'gantt %', '\u30AC\u30F3\u30C8%');
  $putStringValue(ja, 'gauge', '\u30D1\u30CD\u30EB');
  $putStringValue(ja, 'heatmap', '\u30D2\u30FC\u30C8\u30DE\u30C3\u30D7');
  $putStringValue(ja, 'high low', '\u9AD8\u4F4E\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'h 100%', '\u6A2A 100%');
  $putStringValue(ja, 'h bar', '\u6A2A\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'h boxplot', '\u7BB1\u3072\u3052\u56F3(\u6A2A)');
  $putStringValue(ja, 'h grouped stacked', '\u96C6\u5408\u7A4D\u4E0A\u3052\u6A2A\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'h histogram', '\u6A2A\u30D2\u30B9\u30C8\u30B0\u30E9\u30E0');
  $putStringValue(ja, 'h grouped', '\u6A2A\u96C6\u5408');
  $putStringValue(ja, 'h nested', '\u6A2A\u30CD\u30B9\u30C8');
  $putStringValue(ja, 'h overlay', '\u6A2A\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'h % bar', '100%\u7A4D\u307F\u4E0A\u3052\u6A2A\u68D2');
  $putStringValue(ja, 'h stacked', '\u7A4D\u307F\u4E0A\u3052\u6A2A\u68D2');
  $putStringValue(ja, 'h symbol', '\u6A2A\u8A18\u53F7');
  $putStringValue(ja, 'h symbol overlay', '\u6A2A\u8A18\u53F7\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4');
  $putStringValue(ja, 'h waterfall', '\u6A2A\u578B\u30A6\u30A9\u30FC\u30BF\u30FC\u30D5\u30A9\u30FC\u30EB');
  $putStringValue(ja, 'line bar', '\u6298\u308C\u7DDA+\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'line grouped stacked', '\u96C6\u5408\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'line stacked', '\u7A4D\u4E0A\u3052\u68D2+\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'pareto', '\u30D1\u30EC\u30FC\u30C8');
  $putStringValue(ja, 'pie', '\u5186\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'bar line', '\u68D2+\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'variance bar line', '\u5206\u6563\u68D2+\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'line bar', '\u6298\u308C\u7DDA+\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'variance line bar', '\u5206\u6563\u7DDA+\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'line', '\u6298\u308C\u7DDA');
  $putStringValue(ja, 'variance line', '\u5206\u6563\u6298\u308C\u7DDA');
  $putStringValue(ja, 'grouped', '\u96C6\u5408');
  $putStringValue(ja, 'progress', '\u9032\u6357');
  $putStringValue(ja, 'radar', '\u30EC\u30FC\u30C0\u30FC');
  $putStringValue(ja, 'running total line', '\u6298\u308C\u7DDA(\u7D2F\u8A08)');
  $putStringValue(ja, 'value', '\u5024');
  $putStringValue(ja, 'area', '\u9762');
  $putStringValue(ja, 'step', '\u968E\u6BB5');
  $putStringValue(ja, 'candlestick', '\u30ED\u30FC\u30BD\u30AF\u8DB3');
  $putStringValue(ja, 'symbol bar', '\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'symbol stacked', '\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u7A4D\u4E0A\u3052');
  $putStringValue(ja, 'symbol', '\u8A18\u53F7');
  $putStringValue(ja, 'text', '\u30C6\u30AD\u30B9\u30C8');
  $putStringValue(ja, 'treemap', '\u30C4\u30EA\u30FC\u30DE\u30C3\u30D7');
  $putStringValue(ja, 'line', '\u6298\u308C\u7DDA');
  $putStringValue(ja, 'multi-line', '\u8907\u6570\u6298\u308C\u7DDA');
  $putStringValue(ja, '100%', '100%');
  $putStringValue(ja, 'bar', '\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'boxplot', '\u7BB1\u3072\u3052\u56F3');
  $putStringValue(ja, 'bullet', '\u30D6\u30EC\u30C3\u30C8');
  $putStringValue(ja, 'grouped stacked', '\u96C6\u5408\u7A4D\u4E0A\u3052');
  $putStringValue(ja, 'histogram', '\u30D2\u30B9\u30C8\u30B0\u30E9\u30E0');
  $putStringValue(ja, 'grouped', '\u96C6\u5408');
  $putStringValue(ja, 'nested', '\u30CD\u30B9\u30C8');
  $putStringValue(ja, 'overlay', '\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, '% bar', '100%\u7A4D\u307F\u4E0A\u3052\u68D2');
  $putStringValue(ja, 'vert_rtbar', '\u68D2\u30B0\u30E9\u30D5\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'running total grouped', '\u96C6\u5408\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'running total stacked', '\u7A4D\u4E0A\u3052\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'stacked', '\u7A4D\u4E0A\u3052');
  $putStringValue(ja, 'symbol', '\u8A18\u53F7');
  $putStringValue(ja, 'symbol overlay', '\u8A18\u53F7\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4');
  $putStringValue(ja, 'waterfall', '\u7E26\u578B\u30A6\u30A9\u30FC\u30BF\u30FC\u30D5\u30A9\u30FC\u30EB');
  $putStringValue(ja, 'word cloud', '\u30EF\u30FC\u30C9\u30AF\u30E9\u30A6\u30C9');
  $putStringValue(ja, 'scatter', '\u6563\u5E03\u56F3');
  $putStringValue(ja, 'curved_line_bar', '\u66F2\u7DDA\uFF0B\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'curved_line_stackedbar', '\u66F2\u7DDA \uFF0B\xA0\u7A4D\u4E0A\u3052\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_100pct_area', '\u6A2A 100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_area_overlay', '\u6A2A\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_bar_line', '\u6A2A\u68D2\xA0+\xA0\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_curved_100pct_area', '\u6A2A\u66F2\u7DDA 100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_curved_area_overlay', '\u6A2A\u66F2\u7DDA\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_curved_stacked_area', '\u6A2A\u66F2\u7DDA\u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_curved_symbolline', '\u6A2A\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u66F2\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_curvedline', '\u6A2A\u66F2\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_line_bar', '\u6A2A\u7DDA\xA0+\xA0\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_line_clusterbar', '\u6A2A\u7DDA\xA0+\xA0\u96C6\u5408\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_line_multi_dotplot', '\u6A2A\u7DDA + \u96C6\u5408\u30ED\u30EA\u30DD\u30C3\u30D7');
  $putStringValue(ja, 'horiz_line_stacked_dotplot', '\u6A2A\u7DDA\xA0+\xA0\u7A4D\u307F\u4E0A\u3052\u30ED\u30EA\u30DD\u30C3\u30D7');
  $putStringValue(ja, 'horiz_line_stackedbar', '\u6A2A\u7DDA\u7A4D\u307F\u4E0A\u3052\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_marimekko', '\u6A2A\u30DE\u30EA\u30E1\u30C3\u30B3');
  $putStringValue(ja, 'horiz_multi_dotplot', '\u6A2A\u96C6\u5408\u30ED\u30EA\u30DD\u30C3\u30D7\u30C1\u30E3\u30FC\u30C8');
  $putStringValue(ja, 'horiz_nested_linebar', '\u6A2A\u30CD\u30B9\u30C8\u7DDA\xA0+\xA0\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_rtbar', '\u6A2A\u68D2\u30B0\u30E9\u30D5\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'horiz_rtmultibar', '\u6A2A\u96C6\u5408\u7E26\u68D2\u30B0\u30E9\u30D5\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'horiz_rtstackedbar', '\u6A2A\u7A4D\u4E0A\u3052\u30B0\u30E9\u30D5\uFF08\u7D2F\u8A08\uFF09');
  $putStringValue(ja, 'horiz_stacked_dotplot', '\u6A2A\u7A4D\u307F\u4E0A\u3052\u30ED\u30EA\u30DD\u30C3\u30D7\u30C1\u30E3\u30FC\u30C8');
  $putStringValue(ja, 'horiz_stackedtrend', '\u6A2A\u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_step_100pct_area', '\u6A2A\u968E\u6BB5\xA0100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_step_area_overlay', '\u6A2A\u968E\u6BB5\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_step_stacked_area', '\u6A2A\u968E\u6BB5\u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_stepline', '\u6A2A\u968E\u6BB5\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_symbol_bar', '\u6A2A\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u68D2\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_symbol_stackedbar', '\u6A2A\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u7A4D\u4E0A\u3052\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_symbolline', '\u6A2A\u30DE\u30FC\u30AB\u30FC\u4ED8\u304D\u6298\u308C\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'horiz_trendline', '\u6A2A\u6298\u308C\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_100pct_area', '100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_area_overlay', '\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_bar_line', '\u68D2+\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_curved_100pct_area', '\u66F2\u7DDA 100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_curved_area_overlay', '\u66F2\u7DDA\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_curved_stacked_area', '\u66F2\u7DDA\u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_line_multi_dotplot', '\u6298\u308C\u7DDA\xA0+\xA0\u96C6\u5408\u30ED\u30EA\u30DD\u30C3\u30D7');
  $putStringValue(ja, 'vert_line_stacked_dotplot', '\u6298\u308C\u7DDA\xA0+\xA0\u7A4D\u307F\u4E0A\u3052\u30ED\u30EA\u30DD\u30C3\u30D7');
  $putStringValue(ja, 'vert_marimekko', '\u30DE\u30EA\u30E1\u30C3\u30B3');
  $putStringValue(ja, 'vert_multi_dotplot', '\u96C6\u5408\u30ED\u30EA\u30DD\u30C3\u30D7\u30C1\u30E3\u30FC\u30C8');
  $putStringValue(ja, 'vert_nested_linebar', '\u30CD\u30B9\u30C8\u68D2\xA0+\xA0\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_stacked_dotplot', '\u7A4D\u307F\u4E0A\u3052\u30ED\u30EA\u30DD\u30C3\u30D7\u30C1\u30E3\u30FC\u30C8');
  $putStringValue(ja, 'vert_step_100pct_area', '\u968E\u6BB5 100% \u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_step_area_overlay', '\u968E\u6BB5\u9762\u30AA\u30FC\u30D0\u30FC\u30EC\u30A4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'vert_step_stacked_area', '\u968E\u6BB5\u9762\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'nautilus', '\u5BFE\u6570\u87BA\u65CB\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'nautilus_donut', '\u5BFE\u6570\u87BA\u65CB\u30C9\u30FC\u30CA\u30C4\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'nightingale_rose', '\u30CA\u30A4\u30C1\u30F3\u30B2\u30FC\u30EB\u30FB\u30ED\u30FC\u30BA\u30C0\u30A4\u30A2\u30B0\u30E9\u30E0');
  $putStringValue(ja, 'xy_line', 'XY \u6298\u308C\u7DDA\u30B0\u30E9\u30D5');
  $putStringValue(ja, 'ds_pred_modeling', '\u4E88\u6E2C');
  $putStringValue(ja, 'ds_forecasting', '\u4E88\u6E2C');
  $putStringValue(ja, 'ds_outliers', '\u5916\u308C\u5024');
  $putStringValue(ja, 'stream', '\u30B9\u30C8\u30EA\u30FC\u30E0');
  $putStringValue(ja, 'stream_funnel', '\u30B9\u30C8\u30EA\u30FC\u30E0\u30D5\u30A1\u30CD\u30EB');
  $putStringValue(ja, 'flex_table', 'Flex table');
  $putStringValue(ja, 'QUANTILES_3_2', '\u4E0A\u4E09\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_3_1', '\u4E0B\u4E09\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_4_3', '\u4E0A\u56DB\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_4_2', '\u4E2D\u592E\u5024');
  $putStringValue(ja, 'QUANTILES_4_1', '\u4E0B\u56DB\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_5_4', '\u7B2C4\u4E94\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_5_3', '\u7B2C3\u4E94\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_5_2', '\u7B2C2\u4E94\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_5_1', '\u7B2C1\u4E94\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_6_5', '\u7B2C5\u516D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_6_4', '\u7B2C4\u516D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_6_3', '\u7B2C3\u516D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_6_2', '\u7B2C2\u516D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_6_1', '\u7B2C1\u516D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_6', '\u7B2C6\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_5', '\u7B2C5\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_4', '\u7B2C4\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_3', '\u7B2C3\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_2', '\u7B2C2\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_7_1', '\u7B2C1\u4E03\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_7', '\u7B2C7\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_6', '\u7B2C6\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_5', '\u7B2C5\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_4', '\u7B2C4\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_3', '\u7B2C3\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_2', '\u7B2C2\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_8_1', '\u7B2C1\u516B\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_8', '\u7B2C8\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_7', '\u7B2C7\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_6', '\u7B2C6\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_5', '\u7B2C5\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_4', '\u7B2C4\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_3', '\u7B2C3\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_2', '\u7B2C2\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_9_1', '\u7B2C1\u4E5D\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_9', '\u7B2C9\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_8', '\u7B2C8\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_7', '\u7B2C7\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_6', '\u7B2C6\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_5', '\u7B2C5\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_4', '\u7B2C4\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_3', '\u7B2C3\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_2', '\u7B2C2\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'QUANTILES_10_1', '\u7B2C1\u5341\u5206\u4F4D\u5024');
  $putStringValue(ja, 'THOUSANDSSEP', ',');
  $putStringValue(ja, 'DECIMALCHAR', '.');
  $putStringValue(ja, 'CURRENCYSYMBOL', '\xA5');
  $putStringValue(ja, 'MONTHLONGNAME_0', '1\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_1', '2\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_2', '3\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_3', '4\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_4', '5\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_5', '6\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_6', '7\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_7', '8\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_8', '9\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_9', '10\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_10', '11\u6708');
  $putStringValue(ja, 'MONTHLONGNAME_11', '12\u6708');
  $putStringValue(ja, 'MONTHSHORTNAME_0', '1');
  $putStringValue(ja, 'MONTHSHORTNAME_1', '2');
  $putStringValue(ja, 'MONTHSHORTNAME_2', '3');
  $putStringValue(ja, 'MONTHSHORTNAME_3', '4');
  $putStringValue(ja, 'MONTHSHORTNAME_4', '5');
  $putStringValue(ja, 'MONTHSHORTNAME_5', '6');
  $putStringValue(ja, 'MONTHSHORTNAME_6', '7');
  $putStringValue(ja, 'MONTHSHORTNAME_7', '8');
  $putStringValue(ja, 'MONTHSHORTNAME_8', '9');
  $putStringValue(ja, 'MONTHSHORTNAME_9', '10');
  $putStringValue(ja, 'MONTHSHORTNAME_10', '11');
  $putStringValue(ja, 'MONTHSHORTNAME_11', '12');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_0', '1\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_1', '2\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_2', '3\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_3', '4\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_4', '5\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_5', '6\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_6', '7\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_7', '8\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_8', '9\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_9', '10\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_10', '11\u6708');
  $putStringValue(ja, 'MONTHSHORTNAMESTDCAL_11', '12\u6708');
  $putStringValue(ja, 'DAYLONGNAME_0', '');
  $putStringValue(ja, 'DAYLONGNAME_1', '\u65E5\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_2', '\u6708\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_3', '\u706B\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_4', '\u6C34\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_5', '\u6728\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_6', '\u91D1\u66DC\u65E5');
  $putStringValue(ja, 'DAYLONGNAME_7', '\u571F\u66DC\u65E5');
  $putStringValue(ja, 'DAYSHORTNAME_0', '');
  $putStringValue(ja, 'DAYSHORTNAME_1', '\u65E5');
  $putStringValue(ja, 'DAYSHORTNAME_2', '\u6708');
  $putStringValue(ja, 'DAYSHORTNAME_3', '\u706B');
  $putStringValue(ja, 'DAYSHORTNAME_4', '\u6C34');
  $putStringValue(ja, 'DAYSHORTNAME_5', '\u6728');
  $putStringValue(ja, 'DAYSHORTNAME_6', '\u91D1');
  $putStringValue(ja, 'DAYSHORTNAME_7', '\u571F');
  $putStringValue(ja, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'yyyy-MM-dd HH:00');
  $putStringValue(ja, 'DAY_MONTH_YEAR_FORMAT', 'yyyy-MM-dd');
  $putStringValue(ja, 'MONTH_WITH_YEAR_FORMAT', 'yyyy\u5E74M\u6708');
  $putStringValue(ja, 'YEAR_ONLY_FORMAT', 'yyyy');
  $putStringValue(ja, 'MONTH_ONLY_FORMAT', 'MM');
  $putStringValue(ja, 'HOUR_ONLY', 'HH:00');
  $putStringValue(ja, 'HOUR_WITH_MINUTE', 'HH:mm');
  $putStringValue(ja, 'EC4001', '\u8B66\u544A\uFF1A \u4E88\u6E2C\u30AF\u30A8\u30EA\u306B\u306F\u3001\u6642\u9593\u5358\u4F4D\u304C\u5FC5\u8981\u3067\u3059\u3002');
  $putStringValue(ja, 'EC4002', '\u8B66\u544A\uFF1A \u8981\u6C42\u3055\u308C\u305F\u4E88\u6E2C\u306B\u306F\u65E5\u4ED8\u5358\u4F4D\u304C\u3042\u308A\u307E\u3059\u304C\u3001\u7D50\u5408\u3055\u308C\u308B\u65E5\u4ED8\u5217\u306F\u65E5\u4ED8\u3067\u3042\u308A\u65E5\u6642\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002');
  $putStringValue(ja, 'EC4003', '\u8B66\u544A\uFF1A \u4E88\u6E2C\u30AF\u30A8\u30EA\u306E\u7D50\u679C\u306B\u306F\u3001\u5229\u7528\u3067\u304D\u308B\u30C7\u30FC\u30BF\u304C\u3042\u308A\u307E\u305B\u3093\u3002');
  $putStringValue(ja, 'EC4004', '\u8B66\u544A\uFF1A \u5217\u306B\u5BFE\u3057\u3066\u4E88\u6E2C\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093\u3002');
  $putStringValue(ja, 'EC4005', '\u8B66\u544A\uFF1A \u30B0\u30EB\u30FC\u30D7\u5316\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002');
  $putStringValue(ja, 'EC4006', '\u8B66\u544A\uFF1A \u8981\u6C42\u3055\u308C\u305F\u4E88\u6E2C\u306E\u958B\u59CB\u304C\u3001\u5229\u7528\u3067\u304D\u308B\u30C7\u30FC\u30BF\u3088\u308A\u524D\u306B\u306A\u3063\u3066\u3044\u307E\u3059\u3002');
  $putStringValue(ja, 'EC4007', '\u8B66\u544A\uFF1A \u4E88\u6E2C\u306F\u671F\u9593\u8981\u7D20\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002');
  $putStringValue(ja, 'ANNOTATION_TITLE', '{1} \u306E\u6CE8\u91C8');
  $putStringValue(ja, 'ANNOTATIONS', '\u6CE8\u91C8');
  $putStringValue(ja, 'RECENTLY_ADDED', '\uFF08\u6700\u8FD1\u8FFD\u52A0\u3055\u308C\u307E\u3057\u305F\uFF09');
  $putStringValue(ja, 'VAL_OF_VAL', '{2} \u4EF6\u4E2D {1} \u4EF6\u306E\u6CE8\u91C8');
  $putStringValue(ja, 'PCT_OF_TOTAL', '\u5408\u8A08\u306E{1}');
  $putStringValue(ja, 'SLICER_ALL_VALUES', '\u3059\u3079\u3066\u306E\u5024\uFF08{1}\uFF09');
  $putStringValue(ja, 'SLICER_SELECTED', '\u9078\u629E\u6E08\u307F\uFF08{1}\uFF09');
  $putStringValue(ja, 'SLICER_SHOW_ALL', '\u3059\u3079\u3066\u8868\u793A');
  $putStringValue(ja, 'SLICER_SHOW_SELECTED', '\u9078\u629E\u9805\u76EE\u3092\u8868\u793A');
  $putStringValue(ja, 'SLICER_INFO_TEXT', '{1} - {2}/{3}');
  $putStringValue(ja, 'DATE_SEL_CLEAR', '\u30AF\u30EA\u30A2');
  $putStringValue(ja, 'DATE_SEL_PRESETS', '\u30D7\u30EA\u30BB\u30C3\u30C8');
  $putStringValue(ja, 'DATE_SEL_CALENDAR', '\u30AB\u30EC\u30F3\u30C0\u30FC');
  $putStringValue(ja, 'DATE_SEL_DAYS', '\u65E5\u9593');
  $putStringValue(ja, 'DATE_SEL_WEEKS', '\u9031');
  $putStringValue(ja, 'DATE_SEL_MONTHS', '\u304B\u6708\u9593');
  $putStringValue(ja, 'DATE_SEL_YEARS', '\u5E74\u9593');
  $putStringValue(ja, 'DATE_SEL_TODAY', '\u4ECA\u65E5');
  $putStringValue(ja, 'DATE_SEL_YESTERDAY', '\u6628\u65E5');
  $putStringValue(ja, 'DATE_SEL_LAST_7DAYS', '\u904E\u53BB7\u65E5');
  $putStringValue(ja, 'DATE_SEL_LAST_30DAYS', '\u904E\u53BB30\u65E5');
  $putStringValue(ja, 'DATE_SEL_LAST_60DAYS', '\u904E\u53BB60\u65E5');
  $putStringValue(ja, 'DATE_SEL_LAST_90DAYS', '\u904E\u53BB90\u65E5');
  $putStringValue(ja, 'DATE_SEL_THIS_WEEK', '\u4ECA\u9031');
  $putStringValue(ja, 'DATE_SEL_LAST_WEEK', '\u5148\u9031');
  $putStringValue(ja, 'DATE_SEL_LAST_2WEEKS', '\u904E\u53BB2\u9031\u9593');
  $putStringValue(ja, 'DATE_SEL_LAST_3WEEKS', '\u904E\u53BB3\u9031\u9593');
  $putStringValue(ja, 'DATE_SEL_LAST_4WEEKS', '\u904E\u53BB4\u9031\u9593');
  $putStringValue(ja, 'DATE_SEL_LAST_53WEEKS', '\u904E\u53BB53\u9031\u9593');
  $putStringValue(ja, 'DATE_SEL_THIS_MONTH', '\u4ECA\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_MONTH', '\u5148\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_2MONTHS', '\u904E\u53BB2\u304B\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_3MONTHS', '\u904E\u53BB3\u304B\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_6MONTHS', '\u904E\u53BB6\u304B\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_12MONTHS', '\u904E\u53BB12\u304B\u6708');
  $putStringValue(ja, 'DATE_SEL_LAST_13MONTHS', '\u904E\u53BB13\u304B\u6708');
  $putStringValue(ja, 'DATE_SEL_THIS_YEAR', '\u4ECA\u5E74');
  $putStringValue(ja, 'DATE_SEL_LAST_YEAR', '\u53BB\u5E74');
  $putStringValue(ja, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(ja, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(ja, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(ja, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(ja, 'ja-JP');
  $putStringValue(locales, 'ja', ja);
}

function loadSimplifiedChinese(){
  $putStringValue(zh, 'MORE_ITEMS', '\u66F4\u591A...');
  $putStringValue(zh, 'NOT_ALL_DATA_SHOWN', '\u5E76\u975E\u6240\u6709\u6570\u636E\u90FD\u5DF2\u663E\u793A\u3002');
  $putStringValue(zh, 'NO_DATA', '\u65E0\u6570\u636E');
  $putStringValue(zh, 'NO_DATA_EXISTS', '\u4E0D\u5B58\u5728\u6570\u636E');
  $putStringValue(zh, 'UNMAPPED_DATA', '\u672A\u6620\u5C04\u6570\u636E');
  $putStringValue(zh, 'TOTAL', '\u603B\u8BA1');
  $putStringValue(zh, 'GRAND_TOTAL', '\u603B\u548C');
  $putStringValue(zh, 'COUNT', '\u8BA1\u6570');
  $putStringValue(zh, 'MANY', '\u8BB8\u591A');
  $putStringValue(zh, 'GOAL', '\u76EE\u6807');
  $putStringValue(zh, 'TARGET', '\u76EE\u6807');
  $putStringValue(zh, 'OVERALL_CONVERSION', '\u6574\u4F53\u8F6C\u6362');
  $putStringValue(zh, 'DROPPED', '\u5DF2\u4E0B\u964D');
  $putStringValue(zh, 'SUMMARY', '\u6458\u8981');
  $putStringValue(zh, 'HIGH', '\u9AD8');
  $putStringValue(zh, 'LOW', '\u4F4E');
  $putStringValue(zh, 'OPEN', '\u6253\u5F00');
  $putStringValue(zh, 'CLOSE', '\u5173\u95ED');
  $putStringValue(zh, 'MEDIAN', '\u4E2D');
  $putStringValue(zh, 'Q1', '\u7B2C 1 \u5B63\u5EA6');
  $putStringValue(zh, 'Q3', '\u7B2C 3 \u5B63\u5EA6');
  $putStringValue(zh, 'QUARTERS', '\u7B2C 1 \u5B63\u5EA6|\u7B2C 2 \u5B63\u5EA6|\u7B2C 3 \u5B63\u5EA6|\u7B2C 4 \u5B63\u5EA6');
  $putStringValue(zh, 'NO_INTERACTIVITY', '\u4EA4\u4E92\u6027\u5DF2\u56E0\u9879\u76EE\u6570\u800C\u7981\u7528\u3002');
  $putStringValue(zh, 'LEGEND_MORE_INFO', '\u5982\u9700\u67E5\u770B\u66F4\u591A\u9879\u76EE\u7684\u56FE\u4F8B\uFF0C\u8BF7\u60AC\u505C\u5728\u56FE\u8868\u4E2D\u7684\u9879\u76EE\u4E0A');
  $putStringValue(zh, 'MIN', '\u6700\u5C0F');
  $putStringValue(zh, 'MAX', '\u6700\u5927');
  $putStringValue(zh, 'AVG', '\u5E73\u5747');
  $putStringValue(zh, 'OTHER', '\u5176\u4ED6');
  $putStringValue(zh, 'CATEGORIES_IN_OTHER', '\u201C\u5176\u5B83\u201D\u7C7B\u522B');
  $putStringValue(zh, 'LOWER_RANGE', '\u8303\u56F4\u4E0B\u9650');
  $putStringValue(zh, 'UPPER_RANGE', '\u8303\u56F4\u4E0A\u9650');
  $putStringValue(zh, 'TODAY', '\u4ECA\u5929');
  $putStringValue(zh, 'AM', '\u4E0A\u5348');
  $putStringValue(zh, 'PM', '\u4E0B\u5348');
  $putStringValue(zh, 'GROUP_TOTAL', '\u7EC4\u603B\u8BA1');
  $putStringValue(zh, 'SCALE_MARKER', '\u6807\u5EA6');
  $putStringValue(zh, 'WARN_NOT_ALL_DATA', '\u8B66\u544A\uFF1A\u5E76\u975E\u6240\u6709\u6570\u636E\u90FD\u5DF2\u663E\u793A\u3002');
  $putStringValue(zh, 'WARN_NEGATIVE_NUMBERS', '\u8B66\u544A\uFF1A\u6570\u636E\u5305\u542B\u8D1F\u6570\u3002');
  $putStringValue(zh, 'WARN_INVALID_FOR_LOG_SCALE', '\u8B66\u544A\uFF1A\u5BF9\u6570\u6807\u5C3A\u4E2D\u5B58\u5728\u8D1F\u503C\u6216\u96F6\u503C\u3002');
  $putStringValue(zh, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', '\u8B66\u544A\uFF1A\u5E76\u975E\u6240\u6709\u6570\u636E\u90FD\u5DF2\u5728\u5730\u56FE\u4E2D\u8868\u793A\u3002');
  $putStringValue(zh, 'WARN_HIGHTLIGHTING_DISABLED', '\u7531\u4E8E DataSet \u5927\u5C0F\u7684\u539F\u56E0\uFF0C\u7A81\u51FA\u663E\u793A\u529F\u80FD\u5DF2\u7981\u7528');
  $putStringValue(zh, 'ACTUAL', '\u5B9E\u9645');
  $putStringValue(zh, 'PROJECTED', '\u9884\u8BA1');
  $putStringValue(zh, 'DIFFERENCE', '\u4E0D\u540C');
  $putStringValue(zh, 'VARIANCE', '\u5DEE\u5F02');
  $putStringValue(zh, 'MINIMUM', '\u6700\u5C0F');
  $putStringValue(zh, 'MAXIMUM', '\u6700\u5927');
  $putStringValue(zh, 'AVERAGE', '\u5E73\u5747');
  $putStringValue(zh, 'STANDARD_DEVIATION', '\u6807\u51C6\u504F\u5DEE');
  $putStringValue(zh, 'STANDARD_DEVIATIONS', '\u6807\u51C6\u504F\u5DEE');
  $putStringValue(zh, 'PERCENTILE', '\u767E\u5206\u4F4D\u6570');
  $putStringValue(zh, 'PCT_OF', '\u7684 %');
  $putStringValue(zh, 'FIRST_VALUE', '\u7B2C\u4E00\u4E2A\u6570\u503C');
  $putStringValue(zh, 'LAST_VALUE', '\u6700\u540E\u4E00\u4E2A\u6570\u503C');
  $putStringValue(zh, 'NEXTTOLAST_VALUE', '\u5012\u6570\u7B2C\u4E8C\u4E2A\u6570\u503C');
  $putStringValue(zh, 'bubble', '\u6C14\u6CE1');
  $putStringValue(zh, 'bullet', 'H \u9879\u76EE\u7B26\u53F7');
  $putStringValue(zh, 'calendar', '\u65E5\u5386');
  $putStringValue(zh, 'category scatter', '\u5206\u7C7B\u6563\u70B9');
  $putStringValue(zh, 'gauge advanced', '\u9AD8\u7EA7\u4EEA\u8868');
  $putStringValue(zh, 'gauge basic', '\u57FA\u672C\u4EEA\u8868');
  $putStringValue(zh, 'gauge', '\u4EEA\u8868');
  $putStringValue(zh, 'curved symbol', '\u5F2F\u66F2\u7B26\u53F7');
  $putStringValue(zh, 'curved line', '\u66F2\u7EBF');
  $putStringValue(zh, 'donut', '\u5706\u73AF');
  $putStringValue(zh, 'face', '\u9762');
  $putStringValue(zh, 'filled', '\u586B\u5145');
  $putStringValue(zh, 'funnel', '\u6F0F\u6597\u56FE');
  $putStringValue(zh, 'funnel bars', '\u6F0F\u6597\u6761');
  $putStringValue(zh, 'folded funnel', '\u6298\u53E0\u6F0F\u6597');
  $putStringValue(zh, 'gantt', '\u7518\u7279\u56FE');
  $putStringValue(zh, 'gantt %', '\u7518\u7279\u56FE %');
  $putStringValue(zh, 'gauge', '\u4EEA\u8868');
  $putStringValue(zh, 'heatmap', '\u70ED\u5EA6\u5730\u56FE');
  $putStringValue(zh, 'high low', '\u9AD8\u4F4E');
  $putStringValue(zh, 'h 100%', 'H 100%');
  $putStringValue(zh, 'h bar', 'H \u6761\u5F62\u56FE');
  $putStringValue(zh, 'h boxplot', 'H \u7BB1\u7EBF\u56FE');
  $putStringValue(zh, 'h grouped stacked', 'H \u5206\u7EC4\u5806\u53E0');
  $putStringValue(zh, 'h histogram', 'H \u76F4\u65B9\u56FE');
  $putStringValue(zh, 'h grouped', 'H \u5206\u7EC4');
  $putStringValue(zh, 'h nested', 'H \u5D4C\u5957');
  $putStringValue(zh, 'h overlay', 'H \u53E0\u52A0');
  $putStringValue(zh, 'h % bar', 'H % \u6761\u5F62\u56FE');
  $putStringValue(zh, 'h stacked', 'H \u5806\u53E0');
  $putStringValue(zh, 'h symbol', 'H \u7B26\u53F7');
  $putStringValue(zh, 'h symbol overlay', 'H \u7B26\u53F7\u53E0\u52A0');
  $putStringValue(zh, 'h waterfall', 'H \u7011\u5E03');
  $putStringValue(zh, 'line bar', '\u7EBF\u6761');
  $putStringValue(zh, 'line grouped stacked', '\u76F4\u7EBF\u5206\u7EC4\u5806\u53E0');
  $putStringValue(zh, 'line stacked', '\u76F4\u7EBF\u5806\u53E0');
  $putStringValue(zh, 'pareto', '\u5E15\u7D2F\u6258');
  $putStringValue(zh, 'pie', '\u997C\u56FE');
  $putStringValue(zh, 'bar line', '\u6761\u7EBF');
  $putStringValue(zh, 'variance bar line', '\u5DEE\u5F02\u6761\u7EBF');
  $putStringValue(zh, 'line bar', '\u7EBF\u6761');
  $putStringValue(zh, 'variance line bar', '\u5DEE\u5F02\u7EBF\u6761');
  $putStringValue(zh, 'line', '\u76F4\u7EBF');
  $putStringValue(zh, 'variance line', '\u5DEE\u5F02\u7EBF');
  $putStringValue(zh, 'grouped', '\u5206\u7EC4');
  $putStringValue(zh, 'progress', '\u8FDB\u5EA6');
  $putStringValue(zh, 'radar', '\u96F7\u8FBE');
  $putStringValue(zh, 'running total line', '\u8FD0\u884C\u603B\u7EBF');
  $putStringValue(zh, 'value', '\u6570\u503C');
  $putStringValue(zh, 'area', '\u9762\u79EF\u56FE');
  $putStringValue(zh, 'step', '\u9636\u68AF');
  $putStringValue(zh, 'candlestick', '\u8721\u53F0');
  $putStringValue(zh, 'symbol bar', '\u7B26\u53F7\u680F');
  $putStringValue(zh, 'symbol stacked', '\u7B26\u53F7\u5806\u53E0');
  $putStringValue(zh, 'symbol', '\u7B26\u53F7');
  $putStringValue(zh, 'text', '\u6587\u672C');
  $putStringValue(zh, 'treemap', '\u77E9\u5F62\u6811\u56FE');
  $putStringValue(zh, 'line', '\u76F4\u7EBF');
  $putStringValue(zh, 'multi-line', '\u591A\u7EBF');
  $putStringValue(zh, '100%', '100%');
  $putStringValue(zh, 'bar', '\u6761\u5F62\u56FE');
  $putStringValue(zh, 'boxplot', '\u7BB1\u7EBF\u56FE');
  $putStringValue(zh, 'bullet', '\u5B50\u5F39');
  $putStringValue(zh, 'grouped stacked', '\u5206\u7EC4\u5806\u53E0');
  $putStringValue(zh, 'histogram', '\u76F4\u65B9\u56FE');
  $putStringValue(zh, 'grouped', '\u5206\u7EC4');
  $putStringValue(zh, 'nested', '\u5D4C\u5957');
  $putStringValue(zh, 'overlay', '\u53E0\u52A0');
  $putStringValue(zh, '% bar', '% \u6761\u5F62\u56FE');
  $putStringValue(zh, 'vert_rtbar', '\u8FD0\u884C\u603B\u6761');
  $putStringValue(zh, 'running total grouped', '\u8FD0\u884C\u603B\u5206\u7EC4');
  $putStringValue(zh, 'running total stacked', '\u8FD0\u884C\u603B\u5806\u53E0');
  $putStringValue(zh, 'stacked', '\u5806\u53E0');
  $putStringValue(zh, 'symbol', '\u7B26\u53F7');
  $putStringValue(zh, 'symbol overlay', '\u7B26\u53F7\u53E0\u52A0');
  $putStringValue(zh, 'waterfall', '\u7011\u5E03');
  $putStringValue(zh, 'word cloud', '\u4E16\u754C\u4E91');
  $putStringValue(zh, 'scatter', '\u6563\u70B9\u56FE');
  $putStringValue(zh, 'curved_line_bar', '\u66F2\u7EBF\u6761\u5F62\u56FE');
  $putStringValue(zh, 'curved_line_stackedbar', '\u66F2\u7EBF\u5806\u53E0');
  $putStringValue(zh, 'horiz_100pct_area', 'H 100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_area_overlay', 'H \u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'horiz_bar_line', 'H \u6761\u5F62\u56FE\u7EBF');
  $putStringValue(zh, 'horiz_curved_100pct_area', 'H \u5F2F\u66F2 100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_curved_area_overlay', 'H \u5F2F\u66F2\u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'horiz_curved_stacked_area', 'H \u5F2F\u66F2\u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_curved_symbolline', 'H \u5F2F\u66F2\u7B26\u53F7');
  $putStringValue(zh, 'horiz_curvedline', 'H \u66F2\u7EBF');
  $putStringValue(zh, 'horiz_line_bar', 'H \u7EBF\u6761');
  $putStringValue(zh, 'horiz_line_clusterbar', 'H \u76F4\u7EBF\u5206\u7EC4\u5806\u53E0');
  $putStringValue(zh, 'horiz_line_multi_dotplot', 'H \u76F4\u7EBF\u5206\u7EC4\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'horiz_line_stacked_dotplot', 'H \u76F4\u7EBF\u5806\u53E0\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'horiz_line_stackedbar', 'H \u76F4\u7EBF\u5806\u53E0');
  $putStringValue(zh, 'horiz_marimekko', 'H \u739B\u4E3D\u9EA6\u9AD8');
  $putStringValue(zh, 'horiz_multi_dotplot', 'H \u5206\u7EC4\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'horiz_nested_linebar', 'H \u76F4\u7EBF\u5D4C\u5957\u6761');
  $putStringValue(zh, 'horiz_rtbar', 'H \u8FD0\u884C\u603B\u8BA1');
  $putStringValue(zh, 'horiz_rtmultibar', 'H \u8FD0\u884C\u603B\u5206\u7EC4');
  $putStringValue(zh, 'horiz_rtstackedbar', 'H \u8FD0\u884C\u603B\u8BA1');
  $putStringValue(zh, 'horiz_stacked_dotplot', 'H \u5806\u53E0\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'horiz_stackedtrend', 'H \u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_step_100pct_area', 'H \u9636\u68AF 100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_step_area_overlay', 'H \u9636\u68AF\u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'horiz_step_stacked_area', 'H \u9636\u68AF\u9762\u79EF\u56FE');
  $putStringValue(zh, 'horiz_stepline', 'H \u9636\u68AF');
  $putStringValue(zh, 'horiz_symbol_bar', 'H \u7B26\u53F7\u680F');
  $putStringValue(zh, 'horiz_symbol_stackedbar', 'H \u7B26\u53F7\u5806\u53E0');
  $putStringValue(zh, 'horiz_symbolline', 'H \u7B26\u53F7\u7EBF');
  $putStringValue(zh, 'horiz_trendline', 'H \u76F4\u7EBF');
  $putStringValue(zh, 'vert_100pct_area', '100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'vert_area_overlay', '\u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'vert_bar_line', '\u6761\u7EBF');
  $putStringValue(zh, 'vert_curved_100pct_area', '\u5F2F\u66F2 100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'vert_curved_area_overlay', '\u5F2F\u66F2\u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'vert_curved_stacked_area', '\u5F2F\u66F2\u9762\u79EF\u56FE');
  $putStringValue(zh, 'vert_line_multi_dotplot', '\u76F4\u7EBF\u5206\u7EC4\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'vert_line_stacked_dotplot', '\u76F4\u7EBF\u5806\u53E0\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'vert_marimekko', '\u739B\u4E3D\u9EA6\u9AD8');
  $putStringValue(zh, 'vert_multi_dotplot', '\u5206\u7EC4\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'vert_nested_linebar', '\u76F4\u7EBF\u5D4C\u5957\u6761\u5F62\u56FE');
  $putStringValue(zh, 'vert_stacked_dotplot', '\u5806\u53E0\u68D2\u7CD6\u5F62');
  $putStringValue(zh, 'vert_step_100pct_area', '\u9636\u68AF 100% \u9762\u79EF\u56FE');
  $putStringValue(zh, 'vert_step_area_overlay', '\u9636\u68AF\u9762\u79EF\u56FE\u53E0\u52A0');
  $putStringValue(zh, 'vert_step_stacked_area', '\u9636\u68AF\u9762\u79EF\u56FE');
  $putStringValue(zh, 'nautilus', '\u9E66\u9E49\u87BA');
  $putStringValue(zh, 'nautilus_donut', '\u9E66\u9E49\u87BA\u751C\u751C\u5708');
  $putStringValue(zh, 'nightingale_rose', '\u591C\u83BA\u73AB\u7470');
  $putStringValue(zh, 'xy_line', 'XY \u7EBF');
  $putStringValue(zh, 'ds_pred_modeling', '\u9884\u6D4B');
  $putStringValue(zh, 'ds_forecasting', '\u9884\u6D4B');
  $putStringValue(zh, 'ds_outliers', '\u5F02\u5E38\u503C');
  $putStringValue(zh, 'stream', '\u6D41');
  $putStringValue(zh, 'stream_funnel', '\u6D41\u5F0F\u6F0F\u6597\u56FE');
  $putStringValue(zh, 'flex_table', 'Flex table');
  $putStringValue(zh, 'QUANTILES_3_2', '\u4E0A\u4E09\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_3_1', '\u4E0B\u4E09\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_4_3', '\u4E0A\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_4_2', '\u4E2D');
  $putStringValue(zh, 'QUANTILES_4_1', '\u4E0B\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_5_4', '\u7B2C\u56DB\u4E2A\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_5_3', '\u7B2C\u4E09\u4E2A\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_5_2', '\u7B2C\u4E8C\u4E2A\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_5_1', '\u7B2C\u4E00\u4E2A\u56DB\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_6_5', '\u7B2C\u4E94\u4E2A\u516D\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_6_4', '\u7B2C\u56DB\u4E2A\u516D\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_6_3', '\u7B2C\u4E09\u4E2A\u516D\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_6_2', '\u7B2C\u4E8C\u4E2A\u516D\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_6_1', '\u7B2C\u4E00\u4E2A\u516D\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_6', '\u7B2C\u516D\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_5', '\u7B2C\u4E94\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_4', '\u7B2C\u56DB\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_3', '\u7B2C\u4E09\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_2', '\u7B2C\u4E8C\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_7_1', '\u7B2C\u4E00\u4E2A\u4E03\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_7', '\u7B2C\u4E03\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_6', '\u7B2C\u516D\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_5', '\u7B2C\u4E94\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_4', '\u7B2C\u56DB\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_3', '\u7B2C\u4E09\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_2', '\u7B2C\u4E8C\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_8_1', '\u7B2C\u4E00\u4E2A\u516B\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_8', '8/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_7', '7/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_6', '6/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_5', '5/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_4', '4/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_3', '3/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_2', '2/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_9_1', '1/9 \u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_9', '\u7B2C 9 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_8', '\u7B2C 8 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_7', '\u7B2C 7 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_6', '\u7B2C 6 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_5', '\u7B2C 5 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_4', '\u7B2C 4 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_3', '\u7B2C 3 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_2', '\u7B2C 2 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'QUANTILES_10_1', '\u7B2C 1 \u4E2A\u5341\u5206\u4F4D\u6570');
  $putStringValue(zh, 'THOUSANDSSEP', ',');
  $putStringValue(zh, 'DECIMALCHAR', '.');
  $putStringValue(zh, 'CURRENCYSYMBOL', '\xA5');
  $putStringValue(zh, 'MONTHLONGNAME_0', '\u4E00\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_1', '\u4E8C\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_2', '\u4E09\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_3', '\u56DB\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_4', '\u4E94\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_5', '\u516D\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_6', '\u4E03\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_7', '\u516B\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_8', '\u4E5D\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_9', '\u5341\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_10', '\u5341\u4E00\u6708');
  $putStringValue(zh, 'MONTHLONGNAME_11', '\u5341\u4E8C\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_0', '\u4E00\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_1', '\u4E8C\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_2', '\u4E09\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_3', '\u56DB\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_4', '\u4E94\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_5', '\u516D\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_6', '\u4E03\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_7', '\u516B\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_8', '\u4E5D\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_9', '\u5341\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_10', '\u5341\u4E00\u6708');
  $putStringValue(zh, 'MONTHSHORTNAME_11', '\u5341\u4E8C\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_0', '\u5E741\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_1', '\u5E742\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_2', '\u5E743\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_3', '\u5E744\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_4', '\u5E745\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_5', '\u5E746\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_6', '\u5E747\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_7', '\u5E748\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_8', '\u5E749\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_9', '\u5E7410\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_10', '\u5E7411\u6708');
  $putStringValue(zh, 'MONTHSHORTNAMESTDCAL_11', '\u5E7412\u6708');
  $putStringValue(zh, 'DAYLONGNAME_0', '');
  $putStringValue(zh, 'DAYLONGNAME_1', '\u661F\u671F\u65E5');
  $putStringValue(zh, 'DAYLONGNAME_2', '\u661F\u671F\u4E00');
  $putStringValue(zh, 'DAYLONGNAME_3', '\u661F\u671F\u4E8C');
  $putStringValue(zh, 'DAYLONGNAME_4', '\u661F\u671F\u4E09');
  $putStringValue(zh, 'DAYLONGNAME_5', '\u661F\u671F\u56DB');
  $putStringValue(zh, 'DAYLONGNAME_6', '\u661F\u671F\u4E94');
  $putStringValue(zh, 'DAYLONGNAME_7', '\u661F\u671F\u516D');
  $putStringValue(zh, 'DAYSHORTNAME_0', '');
  $putStringValue(zh, 'DAYSHORTNAME_1', '\u661F\u671F\u65E5');
  $putStringValue(zh, 'DAYSHORTNAME_2', '\u661F\u671F\u4E00');
  $putStringValue(zh, 'DAYSHORTNAME_3', '\u661F\u671F\u4E8C');
  $putStringValue(zh, 'DAYSHORTNAME_4', '\u661F\u671F\u4E09');
  $putStringValue(zh, 'DAYSHORTNAME_5', '\u661F\u671F\u56DB');
  $putStringValue(zh, 'DAYSHORTNAME_6', '\u661F\u671F\u4E94');
  $putStringValue(zh, 'DAYSHORTNAME_7', '\u661F\u671F\u516D');
  $putStringValue(zh, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'yyyy\u5E74 MMM dd\u65E5 ha');
  $putStringValue(zh, 'DAY_MONTH_YEAR_FORMAT', 'yyyy\u5E74 MMM dd\u65E5');
  $putStringValue(zh, 'MONTH_WITH_YEAR_FORMAT', 'yyyy\u5E74 MMM');
  $putStringValue(zh, 'YEAR_ONLY_FORMAT', 'yyyy\u5E74');
  $putStringValue(zh, 'MONTH_ONLY_FORMAT', 'MMM');
  $putStringValue(zh, 'HOUR_ONLY', 'ha');
  $putStringValue(zh, 'HOUR_WITH_MINUTE', 'h:mma');
  $putStringValue(zh, 'EC4001', '\u8B66\u544A\uFF1A\u6295\u5F71\u67E5\u8BE2\u5FC5\u987B\u5177\u5907\u65F6\u95F4\u7C92\u5EA6\u3002');
  $putStringValue(zh, 'EC4002', '\u8B66\u544A\uFF1A\u6240\u8BF7\u6C42\u7684\u6295\u5F71\u5177\u5907\u7C92\u5EA6\u65E5\u671F\uFF0C\u4F46\u662F\u6240\u52A0\u5165\u7684\u65E5\u671F\u5217\u4E3A\u65E5\u671F\u800C\u975E\u65E5\u671F\u65F6\u95F4\u3002');
  $putStringValue(zh, 'EC4003', '\u8B66\u544A\uFF1A\u6295\u5F71\u67E5\u8BE2\u5BFC\u81F4\u65E0\u53EF\u7528\u6570\u636E\u3002');
  $putStringValue(zh, 'EC4004', '\u8B66\u544A\uFF1A\u6295\u5F71\u65E0\u6CD5\u5728\u5217\u4E0A\u6295\u5F71\u3002');
  $putStringValue(zh, 'EC4005', '\u8B66\u544A\uFF1A\u4E0D\u652F\u6301\u5206\u7EC4\u65B9\u5F0F\u3002');
  $putStringValue(zh, 'EC4006', '\u8B66\u544A\uFF1A\u6240\u8BF7\u6C42\u7684\u6295\u5F71\u5728\u53EF\u7528\u6570\u636E\u524D\u5F00\u59CB\u3002');
  $putStringValue(zh, 'EC4007', '\u8B66\u544A\uFF1A\u6295\u5F71\u65E0\u6CD5\u83B7\u5F97\u65F6\u671F\u5143\u7D20\u3002');
  $putStringValue(zh, 'ANNOTATION_TITLE', '\u5BF9 {1} \u8FDB\u884C\u7684\u6807\u6CE8');
  $putStringValue(zh, 'ANNOTATIONS', '\u6807\u6CE8');
  $putStringValue(zh, 'RECENTLY_ADDED', '(\u6700\u8FD1\u6DFB\u52A0)');
  $putStringValue(zh, 'VAL_OF_VAL', '{2} \u4E2D\u7684 {1}');
  $putStringValue(zh, 'PCT_OF_TOTAL', '\u603B\u6570\u4E2D\u7684 {1}');
  $putStringValue(zh, 'SLICER_ALL_VALUES', '\u6240\u6709\u503C ({1})');
  $putStringValue(zh, 'SLICER_SELECTED', '\u5DF2\u9009\u62E9 ({1})');
  $putStringValue(zh, 'SLICER_SHOW_ALL', '\u663E\u793A\u5168\u90E8');
  $putStringValue(zh, 'SLICER_SHOW_SELECTED', '\u663E\u793A\u5DF2\u9009\u5185\u5BB9');
  $putStringValue(zh, 'SLICER_INFO_TEXT', '{3} \u4E2D\u7684 {1} - {2}');
  $putStringValue(zh, 'DATE_SEL_CLEAR', '\u6E05\u9664');
  $putStringValue(zh, 'DATE_SEL_PRESETS', '\u9884\u8BBE');
  $putStringValue(zh, 'DATE_SEL_CALENDAR', '\u65E5\u5386');
  $putStringValue(zh, 'DATE_SEL_DAYS', '\u5929');
  $putStringValue(zh, 'DATE_SEL_WEEKS', '\u5468');
  $putStringValue(zh, 'DATE_SEL_MONTHS', '\u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_YEARS', '\u5E74');
  $putStringValue(zh, 'DATE_SEL_TODAY', '\u4ECA\u5929');
  $putStringValue(zh, 'DATE_SEL_YESTERDAY', '\u6628\u5929');
  $putStringValue(zh, 'DATE_SEL_LAST_7DAYS', '\u8FC7\u53BB 7 \u5929');
  $putStringValue(zh, 'DATE_SEL_LAST_30DAYS', '\u8FC7\u53BB 30 \u5929');
  $putStringValue(zh, 'DATE_SEL_LAST_60DAYS', '\u8FC7\u53BB 60 \u5929');
  $putStringValue(zh, 'DATE_SEL_LAST_90DAYS', '\u8FC7\u53BB 90 \u5929');
  $putStringValue(zh, 'DATE_SEL_THIS_WEEK', '\u672C\u5468');
  $putStringValue(zh, 'DATE_SEL_LAST_WEEK', '\u4E0A\u5468');
  $putStringValue(zh, 'DATE_SEL_LAST_2WEEKS', '\u8FC7\u53BB 2 \u5468');
  $putStringValue(zh, 'DATE_SEL_LAST_3WEEKS', '\u8FC7\u53BB 3 \u5468');
  $putStringValue(zh, 'DATE_SEL_LAST_4WEEKS', '\u8FC7\u53BB 4 \u5468');
  $putStringValue(zh, 'DATE_SEL_LAST_53WEEKS', '\u8FC7\u53BB 53 \u5468');
  $putStringValue(zh, 'DATE_SEL_THIS_MONTH', '\u672C\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_MONTH', '\u4E0A\u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_2MONTHS', '\u8FC7\u53BB 2 \u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_3MONTHS', '\u8FC7\u53BB 3 \u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_6MONTHS', '\u8FC7\u53BB 6 \u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_12MONTHS', '\u8FC7\u53BB 12 \u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_LAST_13MONTHS', '\u8FC7\u53BB 13 \u4E2A\u6708');
  $putStringValue(zh, 'DATE_SEL_THIS_YEAR', '\u4ECA\u5E74');
  $putStringValue(zh, 'DATE_SEL_LAST_YEAR', '\u53BB\u5E74');
  $putStringValue(zh, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(zh, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(zh, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(zh, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(zh, 'zh-CN');
  $putStringValue(locales, 'zh', zh);
}

function loadSpanish(){
  $putStringValue(es, 'MORE_ITEMS', 'm\xE1s ...');
  $putStringValue(es, 'NOT_ALL_DATA_SHOWN', 'No se muestran todos los datos.');
  $putStringValue(es, 'NO_DATA', 'No hay datos');
  $putStringValue(es, 'NO_DATA_EXISTS', 'No hay datos en el intervalo filtrado');
  $putStringValue(es, 'UNMAPPED_DATA', 'Datos sin asignar');
  $putStringValue(es, 'TOTAL', 'Total');
  $putStringValue(es, 'GRAND_TOTAL', 'TOTAL GENERAL');
  $putStringValue(es, 'COUNT', 'Conteo');
  $putStringValue(es, 'MANY', 'Muchos');
  $putStringValue(es, 'GOAL', 'Objetivo');
  $putStringValue(es, 'TARGET', 'Destino');
  $putStringValue(es, 'OVERALL_CONVERSION', 'Conversi\xF3n general');
  $putStringValue(es, 'DROPPED', 'Baja');
  $putStringValue(es, 'SUMMARY', 'Resumen');
  $putStringValue(es, 'HIGH', 'Alto');
  $putStringValue(es, 'LOW', 'Bajo');
  $putStringValue(es, 'OPEN', 'Abrir');
  $putStringValue(es, 'CLOSE', 'Cerrar');
  $putStringValue(es, 'MEDIAN', 'Mediano');
  $putStringValue(es, 'Q1', 'Q1');
  $putStringValue(es, 'Q3', 'Q3');
  $putStringValue(es, 'QUARTERS', 'Q1|Q2|Q3|Q4');
  $putStringValue(es, 'NO_INTERACTIVITY', 'Se ha desactivado la interactividad debido al n\xFAmero de \xEDtemes.');
  $putStringValue(es, 'LEGEND_MORE_INFO', 'Si quieres ver leyendas para m\xE1s \xEDtemes, pasa el cursor por los \xEDtemes en el cuadro');
  $putStringValue(es, 'MIN', 'M\xEDn.');
  $putStringValue(es, 'MAX', 'M\xE1x.');
  $putStringValue(es, 'AVG', 'Prom.');
  $putStringValue(es, 'OTHER', 'Otro');
  $putStringValue(es, 'CATEGORIES_IN_OTHER', 'Categor\xEDas en orden');
  $putStringValue(es, 'LOWER_RANGE', 'Intervalo m\xE1s bajo');
  $putStringValue(es, 'UPPER_RANGE', 'Intervalo m\xE1s alto');
  $putStringValue(es, 'TODAY', 'Hoy');
  $putStringValue(es, 'AM', 'a. m.');
  $putStringValue(es, 'PM', 'p. m.');
  $putStringValue(es, 'GROUP_TOTAL', 'Total del grupo');
  $putStringValue(es, 'SCALE_MARKER', 'Marcador de escala');
  $putStringValue(es, 'WARN_NOT_ALL_DATA', 'Aviso: No se muestran todos los datos.');
  $putStringValue(es, 'WARN_NEGATIVE_NUMBERS', 'Aviso: Los datos contienen n\xFAmeros negativos.');
  $putStringValue(es, 'WARN_INVALID_FOR_LOG_SCALE', 'Aviso: Existen valores negativos o de cero en escala de registro.');
  $putStringValue(es, 'WARN_NOT_ALL_DATA_REPRESENTED_MAP', 'Aviso: No todos los datos se representan en el mapa.');
  $putStringValue(es, 'WARN_HIGHTLIGHTING_DISABLED', 'Resaltado limitado debido al tama\xF1o del DataSet');
  $putStringValue(es, 'ACTUAL', 'Real');
  $putStringValue(es, 'PROJECTED', 'Proyectado');
  $putStringValue(es, 'DIFFERENCE', 'Diferencia');
  $putStringValue(es, 'VARIANCE', 'Varianza');
  $putStringValue(es, 'MINIMUM', 'M\xEDnimo');
  $putStringValue(es, 'MAXIMUM', 'M\xE1ximo');
  $putStringValue(es, 'AVERAGE', 'Promedio');
  $putStringValue(es, 'STANDARD_DEVIATION', 'Desviaci\xF3n est\xE1ndar');
  $putStringValue(es, 'STANDARD_DEVIATIONS', 'Desviaciones est\xE1ndar');
  $putStringValue(es, 'PERCENTILE', 'En porcentaje');
  $putStringValue(es, 'PCT_OF', '% de');
  $putStringValue(es, 'FIRST_VALUE', 'Primer valor');
  $putStringValue(es, 'LAST_VALUE', '\xDAltimo valor');
  $putStringValue(es, 'NEXTTOLAST_VALUE', 'Siguiente a \xFAltimo valor');
  $putStringValue(es, 'bubble', 'Burbuja');
  $putStringValue(es, 'bullet', 'Vi\xF1eta h.');
  $putStringValue(es, 'calendar', 'Calendario');
  $putStringValue(es, 'category scatter', 'Dispersi\xF3n de categor\xEDa');
  $putStringValue(es, 'gauge advanced', 'Medidor avanzado');
  $putStringValue(es, 'gauge basic', 'Medidor b\xE1sico');
  $putStringValue(es, 'gauge', 'Medidor');
  $putStringValue(es, 'curved symbol', 'S\xEDmbolo con curvas');
  $putStringValue(es, 'curved line', 'L\xEDnea con curvas');
  $putStringValue(es, 'donut', 'Anillo');
  $putStringValue(es, 'face', 'Cara');
  $putStringValue(es, 'filled', 'Rellenado');
  $putStringValue(es, 'funnel', 'Embudo');
  $putStringValue(es, 'funnel bars', 'Barras de embudo');
  $putStringValue(es, 'folded funnel', 'Embudo doblado');
  $putStringValue(es, 'gantt', 'Gantt');
  $putStringValue(es, 'gantt %', 'Gantt %');
  $putStringValue(es, 'gauge', 'Medidor');
  $putStringValue(es, 'heatmap', 'Mapa t\xE9rmico');
  $putStringValue(es, 'high low', 'Alto y bajo');
  $putStringValue(es, 'h 100%', '100 % h.');
  $putStringValue(es, 'h bar', 'Barra h.');
  $putStringValue(es, 'h boxplot', 'Diagrama de caja h.');
  $putStringValue(es, 'h grouped stacked', 'Apilado agrupado h.');
  $putStringValue(es, 'h histogram', 'Histograma h.');
  $putStringValue(es, 'h grouped', 'Agrupado h.');
  $putStringValue(es, 'h nested', 'Anidado h.');
  $putStringValue(es, 'h overlay', 'Superpuesto h.');
  $putStringValue(es, 'h % bar', 'Barra h. %');
  $putStringValue(es, 'h stacked', 'Apilado h.');
  $putStringValue(es, 'h symbol', 'S\xEDmbolo h.');
  $putStringValue(es, 'h symbol overlay', 'Superposici\xF3n de s\xEDmbolo h.');
  $putStringValue(es, 'h waterfall', 'Cascada h.');
  $putStringValue(es, 'line bar', 'Barra de l\xEDnea');
  $putStringValue(es, 'line grouped stacked', 'L\xEDnea agrupada apilada');
  $putStringValue(es, 'line stacked', 'L\xEDnea apilada');
  $putStringValue(es, 'pareto', 'Pareto');
  $putStringValue(es, 'pie', 'C\xEDrculo');
  $putStringValue(es, 'bar line', 'L\xEDnea de barra');
  $putStringValue(es, 'variance bar line', 'Varianza de la l\xEDnea de barra');
  $putStringValue(es, 'line bar', 'Barra de l\xEDnea');
  $putStringValue(es, 'variance line bar', 'Varianza de la barra de l\xEDnea');
  $putStringValue(es, 'line', 'L\xEDnea');
  $putStringValue(es, 'variance line', 'L\xEDnea de varianza');
  $putStringValue(es, 'grouped', 'Agrupado');
  $putStringValue(es, 'progress', 'Progreso');
  $putStringValue(es, 'radar', 'Radar');
  $putStringValue(es, 'running total line', 'L\xEDnea total de ejecuci\xF3n');
  $putStringValue(es, 'value', 'Valor');
  $putStringValue(es, 'area', '\xC1rea');
  $putStringValue(es, 'step', 'Etapa');
  $putStringValue(es, 'candlestick', 'Vela japonesa');
  $putStringValue(es, 'symbol bar', 'Barra de s\xEDmbolo');
  $putStringValue(es, 'symbol stacked', 'S\xEDmbolo apilado');
  $putStringValue(es, 'symbol', 's\xEDmbolo');
  $putStringValue(es, 'text', 'Texto');
  $putStringValue(es, 'treemap', 'Gr\xE1fico de rect\xE1ngulos');
  $putStringValue(es, 'line', 'L\xEDnea');
  $putStringValue(es, 'multi-line', 'Varias l\xEDneas');
  $putStringValue(es, '100%', '100 %');
  $putStringValue(es, 'bar', 'Barra');
  $putStringValue(es, 'boxplot', 'Diagrama de caja');
  $putStringValue(es, 'bullet', 'Vi\xF1eta');
  $putStringValue(es, 'grouped stacked', 'Apilado agrupado');
  $putStringValue(es, 'histogram', 'Histograma');
  $putStringValue(es, 'grouped', 'Agrupado');
  $putStringValue(es, 'nested', 'Anidado');
  $putStringValue(es, 'overlay', 'Superpuesto');
  $putStringValue(es, '% bar', '% de Barra');
  $putStringValue(es, 'vert_rtbar', 'Barra total de ejecuci\xF3n');
  $putStringValue(es, 'running total grouped', 'Total en ejecuci\xF3n agrupado');
  $putStringValue(es, 'running total stacked', 'Total en ejecuci\xF3n apilado');
  $putStringValue(es, 'stacked', 'Apilado');
  $putStringValue(es, 'symbol', 'S\xEDmbolo');
  $putStringValue(es, 'symbol overlay', 'Superposici\xF3n de s\xEDmbolo');
  $putStringValue(es, 'waterfall', 'Cascada');
  $putStringValue(es, 'word cloud', 'Ilustraci\xF3n con palabras');
  $putStringValue(es, 'scatter', 'Dispersi\xF3n');
  $putStringValue(es, 'curved_line_bar', 'Barra de l\xEDnea con curvas');
  $putStringValue(es, 'curved_line_stackedbar', 'L\xEDnea en curva apilada');
  $putStringValue(es, 'horiz_100pct_area', '\xC1rea 100 % h.');
  $putStringValue(es, 'horiz_area_overlay', '\xC1rea h. superpuesta');
  $putStringValue(es, 'horiz_bar_line', 'L\xEDnea de barra h.');
  $putStringValue(es, 'horiz_curved_100pct_area', '\xC1rea 100 % h. en curva');
  $putStringValue(es, 'horiz_curved_area_overlay', '\xC1rea superpuesta h. en curva');
  $putStringValue(es, 'horiz_curved_stacked_area', '\xC1rea h. en curva');
  $putStringValue(es, 'horiz_center_area', '\xC1rea h. central');
  $putStringValue(es, 'horiz_curved_symbolline', 'S\xEDmbolo h. en curva');
  $putStringValue(es, 'horiz_curvedline', 'L\xEDnea h. en curva');
  $putStringValue(es, 'horiz_line_bar', 'Barra de l\xEDnea h.');
  $putStringValue(es, 'horiz_line_clusterbar', 'L\xEDnea h. agrupada apilada');
  $putStringValue(es, 'horiz_line_multi_dotplot', 'L\xEDnea h. agrupada en c\xEDrculo');
  $putStringValue(es, 'horiz_line_stacked_dotplot', 'L\xEDnea h. apilada en c\xEDrculo');
  $putStringValue(es, 'horiz_line_stackedbar', 'L\xEDnea h. apilada');
  $putStringValue(es, 'horiz_marimekko', 'Marimekko h.');
  $putStringValue(es, 'horiz_multi_dotplot', 'C\xEDrculo h. agrupado');
  $putStringValue(es, 'horiz_nested_linebar', 'Barra anidada de l\xEDneas h.');
  $putStringValue(es, 'horiz_rtbar', 'Total de ejecuci\xF3n h.');
  $putStringValue(es, 'horiz_rtmultibar', 'Total en ejecuci\xF3n agrupado h.');
  $putStringValue(es, 'horiz_rtstackedbar', 'Total de ejecuci\xF3n h.');
  $putStringValue(es, 'horiz_stacked_dotplot', 'C\xEDrculo apilado h.');
  $putStringValue(es, 'horiz_stackedtrend', '\xC1rea h.');
  $putStringValue(es, 'horiz_step_100pct_area', '\xC1rea 100 % h. de la etapa');
  $putStringValue(es, 'horiz_step_area_overlay', '\xC1rea de la etapa h. superpuesta');
  $putStringValue(es, 'horiz_step_stacked_area', '\xC1rea de la etapa h.');
  $putStringValue(es, 'horiz_stepline', 'Etapa H');
  $putStringValue(es, 'horiz_symbol_bar', 'Barra de s\xEDmbolo h.');
  $putStringValue(es, 'horiz_symbol_stackedbar', 'S\xEDmbolo apilado h.');
  $putStringValue(es, 'horiz_symbolline', 'L\xEDnea de s\xEDmbolo h.');
  $putStringValue(es, 'horiz_trendline', 'L\xEDnea h.');
  $putStringValue(es, 'vert_100pct_area', '\xC1rea 100 %');
  $putStringValue(es, 'vert_area_overlay', 'Superposici\xF3n de \xE1rea');
  $putStringValue(es, 'vert_bar_line', 'L\xEDnea de barra');
  $putStringValue(es, 'vert_curved_100pct_area', '\xC1rea 100 % en curva');
  $putStringValue(es, 'vert_curved_area_overlay', '\xC1rea superpuesta en curva');
  $putStringValue(es, 'vert_curved_stacked_area', '\xC1rea en curva');
  $putStringValue(es, 'vert_center_area', '\xC1rea central');
  $putStringValue(es, 'vert_line_multi_dotplot', 'L\xEDnea agrupada en c\xEDrculo');
  $putStringValue(es, 'vert_line_stacked_dotplot', 'L\xEDnea apilada en c\xEDrculo');
  $putStringValue(es, 'vert_marimekko', 'Marimekko');
  $putStringValue(es, 'vert_multi_dotplot', 'C\xEDrculo agrupado');
  $putStringValue(es, 'vert_nested_linebar', 'Barra anidada de l\xEDneas');
  $putStringValue(es, 'vert_stacked_dotplot', 'C\xEDrculo apilado');
  $putStringValue(es, 'vert_step_100pct_area', '\xC1rea 100 % de la etapa');
  $putStringValue(es, 'vert_step_area_overlay', 'Etapa y superposici\xF3n');
  $putStringValue(es, 'vert_step_stacked_area', '\xC1rea de la etapa');
  $putStringValue(es, 'nautilus', 'Nautilus');
  $putStringValue(es, 'nautilus_donut', 'C\xEDrculo Nautilus');
  $putStringValue(es, 'nightingale_rose', 'Rosa nightingale');
  $putStringValue(es, 'xy_line', 'Eje XY');
  $putStringValue(es, 'ds_pred_modeling', 'Predictiva');
  $putStringValue(es, 'ds_forecasting', 'Predicci\xF3n');
  $putStringValue(es, 'ds_outliers', 'Valores at\xEDpicos');
  $putStringValue(es, 'stream', 'Flujo');
  $putStringValue(es, 'stream_funnel', 'Embudo de flujo');
  $putStringValue(es, 'flex_table', 'Flex table');
  $putStringValue(es, 'QUANTILES_3_2', 'Tercil superior');
  $putStringValue(es, 'QUANTILES_3_1', 'Tercil inferior');
  $putStringValue(es, 'QUANTILES_4_3', 'Cuartil superior');
  $putStringValue(es, 'QUANTILES_4_2', 'Mediana');
  $putStringValue(es, 'QUANTILES_4_1', 'Cuartil inferior');
  $putStringValue(es, 'QUANTILES_5_4', 'Cuarto quintil');
  $putStringValue(es, 'QUANTILES_5_3', 'Tercer quintil');
  $putStringValue(es, 'QUANTILES_5_2', 'Segundo quintil');
  $putStringValue(es, 'QUANTILES_5_1', 'Primer quintil');
  $putStringValue(es, 'QUANTILES_6_5', 'Primer sextil');
  $putStringValue(es, 'QUANTILES_6_4', 'Cuarto sextil');
  $putStringValue(es, 'QUANTILES_6_3', 'Tercer sextil');
  $putStringValue(es, 'QUANTILES_6_2', 'Segundo sextil');
  $putStringValue(es, 'QUANTILES_6_1', 'Primer sextil');
  $putStringValue(es, 'QUANTILES_7_6', 'Sexto septil');
  $putStringValue(es, 'QUANTILES_7_5', 'Quinto septil');
  $putStringValue(es, 'QUANTILES_7_4', 'Cuarto septil');
  $putStringValue(es, 'QUANTILES_7_3', 'Tercer septil');
  $putStringValue(es, 'QUANTILES_7_2', 'Segundo septil');
  $putStringValue(es, 'QUANTILES_7_1', 'Primer septil');
  $putStringValue(es, 'QUANTILES_8_7', 'S\xE9ptimo octil');
  $putStringValue(es, 'QUANTILES_8_6', 'Sexto octil');
  $putStringValue(es, 'QUANTILES_8_5', 'Quinto octil');
  $putStringValue(es, 'QUANTILES_8_4', 'Cuarto octil');
  $putStringValue(es, 'QUANTILES_8_3', 'Tercer octil');
  $putStringValue(es, 'QUANTILES_8_2', 'Segundo octil');
  $putStringValue(es, 'QUANTILES_8_1', 'Primer octil');
  $putStringValue(es, 'QUANTILES_9_8', '8/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_7', '7/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_6', '6/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_5', '5/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_4', '4/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_3', '3/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_2', '2/9 de un percentil');
  $putStringValue(es, 'QUANTILES_9_1', '1/9 de un percentil');
  $putStringValue(es, 'QUANTILES_10_9', '9 Decil');
  $putStringValue(es, 'QUANTILES_10_8', '8 Decil');
  $putStringValue(es, 'QUANTILES_10_7', '7 Decil');
  $putStringValue(es, 'QUANTILES_10_6', '6 Decil');
  $putStringValue(es, 'QUANTILES_10_5', '5 Decil');
  $putStringValue(es, 'QUANTILES_10_4', '4 Decil');
  $putStringValue(es, 'QUANTILES_10_3', '3 Decil');
  $putStringValue(es, 'QUANTILES_10_2', '2 Decil');
  $putStringValue(es, 'QUANTILES_10_1', '1 Decil');
  $putStringValue(es, 'THOUSANDSSEP', ',');
  $putStringValue(es, 'DECIMALCHAR', '.');
  $putStringValue(es, 'CURRENCYSYMBOL', '$');
  $putStringValue(es, 'MONTHLONGNAME_0', 'Enero');
  $putStringValue(es, 'MONTHLONGNAME_1', 'Febrero');
  $putStringValue(es, 'MONTHLONGNAME_2', 'Marzo');
  $putStringValue(es, 'MONTHLONGNAME_3', 'Abril');
  $putStringValue(es, 'MONTHLONGNAME_4', 'Mayo');
  $putStringValue(es, 'MONTHLONGNAME_5', 'Junio');
  $putStringValue(es, 'MONTHLONGNAME_6', 'Julio');
  $putStringValue(es, 'MONTHLONGNAME_7', 'Agosto');
  $putStringValue(es, 'MONTHLONGNAME_8', 'Septiembre');
  $putStringValue(es, 'MONTHLONGNAME_9', 'Octubre');
  $putStringValue(es, 'MONTHLONGNAME_10', 'Noviembre');
  $putStringValue(es, 'MONTHLONGNAME_11', 'Diciembre');
  $putStringValue(es, 'MONTHSHORTNAME_0', 'Ene');
  $putStringValue(es, 'MONTHSHORTNAME_1', 'Feb');
  $putStringValue(es, 'MONTHSHORTNAME_2', 'Mar');
  $putStringValue(es, 'MONTHSHORTNAME_3', 'Abr');
  $putStringValue(es, 'MONTHSHORTNAME_4', 'May');
  $putStringValue(es, 'MONTHSHORTNAME_5', 'Jun');
  $putStringValue(es, 'MONTHSHORTNAME_6', 'Jul');
  $putStringValue(es, 'MONTHSHORTNAME_7', 'Ago');
  $putStringValue(es, 'MONTHSHORTNAME_8', 'Sep');
  $putStringValue(es, 'MONTHSHORTNAME_9', 'Oct');
  $putStringValue(es, 'MONTHSHORTNAME_10', 'Nov');
  $putStringValue(es, 'MONTHSHORTNAME_11', 'Dic');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_0', 'Ene');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_1', 'Feb');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_2', 'Mar');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_3', 'Abr');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_4', 'May');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_5', 'Jun');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_6', 'Jul');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_7', 'Ago');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_8', 'Sep');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_9', 'Oct');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_10', 'Nov');
  $putStringValue(es, 'MONTHSHORTNAMESTDCAL_11', 'Dic');
  $putStringValue(es, 'DAYLONGNAME_1', 'Domingo');
  $putStringValue(es, 'DAYLONGNAME_2', 'Lunes');
  $putStringValue(es, 'DAYLONGNAME_3', 'Martes');
  $putStringValue(es, 'DAYLONGNAME_4', 'Mi\xE9rcoles');
  $putStringValue(es, 'DAYLONGNAME_5', 'Jueves');
  $putStringValue(es, 'DAYLONGNAME_6', 'Viernes');
  $putStringValue(es, 'DAYLONGNAME_7', 'S\xE1bado');
  $putStringValue(es, 'DAYSHORTNAME_1', 'Dom');
  $putStringValue(es, 'DAYSHORTNAME_2', 'Lun');
  $putStringValue(es, 'DAYSHORTNAME_3', 'Mar');
  $putStringValue(es, 'DAYSHORTNAME_4', 'Mie');
  $putStringValue(es, 'DAYSHORTNAME_5', 'Jue');
  $putStringValue(es, 'DAYSHORTNAME_6', 'Vie');
  $putStringValue(es, 'DAYSHORTNAME_7', 'Sab');
  $putStringValue(es, 'HOUR_DAY_MONTH_YEAR_FORMAT', 'dd MMM de yyyy ha');
  $putStringValue(es, 'DAY_MONTH_YEAR_FORMAT', 'dd MMM de yyyy');
  $putStringValue(es, 'MONTH_WITH_YEAR_FORMAT', 'MMM yyyy');
  $putStringValue(es, 'YEAR_ONLY_FORMAT', 'yyyy');
  $putStringValue(es, 'MONTH_ONLY_FORMAT', 'MMM');
  $putStringValue(es, 'HOUR_ONLY', 'ha');
  $putStringValue(es, 'HOUR_WITH_MINUTE', 'h:mma');
  $putStringValue(es, 'EC4001', 'Aviso: Las consultas sobre proyecci\xF3n deben tener una granulidad de tiempo.');
  $putStringValue(es, 'EC4002', 'Aviso: La proyecci\xF3n solicitada tiene granulidad de fecha pero la columna de la fecha que se escribi\xF3 es una fecha, no es una fecha y hora.');
  $putStringValue(es, 'EC4003', 'Aviso: La consulta de proyecci\xF3n no produjo ning\xFAn dato utilizable.');
  $putStringValue(es, 'EC4004', 'Aviso: La proyecci\xF3n no puede proyectar en la columna.');
  $putStringValue(es, 'EC4005', 'Aviso: Grupo incompatible.');
  $putStringValue(es, 'EC4006', 'Aviso: La proyecci\xF3n solicitada comienza antes de la fecha disponible.');
  $putStringValue(es, 'EC4007', 'Aviso: La proyecci\xF3n no pudo obtener elementos de periodo.');
  $putStringValue(es, 'ANNOTATION_TITLE', 'Anotaci\xF3n en {1}');
  $putStringValue(es, 'ANNOTATIONS', 'Anotaciones');
  $putStringValue(es, 'RECENTLY_ADDED', '(A\xF1adido recientemente)');
  $putStringValue(es, 'VAL_OF_VAL', '{1} de {2}');
  $putStringValue(es, 'PCT_OF_TOTAL', '{1} del total');
  $putStringValue(es, 'SLICER_ALL_VALUES', 'Todos los valores ({1})');
  $putStringValue(es, 'SLICER_SELECTED', 'Seleccionado ({1})');
  $putStringValue(es, 'SLICER_SHOW_ALL', 'Mostrar todos');
  $putStringValue(es, 'SLICER_SHOW_SELECTED', 'Mostrar seleccionados');
  $putStringValue(es, 'SLICER_INFO_TEXT', '{1} - {2} de {3}');
  $putStringValue(es, 'DATE_SEL_CLEAR', 'Borrar');
  $putStringValue(es, 'DATE_SEL_PRESETS', 'Valores preestablecidos');
  $putStringValue(es, 'DATE_SEL_CALENDAR', 'Calendario');
  $putStringValue(es, 'DATE_SEL_DAYS', 'D\xEDas');
  $putStringValue(es, 'DATE_SEL_WEEKS', 'Semanas');
  $putStringValue(es, 'DATE_SEL_MONTHS', 'Meses');
  $putStringValue(es, 'DATE_SEL_YEARS', 'A\xF1os');
  $putStringValue(es, 'DATE_SEL_TODAY', 'Hoy');
  $putStringValue(es, 'DATE_SEL_YESTERDAY', 'Ayer');
  $putStringValue(es, 'DATE_SEL_LAST_7DAYS', '\xDAltimos 7 d\xEDas');
  $putStringValue(es, 'DATE_SEL_LAST_30DAYS', '\xDAltimos 30 d\xEDas');
  $putStringValue(es, 'DATE_SEL_LAST_60DAYS', '\xDAltimos 60 d\xEDas');
  $putStringValue(es, 'DATE_SEL_LAST_90DAYS', '\xDAltimos 90 d\xEDas');
  $putStringValue(es, 'DATE_SEL_THIS_WEEK', 'Esta semana');
  $putStringValue(es, 'DATE_SEL_LAST_WEEK', 'La semana pasada');
  $putStringValue(es, 'DATE_SEL_LAST_2WEEKS', 'Hace 2 semanas');
  $putStringValue(es, 'DATE_SEL_LAST_3WEEKS', 'Hace 3 semanas');
  $putStringValue(es, 'DATE_SEL_LAST_4WEEKS', 'Hace 4 semanas');
  $putStringValue(es, 'DATE_SEL_LAST_53WEEKS', 'Hace 53 semanas');
  $putStringValue(es, 'DATE_SEL_THIS_MONTH', 'Este mes');
  $putStringValue(es, 'DATE_SEL_LAST_MONTH', 'El mes anterior');
  $putStringValue(es, 'DATE_SEL_LAST_2MONTHS', 'Hace dos meses');
  $putStringValue(es, 'DATE_SEL_LAST_3MONTHS', 'Hace 3 meses');
  $putStringValue(es, 'DATE_SEL_LAST_6MONTHS', 'Hace 6 meses');
  $putStringValue(es, 'DATE_SEL_LAST_12MONTHS', 'Hace 12 meses');
  $putStringValue(es, 'DATE_SEL_LAST_13MONTHS', 'Hace 13 meses');
  $putStringValue(es, 'DATE_SEL_THIS_YEAR', 'Este a\xF1o');
  $putStringValue(es, 'DATE_SEL_LAST_YEAR', 'El a\xF1o pasado');
  $putStringValue(es, 'RANGE_SEL_ERR_MIN_MAX_SAME', 'Error: Minimum and maximum values are the same');
  $putStringValue(es, 'RANGE_SEL_ERR_DATA_MISMATCH', 'Error: The minimum and maximum values are not the same type');
  $putStringValue(es, 'RANGE_SEL_ERR_DATA_NOT_NUMERIC', 'Error: The minimum or maximum value is not a number or date');
  $putStringValue(es, 'RANGE_SEL_ERR_MAX_LESS_MIN', 'Error: The maximum value is less than the minimum value');
  addDateAndNumberFormatsForLocale(es, 'es-ES');
  $putStringValue(locales, 'es', es);
}

var de, en, es, fr, ja, locales, zh;
function $clinit_CFColor(){
  $clinit_CFColor = emptyMethod;
  WHITE = new CFColor(255, 255, 255);
  BLACK = new CFColor(0, 0, 0);
  DISABLED_LIGHT_GRAY = new CFColor_2('#E4E5E5');
  DISABLED_DARK_GRAY = new CFColor_2('#C4C6C3');
  DISABLED_GRAY = new CFColor_2('#BBBBBB');
  GRAY = new CFColor_2('#808080');
  GRAY2 = new CFColor_2('#9A9A9A');
  TEXT_DARK_GRAY = new CFColor_2('#54585A');
  TRANSPARENT = new CFColor_0(0, 0, 0, 0);
  DOMO_BLUE = new CFColor_2('#99CCEE');
  DOMO_BLUE_TRANSPARENT = new CFColor_2('#99CCEED0');
  WARNING_MESSAGE = new CFColor(228, 86, 33);
  WARNING_MESSAGE_TRANSPARENT = new CFColor_0(228, 86, 33, 180);
  RED = new CFColor_2('#FF0000');
  MOSTLY_TRANSPARENT = new CFColor_0(0, 0, 0, 1);
}

function $deSaturateAndLighten(this$static, desaturation, lighten){
  var L, new_b, new_g, new_r;
  L = 0.3 * this$static.red + 0.6 * this$static.green + 0.1 * this$static.blue;
  new_r = this$static.red + desaturation * (L - this$static.red);
  new_g = this$static.green + desaturation * (L - this$static.green);
  new_b = this$static.blue + desaturation * (L - this$static.blue);
  if (lighten > 0 && lighten < 1) {
    new_r = new_r + (255 - new_r) * lighten;
    new_g = new_g + (255 - new_g) * lighten;
    new_b = new_b + (255 - new_b) * lighten;
  }
  return new CFColor(round_int(new_r), round_int(new_g), round_int(new_b));
}

function $duplicate_0(this$static){
  return new CFColor_0(this$static.red, this$static.green, this$static.blue, this$static.alpha_0);
}

function $equals_0(this$static, clr2){
  if (!clr2)
    return false;
  return this$static.red == clr2.red && this$static.green == clr2.green && this$static.blue == clr2.blue && this$static.alpha_0 == clr2.alpha_0;
}

function $get2DigitHexVal(value_0){
  var hexStr;
  try {
    hexStr = (value_0 >>> 0).toString(16);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      hexStr = '0';
    }
     else 
      throw toJs($e0);
  }
  hexStr.length < 2 && (hexStr = '0' + hexStr);
  return hexStr;
}

function $getHexString(this$static){
  var hexVal;
  hexVal = '#' + $get2DigitHexVal(this$static.red) + $get2DigitHexVal(this$static.green) + $get2DigitHexVal(this$static.blue);
  this$static.alpha_0 != 255 && (hexVal += $get2DigitHexVal(this$static.alpha_0));
  return hexVal;
}

function $getRBGAStr(this$static){
  return 'rgba(' + this$static.red + ', ' + this$static.green + ',' + this$static.blue + ', ' + this$static.alpha_0 / 255 + ')';
}

function $setAlpha(this$static, alpha_0){
  this$static.alpha_0 = alpha_0;
}

function $setValues(this$static){
  this$static.red = 255;
  this$static.green = 255;
  this$static.blue = 255;
  this$static.alpha_0 = 255;
}

function $setValuesFromColor(this$static, source){
  if (!source)
    return;
  this$static.red = source.red;
  this$static.green = source.green;
  this$static.blue = source.blue;
  this$static.alpha_0 = source.alpha_0;
}

function $toString_0(this$static){
  if (this$static.alpha_0 == 255)
    return 'Color(' + this$static.red + ', ' + this$static.green + ', ' + this$static.blue + ') - ' + $getHexString(this$static);
  return 'Color(' + this$static.red + ', ' + this$static.green + ', ' + this$static.blue + ', ' + this$static.alpha_0 + ') - ' + $getHexString(this$static);
}

function $withoutAlpha(this$static){
  var retColor;
  if (this$static.alpha_0 == 255)
    return this$static;
  retColor = new CFColor_0(this$static.red, this$static.green, this$static.blue, this$static.alpha_0);
  retColor.alpha_0 = 255;
  return retColor;
}

function CFColor(red, green, blue){
  $clinit_CFColor();
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.alpha_0 = 255;
}

function CFColor_0(red, green, blue, alpha_0){
  $clinit_CFColor();
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.alpha_0 = alpha_0;
}

function CFColor_1(source, alpha_0){
  $clinit_CFColor();
  if (source) {
    this.red = source.red;
    this.green = source.green;
    this.blue = source.blue;
  }
  this.alpha_0 = alpha_0;
}

function CFColor_2(colorStr){
  $clinit_CFColor();
  var clr;
  clr = getColor(colorStr);
  if (clr) {
    this.red = clr.red;
    this.green = clr.green;
    this.blue = clr.blue;
    this.alpha_0 = clr.alpha_0;
  }
}

function getCFColorFromRBG(valStr){
  var blue, endIndex, green, red, values;
  endIndex = valStr.indexOf(')');
  if (endIndex > 0) {
    valStr = $trim(valStr.substr(4, endIndex - 4));
    values = $split(valStr, ',', 0);
    if (values.length == 3) {
      red = getIntValueFromIntOrPercent(values[0]);
      green = getIntValueFromIntOrPercent(values[1]);
      blue = getIntValueFromIntOrPercent(values[2]);
      return new CFColor(red, green, blue);
    }
  }
  $clinit_System();
  return null;
}

function getCFColorFromRBGA(valStr){
  var alpha_0, blue, green, red, values;
  valStr = $trim(valStr.substr(5, valStr.length - 5));
  valStr = $substring_0(valStr, 0, valStr.length - 1);
  values = $split(valStr, ',', 0);
  if (values.length == 4) {
    red = getIntValueFromIntOrPercent(values[0]);
    green = getIntValueFromIntOrPercent(values[1]);
    blue = getIntValueFromIntOrPercent(values[2]);
    alpha_0 = round_int(getDouble_0(values[3], 1) * 255);
    return new CFColor_0(red, green, blue, alpha_0);
  }
  $clinit_System();
  return null;
}

function getColor(colorName){
  $clinit_CFColor();
  var valStr;
  if (colorName == null || colorName.length == 0)
    return null;
  if ($equals_2(colorName.substr(0, 1), '#')) {
    valStr = colorName.substr(1, colorName.length - 1);
    return hexToColor(valStr);
  }
   else 
    return $equals_2(colorName.substr(0, 4), 'rgba')?getCFColorFromRBGA(colorName):$equals_2(colorName.substr(0, 4), 'rgb(')?getCFColorFromRBG(colorName):$startsWith(colorName.toLowerCase(), 'trans')?new CFColor_0(0, 0, 0, 0):hexToColor(colorName);
}

function getIntValueFromIntOrPercent(oneValue){
  var percent, value_0;
  if (oneValue.indexOf('%') > 0) {
    percent = getDouble_0(oneValue, 0);
    value_0 = toInt_0(fromDouble_0($wnd.Math.round(255 * percent / 100)));
    return value_0;
  }
  return getInt(oneValue, 0);
}

function hexToColor(valStr){
  var alpha_0, alphaStr, blue, green, red, sb;
  alphaStr = null;
  if (valStr.length > 6) {
    alphaStr = $substring(valStr, valStr.length - 2);
    valStr = $substring_0(valStr, 0, valStr.length - 2);
  }
  if (valStr.length == 3) {
    sb = new StringBuilder;
    $append_0($append_0(sb, valStr.charCodeAt(0)), valStr.charCodeAt(0));
    $append_0($append_0(sb, valStr.charCodeAt(1)), valStr.charCodeAt(1));
    $append_0($append_0(sb, valStr.charCodeAt(2)), valStr.charCodeAt(2));
    valStr = sb.string;
  }
  while (valStr.length < 6)
    valStr = '0' + valStr;
  alpha_0 = 255;
  alphaStr != null && alphaStr.length > 1 && (alpha_0 = intFromHexString(alphaStr, 255));
  red = intFromHexString(valStr.substr(0, 2), 0);
  green = intFromHexString(valStr.substr(2, 2), 0);
  blue = intFromHexString(valStr.substr(4, valStr.length - 4), 0);
  return new CFColor_0(red, green, blue, alpha_0);
}

function intFromHexString(hexStr, defaultVal){
  var value_0;
  try {
    value_0 = __parseAndValidateInt($trim(hexStr), 16);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      value_0 = defaultVal;
    }
     else 
      throw toJs($e0);
  }
  return value_0;
}

function transition(value_0, startVal, endVal){
  return startVal + ((endVal - startVal) * value_0 / 80 | 0);
}

defineClass(15, 1, {15:1}, CFColor, CFColor_0, CFColor_1, CFColor_2);
_.toString_0 = function toString_10(){
  return $toString_0(this);
}
;
_.alpha_0 = 0;
_.blue = 0;
_.green = 0;
_.red = 0;
var BLACK, DISABLED_DARK_GRAY, DISABLED_GRAY, DISABLED_LIGHT_GRAY, DOMO_BLUE, DOMO_BLUE_TRANSPARENT, GRAY, GRAY2, MOSTLY_TRANSPARENT, RED, TEXT_DARK_GRAY, TRANSPARENT, WARNING_MESSAGE, WARNING_MESSAGE_TRANSPARENT, WHITE;
var Lcom_domo_charting_model_CFColor_2_classLit = createForClass('com.domo.charting.model', 'CFColor', 15);
function $unScale(this$static, scaleFactor){
  this$static.width_0 = this$static.width_0 / scaleFactor;
  this$static.height_0 = this$static.height_0 / scaleFactor;
}

function CFDimension(width_0, height){
  this.width_0 = width_0;
  this.height_0 = height;
}

defineClass(51, 1, {}, CFDimension);
_.toString_0 = function toString_11(){
  return '' + this.width_0 + ',' + this.height_0;
}
;
_.height_0 = 0;
_.width_0 = 0;
var Lcom_domo_charting_model_CFDimension_2_classLit = createForClass('com.domo.charting.model', 'CFDimension', 51);
defineClass(388, 1, {});
_.noMouse = false;
var Lcom_domo_charting_model_CFStyle_2_classLit = createForClass('com.domo.charting.model', 'CFStyle', 388);
function $clinit_CFFill(){
  $clinit_CFFill = emptyMethod;
  TRANSPARENT_0 = new CFFill(($clinit_CFColor() , TRANSPARENT));
  BLACK_0 = new CFFill(BLACK);
  WHITE_0 = new CFFill(WHITE);
  new CFFill(RED);
  DOMO_BLUE_0 = new CFFill(DOMO_BLUE);
  MOSTLY_TRANSPARENT_0 = new CFFill_0(MOSTLY_TRANSPARENT);
}

function $duplicate_1(this$static){
  var dupFill;
  dupFill = new CFFill(this$static.color_0);
  dupFill.noMouse = this$static.noMouse;
  dupFill.color2 = this$static.color2;
  dupFill.type_0 = this$static.type_0;
  dupFill.gradientType = this$static.gradientType;
  dupFill.fillEffectX = this$static.fillEffectX;
  dupFill.fillEffectY = this$static.fillEffectY;
  dupFill.radialStartPercent = this$static.radialStartPercent;
  dupFill.radialRadius = this$static.radialRadius;
  return dupFill;
}

function $setColor_0(this$static, color_0){
  this$static.color_0 = color_0;
}

function CFFill(color_0){
  $clinit_CFFill();
  this.color_0 = color_0;
}

function CFFill_0(color_0){
  this.color_0 = color_0;
  this.noMouse = true;
}

function CFFill_1(colorStr){
  $clinit_CFFill();
  this.color_0 = new CFColor_2(colorStr);
}

function getOutlineFill(fill){
  $clinit_CFFill();
  var fillClr;
  if (fill) {
    if (!!fill.color_0 && fill.color_0.alpha_0 != 88) {
      fillClr = $duplicate_0(fill.color_0);
      fillClr.alpha_0 = 88;
      return new CFFill(fillClr);
    }
  }
  return fill;
}

defineClass(17, 388, {}, CFFill, CFFill_0, CFFill_1);
_.toString_0 = function toString_12(){
  return this.type_0 == GRADIENT?'GRADIENT Type ' + this.gradientType + ' ' + $toString_0(this.color_0) + ' ' + $toString_0(this.color2):'SOLID ' + $toString_0(this.color_0);
}
;
_.fillEffectX = 0;
_.fillEffectY = 0;
_.gradientType = 0;
_.radialRadius = 0;
_.radialStartPercent = 0;
_.type_0 = 0;
var BLACK_0, DOMO_BLUE_0, GRADIENT = 1, MOSTLY_TRANSPARENT_0, TRANSPARENT_0, WHITE_0;
var Lcom_domo_charting_model_CFFill_2_classLit = createForClass('com.domo.charting.model', 'CFFill', 17);
function $clinit_CFFont(){
  $clinit_CFFont = emptyMethod;
  new CFFont_1(null, 12, ($clinit_CFColor() , WHITE), 1);
  ANNOTATION_USERNAME = new CFFont_1(null, 12, new CFColor_2('#000000CC'), 1);
  ANNOTATION_TEXT = new CFFont_0(null, 11, TEXT_DARK_GRAY);
  DEFAULT_FONT = new CFFont_0(null, 11, TEXT_DARK_GRAY);
}

function $$init_12(this$static){
}

function $duplicate_2(this$static){
  var dupFont;
  dupFont = new CFFont_0(this$static.name_0, this$static.size_0, this$static.color_0);
  dupFont.face_0 = this$static.face_0;
  return dupFont;
}

function $getCapHeightInt(this$static, rnd){
  return toInt_0(fromDouble_0($wnd.Math.round((isNaN_0(this$static.capHeight) && (this$static.capHeight = (isNaN_0(this$static.lineHeight) && (this$static.lineHeight = rnd.measureText_0('A', this$static).height_0) , this$static.lineHeight * 0.66)) , this$static.capHeight))));
}

function $getDescender(this$static, rnd){
  isNaN_0(this$static.lineHeight) && (this$static.lineHeight = rnd.measureText_0('A', this$static).height_0);
  return this$static.lineHeight * 0.18;
}

function $getLineHeight(this$static, rnd){
  isNaN_0(this$static.lineHeight) && (this$static.lineHeight = rnd.measureText_0('A', this$static).height_0);
  return this$static.lineHeight;
}

function $scale_0(this$static, scaleFactor){
  this$static.size_0 = scaleFactor * this$static.size_0;
}

function $setColor_1(this$static, color_0){
  this$static.color_0 = color_0;
}

function $setFace(this$static, face_0){
  this$static.face_0 = face_0;
}

function $setName_1(this$static, name_0){
  this$static.name_0 = name_0;
}

function $setSize_0(this$static, size_0){
  this$static.size_0 = size_0;
  this$static.lineHeight = NaN;
}

function $toString_1(this$static){
  var styleStr;
  styleStr = '';
  this$static.face_0 == 2?(styleStr += 'italic '):this$static.face_0 == 1?(styleStr += 'bold '):this$static.face_0 == 3?(styleStr += 'bold italic '):(styleStr += 'normal ');
  styleStr += '' + toString_23(fromDouble_0($wnd.Math.round(this$static.size_0))) + 'px ';
  styleStr += this$static.name_0;
  return styleStr;
}

function $unScale_0(this$static, scaleFactor){
  this$static.size_0 = this$static.size_0 / scaleFactor;
}

function CFFont(other){
  $clinit_CFFont();
  $$init_12(this);
  this.name_0 = other.name_0;
  this.size_0 = other.size_0;
  this.color_0 = other.color_0;
  this.face_0 = other.face_0;
  this.lineHeight = other.lineHeight;
}

function CFFont_0(name_0, size_0, color_0){
  $clinit_CFFont();
  $$init_12(this);
  this.name_0 = name_0;
  this.size_0 = size_0;
  this.color_0 = color_0;
}

function CFFont_1(name_0, size_0, color_0, face_0){
  $clinit_CFFont();
  $$init_12(this);
  this.name_0 = name_0;
  this.size_0 = size_0;
  this.color_0 = color_0;
  this.face_0 = face_0;
}

defineClass(22, 388, {}, CFFont, CFFont_0, CFFont_1);
_.toString_0 = function toString_13(){
  return $toString_1(this);
}
;
_.capHeight = NaN;
_.face_0 = 0;
_.lineHeight = NaN;
_.size_0 = 0;
var ANNOTATION_TEXT, ANNOTATION_USERNAME, DEFAULT_FONT;
var Lcom_domo_charting_model_CFFont_2_classLit = createForClass('com.domo.charting.model', 'CFFont', 22);
function $$init_13(this$static){
  this$static.pathAry = new ArrayList;
}

function $add(this$static, element){
  this$static.pathAry.add_0(element);
}

function $addBottomCaptionEdge(rect, cornerRadius, point, arrowEdge){
  var left, right, x_0, y_0;
  if (arrowEdge != 0 || point.y_0 < rect.y_0 + rect.height_0) {
    return 'l ' + (rect.x_0 + rect.width_0 - cornerRadius) + ',' + (rect.y_0 + rect.height_0) + '; ';
  }
   else {
    y_0 = rect.y_0 + rect.height_0;
    x_0 = point.x_0;
    left = rect.x_0 + cornerRadius + halfArrow;
    right = rect.x_0 + rect.width_0 - (cornerRadius + halfArrow);
    x_0 < rect.x_0 && (x_0 = rect.x_0);
    x_0 > rect.x_0 + rect.width_0 && (x_0 = rect.x_0 + rect.width_0);
    return x_0 >= left && x_0 <= right?'l ' + (x_0 - halfArrow) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 + arrowLen) + ';l ' + (x_0 + halfArrow) + ',' + y_0 + ';l ' + (right + halfArrow) + ',' + y_0 + ';':x_0 < left?'l ' + x_0 + ',' + (y_0 + arrowLen) + ';l ' + (left + halfArrow) + ',' + y_0 + ';l ' + (right + halfArrow) + ',' + y_0 + ';':'l ' + (right - halfArrow) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 + arrowLen) + ';l ' + (right + halfArrow) + ',' + y_0 + ';';
  }
}

function $addLeftCaptionEdge(rect, cornerRadius, point, arrowEdge){
  var bottom, top_0, x_0, y_0;
  if (arrowEdge != 1) {
    return 'l ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0 - cornerRadius) + '; ';
  }
   else {
    rect.height_0 < 20 && rect.height_0 > 12 && (halfArrow = 3);
    y_0 = point.y_0;
    x_0 = rect.x_0;
    top_0 = rect.y_0 + cornerRadius + halfArrow;
    bottom = rect.y_0 + rect.height_0 - (cornerRadius + halfArrow);
    y_0 < rect.y_0 && (y_0 = rect.y_0);
    y_0 > rect.y_0 + rect.height_0 && (y_0 = rect.y_0 + rect.height_0);
    return y_0 >= top_0 && y_0 <= bottom?'l ' + x_0 + ',' + (y_0 - halfArrow) + ';l ' + (x_0 - arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 + halfArrow) + ';l ' + x_0 + ',' + (bottom + halfArrow) + ';':y_0 < top_0?'l ' + (x_0 - arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (top_0 + halfArrow) + ';l ' + x_0 + ',' + (bottom + halfArrow) + ';':'l ' + x_0 + ',' + (bottom - halfArrow) + ';l ' + (x_0 - arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (bottom + halfArrow) + ';';
  }
}

function $addRightCaptionEdge(rect, cornerRadius, point, arrowEdge){
  var bottom, top_0, x_0, y_0;
  if (arrowEdge != 3) {
    return 'l ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + cornerRadius) + '; ';
  }
   else {
    y_0 = point.y_0;
    x_0 = rect.x_0 + rect.width_0;
    top_0 = rect.y_0 + cornerRadius + halfArrow;
    bottom = rect.y_0 + rect.height_0 - (cornerRadius + halfArrow);
    y_0 < rect.y_0 && (y_0 = rect.y_0);
    y_0 > rect.y_0 + rect.height_0 && (y_0 = rect.y_0 + rect.height_0);
    return y_0 >= top_0 && y_0 <= bottom?'l ' + x_0 + ',' + (y_0 + halfArrow) + ';l ' + (x_0 + arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 - halfArrow) + ';l ' + x_0 + ',' + (top_0 - halfArrow) + ';':y_0 < top_0?'l ' + x_0 + ',' + (top_0 + halfArrow) + ';l ' + (x_0 + arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (top_0 - halfArrow) + ';':'l ' + (x_0 + arrowLen) + ',' + y_0 + ';l ' + x_0 + ',' + (bottom - halfArrow) + ';l ' + x_0 + ',' + (top_0 - halfArrow) + ';';
  }
}

function $addSegmentsToAreaPath(segmentForward, segmentBackwards, areaPath, lastPoint){
  var i, i0;
  if (segmentForward.array.length > 1) {
    for (i0 = 0; i0 < segmentForward.array.length; i0++)
      $add_1(areaPath, (checkCriticalElementIndex(i0, segmentForward.array.length) , castTo(segmentForward.array[i0], 11)));
    $add_1(areaPath, new CFPathElement_0(1, lastPoint.x_0, lastPoint.y_0));
    for (i = 0; i < segmentBackwards.array.length; i++)
      $add_1(areaPath, (checkCriticalElementIndex(i, segmentBackwards.array.length) , castTo(segmentBackwards.array[i], 11)));
    $add_1(areaPath, new CFPathElement);
  }
  segmentForward.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  segmentBackwards.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}

function $addStepPointSegment(isMoveTo, points, isHorizontalGraph, boundsRect, pathAry, i){
  var halfSpaceBetweenPoints, lastPoint, nextPoint, point;
  if (!points || points.array.length < i)
    return;
  point = (checkCriticalElementIndex(i, points.array.length) , castTo(points.array[i], 10));
  if (i == 0) {
    isHorizontalGraph?$add_1(pathAry, new CFPathElement_0(1, point.x_0, boundsRect.y_0)):$add_1(pathAry, new CFPathElement_0(1, boundsRect.x_0, point.y_0));
  }
   else {
    lastPoint = (checkCriticalElementIndex(i - 1, points.array.length) , castTo(points.array[i - 1], 10));
    halfSpaceBetweenPoints = 0;
    if (isHorizontalGraph) {
      !!lastPoint && (halfSpaceBetweenPoints = (point.y_0 - lastPoint.y_0) / 2);
      $add_1(pathAry, new CFPathElement_0(1, point.x_0, point.y_0 - halfSpaceBetweenPoints));
    }
     else {
      !!lastPoint && (halfSpaceBetweenPoints = (point.x_0 - lastPoint.x_0) / 2);
      $add_1(pathAry, new CFPathElement_0(1, point.x_0 - halfSpaceBetweenPoints, point.y_0));
    }
  }
  isMoveTo && (castTo($get_2(pathAry, pathAry.array.length - 1), 11).type_0 = 0);
  if (i < points.array.length - 1) {
    nextPoint = (checkCriticalElementIndex(i + 1, points.array.length) , castTo(points.array[i + 1], 10));
    if (isHorizontalGraph) {
      if (nextPoint) {
        halfSpaceBetweenPoints = (nextPoint.y_0 - point.y_0) / 2;
        $add_1(pathAry, new CFPathElement_0(1, point.x_0, point.y_0 + halfSpaceBetweenPoints));
      }
    }
     else {
      if (nextPoint) {
        halfSpaceBetweenPoints = (nextPoint.x_0 - point.x_0) / 2;
        $add_1(pathAry, new CFPathElement_0(1, point.x_0 + halfSpaceBetweenPoints, point.y_0));
      }
    }
  }
   else {
    isHorizontalGraph?$add_1(pathAry, new CFPathElement_0(1, point.x_0, boundsRect.y_0 + boundsRect.height_0)):$add_1(pathAry, new CFPathElement_0(1, boundsRect.x_0 + boundsRect.width_0, point.y_0));
  }
}

function $addTopCaptionEdge(rect, cornerRadius, point, arrowEdge){
  var left, right, x_0, y_0;
  if (arrowEdge != 2 || point.y_0 > rect.y_0) {
    return 'l ' + (rect.x_0 + cornerRadius) + ',' + rect.y_0 + '; ';
  }
   else {
    y_0 = rect.y_0;
    x_0 = point.x_0;
    left = rect.x_0 + cornerRadius + halfArrow;
    right = rect.x_0 + rect.width_0 - (cornerRadius + halfArrow);
    x_0 < rect.x_0 && (x_0 = rect.x_0);
    x_0 > rect.x_0 + rect.width_0 && (x_0 = rect.x_0 + rect.width_0);
    return x_0 >= left && x_0 <= right?'l ' + (x_0 + halfArrow) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 - arrowLen) + ';l ' + (x_0 - halfArrow) + ',' + y_0 + ';l ' + (left - halfArrow) + ',' + y_0 + ';':x_0 < left?'l ' + (left + halfArrow) + ',' + y_0 + ';l ' + x_0 + ',' + (y_0 - arrowLen) + ';l ' + (left - halfArrow) + ',' + y_0 + ';':'l ' + x_0 + ',' + (y_0 - arrowLen) + ';l ' + (right - halfArrow) + ',' + y_0 + ';l ' + (left - halfArrow) + ',' + y_0 + ';';
  }
}

function $duplicate_3(this$static){
  var dupPath, pathEle, pathEle$iterator;
  dupPath = new CFPath;
  dupPath.isLine = this$static.isLine;
  dupPath.isCircle = this$static.isCircle;
  dupPath.shouldAntiAlias = this$static.shouldAntiAlias;
  for (pathEle$iterator = this$static.pathAry.iterator(); pathEle$iterator.hasNext_0();) {
    pathEle = castTo(pathEle$iterator.next_1(), 11);
    dupPath.pathAry.add_0(pathEle.duplicate());
  }
  !!this$static.bounds && (dupPath.bounds = $duplicate_5(this$static.bounds));
  return dupPath;
}

function $freeResources_30(this$static){
  !!this$static.pathAry && this$static.pathAry.size_1() > 0 && this$static.pathAry.clear_0();
  this$static.pathAry = null;
  this$static.bounds = null;
  this$static.xRange = null;
  this$static.yRange = null;
}

function $getAreaPointsArray(rects, isHorizontalGraph, lineStyle, bndsRect){
  var areaPoints, atEndOfPath, endOfSegmentIndex, firstIndex, i, j, lastRectWasEmpty, rectIsEmpty;
  if (lineStyle == 2)
    return $getAreaPointsArrayStep(rects, isHorizontalGraph, bndsRect);
  areaPoints = new ArrayList;
  firstIndex = 0;
  endOfSegmentIndex = 0;
  rectIsEmpty = false;
  lastRectWasEmpty = false;
  atEndOfPath = false;
  for (i = 0; i < rects.length; i++) {
    if (rects[i]) {
      lastRectWasEmpty = rectIsEmpty;
      rectIsEmpty = $hasZeroHeightOrWidth(rects[i]);
      (!rectIsEmpty || !lastRectWasEmpty) && $add_1(areaPoints, new CFPoint(rects[i].x_0, rects[i].y_0));
    }
    if (i == rects.length - 1) {
      endOfSegmentIndex = i;
      atEndOfPath = true;
    }
     else if (rectIsEmpty && lastRectWasEmpty) {
      endOfSegmentIndex = i - 1;
      atEndOfPath = true;
    }
    if (atEndOfPath) {
      if (isHorizontalGraph) {
        for (j = endOfSegmentIndex; j >= firstIndex; j--) {
          !!rects[j] && $add_1(areaPoints, new CFPoint($getRight(rects[j]), rects[j].y_0));
        }
      }
       else {
        for (j = endOfSegmentIndex; j >= firstIndex; j--) {
          !!rects[j] && $add_1(areaPoints, new CFPoint(rects[j].x_0, $getBottom(rects[j])));
        }
      }
      if (i < rects.length - 1) {
        areaPoints.array[areaPoints.array.length] = null;
        $add_1(areaPoints, new CFPoint(rects[i].x_0, rects[i].y_0));
        firstIndex = endOfSegmentIndex + 1;
        atEndOfPath = false;
      }
    }
  }
  return castTo($toArray_0(areaPoints, initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, areaPoints.array.length, 0, 1)), 83);
}

function $getAreaPointsArrayStep(rects, isHorizontalGraph, bndsRect){
  var area1stHalf, area2ndHalf, areaPoints, i, i0, index_0, pt, pt$index, pt$index0, pt$max, pt$max0;
  areaPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, rects.length, 0, 1);
  index_0 = 0;
  if (isHorizontalGraph) {
    for (i0 = 0; i0 < rects.length; i0++)
      areaPoints[index_0++] = new CFPoint(rects[i0].x_0, rects[i0].y_0);
    area1stHalf = $getStepPointsForPointsArray(areaPoints, true, bndsRect, false);
    index_0 = 0;
    for (i = rects.length - 1; i >= 0; i--)
      areaPoints[index_0++] = new CFPoint($getRight(rects[i]), rects[i].y_0);
    area2ndHalf = $getStepPointsForPointsArray(areaPoints, true, bndsRect, true);
  }
   else {
    for (i0 = 0; i0 < rects.length; i0++)
      areaPoints[index_0++] = new CFPoint(rects[i0].x_0, rects[i0].y_0);
    area1stHalf = $getStepPointsForPointsArray(areaPoints, false, bndsRect, false);
    index_0 = 0;
    for (i = rects.length - 1; i >= 0; i--)
      areaPoints[index_0++] = new CFPoint(rects[i].x_0, $getBottom(rects[i]));
    area2ndHalf = $getStepPointsForPointsArray(areaPoints, false, bndsRect, true);
  }
  if (area1stHalf != null && area2ndHalf != null) {
    areaPoints = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, rects.length * 4, 0, 1);
    index_0 = 0;
    for (pt$index0 = 0 , pt$max0 = area1stHalf.length; pt$index0 < pt$max0; ++pt$index0) {
      pt = area1stHalf[pt$index0];
      areaPoints[index_0++] = pt;
    }
    for (pt$index = 0 , pt$max = area2ndHalf.length; pt$index < pt$max; ++pt$index) {
      pt = area2ndHalf[pt$index];
      areaPoints[index_0++] = pt;
    }
  }
  return areaPoints;
}

function $getBoundsForPath(this$static){
  var circleElement, maxX, maxY, minX, minY, pe, pe$iterator, rectElement, x2, y2;
  if (this$static.bounds)
    return this$static.bounds;
  if (this$static.pathAry) {
    minX = $intern_19;
    maxX = $intern_20;
    minY = $intern_19;
    maxY = $intern_20;
    for (pe$iterator = this$static.pathAry.iterator(); pe$iterator.hasNext_0();) {
      pe = castTo(pe$iterator.next_1(), 11);
      if (pe.type_0 == 0 || pe.type_0 == 1 || pe.type_0 == 2 || pe.type_0 == 3 || pe.type_0 == 5 || pe.type_0 == 6) {
        pe.x_0 < minX && (minX = pe.x_0);
        pe.x_0 > maxX && (maxX = pe.x_0);
        pe.y_0 < minY && (minY = pe.y_0);
        pe.y_0 > maxY && (maxY = pe.y_0);
      }
      if (pe.type_0 == 5 || pe.type_0 == 6) {
        if (pe.type_0 == 5) {
          rectElement = castTo(pe, 80);
          x2 = rectElement.x_0 + rectElement.width_0;
          y2 = rectElement.y_0 + rectElement.height_0;
        }
         else {
          circleElement = castTo(pe, 112);
          x2 = circleElement.x_0 + circleElement.diameter;
          y2 = circleElement.y_0 + circleElement.diameter;
        }
        x2 < minX && (minX = x2);
        x2 > maxX && (maxX = x2);
        y2 < minY && (minY = y2);
        y2 > maxY && (maxY = y2);
      }
    }
    this$static.bounds = new CFRect(minX, minY, maxX - minX, maxY - minY);
    return $duplicate_5(this$static.bounds);
  }
  this$static.bounds = new CFRect(0, 0, 1, 1);
  return $duplicate_5(this$static.bounds);
}

function $getCurvePathArray3(points, isHorizontalGraph, showNullsAsGaps){
  var halfSpaceBetweenPoints, isMoveTo, lastPoint, pathAry, point, point$iterator;
  isMoveTo = true;
  pathAry = new ArrayList;
  if (!points || points.array.length == 0)
    return pathAry;
  lastPoint = null;
  for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
    point = castTo($next_3(point$iterator), 10);
    if (!!point && !$hasNaNs(point)) {
      if (isMoveTo) {
        $add_1(pathAry, new CFPathElement_0(0, point.x_0, point.y_0));
        lastPoint = point;
        isMoveTo = false;
      }
       else if (lastPoint) {
        if (isHorizontalGraph) {
          halfSpaceBetweenPoints = (point.y_0 - lastPoint.y_0) / 2;
          $add_1(pathAry, new CFPathCurveElement(lastPoint.x_0, lastPoint.y_0 + halfSpaceBetweenPoints, point.x_0, point.y_0 - halfSpaceBetweenPoints, point.x_0, point.y_0));
        }
         else {
          halfSpaceBetweenPoints = (point.x_0 - lastPoint.x_0) / 2;
          $add_1(pathAry, new CFPathCurveElement(lastPoint.x_0 + halfSpaceBetweenPoints, lastPoint.y_0, point.x_0 - halfSpaceBetweenPoints, point.y_0, point.x_0, point.y_0));
        }
        lastPoint = point;
      }
    }
     else 
      showNullsAsGaps && (isMoveTo = true);
  }
  return pathAry;
}

function $getCurvePathArray3_0(points, isHorizontalGraph){
  var halfSpaceBetweenPoints, i, index_0, isMoveTo, lastIndex, pathAry;
  isMoveTo = true;
  pathAry = new ArrayList;
  index_0 = $getIndexOfFirstPoint(points);
  if (index_0 == -1)
    return pathAry;
  lastIndex = index_0;
  for (i = index_0; i < points.length; i++) {
    if (points[i]) {
      if (isMoveTo) {
        $add_1(pathAry, new CFPathElement_0(0, points[i].x_0, points[i].y_0));
        lastIndex = i;
        isMoveTo = false;
      }
       else {
        if (isHorizontalGraph) {
          halfSpaceBetweenPoints = (points[i].y_0 - points[lastIndex].y_0) / 2;
          $add_1(pathAry, new CFPathCurveElement(points[lastIndex].x_0, points[lastIndex].y_0 + halfSpaceBetweenPoints, points[i].x_0, points[i].y_0 - halfSpaceBetweenPoints, points[i].x_0, points[i].y_0));
        }
         else {
          halfSpaceBetweenPoints = (points[i].x_0 - points[lastIndex].x_0) / 2;
          $add_1(pathAry, new CFPathCurveElement(points[lastIndex].x_0 + halfSpaceBetweenPoints, points[lastIndex].y_0, points[i].x_0 - halfSpaceBetweenPoints, points[i].y_0, points[i].x_0, points[i].y_0));
        }
        lastIndex = i;
      }
    }
     else 
      isMoveTo = true;
  }
  return pathAry;
}

function $getDouble_3(doubleStr){
  try {
    return __parseAndValidateDouble(doubleStr);
  }
   catch ($e0) {
    $e0 = toJava($e0);
    if (instanceOf($e0, 38)) {
      return 0;
    }
     else 
      throw toJs($e0);
  }
}

function $getHitAreaForLinePath(this$static, margin){
  var areaPath, curveElement, i, lastPoint, pathElement, quadElement, segmentBackwards, segmentForward, xOffsetBkwd, yOffsetBkwd;
  lastPoint = new CFPoint(0, 0);
  segmentForward = new ArrayList;
  segmentBackwards = new ArrayList;
  areaPath = new ArrayList;
  xOffsetBkwd = -margin;
  yOffsetBkwd = -margin;
  for (i = 0; i < this$static.pathAry.size_1(); i++) {
    pathElement = castTo(this$static.pathAry.get_1(i), 11);
    if (pathElement.type_0 == 0) {
      if (segmentForward.array.length > 0) {
        $setX(lastPoint, lastPoint.x_0 + xOffsetBkwd);
        $setY(lastPoint, lastPoint.y_0 + yOffsetBkwd);
        $addSegmentsToAreaPath(segmentForward, segmentBackwards, areaPath, lastPoint);
      }
      $setX(lastPoint, pathElement.x_0);
      $setY(lastPoint, pathElement.y_0);
      $add_1(segmentForward, new CFPathElement_0(0, lastPoint.x_0 + margin, lastPoint.y_0 + margin));
    }
     else if (pathElement.type_0 == 1) {
      $add_0(segmentBackwards, 0, new CFPathElement_0(1, lastPoint.x_0 + xOffsetBkwd, lastPoint.y_0 + yOffsetBkwd));
      $setX(lastPoint, pathElement.x_0);
      $setY(lastPoint, pathElement.y_0);
      $add_1(segmentForward, new CFPathElement_0(1, lastPoint.x_0 + margin, lastPoint.y_0 + margin));
    }
     else if (pathElement.type_0 == 2) {
      quadElement = castTo(pathElement, 94);
      $add_0(segmentBackwards, 0, new CFPathQuadElement(quadElement.ctlX + xOffsetBkwd, quadElement.ctlY + yOffsetBkwd, lastPoint.x_0 + xOffsetBkwd, lastPoint.y_0 + yOffsetBkwd));
      $setX(lastPoint, pathElement.x_0);
      $setY(lastPoint, pathElement.y_0);
      $add_1(segmentForward, new CFPathQuadElement(quadElement.ctlX + margin, quadElement.ctlY + margin, lastPoint.x_0 + margin, lastPoint.y_0 + margin));
    }
     else if (pathElement.type_0 == 3) {
      curveElement = castTo(pathElement, 84);
      $add_0(segmentBackwards, 0, new CFPathCurveElement(curveElement.ctlX2 + xOffsetBkwd, curveElement.ctlY2 + yOffsetBkwd, curveElement.ctlX1 + xOffsetBkwd, curveElement.ctlY1 + yOffsetBkwd, lastPoint.x_0 + xOffsetBkwd, lastPoint.y_0 + yOffsetBkwd));
      $setX(lastPoint, pathElement.x_0);
      $setY(lastPoint, pathElement.y_0);
      $add_1(segmentForward, new CFPathCurveElement(curveElement.ctlX1 + margin, curveElement.ctlY1 + margin, curveElement.ctlX2 + margin, curveElement.ctlY2 + margin, lastPoint.x_0 + margin, lastPoint.y_0 + margin));
    }
  }
  $setX(lastPoint, lastPoint.x_0 + xOffsetBkwd);
  $setY(lastPoint, lastPoint.y_0 + yOffsetBkwd);
  $addSegmentsToAreaPath(segmentForward, segmentBackwards, areaPath, lastPoint);
  return new CFPath_9(areaPath);
}

function $getIndexOfFirstPoint(points){
  var index_0;
  for (index_0 = 0; index_0 < points.length; index_0++) {
    if (points[index_0])
      return index_0;
  }
  return -1;
}

function $getPathArrayForString(pathStr){
  var i, pathAry, pathItemAry;
  if (pathStr.indexOf(',') != -1 && pathStr.indexOf(';') != -1)
    return getPathArrayForComplexString(pathStr);
  pathAry = new ArrayList;
  pathItemAry = $split(pathStr, ' ', 0);
  for (i = 0; i < pathItemAry.length; i++) {
    switch (pathItemAry[i]) {
      case 'R':
        $add_1(pathAry, new CFPathRectElement($getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2]), $getDouble_3(pathItemAry[i + 3]), $getDouble_3(pathItemAry[i + 4])));
        i += 4;
        break;
      case 'M':
        $add_1(pathAry, new CFPathElement_0(0, $getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2])));
        i += 2;
        break;
      case 'L':
        $add_1(pathAry, new CFPathElement_0(1, $getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2])));
        i += 2;
        break;
      case 'C':
        $add_1(pathAry, new CFPathCurveElement($getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2]), $getDouble_3(pathItemAry[i + 3]), $getDouble_3(pathItemAry[i + 4]), $getDouble_3(pathItemAry[i + 5]), $getDouble_3(pathItemAry[i + 6])));
        i += 6;
        break;
      case 'Z':
        $add_1(pathAry, new CFPathElement_0(4, 0, 0));
        break;
      case 'E':
        $add_1(pathAry, new CFPathCircleElement($getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2]), $getDouble_3(pathItemAry[i + 3])));
        i += 4;
        break;
      case 'Q':
        $add_1(pathAry, new CFPathQuadElement($getDouble_3(pathItemAry[i + 1]), $getDouble_3(pathItemAry[i + 2]), $getDouble_3(pathItemAry[i + 3]), $getDouble_3(pathItemAry[i + 4])));
        i += 4;
    }
  }
  return pathAry;
}

function $getPathElement(this$static, index_0){
  if (index_0 >= 0 && index_0 < this$static.pathAry.size_1())
    return castTo(this$static.pathAry.get_1(index_0), 11);
  return null;
}

function $getPathForPointArray(this$static, points, showNullsAsGaps){
  var i, isMoveTo;
  isMoveTo = true;
  if (points.length > 0) {
    for (i = 0; i < points.length; i++) {
      if (points[i]) {
        if (isMoveTo) {
          this$static.pathAry.add_0(new CFPathElement_0(0, points[i].x_0, points[i].y_0));
          isMoveTo = false;
        }
         else {
          this$static.pathAry.add_0(new CFPathElement_0(1, points[i].x_0, points[i].y_0));
        }
      }
       else if (showNullsAsGaps) {
        this$static.pathAry.size_1() > 0 && this$static.pathAry.add_0(new CFPathElement);
        isMoveTo = true;
      }
    }
  }
  return this$static.pathAry;
}

function $getPathForPointList(this$static, points, showNullsAsGaps){
  var isMoveTo, point, point$iterator;
  isMoveTo = true;
  if (points.array.length > 0) {
    for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
      point = castTo($next_3(point$iterator), 10);
      if (!!point && !$hasNaNs(point)) {
        if (isMoveTo) {
          this$static.pathAry.add_0(new CFPathElement_0(0, point.x_0, point.y_0));
          isMoveTo = false;
        }
         else {
          this$static.pathAry.add_0(new CFPathElement_0(1, point.x_0, point.y_0));
        }
      }
       else 
        showNullsAsGaps && (isMoveTo = true);
    }
  }
  return this$static.pathAry;
}

function $getStepPointsForPointsArray(points, isHorizontalGraph, boundsRect, reverseDirection){
  var halfSpaceBetweenPoints, i, index_0, pointAry;
  pointAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, points.length * 2, 0, 1);
  if (!boundsRect || points.length == 0)
    return pointAry;
  index_0 = 0;
  isHorizontalGraph?reverseDirection?(pointAry[index_0++] = new CFPoint(points[0].x_0, boundsRect.y_0 + boundsRect.height_0)):(pointAry[index_0++] = new CFPoint(points[0].x_0, boundsRect.y_0)):reverseDirection?(pointAry[index_0++] = new CFPoint(boundsRect.x_0 + boundsRect.width_0, points[0].y_0)):(pointAry[index_0++] = new CFPoint(boundsRect.x_0, points[0].y_0));
  for (i = 1; i < points.length; i++) {
    if (isHorizontalGraph) {
      halfSpaceBetweenPoints = (points[i].y_0 - points[i - 1].y_0) / 2;
      pointAry[index_0++] = new CFPoint(points[i - 1].x_0, points[i - 1].y_0 + halfSpaceBetweenPoints);
      pointAry[index_0++] = new CFPoint(points[i].x_0, points[i].y_0 - halfSpaceBetweenPoints);
      i == points.length - 1 && (reverseDirection?(pointAry[index_0++] = new CFPoint(points[i].x_0, boundsRect.y_0)):(pointAry[index_0++] = new CFPoint(points[i].x_0, boundsRect.y_0 + boundsRect.height_0)));
    }
     else {
      halfSpaceBetweenPoints = (points[i].x_0 - points[i - 1].x_0) / 2;
      pointAry[index_0++] = new CFPoint(points[i - 1].x_0 + halfSpaceBetweenPoints, points[i - 1].y_0);
      pointAry[index_0++] = new CFPoint(points[i].x_0 - halfSpaceBetweenPoints, points[i].y_0);
      i == points.length - 1 && (reverseDirection?(pointAry[index_0++] = new CFPoint(boundsRect.x_0, points[i].y_0)):(pointAry[index_0++] = new CFPoint(boundsRect.x_0 + boundsRect.width_0, points[i].y_0)));
    }
  }
  return pointAry;
}

function $getStepPointsPath(points, isHorizontalGraph, boundsRect, showNullsAsGaps){
  var i, isMoveTo, pathAry, point, point$iterator;
  pathAry = new ArrayList;
  isMoveTo = true;
  if (!!points && points.array.length > 0) {
    i = 0;
    for (point$iterator = new ArrayList$1(points); point$iterator.i < point$iterator.this$01.array.length;) {
      point = castTo($next_3(point$iterator), 10);
      if (!!point && (isHorizontalGraph && !isNaN_0(point.x_0) || !isHorizontalGraph && !isNaN_0(point.y_0))) {
        if (isMoveTo) {
          $addStepPointSegment(true, points, isHorizontalGraph, boundsRect, pathAry, i);
          isMoveTo = false;
        }
         else {
          $addStepPointSegment(false, points, isHorizontalGraph, boundsRect, pathAry, i);
        }
      }
       else 
        showNullsAsGaps && (isMoveTo = true);
      ++i;
    }
  }
  return pathAry;
}

function $getXRangeForPath(this$static, innerBnds){
  if (this$static.xRange)
    return this$static.xRange;
  $getBoundsForPath(this$static);
  this$static.xRange = new CFRect(this$static.bounds.x_0, innerBnds.y_0, this$static.bounds.width_0, innerBnds.height_0);
  return this$static.xRange;
}

function $getYRangeForPath(this$static, innerBnds){
  if (this$static.yRange)
    return this$static.yRange;
  $getBoundsForPath(this$static);
  this$static.yRange = new CFRect(innerBnds.x_0, this$static.bounds.y_0, innerBnds.width_0, this$static.bounds.height_0);
  return this$static.yRange;
}

function $scale_1(this$static, scaleFactor, originX, originY){
  var i, length_0;
  length_0 = this$static.pathAry.size_1();
  for (i = 0; i < length_0; i++)
    castTo(this$static.pathAry.get_1(i), 11).scale(scaleFactor, originX, originY);
}

function $scaleAndPositionToRect(this$static, bnds){
  var circleEl, curveEl, minX, minY, pathBnds, pe, pe$iterator, quadEl, rectEl, scaleX, scaleY, xOffset, yOffset;
  pathBnds = $getBoundsForPath(this$static);
  pathBnds.width_0 == 0 && (pathBnds.width_0 = 1);
  pathBnds.height_0 == 0 && (pathBnds.height_0 = 1);
  scaleX = bnds.width_0 / pathBnds.width_0;
  scaleY = bnds.height_0 / pathBnds.height_0;
  xOffset = bnds.x_0 - pathBnds.x_0;
  yOffset = bnds.y_0 - pathBnds.y_0;
  minX = pathBnds.x_0;
  minY = pathBnds.y_0;
  for (pe$iterator = this$static.pathAry.iterator(); pe$iterator.hasNext_0();) {
    pe = castTo(pe$iterator.next_1(), 11);
    pe.x_0 = minX + xOffset + (pe.x_0 - minX) * scaleX;
    pe.y_0 = minY + yOffset + (pe.y_0 - minY) * scaleY;
    if (instanceOf(pe, 80)) {
      rectEl = castTo(pe, 80);
      rectEl.width_0 *= scaleX;
      rectEl.height_0 *= scaleY;
    }
     else if (instanceOf(pe, 94)) {
      quadEl = castTo(pe, 94);
      quadEl.ctlX = minX + xOffset + (quadEl.ctlX - minX) * scaleX;
      quadEl.ctlY = minY + yOffset + (quadEl.ctlY - minY) * scaleY;
    }
     else if (instanceOf(pe, 84)) {
      curveEl = castTo(pe, 84);
      curveEl.ctlX1 = minX + xOffset + (curveEl.ctlX1 - minX) * scaleX;
      curveEl.ctlY1 = minY + yOffset + (curveEl.ctlY1 - minY) * scaleY;
      curveEl.ctlX2 = minX + xOffset + (curveEl.ctlX2 - minX) * scaleX;
      curveEl.ctlY2 = minY + yOffset + (curveEl.ctlY2 - minY) * scaleY;
    }
     else if (instanceOf(pe, 112)) {
      circleEl = castTo(pe, 112);
      circleEl.diameter *= scaleX;
    }
  }
  this$static.bounds = null;
  $getBoundsForPath(this$static);
  return this$static;
}

function $setPathAry(this$static, pathAry){
  this$static.bounds = null;
  this$static.pathAry = pathAry;
}

function $translate(this$static, transX, transY){
  var i, length_0;
  length_0 = this$static.pathAry.size_1();
  for (i = 0; i < length_0; i++)
    castTo(this$static.pathAry.get_1(i), 11).translate_0(transX, transY);
}

function $unScale_1(this$static, scaleFactor, originX, originY){
  var i, length_0;
  length_0 = this$static.pathAry.size_1();
  for (i = 0; i < length_0; i++)
    castTo(this$static.pathAry.get_1(i), 11).unScale(scaleFactor, originX, originY);
}

function CFPath(){
  $$init_13(this);
}

function CFPath_0(x_0, y_0, diameter){
  $$init_13(this);
  this.pathAry.add_0(new CFPathCircleElement(x_0, y_0, diameter));
  this.shouldAntiAlias = true;
  this.isCircle = true;
}

function CFPath_1(x_0, y_0, x2, y2){
  $$init_13(this);
  this.pathAry.add_0(new CFPathElement_0(0, x_0, y_0));
  this.pathAry.add_0(new CFPathElement_0(1, x2, y2));
  this.isLine = true;
}

function CFPath_2(x_0, y_0, width_0, height, symbolType){
  var fHalfHeight, fHalfWidth, halfHeight, halfWidth, sRect, sixthHeight, sixthWidth;
  $$init_13(this);
  halfWidth = width_0 / 2;
  halfHeight = height / 2;
  this.shouldAntiAlias = true;
  if (symbolType == 2 || symbolType == 7) {
    sRect = new CFRect(x_0 - halfWidth, y_0 - halfHeight, width_0, height);
    this.pathAry.add_0(new CFPathRectElement_0(sRect));
    this.shouldAntiAlias = false;
  }
   else if (symbolType == 1 || symbolType == 6) {
    this.pathAry.add_0(new CFPathCircleElement_0(x_0, y_0, width_0));
    this.isCircle = true;
  }
   else if (symbolType == 3 || symbolType == 8) {
    this.pathAry.add_0(new CFPathElement_0(0, x_0, y_0 - halfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + halfWidth, y_0 + halfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - halfWidth, y_0 + halfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0, y_0 - halfHeight));
    this.pathAry.add_0(new CFPathElement);
  }
   else if (symbolType == 4 || symbolType == 9) {
    this.pathAry.add_0(new CFPathElement_0(0, x_0, y_0 - halfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + halfWidth, y_0));
    this.pathAry.add_0(new CFPathElement_0(1, x_0, y_0 + halfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - halfWidth, y_0));
    this.pathAry.add_0(new CFPathElement_0(1, x_0, y_0 - halfHeight));
    this.pathAry.add_0(new CFPathElement);
  }
   else if (symbolType == 5 || symbolType == 10) {
    sixthHeight = height / 6;
    sixthWidth = width_0 / 6;
    fHalfHeight = height / 2;
    fHalfWidth = width_0 / 2;
    this.pathAry.add_0(new CFPathElement_0(0, x_0 - fHalfWidth, y_0 + sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - fHalfWidth, y_0 - sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - sixthWidth, y_0 - sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - sixthWidth, y_0 - fHalfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + sixthWidth, y_0 - fHalfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + sixthWidth, y_0 - sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + fHalfWidth, y_0 - sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + fHalfWidth, y_0 + sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + sixthWidth, y_0 + sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 + sixthWidth, y_0 + fHalfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - sixthWidth, y_0 + fHalfHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - sixthWidth, y_0 + sixthHeight));
    this.pathAry.add_0(new CFPathElement_0(1, x_0 - fHalfWidth, y_0 + sixthHeight));
    this.pathAry.add_0(new CFPathElement);
  }
}

function CFPath_3(rect){
  $$init_13(this);
  this.pathAry.add_0(new CFPathRectElement_0(rect));
}

function CFPath_4(rect, cornerRadius){
  var pathStr;
  $$init_13(this);
  pathStr = getRoundedRectPath(rect, cornerRadius);
  this.pathAry = getPathArrayForComplexString(pathStr);
}

function CFPath_5(rect, roundedSide){
  var pathStr;
  $$init_13(this);
  pathStr = getHalfRoundedRectPath(rect, roundedSide);
  this.pathAry = getPathArrayForComplexString(pathStr);
}

function CFPath_6(rect, cornerRadius, point, arrowEdge){
  var pathStr, pathStr_0;
  $$init_13(this);
  pathStr = (pathStr_0 = '' , pathStr_0 += 'm ' + rect.x_0 + ',' + (rect.y_0 + cornerRadius) + '; ' , pathStr_0 += $addLeftCaptionEdge(rect, cornerRadius, point, arrowEdge) , pathStr_0 += 'q ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + cornerRadius) + ',' + (rect.y_0 + rect.height_0) + '; ' , pathStr_0 += $addBottomCaptionEdge(rect, cornerRadius, point, arrowEdge) , pathStr_0 += 'q ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0 - cornerRadius) + '; ' , pathStr_0 += $addRightCaptionEdge(rect, cornerRadius, point, arrowEdge) , pathStr_0 += 'q ' + (rect.x_0 + rect.width_0) + ',' + rect.y_0 + ',' + (rect.x_0 + rect.width_0 - cornerRadius) + ',' + rect.y_0 + '; ' , pathStr_0 += $addTopCaptionEdge(rect, cornerRadius, point, arrowEdge) , pathStr_0 += 'q ' + rect.x_0 + ',' + rect.y_0 + ',' + rect.x_0 + ',' + (rect.y_0 + cornerRadius) + '; ' , pathStr_0 += 'z' , pathStr_0);
  this.pathAry = getPathArrayForComplexString(pathStr);
}

function CFPath_7(pathStr){
  $$init_13(this);
  this.pathAry = $getPathArrayForString(pathStr);
}

function CFPath_8(pathStr){
  $$init_13(this);
  this.pathAry = getPathArrayForMapPathString(pathStr);
}

function CFPath_9(pathAry){
  $$init_13(this);
  this.pathAry = pathAry;
}

function CFPath_10(points, lineStyle, isHorizontalGraph, innerBndsRect){
  CFPath_11.call(this, points, lineStyle, isHorizontalGraph, innerBndsRect, true, false);
}

function CFPath_11(points, lineStyle, isHorizontalGraph, innerBndsRect, hideGaps, forceStyle){
  $$init_13(this);
  this.isLine = true;
  lineStyle == 1 && (points.array.length > 2 || forceStyle)?(this.pathAry = $getCurvePathArray3(points, isHorizontalGraph, !hideGaps)):lineStyle == 2 && (points.array.length > 2 || forceStyle)?(this.pathAry = $getStepPointsPath(points, isHorizontalGraph, innerBndsRect, !hideGaps)):(this.pathAry = $getPathForPointList(this, points, !hideGaps));
}

function CFPath_12(points, closePath){
  $$init_13(this);
  this.pathAry = $getPathForPointList(this, points, false);
  closePath?this.pathAry.add_0(new CFPathElement_0(4, 0, 0)):(this.isLine = true);
}

function CFPath_13(points, closePath){
  $$init_13(this);
  this.pathAry = $getPathForPointArray(this, points, false);
  closePath?this.pathAry.add_0(new CFPathElement_0(4, 0, 0)):(this.isLine = true);
}

function CFPath_14(rects, lineStyle, isHorizontalGraph, innerBndsRect){
  var points;
  $$init_13(this);
  points = $getAreaPointsArray(rects, isHorizontalGraph, lineStyle, innerBndsRect);
  lineStyle == 1 && rects.length > 2?(this.pathAry = $getCurvePathArray3_0(points, isHorizontalGraph)):(this.pathAry = $getPathForPointArray(this, points, true));
  this.pathAry.add_0(new CFPathElement);
}

function applyMatrixToCurvePathElement(ce, a, d, e, f){
  var newX, newY;
  newX = getMatrixVal(ce.x_0, ce.y_0, a, 0, e);
  newY = getMatrixVal(ce.x_0, ce.y_0, 0, d, f);
  ce.x_0 = newX;
  ce.y_0 = newY;
  newX = getMatrixVal(ce.ctlX1, ce.ctlY1, a, 0, e);
  newY = getMatrixVal(ce.ctlX1, ce.ctlY1, 0, d, f);
  ce.ctlX1 = newX;
  ce.ctlY1 = newY;
  newX = getMatrixVal(ce.ctlX2, ce.ctlY2, a, 0, e);
  newY = getMatrixVal(ce.ctlX2, ce.ctlY2, 0, d, f);
  ce.ctlX2 = newX;
  ce.ctlY2 = newY;
}

function arcToBeziers(angleStart, angleExtent){
  var angle, angleIncrement, controlLength, coords, curvePathAry, dx, dy, i, numSegments, pos;
  numSegments = round_int($wnd.Math.ceil($wnd.Math.abs(angleExtent) / 90));
  angleStart = angleStart * $intern_6;
  angleExtent = angleExtent * $intern_6;
  angleIncrement = angleExtent / numSegments;
  controlLength = 1.3333333333333333 * $wnd.Math.sin(angleIncrement / 2) / (1 + $wnd.Math.cos(angleIncrement / 2));
  coords = initUnidimensionalArray(D_classLit, $intern_24, 41, 6, 15, 1);
  curvePathAry = initUnidimensionalArray(Lcom_domo_charting_model_CFPathCurveElement_2_classLit, $intern_9, 84, numSegments, 0, 1);
  for (i = 0; i < numSegments; i++) {
    pos = 0;
    angle = angleStart + i * angleIncrement;
    dx = $wnd.Math.cos(angle);
    dy = $wnd.Math.sin(angle);
    coords[pos++] = dx - controlLength * dy;
    coords[pos++] = dy + controlLength * dx;
    angle += angleIncrement;
    dx = $wnd.Math.cos(angle);
    dy = $wnd.Math.sin(angle);
    coords[pos++] = dx + controlLength * dy;
    coords[pos++] = dy - controlLength * dx;
    coords[pos++] = dx;
    coords[pos++] = dy;
    curvePathAry[i] = new CFPathCurveElement(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]);
  }
  return curvePathAry;
}

function getHalfRoundedRectPath(rect, roundedSide){
  var pathStr;
  pathStr = '';
  if (roundedSide == 1) {
    pathStr += 'm ' + rect.x_0 + ',' + (rect.y_0 + 4) + '; ';
    pathStr += 'l ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0 - 4) + '; ';
    pathStr += 'q ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + 4) + ',' + (rect.y_0 + rect.height_0) + '; ';
  }
   else {
    pathStr += 'm ' + rect.x_0 + ',' + rect.y_0 + '; ';
    pathStr += 'l ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0) + '; ';
  }
  pathStr += 'l ' + (rect.x_0 + rect.width_0 - 4) + ',' + (rect.y_0 + rect.height_0) + '; ';
  if (roundedSide == 0) {
    pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0 - 4) + '; ';
    pathStr += 'l ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + 4) + '; ';
    pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + rect.y_0 + ',' + (rect.x_0 + rect.width_0 - 4) + ',' + rect.y_0 + '; ';
  }
   else {
    pathStr += 'l ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0) + '; ';
    pathStr += 'l ' + (rect.x_0 + rect.width_0) + ',' + rect.y_0 + '; ';
  }
  pathStr += 'l ' + (rect.x_0 + 4) + ',' + rect.y_0 + '; ';
  roundedSide == 1?(pathStr += 'q ' + rect.x_0 + ',' + rect.y_0 + ',' + rect.x_0 + ',' + (rect.y_0 + 4) + '; '):(pathStr += 'l ' + rect.x_0 + ',' + rect.y_0 + '; ');
  pathStr += 'z';
  return pathStr;
}

function getIndexOfNextDelimiter(pathData, startIndex){
  var ch_0, firstDecimalFound, i;
  i = startIndex;
  for (; i < pathData.length; i++) {
    ch_0 = pathData.charCodeAt(i);
    if (/\d/.test(String.fromCharCode(ch_0)) || ch_0 == 46 || ch_0 == 45)
      break;
  }
  firstDecimalFound = false;
  i < pathData.length && pathData.charCodeAt(i) == 46 && (firstDecimalFound = true);
  i < pathData.length && ++i;
  for (; i < pathData.length; i++) {
    ch_0 = pathData.charCodeAt(i);
    if (ch_0 == 101)
      ++i;
    else if (!/\d/.test(String.fromCharCode(ch_0)) && (ch_0 != 46 || firstDecimalFound))
      return i;
    ch_0 == 46 && (firstDecimalFound = true);
  }
  return pathData.length;
}

function getMatrixVal(x_0, y_0, v1, v2, v3){
  return v1 * x_0 + v2 * y_0 + v3;
}

function getPathArrayForComplexString(pathData){
  var comma, currentChar, firstChar, i, pathAry, semi, strLength, valAry, x_0;
  pathAry = new ArrayList;
  if (pathData.length == 0) {
    return pathAry;
  }
  firstChar = pathData.charCodeAt(0);
  if (firstChar != 109 && firstChar != 77) {
    return pathAry;
  }
  valAry = initUnidimensionalArray(D_classLit, $intern_24, 41, 6, 15, 1);
  for (i = 0 , strLength = pathData.length; i < strLength; i++) {
    currentChar = pathData.charCodeAt(i);
    switch (currentChar) {
      case 109:
      case 77:
        {
          semi = $indexOf_0(pathData, fromCodePoint(59), i);
          comma = $indexOf_0(pathData, fromCodePoint(44), i);
          for (x_0 = i + 1; x_0 < semi; x_0++) {
            if (pathData.charCodeAt(x_0) != 32) {
              try {
                valAry[0] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
              }
               catch ($e0) {
                $e0 = toJava($e0);
                if (instanceOf($e0, 38)) {
                  valAry[0] = 0;
                }
                 else 
                  throw toJs($e0);
              }
              try {
                valAry[1] = __parseAndValidateDouble(pathData.substr(comma + 1, semi - (comma + 1)));
              }
               catch ($e1) {
                $e1 = toJava($e1);
                if (instanceOf($e1, 38)) {
                  valAry[1] = 0;
                }
                 else 
                  throw toJs($e1);
              }
              $add_1(pathAry, new CFPathElement_0(0, valAry[0], valAry[1]));
              i = semi;
              break;
            }
          }
          break;
        }

      case 108:
      case 76:
        {
          semi = $indexOf_0(pathData, fromCodePoint(59), i);
          comma = $indexOf_0(pathData, fromCodePoint(44), i);
          for (x_0 = i + 1; x_0 < semi; x_0++) {
            if (pathData.charCodeAt(x_0) != 32) {
              try {
                valAry[0] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
              }
               catch ($e2) {
                $e2 = toJava($e2);
                if (instanceOf($e2, 38)) {
                  valAry[0] = 0;
                }
                 else 
                  throw toJs($e2);
              }
              try {
                valAry[1] = __parseAndValidateDouble(pathData.substr(comma + 1, semi - (comma + 1)));
              }
               catch ($e3) {
                $e3 = toJava($e3);
                if (instanceOf($e3, 38)) {
                  valAry[1] = 0;
                }
                 else 
                  throw toJs($e3);
              }
              $add_1(pathAry, new CFPathElement_0(1, valAry[0], valAry[1]));
              i = semi;
              break;
            }
          }
          break;
        }

      case 113:
      case 81:
        {
          semi = $indexOf_0(pathData, fromCodePoint(59), i);
          comma = $indexOf_0(pathData, fromCodePoint(44), i);
          for (x_0 = i + 1; x_0 < semi; x_0++) {
            if (pathData.charCodeAt(x_0) != 32) {
              try {
                valAry[0] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e4) {
                $e4 = toJava($e4);
                if (instanceOf($e4, 38)) {
                  valAry[0] = 0;
                }
                 else 
                  throw toJs($e4);
              }
              try {
                valAry[1] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e5) {
                $e5 = toJava($e5);
                if (instanceOf($e5, 38)) {
                  valAry[1] = 0;
                }
                 else 
                  throw toJs($e5);
              }
              try {
                valAry[2] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
              }
               catch ($e6) {
                $e6 = toJava($e6);
                if (instanceOf($e6, 38)) {
                  valAry[2] = 0;
                }
                 else 
                  throw toJs($e6);
              }
              try {
                valAry[3] = __parseAndValidateDouble(pathData.substr(comma + 1, semi - (comma + 1)));
              }
               catch ($e7) {
                $e7 = toJava($e7);
                if (instanceOf($e7, 38)) {
                  valAry[3] = 0;
                }
                 else 
                  throw toJs($e7);
              }
              $add_1(pathAry, new CFPathQuadElement(valAry[0], valAry[1], valAry[2], valAry[3]));
              i = semi;
              break;
            }
          }
          break;
        }

      case 99:
      case 67:
        {
          semi = $indexOf_0(pathData, fromCodePoint(59), i);
          comma = $indexOf_0(pathData, fromCodePoint(44), i);
          for (x_0 = i + 1; x_0 < semi; x_0++) {
            if (pathData.charCodeAt(x_0) != 32) {
              try {
                valAry[0] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e8) {
                $e8 = toJava($e8);
                if (instanceOf($e8, 38)) {
                  valAry[0] = 0;
                }
                 else 
                  throw toJs($e8);
              }
              try {
                valAry[1] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e9) {
                $e9 = toJava($e9);
                if (instanceOf($e9, 38)) {
                  valAry[1] = 0;
                }
                 else 
                  throw toJs($e9);
              }
              try {
                valAry[2] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e10) {
                $e10 = toJava($e10);
                if (instanceOf($e10, 38)) {
                  valAry[2] = 0;
                }
                 else 
                  throw toJs($e10);
              }
              try {
                valAry[3] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
                x_0 = comma + 1;
                comma = $indexOf_0(pathData, fromCodePoint(44), x_0);
              }
               catch ($e11) {
                $e11 = toJava($e11);
                if (instanceOf($e11, 38)) {
                  valAry[3] = 0;
                }
                 else 
                  throw toJs($e11);
              }
              try {
                valAry[4] = __parseAndValidateDouble(pathData.substr(x_0, comma - x_0));
              }
               catch ($e12) {
                $e12 = toJava($e12);
                if (instanceOf($e12, 38)) {
                  valAry[4] = 0;
                }
                 else 
                  throw toJs($e12);
              }
              try {
                valAry[5] = __parseAndValidateDouble(pathData.substr(comma + 1, semi - (comma + 1)));
              }
               catch ($e13) {
                $e13 = toJava($e13);
                if (instanceOf($e13, 38)) {
                  valAry[5] = 0;
                }
                 else 
                  throw toJs($e13);
              }
              $add_1(pathAry, new CFPathCurveElement(valAry[0], valAry[1], valAry[2], valAry[3], valAry[4], valAry[5]));
              i = semi;
              break;
            }
          }
          break;
        }

      case 122:
      case 90:
        {
          $add_1(pathAry, new CFPathElement);
          break;
        }

    }
  }
  return pathAry;
}

function getPathArrayForMapPathString(pathData){
  var arcPathAry, currentChar, delimIndex, elem, elem$iterator, firstChar, i, isBezierCurve, lastCtrlX, lastCtrlY, lastCurrentChar, lastMoveToX, lastMoveToY, lastX, lastY, newCtlX, newCtlY, pathAry, startingX, strLength, valAry;
  pathAry = new ArrayList;
  if (pathData == null || pathData.length == 0) {
    return pathAry;
  }
  pathData = $trim(pathData);
  firstChar = pathData.charCodeAt(0);
  if (firstChar != 109 && firstChar != 77) {
    return pathAry;
  }
  valAry = initUnidimensionalArray(D_classLit, $intern_24, 41, 7, 15, 1);
  startingX = NaN;
  lastX = 0;
  lastY = 0;
  lastCtrlX = 0;
  lastCtrlY = 0;
  lastMoveToX = 0;
  lastMoveToY = 0;
  lastCurrentChar = 32;
  for (i = 0 , strLength = pathData.length; i < strLength; i++) {
    currentChar = pathData.charCodeAt(i);
    if (currentChar == 32)
      continue;
    /[A-Z]/i.test(String.fromCharCode(currentChar))?++i:(currentChar = lastCurrentChar);
    isBezierCurve = false;
    switch (currentChar) {
      case 77:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathElement_0(0, valAry[0], valAry[1]));
          lastX = valAry[0];
          lastY = valAry[1];
          lastMoveToX = lastX;
          lastMoveToY = lastY;
          currentChar = 76;
          isNaN_0((checkCriticalNotNull(startingX) , startingX)) && (startingX = lastX);
          break;
        }

      case 109:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathElement_0(0, lastX + valAry[0], lastY + valAry[1]));
          lastX = lastX + valAry[0];
          lastY = lastY + valAry[1];
          lastMoveToX = lastX;
          lastMoveToY = lastY;
          currentChar = 108;
          break;
        }

      case 76:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathElement_0(1, valAry[0], valAry[1]));
          lastX = valAry[0];
          lastY = valAry[1];
          break;
        }

      case 108:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathElement_0(1, lastX + valAry[0], lastY + valAry[1]));
          lastX = lastX + valAry[0];
          lastY = lastY + valAry[1];
          break;
        }

      case 104:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          $add_1(pathAry, new CFPathElement_0(1, lastX + valAry[0], lastY));
          lastX = lastX + valAry[0];
          --i;
          break;
        }

      case 72:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          $add_1(pathAry, new CFPathElement_0(1, valAry[0], lastY));
          lastX = valAry[0];
          --i;
          break;
        }

      case 118:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          $add_1(pathAry, new CFPathElement_0(1, lastX, lastY + valAry[0]));
          lastY = lastY + valAry[0];
          --i;
          break;
        }

      case 86:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          $add_1(pathAry, new CFPathElement_0(1, lastX, valAry[0]));
          lastY = valAry[0];
          --i;
          break;
        }

      case 81:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathQuadElement(valAry[0], valAry[1], valAry[2], valAry[3]));
          lastX = valAry[2];
          lastY = valAry[3];
          lastCtrlX = valAry[0];
          lastCtrlY = valAry[1];
          isBezierCurve = true;
          break;
        }

      case 113:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathQuadElement(lastX + valAry[0], lastY + valAry[1], lastX + valAry[2], lastY + valAry[3]));
          lastCtrlX = lastX + valAry[0];
          lastCtrlY = lastY + valAry[1];
          lastX = lastX + valAry[2];
          lastY = lastY + valAry[3];
          isBezierCurve = true;
          break;
        }

      case 84:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          newCtlX = lastX + (lastX - lastCtrlX);
          newCtlY = lastY + (lastY - lastCtrlY);
          $add_1(pathAry, new CFPathQuadElement(newCtlX, newCtlY, valAry[0], valAry[1]));
          lastCtrlX = newCtlX;
          lastCtrlY = newCtlY;
          lastX = valAry[0];
          lastY = valAry[1];
          isBezierCurve = true;
          break;
        }

      case 116:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          newCtlX = lastX + (lastX - lastCtrlX);
          newCtlY = lastY + (lastY - lastCtrlY);
          $add_1(pathAry, new CFPathQuadElement(newCtlX, newCtlY, lastX + valAry[0], lastY + valAry[1]));
          lastCtrlX = newCtlX;
          lastCtrlY = newCtlY;
          lastX = lastX + valAry[0];
          lastY = lastY + valAry[1];
          isBezierCurve = true;
          break;
        }

      case 67:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[4] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[5] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathCurveElement(valAry[0], valAry[1], valAry[2], valAry[3], valAry[4], valAry[5]));
          lastX = valAry[4];
          lastY = valAry[5];
          lastCtrlX = valAry[2];
          lastCtrlY = valAry[3];
          isBezierCurve = true;
          break;
        }

      case 99:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[4] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[5] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathCurveElement(lastX + valAry[0], lastY + valAry[1], lastX + valAry[2], lastY + valAry[3], lastX + valAry[4], lastY + valAry[5]));
          lastX = lastX + valAry[4];
          lastY = lastY + valAry[5];
          lastCtrlX = valAry[2] - valAry[4];
          lastCtrlY = valAry[3] - valAry[5];
          isBezierCurve = true;
          break;
        }

      case 83:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathCurveElement(lastX - lastCtrlX, lastY - lastCtrlY, valAry[0], valAry[1], valAry[2], valAry[3]));
          lastX = valAry[2];
          lastY = valAry[3];
          lastCtrlX = valAry[0] - valAry[2];
          lastCtrlY = valAry[1] - valAry[3];
          isBezierCurve = true;
          break;
        }

      case 115:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          $add_1(pathAry, new CFPathCurveElement(lastX - lastCtrlX, lastY - lastCtrlY, lastX + valAry[0], lastY + valAry[1], lastX + valAry[2], lastY + valAry[3]));
          lastX = lastX + valAry[2];
          lastY = lastY + valAry[3];
          lastCtrlX = valAry[0] - valAry[2];
          lastCtrlY = valAry[1] - valAry[3];
          isBezierCurve = true;
          break;
        }

      case 65:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[4] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[5] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[6] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          arcPathAry = getPathArrayForSVGArc(lastX, lastY, valAry[0], valAry[1], valAry[2], valAry[3] != 0, valAry[4] != 0, valAry[5], valAry[6]);
          if (arcPathAry) {
            for (elem$iterator = new ArrayList$1(arcPathAry); elem$iterator.i < elem$iterator.this$01.array.length;) {
              elem = castTo($next_3(elem$iterator), 11);
              pathAry.array[pathAry.array.length] = elem;
              instanceOf(elem, 84) && (isBezierCurve = true);
            }
            lastX = valAry[5];
            lastY = valAry[6];
          }
          break;
        }

      case 97:
        {
          delimIndex = getIndexOfNextDelimiter(pathData, i);
          valAry[0] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[1] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[2] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[3] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[4] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[5] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex;
          delimIndex = getIndexOfNextDelimiter(pathData, delimIndex);
          valAry[6] = getValueForSegment(pathData, i, delimIndex);
          i = delimIndex - 1;
          arcPathAry = getPathArrayForSVGArc(lastX, lastY, valAry[0], valAry[1], valAry[2], valAry[3] != 0, valAry[4] != 0, lastX + valAry[5], lastY + valAry[6]);
          if (arcPathAry) {
            for (elem$iterator = new ArrayList$1(arcPathAry); elem$iterator.i < elem$iterator.this$01.array.length;) {
              elem = castTo($next_3(elem$iterator), 11);
              pathAry.array[pathAry.array.length] = elem;
              instanceOf(elem, 84) && (isBezierCurve = true);
            }
            lastX = lastX + valAry[5];
            lastY = lastY + valAry[6];
          }
          break;
        }

      case 122:
      case 90:
        {
          $add_1(pathAry, new CFPathElement);
          --i;
          lastX = lastMoveToX;
          lastY = lastMoveToY;
        }

    }
    if (!isBezierCurve) {
      lastCtrlX = 0;
      lastCtrlY = 0;
    }
    lastCurrentChar = currentChar;
  }
  return pathAry;
}

function getPathArrayForSVGArc(lastX, lastY, rx, ry, angle, largeArcFlag, sweepFlag, x_0, y_0){
  var angleExtent, angleRad, angleStart, arcPathAry, bezierPoints, ce, ce$index, ce$max, coef, cosAngle, cx, cx1, cy, cy1, dx2, dy2, i, n, p, radiiCheck, rx_sq, ry_sq, sign, sinAngle, sq, sx2, sy2, ux, uy, vx, vy, x1, x1_sq, y1, y1_sq;
  arcPathAry = new ArrayList;
  if (lastX == x_0 && lastY == y_0) {
    return null;
  }
  if (rx == 0 || ry == 0) {
    $add_1(arcPathAry, new CFPathElement_0(1, x_0, y_0));
    return arcPathAry;
  }
  rx = $wnd.Math.abs(rx);
  ry = $wnd.Math.abs(ry);
  angleRad = angle % 360 * $intern_6;
  cosAngle = $wnd.Math.cos(angleRad);
  sinAngle = $wnd.Math.sin(angleRad);
  dx2 = (lastX - x_0) / 2;
  dy2 = (lastY - y_0) / 2;
  x1 = cosAngle * dx2 + sinAngle * dy2;
  y1 = -sinAngle * dx2 + cosAngle * dy2;
  rx_sq = rx * rx;
  ry_sq = ry * ry;
  x1_sq = x1 * x1;
  y1_sq = y1 * y1;
  radiiCheck = x1_sq / rx_sq + y1_sq / ry_sq;
  if (radiiCheck > 1) {
    rx = $wnd.Math.sqrt(radiiCheck) * rx;
    ry = $wnd.Math.sqrt(radiiCheck) * ry;
    rx_sq = rx * rx;
    ry_sq = ry * ry;
  }
  sign = largeArcFlag == sweepFlag?-1:1;
  sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);
  sq = sq < 0?0:sq;
  coef = sign * $wnd.Math.sqrt(sq);
  cx1 = coef * (rx * y1 / ry);
  cy1 = coef * -(ry * x1 / rx);
  sx2 = (lastX + x_0) / 2;
  sy2 = (lastY + y_0) / 2;
  cx = sx2 + (cosAngle * cx1 - sinAngle * cy1);
  cy = sy2 + (sinAngle * cx1 + cosAngle * cy1);
  ux = (x1 - cx1) / rx;
  uy = (y1 - cy1) / ry;
  vx = (-x1 - cx1) / rx;
  vy = (-y1 - cy1) / ry;
  n = $wnd.Math.sqrt(ux * ux + uy * uy);
  sign = uy < 0?-1:1;
  angleStart = sign * $wnd.Math.acos(ux / n) * $intern_45;
  n = $wnd.Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
  p = ux * vx + uy * vy;
  sign = ux * vy - uy * vx < 0?-1:1;
  angleExtent = sign * $wnd.Math.acos(p / n) * $intern_45;
  !sweepFlag && angleExtent > 0?(angleExtent -= 360):sweepFlag && angleExtent < 0 && (angleExtent += 360);
  angleExtent %= 360;
  angleStart %= 360;
  bezierPoints = arcToBeziers(angleStart, angleExtent);
  for (ce$index = 0 , ce$max = bezierPoints.length; ce$index < ce$max; ++ce$index) {
    ce = bezierPoints[ce$index];
    applyMatrixToCurvePathElement(ce, rx, ry, 0, 0);
    applyMatrixToCurvePathElement(ce, 1, 1, cx, cy);
    arcPathAry.array[arcPathAry.array.length] = ce;
  }
  for (i = 0; i < bezierPoints.length; i += 6)
  ;
  return arcPathAry;
}

function getPathFromXMLString(pathStr){
  var pathAry;
  pathAry = getPathArrayForMapPathString(pathStr);
  if (pathAry.array.length > 0)
    return new CFPath_9(pathAry);
  return null;
}

function getRoundedRectPath(rect, cornerRadius){
  var pathStr;
  pathStr = '';
  pathStr += 'm ' + rect.x_0 + ',' + (rect.y_0 + cornerRadius) + '; ';
  pathStr += 'l ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0 - cornerRadius) + '; ';
  pathStr += 'q ' + rect.x_0 + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + cornerRadius) + ',' + (rect.y_0 + rect.height_0) + '; ';
  pathStr += 'l ' + (rect.x_0 + rect.width_0 - cornerRadius) + ',' + (rect.y_0 + rect.height_0) + '; ';
  pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0) + ',' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + rect.height_0 - cornerRadius) + '; ';
  pathStr += 'l ' + (rect.x_0 + rect.width_0) + ',' + (rect.y_0 + cornerRadius) + '; ';
  pathStr += 'q ' + (rect.x_0 + rect.width_0) + ',' + rect.y_0 + ',' + (rect.x_0 + rect.width_0 - cornerRadius) + ',' + rect.y_0 + '; ';
  pathStr += 'l ' + (rect.x_0 + cornerRadius) + ',' + rect.y_0 + '; ';
  pathStr += 'q ' + rect.x_0 + ',' + rect.y_0 + ',' + rect.x_0 + ',' + (rect.y_0 + cornerRadius) + '; ';
  pathStr += 'z';
  return pathStr;
}

function getValueForSegment(pathData, startIndex, endIndex){
  var ch_0, i, value_0;
  value_0 = NaN;
  for (i = startIndex; i < pathData.length; i++) {
    ch_0 = pathData.charCodeAt(i);
    if (/\d/.test(String.fromCharCode(ch_0)) || ch_0 == 46 || ch_0 == 45) {
      try {
        value_0 = __parseAndValidateDouble(pathData.substr(i, endIndex - i));
        break;
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 38)) {
          value_0 = 0;
          break;
        }
         else 
          throw toJs($e0);
      }
    }
  }
  return value_0;
}

defineClass(14, 1, {14:1}, CFPath, CFPath_0, CFPath_1, CFPath_2, CFPath_3, CFPath_4, CFPath_5, CFPath_6, CFPath_7, CFPath_8, CFPath_9, CFPath_10, CFPath_11, CFPath_12, CFPath_13, CFPath_14);
_.toString_0 = function toString_14(){
  var curveEl, pe, pe$iterator, quadEl, rectEl, retStr;
  retStr = '';
  for (pe$iterator = this.pathAry.iterator(); pe$iterator.hasNext_0();) {
    pe = castTo(pe$iterator.next_1(), 11);
    if (pe.type_0 == 5) {
      rectEl = castTo(pe, 80);
      retStr += 'RECT ' + rectEl.x_0 + ' ' + rectEl.y_0 + ' ' + rectEl.width_0 + ' ' + rectEl.height_0 + ' ';
    }
     else if (pe.type_0 == 0) {
      retStr += 'M ' + pe.x_0 + ' ' + pe.y_0 + ' ';
    }
     else if (pe.type_0 == 1) {
      retStr += 'L ' + pe.x_0 + ' ' + pe.y_0 + ' ';
    }
     else if (pe.type_0 == 3) {
      curveEl = castTo(pe, 84);
      retStr += 'C ' + curveEl.ctlX1 + ' ' + curveEl.ctlY1 + ' ' + curveEl.ctlX2 + ' ' + curveEl.ctlY2 + ' ' + curveEl.x_0 + ' ' + curveEl.y_0 + ' ';
    }
     else if (pe.type_0 == 2) {
      quadEl = castTo(pe, 94);
      retStr += 'Q ' + quadEl.ctlX + ' ' + quadEl.ctlY + ' ' + quadEl.x_0 + ' ' + quadEl.y_0 + ' ';
    }
     else 
      pe.type_0 == 4 && (retStr += 'Z ');
  }
  return retStr;
}
;
_.isCircle = false;
_.isLine = false;
_.shouldAntiAlias = false;
var arrowLen = 5, halfArrow = 5;
var Lcom_domo_charting_model_CFPath_2_classLit = createForClass('com.domo.charting.model', 'CFPath', 14);
function CFPathElement(){
  this.type_0 = 4;
}

function CFPathElement_0(type_0, x_0, y_0){
  this.type_0 = type_0;
  this.x_0 = x_0;
  this.y_0 = y_0;
}

function CFPathElement_1(type_0, point){
  this.type_0 = type_0;
  this.x_0 = point.x_0;
  this.y_0 = point.y_0;
}

defineClass(11, 1, {11:1}, CFPathElement, CFPathElement_0, CFPathElement_1);
_.duplicate = function duplicate(){
  return new CFPathElement_0(this.type_0, this.x_0, this.y_0);
}
;
_.scale = function scale_0(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
}
;
_.translate_0 = function translate(transX, transY){
  this.x_0 += transX;
  this.y_0 += transY;
}
;
_.unScale = function unScale(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
}
;
_.type_0 = 0;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_domo_charting_model_CFPathElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathElement', 11);
function CFPathArcElement(x_0, y_0, radius, startAngle, endAngle){
  CFPathElement_0.call(this, 7, x_0, y_0);
  this.radius = radius;
  this.startAngle = startAngle;
  this.endAngle = endAngle;
}

function CFPathArcElement_0(x_0, y_0, radius, startAngle, endAngle, counterClockwise){
  CFPathElement_0.call(this, 7, x_0, y_0);
  this.radius = radius;
  this.startAngle = startAngle;
  this.endAngle = endAngle;
  this.counterClockwise = counterClockwise;
}

defineClass(115, 11, {115:1, 11:1}, CFPathArcElement, CFPathArcElement_0);
_.duplicate = function duplicate_0(){
  return new CFPathArcElement_0(this.x_0, this.y_0, this.radius, this.startAngle, this.endAngle, this.counterClockwise);
}
;
_.scale = function scale_1(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
  this.radius = scaleFactor * this.radius;
}
;
_.unScale = function unScale_0(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
  this.radius = this.radius / scaleFactor;
}
;
_.counterClockwise = false;
_.endAngle = 0;
_.radius = 0;
_.startAngle = 0;
var Lcom_domo_charting_model_CFPathArcElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathArcElement', 115);
function CFPathCircleElement(x_0, y_0, diameter){
  CFPathElement_0.call(this, 6, x_0, y_0);
  this.diameter = diameter;
}

function CFPathCircleElement_0(x_0, y_0, diameter){
  CFPathElement_0.call(this, 6, x_0 - diameter / 2, y_0 - diameter / 2);
  this.diameter = diameter;
}

defineClass(112, 11, {112:1, 11:1}, CFPathCircleElement, CFPathCircleElement_0);
_.duplicate = function duplicate_1(){
  return new CFPathCircleElement(this.x_0, this.y_0, this.diameter);
}
;
_.scale = function scale_2(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
  this.diameter = scaleFactor * this.diameter;
}
;
_.unScale = function unScale_1(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
  this.diameter = this.diameter / scaleFactor;
}
;
_.diameter = 0;
var Lcom_domo_charting_model_CFPathCircleElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathCircleElement', 112);
function CFPathCurveElement(ctlX1, ctlY1, ctlX2, ctlY2, endX, endY){
  CFPathElement_0.call(this, 3, endX, endY);
  this.ctlX1 = ctlX1;
  this.ctlY1 = ctlY1;
  this.ctlX2 = ctlX2;
  this.ctlY2 = ctlY2;
}

defineClass(84, 11, {84:1, 11:1}, CFPathCurveElement);
_.duplicate = function duplicate_2(){
  return new CFPathCurveElement(this.ctlX1, this.ctlY1, this.ctlX2, this.ctlY2, this.x_0, this.y_0);
}
;
_.scale = function scale_3(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
  this.ctlX1 = scaleFactor * (this.ctlX1 + originX);
  this.ctlY1 = scaleFactor * (this.ctlY1 + originY);
  this.ctlX2 = scaleFactor * (this.ctlX2 + originX);
  this.ctlY2 = scaleFactor * (this.ctlY2 + originY);
}
;
_.translate_0 = function translate_0(transX, transY){
  this.x_0 += transX;
  this.y_0 += transY;
  this.ctlX1 += transX;
  this.ctlY1 += transY;
  this.ctlX2 += transX;
  this.ctlY2 += transY;
}
;
_.unScale = function unScale_2(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
  this.ctlX1 = this.ctlX1 / scaleFactor - originX;
  this.ctlY1 = this.ctlY1 / scaleFactor - originY;
  this.ctlX2 = this.ctlX2 / scaleFactor - originX;
  this.ctlY2 = this.ctlY2 / scaleFactor - originY;
}
;
_.ctlX1 = 0;
_.ctlX2 = 0;
_.ctlY1 = 0;
_.ctlY2 = 0;
var Lcom_domo_charting_model_CFPathCurveElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathCurveElement', 84);
function CFPathQuadElement(ctlX, ctlY, endX, endY){
  CFPathElement_0.call(this, 2, endX, endY);
  this.ctlX = ctlX;
  this.ctlY = ctlY;
}

defineClass(94, 11, {11:1, 94:1}, CFPathQuadElement);
_.duplicate = function duplicate_3(){
  return new CFPathQuadElement(this.ctlX, this.ctlY, this.x_0, this.y_0);
}
;
_.scale = function scale_4(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
  this.ctlX = scaleFactor * (this.ctlX + originX);
  this.ctlY = scaleFactor * (this.ctlY + originY);
}
;
_.translate_0 = function translate_1(transX, transY){
  this.x_0 += transX;
  this.y_0 += transY;
  this.ctlX += transX;
  this.ctlY += transY;
}
;
_.unScale = function unScale_3(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
  this.ctlX = this.ctlX / scaleFactor - originX;
  this.ctlY = this.ctlY / scaleFactor - originY;
}
;
_.ctlX = 0;
_.ctlY = 0;
var Lcom_domo_charting_model_CFPathQuadElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathQuadElement', 94);
function CFPathRectElement(x_0, y_0, width_0, height){
  CFPathElement_0.call(this, 5, x_0, y_0);
  this.width_0 = width_0;
  this.height_0 = height;
}

function CFPathRectElement_0(rect){
  CFPathElement_0.call(this, 5, rect.x_0, rect.y_0);
  this.width_0 = rect.width_0;
  this.height_0 = rect.height_0;
}

defineClass(80, 11, {11:1, 80:1}, CFPathRectElement, CFPathRectElement_0);
_.duplicate = function duplicate_4(){
  return new CFPathRectElement(this.x_0, this.y_0, this.width_0, this.height_0);
}
;
_.scale = function scale_5(scaleFactor, originX, originY){
  this.x_0 = scaleFactor * (this.x_0 + originX);
  this.y_0 = scaleFactor * (this.y_0 + originY);
  this.width_0 = scaleFactor * this.width_0;
  this.height_0 = scaleFactor * this.height_0;
}
;
_.unScale = function unScale_4(scaleFactor, originX, originY){
  this.x_0 = this.x_0 / scaleFactor - originX;
  this.y_0 = this.y_0 / scaleFactor - originY;
  this.width_0 = this.width_0 / scaleFactor;
  this.height_0 = this.height_0 / scaleFactor;
}
;
_.height_0 = 0;
_.width_0 = 0;
var Lcom_domo_charting_model_CFPathRectElement_2_classLit = createForClass('com.domo.charting.model', 'CFPathRectElement', 80);
function $duplicate_4(this$static){
  return new CFPoint(this$static.x_0, this$static.y_0);
}

function $equals_1(this$static, other){
  if (this$static.x_0 == other.x_0 && this$static.y_0 == other.y_0)
    return true;
  return false;
}

function $hasNaNs(this$static){
  if (isNaN_0(this$static.x_0) || isNaN_0(this$static.y_0))
    return true;
  return false;
}

function $sameRoundedPoint(this$static, other){
  if (!!other && eq(fromDouble_0($wnd.Math.round(this$static.x_0)), fromDouble_0($wnd.Math.round(other.x_0))) && eq(fromDouble_0($wnd.Math.round(this$static.y_0)), fromDouble_0($wnd.Math.round(other.y_0))))
    return true;
  return false;
}

function $scale_2(this$static, scaleFactor, originX, originY){
  this$static.x_0 = scaleFactor * (this$static.x_0 + originX);
  this$static.y_0 = scaleFactor * (this$static.y_0 + originY);
}

function $setX(this$static, value_0){
  this$static.x_0 = value_0;
}

function $setY(this$static, value_0){
  this$static.y_0 = value_0;
}

function $unScale_2(this$static, scaleFactor, originX, originY){
  this$static.x_0 = this$static.x_0 / scaleFactor - originX;
  this$static.y_0 = this$static.y_0 / scaleFactor - originY;
}

function CFPoint(x_0, y_0){
  this.x_0 = x_0;
  this.y_0 = y_0;
}

function CFPoint_0(other){
  this.x_0 = other.x_0;
  this.y_0 = other.y_0;
}

function getAnimPoint(startPoint, endPoint, percentComplete){
  var newX, newY;
  if (!!startPoint && !!endPoint) {
    newX = startPoint.x_0 + (endPoint.x_0 - startPoint.x_0) * percentComplete;
    newY = startPoint.y_0 + (endPoint.y_0 - startPoint.y_0) * percentComplete;
    return new CFPoint(newX, newY);
  }
  return null;
}

defineClass(10, 1, {10:1}, CFPoint, CFPoint_0);
_.toString_0 = function toString_15(){
  return '' + this.x_0 + ',' + this.y_0;
}
;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_domo_charting_model_CFPoint_2_classLit = createForClass('com.domo.charting.model', 'CFPoint', 10);
function $containsPoint(this$static, pointX, pointY){
  if (pointX >= this$static.x_0 && pointY >= this$static.y_0 && pointX <= this$static.x_0 + this$static.width_0 && pointY <= this$static.y_0 + this$static.height_0)
    return true;
  return false;
}

function $containsPoint_0(this$static, point){
  if (point.x_0 >= this$static.x_0 && point.y_0 >= this$static.y_0 && point.x_0 <= this$static.x_0 + this$static.width_0 && point.y_0 <= this$static.y_0 + this$static.height_0)
    return true;
  return false;
}

function $containsRect(this$static, rect){
  if (rect.x_0 >= this$static.x_0 && rect.y_0 >= this$static.y_0 && rect.x_0 + rect.width_0 <= this$static.x_0 + this$static.width_0 && rect.y_0 + rect.height_0 <= this$static.y_0 + this$static.height_0)
    return true;
  return false;
}

function $duplicate_5(this$static){
  return new CFRect(this$static.x_0, this$static.y_0, this$static.width_0, this$static.height_0);
}

function $extendToIncludePoint(this$static, point){
  var bottom, newX, newY, right;
  if (point) {
    newX = point.x_0 < this$static.x_0?point.x_0:this$static.x_0;
    newY = point.y_0 < this$static.y_0?point.y_0:this$static.y_0;
    right = point.x_0 > this$static.x_0 + this$static.width_0?point.x_0:this$static.x_0 + this$static.width_0;
    bottom = point.y_0 > this$static.y_0 + this$static.height_0?point.y_0:this$static.y_0 + this$static.height_0;
    this$static.x_0 = newX;
    this$static.y_0 = newY;
    this$static.width_0 = right - newX;
    this$static.height_0 = bottom - newY;
  }
}

function $extendToIncludeRect(this$static, previousBounds){
  var bottom, right, x_0, y_0;
  if (previousBounds) {
    x_0 = previousBounds.x_0 < this$static.x_0?previousBounds.x_0:this$static.x_0;
    y_0 = previousBounds.y_0 < this$static.y_0?previousBounds.y_0:this$static.y_0;
    right = previousBounds.x_0 + previousBounds.width_0 > this$static.x_0 + this$static.width_0?previousBounds.x_0 + previousBounds.width_0:this$static.x_0 + this$static.width_0;
    bottom = previousBounds.y_0 + previousBounds.height_0 > this$static.y_0 + this$static.height_0?previousBounds.y_0 + previousBounds.height_0:this$static.y_0 + this$static.height_0;
    return new CFRect(x_0, y_0, right - x_0, bottom - y_0);
  }
  return this$static;
}

function $getBottom(this$static){
  return this$static.y_0 + this$static.height_0;
}

function $getCenterPoint(this$static){
  return new CFPoint(this$static.x_0 + this$static.width_0 / 2, this$static.y_0 + this$static.height_0 / 2);
}

function $getCenterX(this$static){
  return this$static.x_0 + this$static.width_0 / 2;
}

function $getCenterY(this$static){
  return this$static.y_0 + this$static.height_0 / 2;
}

function $getInflated(this$static, amount){
  var newHeight, newWidth, newX, newY;
  newWidth = this$static.width_0 + amount * 2;
  newHeight = this$static.height_0 + amount * 2;
  newX = this$static.x_0 - amount;
  newY = this$static.y_0 - amount;
  return new CFRect(newX, newY, newWidth, newHeight);
}

function $getPath_0(this$static){
  var path;
  path = new CFPath;
  $add(path, new CFPathRectElement(this$static.x_0, this$static.y_0, this$static.width_0, this$static.height_0));
  return path;
}

function $getRight(this$static){
  return this$static.x_0 + this$static.width_0;
}

function $hasZeroHeightOrWidth(this$static){
  if (this$static.height_0 == 0 || this$static.width_0 == 0)
    return true;
  return false;
}

function $inflate(this$static, amount){
  this$static.width_0 = this$static.width_0 + amount * 2;
  this$static.height_0 = this$static.height_0 + amount * 2;
  this$static.x_0 -= amount;
  this$static.y_0 -= amount;
}

function $inflateHeight(this$static, amount){
  this$static.height_0 = this$static.height_0 + amount * 2;
  this$static.y_0 -= amount;
}

function $inflateWidth(this$static, amount){
  this$static.width_0 = this$static.width_0 + amount * 2;
  this$static.x_0 -= amount;
}

function $intersects(this$static, otherRect){
  if (!otherRect)
    return false;
  return !(otherRect.x_0 > this$static.x_0 + this$static.width_0 || otherRect.x_0 + otherRect.width_0 < this$static.x_0 || otherRect.y_0 > this$static.y_0 + this$static.height_0 || otherRect.y_0 + otherRect.height_0 < this$static.y_0);
}

function $intersectsWithList(this$static, existing){
  var test_0, test$iterator;
  if (existing) {
    for (test$iterator = new ArrayList$1(existing); test$iterator.i < test$iterator.this$01.array.length;) {
      test_0 = castTo($next_3(test$iterator), 4);
      if ($intersects(this$static, test_0))
        return true;
    }
  }
  return false;
}

function $keepRectInsideOtherRect(this$static, otherRect){
  this$static.y_0 + this$static.height_0 > otherRect.y_0 + otherRect.height_0 && $setBottom(this$static, otherRect.y_0 + otherRect.height_0);
  this$static.x_0 + this$static.width_0 > otherRect.x_0 + otherRect.width_0 && $setRight(this$static, otherRect.x_0 + otherRect.width_0);
  this$static.y_0 < otherRect.y_0 && (this$static.y_0 = otherRect.y_0);
  this$static.x_0 < otherRect.x_0 && (this$static.x_0 = otherRect.x_0);
}

function $offset(this$static, xOffset, yOffset){
  this$static.x_0 = this$static.x_0 + xOffset;
  this$static.y_0 = this$static.y_0 + yOffset;
}

function $setBottom(this$static, value_0){
  this$static.y_0 = value_0 - this$static.height_0;
}

function $setCenterX(this$static, center){
  this$static.x_0 = center - this$static.width_0 / 2;
}

function $setCenterY(this$static, center){
  this$static.y_0 = center - this$static.height_0 / 2;
}

function $setDimensions_0(this$static, x_0, y_0, width_0, height){
  this$static.x_0 = x_0;
  this$static.y_0 = y_0;
  this$static.width_0 = width_0;
  this$static.height_0 = height;
}

function $setHeight(this$static, value_0){
  this$static.height_0 = value_0;
}

function $setRight(this$static, value_0){
  this$static.x_0 = value_0 - this$static.width_0;
}

function $setWidth(this$static, value_0){
  this$static.width_0 = value_0;
}

function $setX_0(this$static, value_0){
  this$static.x_0 = value_0;
}

function $setY_0(this$static, value_0){
  this$static.y_0 = value_0;
}

function CFRect(x_0, y_0, width_0, height){
  $setDimensions_0(this, x_0, y_0, width_0, height);
}

function CFRect_0(source){
  $setDimensions_0(this, source.x_0, source.y_0, source.width_0, source.height_0);
}

function getAnimRectAll(startRect, endRect, percentComplete){
  var animHeight, animLeft, animTop, animWidth;
  animTop = startRect.y_0 - (startRect.y_0 - endRect.y_0) * percentComplete;
  animHeight = startRect.height_0 - (startRect.height_0 - endRect.height_0) * percentComplete;
  animLeft = startRect.x_0 + (endRect.x_0 - startRect.x_0) * percentComplete;
  animWidth = startRect.width_0 - (startRect.width_0 - endRect.width_0) * percentComplete;
  return new CFRect(animLeft, animTop, animWidth, animHeight);
}

function getAnimRectLeftWidthWithEndTopHeight(startRect, endRect, percentComplete){
  var animLeft, animWidth;
  animWidth = startRect.width_0 - (startRect.width_0 - endRect.width_0) * percentComplete;
  animLeft = startRect.x_0 + (endRect.x_0 - startRect.x_0) * percentComplete;
  return new CFRect(animLeft, endRect.y_0, animWidth, endRect.height_0);
}

function getAnimRectLeftWidthWithStartTopHeight(startRect, endRect, percentComplete){
  var animLeft, animWidth;
  animLeft = startRect.x_0 + (endRect.x_0 - startRect.x_0) * percentComplete;
  animWidth = startRect.width_0 - (startRect.width_0 - endRect.width_0) * percentComplete;
  return new CFRect(animLeft, startRect.y_0, animWidth, startRect.height_0);
}

function getAnimRectTopHeightWithEndLeftWidth(startRect, endRect, percentComplete){
  var animHeight, animTop;
  animHeight = startRect.height_0 - (startRect.height_0 - endRect.height_0) * percentComplete;
  animTop = startRect.y_0 - (startRect.y_0 - endRect.y_0) * percentComplete;
  return new CFRect(endRect.x_0, animTop, endRect.width_0, animHeight);
}

function getAnimRectTopHeightWithStartLeftWidth(startRect, endRect, percentComplete){
  var animHeight, animTop;
  animTop = startRect.y_0 - (startRect.y_0 - endRect.y_0) * percentComplete;
  animHeight = startRect.height_0 - (startRect.height_0 - endRect.height_0) * percentComplete;
  return new CFRect(startRect.x_0, animTop, startRect.width_0, animHeight);
}

defineClass(4, 1, {4:1}, CFRect, CFRect_0);
_.toString_0 = function toString_16(){
  return '' + this.x_0 + ', ' + this.y_0 + ', ' + this.width_0 + ', ' + this.height_0;
}
;
_.height_0 = 0;
_.width_0 = 0;
_.x_0 = 0;
_.y_0 = 0;
var Lcom_domo_charting_model_CFRect_2_classLit = createForClass('com.domo.charting.model', 'CFRect', 4);
function $addNode(this$static, node){
  var nodeToAddTo;
  nodeToAddTo = $chooseNodeToAddTo(this$static, node);
  if (nodeToAddTo) {
    $addNodeToThisNode(nodeToAddTo, node);
    $updateDimensions(nodeToAddTo);
  }
}

function $addNodeToThisNode(this$static, node){
  if (this$static.nodes.array.length < 10) {
    $add_1(this$static.nodes, node);
    node.parent_0 = this$static;
  }
   else 
    $splitNode(this$static, node);
}

function $chooseNodeToAddTo(this$static, nodeToAdd){
  var areaDifference, containingNode, i, minAreaIncrease, node, nodeToUse;
  if (!this$static.nodes)
    return this$static.parent_0;
  containingNode = $getNodeContainingRect(this$static, nodeToAdd);
  if (containingNode) {
    return !containingNode.nodes?containingNode.parent_0:containingNode;
  }
  if (this$static.nodes.array.length > 0) {
    nodeToUse = castTo($get_2(this$static.nodes, 0), 107);
    if (!nodeToUse.nodes)
      return this$static;
    minAreaIncrease = $increaseInAreaByAddingNode(nodeToUse, nodeToAdd);
    for (i = 1; i < this$static.nodes.array.length; i++) {
      node = castTo($get_2(this$static.nodes, i), 107);
      areaDifference = $increaseInAreaByAddingNode(node, nodeToAdd);
      if (areaDifference < minAreaIncrease) {
        minAreaIncrease = areaDifference;
        nodeToUse = node;
      }
    }
    return $chooseNodeToAddTo(nodeToUse, nodeToAdd);
  }
  return this$static;
}

function $divideNode(this$static, nodeToAdd){
  var first, furthest, furthestInCurrentNode, i, i0, newNode, node, testXY, testXY2, xy;
  first = castTo($get_2(this$static.nodes, 0), 107);
  furthest = nodeToAdd;
  xy = $getXYdifference(first, nodeToAdd);
  furthestInCurrentNode = false;
  for (i0 = 1; i0 < this$static.nodes.array.length; i0++) {
    node = castTo($get_2(this$static.nodes, i0), 107);
    testXY = $getXYdifference(first, node);
    if (testXY > xy) {
      furthest = node;
      furthestInCurrentNode = true;
    }
  }
  newNode = new CFRNode_0;
  if (furthestInCurrentNode) {
    $add_1(newNode.nodes, furthest);
    furthest.parent_0 = newNode;
    $remove_3(this$static.nodes, furthest);
    $add_1(this$static.nodes, nodeToAdd);
    nodeToAdd.parent_0 = this$static;
  }
   else {
    $add_1(newNode.nodes, nodeToAdd);
    nodeToAdd.parent_0 = newNode;
  }
  for (i = 1; i < this$static.nodes.array.length; i++) {
    node = castTo($get_2(this$static.nodes, i), 107);
    testXY = $getXYdifference(first, node);
    testXY2 = $getXYdifference(furthest, node);
    if (testXY2 < testXY) {
      $add_1(newNode.nodes, node);
      node.parent_0 = newNode;
      $remove_2(this$static.nodes, i);
      --i;
    }
  }
  $updateDimensions(newNode);
  $updateDimensions(this$static);
  return newNode;
}

function $getNodeContainingRect(this$static, testRect){
  var node, node$iterator, resultNode;
  if ($intersects(this$static, testRect)) {
    if (!this$static.nodes)
      return this$static;
    else {
      for (node$iterator = new ArrayList$1(this$static.nodes); node$iterator.i < node$iterator.this$01.array.length;) {
        node = castTo($next_3(node$iterator), 107);
        if ($intersects(node, testRect)) {
          resultNode = $getNodeContainingRect(node, testRect);
          if (resultNode)
            return resultNode;
        }
      }
    }
  }
  return null;
}

function $getXYdifference(this$static, second){
  var X, Y;
  X = second.x_0 - this$static.x_0;
  X < 0 && (X = -X);
  Y = second.y_0 - this$static.y_0;
  Y < 0 && (Y = -Y);
  return X + Y;
}

function $increaseInAreaByAddingNode(this$static, nodeToAdd){
  var currentArea, newArea, newRect;
  currentArea = this$static.width_0 * this$static.height_0;
  newRect = new CFRect(this$static.x_0, this$static.y_0, this$static.width_0, this$static.height_0);
  nodeToAdd.x_0 < newRect.x_0 && (newRect.x_0 = nodeToAdd.x_0);
  nodeToAdd.y_0 < newRect.y_0 && (newRect.y_0 = nodeToAdd.y_0);
  nodeToAdd.x_0 + nodeToAdd.width_0 > this$static.x_0 + this$static.width_0 && $setWidth(newRect, nodeToAdd.x_0 + nodeToAdd.width_0 - newRect.x_0);
  nodeToAdd.y_0 + nodeToAdd.height_0 > newRect.y_0 + newRect.height_0 && $setHeight(newRect, nodeToAdd.y_0 + nodeToAdd.height_0 - newRect.y_0);
  newArea = newRect.width_0 * newRect.height_0;
  return newArea - currentArea;
}

function $splitNode(this$static, nodeToAdd){
  var newNode, node, node$iterator;
  if (!this$static.parent_0) {
    newNode = new CFRNode_0;
    newNode.parent_0 = this$static;
    for (node$iterator = new ArrayList$1(this$static.nodes); node$iterator.i < node$iterator.this$01.array.length;) {
      node = castTo($next_3(node$iterator), 107);
      $add_1(newNode.nodes, node);
      node.parent_0 = newNode;
    }
    this$static.nodes = new ArrayList_0(10);
    $add_1(this$static.nodes, newNode);
    $splitNode(newNode, nodeToAdd);
  }
   else {
    newNode = $divideNode(this$static, nodeToAdd);
    $addNodeToThisNode(this$static.parent_0, newNode);
    $updateDimensions(this$static.parent_0);
  }
}

function $updateDimensionUsingNode(this$static, node){
  var newHeight, newWidth;
  if (maskUndefined(node) === maskUndefined($get_2(this$static.nodes, 0)))
    $setDimensions_0(this$static, node.x_0, node.y_0, node.width_0, node.height_0);
  else {
    if (node.x_0 < this$static.x_0) {
      newWidth = this$static.width_0 + (this$static.x_0 - node.x_0);
      this$static.x_0 = node.x_0;
      this$static.width_0 = newWidth;
    }
    if (node.y_0 < this$static.y_0) {
      newHeight = this$static.height_0 + (this$static.y_0 - node.y_0);
      this$static.y_0 = node.y_0;
      this$static.height_0 = newHeight;
    }
    node.x_0 + node.width_0 > this$static.x_0 + this$static.width_0 && $setWidth(this$static, node.x_0 + node.width_0 - this$static.x_0);
    node.y_0 + node.height_0 > this$static.y_0 + this$static.height_0 && $setHeight(this$static, node.y_0 + node.height_0 - this$static.y_0);
  }
}

function $updateDimensions(this$static){
  var curDimensions, node, node$iterator;
  curDimensions = new CFRect_0(this$static);
  if (this$static.nodes.array.length > 0) {
    for (node$iterator = new ArrayList$1(this$static.nodes); node$iterator.i < node$iterator.this$01.array.length;) {
      node = castTo($next_3(node$iterator), 107);
      $updateDimensionUsingNode(this$static, node);
    }
  }
  !(this$static.x_0 == curDimensions.x_0 && this$static.y_0 == curDimensions.y_0 && this$static.width_0 == curDimensions.width_0 && this$static.height_0 == curDimensions.height_0) && !!this$static.parent_0 && $updateDimensions(this$static.parent_0);
}

function CFRNode(theRect){
  CFRect.call(this, theRect.x_0, theRect.y_0, theRect.width_0, theRect.height_0);
}

function CFRNode_0(){
  this.nodes = new ArrayList_0(10);
}

defineClass(107, 4, {107:1, 4:1}, CFRNode, CFRNode_0);
var Lcom_domo_charting_model_CFRNode_2_classLit = createForClass('com.domo.charting.model', 'CFRNode', 107);
function $canHavePointInPath(this$static){
  if (!!this$static.fill_0 && this$static.fill_0.noMouse && this$static.hoverText == null && this$static.drillFilter == null)
    return false;
  if (!!this$static.stroke_0 && this$static.stroke_0.noMouse && this$static.hoverText == null && this$static.drillFilter == null)
    return false;
  if (!this$static.isClip && !!this$static.path) {
    if (this$static.path.isLine)
      return false;
    return true;
  }
  return false;
}

function $containsBounds(this$static, x_0, y_0, width_0, height, rnd){
  if ($pointInPath_0(this$static, x_0, y_0, rnd) && $pointInPath_0(this$static, x_0 + width_0, y_0, rnd) && $pointInPath_0(this$static, x_0, y_0 + height, rnd) && $pointInPath_0(this$static, x_0 + width_0, y_0 + height, rnd))
    return true;
  return false;
}

function $draw_6(this$static, rnd){
  var endPoint, filter, startPoint;
  if (this$static.isClip)
    rnd.setOrClearClip(this$static.path);
  else if (!!this$static.path && this$static.path.pathAry.size_1() > 0) {
    if (this$static.path.isLine && !!this$static.stroke_0 && this$static.stroke_0.onOffArray != null) {
      startPoint = $getPathElement(this$static.path, 0);
      endPoint = $getPathElement(this$static.path, this$static.path.pathAry.size_1() - 1);
      if (!$pointWithinReasonableDrawingSpace(startPoint.x_0, startPoint.y_0) || !$pointWithinReasonableDrawingSpace(endPoint.x_0, endPoint.y_0)) {
        $clinit_System();
        return;
      }
    }
    (this$static.path.pathAry.size_1() == 0 || castTo(this$static.path.pathAry.get_1(0), 11).type_0 != 0 && castTo(this$static.path.pathAry.get_1(0), 11).type_0 != 5 && castTo(this$static.path.pathAry.get_1(0), 11).type_0 != 6 && castTo(this$static.path.pathAry.get_1(0), 11).type_0 != 7) && ($clinit_System() , out_0);
    filter = this$static.drillFilter;
    filter != null && $equals_2(filter, '{"filters":[null]}') && (filter = null);
    this$static.rotation != 0?rnd.drawShapeRotated(this$static.path, this$static.fill_0, this$static.stroke_0, this$static.hoverText, filter, this$static.rotation, this$static.rotationPt):rnd.drawShape(this$static.path, this$static.fill_0, this$static.stroke_0, this$static.hoverText, filter);
  }
}

function $duplicate_6(this$static){
  var dupShape;
  dupShape = new CFShape;
  !!this$static.path && (dupShape.path = $duplicate_3(this$static.path));
  !!this$static.fill_0 && (dupShape.fill_0 = $duplicate_1(this$static.fill_0));
  !!this$static.stroke_0 && (dupShape.stroke_0 = $duplicate_7(this$static.stroke_0));
  dupShape.type_0 = this$static.type_0;
  dupShape.isClip = this$static.isClip;
  dupShape.rotation = this$static.rotation;
  dupShape.rotationPt = this$static.rotationPt;
  dupShape.drillFilter = this$static.drillFilter;
  dupShape.hoverText = this$static.hoverText;
  dupShape.comp = this$static.comp;
  dupShape.dataObject = this$static.dataObject;
  return dupShape;
}

function $fillIsColor(this$static, color_0){
  if (!this$static.fill_0 || !this$static.fill_0.color_0)
    return false;
  return $equals_0(this$static.fill_0.color_0, color_0);
}

function $freeResources_31(this$static){
  this$static.fill_0 = null;
  this$static.stroke_0 = null;
  !!this$static.path && $freeResources_30(this$static.path);
  this$static.path = null;
  this$static.type_0 = null;
  this$static.rotationPt = null;
  this$static.drillFilter = null;
  this$static.hoverText = null;
  this$static.comp = null;
  this$static.dataObject != null && instanceOf(this$static.dataObject, 42) && castTo(this$static.dataObject, 42).clear_0();
  this$static.dataObject = null;
}

function $getHoverTextOrRODatalabel(this$static){
  if (this$static.hoverText != null) {
    return this$static.hoverText;
  }
  return null;
}

function $getRect(this$static){
  var rectElem;
  if ($isRect(this$static)) {
    rectElem = castTo(this$static.path.pathAry.get_1(0), 80);
    return new CFRect(rectElem.x_0, rectElem.y_0, rectElem.width_0, rectElem.height_0);
  }
  return null;
}

function $isRect(this$static){
  if (!!this$static.path && !!this$static.path.pathAry)
    return this$static.path.pathAry.size_1() == 1 && instanceOf(this$static.path.pathAry.get_1(0), 80);
  return false;
}

function $pointInPath_0(this$static, x_0, y_0, rnd){
  if ($canHavePointInPath(this$static))
    return rnd.pointInPath(x_0, y_0, this$static.path);
  return false;
}

function $pointWithinReasonableDrawingSpace(x_0, y_0){
  if (x_0 > 20000 || x_0 < -20000 || y_0 > 20000 || y_0 < -20000)
    return false;
  return true;
}

function $setDataObject_0(this$static, object){
  this$static.dataObject = object;
}

function $setDrillFilter_0(this$static, url_0){
  this$static.drillFilter = url_0;
}

function $setFill(this$static, color_0){
  this$static.fill_0 = new CFFill(color_0);
}

function $setFill_0(this$static, fill){
  this$static.fill_0 = fill;
}

function $setHoverText_8(this$static, hoverText){
  this$static.hoverText = hoverText;
}

function $setPath(this$static, path){
  this$static.path = path;
}

function $setRotation(this$static, value_0){
  this$static.rotation = value_0;
}

function $setRotationPoint(this$static, value_0){
  this$static.rotationPt = value_0;
}

function $setStroke(this$static, stroke){
  this$static.stroke_0 = stroke;
}

function CFShape(){
}

function CFShape_0(path, fill, stroke){
  this.path = path;
  this.fill_0 = fill;
  this.stroke_0 = stroke;
}

function CFShape_1(rect, fill, stroke){
  this.path = new CFPath;
  $add(this.path, new CFPathRectElement_0(rect));
  this.fill_0 = fill;
  this.stroke_0 = stroke;
}

defineClass(6, 1, {6:1}, CFShape, CFShape_0, CFShape_1);
_.isClip = false;
_.rotation = 0;
var Lcom_domo_charting_model_CFShape_2_classLit = createForClass('com.domo.charting.model', 'CFShape', 6);
function $clinit_CFStroke(){
  $clinit_CFStroke = emptyMethod;
  TRANSPARENT_1 = new CFStroke(($clinit_CFColor() , TRANSPARENT), 1);
  new CFStroke(RED, 1);
}

function $duplicate_7(this$static){
  var dupStroke;
  dupStroke = new CFStroke($duplicate_0(this$static.color_0), this$static.width_0);
  dupStroke.noMouse = this$static.noMouse;
  dupStroke.onOffArray = this$static.onOffArray;
  dupStroke.join_0 = this$static.join_0;
  return dupStroke;
}

function $scale_3(this$static, scaleFactor){
  var i;
  this$static.width_0 = this$static.width_0 * scaleFactor;
  if (this$static.onOffArray != null) {
    for (i = 0; i < this$static.onOffArray.length; i++)
      this$static.onOffArray[i] = this$static.onOffArray[i] * scaleFactor;
  }
}

function $setColor_2(this$static, color_0){
  this$static.color_0 = color_0;
}

function $setStyle_0(this$static, style){
  this$static.onOffArray = null;
  if (style != 0) {
    switch (style) {
      case 1:
        this$static.onOffArray = stampJavaTypeInfo(getClassLiteralForArray(F_classLit, 1), $intern_24, 41, 15, [6, 5]);
        break;
      case 2:
        this$static.onOffArray = stampJavaTypeInfo(getClassLiteralForArray(F_classLit, 1), $intern_24, 41, 15, [1, 2]);
        break;
      case 3:
        this$static.onOffArray = stampJavaTypeInfo(getClassLiteralForArray(F_classLit, 1), $intern_24, 41, 15, [6, 3, 2, 3]);
    }
  }
}

function $setWidth_0(this$static, value_0){
  this$static.width_0 = value_0;
}

function $unScale_3(this$static, scaleFactor){
  var i;
  this$static.width_0 = this$static.width_0 / scaleFactor;
  if (this$static.onOffArray != null) {
    for (i = 0; i < this$static.onOffArray.length; i++)
      this$static.onOffArray[i] = this$static.onOffArray[i] / scaleFactor;
  }
}

function CFStroke(color_0, width_0){
  $clinit_CFStroke();
  this.color_0 = color_0;
  this.width_0 = width_0;
}

function CFStroke_0(color_0, width_0){
  $clinit_CFStroke();
  this.color_0 = color_0;
  this.width_0 = width_0;
  this.join_0 = 3;
}

function CFStroke_1(colorStr, width_0){
  $clinit_CFStroke();
  this.color_0 = new CFColor_2(colorStr);
  this.width_0 = width_0;
}

function CFStroke_2(width_0){
  $clinit_CFStroke();
  this.color_0 = new CFColor_2('FFFFFF80');
  this.width_0 = width_0;
  this.join_0 = 3;
}

function getOutlineStroke(fill, stroke){
  $clinit_CFStroke();
  var strokeClr;
  if (!!fill && !!fill.color_0) {
    strokeClr = $duplicate_0(fill.color_0);
    strokeClr.alpha_0 = 255;
    return new CFStroke(strokeClr, 1);
  }
  return stroke;
}

defineClass(20, 388, {}, CFStroke, CFStroke_0, CFStroke_1, CFStroke_2);
_.toString_0 = function toString_17(){
  return '' + this.width_0 + ' ' + $toString_0(this.color_0);
}
;
_.join_0 = 0;
_.width_0 = 0;
var TRANSPARENT_1;
var Lcom_domo_charting_model_CFStroke_2_classLit = createForClass('com.domo.charting.model', 'CFStroke', 20);
function $draw_7(this$static, rnd){
  var pos;
  pos = new CFPoint(this$static.x_0, this$static.y_0);
  this$static.alignToTop && (pos.y_0 += $getCapHeightInt(this$static.font_0, rnd));
  rnd.drawText(this$static.text_0, this$static.font_0, pos, this$static.rotation);
}

function $setFont(this$static, font){
  this$static.font_0 = font;
}

function CFTextItem(rnd, boundingRect, text_0, font, hAlign, vAlign){
  var textDim, x_0, y_0;
  x_0 = round_int(boundingRect.x_0);
  y_0 = boundingRect.y_0;
  if (rnd) {
    textDim = rnd.measureText_0(text_0, font);
    hAlign == HALIGN_CENTER?(x_0 = boundingRect.x_0 + boundingRect.width_0 / 2 - textDim.width_0 / 2):hAlign == HALIGN_RIGHT && (x_0 = boundingRect.x_0 + boundingRect.width_0 - textDim.width_0);
    vAlign == VALIGN_MIDDLE?(y_0 = boundingRect.y_0 + boundingRect.height_0 / 2 - textDim.height_0 / 2):vAlign == VALIGN_BOTTOM && (y_0 = boundingRect.y_0 + boundingRect.height_0 - textDim.height_0);
    this.x_0 = round_int(x_0);
    this.y_0 = round_int(y_0 + textDim.height_0 * 0.8);
  }
  this.text_0 = text_0;
  this.font_0 = font;
}

function CFTextItem_0(text_0, font, x_0, y_0){
  this.text_0 = text_0;
  this.font_0 = font;
  this.x_0 = x_0;
  this.y_0 = y_0;
}

function CFTextItem_1(text_0, font, x_0, y_0, rotation){
  this.text_0 = text_0;
  this.font_0 = font;
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.rotation = rotation;
}

function CFTextItem_2(text_0, font, x_0, y_0){
  this.text_0 = text_0;
  this.font_0 = font;
  this.x_0 = x_0;
  this.y_0 = y_0;
  this.alignToTop = true;
}

function getHorizontalAlignFromString(alignStr){
  var result;
  result = 0;
  if (alignStr != null) {
    alignStr = alignStr.toLowerCase();
    $equals_2(alignStr, 'right')?(result = HALIGN_RIGHT):$equals_2(alignStr, 'center') && (result = HALIGN_CENTER);
  }
  return result;
}

defineClass(26, 1, {26:1}, CFTextItem, CFTextItem_0, CFTextItem_1, CFTextItem_2);
_.alignToTop = false;
_.rotation = 0;
_.x_0 = 0;
_.y_0 = 0;
var HALIGN_CENTER = 1, HALIGN_RIGHT = 2, VALIGN_BOTTOM = 2, VALIGN_MIDDLE = 1;
var Lcom_domo_charting_model_CFTextItem_2_classLit = createForClass('com.domo.charting.model', 'CFTextItem', 26);
function $cardBusEvent_0(this$static, message){
  $cardBusEvent(this$static.renderer, message);
}

function $chartStateChanged_1(this$static, chartState){
  $chartStateChanged(this$static.renderer, chartState);
}

function $clearCanvas_1(this$static){
  return $clearCanvas(this$static.renderer);
}

function $createNewAnnotation_0(this$static, category){
  $createNewAnnotation(this$static.renderer, category);
}

function $log_0(this$static, message){
  $log(message);
}

function $logMetric_0(this$static, metric, properties){
  $logMetric(this$static.renderer, metric, properties);
}

function $measureText_0(this$static, text_0, font){
  var result;
  if (this$static.scaleFactor != 1) {
    !!font && $scale_0(font, this$static.scaleFactor);
    result = $measureText(this$static.renderer, text_0, font);
    !!font && $unScale_0(font, this$static.scaleFactor);
    $unScale(result, this$static.scaleFactor);
    return result;
  }
  return $measureText(this$static.renderer, text_0, font);
}

function $performDrill_0(this$static, drillFilter){
  return $performDrill(this$static.renderer, drillFilter);
}

function $pointInPath_1(this$static, x_0, y_0, path){
  var result;
  if (this$static.scaleFactor != 1 || this$static.originX != 0 || this$static.originY != 0) {
    x_0 = this$static.scaleFactor * (x_0 + this$static.originX);
    y_0 = this$static.scaleFactor * (y_0 + this$static.originY);
    !!path && $scale_1(path, this$static.scaleFactor, this$static.originX, this$static.originY);
    result = $pointInPath(this$static.renderer, x_0, y_0, path);
    !!path && $unScale_1(path, this$static.scaleFactor, this$static.originX, this$static.originY);
    return result;
  }
   else 
    return $pointInPath(this$static.renderer, x_0, y_0, path);
}

function $setCursorToDrillEnabled_0(this$static, filter){
  $setCursorToDrillEnabled(this$static.renderer, filter);
}

function $setDefaultFontName_0(this$static, name_0){
  $setDefaultFontName(this$static.renderer, name_0);
}

function $setRenderer_0(this$static, rnd){
  this$static.renderer = rnd;
}

function $setScaleFactor_0(this$static, newFactor){
  this$static.scaleFactor = newFactor;
}

function $showHoverText_0(this$static, x_0, y_0, hoverText){
  if (this$static.scaleFactor != 1 || this$static.originX != 0 || this$static.originY != 0) {
    x_0 = round_int(this$static.scaleFactor * (x_0 + this$static.originX));
    y_0 = round_int(this$static.scaleFactor * (y_0 + this$static.originY));
  }
  $showHoverText(this$static.renderer, x_0, y_0, hoverText);
}

function IRendererScale(rnd){
  this.renderer = rnd;
}

defineClass(285, 1, {}, IRendererScale);
_.deleteAnnotation_0 = function deleteAnnotation_0(id_0){
  $deleteAnnotation(this.renderer, id_0);
}
;
_.displayAnnotations = function displayAnnotations_0(hintRect, annotationJSON){
  $displayAnnotations(this.renderer, hintRect, annotationJSON);
}
;
_.drawShape = function drawShape_0(path, fill, stroke, hoverText, drillFilter){
  if (this.scaleFactor != 1 || this.originX != 0 || this.originY != 0) {
    !!path && $scale_1(path, this.scaleFactor, this.originX, this.originY);
    !!stroke && $scale_3(stroke, this.scaleFactor);
    $drawShape(this.renderer, path, fill, stroke);
    !!stroke && $unScale_3(stroke, this.scaleFactor);
    !!path && $unScale_1(path, this.scaleFactor, this.originX, this.originY);
  }
   else 
    $drawShape(this.renderer, path, fill, stroke);
}
;
_.drawShapeRotated = function drawShapeRotated_0(path, fill, stroke, hoverText, drillFilter, rotation, rotationPt){
  if (this.scaleFactor != 1 || this.originX != 0 || this.originY != 0) {
    !!path && $scale_1(path, this.scaleFactor, this.originX, this.originY);
    !!stroke && $scale_3(stroke, this.scaleFactor);
    !!rotationPt && $scale_2(rotationPt, this.scaleFactor, this.originX, this.originY);
    $drawShapeRotated(this.renderer, path, fill, stroke, hoverText, drillFilter, rotation, rotationPt);
    !!stroke && $unScale_3(stroke, this.scaleFactor);
    !!path && $unScale_1(path, this.scaleFactor, this.originX, this.originY);
    !!rotationPt && $unScale_2(rotationPt, this.scaleFactor, this.originX, this.originY);
  }
   else 
    $drawShapeRotated(this.renderer, path, fill, stroke, hoverText, drillFilter, rotation, rotationPt);
}
;
_.drawText = function drawText_0(text_0, font, position, rotation){
  if (this.scaleFactor != 1 || this.originX != 0 || this.originY != 0) {
    !!font && $scale_0(font, this.scaleFactor);
    $scale_2(position, this.scaleFactor, this.originX, this.originY);
    $drawText(this.renderer, text_0, font, position, rotation);
    !!font && $unScale_0(font, this.scaleFactor);
    $unScale_2(position, this.scaleFactor, this.originX, this.originY);
  }
   else 
    $drawText(this.renderer, text_0, font, position, rotation);
}
;
_.editMapData = function editMapData_0(names, codes, longNames, altNames, altCodes){
}
;
_.groupMapItems = function groupMapItems_0(itemNames){
}
;
_.log_0 = function log_2(message){
  $log_0(this, message);
}
;
_.measureText_0 = function measureText_0(text_0, font){
  return $measureText_0(this, text_0, font);
}
;
_.pointInPath = function pointInPath_1(x_0, y_0, path){
  return $pointInPath_1(this, x_0, y_0, path);
}
;
_.setCanvasSize = function setCanvasSize_0(width_0, height){
  $setCanvasSize(this.renderer, width_0, height);
}
;
_.setOrClearClip = function setOrClearClip_0(path){
  if (this.scaleFactor != 1 || this.originX != 0 || this.originY != 0) {
    !!path && $scale_1(path, this.scaleFactor, this.originX, this.originY);
    $setOrClearClip(this.renderer, path);
    !!path && $unScale_1(path, this.scaleFactor, this.originX, this.originY);
  }
   else 
    $setOrClearClip(this.renderer, path);
}
;
_.setOrigin = function setOrigin_0(x_0, y_0){
  this.originX = x_0;
  this.originY = y_0;
}
;
_.showCancelZoomIndicator = function showCancelZoomIndicator_0(show){
}
;
_.showHoverText = function showHoverText_0(x_0, y_0, hoverText){
  $showHoverText_0(this, x_0, y_0, hoverText);
}
;
_.supportsCanvasResize = function supportsCanvasResize_0(){
  return $supportsCanvasResize(this.renderer);
}
;
_.supportsNativeAnnotations_0 = function supportsNativeAnnotations_0(){
  return this.renderer.supportsNativeAnnotations;
}
;
_.supportsNativeCancelZoom = function supportsNativeCancelZoom_0(){
  return false;
}
;
_.supportsNativeEditMapData = function supportsNativeEditMapData_0(){
  return false;
}
;
_.supportsNativeGroupMapItems = function supportsNativeGroupMapItems_0(){
  return false;
}
;
_.supportsNativeHover = function supportsNativeHover_0(){
  return this.renderer.supportsNativeHoverEvents;
}
;
_.originX = 0;
_.originY = 0;
_.scaleFactor = 1;
var Lcom_domo_charting_renderer_IRendererScale_2_classLit = createForClass('com.domo.charting.renderer', 'IRendererScale', 285);
function $addTitleIfExists(this$static, rnd, ge){
  var ti, titleRect, titleStr, titleTextItem;
  if (this$static.title_0 != null && !this$static.isHidden && !this$static.hideLabels) {
    titleStr = ($clinit_StrUtil() , entityDecodeString(this$static.title_0));
    titleStr = convertBrToNewLine(titleStr);
    ti = getWrappedTextForWidthWithMaxLines(rnd, titleStr, this$static.labelFont, this$static.getLength(), -1, 1);
    titleRect = $getInnerBoundsRect(this$static);
    titleTextItem = null;
    if (this$static.position == 1) {
      $setY_0(titleRect, $getBottom(this$static.bnds));
      titleTextItem = new CFTextItem(rnd, titleRect, $getStringForIndex(ti), this$static.labelFont, HALIGN_CENTER, VALIGN_BOTTOM);
    }
     else if (this$static.position == 3) {
      $setY_0(titleRect, this$static.bnds.y_0);
      titleTextItem = new CFTextItem(rnd, titleRect, $getStringForIndex(ti), this$static.labelFont, HALIGN_CENTER, 0);
    }
     else 
      this$static.position == 0?(titleTextItem = new CFTextItem_1($getStringForIndex(ti), this$static.labelFont, round_int(this$static.bnds.x_0 + $getLineHeight(this$static.labelFont, rnd)), round_int(titleRect.y_0 + titleRect.height_0 / 2 + ti.textDimension.width_0 / 2), -90)):this$static.position == 2 && (titleTextItem = new CFTextItem_1($getStringForIndex(ti), this$static.labelFont, round_int($getRight(this$static.bnds) - ($getDescender(this$static.labelFont, rnd) + 1)), round_int(titleRect.y_0 + titleRect.height_0 / 2 + ti.textDimension.width_0 / 2), -90));
    !ge.textAry && (ge.textAry = new ArrayList);
    $add_1(ge.textAry, titleTextItem);
    return ti.textDimension;
  }
  return null;
}

function $drawBaseline(this$static){
  var ge, innerBnds;
  ge = new GraphicElement;
  innerBnds = $getInnerBoundsRect(this$static);
  this$static.position == 1?$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, innerBnds.y_0, innerBnds.x_0 + innerBnds.width_0, innerBnds.y_0), null, this$static.majorGridLineStroke)):this$static.position == 0?$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0 + innerBnds.width_0, innerBnds.y_0, innerBnds.x_0 + innerBnds.width_0, innerBnds.y_0 + innerBnds.height_0), null, this$static.majorGridLineStroke)):this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, innerBnds.y_0 + innerBnds.height_0, innerBnds.x_0 + innerBnds.width_0, innerBnds.y_0 + innerBnds.height_0), null, this$static.majorGridLineStroke)):this$static.position == 2 && $addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, innerBnds.y_0, innerBnds.x_0, innerBnds.y_0 + innerBnds.height_0), null, this$static.majorGridLineStroke));
  $add_1(this$static.geAry, ge);
}

function $format_7(this$static, rnd, numRows, numCols, formatPass){
  var grphBnds;
  this$static.clearGeArrays();
  !this$static.bnds && (grphBnds = this$static.graph.bnds , this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2?(this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0)):(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)));
  this$static.labelList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  this$static.displayRotated = false;
  this$static.formatSubClassSpecific(rnd, numRows, numCols, formatPass);
  this$static.setPadding(rnd, numRows);
  if (!this$static.isHidden || this$static.graph.allowAnnotationSpaceWithHiddenScales) {
    this$static.setDimensions(rnd);
    this$static.setMargins(rnd, numRows);
  }
  if (this$static.startMargin < this$static.minSize || this$static.endMargin < this$static.minSize) {
    this$static.startMargin < this$static.minSize && (this$static.startMargin = this$static.minSize);
    this$static.endMargin < this$static.minSize && (this$static.endMargin = this$static.minSize);
  }
}

function $freeResources_32(this$static){
  this$static.graph = null;
  clearGraphicElementArray(this$static.geAry);
  clearGraphicElementArray(this$static.backGeAry);
  clearGraphicElementArray(this$static.frontGeAry);
  this$static.geAry = null;
  this$static.backGeAry = null;
  this$static.frontGeAry = null;
  !!this$static.rowsToDisplay && this$static.rowsToDisplay.clear_0();
  this$static.rowsToDisplay = null;
  !!this$static.labelList && (this$static.labelList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.labelList = null;
  this$static.title_0 = null;
  this$static.labelFont = null;
  this$static.bnds = null;
  this$static.majorGridLineStroke = null;
}

function $getAdjacentScale(this$static){
  var retScl;
  retScl = null;
  switch (this$static.position) {
    case 0:
    case 2:
      retScl = $getScaleByPosition(this$static.graph, 1);
      !retScl && (retScl = $getScaleByPosition(this$static.graph, 3));
      break;
    case 3:
    case 1:
      retScl = $getScaleByPosition(this$static.graph, 0);
      !retScl && (retScl = $getScaleByPosition(this$static.graph, 2));
  }
  return retScl;
}

function $getBoundsRectWithAdjust(this$static, startAdjust, endAdjust){
  var innerRect;
  innerRect = null;
  this$static.position == 1?(innerRect = new CFRect(this$static.bnds.x_0 + startAdjust, this$static.bnds.y_0, this$static.bnds.width_0 - endAdjust, 0)):this$static.position == 0?(innerRect = new CFRect($getRight(this$static.bnds), this$static.bnds.y_0 + startAdjust, 0, this$static.bnds.height_0 - endAdjust)):this$static.position == 3?(innerRect = new CFRect(this$static.bnds.x_0 + startAdjust, $getBottom(this$static.bnds), this$static.bnds.width_0 - endAdjust, 0)):this$static.position == 2 && (innerRect = new CFRect(this$static.bnds.x_0, this$static.bnds.y_0 + startAdjust, 0, this$static.bnds.height_0 - endAdjust));
  return innerRect;
}

function $getInnerBoundsRect(this$static){
  var endAdjust, innerRect, startAdjust;
  innerRect = null;
  if (this$static.bnds) {
    startAdjust = this$static.startMargin + this$static.startPadding;
    endAdjust = this$static.startMargin + this$static.endMargin + (this$static.startPadding + this$static.endPadding);
    innerRect = $getBoundsRectWithAdjust(this$static, startAdjust, endAdjust);
  }
  return innerRect;
}

function $getInnerBoundsRectWithPadding(this$static){
  var endAdjust, innerRect, startAdjust;
  innerRect = null;
  if (this$static.bnds) {
    startAdjust = this$static.startMargin;
    endAdjust = this$static.startMargin + this$static.endMargin;
    innerRect = $getBoundsRectWithAdjust(this$static, startAdjust, endAdjust);
  }
  return innerRect;
}

function $getLength(this$static){
  var length_0;
  length_0 = this$static.graph.bnds.width_0;
  (this$static.position == 0 || this$static.position == 2) && (length_0 = this$static.graph.bnds.height_0);
  return length_0 - (this$static.startMargin + this$static.endMargin);
}

function $getMarginBoundsRect(this$static){
  var endAdjust, innerRect, startAdjust;
  innerRect = null;
  if (this$static.bnds) {
    startAdjust = this$static.startMargin;
    endAdjust = this$static.startMargin + this$static.endMargin;
    innerRect = $getBoundsRectWithAdjust(this$static, startAdjust, endAdjust);
  }
  return innerRect;
}

function $getPositionForString(value_0){
  var position;
  position = -1;
  $equalsIgnoreCase(value_0, 'top')?(position = 3):$equalsIgnoreCase(value_0, 'bottom')?(position = 1):$equalsIgnoreCase(value_0, 'left')?(position = 0):$equalsIgnoreCase(value_0, 'right') && (position = 2);
  return position;
}

function $getRectForCenteredLabel(this$static, pos, labelDimension){
  var halfTextHeight, halfTextWidth, rect, textHeight, textWidth;
  textWidth = labelDimension.width_0;
  halfTextWidth = textWidth / 2;
  textHeight = labelDimension.height_0;
  halfTextHeight = textHeight / 2;
  this$static.position == 1?(rect = new CFRect(pos - halfTextWidth, this$static.bnds.y_0 + this$static.labelMargin, textWidth + this$static.labelMargin, textHeight)):this$static.position == 3?(rect = new CFRect(pos - halfTextWidth, $getBottom(this$static.bnds) - (textHeight + this$static.labelMargin), textWidth + this$static.labelMargin, textHeight)):this$static.position == 0?(rect = new CFRect($getRight(this$static.bnds) - textWidth - this$static.labelMargin, pos - halfTextHeight, textWidth, textHeight)):(rect = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, pos - halfTextHeight, textWidth, textHeight));
  return rect;
}

function $getTextItemForPositionAndRect(this$static, rnd, text_0, rect){
  var textItem;
  textItem = null;
  this$static.position == 1?(textItem = new CFTextItem(rnd, rect, text_0, this$static.labelFont, 0, 0)):this$static.position == 3?(textItem = new CFTextItem(rnd, rect, text_0, this$static.labelFont, 0, VALIGN_BOTTOM)):this$static.position == 0?(textItem = new CFTextItem(rnd, rect, text_0, this$static.labelFont, HALIGN_RIGHT, VALIGN_MIDDLE)):this$static.position == 2 && (textItem = new CFTextItem(rnd, rect, text_0, this$static.labelFont, 0, VALIGN_MIDDLE));
  return textItem;
}

function $getTitleHeight(this$static, rnd){
  var titleHeight;
  titleHeight = 0;
  this$static.title_0 != null && !this$static.isHidden && !this$static.hideLabels && (titleHeight = $getLineHeight(this$static.labelFont, rnd) + this$static.titleLabelMargin);
  return titleHeight;
}

function $limitDataIfNeeded(this$static, numRows){
  $setRowsToDisplayToAllVisibleRows(this$static);
  numRows = this$static.rowsToDisplay.size_1();
  return numRows;
}

function $reset_4(this$static){
  this$static.startMargin = 0;
  this$static.endMargin = 0;
  this$static.startPadding = 0;
  this$static.endPadding = 0;
}

function $setEndMargin(this$static, margin){
  this$static.endMargin = margin;
}

function $setHiddenLabels(this$static, value_0){
  this$static.hideLabels = value_0;
}

function $setLabelFont(this$static, font){
  this$static.labelFont = font;
}

function $setPosition(this$static, value_0){
  this$static.position = value_0;
}

function $setPostionOverride(this$static, value_0){
  var overridePosition;
  overridePosition = -1;
  $equalsIgnoreCase(value_0, 'top')?(overridePosition = 3):$equalsIgnoreCase(value_0, 'bottom') && (overridePosition = 1);
  this$static.positionOverride = overridePosition;
}

function $setRowsToDisplayToAllVisibleRows(this$static){
  var row;
  this$static.rowsToDisplay = new ArrayList;
  if (this$static.graph.data_0) {
    row = $getFirstVisibleRow(this$static.graph.data_0);
    while (row) {
      this$static.rowsToDisplay.add_0(row);
      row = $getNextVisibleRow(this$static.graph.data_0, row);
    }
  }
}

function $setStartMargin(this$static, margin){
  this$static.startMargin = margin;
}

function $setTitle(this$static, value_0){
  this$static.title_0 = value_0;
}

function $setType_1(this$static, value_0){
  this$static.type_0 = value_0;
}

function Scale(position, grph, isSecondary){
  this.geAry = new ArrayList;
  this.backGeAry = new ArrayList;
  this.frontGeAry = new ArrayList;
  this.labelList = new ArrayList;
  this.position = position;
  this.type_0 = 0;
  this.graph = grph;
  this.isSecondary = isSecondary;
  this.majorGridLineStroke = new CFStroke($getScaleLineColor(this.graph.chart.palette), 1);
  this.labelFont = new CFFont_0(null, 11, $getTextColor(this.graph.chart.palette));
}

function getOppositePosition(position){
  switch (position) {
    default:case 0:
      return 2;
    case 2:
      return 0;
    case 3:
      return 1;
    case 1:
      return 3;
  }
}

defineClass(53, 1, {53:1});
_.addLabels = function addLabels(rnd){
}
;
_.clearGeArrays = function clearGeArrays(){
  clearGraphicElementArray(this.backGeAry);
  clearGraphicElementArray(this.geAry);
  clearGraphicElementArray(this.frontGeAry);
}
;
_.createGridDrawObjects = function createGridDrawObjects(rnd){
}
;
_.format_1 = function format_35(rnd, numRows, numCols, formatPass){
  $format_7(this, rnd, numRows, numCols, formatPass);
}
;
_.formatSubClassSpecific = function formatSubClassSpecific(rnd, numRows, numCols, formatPass){
}
;
_.freeResources_0 = function freeResources_55(){
  $freeResources_32(this);
}
;
_.getIsLineType = function getIsLineType(){
  if (instanceOf(this, 36))
    return castTo(this, 36).isLineType;
  return false;
}
;
_.getLength = function getLength(){
  return $getLength(this);
}
;
_.getZeroPosition = function getZeroPosition(){
  return this.getMinPosition();
}
;
_.setDimensions = function setDimensions(rnd){
}
;
_.setHoverEffects_1 = function setHoverEffects_19(hoverData, rnd, seriesIndex){
  return false;
}
;
_.setMargins = function setMargins(rnd, numRows){
}
;
_.setNeedsFormat_0 = function setNeedsFormat_9(){
  this.bnds = null;
}
;
_.setPadding = function setPadding(rnd, numRows){
}
;
_.displayRotated = false;
_.drawBaseline = false;
_.endMargin = 0;
_.endPadding = 0;
_.hideGrids = false;
_.hideLabels = false;
_.isHidden = false;
_.isSecondary = false;
_.labelMargin = 5;
_.minSize = 0;
_.position = 0;
_.positionOverride = -1;
_.startMargin = 0;
_.startPadding = 0;
_.titleLabelMargin = 5;
_.type_0 = 0;
var ST_CATEGORY = 1, ST_MINMAX = 3;
var Lcom_domo_charting_scales_Scale_2_classLit = createForClass('com.domo.charting.scales', 'Scale', 53);
function $setBuffer(this$static, theBuffer){
  this$static.buffer = theBuffer;
}

function BufferScale(position, grph){
  Scale.call(this, position, grph, false);
}

defineClass(129, 53, {129:1, 53:1}, BufferScale);
_.getMinPosition = function getMinPosition(){
  return 0;
}
;
_.getPositionForValue = function getPositionForValue(value_0){
  return 0;
}
;
_.setDimensions = function setDimensions_0(rnd){
  this.isHidden || (this.position == 1 || this.position == 3?$setHeight(this.bnds, this.buffer):$setWidth(this.bnds, this.buffer));
}
;
_.buffer = 0;
var Lcom_domo_charting_scales_BufferScale_2_classLit = createForClass('com.domo.charting.scales', 'BufferScale', 129);
function $addDrilldownOverlayShape(this$static, rect, labelTI, dim, lineHeight){
  var curFilter, data_0, drillShape, drillStrs, filter, filterBase, geDD, lenPt, path, widthPt, x_0, y_0;
  data_0 = labelTI.data_0;
  if (!!data_0 && !!data_0) {
    drillShape = new CFShape_1(rect, ($clinit_CFFill() , TRANSPARENT_0), null);
    if (dim) {
      path = new CFPath;
      x_0 = rect.x_0 + rect.width_0 / 2;
      lenPt = getPointForAngle(dim.width_0, this$static.degreesToRotateIfNeeded);
      widthPt = getPointForAngle(lineHeight, this$static.degreesToRotateIfNeeded + 90);
      if (this$static.position == 1) {
        y_0 = rect.y_0 + this$static.labelMargin;
        x_0 -= 3;
        y_0 -= 3;
        $add(path, new CFPathElement_0(0, x_0 - lenPt.x_0, y_0 - lenPt.y_0));
        $add(path, new CFPathElement_0(1, x_0, y_0));
        $add(path, new CFPathElement_0(1, x_0 + widthPt.x_0, y_0 + widthPt.y_0));
        $add(path, new CFPathElement_0(1, x_0 - lenPt.x_0 + widthPt.x_0, y_0 - lenPt.y_0 + widthPt.y_0));
        $add(path, new CFPathElement);
      }
       else {
        y_0 = rect.y_0 + rect.height_0;
        x_0 += lineHeight / 2;
        y_0 -= 3;
        $add(path, new CFPathElement_0(0, x_0 - widthPt.x_0, y_0 - widthPt.y_0));
        $add(path, new CFPathElement_0(1, x_0 - widthPt.x_0 + lenPt.x_0, y_0 - widthPt.y_0 + lenPt.y_0));
        $add(path, new CFPathElement_0(1, x_0 + lenPt.x_0, y_0 + lenPt.y_0));
        $add(path, new CFPathElement_0(1, x_0, y_0));
        $add(path, new CFPathElement);
      }
      drillShape = new CFShape_0(path, TRANSPARENT_0, null);
    }
    filterBase = new FilterBase(data_0.parentName, 'EQUALS', data_0);
    $addValue(filterBase, data_0.name_0);
    $setDataJoinColumn(filterBase, this$static.graph.data_0.dateJoinColumn);
    $setFiscal(filterBase, this$static.graph.data_0.isFiscalCalendar);
    filter = getDrillFilterFromValues(filterBase);
    curFilter = '{"filters":[' + filter + ']}';
    drillShape.drillFilter = curFilter;
    geDD = new GraphicElement_0(drillShape);
    drillStrs = new ArrayList;
    instanceOf(this$static, 123)?$add_1(drillStrs, 'obj:xyscalerow' + toString_23(data_0.timeMS) + ':' + $getName(data_0)):$add_1(drillStrs, $getHvrDataStrForColRowInfo(this$static.graph, data_0));
    $add_1(drillStrs, $getHvrDataStrForScale(this$static.graph, 'Category', this$static));
    $setDataObject(geDD, $getHvrDataStrsList(drillStrs));
    $add_1(this$static.frontGeAry, geDD);
  }
}

function $addGroupLabelBottom(this$static, rnd, left, right, grpName, mapping){
  var ge, groupHeight, line, line$iterator, lineHeight, textAreaWidth, ti, tmpBnds, topOffset, vAlign;
  textAreaWidth = right - (left + 10);
  textAreaWidth < 0 && (textAreaWidth = 1);
  if (grpName != null && $trim(grpName).length > 0) {
    ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 2);
    ti.aWordIsSplit && (ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 1));
    if ($equals_2(mapping, 'GROUP1')) {
      topOffset = this$static.group2Height + this$static.titleHeight + this$static.tableHeight;
      groupHeight = this$static.group1Height;
    }
     else {
      topOffset = this$static.titleHeight + this$static.tableHeight;
      groupHeight = this$static.group2Height;
    }
    ge = new GraphicElement;
    lineHeight = $getAdjustedLineHeight_0(this$static, rnd);
    vAlign = 0;
    (this$static.showDataTable || this$static.boxedTrellis) && (vAlign = VALIGN_MIDDLE);
    tmpBnds = new CFRect(left + (right - left - ti.textDimension.width_0) / 2, $getBottom(this$static.bnds) - (groupHeight + topOffset) + this$static.GROUP_MARGIN, ti.textDimension.width_0 + 1, lineHeight + 1);
    for (line$iterator = new ArrayList$1(ti.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      $addTextItem(ge, new CFTextItem(rnd, tmpBnds, line, this$static.curLabelFont, this$static.hAlign, vAlign));
      $setY_0(tmpBnds, tmpBnds.y_0 + lineHeight);
    }
    $add_1(this$static.geAry, ge);
  }
}

function $addGroupLabelLeft(this$static, rnd, top_0, bottom, grpName, mapping){
  var ge, leftOffset, line, line$iterator, lineHeight, textAreaWidth, ti, tmpBnds;
  textAreaWidth = this$static.group1Height - 24;
  $equals_2(mapping, 'GROUP2') && (textAreaWidth = this$static.group2Height - 24);
  textAreaWidth < 0 && (textAreaWidth = 1);
  if (grpName != null && $trim(grpName).length > 0) {
    ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 2);
    ti.aWordIsSplit && (ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 1));
    $equals_2(mapping, 'GROUP1')?(leftOffset = this$static.group2Height + this$static.titleHeight):(leftOffset = this$static.titleHeight);
    ge = new GraphicElement;
    lineHeight = $getLineHeight(this$static.curLabelFont, rnd);
    tmpBnds = new CFRect(this$static.bnds.x_0 + leftOffset + 5, top_0, ti.textDimension.width_0 + 1, bottom - top_0);
    for (line$iterator = new ArrayList$1(ti.wrappedLines); line$iterator.i < line$iterator.this$01.array.length;) {
      line = castToString($next_3(line$iterator));
      $addTextItem(ge, new CFTextItem(rnd, tmpBnds, line, this$static.curLabelFont, 0, VALIGN_MIDDLE));
      $setY_0(tmpBnds, tmpBnds.y_0 + lineHeight);
    }
    $add_1(this$static.geAry, ge);
  }
}

function $addGroupLabelTop(this$static, rnd, left, right, grpName, mapping){
  var ge, groupHeight, lineHeight, textAreaWidth, textItems, ti, tmpBnds, topOffset, vAlign;
  textAreaWidth = right - (left + 10);
  textAreaWidth < 0 && (textAreaWidth = 1);
  if (grpName != null && $trim(grpName).length > 0) {
    ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 2);
    ti.aWordIsSplit && (ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 1));
    if ($equals_2(mapping, 'GROUP1')) {
      topOffset = 0;
      groupHeight = this$static.group1Height;
    }
     else {
      topOffset = this$static.group1Height;
      groupHeight = this$static.group2Height;
    }
    ge = new GraphicElement;
    lineHeight = $getAdjustedLineHeight_0(this$static, rnd);
    vAlign = 0;
    (this$static.showDataTable || this$static.boxedTrellis) && (vAlign = VALIGN_MIDDLE);
    tmpBnds = new CFRect(left + (right - left - ti.textDimension.width_0) / 2, $getBottom(this$static.bnds) - (groupHeight + topOffset), ti.textDimension.width_0 + 1, lineHeight + 1);
    $setHeight(tmpBnds, this$static.group1Height);
    textItems = $getCFTextItemsForWrappedLines(ti, rnd, tmpBnds, this$static.curLabelFont, this$static.hAlign, vAlign);
    $addTextItems(ge, textItems);
    $add_1(this$static.geAry, ge);
  }
}

function $addGroupLabels(this$static, rnd, mapping){
  var curGrpName, curRow, curUniqueGrpName, grp2Index, grpIndex, grpName, i, leftOrTop, rightOrBottom, uniqueGrpName;
  if (this$static.position == 1 || this$static.position == 0 || this$static.position == 3) {
    grpIndex = $getMetDataIndexForName(this$static.graph.data_0, mapping);
    grp2Index = $getMetDataIndexForName(this$static.graph.data_0, 'GROUP2');
    if (grpIndex >= 0) {
      leftOrTop = this$static.bnds.x_0 + this$static.startMargin;
      this$static.position == 0 && (leftOrTop = this$static.bnds.y_0 + this$static.startMargin);
      rightOrBottom = leftOrTop + this$static.catAreaWidth;
      curRow = castTo(this$static.rowsToDisplay.get_1(0), 7);
      grpName = $getGroupNameForRow(this$static, curRow, grpIndex);
      uniqueGrpName = grpName;
      $equals_2(mapping, 'GROUP1') && (uniqueGrpName = grpName + ('' + $getGroupNameForRow(this$static, curRow, grp2Index)));
      for (i = 1; i < this$static.rowsToDisplay.size_1(); i++) {
        curRow = castTo(this$static.rowsToDisplay.get_1(i), 7);
        curGrpName = $getGroupNameForRow(this$static, curRow, grpIndex);
        curUniqueGrpName = curGrpName;
        $equals_2(mapping, 'GROUP1') && (curUniqueGrpName = curGrpName + ('' + $getGroupNameForRow(this$static, curRow, grp2Index)));
        if (curUniqueGrpName != null && !$equals_2(curUniqueGrpName, uniqueGrpName)) {
          this$static.position == 0?$addGroupLabelLeft(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping):this$static.position == 3?$addGroupLabelTop(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping):$addGroupLabelBottom(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping);
          grpName = curGrpName;
          uniqueGrpName = curUniqueGrpName;
          leftOrTop = rightOrBottom;
          rightOrBottom = rightOrBottom + this$static.catAreaWidth;
        }
         else {
          rightOrBottom += this$static.catAreaWidth;
        }
      }
      this$static.position == 0?$addGroupLabelLeft(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping):this$static.position == 3?$addGroupLabelTop(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping):$addGroupLabelBottom(this$static, rnd, leftOrTop, rightOrBottom, grpName, mapping);
    }
  }
}

function $addTextItemAsGraphicElement(this$static, textItem, rowIndex){
  var ge;
  if (textItem) {
    ge = castTo($getStringValue(this$static.categoryLabelsMap, '' + rowIndex), 12);
    if (!ge) {
      ge = new GraphicElement_2(textItem);
      $add_1(this$static.geAry, ge);
      $putStringValue(this$static.categoryLabelsMap, '' + rowIndex, ge);
    }
     else {
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, textItem);
    }
  }
}

function $divideSpaceFor2Cols(spaceToDivide, col1Width, col2Width){
  var halfSpace, retVals;
  retVals = initUnidimensionalArray(D_classLit, $intern_24, 41, 2, 15, 1);
  retVals[0] = col1Width;
  retVals[1] = col2Width;
  halfSpace = spaceToDivide / 2;
  if (col1Width < halfSpace)
    retVals[1] = spaceToDivide - col1Width;
  else if (col2Width < halfSpace)
    retVals[0] = spaceToDivide - col2Width;
  else {
    retVals[0] = halfSpace;
    retVals[1] = halfSpace;
  }
  return retVals;
}

function $drawAllGroupLines(this$static, ge, stroke, innerBnds, start_0, end, leftOrTop, lineBnds){
  this$static.position == 1 || this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(start_0, lineBnds.y_0, start_0, lineBnds.y_0 + lineBnds.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(lineBnds.x_0, start_0, lineBnds.x_0 + lineBnds.width_0, start_0), null, stroke));
  this$static.position == 1 || this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(end, lineBnds.y_0, end, lineBnds.y_0 + lineBnds.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(lineBnds.x_0, end, lineBnds.x_0 + lineBnds.width_0, end), null, stroke));
  $drawGroupGridLines(this$static, ge, stroke, innerBnds, leftOrTop, 'GROUP1');
  $drawGroupGridLines(this$static, ge, stroke, innerBnds, leftOrTop, 'GROUP2');
}

function $drawDataTable(this$static, rnd, ge, stroke, rect){
  var addlItems, cell, cellFont, cellFontSize, cellFontWithAttribs, col, colInfo, hoverShape, i, i0, isANumber, lastNumFormatter, left, legend, lii, lineHeight, markerBnds, markerTop, name_0, nameRect, nameRectGE, nameTextGE, nameTextRect, numCols, numberFormatter, row, rowIndex, rowTitleDisplayed, textGE, textRect, tmpLII, tmpLII$iterator, top_0, value_0, valueStr;
  if (this$static.dataTableLegendItems) {
    this$static.dataTableLegendItems.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.dataTableLegendItems = null;
  }
  this$static.dataTableLegendItems = new ArrayList;
  numCols = this$static.tableCols.array.length;
  cellFontSize = $getFontSizeForTableCells(this$static, rnd);
  lineHeight = $getAdjustedLineHeight_0(this$static, rnd);
  top_0 = rect.y_0 + rect.height_0 - lineHeight;
  cellFont = $duplicate_2(this$static.curLabelFont);
  cellFont.size_0 = cellFontSize;
  cellFont.lineHeight = NaN;
  for (i0 = 0; i0 < numCols; i0++) {
    $addShape(ge, new CFShape_0(new CFPath_1(rect.x_0, top_0, rect.x_0 + rect.width_0, top_0), null, stroke));
    top_0 -= lineHeight;
  }
  left = rect.x_0 + this$static.catAreaWidth;
  legend = castTo($getLegend(this$static.graph), 153);
  !legend && (legend = new LegendScaledGraph(this$static.graph.chart, 'tmpLegend', this$static.graph, 0));
  rowTitleDisplayed = initUnidimensionalArray(Z_classLit, $intern_24, 41, this$static.tableCols.array.length, 16, 1);
  this$static.colValues = initUnidimensionalArray(Lcom_domo_charting_base_GraphicElement_2_classLit, $intern_17, 395, this$static.tableCols.array.length, 0, 2);
  for (i = 0; i < this$static.rowsToDisplay.size_1(); i++) {
    top_0 = rect.y_0 + rect.height_0 - numCols * lineHeight;
    row = castTo(this$static.rowsToDisplay.get_1(i), 7);
    rowIndex = row.origIndex;
    lastNumFormatter = null;
    for (col = 0; col < this$static.tableCols.array.length; col++) {
      colInfo = castTo($get_2(this$static.tableCols, col), 7);
      cell = $getCellByCellIndex(colInfo, rowIndex);
      i == 0 && (this$static.colValues[col] = initUnidimensionalArray(Lcom_domo_charting_base_GraphicElement_2_classLit, {395:1, 8:1, 9:1, 13:1}, 12, this$static.rowsToDisplay.size_1(), 0, 1));
      if (!rowTitleDisplayed[col] && !!cell) {
        name_0 = $getName(colInfo);
        nameRect = new CFRect(this$static.bnds.x_0 + 1, top_0, rect.x_0 - (this$static.bnds.x_0 + 1), lineHeight);
        nameTextRect = new CFRect(nameRect.x_0, nameRect.y_0, nameRect.width_0, nameRect.height_0);
        if (this$static.hideDataInChart) {
          $setX_0(nameTextRect, nameTextRect.x_0 + 5);
          $setWidth(nameTextRect, nameTextRect.width_0 - 5);
        }
         else {
          $setX_0(nameTextRect, nameTextRect.x_0 + 20);
          $setWidth(nameTextRect, nameTextRect.width_0 - 20);
        }
        nameRectGE = new GraphicElement_0(new CFShape_1(nameRect, null, stroke));
        $add_1(this$static.geAry, nameRectGE);
        nameTextGE = ($clinit_StrUtil() , drawTextInBounds(rnd, nameTextRect, name_0, this$static.curLabelFont, 0, VALIGN_MIDDLE, this$static.curLabelFont.size_0, null, null));
        if (!this$static.hideDataInChart && !!cell && (!!cell.row || colInfo.type_0 != null && $equals_2(colInfo.type_0, 'GROUPCOL'))) {
          lii = null;
          if (cell.row) {
            lii = $getLegendItemInfoForSeries_0(legend, legend, colInfo);
          }
           else {
            addlItems = $getAdditionalLegendItems_1(legend);
            for (tmpLII$iterator = new ArrayList$1(addlItems); tmpLII$iterator.i < tmpLII$iterator.this$01.array.length;) {
              tmpLII = castTo($next_3(tmpLII$iterator), 37);
              if (tmpLII.type_0 == 6) {
                lii = tmpLII;
                nameTextGE = drawTextInBounds(rnd, nameTextRect, $getItemText(tmpLII), this$static.curLabelFont, 0, VALIGN_MIDDLE, this$static.curLabelFont.size_0, null, null);
                break;
              }
            }
          }
          if (lii) {
            markerTop = top_0 + (lineHeight - 10) / 2;
            markerBnds = new CFRect(this$static.bnds.x_0 + 5, markerTop, 10, 10);
            $addMarker(lii, nameTextGE, markerBnds, colInfo.hidden, legend, nameRect);
          }
          $add_1(this$static.dataTableLegendItems, lii);
        }
        $add_1(this$static.geAry, nameTextGE);
        rowTitleDisplayed[col] = true;
      }
      if (cell) {
        textGE = null;
        textRect = new CFRect(left - this$static.catAreaWidth + 2, top_0, this$static.catAreaWidth - 4, lineHeight);
        numberFormatter = new NumberFormatter_0($getHoverFormatterForCell(this$static.graph, cell));
        if (!!cell.column && !!cell.column.format && cell.column.format.size_1() > 0) {
          numberFormatter = new NumberFormatter;
          $applyColumnFormat(numberFormatter, cell.column.format);
          lastNumFormatter = numberFormatter;
        }
         else 
          !!lastNumFormatter && (numberFormatter = lastNumFormatter);
        this$static.autoAbbrevValues?(numberFormatter.autoAbbreviate = true , numberFormatter.needsNewNumFormat = true):(numberFormatter.autoAbbreviate = false , numberFormatter.needsNewNumFormat = true);
        valueStr = '';
        value_0 = $getValue(cell);
        (this$static.graph.typeAttributes.percentOfCategoryData || this$static.graph.typeAttributes.percentOfSeriesData) && (value_0 = cell.value_0);
        isANumber = false;
        if (!isNaN(value_0)) {
          isANumber = true;
          valueStr = $formatNumber_1(numberFormatter, value_0);
        }
        cellFontWithAttribs = cellFont;
        if (colInfo.hidden) {
          cellFontWithAttribs = $duplicate_2(cellFont);
          $setColor_1(cellFontWithAttribs, ($clinit_CFColor() , DISABLED_GRAY));
        }
        valueStr != null && isANumber?(textGE = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valueStr, cellFontWithAttribs, HALIGN_RIGHT, VALIGN_MIDDLE, this$static.minTableCellFontSize, null, null))):valueStr != null && (textGE = ($clinit_StrUtil() , drawTextInBounds(rnd, textRect, valueStr, cellFontWithAttribs, 0, VALIGN_MIDDLE, this$static.minTableCellFontSize, null, null)));
        if (textGE) {
          hoverShape = new CFShape_1(new CFRect(left - this$static.catAreaWidth, top_0, this$static.catAreaWidth, lineHeight), ($clinit_CFFill() , TRANSPARENT_0), null);
          hoverShape.hoverText = valueStr;
          !textGE.shapeAry && (textGE.shapeAry = new ArrayList);
          $add_1(textGE.shapeAry, hoverShape);
          textGE.dataObject = cell;
          $add_1(this$static.geAry, textGE);
          setCheck(this$static.colValues[col], i, textGE);
        }
      }
      top_0 += lineHeight;
    }
    this$static.group1Height > 0 || this$static.group2Height > 0?$addShape(ge, new CFShape_0(new CFPath_1(left, rect.y_0 + rect.height_0 - (this$static.tableHeight - 1), left, rect.y_0 + rect.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(left, rect.y_0, left, rect.y_0 + rect.height_0), null, stroke));
    left += this$static.catAreaWidth;
  }
}

function $drawGroupGridLines(this$static, ge, stroke, innerBnds, left, mapping){
  var curGrpName, curRow, group1Top, grpIndex, grpName, i, inset, lineBnds, lineBndsTable;
  grpIndex = $getMetDataIndexForName(this$static.graph.data_0, mapping);
  lineBnds = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
  lineBndsTable = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
  if (this$static.position == 1) {
    if ($equals_2(mapping, 'GROUP1')) {
      $setHeight(lineBnds, lineBnds.height_0 - (this$static.group2Height + this$static.titleHeight + this$static.tableHeight));
      $setHeight(lineBndsTable, lineBndsTable.height_0 - (this$static.group1Height + this$static.group2Height + this$static.titleHeight + this$static.tableHeight));
    }
     else 
      $setHeight(lineBnds, lineBnds.height_0 - (this$static.titleHeight + this$static.tableHeight));
  }
   else if (this$static.position == 3) {
    if ($equals_2(mapping, 'GROUP1')) {
      $setHeight(lineBnds, lineBnds.height_0 - this$static.group2Height);
      $setY_0(lineBnds, lineBnds.y_0 + this$static.group2Height);
    }
  }
   else if (this$static.position == 0) {
    if ($equals_2(mapping, 'GROUP1')) {
      inset = this$static.group2Height;
      $setX_0(lineBnds, lineBnds.x_0 + inset);
      $setWidth(lineBnds, lineBnds.width_0 - inset);
    }
  }
  if (grpIndex >= 0) {
    curRow = castTo(this$static.rowsToDisplay.get_1(0), 7);
    grpName = $getGroupNameForRow(this$static, curRow, grpIndex);
    for (i = 1; i < this$static.rowsToDisplay.size_1(); i++) {
      curRow = castTo(this$static.rowsToDisplay.get_1(i), 7);
      curGrpName = $getGroupNameForRow(this$static, curRow, grpIndex);
      if (curGrpName != null && !$equals_2(curGrpName, grpName)) {
        grpName = curGrpName;
        this$static.position == 1 || this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(left, lineBnds.y_0, left, lineBnds.y_0 + lineBnds.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(lineBnds.x_0, left, lineBnds.x_0 + lineBnds.width_0, left), null, stroke));
      }
       else 
        $equals_2(mapping, 'GROUP1') && this$static.showDataTable && (this$static.position == 1 || this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(left, lineBndsTable.y_0, left, lineBndsTable.y_0 + lineBndsTable.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(lineBndsTable.x_0, left, lineBndsTable.x_0 + lineBndsTable.width_0, left), null, stroke)));
      left += this$static.catAreaWidth;
    }
  }
  if (this$static.position == 1 && $equals_2(mapping, 'GROUP1') && (this$static.showDataTable || this$static.boxedTrellis)) {
    group1Top = $getBottom(this$static.bnds) - (this$static.titleHeight + this$static.tableHeight + this$static.group2Height + this$static.group1Height);
    $addShape(ge, new CFShape_0(new CFPath_1(this$static.bnds.x_0 + this$static.startMargin, group1Top, $getRight(this$static.bnds) - this$static.endMargin, group1Top), null, stroke));
    $addShape(ge, new CFShape_0(new CFPath_1(this$static.bnds.x_0 + this$static.startMargin, group1Top + this$static.group1Height, $getRight(this$static.bnds) - this$static.endMargin, group1Top + this$static.group1Height), null, stroke));
    this$static.group2Height > 0 && $addShape(ge, new CFShape_0(new CFPath_1(this$static.bnds.x_0 + this$static.startMargin, group1Top + this$static.group1Height + this$static.group2Height, $getRight(this$static.bnds) - this$static.endMargin, group1Top + this$static.group1Height + this$static.group2Height), null, stroke));
  }
}

function $getAdjustedLineHeight_0(this$static, rnd){
  var lineHeight;
  lineHeight = $getLineHeight(this$static.curLabelFont, rnd);
  this$static.graph.chart.staticImage?(lineHeight += 2):(lineHeight += 6);
  return lineHeight;
}

function $getCurrentLabelFontSize(this$static){
  if (this$static.curLabelFont)
    return this$static.curLabelFont.size_0;
  else if (this$static.labelFont)
    return this$static.labelFont.size_0;
  return 11;
}

function $getFontSizeForTableCells(this$static, rnd){
  var cell, cellTextWidth, col, colInfo, dim, i, i0, maxLenStr, maxWidth, row, rowIndex, tmpFont, valueStr;
  maxWidth = 0;
  maxLenStr = '';
  for (i0 = 0; i0 < this$static.rowsToDisplay.size_1(); i0++) {
    row = castTo(this$static.rowsToDisplay.get_1(i0), 7);
    rowIndex = row.origIndex;
    for (col = 0; col < this$static.tableCols.array.length; col++) {
      colInfo = castTo($get_2(this$static.tableCols, col), 7);
      cell = $getCellByCellIndex(colInfo, rowIndex);
      if (cell) {
        valueStr = $getValueStrOrValueWithColFormat(cell, this$static.autoAbbrevValues);
        if (valueStr != null) {
          dim = rnd.measureText_0(valueStr, this$static.curLabelFont);
          if (dim.width_0 > maxWidth) {
            maxWidth = dim.width_0;
            maxLenStr = valueStr;
          }
        }
      }
    }
  }
  cellTextWidth = this$static.catAreaWidth - 4;
  if (maxWidth <= cellTextWidth) {
    return this$static.curLabelFont.size_0;
  }
   else {
    tmpFont = $duplicate_2(this$static.curLabelFont);
    $setSize_0(tmpFont, this$static.minTableCellFontSize);
    dim = rnd.measureText_0(maxLenStr, tmpFont);
    if (dim.width_0 >= cellTextWidth) {
      return this$static.minTableCellFontSize;
    }
     else {
      for (i = this$static.curLabelFont.size_0 - 0.5; i > this$static.minTableCellFontSize; i -= 0.5) {
        tmpFont.size_0 = i;
        tmpFont.lineHeight = NaN;
        dim = rnd.measureText_0(maxLenStr, tmpFont);
        if (dim.width_0 <= cellTextWidth)
          return i;
      }
    }
  }
  return this$static.curLabelFont.size_0;
}

function $getGroupHeight(this$static, rnd, mapping){
  var curGrpName, curRow, curUniqueGrpName, groupHeight, grp2Index, grpIndex, grpName, i, left, linesUsed, right, uniqueGrpName;
  groupHeight = 0;
  if ($isTrellis(this$static.graph)) {
    grpIndex = $getMetDataIndexForName(this$static.graph.data_0, mapping);
    grp2Index = $getMetDataIndexForName(this$static.graph.data_0, 'GROUP2');
    if (grpIndex >= 0) {
      linesUsed = 1;
      left = this$static.bnds.x_0 + this$static.startMargin;
      right = left + this$static.catAreaWidth;
      curRow = castTo(this$static.rowsToDisplay.get_1(0), 7);
      grpName = $getGroupNameForRow(this$static, curRow, grpIndex);
      uniqueGrpName = grpName;
      $equals_2(mapping, 'GROUP1') && (uniqueGrpName = grpName + ('' + $getGroupNameForRow(this$static, curRow, grp2Index)));
      for (i = 1; i < this$static.rowsToDisplay.size_1(); i++) {
        curRow = castTo(this$static.rowsToDisplay.get_1(i), 7);
        curGrpName = $getGroupNameForRow(this$static, curRow, grpIndex);
        curUniqueGrpName = curGrpName;
        $equals_2(mapping, 'GROUP1') && (curUniqueGrpName = curGrpName + ('' + $getGroupNameForRow(this$static, curRow, grp2Index)));
        if (curUniqueGrpName != null && !$equals_2(curUniqueGrpName, uniqueGrpName)) {
          linesUsed = $getLinesUsedByGroupName(this$static, rnd, linesUsed, left, right, grpName);
          if (linesUsed == 2)
            break;
          grpName = curGrpName;
          uniqueGrpName = curUniqueGrpName;
          left = right;
          right = right + this$static.catAreaWidth;
        }
         else {
          right += this$static.catAreaWidth;
        }
      }
      linesUsed < 2 && (linesUsed = $getLinesUsedByGroupName(this$static, rnd, linesUsed, left, right, grpName));
      groupHeight = linesUsed * $getAdjustedLineHeight_0(this$static, rnd) + this$static.GROUP_MARGIN;
    }
  }
  return groupHeight;
}

function $getGroupNameForRow(this$static, row, grpMDIndex){
  var cell, cell$iterator, entry, grpName, outerIter;
  grpName = '';
  if (grpMDIndex != -1) {
    !!row && !!$getFirstCell(row) && !!$getMetaDataCell($getFirstCell(row), grpMDIndex) && (grpName = $getValueStrOrValue($getMetaDataCell($getFirstCell(row), grpMDIndex)));
    if (!!row && grpName == null || $trim(grpName).length == 0 && this$static.graph.typeAttributes.isRunningTotal) {
      for (cell$iterator = (outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet((new AbstractMap$2(row.cellMap)).this$01)).this$01) , new AbstractMap$2$1(outerIter)); cell$iterator.val$outerIter2.hasNext;) {
        cell = (entry = $next_1(cell$iterator.val$outerIter2) , castTo(entry.getValue(), 16));
        if ($getMetaDataCell(cell, grpMDIndex)) {
          grpName = $getValueStrOrValue($getMetaDataCell(cell, grpMDIndex));
          break;
        }
      }
    }
  }
  return grpName;
}

function $getGroupWidth(this$static, rnd, mapping){
  var curRow, dim, groupWidth, grpIndex, grpName, i, maxWidth;
  groupWidth = 0;
  maxWidth = 0;
  if ($isTrellis(this$static.graph)) {
    grpIndex = $getMetDataIndexForName(this$static.graph.data_0, mapping);
    if (grpIndex >= 0) {
      for (i = 0; i < this$static.rowsToDisplay.size_1(); i++) {
        curRow = castTo(this$static.rowsToDisplay.get_1(i), 7);
        grpName = $getGroupNameForRow(this$static, curRow, grpIndex);
        dim = rnd.measureText_0(grpName, this$static.curLabelFont);
        dim.width_0 > maxWidth && (maxWidth = dim.width_0);
      }
      groupWidth = maxWidth;
    }
  }
  groupWidth > 0 && (groupWidth += 25);
  return groupWidth;
}

function $getLegendItemInfoForCell(this$static, cell){
  var col, lii, lii$iterator;
  col = cell.column;
  for (lii$iterator = new ArrayList$1(this$static.dataTableLegendItems); lii$iterator.i < lii$iterator.this$01.array.length;) {
    lii = castTo($next_3(lii$iterator), 37);
    if (lii.colInfo == col)
      return lii;
  }
  return null;
}

function $getLinesUsedByGroupName(this$static, rnd, lineUsed, left, right, grpName){
  var textAreaWidth, ti;
  textAreaWidth = right - (left + 10);
  textAreaWidth < 0 && (textAreaWidth = 1);
  ti = getWrappedTextForWidthWithMaxLines(rnd, grpName, this$static.curLabelFont, textAreaWidth, 100, 2);
  ti.wrappedLines.array.length > 1 && !ti.aWordIsSplit && (lineUsed = 2);
  return lineUsed;
}

function $getMinPosition(this$static){
  if (this$static.position == 0 || this$static.position == 2)
    return this$static.graph.bnds.y_0 + this$static.startMargin;
  return this$static.graph.bnds.x_0 + this$static.startMargin;
}

function $getNestedGroupCol(this$static){
  var col, col$iterator;
  if (!!this$static.tableCols && this$static.tableCols.array.length > 0) {
    for (col$iterator = new ArrayList$1(this$static.tableCols); col$iterator.i < col$iterator.this$01.array.length;) {
      col = castTo($next_3(col$iterator), 7);
      if (col.type_0 != null && $equals_2(col.type_0, 'GROUPCOL'))
        return col;
    }
  }
  return null;
}

function $getOutputFormattedRowName(this$static, row, providedName, cell){
  var label_0;
  label_0 = providedName;
  if (!!cell && !!this$static.graph.data_0 && this$static.graph.data_0.isPeriodOverPeriod && !!$getMetaDataCell(cell, 0)) {
    neq($getMetaDataCell(cell, 0).timeMS, 0) && (this$static.dateOutputFormat != null?(label_0 = FormatDate($getMetaDataCell(cell, 0).timeMS, this$static.dateOutputFormat, this$static.graph.chart.locale, this$static.graph.chart.timeZone)):(label_0 = $stripTfromTimeNameAndAddTimeZone_0(this$static, providedName)));
  }
   else if (row) {
    if (neq(row.timeMS, 0)) {
      if (this$static.dateOutputFormat != null)
        label_0 = FormatDate(row.timeMS, this$static.dateOutputFormat, this$static.graph.chart.locale, this$static.graph.chart.timeZone);
      else {
        label_0 = $getName(row);
        label_0 = $stripTfromTimeNameAndAddTimeZone_0(this$static, label_0);
      }
    }
     else 
      providedName == null && (label_0 = $getName(row));
  }
  return label_0;
}

function $getRowLabel(this$static, row, rotated){
  var label_0;
  label_0 = $getOutputFormattedRowName(this$static, row, null, null);
  label_0 != null && (!rotated && this$static.maxCatLength != -1 && label_0.length > 0 && label_0.length > this$static.maxCatLength?(label_0 = $substring_0(label_0, 0, this$static.maxCatLength) + '..'):rotated && this$static.maxCatLenRotated != -1 && label_0.length > 0 && label_0.length > this$static.maxCatLenRotated && (label_0 = $substring_0(label_0, 0, this$static.maxCatLenRotated - 1) + '..'));
  return label_0;
}

function $getShowDataTable(this$static, checkOptionIfFalse){
  !this$static.showDataTable && checkOptionIfFalse && !!this$static.graph && (this$static.showDataTable = isTrue($getChartOptionAsString(this$static.graph, 'show_data_table')));
  return this$static.showDataTable;
}

function $getSideLabelFontForSize(this$static, rnd){
  var lblFont;
  if (this$static.minFontSize < this$static.labelFont.size_0) {
    lblFont = $duplicate_2(this$static.labelFont);
    while (isNaN_0(lblFont.lineHeight) && (lblFont.lineHeight = rnd.measureText_0('A', lblFont).height_0) , lblFont.lineHeight > this$static.catAreaWidth && lblFont.size_0 > this$static.minFontSize && lblFont.size_0 > 1)
      $setSize_0(lblFont, lblFont.size_0 - 1);
    return lblFont;
  }
   else {
    return this$static.labelFont;
  }
}

function $getTableColumns(this$static){
  var cell, col, curCol, curCol$iterator, grpCol, i, retCols, row, row$iterator, rowCount, rowSum, tmpCell;
  retCols = new ArrayList;
  if (!this$static.hideDataInChart) {
    rowCount = $getNumRows(this$static.graph.data_0);
    for (curCol$iterator = this$static.graph.data_0.cols_0.iterator(); curCol$iterator.hasNext_0();) {
      curCol = castTo(curCol$iterator.next_1(), 7);
      for (i = 0; i < rowCount; i++) {
        cell = castTo($get_1(curCol.cellMap, valueOf(i)), 16);
        if (!!cell && !!cell.row && !cell.row.hidden) {
          cell.column = curCol;
          retCols.array[retCols.array.length] = curCol;
          break;
        }
      }
    }
  }
  if (this$static.graph.typeAttributes.isNestedBar) {
    grpCol = new ColRowInfo;
    instanceOf(this$static.graph.handler, 60)?$setName(grpCol, castTo(this$static.graph.handler, 60).nestedGroupText):$setName(grpCol, getString('GROUP_TOTAL', this$static.graph.chart.locale));
    for (row$iterator = this$static.graph.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
      row = castTo(row$iterator.next_1(), 7);
      rowSum = (isNaN_0(row.sum) && (row.sum = $calcSum(row, false, true, false)) , row.sum);
      tmpCell = new Cell(rowSum);
      $put_0(grpCol.cellMap, valueOf(row.origIndex), tmpCell);
      $setOrigIndex(grpCol, retCols.array.length);
    }
    grpCol.type_0 = 'GROUPCOL';
    retCols.array[retCols.array.length] = grpCol;
  }
  if ($getMetaDataSize(this$static.graph.data_0) > 0) {
    for (i = 0; i < $getMetaDataSize(this$static.graph.data_0); i++) {
      col = $getMetadataInfo(this$static.graph.data_0, i);
      !!col && col.mapping != null && $equals_2(col.mapping, 'TABLE') && (retCols.array[retCols.array.length] = col , true);
    }
  }
  return retCols;
}

function $getTableHeight(this$static, rnd, forScrollCalculation){
  var alv, legend, numVisbleCols, tableHeight, totalHeight;
  tableHeight = 0;
  if (this$static.showDataTable) {
    this$static.tableCols = $getTableColumns(this$static);
    numVisbleCols = this$static.tableCols.array.length;
    tableHeight = $getAdjustedLineHeight_0(this$static, rnd) * numVisbleCols;
    tableHeight = tableHeight + 1;
  }
  totalHeight = this$static.graph.bnds.height_0;
  alv = $getAnnotationView(this$static.graph);
  !!alv && alv.position == 1 && !!$getBndsOrLastBnds(alv) && (totalHeight -= $getBndsOrLastBnds(alv).height_0);
  if (!this$static.showDataTable) {
    legend = $getLegend(this$static.graph);
    !!legend && legend.position == 1 && !!$getBndsOrLastBnds_0(legend) && (totalHeight -= $getBndsOrLastBnds_0(legend).height_0);
  }
  if (!forScrollCalculation && totalHeight - tableHeight < 100) {
    this$static.showDataTable = false;
    return 0;
  }
  return tableHeight;
}

function $handleClickOnLegendItemInfo(this$static, shapeClicked, liiClicked){
  var colInfo;
  if ($showDataTable(this$static.graph)) {
    colInfo = liiClicked.colInfo;
    if (!!this$static.graph && !!colInfo) {
      if ($usingCardBus(this$static.graph.chart)) {
        $setSeriesIsFiltered(this$static.graph, colInfo.curIndex, !colInfo.showAsFiltered);
        shapeClicked.drillFilter = null;
      }
       else 
        $setSeriesIsHidden(this$static.graph, colInfo.curIndex, !colInfo.hidden);
      return true;
    }
  }
  return false;
}

function $hideLabelsOnTrellis(this$static){
  if ($isTrellis(this$static.graph) && this$static.position == 3 && this$static.isSecondary)
    return true;
  return false;
}

function $resetHighlightedScaleLabels(this$static){
  var item_0, item$iterator;
  for (item$iterator = new ArrayList$1(this$static.highlightedItems); item$iterator.i < item$iterator.this$01.array.length;) {
    item_0 = castTo($next_3(item$iterator), 26);
    $setFont(item_0, this$static.curLabelFont);
  }
  this$static.highlightedItems.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
  !!this$static.hoverGE && $remove_3(this$static.geAry, this$static.hoverGE);
  this$static.hoverGE = null;
  $setColor_1(this$static.curLabelFont, $getTextColor(this$static.graph.chart.palette));
}

function $setAutoAbbrevTableData(this$static, value_0){
  this$static.autoAbbrevValues = value_0;
}

function $setDataRowHighlight(this$static, lii){
  var col, colIndex, colInfo, ge, hidden, row, selectedCol, ti;
  selectedCol = null;
  if (lii) {
    selectedCol = lii.colInfo;
    !selectedCol && lii.type_0 == 6 && (selectedCol = $getNestedGroupCol(this$static));
  }
  if (this$static.colValues != null && this$static.colValues.length > 0 && this$static.colValues[0].length > 0) {
    colIndex = -1;
    !!selectedCol && (colIndex = selectedCol.origIndex);
    if (this$static.colValues.length > 0 && this$static.colValues[0].length > 0) {
      for (col = 0; col < this$static.colValues.length; col++) {
        colInfo = $getColumn(this$static.graph.data_0, col);
        hidden = !!colInfo && colInfo.hidden;
        for (row = 0; row < this$static.colValues[col].length; row++) {
          ge = this$static.colValues[col][row];
          if (!!ge && !!ge.textAry) {
            ti = castTo($get_2(ge.textAry, 0), 26);
            (col == colIndex || colIndex == -1) && !hidden?$setColor_1(ti.font_0, ($clinit_CFColor() , TEXT_DARK_GRAY)):$setColor_1(ti.font_0, ($clinit_CFColor() , DISABLED_GRAY));
          }
        }
      }
    }
  }
}

function $setDataTableBndsAndDraw(this$static, rnd, ge, stroke){
  var gridRect;
  if (this$static.showDataTable && this$static.position == 1) {
    gridRect = $duplicate_5(this$static.bnds);
    $setHeight(gridRect, gridRect.height_0 - 1);
    $setX_0(gridRect, this$static.startMargin);
    $setWidth(gridRect, this$static.bnds.width_0 - (this$static.startMargin + this$static.endMargin));
    this$static.titleHeight > 0 && $setHeight(gridRect, gridRect.height_0 - this$static.titleHeight);
    $addShape(ge, new CFShape_1(gridRect, null, stroke));
    $drawDataTable(this$static, rnd, ge, stroke, gridRect);
  }
}

function $setDateOutputFormat_0(this$static, value_0){
  value_0 != null && $equals_2(value_0.toLowerCase(), 'default') && (value_0 = null);
  this$static.dateOutputFormat = value_0;
  if (this$static.dateOutputFormat != null) {
    this$static.dateOutputFormat = ($clinit_StrUtil() , entityDecodeString(this$static.dateOutputFormat));
    this$static.dateOutputFormat = convertBrToNewLine(this$static.dateOutputFormat);
    this$static.dateOutputFormat = convertPopChartDateMacros(this$static.dateOutputFormat);
  }
}

function $setGroupedScaleCombined(this$static, value_0){
  this$static.groupedScaleWithBaseScale = value_0;
}

function $setHAlign(this$static, value_0){
  this$static.hAlign = value_0;
}

function $setHideChartData(this$static, value_0){
  this$static.hideDataInChart = value_0;
}

function $setHorzCatFixedMargin(this$static, value_0){
  this$static.horzFixedMargin = value_0;
}

function $setHorzCatFixedWidth(this$static, value_0){
  this$static.horzFixedWidth = value_0;
}

function $setHoverEffects_8(this$static, hoverData, rnd){
  var col, hoverLabel, lii, lii$iterator, obj, obj$iterator, rect, redrawNeeded, shape_0;
  if (this$static.isHidden || this$static.hideLabels || !$hasInteractions(this$static.graph))
    return false;
  redrawNeeded = false;
  if (hoverData != null && instanceOf(hoverData, 42) && castTo(hoverData, 42).size_1() > 0) {
    for (obj$iterator = castTo(hoverData, 42).iterator(); obj$iterator.hasNext_0();) {
      obj = obj$iterator.next_1();
      redrawNeeded = redrawNeeded | $setHoverEffectsForOneHoverData(this$static, obj, rnd);
    }
  }
   else if (this$static.showDataTable && hoverData != null && instanceOf(hoverData, 16)) {
    hoverLabel = $getOrCreateHoverLabel(this$static.graph);
    shape_0 = this$static.graph.chart.lastShapeWithHover;
    if (!!hoverLabel && !!shape_0 && $isRect(shape_0)) {
      rect = $getRect(shape_0);
      $addPrimary_2(hoverLabel, rnd, $getValueStrOrValueWithColFormat(castTo(hoverData, 16), false), new CFPoint(rect.x_0 + rect.width_0 / 2, rect.y_0), 0, false);
      lii = $getLegendItemInfoForCell(this$static, castTo(hoverData, 16));
      if (lii) {
        checkForHoveredItemFoundAndSetLegendItemState(lii, this$static.geAry, false, this$static.labelFont, this$static.graph);
        $setDataRowHighlight(this$static, lii);
        this$static.dataTableLegendItemHovered = true;
      }
      redrawNeeded = true;
    }
  }
   else {
    if (this$static.showDataTable) {
      if (hoverData != null && instanceOf(hoverData, 37)) {
        if ($indexOf_1(this$static.dataTableLegendItems, hoverData, 0) == -1) {
          col = castTo(hoverData, 37).colInfo;
          for (lii$iterator = new ArrayList$1(this$static.dataTableLegendItems); lii$iterator.i < lii$iterator.this$01.array.length;) {
            lii = castTo($next_3(lii$iterator), 37);
            if (lii.colInfo == col) {
              hoverData = lii;
              break;
            }
          }
        }
        checkForHoveredItemFoundAndSetLegendItemState(hoverData, this$static.geAry, false, this$static.labelFont, this$static.graph);
        $setDataRowHighlight(this$static, castTo(hoverData, 37));
        this$static.dataTableLegendItemHovered = true;
      }
       else if (this$static.dataTableLegendItemHovered) {
        checkForHoveredItemFoundAndSetLegendItemState(null, this$static.geAry, false, this$static.labelFont, this$static.graph);
        $setDataRowHighlight(this$static, null);
        this$static.dataTableLegendItemHovered = false;
      }
    }
    redrawNeeded = $setHoverEffectsForOneHoverData(this$static, hoverData, rnd);
  }
  return redrawNeeded;
}

function $setHoverEffectsForOneHoverData(this$static, hoverData, rnd){
  var barInfo, catFont, catName, dataObj, dim, halfHeight, halfWidth, highlightFont, highlightedLabel, innerBnds, item_0, item$iterator, items, row, ti, x_0, y_0;
  if (hoverData != null && instanceOf(hoverData, 36)) {
    if (!!this$static.sortGE && this$static.sortGE.dataObject != null) {
      dataObj = $getDataObjectForGE(this$static.sortGE, this$static.graph);
      if (instanceOf(dataObj, 27))
        return $setHoverEffects_9(castTo(dataObj, 27), dataObj, -1);
    }
    return false;
  }
  if ((this$static.graph.seriesShapes.array.length == 1 && $getNumCols(this$static.graph.data_0) == 1 && (this$static.graph.graphType == 0 || this$static.graph.graphType == 1) || (this$static.graph.graphType == 0 || this$static.graph.graphType == 1) && this$static.graph.typeAttributes.isMarimekko) && !$usingCardBus(this$static.graph.chart) && !this$static.showDataTable) {
    if (hoverData != null && instanceOf(hoverData, 25)) {
      $resetHighlightedScaleLabels(this$static);
      barInfo = castTo(hoverData, 25);
      catFont = $duplicate_2(this$static.labelFont);
      innerBnds = this$static.graph.innerBounds;
      this$static.graph.isHorizontal?this$static.graph.typeAttributes.isMarimekko?$setColor_1(this$static.curLabelFont, ($clinit_CFColor() , WHITE)):$setColor_1(this$static.curLabelFont, new CFColor_2('#DDDDDD')):$setColor_1(this$static.curLabelFont, ($clinit_CFColor() , WHITE));
      row = barInfo.cell.row;
      highlightedLabel = null;
      !!this$static.categoryLabelsMap && (highlightedLabel = castTo($getStringValue(this$static.categoryLabelsMap, '' + row.curIndex), 12));
      highlightedLabel = this$static.getHoverLabel(highlightedLabel);
      if (!!highlightedLabel && !!highlightedLabel.textAry && !this$static.displayRotated) {
        items = highlightedLabel.textAry;
        highlightFont = new CFFont((checkCriticalElementIndex(0, items.array.length) , castTo(items.array[0], 26)).font_0);
        $setColor_1(highlightFont, $getTextColor(this$static.graph.chart.palette));
        for (item$iterator = new ArrayList$1(items); item$iterator.i < item$iterator.this$01.array.length;) {
          item_0 = castTo($next_3(item$iterator), 26);
          item_0.font_0 = highlightFont;
          $add_1(this$static.highlightedItems, item_0);
        }
      }
       else {
        catName = $getOutputFormattedRowName(this$static, barInfo.cell.row, null, null);
        if (catName != null) {
          if (this$static.position == 1 || this$static.position == 3) {
            dim = rnd.measureText_0(catName, catFont);
            halfWidth = dim.width_0 / 2;
            x_0 = $getCenterX(barInfo.getRect()) - halfWidth;
            x_0 + dim.width_0 > innerBnds.x_0 + innerBnds.width_0 && (x_0 = innerBnds.x_0 + innerBnds.width_0 - dim.width_0);
            x_0 < innerBnds.x_0 && (x_0 = innerBnds.x_0);
            y_0 = this$static.bnds.y_0 + this$static.labelMargin;
            this$static.position == 3 && (y_0 = this$static.bnds.y_0);
            this$static.hoverGE = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(rnd, new CFRect(x_0, y_0, dim.width_0, dim.height_0), catName, catFont, HALIGN_CENTER, VALIGN_MIDDLE, 5, null, null));
            $add_1(this$static.geAry, this$static.hoverGE);
          }
           else {
            ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, catName, catFont, this$static.bnds.width_0 - this$static.labelMargin, -1, -1));
            halfHeight = ti.textDimension.height_0 / 2;
            y_0 = $getCenterY(barInfo.getRect()) - halfHeight;
            y_0 + ti.textDimension.height_0 > innerBnds.y_0 + innerBnds.height_0 && (y_0 = innerBnds.y_0 + innerBnds.height_0 - ti.textDimension.height_0);
            y_0 < innerBnds.y_0 && (y_0 = innerBnds.y_0);
            if (this$static.position == 0) {
              x_0 = $getRight(this$static.bnds) - (this$static.labelMargin + ti.textDimension.width_0);
              this$static.hoverGE = (null , drawTextInBounds(rnd, new CFRect(x_0, y_0, ti.textDimension.width_0, ti.textDimension.height_0), catName, catFont, HALIGN_RIGHT, VALIGN_MIDDLE, 5, null, null));
            }
             else {
              x_0 = this$static.bnds.x_0 + this$static.labelMargin;
              this$static.hoverGE = (null , drawTextInBounds(rnd, new CFRect(x_0, y_0, ti.textDimension.width_0, ti.textDimension.height_0), catName, catFont, 0, VALIGN_MIDDLE, 5, null, null));
            }
            $add_1(this$static.geAry, this$static.hoverGE);
          }
        }
      }
    }
     else {
      $resetHighlightedScaleLabels(this$static);
    }
  }
  return false;
}

function $setIsLineType(this$static, value_0){
  this$static.isLineType = value_0;
  this$static.bnds = null;
}

function $setLabelInterval(this$static, value_0){
  value_0 >= 1 && (this$static.labelInterval = value_0);
}

function $setMaxCatLen(this$static, value_0){
  this$static.maxCatLength = value_0;
}

function $setMaxCatLenRotated(this$static, value_0){
  this$static.maxCatLenRotated = value_0;
}

function $setShowDataTable(this$static, value_0){
  this$static.showDataTable = value_0;
}

function $setWidthsForHorzTrellis(this$static, col0Width){
  var divSpace, group1Width, group2Width, maxCatWidth, remainingSpace, thirdSpace, totalWidth;
  this$static.catWidthWithTrellis = col0Width;
  group1Width = this$static.group1Height;
  group2Width = this$static.group2Height;
  totalWidth = this$static.graph.bnds.width_0;
  !!$getLegend(this$static.graph) && $getLegend(this$static.graph).position == 2 && (totalWidth -= $getLegend(this$static.graph).bnds.width_0);
  maxCatWidth = totalWidth / 3;
  this$static.horzFixedWidth != -1 && (this$static.horzFixedMargin == -1?(maxCatWidth = this$static.horzFixedWidth - this$static.labelMargin):(maxCatWidth = this$static.horzFixedWidth - this$static.horzFixedMargin));
  if (maxCatWidth < this$static.catWidthWithTrellis + group1Width + group2Width) {
    if (group2Width == 0) {
      divSpace = $divideSpaceFor2Cols(maxCatWidth, this$static.catWidthWithTrellis, group1Width);
      this$static.catWidthWithTrellis = divSpace[0];
      group1Width = divSpace[1];
    }
     else {
      thirdSpace = maxCatWidth / 3;
      if (this$static.catWidthWithTrellis < thirdSpace) {
        remainingSpace = maxCatWidth - this$static.catWidthWithTrellis;
        divSpace = $divideSpaceFor2Cols(remainingSpace, group1Width, group2Width);
        group1Width = divSpace[0];
        group2Width = divSpace[1];
      }
       else {
        if (group1Width <= thirdSpace && group2Width <= thirdSpace)
          this$static.catWidthWithTrellis = maxCatWidth - (group1Width + group2Width);
        else if (group1Width <= thirdSpace) {
          remainingSpace = maxCatWidth - group1Width;
          divSpace = $divideSpaceFor2Cols(remainingSpace, this$static.catWidthWithTrellis, group2Width);
          this$static.catWidthWithTrellis = divSpace[0];
          group2Width = divSpace[1];
        }
         else if (group2Width <= thirdSpace) {
          remainingSpace = maxCatWidth - group2Width;
          divSpace = $divideSpaceFor2Cols(remainingSpace, this$static.catWidthWithTrellis, group1Width);
          this$static.catWidthWithTrellis = divSpace[0];
          group1Width = divSpace[1];
        }
         else {
          this$static.catWidthWithTrellis = thirdSpace;
          group1Width = thirdSpace;
          group2Width = thirdSpace;
        }
      }
    }
  }
  this$static.horzFixedMargin != -1 && this$static.horzFixedWidth != -1 && (this$static.catWidthWithTrellis += this$static.horzFixedMargin);
  group1Width > 0 && (this$static.group1Height = group1Width);
  group2Width > 0 && (this$static.group2Height = group2Width);
}

function $stripTfromTimeNameAndAddTimeZone_0(this$static, label_0){
  if (label_0.indexOf('T') != -1 || label_0.indexOf(':') != -1) {
    label_0 = $replaceAll(label_0, 'T', ' ');
    this$static.graph.chart.timeZone != null && (label_0 += ' ' + this$static.graph.chart.timeZone);
  }
  return label_0;
}

function CategoryScale(position, grph, isSecondary){
  Scale.call(this, position, grph, isSecondary);
  this.highlightedItems = new ArrayList;
  this.type_0 = ST_CATEGORY;
  this.curLabelFont = this.labelFont;
}

defineClass(36, 53, $intern_46, CategoryScale);
_.addLabels = function addLabels_0(rnd){
  var dim, drillStr, ge, hAlignment, heightPt, i, index_0, labelTI, labelTop, lenPt, lineHeight, lineText, lineText$iterator, margin, pos, rect, row, scaleHotRegionShp, scaleRect, textItem, textItem$index, textItem$max, textItems, ti, titleDim, titleSpace, valueScale, visibleIndex, widthPt, x_0, xOffset, y_0, yOffset;
  if (this.isHidden || !this.rowsToDisplay)
    return;
  clearGraphicElementArray(this.frontGeAry);
  lineHeight = $getLineHeight(this.curLabelFont, rnd);
  pos = this.getFirstLabelPosition();
  ge = new GraphicElement;
  this.isLineType && this.rowsToDisplay.size_1() > 1 && (pos -= this.halfAreaWidth);
  index_0 = 0;
  visibleIndex = 0;
  titleDim = $addTitleIfExists(this, rnd, ge);
  labelTop = this.bnds.y_0;
  !!titleDim && (labelTop += titleDim.height_0 + this.marginBetweenItems);
  !!ge.textAry && $add_1(this.geAry, ge);
  if (!this.hideLabels) {
    this.categoryLabelsMap = new HashMap;
    for (i = 0; i < this.rowsToUseForLabels.array.length; i++) {
      row = castTo($get_2(this.rowsToUseForLabels, i), 7);
      if (!row.hideScaleLabels && !$hideLabelsOnTrellis(this)) {
        if (this.position == 1 || this.position == 3) {
          if (this.displayRotated) {
            if (this.position == 1) {
              rect = new CFRect(pos, this.bnds.y_0, this.catAreaWidth, this.bnds.height_0 - this.labelMargin);
              x_0 = rect.x_0 + rect.width_0 / 2;
              this.degreesToRotateIfNeeded == -90 && (x_0 -= castTo($get_2(this.labelTIList, index_0), 79).textDimension.height_0 / 3.5);
              y_0 = rect.y_0 + this.labelMargin;
              for (lineText$iterator = new ArrayList$1(castTo($get_2(this.labelTIList, index_0), 79).wrappedLines); lineText$iterator.i < lineText$iterator.this$01.array.length;) {
                lineText = castToString($next_3(lineText$iterator));
                dim = rnd.measureText_0(lineText, this.curLabelFont);
                lenPt = getPointForAngle(dim.width_0, this.degreesToRotateIfNeeded);
                widthPt = getPointForAngle(lineHeight, this.degreesToRotateIfNeeded + 90);
                xOffset = lenPt.x_0;
                yOffset = lenPt.y_0;
                ti = new CFTextItem_1(lineText, this.curLabelFont, round_int(x_0 - xOffset + widthPt.x_0 / 2), round_int(y_0 - yOffset + widthPt.y_0 / 2), this.degreesToRotateIfNeeded);
                $add_1(this.labelList, ti);
                $addTextItemAsGraphicElement(this, ti, row.curIndex);
                $addDrilldownOverlayShape(this, rect, castTo($get_2(this.labelTIList, index_0), 79), dim, lineHeight);
                x_0 += $getLineHeight(this.curLabelFont, rnd) * this.angleMultiplierHeight.x_0;
                y_0 += $getLineHeight(this.curLabelFont, rnd) * this.angleMultiplierHeight.y_0;
              }
            }
             else {
              rect = new CFRect(pos, this.bnds.y_0, this.catAreaWidth, this.bnds.height_0 - this.labelMargin);
              x_0 = rect.x_0 + rect.width_0 / 2;
              this.degreesToRotateIfNeeded == -90 && (x_0 -= castTo($get_2(this.labelTIList, index_0), 79).textDimension.height_0 / 2);
              y_0 = rect.y_0 + rect.height_0;
              for (lineText$iterator = new ArrayList$1(castTo($get_2(this.labelTIList, index_0), 79).wrappedLines); lineText$iterator.i < lineText$iterator.this$01.array.length;) {
                lineText = castToString($next_3(lineText$iterator));
                dim = rnd.measureText_0(lineText, this.curLabelFont);
                widthPt = getPointForAngle(lineHeight, this.degreesToRotateIfNeeded + 90);
                heightPt = getPointForAngle(castTo($get_2(this.labelTIList, index_0), 79).textDimension.height_0, this.degreesToRotateIfNeeded + 90);
                getPointForAngle(dim.width_0, this.degreesToRotateIfNeeded);
                yOffset = heightPt.y_0;
                ti = new CFTextItem_1(lineText, this.curLabelFont, round_int(x_0 + widthPt.x_0 / 2), round_int(y_0 - yOffset + widthPt.y_0 / 2), this.degreesToRotateIfNeeded);
                $add_1(this.labelList, ti);
                $addTextItemAsGraphicElement(this, ti, row.curIndex);
                $addDrilldownOverlayShape(this, rect, castTo($get_2(this.labelTIList, index_0), 79), dim, lineHeight);
                x_0 += $getLineHeight(this.curLabelFont, rnd) * this.angleMultiplierHeight.x_0;
                y_0 += $getLineHeight(this.curLabelFont, rnd) * this.angleMultiplierHeight.y_0;
              }
            }
          }
           else {
            this.labelIntervalToUse = 1;
            this.labelInterval > 0 && (this.labelIntervalToUse = this.labelInterval);
            y_0 = this.bnds.y_0 + this.labelMargin;
            this.position == 3 && (y_0 = labelTop);
            rect = new CFRect(pos, y_0, this.catAreaWidth, this.bnds.height_0);
            labelTI = castTo($get_2(this.labelTIList, visibleIndex), 79);
            textItems = $getCFTextItemsForWrappedLines(labelTI, rnd, rect, this.curLabelFont, HALIGN_CENTER, 0);
            for (textItem$index = 0 , textItem$max = textItems.length; textItem$index < textItem$max; ++textItem$index) {
              textItem = textItems[textItem$index];
              $add_1(this.labelList, textItem);
              $addTextItemAsGraphicElement(this, textItem, row.curIndex);
              !!titleDim && $setHeight(rect, rect.height_0 - (titleDim.height_0 + this.marginBetweenItems));
              this.showDataTable && $setHeight(rect, rect.height_0 - $getTableHeight(this, rnd, false));
              $addDrilldownOverlayShape(this, rect, labelTI, null, 0);
            }
            ++visibleIndex;
          }
        }
         else if (this.position == 0) {
          this.labelIntervalToUse = 1;
          this.labelInterval > 0 && (this.labelIntervalToUse = this.labelInterval);
          margin = this.labelMargin;
          this.horzFixedMargin != -1 && (margin = this.horzFixedMargin);
          rect = new CFRect(this.bnds.x_0, pos, this.bnds.width_0 - margin, this.catAreaWidth);
          if (titleDim) {
            titleSpace = this.titleLabelMargin + titleDim.height_0 + this.titleLabelMargin;
            $setX_0(rect, this.bnds.x_0 + titleSpace);
            $setWidth(rect, rect.width_0 - titleSpace);
          }
          (this.group1Height > 0 || this.group2Height > 0) && (this.horzFixedWidth != -1 && this.horzFixedMargin != -1?(rect = new CFRect($getRight(this.bnds) - this.catWidthWithTrellis, pos, this.catWidthWithTrellis - margin, this.catAreaWidth)):(rect = new CFRect($getRight(this.bnds) - (margin + this.catWidthWithTrellis), pos, this.catWidthWithTrellis, this.catAreaWidth)));
          labelTI = castTo($get_2(this.labelTIList, index_0), 79);
          hAlignment = HALIGN_RIGHT;
          this.hAlign != -1 && (hAlignment = this.hAlign);
          textItems = $getCFTextItemsForWrappedLines(labelTI, rnd, rect, this.curLabelFont, hAlignment, VALIGN_MIDDLE);
          for (textItem$index = 0 , textItem$max = textItems.length; textItem$index < textItem$max; ++textItem$index) {
            textItem = textItems[textItem$index];
            $add_1(this.labelList, textItem);
            $addTextItemAsGraphicElement(this, textItem, row.curIndex);
            $addDrilldownOverlayShape(this, rect, labelTI, null, 0);
          }
        }
         else if (this.position == 2) {
          this.labelIntervalToUse = 1;
          this.labelInterval > 0 && (this.labelIntervalToUse = this.labelInterval);
          margin = this.labelMargin;
          this.horzFixedMargin != -1 && (margin = this.horzFixedMargin);
          rect = new CFRect(this.bnds.x_0 + margin, pos, this.bnds.width_0, this.catAreaWidth);
          labelTI = castTo($get_2(this.labelTIList, index_0), 79);
          hAlignment = 0;
          this.hAlign != -1 && (hAlignment = this.hAlign);
          textItems = $getCFTextItemsForWrappedLines(labelTI, rnd, rect, this.curLabelFont, hAlignment, VALIGN_MIDDLE);
          for (textItem$index = 0 , textItem$max = textItems.length; textItem$index < textItem$max; ++textItem$index) {
            textItem = textItems[textItem$index];
            $add_1(this.labelList, textItem);
            $addTextItemAsGraphicElement(this, textItem, row.curIndex);
            $addDrilldownOverlayShape(this, rect, labelTI, null, 0);
          }
        }
      }
      ++index_0;
      pos = this.getNextLabelPosition(pos, index_0, rnd);
    }
    if (this.position != 1 || this.groupedScaleWithBaseScale) {
      $addGroupLabels(this, rnd, 'GROUP1');
      $addGroupLabels(this, rnd, 'GROUP2');
    }
    valueScale = $getValueScaleByNumber(this.graph, 0);
    if (!!valueScale && $showValueScaleSortIcon(valueScale)) {
      this.sortGE = new GraphicElement;
      scaleRect = new CFRect(this.bnds.x_0 + this.startMargin, this.bnds.y_0, this.bnds.width_0 - (this.startMargin + this.endMargin), this.bnds.height_0);
      this.position == 1 && this.showDataTable && $setHeight(scaleRect, scaleRect.height_0 - (this.titleHeight + $getTableHeight(this, rnd, false)));
      (this.position == 0 || this.position == 2) && (scaleRect = new CFRect(this.bnds.x_0, this.bnds.y_0 + this.startMargin, this.bnds.width_0, this.bnds.height_0 - (this.startMargin + this.endMargin)));
      scaleHotRegionShp = new CFShape_1(scaleRect, ($clinit_CFFill() , TRANSPARENT_0), null);
      drillStr = $getHvrDataStrForScale(this.graph, 'Value', valueScale);
      $addShape_0(this.sortGE, scaleHotRegionShp, drillStr);
      $add_1(this.geAry, this.sortGE);
    }
  }
}
;
_.createGridDrawObjects = function createGridDrawObjects_0(rnd){
  var adjacentScale, ge, innerBnds, left, lineBnds, primaryValScale, stroke, top_0;
  if (this.isHidden)
    return;
  this.drawBaseline && $drawBaseline(this);
  if ($isTrellis(this.graph)) {
    if (this.majorGridLineStroke) {
      primaryValScale = $getValueScaleByNumber(this.graph, 0);
      if (!this.isSecondary || !!primaryValScale && primaryValScale.hiddenForNoData_0 || $isTrellis(this.graph) && this.position == 3) {
        ge = new GraphicElement;
        stroke = this.majorGridLineStroke;
        adjacentScale = $getAdjacentScale(this);
        innerBnds = $getMarginBoundsRect(adjacentScale);
        if (this.position == 1) {
          $setHeight(innerBnds, innerBnds.height_0 + this.bnds.height_0);
          left = innerBnds.x_0 + this.catAreaWidth;
          lineBnds = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
          $setHeight(lineBnds, lineBnds.height_0 - this.titleHeight);
          $drawAllGroupLines(this, ge, stroke, innerBnds, innerBnds.x_0, $getRight(this.bnds) - this.endMargin, left, lineBnds);
          $setDataTableBndsAndDraw(this, rnd, ge, stroke);
        }
         else if (this.position == 3) {
          $setHeight(innerBnds, innerBnds.height_0 + this.bnds.height_0);
          $setY_0(innerBnds, this.bnds.y_0);
          left = innerBnds.x_0 + this.catAreaWidth;
          lineBnds = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
          $drawAllGroupLines(this, ge, stroke, innerBnds, innerBnds.x_0, $getRight(this.bnds) - this.endMargin, left, lineBnds);
        }
         else if (this.position == 0) {
          $setWidth(innerBnds, innerBnds.width_0 + this.bnds.width_0 - this.titleHeight);
          $setX_0(innerBnds, this.bnds.x_0 + this.titleHeight);
          top_0 = this.bnds.y_0 + this.startMargin + this.catAreaWidth;
          lineBnds = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
          $drawAllGroupLines(this, ge, stroke, innerBnds, this.bnds.y_0 + this.startMargin, $getBottom(this.bnds) - this.endMargin, top_0, lineBnds);
        }
        $add_0(this.geAry, 0, ge);
      }
    }
  }
   else if (this.showDataTable) {
    if (this.majorGridLineStroke) {
      primaryValScale = $getValueScaleByNumber(this.graph, 0);
      if (!this.isSecondary || !!primaryValScale && primaryValScale.hiddenForNoData_0) {
        ge = new GraphicElement;
        stroke = this.majorGridLineStroke;
        $setDataTableBndsAndDraw(this, rnd, ge, stroke);
        $add_0(this.geAry, 0, ge);
      }
    }
  }
}
;
_.formatSubClassSpecific = function formatSubClassSpecific_0(rnd, numRows, numCols, formatPass){
  var fitsUnRotated, i, i0, label_0, lineHeight, maxLines, maxPixelHeight, maxWidth, row, ti;
  this.limitDataIfNeeded(numRows, formatPass);
  this.setCatArea();
  this.sortGE = null;
  ($isTrellis(this.graph) || this.showDataTable) && (this.degreesToRotateIfNeeded = -90);
  $isTrellis(this.graph) && (this.showDataTable || this.boxedTrellis) && (this.GROUP_MARGIN = 0);
  $getRight(this.bnds) == this.graph.chart.dimension.width_0 && this.showDataTable && this.endMargin == 0 && (this.endMargin = 1);
  lineHeight = $getLineHeight(this.labelFont, rnd);
  this.curLabelFont = this.labelFont;
  this.labelTIList = new ArrayList;
  this.rowsToUseForLabels = new ArrayList;
  if (!this.rowsToDisplay)
    return;
  if (!this.isHidden) {
    if (this.position == 1 || this.position == 3) {
      fitsUnRotated = true;
      formatPass == 0?(this.lastFormatPassRotated = false):this.lastFormatPassRotated && (fitsUnRotated = false);
      this.labelIntervalToUse = 1;
      this.labelInterval > 0 && (this.labelIntervalToUse = this.labelInterval);
      for (i0 = 0; i0 < this.rowsToDisplay.size_1(); i0++) {
        if (i0 % this.labelIntervalToUse == 0) {
          row = castTo(this.rowsToDisplay.get_1(i0), 7);
          label_0 = $getRowLabel(this, row, false);
          ti = ($clinit_StrUtil() , getWrappedTextForWidthWithMaxLines(rnd, label_0, this.curLabelFont, this.catAreaWidth * this.labelIntervalToUse - this.marginBetweenItems, -1, -1));
          if (ti.textDimension.height_0 > 2 * lineHeight || ti.aWordIsSplit || ti.wrappedLines.array.length == 1 && $equals_2($getStringForIndex(ti), '...')) {
            fitsUnRotated = false;
            break;
          }
           else {
            ti.data_0 = row;
            $add_1(this.labelTIList, ti);
            $add_1(this.rowsToUseForLabels, row);
          }
        }
      }
      if (!fitsUnRotated) {
        this.angleMultiplierWidth = getAngleMultiplier(this.degreesToRotateIfNeeded);
        this.angleMultiplierHeight = getAngleMultiplier(this.degreesToRotateIfNeeded + 90);
        this.labelIntervalToUse = this.getRotatedSkipModulus(lineHeight);
        this.displayRotated = true;
        this.lastFormatPassRotated = true;
        this.labelTIList = new ArrayList;
        this.rowsToUseForLabels = new ArrayList;
        maxLines = 2;
        this.catAreaWidth < lineHeight * 2 && (maxLines = 1);
        for (i = 0; i < this.rowsToDisplay.size_1(); i++) {
          if (i % this.labelIntervalToUse == 0) {
            row = castTo(this.rowsToDisplay.get_1(i), 7);
            label_0 = $getRowLabel(this, row, true);
            maxPixelHeight = 100;
            this.graph.bnds.height_0 < 300 && (maxPixelHeight = this.graph.bnds.height_0 / 3);
            ti = getWrappedTextForWidthWithMaxLines(rnd, label_0, this.curLabelFont, maxPixelHeight, -1, maxLines);
            ti.aWordIsSplit && (ti = getWrappedTextForWidthWithMaxLines(rnd, label_0, this.curLabelFont, maxPixelHeight, -1, 1));
            ti.data_0 = row;
            $add_1(this.labelTIList, ti);
            $add_1(this.rowsToUseForLabels, row);
          }
        }
      }
    }
     else {
      this.curLabelFont = $getSideLabelFontForSize(this, rnd);
      this.labelIntervalToUse = 1;
      this.labelInterval > 0 && (this.labelIntervalToUse = this.labelInterval);
      for (i = 0; i < this.rowsToDisplay.size_1(); i++) {
        if (i % this.labelIntervalToUse == 0) {
          row = castTo(this.rowsToDisplay.get_1(i), 7);
          label_0 = $getRowLabel(this, row, false);
          maxLines = 2;
          this.catAreaWidth < lineHeight * 2 && (maxLines = 1);
          maxWidth = 170;
          !!this.graph.bnds && this.graph.bnds.width_0 / 2 < 170 && (maxWidth = round_int(this.graph.bnds.width_0 / 2));
          this.horzFixedWidth != -1 && (maxWidth = this.horzFixedWidth);
          this.horzFixedMargin != -1 && this.horzFixedMargin < maxWidth && (maxWidth -= this.horzFixedMargin);
          (this.group1Height > 0 || this.group2Height > 0) && (this.horzFixedMargin != -1 && this.horzFixedWidth != -1?(maxWidth = round_int(this.catWidthWithTrellis) - this.horzFixedMargin):(maxWidth = round_int(this.catWidthWithTrellis)));
          ti = getWrappedTextForWidthWithMaxLines(rnd, label_0, this.curLabelFont, maxWidth, -1, maxLines);
          ti.data_0 = row;
          $add_1(this.labelTIList, ti);
          $add_1(this.rowsToUseForLabels, row);
        }
      }
    }
  }
}
;
_.freeResources_0 = function freeResources_56(){
  $freeResources_32(this);
  this.categoryLabelsMap = null;
  this.highlightedItems = null;
  this.hoverGE = null;
  this.rowsToUseForLabels = null;
  this.colValues = null;
  !!this.dataTableLegendItems && (this.dataTableLegendItems.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this.dataTableLegendItems = null;
  this.labelTIList = null;
  this.tableCols = null;
}
;
_.getFirstLabelPosition = function getFirstLabelPosition(){
  return $getMinPosition(this);
}
;
_.getHoverLabel = function getHoverLabel(label_0){
  return label_0;
}
;
_.getIsLineType = function getIsLineType_0(){
  return this.isLineType;
}
;
_.getMinPosition = function getMinPosition_0(){
  return $getMinPosition(this);
}
;
_.getNextLabelPosition = function getNextLabelPosition(pos, index_0, rnd){
  return pos + this.catAreaWidth * this.labelIntervalToUse;
}
;
_.getPositionForValue = function getPositionForValue_0(rowIndex){
  return this.isLineType && !!this.rowsToDisplay && this.rowsToDisplay.size_1() > 1?rowIndex * this.catAreaWidth:rowIndex * this.catAreaWidth + this.halfAreaWidth;
}
;
_.getRotatedSkipModulus = function getRotatedSkipModulus(lineHeight){
  var skipMod, tempSkipMod;
  skipMod = 1;
  this.labelInterval > 0 && (skipMod = this.labelInterval);
  if (this.catAreaWidth < lineHeight * this.angleMultiplierHeight.x_0) {
    tempSkipMod = round_int(lineHeight * this.angleMultiplierHeight.x_0 / this.catAreaWidth) + 1;
    tempSkipMod > skipMod && (skipMod = tempSkipMod);
  }
  return skipMod;
}
;
_.limitDataIfNeeded = function limitDataIfNeeded(numRows, formatPass){
  var column;
  if (this.useColData) {
    this.rowsToDisplay = new ArrayList;
    column = $getFirstVisibleCol(this.graph.data_0);
    while (column) {
      this.rowsToDisplay.add_0(column);
      column = $getNextVisibleCol(this.graph.data_0, column);
    }
  }
   else {
    $limitDataIfNeeded(this, numRows);
  }
  this.rowsToDisplay = this.graph.handler.limitDataRowsForCatScaleIfSpecified(this.rowsToDisplay);
  numRows = this.rowsToDisplay.size_1();
  return numRows;
}
;
_.setCatArea = function setCatArea(){
  var numAreas;
  if (this.rowsToDisplay) {
    numAreas = this.rowsToDisplay.size_1();
    this.isLineType && numAreas > 1 && (numAreas -= 1);
    this.catAreaWidth = $getLength(this) / numAreas;
    this.halfAreaWidth = this.catAreaWidth / 2;
  }
}
;
_.setDimensions = function setDimensions_1(rnd){
  var maxHeight, maxWidth, scale, scale$iterator, ti, ti$iterator, totalHeight;
  if (!this.isHidden) {
    this.titleHeight = $getTitleHeight(this, rnd);
    maxHeight = 0;
    maxWidth = 0;
    if (!this.hideLabels) {
      if (this.position == 1 || this.position == 3) {
        for (ti$iterator = new ArrayList$1(this.labelTIList); ti$iterator.i < ti$iterator.this$01.array.length;) {
          ti = castTo($next_3(ti$iterator), 79);
          if (this.displayRotated) {
            totalHeight = ti.textDimension.width_0 * $wnd.Math.abs(this.angleMultiplierWidth.y_0) + ti.textDimension.height_0 * $wnd.Math.abs(this.angleMultiplierHeight.y_0);
            totalHeight > maxHeight && (maxHeight = totalHeight);
          }
           else {
            ti.textDimension.height_0 > maxHeight && (maxHeight = ti.textDimension.height_0);
          }
        }
        this.displayRotated && this.degreesToRotateIfNeeded == -90 && (maxHeight += 5);
      }
       else {
        for (ti$iterator = new ArrayList$1(this.labelTIList); ti$iterator.i < ti$iterator.this$01.array.length;) {
          ti = castTo($next_3(ti$iterator), 79);
          ti.textDimension.width_0 > maxWidth && (maxWidth = ti.textDimension.width_0);
        }
        this.horzFixedWidth != -1 && (maxWidth = this.horzFixedWidth);
      }
    }
    if (this.position == 1 || this.position == 3) {
      if (this.position == 3 || this.position == 1 && this.groupedScaleWithBaseScale) {
        this.group1Height = $getGroupHeight(this, rnd, 'GROUP1');
        this.group2Height = $getGroupHeight(this, rnd, 'GROUP2');
      }
      if (this.position == 3 && (this.group1Height > 0 || this.group2Height > 0) && this.isSecondary) {
        $setHeight(this.bnds, this.group1Height + this.group2Height);
      }
       else {
        this.tableHeight = $getTableHeight(this, rnd, false);
        $setHeight(this.bnds, maxHeight + this.labelMargin + this.titleHeight + this.group1Height + this.group2Height + this.tableHeight);
        if (this.tableHeight > 0 && !!$getLegend(this.graph) && !$getLegend(this.graph).isHidden) {
          $getLegend(this.graph).isHidden = true;
          $setBounds_1($getLegend(this.graph), new CFRect(0, 0, 0, 0));
          for (scale$iterator = new ArrayList$1(this.graph.scales); scale$iterator.i < scale$iterator.this$01.array.length;) {
            scale = castTo($next_3(scale$iterator), 53);
            $reset_4(scale);
          }
        }
      }
    }
     else {
      this.titleHeight > 0 && (this.titleHeight += this.titleLabelMargin);
      this.group1Height = $getGroupWidth(this, rnd, 'GROUP1');
      this.group2Height = $getGroupWidth(this, rnd, 'GROUP2');
      this.group1Height > 0 || this.group2Height > 0?$setWidthsForHorzTrellis(this, maxWidth + 1):(this.catWidthWithTrellis = maxWidth);
      this.horzFixedMargin == -1?$setWidth(this.bnds, this.catWidthWithTrellis + this.labelMargin + this.titleHeight + this.group1Height + this.group2Height):this.horzFixedWidth != -1?$setWidth(this.bnds, this.catWidthWithTrellis + this.titleHeight + this.group1Height + this.group2Height):$setWidth(this.bnds, this.catWidthWithTrellis + this.horzFixedMargin + this.titleHeight + this.group1Height + this.group2Height);
    }
  }
}
;
_.setHoverEffects_1 = function setHoverEffects_20(hoverData, rnd, seriesIndex){
  return $setHoverEffects_8(this, hoverData, rnd);
}
;
_.setMargins = function setMargins_0(rnd, numRows){
  var dim, halfHeight, height, i, maxWidth, numCols, rowInfo, textDim, width_0;
  if (this.graph.textAndTicksInBounds) {
    if (this.position == 1 || this.position == 3) {
      if (this.isLineType && !!this.rowsToDisplay && this.rowsToDisplay.size_1() > 1) {
        if (!!this.labelTIList && this.labelTIList.array.length > 0 && $get_2(this.labelTIList, 0) != null) {
          if (this.displayRotated) {
            width_0 = castTo($get_2(this.labelTIList, 0), 79).textDimension.width_0;
            height = castTo($get_2(this.labelTIList, this.labelTIList.array.length - 1), 79).textDimension.height_0;
            if (this.position == 1) {
              this.startMargin = width_0 * this.angleMultiplierWidth.x_0;
              this.endMargin = height * this.angleMultiplierHeight.x_0;
            }
             else {
              this.endMargin = width_0 * this.angleMultiplierWidth.x_0;
              this.startMargin = height * this.angleMultiplierHeight.x_0;
            }
          }
           else {
            width_0 = castTo($get_2(this.labelTIList, 0), 79).textDimension.width_0;
            this.startMargin = width_0 / 2;
            width_0 = castTo($get_2(this.labelTIList, this.labelTIList.array.length - 1), 79).textDimension.width_0;
            this.endMargin = width_0 / 2;
          }
        }
      }
       else if (this.displayRotated && this.degreesToRotateIfNeeded != -90 && this.degreesToRotateIfNeeded != 90) {
        if (!!this.labelTIList && this.labelTIList.array.length > 0 && $get_2(this.labelTIList, 0) != null) {
          if (this.position == 1) {
            width_0 = castTo($get_2(this.labelTIList, 0), 79).textDimension.width_0;
            width_0 * this.angleMultiplierWidth.x_0 > this.catAreaWidth / 2 && (this.startMargin = width_0 * this.angleMultiplierWidth.x_0 - this.catAreaWidth / 2);
          }
           else {
            width_0 = castTo($get_2(this.labelTIList, this.labelTIList.array.length - 1), 79).textDimension.width_0;
            height = castTo($get_2(this.labelTIList, this.labelTIList.array.length - 1), 79).textDimension.height_0;
            width_0 * this.angleMultiplierWidth.x_0 + height * this.angleMultiplierHeight.x_0 / 2 > this.catAreaWidth / 2 && (this.endMargin = width_0 * this.angleMultiplierWidth.x_0 + height * this.angleMultiplierHeight.x_0 / 2 - this.catAreaWidth / 2);
          }
        }
      }
      if (this.showDataTable) {
        numCols = this.tableCols.array.length;
        maxWidth = 0;
        for (i = 0; i < numCols; i++) {
          dim = rnd.measureText_0($getName(castTo($get_2(this.tableCols, i), 7)), this.curLabelFont);
          maxWidth < dim.width_0 && (maxWidth = dim.width_0);
        }
        this.hideDataInChart?(maxWidth += 10):(maxWidth += 25);
        maxWidth > this.graph.bnds.width_0 / 4 && (maxWidth = this.graph.bnds.width_0 / 4);
        this.startMargin < maxWidth && (this.startMargin = maxWidth);
      }
    }
     else if (!!this.rowsToDisplay && this.rowsToDisplay.size_1() > 0) {
      rowInfo = castTo(this.rowsToDisplay.get_1(0), 7);
      textDim = rnd.measureText_0($getRowLabel(this, rowInfo, false), this.curLabelFont);
      halfHeight = textDim.height_0 / 2;
      this.startMargin = halfHeight;
      this.endMargin = halfHeight;
    }
  }
}
;
_.GROUP_MARGIN = 10;
_.autoAbbrevValues = false;
_.boxedTrellis = false;
_.catAreaWidth = -1;
_.catWidthWithTrellis = 0;
_.dataTableLegendItemHovered = false;
_.degreesToRotateIfNeeded = -60;
_.group1Height = 0;
_.group2Height = 0;
_.groupedScaleWithBaseScale = false;
_.hAlign = -1;
_.halfAreaWidth = 0;
_.hideDataInChart = false;
_.horzFixedMargin = -1;
_.horzFixedWidth = -1;
_.isLineType = false;
_.labelInterval = 0;
_.labelIntervalToUse = 1;
_.lastFormatPassRotated = false;
_.marginBetweenItems = 5;
_.maxCatLenRotated = 30;
_.maxCatLength = -1;
_.minFontSize = 1;
_.minTableCellFontSize = 5;
_.showDataTable = false;
_.tableHeight = 0;
_.titleHeight = 0;
_.useColData = false;
var Lcom_domo_charting_scales_CategoryScale_2_classLit = createForClass('com.domo.charting.scales', 'CategoryScale', 36);
function $getCatDisplayAry(this$static, rnd){
  var i, lastDrawnPos, minSpace;
  this$static.graph.isHorizontal?(minSpace = $getLineHeight(this$static.curLabelFont, rnd) * 0.9):(minSpace = $getLineHeight(this$static.curLabelFont, rnd) * this$static.angleMultiplierHeight.x_0);
  this$static.catDisplayAry = initUnidimensionalArray(Z_classLit, $intern_24, 41, this$static.catPositionAry.length, 16, 1);
  this$static.catDisplayAry[0] = true;
  this$static.catDisplayAry[this$static.catDisplayAry.length - 1] = true;
  lastDrawnPos = this$static.catPositionAry[this$static.catPositionAry.length - 1];
  for (i = this$static.catPositionAry.length - 2; i > 0; i--) {
    if (this$static.catPositionAry[i] + minSpace < lastDrawnPos) {
      lastDrawnPos = this$static.catPositionAry[i];
      this$static.catDisplayAry[i] = true;
    }
     else {
      this$static.catDisplayAry[i] = false;
    }
    i == 1 && this$static.catPositionAry[0] + minSpace > this$static.catPositionAry[1] && (this$static.catDisplayAry[1] = false);
  }
}

function $getCatPositionAry(this$static){
  var gridTotal, i, pos, row, rowPct, rowSum, rowsToDisplay, width_0;
  rowsToDisplay = this$static.rowsToDisplay;
  $resetTotalsAndSums(this$static.graph.data_0);
  $clearAlternateValues_0(this$static.graph.data_0);
  gridTotal = $getGridTotal(this$static.graph.data_0);
  this$static.catPositionAry = initUnidimensionalArray(D_classLit, $intern_24, 41, rowsToDisplay.size_1(), 15, 1);
  pos = 0;
  for (i = 0; i < rowsToDisplay.size_1(); i++) {
    row = castTo(rowsToDisplay.get_1(i), 7);
    rowSum = (isNaN_0(row.origSum) && (row.origSum = $calcSum(row, false, false, false)) , row.origSum);
    rowPct = rowSum / gridTotal;
    width_0 = $getLength(this$static) * rowPct;
    isNaN(width_0) && (width_0 = 0);
    this$static.catPositionAry[i] = pos + width_0 / 2;
    pos += width_0;
  }
  this$static.catDisplayAry = null;
}

function CategoryScaleMarimekko(position, grph){
  CategoryScale.call(this, position, grph, false);
  this.catPositionAry = null;
  this.catDisplayAry = null;
  this.minFontSize = this.curLabelFont.size_0;
}

defineClass(235, 36, $intern_46, CategoryScaleMarimekko);
_.getFirstLabelPosition = function getFirstLabelPosition_0(){
  return $getMinPosition(this) + this.catPositionAry[0] - this.halfAreaWidth;
}
;
_.getHoverLabel = function getHoverLabel_0(label_0){
  if (this.graph.isHorizontal) {
    if (!!label_0.textAry && label_0.textAry.array.length > 0 && castTo($get_2(label_0.textAry, 0), 26).y_0 < 0)
      return null;
  }
  return label_0;
}
;
_.getNextLabelPosition = function getNextLabelPosition_0(pos, index_0, rnd){
  var position;
  if (this.displayRotated || this.graph.isHorizontal) {
    this.catDisplayAry == null && $getCatDisplayAry(this, rnd);
    if (index_0 < this.catPositionAry.length) {
      position = $getMinPosition(this) + this.catPositionAry[index_0] - this.halfAreaWidth;
      if (this.catDisplayAry[index_0])
        return position;
      return position - $intern_10;
    }
  }
   else if (index_0 < this.catPositionAry.length) {
    return $getMinPosition(this) + this.catPositionAry[index_0] - this.halfAreaWidth;
  }
  return $getMinPosition(this) + this.catPositionAry[0] - this.halfAreaWidth;
}
;
_.getPositionForValue = function getPositionForValue_1(rowIndex){
  this.catPositionAry == null && $getCatPositionAry(this);
  if (this.catPositionAry != null && rowIndex < this.catPositionAry.length)
    return this.catPositionAry[round_int(rowIndex)];
  return 0;
}
;
_.getRotatedSkipModulus = function getRotatedSkipModulus_0(lineHeight){
  return 1;
}
;
_.setCatArea = function setCatArea_0(){
  var fullWidth, halfWidth, i, i0, lastPos, minAreaWidth;
  this.minFontSize = this.curLabelFont.size_0;
  if (this.rowsToDisplay) {
    $getCatPositionAry(this);
    if (this.catPositionAry != null) {
      minAreaWidth = $intern_11;
      lastPos = 0;
      for (i0 = 0; i0 < this.catPositionAry.length; i0++) {
        halfWidth = this.catPositionAry[i0] - lastPos;
        fullWidth = halfWidth * 2;
        fullWidth < minAreaWidth && (minAreaWidth = fullWidth);
        lastPos += fullWidth;
      }
      this.catAreaWidth = minAreaWidth;
      this.halfAreaWidth = this.catAreaWidth / 2;
      for (i = this.catPositionAry.length - 1; i >= 0; i--) {
        this.catPositionAry[i] == 0 && (castTo(this.rowsToDisplay.get_1(i), 7).hideScaleLabels = true);
      }
    }
  }
}
;
var Lcom_domo_charting_scales_CategoryScaleMarimekko_2_classLit = createForClass('com.domo.charting.scales', 'CategoryScaleMarimekko', 235);
function $addLabels(this$static){
  var avgDim, avgRect, halfHeight, height, maxDim, maxRect, minDim, minRect;
  clearGraphicElementArray(this$static.geAry);
  if (!this$static.isHidden) {
    height = $getLineHeight(this$static.labelFont, this$static.rnd);
    halfHeight = height / 2;
    if (this$static.graph.isHorizontal) {
      avgRect = null;
      minDim = this$static.rnd.measureText_0(this$static.minStr, this$static.labelFont);
      minRect = new CFRect(this$static.minPos - minDim.width_0 / 2, this$static.bnds.y_0 + this$static.labelMargin, minDim.width_0, height);
      maxDim = this$static.rnd.measureText_0(this$static.maxStr, this$static.labelFont);
      maxRect = new CFRect(this$static.maxPos - maxDim.width_0 / 2, this$static.bnds.y_0 + this$static.labelMargin, maxDim.width_0, height);
      if (this$static.avgLineType != 2) {
        avgDim = this$static.rnd.measureText_0(this$static.avgStr, this$static.labelFont);
        avgRect = new CFRect(this$static.avgPos - avgDim.width_0 / 2, this$static.bnds.y_0 + this$static.labelMargin, avgDim.width_0, height);
      }
      $handleHorizontalCollisions(this$static, minRect, avgRect, maxRect);
      $add_1(this$static.geAry, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(this$static.rnd, minRect, this$static.minStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
      $add_1(this$static.geAry, (null , drawTextInBounds(this$static.rnd, maxRect, this$static.maxStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
      this$static.avgLineType != 2 && $add_1(this$static.geAry, (null , drawTextInBounds(this$static.rnd, avgRect, this$static.avgStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
    }
     else {
      avgRect = null;
      minRect = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, this$static.minPos - halfHeight, this$static.bnds.width_0, height);
      maxRect = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, this$static.maxPos - halfHeight, this$static.bnds.width_0, height);
      this$static.avgLineType != 2 && (avgRect = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, this$static.avgPos - halfHeight, this$static.bnds.width_0, height));
      $handleVerticalCollisions(this$static, minRect, avgRect, maxRect, halfHeight);
      $add_1(this$static.geAry, ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(this$static.rnd, minRect, this$static.minStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
      $add_1(this$static.geAry, (null , drawTextInBounds(this$static.rnd, maxRect, this$static.maxStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
      this$static.avgLineType != 2 && $add_1(this$static.geAry, (null , drawTextInBounds(this$static.rnd, avgRect, this$static.avgStr, this$static.labelFont, 0, VALIGN_MIDDLE, 5, null, null)));
    }
  }
}

function $addMinMaxAvgLines(this$static, stroke){
  var avgPos, dashedStroke, ge, maxPos, minPos, rect, xInnerBnds, xScale, yInnerBnds, yScale;
  if (!this$static.isHidden) {
    if ($showMinMaxAvgLines(this$static) && !!stroke && !!this$static.graph) {
      dashedStroke = $duplicate_7(stroke);
      $setStyle_0(dashedStroke, 1);
      dashedStroke.width_0 = 1;
      yScale = $getYScale(this$static.graph, false);
      xScale = $getXScale(this$static.graph, false);
      if (this$static.graph.isHorizontal) {
        maxPos = this$static.maxPos;
        minPos = this$static.minPos;
        avgPos = this$static.avgPos;
        rect = $getInnerBoundsRect(yScale);
        xInnerBnds = $getInnerBoundsRect(xScale);
        if (!!xInnerBnds && !!rect) {
          ge = new GraphicElement;
          maxPos <= xInnerBnds.x_0 + xInnerBnds.width_0 && maxPos >= xInnerBnds.x_0 && $addShape(ge, new CFShape_0(new CFPath_1(maxPos, rect.y_0, maxPos, rect.y_0 + rect.height_0), null, dashedStroke));
          minPos <= xInnerBnds.x_0 + xInnerBnds.width_0 && minPos >= xInnerBnds.x_0 && $addShape(ge, new CFShape_0(new CFPath_1(minPos, rect.y_0, minPos, rect.y_0 + rect.height_0), null, dashedStroke));
          this$static.avgLineType != 2 && avgPos <= xInnerBnds.x_0 + xInnerBnds.width_0 && avgPos >= xInnerBnds.x_0 && $addShape(ge, new CFShape_0(new CFPath_1(avgPos, rect.y_0, avgPos, rect.y_0 + rect.height_0), null, dashedStroke));
          $addGraphicElement_0(this$static.graph, ge);
        }
      }
       else {
        maxPos = this$static.maxPos;
        minPos = this$static.minPos;
        avgPos = this$static.avgPos;
        rect = $getInnerBoundsRect(xScale);
        yInnerBnds = $getInnerBoundsRect(yScale);
        if (!!yInnerBnds && !!rect) {
          ge = new GraphicElement;
          maxPos >= yInnerBnds.y_0 && maxPos <= yInnerBnds.y_0 + yInnerBnds.height_0 && $addShape(ge, new CFShape_0(new CFPath_1(rect.x_0, maxPos, rect.x_0 + rect.width_0, maxPos), null, dashedStroke));
          minPos >= yInnerBnds.y_0 && minPos <= yInnerBnds.y_0 + yInnerBnds.height_0 && $addShape(ge, new CFShape_0(new CFPath_1(rect.x_0, minPos, rect.x_0 + rect.width_0, minPos), null, dashedStroke));
          this$static.avgLineType != 2 && avgPos >= yInnerBnds.y_0 && avgPos <= yInnerBnds.y_0 + yInnerBnds.height_0 && $addShape(ge, new CFShape_0(new CFPath_1(rect.x_0, avgPos, rect.x_0 + rect.width_0, avgPos), null, dashedStroke));
          $addGraphicElement_0(this$static.graph, ge);
        }
      }
    }
  }
}

function $calcMinMaxAvgPositions(this$static){
  var avg, colInfo, max_0, min_0, minValuePos, valueScale, values, values0, values1, values2;
  if ($showMinMaxAvgLines(this$static)) {
    colInfo = $getColumn(this$static.graph.data_0, 0);
    this$static.graph.displayLimit > 0 && !this$static.graph.hideOtherCategory && (colInfo = $getColumn(this$static.graph.handler.getOriginalData(), 0));
    if (this$static.graph.displayLimit > 0 && this$static.graph.hideOtherCategory) {
      min_0 = (values0 = $getValuesWithDisplayLimitOtherHidden(colInfo, this$static.graph.data_0, this$static.graph.displayLimit, true, false) , getMinValueForValues(values0));
      max_0 = (values1 = $getValuesWithDisplayLimitOtherHidden(colInfo, this$static.graph.data_0, this$static.graph.displayLimit, true, false) , getMaxValueForValues(values1));
      avg = (values2 = $getValuesWithDisplayLimitOtherHidden(colInfo, this$static.graph.data_0, this$static.graph.displayLimit, false, false) , getAvgValueForValues(values2));
      this$static.avgLineType == 1 && (avg = (values = $getValuesWithDisplayLimitOtherHidden(colInfo, this$static.graph.data_0, this$static.graph.displayLimit, false, false) , getMedianValueForValues(values)));
    }
     else {
      min_0 = (values0 = $getValuesNonProjected(colInfo, true, false) , getMinValueForValues(values0));
      max_0 = (values1 = $getValuesNonProjected(colInfo, true, false) , getMaxValueForValues(values1));
      avg = (values2 = $getValuesNonProjected(colInfo, false, false) , getAvgValueForValues(values2));
      this$static.avgLineType == 1 && (avg = (values = $getValuesNonProjected(colInfo, false, false) , getMedianValueForValues(values)));
    }
    valueScale = $getValueScale(this$static.graph);
    minValuePos = valueScale.getMinPosition();
    if (this$static.graph.isHorizontal) {
      this$static.minPos = minValuePos + valueScale.getPositionForValue(min_0);
      this$static.maxPos = minValuePos + valueScale.getPositionForValue(max_0);
      this$static.avgPos = minValuePos + valueScale.getPositionForValue(avg);
    }
     else {
      this$static.minPos = minValuePos - valueScale.getPositionForValue(min_0);
      this$static.maxPos = minValuePos - valueScale.getPositionForValue(max_0);
      this$static.avgPos = minValuePos - valueScale.getPositionForValue(avg);
    }
    $addLabels(this$static);
  }
}

function $drawLinearRegressionLine(this$static, srsInfo){
  var baseScale, col, endPoint, ge, regLine, regStroke, regressionPoints, startPoint, stroke, valScale;
  regressionPoints = srsInfo.regressionLinePoints;
  if (!!regressionPoints && regressionPoints.array.length > 2) {
    if (!!srsInfo.srsShapeList && srsInfo.srsShapeList.array.length > 0) {
      col = castTo($get_2(srsInfo.srsShapeList, 0), 18).cell.column;
      baseScale = $getCategoryScale(this$static.graph);
      valScale = $getValueScale(this$static.graph);
      col.usesSecondaryScale && (valScale = $getScaleByTypeNumber(this$static.graph, 0, 1));
      startPoint = $getXYPointForValPoint(this$static, (checkCriticalElementIndex(0, regressionPoints.array.length) , castTo(regressionPoints.array[0], 10)), baseScale, valScale);
      endPoint = $getXYPointForValPoint(this$static, castTo($get_2(regressionPoints, regressionPoints.array.length - 1), 10), baseScale, valScale);
      if (this$static.showAllLinearRegressionLines) {
        stroke = castTo($get_2(srsInfo.srsShapeList, 0), 18).stroke_0;
        castTo($get_2(srsInfo.srsShapeList, 0), 18);
        !!stroke && (this$static.regressionLineColor = stroke.color_0);
      }
      regStroke = new CFStroke(this$static.regressionLineColor, this$static.regressionStrokeWidth);
      this$static.regressionLineSolid || $setStyle_0(regStroke, 1);
      regLine = new CFShape_0(new CFPath_1(startPoint.x_0, startPoint.y_0, endPoint.x_0, endPoint.y_0), null, regStroke);
      regLine.path.shouldAntiAlias = true;
      ge = new GraphicElement;
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, regLine);
      $addFrontGraphicElement_0(this$static.graph, ge);
    }
  }
}

function $drawProjectionBar_0(this$static, srsInfo, drawGray){
  var actualValue, barColor, baseScale, col, dottedRect, dottedShape, ge, geProjBar2, origStackedProjBar, projBar, projBarIndex, projBarInfo, projBarRect, projBarShape, projBarShape2, projInfo, projLine, projValue, projXYPoint, projectedIsActual, regStroke, valScale, origRect;
  projBarIndex = -1;
  projInfo = srsInfo.projectionInfo;
  !!projInfo && !!projInfo.valuePoint && (projBarIndex = round_int(projInfo.valuePoint.x_0));
  if (projBarIndex != -1 && !!srsInfo.srsShapeList && srsInfo.srsShapeList.array.length > projBarIndex && instanceOf($get_2(srsInfo.srsShapeList, projBarIndex), 25)) {
    projBarInfo = castTo($get_2(srsInfo.srsShapeList, projBarIndex), 25);
    projInfo.srsShapeInfo = projBarInfo;
    projBarInfo.projectionInfo = projInfo;
    projValue = projInfo.projectedValue;
    actualValue = projInfo.actualValue;
    origStackedProjBar = null;
    projXYPoint = null;
    dottedShape = null;
    if (this$static.graph.typeAttributes.isStacked) {
      projBar = projBarInfo.stackedProjRect;
      origStackedProjBar = (origRect = $duplicate_5(projBarInfo.rect) , !!projBarInfo.stackedProjRect && (origRect = $duplicate_5(projBarInfo.stackedProjRect)) , !!projBarInfo.origStackedProjRect && (origRect = $duplicate_5(projBarInfo.origStackedProjRect)) , origRect);
    }
     else {
      projBarRect = $getRectForDisplay(projBarInfo, null);
      col = castTo($get_2(srsInfo.srsShapeList, 0), 18).cell.column;
      baseScale = $getCategoryScale(this$static.graph);
      valScale = $getValueScale(this$static.graph);
      col.usesSecondaryScale && (valScale = $getScaleByTypeNumber(this$static.graph, 0, 1));
      projXYPoint = $getXYPointForValPoint(this$static, projInfo.valuePoint, baseScale, valScale);
      projBar = new CFRect(projBarRect.x_0, projBarRect.y_0, projBarRect.width_0, projBarRect.height_0);
      if (projInfo.projectedValue > 0) {
        if (projValue < actualValue) {
          dottedRect = new CFRect(projBarRect.x_0, projBarRect.y_0, projBarRect.width_0, projBarRect.height_0);
          $setHeight(dottedRect, projBarRect.y_0 + projBarRect.height_0 - projXYPoint.y_0);
          $setY_0(dottedRect, projXYPoint.y_0);
          $ensureRectIsCloseToBounds(this$static, dottedRect);
          dottedShape = $getDottedRectShape(dottedRect, ($clinit_CFColor() , BLACK));
        }
        $setY_0(projBar, projXYPoint.y_0);
        $setHeight(projBar, projBarRect.y_0 - projBar.y_0);
      }
       else {
        if (actualValue < projValue) {
          dottedRect = new CFRect(projBarRect.x_0, projBarRect.y_0, projBarRect.width_0, projBarRect.height_0);
          $setHeight(dottedRect, projXYPoint.y_0 - projBarRect.y_0);
          $ensureRectIsCloseToBounds(this$static, dottedRect);
          dottedShape = $getDottedRectShape(dottedRect, ($clinit_CFColor() , BLACK));
        }
        $setHeight(projBar, projXYPoint.y_0 - (projBarRect.y_0 + projBarRect.height_0));
        $setY_0(projBar, projBarRect.y_0 + projBarRect.height_0);
      }
    }
    if (!projBar)
      return;
    ge = new GraphicElement;
    $ensureRectIsCloseToBounds(this$static, projBar);
    barColor = projBarInfo.fill_0.color_0;
    drawGray && (barColor = ($clinit_CFColor() , DISABLED_LIGHT_GRAY));
    projBarShape = new CFShape_1(projBar, new CFFill(barColor), null);
    projBarShape2 = null;
    geProjBar2 = null;
    projectedIsActual = false;
    projValue == actualValue && !!projInfo.cell && projInfo.cell.projectedIsActual && (projectedIsActual = true);
    !!projBarShape.path && (projBarShape.path.shouldAntiAlias = true);
    if (actualValue < projValue && projValue > 0 || actualValue > projValue && projValue < 0 || this$static.graph.typeAttributes.isStacked) {
      if (!projectedIsActual) {
        if (actualValue < projValue) {
          projValue > 0?(geProjBar2 = $getPatternProjBarGE(this$static, barColor, projBar)):(geProjBar2 = new GraphicElement);
          !ge.shapeAry && (ge.shapeAry = new ArrayList);
          $add_1(ge.shapeAry, projBarShape);
          if (origStackedProjBar)
            $addShape(geProjBar2, $getDottedRectShape(origStackedProjBar, ($clinit_CFColor() , BLACK)));
          else {
            dottedRect = new CFRect(projBar.x_0, projBar.y_0, projBar.width_0, projBar.height_0);
            $setHeight(dottedRect, $getBottom(projBarInfo.getRect()) - projBar.y_0);
            $addShape(geProjBar2, $getDottedRectShape(dottedRect, ($clinit_CFColor() , BLACK)));
          }
        }
         else {
          if (projValue < 0) {
            geProjBar2 = $getPatternProjBarGE(this$static, barColor, projBar);
            dottedRect = new CFRect(projBar.x_0, projBar.y_0, projBar.width_0, projBar.height_0);
            if (origStackedProjBar) {
              dottedRect = new CFRect(origStackedProjBar.x_0, origStackedProjBar.y_0, origStackedProjBar.width_0, origStackedProjBar.height_0);
            }
             else {
              $setHeight(dottedRect, projBarInfo.getRect().height_0 + projBar.height_0);
              $setY_0(dottedRect, projBarInfo.getRect().y_0);
            }
            dottedShape = $getDottedRectShape(dottedRect, ($clinit_CFColor() , BLACK));
            !geProjBar2.shapeAry && (geProjBar2.shapeAry = new ArrayList);
            $add_1(geProjBar2.shapeAry, dottedShape);
            dottedShape = null;
          }
           else {
            projBarShape2 = new CFShape_1(projBar, ($clinit_CFFill() , TRANSPARENT_0), null);
            dottedShape = $getDottedRectShape(projBar, ($clinit_CFColor() , BLACK));
          }
        }
      }
      projXYPoint = null;
    }
     else {
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, projBarShape);
      !!dottedShape && (!ge.shapeAry && (ge.shapeAry = new ArrayList) , $add_1(ge.shapeAry, dottedShape));
      projBarShape2 = new CFShape_1(projBar, ($clinit_CFFill() , TRANSPARENT_0), null);
    }
    if (projBarShape2) {
      !!projBarShape2.path && (projBarShape2.path.shouldAntiAlias = true);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, projBarShape2);
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, dottedShape);
    }
    if (!!projBar && !!projXYPoint) {
      regStroke = new CFStroke_1('#333333', 1);
      $setStyle_0(regStroke, 2);
      projLine = new CFShape_0(new CFPath_1(projBar.x_0, projXYPoint.y_0, projBar.x_0 + projBar.width_0, projXYPoint.y_0), null, regStroke);
      projLine.path.shouldAntiAlias = true;
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, projLine);
    }
    $setDrawInfo(projInfo, new CFPoint(projBar.x_0 + projBar.width_0 / 2, projBar.y_0), 0, this$static.graph);
    ge.dataObject = projInfo;
    $addGraphicElement_0(this$static.graph, ge);
    if (geProjBar2) {
      geProjBar2.dataObject = projInfo;
      $addGraphicElement_0(this$static.graph, geProjBar2);
    }
  }
}

function $drawProjectionLine(this$static, srsInfo, stroke){
  var areaAry, areaColor, areaPath, areaStroke, baseScale, col, dashStroke, dashedLineShp, ge, hasExtraForecastPoints, j, lineArea, lineAreaPath, lineInfo, linePath, nextPoint, nonForecastPoints, points, prevPoint, projArea, projInfo, projLine, projLinePoints, projPoint, projPointIndex, projValPoint, projXYPoint, regStroke, valScale, pntList;
  lineInfo = castTo(srsInfo.fullSeriesInfo, 28);
  points = (pntList = new ArrayList , $addAll(pntList, lineInfo.pointlist) , !!lineInfo.forecastPointlist && $addAll(pntList, lineInfo.forecastPointlist) , pntList);
  nonForecastPoints = lineInfo.pointlist;
  hasExtraForecastPoints = points.array.length != nonForecastPoints.array.length;
  if (points.array.length < 2)
    return;
  projPointIndex = -1;
  projInfo = srsInfo.projectionInfo;
  !!projInfo && !!projInfo.valuePoint && (projPointIndex = round_int(projInfo.valuePoint.x_0));
  if (projPointIndex != -1) {
    prevPoint = null;
    projPointIndex > 0 && (nonForecastPoints.array.length > projPointIndex?(prevPoint = (checkCriticalElementIndex(projPointIndex - 1, nonForecastPoints.array.length) , castTo(nonForecastPoints.array[projPointIndex - 1], 10))):(prevPoint = castTo($get_2(nonForecastPoints, points.array.length - 1), 10)));
    nextPoint = null;
    projPointIndex < nonForecastPoints.array.length - 1 && (nextPoint = (checkCriticalElementIndex(projPointIndex + 1, nonForecastPoints.array.length) , castTo(nonForecastPoints.array[projPointIndex + 1], 10)));
    points.array.length > projPointIndex?(projPoint = (checkCriticalElementIndex(projPointIndex, points.array.length) , castTo(points.array[projPointIndex], 10))):(projPoint = castTo($get_2(points, points.array.length - 1), 10));
    projValPoint = projInfo.valuePoint;
    col = castTo($get_2(srsInfo.srsShapeList, 0), 18).cell.column;
    baseScale = $getCategoryScale(this$static.graph);
    valScale = $getValueScale(this$static.graph);
    col.usesSecondaryScale && (valScale = $getScaleByTypeNumber(this$static.graph, 0, 1));
    projXYPoint = $getXYPointForValPoint(this$static, projValPoint, baseScale, valScale);
    if (projPoint) {
      $setX(projXYPoint, projPoint.x_0);
      instanceOf(baseScale, 56) && $setX(projXYPoint, projPoint.x_0);
    }
    if (!!prevPoint || !!nextPoint || !!projPoint) {
      ge = new GraphicElement;
      if (!!prevPoint || !!nextPoint) {
        areaAry = new ArrayList;
        !!prevPoint && (areaAry.array[areaAry.array.length] = prevPoint , true);
        areaAry.array[areaAry.array.length] = projPoint;
        !!nextPoint && (areaAry.array[areaAry.array.length] = nextPoint , true);
        areaAry.array[areaAry.array.length] = projXYPoint;
        $add_1(areaAry, (checkCriticalElementIndex(0, areaAry.array.length) , castTo(areaAry.array[0], 10)));
        areaStroke = castTo($get_2(srsInfo.srsShapeList, 0), 18).stroke_0;
        $clinit_CFColor();
        if (!!areaStroke && this$static.graph.data_0.numVisibleCols == 1) {
          areaColor = $duplicate_0(areaStroke.color_0);
          areaColor.alpha_0 = 55;
          if (this$static.graph.typeAttributes.curvedLines) {
            areaPath = new CFPath_11(areaAry, 1, false, null, false, true);
            areaPath.pathAry.add_0(new CFPathElement);
            areaPath.isLine = false;
          }
           else 
            areaPath = new CFPath_12(areaAry, true);
          projArea = new CFShape_0(areaPath, new CFFill(areaColor), null);
          !ge.shapeAry && (ge.shapeAry = new ArrayList);
          $add_1(ge.shapeAry, projArea);
        }
      }
       else {
        dashedLineShp = new CFPath_1(projPoint.x_0, projPoint.y_0, projXYPoint.x_0, projXYPoint.y_0);
        dashStroke = new CFStroke_1('#000000', 1);
        $setStyle_0(dashStroke, 1);
        $addShape(ge, new CFShape_0(dashedLineShp, null, dashStroke));
      }
      stroke?(regStroke = $duplicate_7(stroke)):(regStroke = new CFStroke(lineInfo.stroke_0.color_0, 2));
      $setStyle_0(regStroke, 1);
      projLinePoints = new ArrayList;
      if (hasExtraForecastPoints) {
        !!prevPoint && (projLinePoints.array[projLinePoints.array.length] = prevPoint , true);
        projLinePoints.array[projLinePoints.array.length] = projXYPoint;
        for (j = projPointIndex + 1; j < points.array.length; j++)
          $add_1(projLinePoints, (checkCriticalElementIndex(j, points.array.length) , castTo(points.array[j], 10)));
      }
       else {
        !!prevPoint && (projLinePoints.array[projLinePoints.array.length] = prevPoint , true);
        projLinePoints.array[projLinePoints.array.length] = projXYPoint;
        !!nextPoint && (projLinePoints.array[projLinePoints.array.length] = nextPoint , true);
      }
      this$static.graph.typeAttributes.curvedLines?(linePath = new CFPath_11(projLinePoints, 1, false, null, false, true)):(linePath = new CFPath_12(projLinePoints, false));
      projLine = new CFShape_0(linePath, null, regStroke);
      projLine.path.shouldAntiAlias = true;
      !ge.shapeAry && (ge.shapeAry = new ArrayList);
      $add_1(ge.shapeAry, projLine);
      if (projPoint) {
        projPoint.x_0 > $getCenterX(this$static.graph.innerBounds)?$setDrawInfo(projInfo, new CFPoint(projPoint.x_0, projXYPoint.y_0 + (projPoint.y_0 - projXYPoint.y_0) / 2), 6, this$static.graph):$setDrawInfo(projInfo, new CFPoint(projPoint.x_0, projXYPoint.y_0 + (projPoint.y_0 - projXYPoint.y_0) / 2), 4, this$static.graph);
        ge.dataObject = projInfo;
      }
      $addGraphicElement_0(this$static.graph, ge);
      lineAreaPath = $getHitAreaForLinePath(linePath, 3);
      lineAreaPath.shouldAntiAlias = true;
      lineArea = new CFShape_0(lineAreaPath, null, null);
      $addShape_0(ge, lineArea, srsInfo.fullSeriesInfo);
      $addGraphicElement_0(this$static.graph, ge);
    }
  }
}

function $ensureRectIsCloseToBounds(this$static, barRect){
  var bottom, right;
  if (!barRect)
    return;
  if (barRect.y_0 < 0) {
    bottom = barRect.y_0 + barRect.height_0;
    barRect.y_0 = -5;
    barRect.height_0 = bottom + 5;
    $clinit_System();
  }
  if (barRect.x_0 < 0) {
    right = barRect.x_0 + barRect.width_0;
    barRect.x_0 = -5;
    barRect.width_0 = right + 5;
    $clinit_System();
  }
  if (!!this$static.graph && !!this$static.graph.chart) {
    if (barRect.y_0 + barRect.height_0 > this$static.graph.chart.dimension.height_0) {
      $setHeight(barRect, this$static.graph.chart.dimension.height_0 + 5 - barRect.y_0);
      $clinit_System();
    }
    if (barRect.x_0 + barRect.width_0 > this$static.graph.chart.dimension.width_0) {
      $setWidth(barRect, this$static.graph.chart.dimension.width_0 + 5 - barRect.x_0);
      $clinit_System();
    }
  }
}

function $getDottedRectShape(rect, color_0){
  var path, stroke;
  path = new CFPath_1(rect.x_0, rect.y_0 + rect.height_0, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0);
  $add(path, new CFPathElement_0(0, rect.x_0, rect.y_0));
  $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0));
  $add(path, new CFPathElement_0(0, rect.x_0, rect.y_0));
  $add(path, new CFPathElement_0(1, rect.x_0, rect.y_0 + rect.height_0));
  $add(path, new CFPathElement_0(0, rect.x_0 + rect.width_0, rect.y_0));
  $add(path, new CFPathElement_0(1, rect.x_0 + rect.width_0, rect.y_0 + rect.height_0));
  stroke = new CFStroke(color_0, 1);
  $setStyle_0(stroke, 2);
  return new CFShape_0(path, null, stroke);
}

function $getLastIndexForScale(this$static, valueScale){
  var colInfo, colInfo$iterator, index_0;
  if (valueScale.isSecondary) {
    return this$static.graph.data_0.cols_0.size_1() - 1;
  }
   else {
    index_0 = 0;
    for (colInfo$iterator = this$static.graph.data_0.cols_0.iterator(); colInfo$iterator.hasNext_0();) {
      colInfo = castTo(colInfo$iterator.next_1(), 7);
      if (colInfo.usesSecondaryScale)
        return index_0 - 1;
      ++index_0;
    }
    return index_0 - 1;
  }
}

function $getMultiProjectionMethod(this$static){
  if (this$static.multiProjectionMethod == 0)
    return 5;
  return this$static.multiProjectionMethod;
}

function $getMultiProjectionMethodForValue(value_0){
  if (value_0 != null) {
    if (value_0.toLowerCase().indexOf('by period') != -1)
      return 6;
    else if (value_0.toLowerCase().indexOf('recent periods') != -1)
      return 5;
    else if ($equalsIgnoreCase(value_0.toLowerCase(), 'linear regression'))
      return 3;
  }
  return 0;
}

function $getPatternProjBarGE(this$static, barColor, barRect){
  var clipShape, distance, endClip, gapWidth, ge, lineShape, lineWidth, numPatternLines, x_0;
  lineWidth = 2;
  gapWidth = 10;
  if (this$static.graph.isHorizontal && barRect.height_0 < 60 || !this$static.graph.isHorizontal && barRect.width_0 < 60) {
    lineWidth = 1;
    gapWidth = 5;
  }
  ge = new GraphicElement;
  clipShape = new CFShape_1(barRect, null, null);
  clipShape.isClip = true;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, clipShape);
  $addShape(ge, new CFShape_1(barRect, ($clinit_CFFill() , WHITE_0), null));
  distance = barRect.width_0 + barRect.height_0;
  numPatternLines = 0;
  for (x_0 = barRect.x_0 + gapWidth; x_0 < barRect.x_0 + distance && numPatternLines < $intern_36; x_0 += gapWidth) {
    lineShape = new CFShape_0(new CFPath_1(x_0, barRect.y_0, x_0 - distance, barRect.y_0 + distance), null, new CFStroke(barColor, lineWidth));
    !!lineShape.path && (lineShape.path.shouldAntiAlias = true);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, lineShape);
    ++numPatternLines;
  }
  $addShape(ge, new CFShape_1(barRect, null, new CFStroke(barColor, lineWidth)));
  endClip = new CFShape;
  endClip.isClip = true;
  !ge.shapeAry && (ge.shapeAry = new ArrayList);
  $add_1(ge.shapeAry, endClip);
  return ge;
}

function $getPeriodsPatternForDateGrain(dateGrain){
  if (dateGrain != null) {
    if ($equalsIgnoreCase(dateGrain, 'DAY'))
      return 7;
    else if ($equals_2(dateGrain, 'WEEK'))
      return 52;
    else if ($equals_2(dateGrain, 'MONTH'))
      return 3;
    else if ($equals_2(dateGrain, 'QUARTER'))
      return 4;
  }
  return 0;
}

function $getProjectedAverage(this$static, colIndex, numPointsToAvg){
  var index_0, numPointsAdded, points, sum;
  points = getValuesAsPoints(colIndex, this$static.graph, false);
  if (points.array.length > 2) {
    index_0 = points.array.length - 2;
    numPointsAdded = 0;
    sum = 0;
    numPointsToAvg == 0 && (numPointsToAvg = points.array.length);
    while (index_0 >= 0 && numPointsAdded < numPointsToAvg) {
      sum += castTo($get_2(points, index_0--), 10).y_0;
      ++numPointsAdded;
    }
    return sum / numPointsAdded;
  }
   else if (points.array.length == 2) {
    return (checkCriticalElementIndex(0, points.array.length) , castTo(points.array[0], 10)).y_0;
  }
  return NaN;
}

function $getProjectionMethod(this$static, method){
  if (this$static.graph.displayLimit == 0) {
    if ($equalsIgnoreCase(method, 'linear regression'))
      return 3;
    else if ($equalsIgnoreCase(method, 'linear regression recent periods'))
      return 5;
    else if ($equalsIgnoreCase(method, 'linear regression by period'))
      return 6;
    else if ($equalsIgnoreCase(method, 'average previous values'))
      return 1;
    else if ($equalsIgnoreCase(method, 'specified value'))
      return 2;
    else if ($equalsIgnoreCase(method, 'forecast value'))
      return 4;
  }
  return 0;
}

function $getProjectionPeriodsPattern(this$static, dateGrain){
  if (this$static.projectionPeriodsPattern != 0)
    return this$static.projectionPeriodsPattern;
  else if (this$static.multiProjectionMethod == 5 || this$static.multiProjectionMethod == 6)
    return $getPeriodsPatternForDateGrain(dateGrain);
  return 0;
}

function $getProjectionValPoint(this$static, colIndex, srsInfo){
  var cell, data_0, i, index_0, newXValue, numRows, projectedCell, retValue;
  retValue = null;
  data_0 = this$static.graph.data_0;
  projectedCell = null;
  index_0 = 0;
  numRows = $getNumRows(data_0);
  for (i = 0; i < numRows; i++) {
    cell = $getCell(data_0, i, colIndex);
    if (!!cell && !isNaN_0($getValue(cell)) && !cell.row.hidden) {
      if (!isNaN_0(cell.projectedValue) && !$isForecastItem(cell)) {
        retValue = new ProjectionInfo($getValue(cell), cell.projectedValue, new CFPoint(index_0, cell.projectedValue), cell);
        projectedCell = cell;
        break;
      }
      ++index_0;
    }
  }
  if (!!retValue && $isLine(srsInfo)) {
    newXValue = $getProjectedLinePointIndex(srsInfo, projectedCell);
    newXValue != -1 && $setX(retValue.valuePoint, newXValue);
  }
  return retValue;
}

function $getRegressionInfo(this$static, colIndex){
  return this$static.graph.data_0.hasHiddenRows?getRegressionVals(colIndex, this$static.graph, true, this$static.extraProjectionIncrements, 0, 3, true):getRegressionVals(colIndex, this$static.graph, this$static.regressionLineLastPoint, this$static.extraProjectionIncrements, 0, 3, true);
}

function $getXYPointForValPoint(this$static, valPoint, catScale, valScale){
  var catScalePos, minCatPos, minValuePos, valueScalePos, xyPoint;
  minCatPos = catScale.getMinPosition();
  minValuePos = valScale.getMinPosition();
  catScalePos = catScale.getPositionForValue(valPoint.x_0);
  instanceOf(catScale, 56) && (catScalePos = $getPositionForTime(castTo(catScale, 56), fromDouble_0(valPoint.x_0)));
  valueScalePos = valScale.getPositionForValue(valPoint.y_0);
  xyPoint = new CFPoint(minCatPos + catScalePos, minValuePos - valueScalePos);
  this$static.graph.isHorizontal && (xyPoint = new CFPoint(minValuePos + valueScalePos, minCatPos + catScalePos));
  return xyPoint;
}

function $handleHorizontalCollisions(this$static, minRect, avgRect, maxRect){
  var innerBnds;
  innerBnds = this$static.graph.innerBounds;
  if (avgRect) {
    maxRect.x_0 < avgRect.x_0 + avgRect.width_0 + 5 && $setX_0(maxRect, avgRect.x_0 + avgRect.width_0 + 5);
    minRect.x_0 + minRect.width_0 > avgRect.x_0 - 5 && $setRight(minRect, avgRect.x_0 - 5);
    if (maxRect.x_0 + maxRect.width_0 > innerBnds.x_0 + innerBnds.width_0) {
      $setRight(maxRect, innerBnds.x_0 + innerBnds.width_0);
      avgRect.x_0 + avgRect.width_0 > maxRect.x_0 - 5 && $setRight(avgRect, maxRect.x_0 - 5);
      minRect.x_0 + minRect.width_0 > avgRect.x_0 - 5 && $setRight(minRect, avgRect.x_0 - 5);
    }
    if (minRect.x_0 < innerBnds.x_0) {
      $setX_0(minRect, innerBnds.x_0);
      avgRect.x_0 < minRect.x_0 + minRect.width_0 + 5 && $setX_0(avgRect, minRect.x_0 + minRect.width_0 + 5);
      maxRect.x_0 < avgRect.x_0 + avgRect.width_0 + 5 && $setX_0(maxRect, avgRect.x_0 + avgRect.width_0 + 5);
    }
  }
   else {
    if (this$static.maxPos == this$static.minPos) {
      $setX_0(maxRect, this$static.maxPos + 5);
      $setRight(minRect, this$static.minPos - 5);
    }
     else 
      minRect.x_0 + minRect.width_0 > maxRect.x_0 - 5 && $setRight(minRect, maxRect.x_0 - 5);
    if (maxRect.x_0 + maxRect.width_0 > innerBnds.x_0 + innerBnds.width_0) {
      $setRight(maxRect, innerBnds.x_0 + innerBnds.width_0);
      minRect.x_0 + minRect.width_0 > maxRect.x_0 - 5 && $setRight(minRect, maxRect.x_0 - 5);
    }
    if (minRect.x_0 < innerBnds.x_0) {
      $setX_0(minRect, innerBnds.x_0);
      maxRect.x_0 < minRect.x_0 + minRect.width_0 + 5 && $setX_0(maxRect, minRect.x_0 + minRect.width_0 + 5);
    }
  }
}

function $handleVerticalCollisions(this$static, minRect, avgRect, maxRect, halfHeight){
  var innerBnds;
  innerBnds = this$static.graph.innerBounds;
  if (avgRect) {
    maxRect.y_0 + maxRect.height_0 > avgRect.y_0 && $setBottom(maxRect, avgRect.y_0);
    minRect.y_0 < avgRect.y_0 + avgRect.height_0 && $setY_0(minRect, avgRect.y_0 + avgRect.height_0);
    if (maxRect.y_0 < innerBnds.y_0) {
      $setY_0(maxRect, innerBnds.y_0);
      avgRect.y_0 < maxRect.y_0 + maxRect.height_0 && $setY_0(avgRect, maxRect.y_0 + maxRect.height_0);
      minRect.y_0 < avgRect.y_0 + avgRect.height_0 && $setY_0(minRect, avgRect.y_0 + avgRect.height_0);
    }
    if (minRect.y_0 + minRect.height_0 > innerBnds.y_0 + innerBnds.height_0) {
      $setBottom(minRect, innerBnds.y_0 + innerBnds.height_0);
      avgRect.y_0 + avgRect.height_0 > minRect.y_0 && $setBottom(avgRect, minRect.y_0);
      maxRect.y_0 + maxRect.height_0 > avgRect.y_0 && $setBottom(maxRect, avgRect.y_0);
    }
  }
   else {
    if (maxRect.y_0 == minRect.y_0) {
      $setY_0(maxRect, maxRect.y_0 - halfHeight);
      $setY_0(minRect, maxRect.y_0 + maxRect.height_0);
    }
     else 
      minRect.y_0 < maxRect.y_0 + maxRect.height_0 && $setY_0(minRect, maxRect.y_0 + maxRect.height_0);
    if (maxRect.y_0 < innerBnds.y_0) {
      $setY_0(maxRect, innerBnds.y_0);
      minRect.y_0 < maxRect.y_0 + maxRect.height_0 && $setY_0(minRect, maxRect.y_0 + maxRect.height_0);
    }
    if (minRect.y_0 + minRect.height_0 > innerBnds.y_0 + innerBnds.height_0) {
      $setBottom(minRect, innerBnds.y_0 + innerBnds.height_0);
      maxRect.y_0 + maxRect.height_0 > minRect.y_0 && $setBottom(maxRect, minRect.y_0);
    }
  }
}

function $processChartOptions_14(this$static){
  var hasProjectionInfo, key, key$iterator, projBarValMethod, projLineValMethod, projValMethod, value_0;
  this$static.suppressMinMaxAvg = false;
  this$static.showLinearRegressionLine = false;
  this$static.showAllLinearRegressionLines = false;
  this$static.regressionLineLastPoint = false;
  this$static.projectionMethod = 0;
  this$static.multiProjectionMethod = 0;
  hasProjectionInfo = false;
  if (!$getChartOptionKeys(this$static.graph))
    return;
  for (key$iterator = $getChartOptionKeys(this$static.graph).iterator(); key$iterator.hasNext_0();) {
    key = castToString(key$iterator.next_1());
    value_0 = $getChartOptionAsString(this$static.graph, key);
    switch (key) {
      case 'multi_projection_method':
        this$static.multiProjectionMethod = $getMultiProjectionMethodForValue(value_0);
        break;
      case 'projection_periods_pattern':
        this$static.projectionPeriodsPattern = getInt(value_0, 0);
        this$static.projectionPeriodsPattern < 0 && (this$static.projectionPeriodsPattern = 0);
        this$static.projectionPeriodsPattern > 365 && (this$static.projectionPeriodsPattern = 365);
        break;
      case 'calculated_line':
        $equals_2(value_0.toLowerCase(), 'median')?(this$static.avgLineType = 1):$equals_2(value_0.toLowerCase(), 'none')?(this$static.avgLineType = 2):(this$static.avgLineType = 0);
        break;
      case 'suppress_minmaxavg':
        this$static.suppressMinMaxAvg = $equalsIgnoreCase(value_0, 'true');
        break;
      case 'show_linear_regression':
        this$static.showLinearRegressionLine = $equalsIgnoreCase(value_0, 'true');
        hasProjectionInfo = true;
        break;
      case 'show_regression_lines':
      case 'show_all_linear_regressions':
        this$static.showAllLinearRegressionLines = $equalsIgnoreCase(value_0, 'true');
        hasProjectionInfo = true;
        break;
      case 'regression_line_last_point':
        this$static.regressionLineLastPoint = $equalsIgnoreCase(value_0, 'true');
        break;
      case 'regression_line_style':
        this$static.regressionLineSolid = $equalsIgnoreCase(value_0, 'solid');
        break;
      case 'line_color':
        this$static.regressionLineColor = $getColorForName(this$static.graph.colorMgr, value_0);
        break;
      case 'project_val_method':
      case 'project_line_val_method':
        this$static.projectionMethod = $getProjectionMethod(this$static, value_0);
        this$static.projectionMethod != 0 && (hasProjectionInfo = true);
        break;
      case 'proj_value':
      case 'proj_line_value':
        this$static.projectionValue = getDouble_0(value_0, NaN);
        break;
      case 'num_proj_vals_avg':
      case 'num_proj_points_avg':
      case 'num_proj_line_vals_avg':
        this$static.projectionNumPointsToAvg = getInt(value_0, 1);
        break;
      case 'project_bar_val_method':
        this$static.projectionMethod2 = $getProjectionMethod(this$static, value_0);
        this$static.projectionMethod2 != 0 && (hasProjectionInfo = true);
        break;
      case 'proj_bar_value':
        this$static.projectionValue2 = getDouble_0(value_0, NaN);
        break;
      case 'num_proj_bar_vals_avg':
        this$static.projectionNumPointsToAvg2 = getInt(value_0, 1);
        break;
      case 'num_forecast_items':
        if (supportsForecastFromScale(this$static.graph, false) && !!this$static.graph.data_0 && !$hasADateTimeField(this$static.graph.data_0)) {
          this$static.extraProjectionIncrements = getInt(value_0, 0);
          hasProjectionInfo = true;
        }

    }
  }
  projValMethod = $getChartOptionAsString(this$static.graph, 'project_val_method');
  projLineValMethod = $getChartOptionAsString(this$static.graph, 'project_line_val_method');
  projBarValMethod = $getChartOptionAsString(this$static.graph, 'project_bar_val_method');
  if (projValMethod != null && !$equalsIgnoreCase(projValMethod, 'default') || projLineValMethod != null && !$equalsIgnoreCase(projLineValMethod, 'default') || projBarValMethod != null && !$equalsIgnoreCase(projBarValMethod, 'default'))
  ;
  else if (this$static.graph.chart.version_0 > 6) {
    hasProjectionInfo = true;
    this$static.projectionMethod = 3;
    this$static.projectionMethod2 = 3;
  }
  if (this$static.projectionMethod == 0 && this$static.extraProjectionIncrements > 0) {
    this$static.projectionMethod = $getMultiProjectionMethod(this$static);
    hasProjectionInfo = true;
  }
  this$static.extraProjectionIncrements > 0 && this$static.multiProjectionMethod == 0 && (this$static.multiProjectionMethod = 5);
  hasProjectionInfo && !!this$static.graph.data_0 && (this$static.extraProjectionIncrements > 0 && $supportsDrag(this$static.graph) && $hasFilteredData(this$static.graph) && this$static.graph.data_0.numProjectedRows > 0 || $setProjectionValPoint(this$static));
}

function $setProjectionValPoint(this$static){
  var average, col, colIndex, lastPoint, lastRowSort, lastRowSortDesc, numPointsToAvg, periodOffset, primaryValScale, projMethod, projValue, regressionPoints, row, secondaryValScale, tempSortNeeded;
  if ($is100pctStacked(this$static.graph))
    return;
  for (colIndex = $getNumCols(this$static.graph.data_0) - 1; colIndex >= 0; colIndex--) {
    col = $getColumn(this$static.graph.data_0, colIndex);
    projMethod = this$static.projectionMethod;
    projValue = this$static.projectionValue;
    numPointsToAvg = this$static.projectionNumPointsToAvg;
    if (col.usesSecondaryScale) {
      projMethod = this$static.projectionMethod2;
      projValue = this$static.projectionValue2;
      numPointsToAvg = this$static.projectionNumPointsToAvg2;
    }
    if (projMethod == 2) {
      setProjectedValOnLastPoint(projValue, colIndex, this$static.graph, false);
    }
     else if (projMethod == 1) {
      average = $getProjectedAverage(this$static, colIndex, numPointsToAvg);
      setProjectedValOnLastPoint(average, colIndex, this$static.graph, false);
    }
     else if (projMethod == 3 || projMethod == 5 || projMethod == 6) {
      tempSortNeeded = false;
      lastRowSort = this$static.graph.data_0.lastRowSort;
      lastRowSortDesc = this$static.graph.data_0.lastRowSortDesc;
      if (this$static.graph.data_0.dateGrain != null && (lastRowSort != SORT_DATE || lastRowSortDesc)) {
        tempSortNeeded = true;
        $sortRows(this$static.graph.data_0, SORT_DATE);
      }
      periodOffset = this$static.projectionPeriodsPattern;
      (projMethod == 5 || projMethod == 6) && periodOffset == 0 && (periodOffset = $getPeriodsPatternForDateGrain(this$static.graph.data_0.dateGrain));
      this$static.regressionInfo = getRegressionVals(colIndex, this$static.graph, false, this$static.extraProjectionIncrements, periodOffset, projMethod, false);
      regressionPoints = this$static.regressionInfo.regressionValues;
      if (!!regressionPoints && regressionPoints.array.length > 0) {
        lastPoint = castTo($get_2(regressionPoints, this$static.regressionInfo.lastActualValIndex), 10);
        setProjectedValOnLastPoint(lastPoint.y_0, colIndex, this$static.graph, false);
      }
       else {
        row = $getLastVisibleRow(this$static.graph.data_0);
        !!row.cellMap && $get_1(row.cellMap, valueOf(colIndex)) != null && !isNaN_0($getValue(castTo($get_1(row.cellMap, valueOf(colIndex)), 16))) && setProjectedValOnLastPoint($getValue(castTo($get_1(row.cellMap, valueOf(colIndex)), 16)), colIndex, this$static.graph, true);
      }
      tempSortNeeded && (lastRowSortDesc?$sortRowsDesc(this$static.graph.data_0, lastRowSort, false):$sortRows(this$static.graph.data_0, lastRowSort));
    }
  }
  primaryValScale = $getValueScaleByNumber(this$static.graph, 0);
  !!primaryValScale && (primaryValScale.projectionValuesSet = true);
  secondaryValScale = $getValueScaleByNumber(this$static.graph, 1);
  !!secondaryValScale && (secondaryValScale.projectionValuesSet = true);
}

function $showLinearRegressionLine(this$static){
  if (this$static.showLinearRegressionLine) {
    if (!$isLineBar(this$static.graph) && $getNumCols(this$static.graph.data_0) == 1)
      return true;
  }
   else if (this$static.showAllLinearRegressionLines && !$isLineBar(this$static.graph)) {
    return true;
  }
  return false;
}

function $showMinMaxAvgLines(this$static){
  if (this$static.graph.bnds.width_0 > 500 && !this$static.suppressMinMaxAvg && !$isLineBar(this$static.graph) && this$static.graph.graphType != 12 && !!this$static.graph.data_0 && $getNumCols(this$static.graph.data_0) == 1)
    return true;
  return false;
}

function $showProjectionVal(this$static, colInfo, valueScale){
  if (this$static.projectionMethod != 0 && !!valueScale && !valueScale.isSecondary) {
    if (this$static.projectionMethod == 2 && isNaN_0(this$static.projectionValue))
      return false;
    return true;
  }
   else if (this$static.projectionMethod2 != 0 && !!valueScale && valueScale.isSecondary) {
    if (this$static.projectionMethod2 == 2 && isNaN_0(this$static.projectionValue2))
      return false;
    if ((colInfo.curIndex == $getLastIndexForScale(this$static, valueScale) || this$static.projectionMethod == 4) && !this$static.graph.typeAttributes.isStacked)
      return true;
  }
  return false;
}

function MinMaxBufferScale(position, grph){
  BufferScale.call(this, position, grph);
  this.regressionLineColor = new CFColor_2('#333333');
  this.type_0 = ST_MINMAX;
}

defineClass(67, 129, {129:1, 67:1, 53:1}, MinMaxBufferScale);
_.formatSubClassSpecific = function formatSubClassSpecific_1(rnd, numRows, numCols, formatPass){
  var avg, colInfo, max_0, min_0, numFormatter, tmpWidth, values, values0, values1, values2, width_0;
  this.rnd = rnd;
  formatPass == 0 && $processChartOptions_14(this);
  if ($showMinMaxAvgLines(this)) {
    colInfo = $getColumn(this.graph.data_0, 0);
    this.graph.displayLimit > 0 && (colInfo = $getColumn(this.graph.handler.getOriginalData(), 0));
    if (this.graph.displayLimit > 0 && this.graph.hideOtherCategory) {
      min_0 = (values0 = $getValuesWithDisplayLimitOtherHidden(colInfo, this.graph.data_0, this.graph.displayLimit, true, false) , getMinValueForValues(values0));
      max_0 = (values1 = $getValuesWithDisplayLimitOtherHidden(colInfo, this.graph.data_0, this.graph.displayLimit, true, false) , getMaxValueForValues(values1));
      avg = (values2 = $getValuesWithDisplayLimitOtherHidden(colInfo, this.graph.data_0, this.graph.displayLimit, false, false) , getAvgValueForValues(values2));
      this.avgLineType == 1 && (avg = (values = $getValuesWithDisplayLimitOtherHidden(colInfo, this.graph.data_0, this.graph.displayLimit, false, false) , getMedianValueForValues(values)));
    }
     else {
      min_0 = (values0 = $getValuesNonProjected(colInfo, true, false) , getMinValueForValues(values0));
      max_0 = (values1 = $getValuesNonProjected(colInfo, true, false) , getMaxValueForValues(values1));
      avg = (values2 = $getValuesNonProjected(colInfo, false, false) , getAvgValueForValues(values2));
      this.avgLineType == 1 && (avg = (values = $getValuesNonProjected(colInfo, false, false) , getMedianValueForValues(values)));
    }
    numFormatter = this.graph.hoverNumberFormatter;
    !numFormatter && (numFormatter = this.graph.numberFormatter);
    this.minStr = $getLocalizedString(this.graph, 'MIN') + ' ' + $formatNumber_1(numFormatter, min_0);
    this.maxStr = $getLocalizedString(this.graph, 'MAX') + ' ' + $formatNumber_1(numFormatter, max_0);
    this.avgLineType != 2 && (this.avgLineType == 1?(this.avgStr = $getLocalizedString(this.graph, 'MEDIAN') + ' ' + $formatNumber_1(numFormatter, avg)):(this.avgStr = $getLocalizedString(this.graph, 'AVG') + ' ' + $formatNumber_1(numFormatter, avg)));
    if (this.graph.isHorizontal) {
      this.buffer = this.labelMargin + $getLineHeight(this.labelFont, rnd);
    }
     else {
      width_0 = rnd.measureText_0(this.minStr, this.labelFont).width_0;
      tmpWidth = rnd.measureText_0(this.maxStr, this.labelFont).width_0;
      tmpWidth > width_0 && (width_0 = tmpWidth);
      if (this.avgLineType != 2) {
        tmpWidth = rnd.measureText_0(this.avgStr, this.labelFont).width_0;
        tmpWidth > width_0 && (width_0 = tmpWidth);
      }
      this.buffer = this.labelMargin + width_0;
    }
  }
}
;
_.avgLineType = 0;
_.avgPos = 0;
_.extraProjectionIncrements = 0;
_.maxPos = 0;
_.minPos = 0;
_.multiProjectionMethod = 0;
_.projectionMethod = 0;
_.projectionMethod2 = 0;
_.projectionNumPointsToAvg = 0;
_.projectionNumPointsToAvg2 = 0;
_.projectionPeriodsPattern = 0;
_.projectionValue = NaN;
_.projectionValue2 = NaN;
_.regressionLineLastPoint = false;
_.regressionLineSolid = false;
_.regressionStrokeWidth = 1;
_.showAllLinearRegressionLines = false;
_.showLinearRegressionLine = false;
_.suppressMinMaxAvg = false;
var Lcom_domo_charting_scales_MinMaxBufferScale_2_classLit = createForClass('com.domo.charting.scales', 'MinMaxBufferScale', 67);
function $clinit_ValueScale(){
  $clinit_ValueScale = emptyMethod;
  scaleIncs = stampJavaTypeInfo(getClassLiteralForArray(D_classLit, 1), $intern_24, 41, 15, [1, 2, 5, 10, 20, 50, 100]);
  scaleIncs2 = stampJavaTypeInfo(getClassLiteralForArray(D_classLit, 1), $intern_24, 41, 15, [1, 2, 2.5, 3, 4, 5, 6, 8, 10, 20, 25, 30, 40, 50, 60, 80, 100]);
  sortIconFill = new CFFill(($clinit_CFColor() , DOMO_BLUE_TRANSPARENT));
}

function $addSortIcon(this$static){
  var drillStr, scaleHotRegionShp, scaleRect, sortGE;
  if ($showValueScaleSortIcon(this$static)) {
    sortGE = new GraphicElement;
    scaleRect = new CFRect(this$static.bnds.x_0, this$static.bnds.y_0 + this$static.startMargin, this$static.bnds.width_0, this$static.bnds.height_0 - (this$static.startMargin + this$static.endMargin));
    (this$static.position == 3 || this$static.position == 1) && (scaleRect = new CFRect(this$static.bnds.x_0 + this$static.startMargin, this$static.bnds.y_0, this$static.bnds.width_0 - (this$static.startMargin + this$static.endMargin), this$static.bnds.height_0));
    scaleHotRegionShp = new CFShape_1(scaleRect, ($clinit_CFFill() , TRANSPARENT_0), null);
    drillStr = $getHvrDataStrForScale(this$static.graph, 'Value', this$static);
    $addShape_0(sortGE, scaleHotRegionShp, drillStr);
    $add_1(this$static.frontGeAry, sortGE);
    (this$static.showingSortIcon || this$static.graph.currentSort != 0) && !!this$static.geSortIcon && $add_1(this$static.frontGeAry, this$static.geSortIcon);
  }
   else {
    !!this$static.geSortIcon && $freeResources_3(this$static.geSortIcon);
    this$static.geSortIcon = null;
    this$static.showingSortIcon = false;
  }
}

function $adjustForPrimaryScaleDivisions(this$static, primary, calcedDivisions, increment){
  var result;
  result = calcedDivisions;
  if (this$static.syncZeroLine && this$static.min_0 < 0 && this$static.max_0 > 0) {
    while (primary.divisions.length > result) {
      this$static.max_0 += increment;
      this$static.min_0 -= increment;
      result += 2;
    }
  }
   else {
    while (primary.divisions.length > result) {
      this$static.max_0 <= 0?(this$static.min_0 -= increment):(this$static.max_0 += increment);
      ++result;
    }
  }
  return result;
}

function $adjustNumberFormatterBasedOnIncrement(this$static, increment, maxValue){
  var alwaysShowDecimals, baseMaxValue, baseValue, decimalCharsAdded, testMaxValue, testValue;
  if (increment > 0) {
    !this$static.numberFormatterForScaleLabels && (this$static.numberFormatterForScaleLabels = new NumberFormatter_0(this$static.numberFormatter));
    alwaysShowDecimals = this$static.numberFormatterForScaleLabels.alwaysShowDecimalPlaces;
    $setAlwaysShowDecimalPlaces(this$static.numberFormatterForScaleLabels, false);
    baseValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, increment);
    baseMaxValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, maxValue);
    decimalCharsAdded = this$static.numberFormatterForScaleLabels.decimalPlaces;
    while (decimalCharsAdded < 7) {
      $setDecimalPlaces(this$static.numberFormatterForScaleLabels, this$static.numberFormatterForScaleLabels.decimalPlaces + 1);
      testValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, increment);
      testMaxValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, maxValue);
      if (!$equals_2(baseValue, testValue) || !$equals_2(baseMaxValue, testMaxValue)) {
        baseValue = testValue;
        baseMaxValue = testMaxValue;
        ++decimalCharsAdded;
      }
       else {
        $setDecimalPlaces(this$static.numberFormatterForScaleLabels, this$static.numberFormatterForScaleLabels.decimalPlaces - 1);
        break;
      }
    }
    while (decimalCharsAdded < 7) {
      testValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, increment + increment);
      testMaxValue = $formatNumber_1(this$static.numberFormatterForScaleLabels, maxValue - increment);
      if ($equals_2(baseValue, testValue) || $equals_2(baseMaxValue, testMaxValue))
        $setDecimalPlaces(this$static.numberFormatterForScaleLabels, this$static.numberFormatterForScaleLabels.decimalPlaces + 1);
      else 
        break;
      ++decimalCharsAdded;
    }
    $setAlwaysShowDecimalPlaces(this$static.numberFormatterForScaleLabels, alwaysShowDecimals);
  }
}

function $buildAndAddSortIcon(this$static, showNextSortAsButton){
  var chartScaleFactor, inflateAmount, scaleFactor, sortIconRect, sortIconBorderRect, theSortIconBorder, sortBorderShape, drillStr, theSortIcon, sortShape, iconPath, sortShape_0, drillStr_0;
  if (!this$static.bnds)
    return;
  scaleFactor = 1;
  chartScaleFactor = this$static.graph.chart.scaleFactor;
  chartScaleFactor > 1 && (scaleFactor = 1 / $wnd.Math.sqrt(chartScaleFactor));
  scaleFactor == 1 && !showNextSortAsButton && (scaleFactor = $intern_8);
  inflateAmount = showNextSortAsButton?4 * scaleFactor:0;
  sortIconRect = $getSortIconRect(this$static, showNextSortAsButton, scaleFactor);
  if (sortIconRect) {
    this$static.geSortIcon = new GraphicElement;
    showNextSortAsButton?(sortIconBorderRect = new CFRect_0(sortIconRect) , $inflate(sortIconBorderRect, inflateAmount) , theSortIconBorder = new CFPath_4(sortIconBorderRect, toInt_0(fromDouble_0($wnd.Math.round(4 * scaleFactor)))) , theSortIconBorder.shouldAntiAlias = true , sortBorderShape = new CFShape_0(theSortIconBorder, sortIconFill, null) , drillStr = $getHvrDataStrForScale(this$static.graph, 'Value', this$static) , $addShape_0(this$static.geSortIcon, sortBorderShape, drillStr) , theSortIcon = $getNextSortIconPath(this$static, sortIconRect.x_0 - 3 * scaleFactor, sortIconRect.y_0 - 3 * scaleFactor, scaleFactor) , theSortIcon.shouldAntiAlias = true , sortShape = new CFShape_0(theSortIcon, new CFFill(($clinit_CFColor() , WHITE)), null) , $addShape_0(this$static.geSortIcon, sortShape, drillStr) , sortShape = new CFShape_1(sortIconBorderRect, new CFFill(TRANSPARENT), null) , sortShape.drillFilter = '{"internal": "sort"}' , $addShape_0(this$static.geSortIcon, sortShape, drillStr) , undefined):(iconPath = $getCurrentSortIconPath(this$static, sortIconRect.x_0 - 2 * scaleFactor, sortIconRect.y_0 - 2 * scaleFactor, scaleFactor) , iconPath.shouldAntiAlias = true , sortShape_0 = new CFShape_0(iconPath, new CFFill(($clinit_CFColor() , GRAY)), null) , drillStr_0 = $getHvrDataStrForScale(this$static.graph, 'Value', this$static) , $addShape_0(this$static.geSortIcon, sortShape_0, drillStr_0) , undefined);
    $add_1(this$static.frontGeAry, this$static.geSortIcon);
  }
}

function $calcCleanDivisionValuesForSecondaryScale(this$static){
  var absRange, calcedDivisions, divsionIndex, increment, index_0, lowerDividend, maximumDivisionsToShow, numDivisions, primary, range, range10to100, scaleFactor, scaleIncrements, tempMaxValue, tempMinValue, upperDividend;
  primary = $getValueScaleByNumber(this$static.graph, 0);
  this$static.graph.graphType == 26 && (primary = $getValueScaleByNumber(this$static.graph, 1));
  if (!primary || primary.hiddenForNoData_0 || primary.divisions == null)
    return false;
  maximumDivisionsToShow = primary.divisions.length;
  if (!this$static.syncedScales && (!isNaN_0(this$static.manualMin) || !isNaN_0(this$static.manualMax) || !isNaN_0(primary.manualMin) || !isNaN_0(primary.manualMax) || instanceOf(primary, 73))) {
    $setSecondaryDivisionsFromManualMinMax(this$static, primary);
    return true;
  }
  scaleIncrements = scaleIncs2;
  this$static.syncedScales && (scaleIncrements = scaleIncs);
  this$static.max_0 = this$static.maxFromData;
  this$static.min_0 = this$static.minFromData;
  range = this$static.max_0 - this$static.min_0;
  absRange = $wnd.Math.abs(range);
  scaleFactor = this$static.calcScaleFactor(absRange);
  range10to100 = absRange / scaleFactor;
  range10to100 = $wnd.Math.ceil(range10to100);
  range10to100 > 100 && (range10to100 = 100);
  index_0 = 0;
  do 
    numDivisions = range10to100 / scaleIncrements[index_0++];
  while (numDivisions > maximumDivisionsToShow && index_0 < scaleIncrements.length);
  index_0 -= 2;
  do {
    ++index_0;
    increment = scaleFactor * scaleIncrements[index_0];
    upperDividend = this$static.max_0 / increment;
    upperDividend = $wnd.Math.ceil(upperDividend);
    tempMaxValue = upperDividend * increment;
    lowerDividend = this$static.min_0 / increment;
    lowerDividend = $wnd.Math.floor(lowerDividend);
    tempMinValue = lowerDividend * increment;
    numDivisions = toDouble_0(fromDouble_0($wnd.Math.round((tempMaxValue - tempMinValue) / increment)));
    calcedDivisions = round_int(numDivisions) + 1;
  }
   while (calcedDivisions > maximumDivisionsToShow && calcedDivisions > 2 && index_0 < scaleIncrements.length - 1);
  this$static.min_0 = tempMinValue;
  this$static.max_0 = tempMaxValue;
  !isNaN_0(this$static.manualMin) && (this$static.min_0 = this$static.manualMin);
  !isNaN_0(this$static.manualMax) && (this$static.max_0 = this$static.manualMax);
  calcedDivisions < 2 && (calcedDivisions = 2);
  calcedDivisions = $adjustForPrimaryScaleDivisions(this$static, primary, calcedDivisions, increment);
  this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, calcedDivisions, 15, 1);
  for (divsionIndex = 0; divsionIndex < calcedDivisions; divsionIndex++) {
    this$static.divisions[divsionIndex] = this$static.min_0 + divsionIndex * increment;
    divsionIndex == 0 && !isNaN_0(this$static.manualMin) && (this$static.divisions[0] = this$static.min_0);
    divsionIndex == calcedDivisions - 1 && !isNaN_0(this$static.manualMax) && (this$static.divisions[divsionIndex] = this$static.max_0);
  }
  $adjustNumberFormatterBasedOnIncrement(this$static, increment, this$static.divisions[calcedDivisions - 1]);
  return true;
}

function $calcMinMaxFromDataGrid(this$static, data_0){
  var max_0, min_0, row, tmpMax, tmpMin;
  row = $getFirstVisibleRow(data_0);
  max_0 = NaN;
  min_0 = NaN;
  while (row) {
    tmpMax = $getMaxForRow(this$static, row);
    tmpMin = $getMinForRow(this$static, row, false);
    tmpMax > $intern_20 && (isNaN(max_0) || tmpMax > max_0) && (max_0 = tmpMax);
    tmpMin < $intern_19 && (isNaN(min_0) || tmpMin < min_0) && (min_0 = tmpMin);
    row = $getNextVisibleRow(data_0, row);
  }
  max_0 >= 1?(max_0 = toDouble_0(fromDouble_0($wnd.Math.round(max_0 * $intern_12 + $intern_47))) / $intern_12):max_0 <= -1 && (max_0 = toDouble_0(fromDouble_0($wnd.Math.round(max_0 * $intern_12 - $intern_47))) / $intern_12);
  min_0 >= 1?(min_0 = toDouble_0(fromDouble_0($wnd.Math.round(min_0 * $intern_12 + $intern_47))) / $intern_12):min_0 <= -1 && (min_0 = toDouble_0(fromDouble_0($wnd.Math.round(min_0 * $intern_12 - $intern_47))) / $intern_12);
  return new MinMax(min_0, max_0);
}

function $dataAppearsToBeIntegerData(this$static){
  var data_0, row;
  if (this$static.graph.data_0) {
    data_0 = this$static.graph.data_0;
    row = $getFirstVisibleRow(data_0);
    while (row) {
      if (!$allValuesAppearToBeInteger(row))
        return false;
      row = $getNextVisibleRow(data_0, row);
    }
  }
  return true;
}

function $drawOneGridLine(this$static, ge, innerBnds, value_0, stroke){
  var pos;
  pos = this$static.position == 1 || this$static.position == 3?this$static.getMinPosition() + this$static.getPositionForValue(value_0):this$static.getMinPosition() - this$static.getPositionForValue(value_0);
  this$static.position == 1 || this$static.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(pos, innerBnds.y_0, pos, innerBnds.y_0 + innerBnds.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, pos, innerBnds.x_0 + innerBnds.width_0, pos), null, stroke));
}

function $drawScaleMarkerLines_0(this$static){
  var adjacentScale, i, innerBnds, scaleMarker;
  if (this$static.scaleMarkers) {
    adjacentScale = $getAdjacentScale(this$static);
    innerBnds = $getInnerBoundsRect(adjacentScale);
    for (i = 0; i < this$static.scaleMarkers.array.length; i++) {
      scaleMarker = castTo($get_2(this$static.scaleMarkers, i), 86);
      $draw_9(scaleMarker, this$static, innerBnds);
    }
  }
}

function $freeResources_33(this$static){
  $freeResources_32(this$static);
  this$static.existingLableRects = null;
  this$static.geSortIcon = null;
  !!this$static.scaleMarkers && (this$static.scaleMarkers.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1));
  this$static.scaleMarkers = null;
  !!this$static.labelsGE && $freeResources_3(this$static.labelsGE);
  this$static.labelsGE = null;
}

function $getAbsolutePositionForValue(this$static, value_0){
  return this$static.position == 1 || this$static.position == 3?this$static.getMinPosition() + this$static.getPositionForValue(value_0):this$static.getMinPosition() - this$static.getPositionForValue(value_0);
}

function $getCurrentSortIconPath(this$static, x_0, y_0, scaleFactor){
  var sort_0;
  sort_0 = this$static.graph.currentSort;
  return $getSortIconPath(sort_0, x_0, y_0, scaleFactor);
}

function $getDataLabelNumberFormatter(this$static){
  var theNumberFormatter;
  theNumberFormatter = this$static.graph.dataLabelNumberFormatter;
  if (this$static.datalabelUseScaleAbbreviation || this$static.datalabelUseScaleFormat || $hasDualValueScales(this$static.graph)) {
    theNumberFormatter = new NumberFormatter_0(theNumberFormatter);
    (this$static.datalabelUseScaleFormat || $hasDualValueScales(this$static.graph)) && $applyFormatFromOtherNumberFormatter(theNumberFormatter, this$static.numberFormatter);
    this$static.datalabelUseScaleAbbreviation && $applyAbbreviationsFromOtherNumberFormatter(theNumberFormatter, this$static.numberFormatter);
  }
  return theNumberFormatter;
}

function $getFormattedValue_0(this$static, value_0){
  if (this$static.numberFormatterForScaleLabels)
    return $formatNumber_1(this$static.numberFormatterForScaleLabels, value_0);
  return $formatNumber_1(this$static.numberFormatter, value_0);
}

function $getHoverNumberFormatter(this$static){
  var theNumberFormatter;
  theNumberFormatter = this$static.graph.hoverNumberFormatter;
  if (this$static.hoverUseScaleAbbreviation || this$static.hoverUseScaleFormat) {
    theNumberFormatter = new NumberFormatter_0(theNumberFormatter);
    this$static.hoverUseScaleFormat && $applyFormatFromOtherNumberFormatter(theNumberFormatter, this$static.numberFormatter);
    this$static.hoverUseScaleAbbreviation && $applyAbbreviationsFromOtherNumberFormatter(theNumberFormatter, this$static.numberFormatter);
  }
  return theNumberFormatter;
}

function $getMaxForRow(this$static, row){
  var result;
  result = NaN;
  this$static.graph.typeAttributes.isGroupedStacked?(result = $getGroupedCumMaxValue(row, $getGroupStackedSecondBarSeriesIndex($getBarHandler(this$static.graph)), this$static.isSecondary)):this$static.graph.typeAttributes.isStacked && (result = $getCumMaxValue(row, this$static.isSecondary));
  isNaN(result) && (result = $getMaxValueIncludingProjections(row, this$static.isSecondary));
  return result;
}

function $getMinForRow(this$static, row, nonNegative){
  var result;
  result = NaN;
  if (nonNegative)
    return $getMinValueNonNegative(row, this$static.isSecondary);
  this$static.graph.typeAttributes.isGroupedStacked?(result = $getGroupedCumMinValue(row, $getGroupStackedSecondBarSeriesIndex($getBarHandler(this$static.graph)), this$static.isSecondary)):this$static.graph.typeAttributes.isStacked && (result = $getCumMinValue(row, this$static.isSecondary));
  isNaN(result) && (result = $getMinValueIncludingProjections(row, this$static.isSecondary));
  return result;
}

function $getMinPosition_0(this$static){
  if (this$static.position == 0 || this$static.position == 2)
    return $getBottom(this$static.graph.bnds) - this$static.endMargin - this$static.endPadding;
  return this$static.graph.bnds.x_0 + this$static.startMargin + this$static.startPadding;
}

function $getNextSortIconPath(this$static, x_0, y_0, scaleFactor){
  var sort_0, nextSort;
  sort_0 = (nextSort = this$static.graph.currentSort + 1 , nextSort == 5 && (nextSort = 0) , nextSort);
  return $getSortIconPath(sort_0, x_0, y_0, scaleFactor);
}

function $getRangeScaleMarker(this$static){
  var scaleMarker, scaleMarker$iterator;
  if (this$static.scaleMarkers) {
    for (scaleMarker$iterator = new ArrayList$1(this$static.scaleMarkers); scaleMarker$iterator.i < scaleMarker$iterator.this$01.array.length;) {
      scaleMarker = castTo($next_3(scaleMarker$iterator), 86);
      if (scaleMarker.type_0 == 1)
        return scaleMarker;
    }
  }
  return null;
}

function $getSortIconPath(sort_0, x_0, y_0, scaleFactor){
  var tempPath, tempPath0, tempPath1, tempPath2, tempPath3, tempPath4;
  sort_0 == 1?(tempPath0 = (tempPath1 = getPathFromXMLString(descendingPath) , tempPath1)):sort_0 == 2?(tempPath0 = (tempPath2 = getPathFromXMLString(ascendingPath) , tempPath2)):sort_0 == 3?(tempPath0 = (tempPath3 = getPathFromXMLString(azPath) , tempPath3)):sort_0 == 4?(tempPath0 = (tempPath4 = getPathFromXMLString(zaPath) , tempPath4)):(tempPath0 = (tempPath = getPathFromXMLString(nonePath) , tempPath));
  scaleFactor != 1 && $scale_1(tempPath0, scaleFactor, 0, 0);
  $translate(tempPath0, x_0, y_0);
  return tempPath0;
}

function $getSortIconRect(this$static, showNextSortAsButton, scaleFactor){
  var firstBetweenIndex, graphBnds, inflateAmount, inflateWithPadding, sortIconRect, sortIconSize, xFirst, xLast, xOffset, yFirst, yLast;
  inflateAmount = showNextSortAsButton?4 * scaleFactor:0;
  inflateWithPadding = showNextSortAsButton?inflateAmount + 2 * scaleFactor:4 * scaleFactor;
  firstBetweenIndex = round_int(this$static.existingLableRects.array.length / 2) - 1;
  sortIconRect = null;
  sortIconSize = 18 * scaleFactor;
  if (firstBetweenIndex >= 0) {
    if (this$static.graph.isHorizontal) {
      xFirst = $getCenterX(castTo($get_2(this$static.existingLableRects, firstBetweenIndex + 1), 4));
      xLast = $getCenterX(castTo($get_2(this$static.existingLableRects, firstBetweenIndex), 4));
      sortIconRect = new CFRect(xFirst + (xLast - xFirst) / 2 - sortIconSize / 2, this$static.bnds.y_0 + this$static.titleHeight, sortIconSize, sortIconSize);
      this$static.position == 3 && sortIconRect.y_0 < this$static.bnds.y_0 + this$static.titleHeight + inflateWithPadding && $setY_0(sortIconRect, this$static.bnds.y_0 + this$static.titleHeight + inflateWithPadding);
      this$static.position == 1 && sortIconRect.y_0 + sortIconRect.height_0 > $getBottom(this$static.bnds) - this$static.titleHeight - inflateWithPadding && $setBottom(sortIconRect, $getBottom(this$static.bnds) - this$static.titleHeight - inflateWithPadding);
    }
     else {
      yFirst = $getCenterY(castTo($get_2(this$static.existingLableRects, firstBetweenIndex + 1), 4));
      yLast = $getCenterY(castTo($get_2(this$static.existingLableRects, firstBetweenIndex), 4));
      xOffset = this$static.position == 0?-sortIconSize:sortIconSize;
      sortIconRect = new CFRect($getCenterX(this$static.bnds) + xOffset, yFirst + (yLast - yFirst) / 2 - sortIconSize / 2, sortIconSize, sortIconSize);
      this$static.position == 0 && sortIconRect.x_0 < this$static.bnds.x_0 + this$static.titleHeight + inflateWithPadding && $setX_0(sortIconRect, this$static.bnds.x_0 + this$static.titleHeight + inflateWithPadding);
      this$static.position == 2 && sortIconRect.x_0 + sortIconRect.width_0 > $getRight(this$static.bnds) - this$static.titleHeight - inflateWithPadding && $setRight(sortIconRect, $getRight(this$static.bnds) - this$static.titleHeight - inflateWithPadding);
    }
    graphBnds = this$static.graph.bnds;
    sortIconRect.x_0 < graphBnds.x_0 + 1 && $setX_0(sortIconRect, graphBnds.x_0 + 1);
    sortIconRect.y_0 < graphBnds.y_0 + 1 && $setY_0(sortIconRect, graphBnds.y_0 + 1);
    sortIconRect.x_0 + sortIconRect.width_0 > graphBnds.x_0 + graphBnds.width_0 - 1 && $setRight(sortIconRect, graphBnds.x_0 + graphBnds.width_0 - 1);
    sortIconRect.y_0 + sortIconRect.height_0 > graphBnds.y_0 + graphBnds.height_0 - 1 && $setBottom(sortIconRect, graphBnds.y_0 + graphBnds.height_0 - 1);
  }
  return sortIconRect;
}

function $handleClick_5(this$static, shapeClicked){
  if (!!shapeClicked && shapeClicked.drillFilter != null) {
    $remove_3(this$static.frontGeAry, this$static.geSortIcon);
    this$static.geSortIcon = null;
    $removeChartOption(this$static.graph, 'total_sort');
    $setNextSort(this$static.graph);
    $logChangeSort(this$static.graph.chart);
    return true;
  }
  return false;
}

function $handleLineScaleMarker(this$static){
  var i, marker2Value, markerHigh, markerLow, markerValue, sclMarker;
  if (this$static.scaleMarkers) {
    for (i = 0; i < this$static.scaleMarkers.array.length; i++) {
      sclMarker = castTo($get_2(this$static.scaleMarkers, i), 86);
      markerValue = $getValue_1(sclMarker, this$static.graph);
      markerHigh = markerValue;
      markerLow = markerValue;
      if (sclMarker.type_0 == 1) {
        marker2Value = $getHighValue(sclMarker, this$static.graph);
        markerHigh = markerValue;
        marker2Value > markerValue && (markerHigh = marker2Value);
        markerLow = markerValue;
        marker2Value < markerValue && (markerLow = marker2Value);
      }
      markerHigh > this$static.maxFromData && (!$is100pctStacked(this$static.graph) || $is100pctStacked(this$static.graph) && markerHigh <= 100) && (this$static.maxFromData = markerHigh);
      markerLow < this$static.minFromData && (!$is100pctStacked(this$static.graph) || $is100pctStacked(this$static.graph) && markerLow >= 0) && (this$static.minFromData = markerLow);
    }
  }
}

function $handleNodataForScale(this$static){
  var grphBnds, oppositeValueScale, scale;
  if ((isNaN_0(this$static.maxFromData) || this$static.maxFromData == $intern_20) && (isNaN_0(this$static.minFromData) || this$static.minFromData == $intern_19)) {
    if (this$static.syncedScales) {
      scale = $getScaleByPosition(this$static.graph, getOppositePosition(this$static.position));
      if (instanceOf(scale, 27) && scale.isSecondary && (scale.hideLabels || scale.isHidden)) {
        oppositeValueScale = castTo(scale, 27);
        this$static.min_0 = oppositeValueScale.min_0;
        this$static.max_0 = oppositeValueScale.max_0;
        this$static.minFromData = oppositeValueScale.minFromData;
        this$static.maxFromData = oppositeValueScale.maxFromData;
      }
       else {
        this$static.hiddenForNoData_0 = true;
        grphBnds = this$static.graph.bnds;
        this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2?(this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0)):(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0));
      }
    }
     else {
      this$static.hiddenForNoData_0 = true;
      grphBnds = this$static.graph.bnds;
      this$static.position == 1?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0)):this$static.position == 0?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, 0, grphBnds.height_0)):this$static.position == 3?(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0, grphBnds.width_0, 0)):this$static.position == 2?(this$static.bnds = new CFRect(grphBnds.x_0 + grphBnds.width_0, grphBnds.y_0, 0, grphBnds.height_0)):(this$static.bnds = new CFRect(grphBnds.x_0, grphBnds.y_0 + grphBnds.height_0, grphBnds.width_0, 0));
    }
  }
}

function $handleSyncedScales(this$static){
  var oppositeScale, otherScale;
  if (!this$static.syncedScales)
    return;
  if (this$static.isSecondary) {
    otherScale = $getScaleByPosition(this$static.graph, getOppositePosition(this$static.position));
    if (!!otherScale && instanceOf(otherScale, 27)) {
      oppositeScale = castTo(otherScale, 27);
      oppositeScale.maxFromData > this$static.maxFromData?(this$static.maxFromData = oppositeScale.maxFromData):(oppositeScale.maxFromData = this$static.maxFromData);
      oppositeScale.minFromData < this$static.minFromData?(this$static.minFromData = oppositeScale.minFromData):(oppositeScale.minFromData = this$static.minFromData);
    }
  }
}

function $handleSyncedZeroLine(this$static){
  var absMax, absMin, oppositeScale, otherScale;
  if (!this$static.syncZeroLine)
    return;
  if (this$static.isSecondary) {
    otherScale = $getScaleByPosition(this$static.graph, getOppositePosition(this$static.position));
    if (!!otherScale && instanceOf(otherScale, 27)) {
      oppositeScale = castTo(otherScale, 27);
      this$static.alwaysIncludeZero = true;
      oppositeScale.alwaysIncludeZero = true;
      if ((this$static.maxFromData > 0 || oppositeScale.maxFromData > 0) && (this$static.minFromData < 0 || oppositeScale.minFromData < 0)) {
        absMax = $wnd.Math.abs(this$static.maxFromData);
        absMin = $wnd.Math.abs(this$static.minFromData);
        (checkCriticalNotNull(absMin) , absMin) > (checkCriticalNotNull(absMax) , absMax) && (absMax = absMin);
        this$static.maxFromData = (checkCriticalNotNull(absMax) , absMax);
        this$static.minFromData = -(checkCriticalNotNull(absMax) , absMax);
        absMax = $wnd.Math.abs(oppositeScale.maxFromData);
        absMin = $wnd.Math.abs(oppositeScale.minFromData);
        (checkCriticalNotNull(absMin) , absMin) > (checkCriticalNotNull(absMax) , absMax) && (absMax = absMin);
        oppositeScale.maxFromData = (checkCriticalNotNull(absMax) , absMax);
        oppositeScale.minFromData = -(checkCriticalNotNull(absMax) , absMax);
      }
    }
  }
}

function $removeScaleMarker(this$static, marker){
  !!this$static.scaleMarkers && this$static.scaleMarkers.array.length > 0 && $remove_3(this$static.scaleMarkers, marker);
}

function $setHoverEffects_9(this$static, hoverData, seriesIndex){
  var obj, obj$iterator, redrawNeeded;
  redrawNeeded = false;
  if (hoverData != null && instanceOf(hoverData, 42) && castTo(hoverData, 42).size_1() > 0) {
    for (obj$iterator = castTo(hoverData, 42).iterator(); obj$iterator.hasNext_0();) {
      obj = obj$iterator.next_1();
      redrawNeeded = redrawNeeded | $setHoverEffectsForOneHoverData_0(this$static, obj, seriesIndex);
    }
  }
   else 
    redrawNeeded = $setHoverEffectsForOneHoverData_0(this$static, hoverData, seriesIndex);
  return redrawNeeded;
}

function $setHoverEffectsForOneHoverData_0(this$static, hoverData, seriesIndex){
  var curCol, primaryScale, secondaryScale;
  if (hoverData != null) {
    if (instanceOf(hoverData, 36))
      return false;
    if ($getValueScaleByNumber(this$static.graph, 1)) {
      curCol = null;
      if (instanceOf(hoverData, 37) && !!castTo(hoverData, 37).colInfo)
        curCol = castTo(hoverData, 37).colInfo;
      else if (instanceOf(hoverData, 18) && !!castTo(hoverData, 18).cell) {
        curCol = castTo(hoverData, 18).cell.column;
        !curCol && this$static.graph.typeAttributes.isNestedBar && instanceOf(hoverData, 25) && (curCol = $getColumn(this$static.graph.data_0, $getNumCols(this$static.graph.data_0) - 1));
      }
      primaryScale = $getValueScaleByNumber(this$static.graph, 0);
      secondaryScale = $getValueScaleByNumber(this$static.graph, 1);
      if (seriesIndex != -1 && !!curCol && !secondaryScale.hideLabels) {
        if (curCol.usesSecondaryScale) {
          !!primaryScale && !!primaryScale.labelsGE && (primaryScale.labelsGE.hidden = true);
          !!secondaryScale && !!secondaryScale.labelsGE && (secondaryScale.labelsGE.hidden = false);
        }
         else {
          !!primaryScale && !!primaryScale.labelsGE && (primaryScale.labelsGE.hidden = false);
          !!secondaryScale && !!secondaryScale.labelsGE && (secondaryScale.labelsGE.hidden = true);
        }
      }
       else {
        !!primaryScale && !!primaryScale.labelsGE && (primaryScale.labelsGE.hidden = false);
        !!secondaryScale && !!secondaryScale.labelsGE && (secondaryScale.labelsGE.hidden = false);
      }
    }
  }
   else {
    if ($getValueScaleByNumber(this$static.graph, 1)) {
      !!$getValueScaleByNumber(this$static.graph, 0) && !!$getValueScaleByNumber(this$static.graph, 0).labelsGE && ($getValueScaleByNumber(this$static.graph, 0).labelsGE.hidden = false);
      !!$getValueScaleByNumber(this$static.graph, 1).labelsGE && ($getValueScaleByNumber(this$static.graph, 1).labelsGE.hidden = false);
    }
  }
  if (hoverData == null && this$static.showingSortIcon) {
    this$static.showingSortIcon = false;
    $remove_3(this$static.frontGeAry, this$static.geSortIcon);
    this$static.geSortIcon = null;
    this$static.graph.currentSort != 0 && $buildAndAddSortIcon(this$static, false);
  }
   else if (!this$static.showingSortIcon && hoverData != null && hoverData === this$static) {
    $remove_3(this$static.frontGeAry, this$static.geSortIcon);
    this$static.geSortIcon = null;
    $buildAndAddSortIcon(this$static, true);
    this$static.showingSortIcon = true;
  }
  return true;
}

function $setManualDivisions(this$static, manMaxDivisions){
  this$static.manualDivisions = manMaxDivisions;
}

function $setManualMax(this$static, manMax){
  this$static.manualMax = manMax;
  this$static.manualMax < 0 && (this$static.alwaysIncludeZero = false);
}

function $setManualMin(this$static, manMin){
  this$static.manualMin = manMin;
  this$static.manualMin > 0 && (this$static.alwaysIncludeZero = false);
}

function $setNumberFormatter_0(this$static, numFormatter){
  !!numFormatter && (this$static.numberFormatter = numFormatter);
}

function $setPadding(this$static){
  var padding;
  this$static.position == 1 || this$static.position == 3?(padding = $getPaddingX(this$static.graph)):(padding = $getPaddingY(this$static.graph));
  this$static.startPadding = padding.width_0;
  this$static.endPadding = padding.height_0;
}

function $setScaleRatio(this$static, range){
  var length_0;
  length_0 = this$static.getLength();
  range == 0 && (range = 1);
  this$static.setScaleRatioLengthOverride(length_0, range);
}

function $setSecondaryDivisionsFromManualMinMax(this$static, primary){
  var i, numDivisions, position, range, value_0;
  numDivisions = primary.divisions.length;
  this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, numDivisions, 15, 1);
  this$static.max_0 = this$static.maxFromData;
  this$static.min_0 = this$static.minFromData;
  !isNaN_0(this$static.manualMax) && !this$static.syncZeroLine && (this$static.max_0 = this$static.manualMax);
  !isNaN_0(this$static.manualMin) && !this$static.syncZeroLine && (this$static.min_0 = this$static.manualMin);
  range = this$static.max_0 - this$static.min_0;
  this$static.setScaleRatio(range);
  for (i = 0; i < numDivisions; i++) {
    position = primary.getPositionForValue(primary.divisions[i]);
    value_0 = this$static.getValueForPosition(position);
    this$static.divisions[i] = value_0;
  }
}

function $setSyncedZeroLineState(this$static, value_0){
  this$static.syncZeroLine = value_0;
}

function $setZeroLineColor(this$static, color_0){
  this$static.zeroLineStroke = new CFStroke(color_0, this$static.zeroLineStroke.width_0);
}

function $setZeroLineWidth(this$static, width_0){
  this$static.zeroLineStroke = new CFStroke(this$static.zeroLineStroke.color_0, width_0);
}

function $showValueScaleSortIcon(this$static){
  var secondary;
  if (this$static.graph.chart.graphPickerPanelOpen)
    return false;
  secondary = $getValueScaleByNumber(this$static.graph, 1);
  if ($supportsSortingFromScale(this$static.graph) && !secondary)
    return true;
  return false;
}

function ValueScale(position, grph, isSecondary){
  $clinit_ValueScale();
  Scale.call(this, position, grph, isSecondary);
  this.existingLableRects = new ArrayList;
  this.majorGridLineStroke.noMouse = true;
  this.zeroLineStroke = new CFStroke(this.majorGridLineStroke.color_0, this.majorGridLineStroke.width_0);
  this.zeroLineStroke.noMouse = true;
  this.graph?(this.numberFormatter = new NumberFormatter_0(this.graph.numberFormatter)):(this.numberFormatter = new NumberFormatter);
}

function ValueScale_0(valueScale){
  $clinit_ValueScale();
  ValueScale.call(this, valueScale.position, valueScale.graph, valueScale.isSecondary);
  this.alwaysIncludeZero = valueScale.alwaysIncludeZero;
  this.syncZeroLine = valueScale.syncZeroLine;
  this.syncedScales = valueScale.syncedScales;
  this.numberFormatter = valueScale.numberFormatter;
  this.showingSortIcon = valueScale.showingSortIcon;
  this.title_0 = valueScale.title_0;
  !!valueScale.labelFont && (this.labelFont = new CFFont(valueScale.labelFont));
  !!valueScale.scaleMarkers && (this.scaleMarkers = new ArrayList_1(valueScale.scaleMarkers));
  this.datalabelUseScaleFormat = valueScale.datalabelUseScaleFormat;
  this.datalabelUseScaleAbbreviation = valueScale.datalabelUseScaleAbbreviation;
}

defineClass(27, 53, {53:1, 27:1}, ValueScale, ValueScale_0);
_.addLabels = function addLabels_1(rnd){
  var ti, ti$iterator;
  if (!this.hiddenForNoData_0 && !this.isHidden) {
    this.labelsGE = new GraphicElement;
    $addTitleIfExists(this, rnd, this.labelsGE);
    for (ti$iterator = new ArrayList$1(this.labelList); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      $addTextItem(this.labelsGE, ti);
    }
    $add_1(this.geAry, this.labelsGE);
    $addSortIcon(this);
  }
}
;
_.adjustForMinMaxSame = function adjustForMinMaxSame(){
  if (this.minFromData == this.maxFromData) {
    this.maxDivisions = 1;
    if (this.minFromData == 0)
      this.maxFromData = 1;
    else if (this.minFromData > 0) {
      !this.syncedScales && !this.syncZeroLine && (this.maxFromData += this.maxFromData * 0.1);
      this.minFromData -= this.minFromData * 0.1;
    }
     else {
      !this.syncedScales && !this.syncZeroLine && (this.maxFromData -= this.maxFromData * 0.1);
      this.minFromData += this.minFromData * 0.1;
    }
  }
}
;
_.adjustMinMaxForPercentOverAndUnder = function adjustMinMaxForPercentOverAndUnder(){
  var maxForAdjust, minForAdjust, theRange;
  maxForAdjust = $wnd.Math.abs(this.maxFromData);
  minForAdjust = $wnd.Math.abs(this.minFromData);
  minForAdjust > maxForAdjust && (maxForAdjust = minForAdjust);
  if (this.calcMinMaxUsingPercentOverAndUnder && !this.isHidden) {
    this.maxFromData += maxForAdjust * this.percentOverMax / 100;
    this.minFromData -= maxForAdjust * this.percentUnderMin / 100;
  }
   else if (this.min_0 > 0 && this.graph.graphType != 12) {
    theRange = this.maxFromData - this.minFromData;
    this.minFromData -= theRange * 0.05;
    this.minFromData < 0 && (this.minFromData = 0);
  }
}
;
_.calcCleanDivisionValues = function calcCleanDivisionValues(){
  var absRange, calcedDivisions, divsionIndex, increment, index_0, lowerDividend, maximumDivisionsToShow, numDivisions, range, range10to100, scaleFactor, tempMaxValue, tempMinValue, upperDividend;
  if (this.graph.graphType == 26 && !this.isSecondary && $calcCleanDivisionValuesForSecondaryScale(this))
    return;
  if (this.isSecondary && this.graph.graphType != 26 && $calcCleanDivisionValuesForSecondaryScale(this))
    return;
  this.max_0 = this.maxFromData;
  this.min_0 = this.minFromData;
  maximumDivisionsToShow = this.maxDivisions;
  range = this.max_0 - this.min_0;
  absRange = $wnd.Math.abs(range);
  scaleFactor = this.calcScaleFactor(absRange);
  range10to100 = absRange / scaleFactor;
  range10to100 = $wnd.Math.ceil(range10to100);
  range10to100 > 100 && (range10to100 = 100);
  index_0 = 0;
  do 
    numDivisions = range10to100 / scaleIncs[index_0++];
  while (numDivisions > maximumDivisionsToShow && index_0 < scaleIncs.length);
  index_0 -= 2;
  do {
    ++index_0;
    increment = scaleFactor * scaleIncs[index_0];
    if (!doublesEqualWithinTolerance(increment, toDouble_0(fromDouble_0($wnd.Math.round(increment)))) && range >= 1 && range <= 20 && $dataAppearsToBeIntegerData(this)) {
      increment = toDouble_0(fromDouble_0($wnd.Math.round(increment + 0.49)));
      increment == 0 && (increment = 1);
    }
    upperDividend = this.max_0 / increment;
    upperDividend = $wnd.Math.ceil(upperDividend);
    tempMaxValue = upperDividend * increment;
    lowerDividend = this.min_0 / increment;
    lowerDividend = $wnd.Math.floor(lowerDividend);
    tempMinValue = lowerDividend * increment;
    numDivisions = toDouble_0(fromDouble_0($wnd.Math.round((tempMaxValue - tempMinValue) / increment)));
    calcedDivisions = round_int(numDivisions) + 1;
  }
   while (calcedDivisions > maximumDivisionsToShow && calcedDivisions > 2 && index_0 < scaleIncs.length - 1);
  !isNaN_0(this.manualMin) || (this.min_0 = tempMinValue);
  !isNaN_0(this.manualMax) || (this.max_0 = tempMaxValue);
  calcedDivisions < 2 && (calcedDivisions = 2);
  this.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, calcedDivisions, 15, 1);
  for (divsionIndex = 0; divsionIndex < calcedDivisions; divsionIndex++) {
    this.divisions[divsionIndex] = tempMinValue + divsionIndex * increment;
    divsionIndex == 0 && !isNaN_0(this.manualMin) && (this.divisions[0] = this.min_0);
    divsionIndex == calcedDivisions - 1 && !isNaN_0(this.manualMax) && (this.divisions[divsionIndex] = this.max_0);
  }
  $adjustNumberFormatterBasedOnIncrement(this, increment, this.divisions[calcedDivisions - 1]);
}
;
_.calcDivisionValues = function calcDivisionValues(){
  var divsionIndex, increment, range;
  range = this.max_0 - this.min_0;
  increment = range / this.maxDivisions;
  this.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, this.maxDivisions + 1, 15, 1);
  for (divsionIndex = 0; divsionIndex <= this.maxDivisions; divsionIndex++)
    this.divisions[divsionIndex] = this.min_0 + divsionIndex * increment;
  $adjustNumberFormatterBasedOnIncrement(this, increment, this.divisions[this.maxDivisions - 1]);
}
;
_.calcLabelPositions = function calcLabelPositions(rnd){
  var division, division$array, division$index, division$max, label_0, labelDimensions, pos, rect, testRect, text_0;
  if (!this.hiddenForNoData_0 && !this.isHidden && !this.hideLabels) {
    this.existingLableRects.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    if (this.divisions != null) {
      for (division$array = this.divisions , division$index = 0 , division$max = division$array.length; division$index < division$max; ++division$index) {
        division = division$array[division$index];
        pos = this.position == 1 || this.position == 3?this.getMinPosition() + this.getPositionForValue(division):this.getMinPosition() - this.getPositionForValue(division);
        text_0 = $getFormattedValue_0(this, division);
        labelDimensions = rnd.measureText_0(text_0, this.labelFont);
        rect = $getRectForCenteredLabel(this, pos, labelDimensions);
        testRect = new CFRect(rect.x_0 - 3, rect.y_0, rect.width_0 + 6, rect.height_0);
        if (!$intersectsWithList(testRect, this.existingLableRects)) {
          $add_1(this.existingLableRects, $getRectForCenteredLabel(this, pos, labelDimensions));
          label_0 = $getTextItemForPositionAndRect(this, rnd, text_0, rect);
          $add_1(this.labelList, label_0);
        }
      }
    }
  }
}
;
_.calcMinMaxRatioFromDataRange = function calcMinMaxRatioFromDataRange(){
  var dataMinMax, minMax;
  this.hiddenForNoData_0 = false;
  if (isNaN_0(this.max_0) && !!this.graph && !!this.graph.data_0) {
    dataMinMax = $calcMinMaxFromDataGrid(this, this.graph.data_0);
    this.min_0 = dataMinMax.min_0;
    this.max_0 = dataMinMax.max_0;
    minMax = this.graph.handler.calcMinMaxOverride(this, this.min_0, this.max_0);
    if (minMax) {
      this.min_0 = minMax.min_0;
      this.max_0 = minMax.max_0;
    }
    if (this.graph.typeAttributes.percentOfCategoryData) {
      if (!$isLineBar(this.graph) || this.isSecondary) {
        this.max_0 < 100 && (this.max_0 = 100);
        this.min_0 < 0 && (this.min_0 = 0);
      }
    }
  }
  this.minFromData = this.min_0;
  this.maxFromData = this.max_0;
}
;
_.calcNegativeScaleFactor = function calcNegativeScaleFactor(range){
  var dividend, factor;
  factor = 1;
  do {
    factor /= 10;
    dividend = range / factor;
  }
   while (dividend < 10);
  return factor;
}
;
_.calcPositiveScaleFactor = function calcPositiveScaleFactor(range){
  var dividend, factor;
  factor = 0.01;
  do {
    factor *= 10;
    dividend = range / factor;
  }
   while (dividend > 100);
  return factor;
}
;
_.calcScaleFactor = function calcScaleFactor(range){
  var scaleFactor;
  scaleFactor = 1;
  range >= 10?(scaleFactor = this.calcPositiveScaleFactor(range)):range > 0 && range < 10 && (scaleFactor = this.calcNegativeScaleFactor(range));
  return scaleFactor;
}
;
_.checkForWarningOnNegativeNumbers = function checkForWarningOnNegativeNumbers(){
  return false;
}
;
_.clearGeArrays = function clearGeArrays_0(){
  clearGraphicElementArray(this.backGeAry);
  clearGraphicElementArray(this.geAry);
  this.frontGeAry.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}
;
_.createGridDrawObjects = function createGridDrawObjects_1(rnd){
  var adjacentScale, division, division$array, division$index, division$max, ge, innerBnds, pos, primaryValScale, stroke;
  if (this.isHidden) {
    $drawScaleMarkerLines_0(this);
    return;
  }
  this.drawBaseline && $drawBaseline(this);
  if (this.majorGridLineStroke) {
    primaryValScale = $getValueScaleByNumber(this.graph, 0);
    if (!this.isSecondary || !!primaryValScale && primaryValScale.hiddenForNoData_0) {
      ge = new GraphicElement;
      adjacentScale = $getAdjacentScale(this);
      innerBnds = $getMarginBoundsRect(adjacentScale);
      if (!this.hideGrids && this.divisions != null) {
        for (division$array = this.divisions , division$index = 0 , division$max = division$array.length; division$index < division$max; ++division$index) {
          division = division$array[division$index];
          stroke = this.majorGridLineStroke;
          division == 0 && (stroke = this.zeroLineStroke);
          isNaN(division)?rnd.log_0('dvision is NaN. divisions length : ' + this.divisions.length):(pos = this.position == 1 || this.position == 3?this.getMinPosition() + this.getPositionForValue(division):this.getMinPosition() - this.getPositionForValue(division) , this.position == 1 || this.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(pos, innerBnds.y_0, pos, innerBnds.y_0 + innerBnds.height_0), null, stroke)):$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, pos, innerBnds.x_0 + innerBnds.width_0, pos), null, stroke)));
        }
        $add_1(this.geAry, ge);
      }
    }
  }
  $drawScaleMarkerLines_0(this);
}
;
_.formatSubClassSpecific = function formatSubClassSpecific_2(rnd, numRows, numCols, formatPass){
  var valRange;
  if (formatPass == 0 || this.projectionValuesSet) {
    this.max_0 = NaN;
    this.min_0 = NaN;
    this.maxDivisions = 6;
    this.ratio = NaN;
    this.calcMinMaxRatioFromDataRange();
    $handleNodataForScale(this);
    this.hiddenForNoData_0 || (this.handleMinMaxNaN() , this.adjustMinMaxForPercentOverAndUnder() , $handleLineScaleMarker(this) , this.handleManualMinMax() , this.handleManualDivisions() , this.handleAlwaysIncludeZero() , $handleSyncedScales(this) , $handleSyncedZeroLine(this) , this.adjustForMinMaxSame() , undefined);
    this.projectionValuesSet && (this.projectionValuesSet = false);
    this.geSortIcon = null;
  }
   else 
    this.type_0 == ST_CATEGORY && $limitDataIfNeeded(this, numRows);
  if ((!this.isHidden || $hasDualValueScales(this.graph)) && !this.hiddenForNoData_0) {
    this.useCleanBoundaries?this.calcCleanDivisionValues():this.calcDivisionValues();
  }
   else {
    this.max_0 = this.maxFromData;
    this.min_0 = this.minFromData;
  }
  if (!this.hiddenForNoData_0) {
    valRange = this.max_0 - this.min_0;
    this.setScaleRatio(valRange);
    this.calcLabelPositions(rnd);
    (this.showingSortIcon || this.graph.currentSort != 0) && !this.geSortIcon && !this.graph.chart.staticImage && formatPass > 1 && $buildAndAddSortIcon(this, this.showingSortIcon);
  }
}
;
_.freeResources_0 = function freeResources_57(){
  $freeResources_33(this);
}
;
_.getLength = function getLength_0(){
  var length_0;
  return length_0 = $getLength(this) , length_0 - (this.startPadding + this.endPadding);
}
;
_.getMinPosition = function getMinPosition_1(){
  return $getMinPosition_0(this);
}
;
_.getPositionForValue = function getPositionForValue_2(value_0){
  if (isNaN(value_0))
    return NaN;
  return (value_0 - this.min_0) * this.ratio;
}
;
_.getValueForPosition = function getValueForPosition(position){
  return this.min_0 + position / this.ratio;
}
;
_.getWidestLabelWidth = function getWidestLabelWidth(){
  var rect, rect$iterator, result;
  result = 0;
  for (rect$iterator = new ArrayList$1(this.existingLableRects); rect$iterator.i < rect$iterator.this$01.array.length;) {
    rect = castTo($next_3(rect$iterator), 4);
    rect.width_0 > result && (result = rect.width_0);
  }
  return result;
}
;
_.getZeroPosition = function getZeroPosition_0(){
  return this.min_0 <= 0 && 0 <= this.max_0?this.position == 1 || this.position == 3?this.getMinPosition() + this.getPositionForValue(0):this.getMinPosition() - this.getPositionForValue(0):this.min_0 > 0?this.getMinPosition():this.getMinPosition() + this.getLength();
}
;
_.handleAlwaysIncludeZero = function handleAlwaysIncludeZero(){
  this.minFromData > 0 && this.alwaysIncludeZero && (this.minFromData = 0);
  this.maxFromData < 0 && this.alwaysIncludeZero && (this.maxFromData = 0);
}
;
_.handleManualDivisions = function handleManualDivisions(){
  this.manualDivisions != -1 && (this.maxDivisions = this.manualDivisions);
  this.maxDivisions < 2 && (this.maxDivisions = 2);
}
;
_.handleManualMinMax = function handleManualMinMax(){
  !isNaN_0(this.manualMax) && (this.maxFromData = this.manualMax);
  !isNaN_0(this.manualMin) && (this.minFromData = this.manualMin);
}
;
_.handleMinMaxNaN = function handleMinMaxNaN(){
  isNaN_0(this.maxFromData) && (this.maxFromData = 0);
  isNaN_0(this.minFromData) && (this.minFromData = 0);
}
;
_.setDimensions = function setDimensions_2(rnd){
  var textDim, widestLabel;
  this.titleHeight = 0;
  if (!this.hiddenForNoData_0 && !this.isHidden && !this.hideLabels) {
    this.titleHeight = $getTitleHeight(this, rnd);
    textDim = rnd.measureText_0('A', this.labelFont);
    if (this.position == 1 || this.position == 3)
      $setHeight(this.bnds, textDim.height_0 + this.labelMargin + this.titleHeight);
    else {
      widestLabel = this.getWidestLabelWidth();
      widestLabel + this.labelMargin * 2 + this.titleHeight > this.bnds.width_0 && $setWidth(this.bnds, widestLabel + this.labelMargin * 2 + this.titleHeight);
    }
  }
}
;
_.setHoverEffects_1 = function setHoverEffects_21(hoverData, rnd, seriesIndex){
  return $setHoverEffects_9(this, hoverData, seriesIndex);
}
;
_.setMargins = function setMargins_1(rnd, numRows){
  var halfHeight, primary, secondary, textDim;
  if (this.graph.textAndTicksInBounds && !this.hiddenForNoData_0) {
    if (this.divisions != null && this.divisions.length > 0) {
      textDim = rnd.measureText_0($getFormattedValue_0(this, this.divisions[0]), this.labelFont);
      if (this.position == 1 || this.position == 3) {
        this.startMargin = textDim.width_0 / 2;
        textDim = rnd.measureText_0($getFormattedValue_0(this, this.divisions[this.divisions.length - 1]), this.labelFont);
        this.endMargin = textDim.width_0 / 2;
        this.endPadding < 32 && $hasAnnotations(this.graph) && !$annotationsHidden_0(this.graph) && (this.endPadding = 32);
        this.endMargin < this.endPadding && (this.endMargin = 0);
      }
       else {
        halfHeight = textDim.height_0 / 2;
        this.startMargin = halfHeight;
        $hasAnnotations(this.graph) && !$annotationsHidden_0(this.graph) && (this.startPadding += 20);
        this.endMargin = halfHeight;
      }
    }
     else 
      this.graph.allowAnnotationSpaceWithHiddenScales && this.position != 1 && this.position != 3 && $hasAnnotations(this.graph) && !$annotationsHidden_0(this.graph) && (this.startPadding += 27);
  }
  if ($hasDualValueScales(this.graph)) {
    if (this.isSecondary) {
      primary = $getValueScaleByNumber(this.graph, 0);
      primary.startMargin > this.startMargin && (this.startMargin = primary.startMargin);
      primary.endMargin > this.endMargin && (this.endMargin = primary.endMargin);
    }
     else {
      secondary = $getValueScaleByNumber(this.graph, 1);
      if (secondary) {
        secondary.startMargin > this.startMargin && (this.startMargin = secondary.startMargin);
        secondary.endMargin > this.endMargin && (this.endMargin = secondary.endMargin);
      }
    }
  }
}
;
_.setNeedsFormat_0 = function setNeedsFormat_10(){
  this.bnds = null;
  this.max_0 = NaN;
  this.min_0 = NaN;
}
;
_.setPadding = function setPadding_0(rnd, numRows){
  $setPadding(this);
}
;
_.setScaleRatio = function setScaleRatio(range){
  $setScaleRatio(this, range);
}
;
_.setScaleRatioLengthOverride = function setScaleRatioLengthOverride(length_0, range){
  this.ratio = length_0 / range;
}
;
_.alwaysIncludeZero = true;
_.calcMinMaxUsingPercentOverAndUnder = false;
_.datalabelUseScaleAbbreviation = false;
_.datalabelUseScaleFormat = false;
_.hiddenForNoData_0 = false;
_.hoverUseScaleAbbreviation = false;
_.hoverUseScaleFormat = false;
_.manualDivisions = -1;
_.manualMax = NaN;
_.manualMin = NaN;
_.max_0 = NaN;
_.maxDivisions = 6;
_.maxFromData = 0;
_.min_0 = NaN;
_.minFromData = 0;
_.percentOverMax = 10;
_.percentUnderMin = 10;
_.projectionValuesSet = false;
_.ratio = NaN;
_.showingSortIcon = false;
_.syncZeroLine = false;
_.syncedScales = false;
_.titleHeight = 0;
_.useCleanBoundaries = true;
var ascendingPath = 'M4.712,8.707l-1.415,-1.414l4.703,-4.708l4.707,4.708l-1.414,1.414l-3.293,-3.292zM9,18l-2,0l0,-13l2,0zM19.293,15.293l1.414,1.414l-4.707,4.708l-4.703,-4.708l1.415,-1.414l3.288,3.292zM15,6 L17,6 L17,19 L15,19 L15,6 Z M17,6 L17,19 L15,19 L15,6 L17,6 Z', azPath = 'M18 17.5928934L20.2928932 15.3000002 21.7071068 16.7142138 16.9996392 21.4216813 12.2966115 16.713853 13.7115463 15.300361 16 17.5911507 16 3 18 3 18 17.5928934zM6.93405672 7.5L8.07353139 7.5 7.50379413 6.0009871 6.93405672 7.5zM6.17390661 9.5L5.60379403 11 3.4000001 11 6.51769875 3 8.48988951 3 11.6033058 11 9.40379375 11 8.83368131 9.5 6.17390661 9.5zM4,15l0,-2l7,0l0,1.509l-3.896,4.491l3.896,0l0,2l-7,0l0,-1.474l3.926,-4.526z', descendingPath = 'M15,6.41053059 L12.7115463,8.70132027 L11.2966115,7.28782831 L15.9996392,2.57999992 L20.7071068,7.28746751 L19.2928932,8.70168107 L17,6.40878785 L17,17.9945743 L15,17.9945743 L15,6.41053059 Z M9,17.5803607 L11.2928932,15.2874675 L12.7071068,16.7016811 L7.9996392,21.4091487 L3.29661149,16.7013203 L4.71154629,15.2878283 L7,17.578618 L7,5.99457429 L9,5.99457429 L9,17.5803607 Z', nonePath = 'M12,2 C6.5,2 2,6.5 2,12 C2,17.5 6.5,22 12,22 C17.5,22 22,17.5 22,12 C22,6.5 17.5,2 12,2 L12,2 Z M4,12 C4,7.6 7.6,4 12,4 C13.8,4 15.5,4.6 16.9,5.7 L5.7,16.9 C4.6,15.5 4,13.8 4,12 L4,12 Z M12,20 C10.2,20 8.5,19.4 7.1,18.3 L18.3,7.1 C19.4,8.5 20,10.2 20,12 C20,16.4 16.4,20 12,20 L12,20 Z', scaleIncs, scaleIncs2, sortIconFill, zaPath = 'M18 17.5928934L20.2928932 15.3000002 21.7071068 16.7142138 16.9996392 21.4216813 12.2966115 16.713853 13.7115463 15.300361 16 17.5911507 16 3 18 3 18 17.5928934zM6.93405672 17.5L8.07353139 17.5 7.50379413 16.0009871 6.93405672 17.5zM6.17390661 19.5L5.60379403 21 3.4000001 21 6.51769875 13 8.48988951 13 11.6033058 21 9.40379375 21 8.83368131 19.5 6.17390661 19.5zM4,5l0,-2l7,0l0,1.509l-3.896,4.491l3.896,0l0,2l-7,0l0,-1.474l3.926,-4.526z';
var Lcom_domo_charting_scales_ValueScale_2_classLit = createForClass('com.domo.charting.scales', 'ValueScale', 27);
function $addLabelsToGraphicElement(this$static, list, graphicElement){
  var item_0, item$iterator, itemToDraw;
  for (item$iterator = new ArrayList$1(list); item$iterator.i < item$iterator.this$01.array.length;) {
    item_0 = castTo($next_3(item$iterator), 26);
    itemToDraw = item_0;
    this$static.dimLabels && (itemToDraw = new CFTextItem_0(item_0.text_0, this$static.dimFont, item_0.x_0, item_0.y_0));
    !graphicElement.textAry && (graphicElement.textAry = new ArrayList);
    $add_1(graphicElement.textAry, itemToDraw);
  }
}

function $adjustMargins(this$static, rect){
  var bounds;
  bounds = this$static.graphInnerBounds;
  rect.y_0 < bounds.y_0 && bounds.y_0 - rect.y_0 > this$static.topMargin && (this$static.topMargin = bounds.y_0 - rect.y_0);
  rect.y_0 + rect.height_0 > bounds.y_0 + bounds.height_0 && rect.y_0 + rect.height_0 - (bounds.y_0 + bounds.height_0) > this$static.bottomMargin && (this$static.bottomMargin = rect.y_0 + rect.height_0 - (bounds.y_0 + bounds.height_0));
  rect.x_0 < bounds.x_0 && bounds.x_0 - rect.x_0 > this$static.leftMargin && (this$static.leftMargin = bounds.x_0 - rect.x_0);
  rect.x_0 + rect.width_0 > bounds.x_0 + bounds.width_0 && rect.x_0 + rect.width_0 - (bounds.x_0 + bounds.width_0) > this$static.rightMargin && (this$static.rightMargin = rect.x_0 + rect.width_0 - (bounds.x_0 + bounds.width_0));
}

function $calcCategoryLabelPositions(this$static, rnd){
  var anchorPoint, catRect, incrementAngle, item_0, item$index, item$max, items, numCategories, row, row$iterator, startAngle, text_0, label_0;
  if (!this$static.showCategoryLabels)
    return;
  numCategories = this$static.rowsToDisplay.size_1();
  incrementAngle = 360 / numCategories;
  startAngle = -90;
  for (row$iterator = this$static.rowsToDisplay.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    anchorPoint = $getPointForRadiusAndAngle(this$static, this$static.catLabelRadius, startAngle);
    text_0 = (label_0 = $getName(row) , label_0 != null && this$static.maxCatLength != -1 && label_0.length > 0 && label_0.length > this$static.maxCatLength && (label_0 = $substring_0(label_0, 0, this$static.maxCatLength) + '..') , label_0);
    catRect = $getTextRectForPointAndAngle(this$static, rnd, this$static.labelFont, anchorPoint, text_0, startAngle);
    if (!$intersectsWithList(catRect, this$static.valueScale.existingLableRects)) {
      items = $getTextItemForCat(this$static, rnd, this$static.labelFont, text_0, catRect);
      for (item$index = 0 , item$max = items.length; item$index < item$max; ++item$index) {
        item_0 = items[item$index];
        $add_1(this$static.catLabelList, item_0);
      }
      $add_1(this$static.valueScale.existingLableRects, catRect);
    }
    $adjustMargins(this$static, catRect);
    startAngle += incrementAngle;
  }
}

function $calcLabelPositions(this$static, rnd){
  var topScale, bottomScale, rightScale;
  if (!this$static.hiddenForNoData && !this$static.isHidden && !this$static.hideLabels && !!this$static.graph && !!this$static.graph.data_0) {
    this$static.valueScale.existingLableRects.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.labelList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.catLabelList.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    this$static.showCategoryLabels && $calcCategoryLabelPositions(this$static, rnd);
    $setWidth(this$static.bnds, this$static.leftMargin);
    topScale = $getScaleByPosition(this$static.graph, 3);
    $setBuffer(castTo(topScale, 129), this$static.topMargin);
    bottomScale = $getScaleByPosition(this$static.graph, 1);
    $setBuffer(castTo(bottomScale, 129), this$static.bottomMargin);
    rightScale = $getScaleByPosition(this$static.graph, 2);
    $setBuffer(castTo(rightScale, 129), this$static.rightMargin);
    this$static.showValueLabels && $calcValueScaleLabels(this$static, rnd);
  }
}

function $calcValueScaleLabels(this$static, rnd){
  var division, increment, index_0, label_0, labelDimensions, posX, posY, rect, testRect, text_0, textWidth, textHeight, halfTextHeight;
  posX = $getCenterX(this$static.graphInnerBounds);
  posY = $getCenterY(this$static.graphInnerBounds);
  increment = this$static.radius / (this$static.valueScale.divisions.length - 1);
  for (index_0 = 0; index_0 < this$static.valueScale.divisions.length; index_0++) {
    division = this$static.valueScale.divisions[index_0];
    text_0 = $getFormattedValue_0(this$static.valueScale, division);
    labelDimensions = rnd.measureText_0(text_0, this$static.labelFont);
    rect = (textWidth = labelDimensions.width_0 , textHeight = labelDimensions.height_0 , halfTextHeight = textHeight / 2 , new CFRect(posX - textWidth - this$static.labelMargin, posY - halfTextHeight, textWidth, textHeight));
    testRect = new CFRect(rect.x_0 - 3, rect.y_0, rect.width_0 + 6, rect.height_0);
    if (!$intersectsWithList(testRect, this$static.valueScale.existingLableRects)) {
      $add_1(this$static.valueScale.existingLableRects, rect);
      label_0 = $getTextItemForPositionAndRect(this$static, rnd, text_0, rect);
      $add_1(this$static.labelList, label_0);
    }
    index_0 == this$static.valueScale.divisions.length - 1 && $adjustMargins(this$static, rect);
    posY -= increment;
  }
}

function $changeValueScaleToLogScale(this$static, toLog){
  toLog && !instanceOf(this$static.valueScale, 73)?(this$static.valueScale = new ValueScaleLog(this$static.valueScale)):!toLog && instanceOf(this$static.valueScale, 73) && (this$static.valueScale = new ValueScale_0(this$static.valueScale));
}

function $drawCategoryLabels(this$static){
  this$static.catLabelGE = new GraphicElement;
  $addLabelsToGraphicElement(this$static, this$static.catLabelList, this$static.catLabelGE);
  $add_1(this$static.backGeAry, this$static.catLabelGE);
}

function $drawOneScaleLine(this$static, ge, numCategories, incrementAngle, value_0, stroke){
  var angle, catIndex, catPoint, emptyFill, path, points, radiusLength;
  radiusLength = $getPositionForValue(this$static, value_0);
  points = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, numCategories, 0, 1);
  angle = -90;
  for (catIndex = 0; catIndex < numCategories; catIndex++) {
    catPoint = $getPointForRadiusAndAngle(this$static, radiusLength, angle);
    points[catIndex] = catPoint;
    angle += incrementAngle;
  }
  path = new CFPath_13(points, true);
  path.shouldAntiAlias = true;
  emptyFill = new CFFill(($clinit_CFColor() , TRANSPARENT));
  emptyFill.noMouse = true;
  $addShape(ge, new CFShape_0(path, emptyFill, stroke));
}

function $drawScaleLines(this$static){
  var division, division$array, division$index, division$max, incrementAngle, numCategories, stroke;
  this$static.scaleLinesGE = new GraphicElement;
  numCategories = this$static.rowsToDisplay.size_1();
  incrementAngle = 360 / numCategories;
  for (division$array = this$static.valueScale.divisions , division$index = 0 , division$max = division$array.length; division$index < division$max; ++division$index) {
    division = division$array[division$index];
    stroke = this$static.majorGridLineStroke;
    division == 0 && (stroke = this$static.valueScale.zeroLineStroke);
    $drawOneScaleLine(this$static, this$static.scaleLinesGE, numCategories, incrementAngle, division, stroke);
  }
  $add_1(this$static.geAry, this$static.scaleLinesGE);
  $drawScaleMarkerLines_1(this$static, numCategories, incrementAngle);
}

function $drawScaleMarkerLines_1(this$static, numCategories, incrementAngle){
  var i, scaleMarker;
  if (this$static.scaleMarkers) {
    for (i = 0; i < this$static.scaleMarkers.array.length; i++) {
      scaleMarker = castTo($get_2(this$static.scaleMarkers, i), 86);
      $draw_8(scaleMarker, this$static, numCategories, incrementAngle);
    }
  }
}

function $drawValueScaleLabels(this$static){
  this$static.valueLabelGE = new GraphicElement;
  $addLabelsToGraphicElement(this$static, this$static.labelList, this$static.valueLabelGE);
  $add_1(this$static.frontGeAry, this$static.valueLabelGE);
}

function $getPointForRadiusAndAngle(this$static, radiusLength, angle){
  var X, Y, result;
  X = $wnd.Math.cos(angle * $intern_6) * radiusLength;
  Y = $wnd.Math.sin(angle * $intern_6) * radiusLength;
  result = new CFPoint($getCenterX(this$static.graphInnerBounds) + X, $getCenterY(this$static.graphInnerBounds) + Y);
  return result;
}

function $getPositionForValue(this$static, value_0){
  var calculatedRadius;
  calculatedRadius = this$static.valueScale.getPositionForValue(value_0);
  calculatedRadius > this$static.catLabelRadius?(calculatedRadius = this$static.catLabelRadius):calculatedRadius < 0 && (calculatedRadius = 0);
  return calculatedRadius;
}

function $getTextItemForCat(this$static, rnd, font, text_0, rect){
  var textInfo, vAlign;
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, font, this$static.LABEL_WRAP_WIDTH, -1, -1);
  vAlign = VALIGN_BOTTOM;
  return $getCFTextItemsForWrappedLines(textInfo, rnd, rect, font, 0, vAlign);
}

function $getTextRectForPointAndAngle(this$static, rnd, font, point, text_0, angle){
  var X, Y, dimension, retRect, textInfo;
  X = point.x_0;
  Y = point.y_0;
  textInfo = getWrappedTextForWidthWithMaxLines(rnd, text_0, font, this$static.LABEL_WRAP_WIDTH, -1, -1);
  dimension = textInfo.textDimension;
  retRect = new CFRect(0, 0, dimension.width_0, dimension.height_0);
  retRect.x_0 = X - retRect.width_0 / 2;
  retRect.y_0 = Y - retRect.height_0 / 2;
  angle < 0 && (angle += 360);
  if (angle > 269 && angle < 271)
    retRect.y_0 = Y - retRect.height_0;
  else if (angle >= 271 && angle < 359) {
    retRect.x_0 = X;
    retRect.y_0 = Y - retRect.height_0;
  }
   else if (angle >= 359 || angle <= 1)
    retRect.x_0 = X;
  else if (angle > 1 && angle < 89) {
    retRect.x_0 = X;
    retRect.y_0 = Y;
  }
   else if (angle >= 89 && angle <= 91)
    retRect.y_0 = Y;
  else if (angle > 91 && angle < 179) {
    retRect.x_0 = X - retRect.width_0;
    retRect.y_0 = Y;
  }
   else if (angle >= 179 && angle <= 181)
    retRect.x_0 = X - retRect.width_0;
  else {
    retRect.x_0 = X - retRect.width_0;
    retRect.y_0 = Y - retRect.height_0;
  }
  return retRect;
}

function $setDimLabels(this$static, value_0){
  if (this$static.dimLabels != value_0) {
    this$static.dimLabels = value_0;
    $remove_3(this$static.backGeAry, this$static.catLabelGE);
    $remove_3(this$static.frontGeAry, this$static.valueLabelGE);
    $drawCategoryLabels(this$static);
    $drawValueScaleLabels(this$static);
  }
}

function $setGraphBounds(this$static, formatPass){
  var legend, legendBounds;
  this$static.graphBounds = new CFRect_0(this$static.graph.bnds);
  if (!!$getLegend(this$static.graph) && !!$getLegend(this$static.graph).bnds) {
    legend = $getLegend(this$static.graph);
    legendBounds = $getLegend(this$static.graph).bnds;
    legend.position == 2?$setWidth(this$static.graphBounds, this$static.graphBounds.width_0 - legendBounds.width_0):legend.position == 0?$setX_0(this$static.graphBounds, this$static.graphBounds.x_0 + legendBounds.width_0):legend.position == 3?$setY_0(this$static.graphBounds, this$static.graphBounds.y_0 + legendBounds.height_0):legend.position == 1 && $setHeight(this$static.graphBounds, this$static.graphBounds.height_0 - legendBounds.height_0);
  }
  formatPass == 0 && (this$static.graphBounds.height_0 < this$static.graphBounds.width_0?(this$static.leftMargin = this$static.rightMargin = (this$static.graphBounds.width_0 - this$static.graphBounds.height_0) / 2):(this$static.topMargin = this$static.bottomMargin = (this$static.graphBounds.height_0 - this$static.graphBounds.width_0) / 2));
}

function $setMaxCatLen_0(this$static, value_0){
  this$static.maxCatLength = value_0;
}

function $setShowCategoryLabels(this$static, showCategoryLabels){
  this$static.showCategoryLabels = showCategoryLabels;
}

function $setShowValueLabels(this$static, showValueLabels){
  this$static.showValueLabels = showValueLabels;
}

function RadarScale(grph){
  $clinit_ValueScale();
  ValueScale.call(this, 0, grph, false);
  this.LABEL_WRAP_WIDTH = 300;
  this.graphBounds = null;
  this.graphInnerBounds = null;
  this.showCategoryLabels = true;
  this.showValueLabels = true;
  this.catLabelList = new ArrayList;
  this.maxCatLength = -1;
  this.type_0 = ST_CATEGORY;
  this.valueScale = new ValueScale(0, grph, false);
  this.bottomMargin = 1;
}

defineClass(95, 27, {95:1, 53:1, 27:1}, RadarScale);
_.addLabels = function addLabels_2(rnd){
  $drawCategoryLabels(this);
  $drawValueScaleLabels(this);
}
;
_.calcLabelPositions = function calcLabelPositions_0(rnd){
  $calcLabelPositions(this, rnd);
}
;
_.checkForWarningOnNegativeNumbers = function checkForWarningOnNegativeNumbers_0(){
  return this.valueScale.checkForWarningOnNegativeNumbers();
}
;
_.createGridDrawObjects = function createGridDrawObjects_2(rnd){
  clearGraphicElementArray(this.graph.backGeAry);
  this.graph.geAry.clear_0();
  this.graph.frontGeAry.clear_0();
  $drawScaleLines(this);
  if (this.isHidden)
    return;
}
;
_.format_1 = function format_36(rnd, numRows, numCols, formatPass){
  !!this.graph && !!this.graph.bnds && this.graph.bnds.width_0 < 900 && (this.LABEL_WRAP_WIDTH = round_int(this.graph.bnds.width_0 / 4));
  numRows = $limitDataIfNeeded(this, numRows);
  if (this.valueScale) {
    formatPass == 0 && (this.valueScale.numberFormatter = this.numberFormatter , this.valueScale.datalabelUseScaleAbbreviation = this.datalabelUseScaleAbbreviation , this.valueScale.datalabelUseScaleFormat = this.datalabelUseScaleFormat , this.valueScale.hoverLabelTextOverride = this.hoverLabelTextOverride , this.valueScale.hoverUseScaleAbbreviation = this.hoverUseScaleAbbreviation , this.valueScale.hoverUseScaleFormat = this.hoverUseScaleFormat , this.valueScale.manualDivisions = this.manualDivisions , this.valueScale.alwaysIncludeZero = this.alwaysIncludeZero , this.valueScale.percentOverMax = this.percentOverMax , this.valueScale.percentUnderMin = this.percentUnderMin , this.valueScale.calcMinMaxUsingPercentOverAndUnder = this.calcMinMaxUsingPercentOverAndUnder , this.valueScale.manualMax = this.manualMax , this.valueScale.manualMin = this.manualMin , this.valueScale.hiddenForNoData_0 = this.hiddenForNoData , this.valueScale.manualMin = this.manualMin , this.valueScale.manualMin = this.manualMin , this.valueScale.manualMin = this.manualMin , this.valueScale.manualMin = this.manualMin , this.valueScale.manualMin = this.manualMin , undefined);
    this.valueScale.format_1(rnd, numRows, numCols, formatPass);
  }
  $format_7(this, rnd, numRows, numCols, formatPass);
}
;
_.formatSubClassSpecific = function formatSubClassSpecific_3(rnd, numRows, numCols, formatPass){
  var valRange;
  !this.dimFont && (this.dimFont = new CFFont_0(this.labelFont.name_0, this.labelFont.size_0, ($clinit_CFColor() , DISABLED_GRAY)));
  $syncScaleMargins(this.graph);
  $setInnerBounds(this.graph);
  this.valueScale.formatSubClassSpecific(rnd, numRows, numCols, formatPass);
  $setGraphBounds(this, formatPass);
  this.graphInnerBounds = new CFRect_0(this.graphBounds);
  $setX_0(this.graphInnerBounds, this.graphBounds.x_0 + this.leftMargin);
  $setY_0(this.graphInnerBounds, this.graphBounds.y_0 + this.topMargin);
  $setHeight(this.graphInnerBounds, this.graphBounds.height_0 - this.topMargin - this.bottomMargin);
  $setWidth(this.graphInnerBounds, this.graphBounds.width_0 - this.leftMargin - this.rightMargin);
  this.radius = this.graphInnerBounds.width_0;
  this.graphInnerBounds.height_0 < this.radius && (this.radius = this.graphInnerBounds.height_0);
  this.radius /= 2;
  this.catLabelRadius = this.radius + this.labelMargin;
  $calcLabelPositions(this, rnd);
  valRange = this.valueScale.max_0 - this.valueScale.min_0;
  this.valueScale.setScaleRatioLengthOverride(this.radius, valRange);
}
;
_.freeResources_0 = function freeResources_58(){
  $freeResources_33(this);
  !!this.valueScale && this.valueScale.freeResources_0();
  this.valueScale = null;
  this.catLabelList = null;
  this.catLabelGE = this.valueLabelGE = this.scaleLinesGE = null;
}
;
_.getLength = function getLength_1(){
  return this.radius;
}
;
_.getMinPosition = function getMinPosition_2(){
  return this.valueScale.getMinPosition();
}
;
_.getPositionForValue = function getPositionForValue_3(value_0){
  return $getPositionForValue(this, value_0);
}
;
_.getValueForPosition = function getValueForPosition_0(position){
  return this.valueScale.getPositionForValue(position);
}
;
_.setDimensions = function setDimensions_3(rnd){
  $setWidth(this.bnds, this.leftMargin);
}
;
_.LABEL_WRAP_WIDTH = 0;
_.bottomMargin = 0;
_.catLabelRadius = 0;
_.dimLabels = false;
_.hiddenForNoData = false;
_.leftMargin = 0;
_.maxCatLength = 0;
_.radius = 0;
_.rightMargin = 0;
_.showCategoryLabels = false;
_.showValueLabels = false;
_.topMargin = 0;
var Lcom_domo_charting_scales_RadarScale_2_classLit = createForClass('com.domo.charting.scales', 'RadarScale', 95);
function $clinit_ScaleMarker(){
  $clinit_ScaleMarker = emptyMethod;
  GOAL_LINE_COLOR = new CFColor_2('#EEA78D');
  SM_RANGE_COLOR = new CFColor(195, 195, 195);
  SM_LINE_COLOR = new CFColor(75, 75, 75);
  SM_QUANTILE_LINE_COLOR = new CFColor(126, 126, 126);
}

function $$init_14(this$static){
}

function $addMarkerHoverRegion(this$static, ge, innerBnds, pos, valScale){
  var hoverRect;
  if (!$graphSupportsGoal(valScale.graph))
    return;
  hoverRect = new CFRect_0(innerBnds);
  if (valScale.position == 1 || valScale.position == 3) {
    hoverRect.x_0 = pos - 2;
    hoverRect.width_0 = 4;
  }
   else {
    hoverRect.y_0 = pos - 2;
    hoverRect.height_0 = 4;
  }
  $addShape(ge, new CFShape_1(hoverRect, ($clinit_CFFill() , TRANSPARENT_0), null));
  ge.dataObject = this$static;
}

function $addScaleMarkerScaleIndicator(this$static, ge, innerBnds, pos, valScale){
  var path, pts, shape_0;
  if (!$graphSupportsGoal(valScale.graph))
    return;
  path = null;
  if (valScale.position == 1 || valScale.position == 3) {
    if (valScale.position == 3) {
      pts = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
      pts[0] = new CFPoint(pos - 5, innerBnds.y_0);
      pts[1] = new CFPoint(pos + 5, innerBnds.y_0);
      pts[2] = new CFPoint(pos, innerBnds.y_0 + 5);
      path = new CFPath_13(pts, true);
    }
     else if (valScale.position == 1) {
      pts = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
      pts[0] = new CFPoint(pos - 5, innerBnds.y_0 + innerBnds.height_0);
      pts[1] = new CFPoint(pos + 5, innerBnds.y_0 + innerBnds.height_0);
      pts[2] = new CFPoint(pos, innerBnds.y_0 + innerBnds.height_0 - 5);
      path = new CFPath_13(pts, true);
    }
  }
   else {
    if (valScale.position == 0) {
      pts = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
      pts[0] = new CFPoint(innerBnds.x_0, pos - 5);
      pts[1] = new CFPoint(innerBnds.x_0, pos + 5);
      pts[2] = new CFPoint(innerBnds.x_0 + 5, pos);
      path = new CFPath_13(pts, true);
    }
     else if (valScale.position == 2) {
      pts = initUnidimensionalArray(Lcom_domo_charting_model_CFPoint_2_classLit, $intern_29, 10, 3, 0, 1);
      pts[0] = new CFPoint(innerBnds.x_0 + innerBnds.width_0, pos - 5);
      pts[1] = new CFPoint(innerBnds.x_0 + innerBnds.width_0, pos + 5);
      pts[2] = new CFPoint(innerBnds.x_0 + innerBnds.width_0 - 5, pos);
      path = new CFPath_13(pts, true);
    }
  }
  if (path) {
    shape_0 = new CFShape_0(path, new CFFill(this$static.color_0), null);
    !!shape_0.path && (shape_0.path.shouldAntiAlias = true);
    !ge.shapeAry && (ge.shapeAry = new ArrayList);
    $add_1(ge.shapeAry, shape_0);
  }
}

function $addTopTextToGE(this$static, rnd, scale, ge, left, top_0){
  var dim, displayText, labelText, lowerVal, numberFormatter, textFont, ti, upperVal, valFont, valStr;
  if (!$graphSupportsGoal(scale.graph) || this$static.hideTitle || this$static.type_0 == 2)
    return left;
  textFont = $duplicate_2(scale.labelFont);
  labelText = $getLocalizedString(scale.graph, 'SCALE_MARKER');
  this$static.text_0 != null && (labelText = this$static.text_0);
  ti = new CFTextItem_2(labelText, textFont, round_int(left), round_int(top_0));
  displayText = labelText + '  ';
  !!ge && !!ge.textAry && ge.textAry.array.length > 0 && (displayText = ', ' + displayText);
  dim = rnd.measureText_0(displayText, textFont);
  left += dim.width_0;
  !ge.textAry && (ge.textAry = new ArrayList);
  $add_1(ge.textAry, ti);
  numberFormatter = $getNumberFormatter_0(this$static, scale);
  valStr = $formatNumber_1(numberFormatter, this$static.value_0);
  valFont = $duplicate_2(textFont);
  $setColor_1(valFont, this$static.color_0);
  valFont.face_0 = 1;
  if (this$static.type_0 == 1) {
    upperVal = this$static.highValue;
    lowerVal = this$static.value_0;
    this$static.upperIsMax && this$static.highValueType == 0 && (upperVal = scale.max_0);
    this$static.lowerIsMin && this$static.valueType == 0 && (lowerVal = scale.min_0);
    valStr = $formatNumber_1(numberFormatter, lowerVal) + ' - ' + $formatNumber_1(numberFormatter, upperVal);
    $setColor_1(valFont, this$static.fillColor);
  }
  ti = new CFTextItem_2(valStr, valFont, round_int(left), round_int(top_0));
  dim = rnd.measureText_0(valStr, valFont);
  left += dim.width_0;
  !ge.textAry && (ge.textAry = new ArrayList);
  $add_1(ge.textAry, ti);
  return left;
}

function $draw_8(this$static, valScale, numCategories, incrementAngle){
  var ge;
  if (this$static.type_0 == 0) {
    ge = new GraphicElement;
    $drawOneScaleLine(valScale, ge, numCategories, incrementAngle, this$static.value_0, new CFStroke(new CFColor_2('#ffffff80'), 3));
    $drawOneScaleLine(valScale, ge, numCategories, incrementAngle, this$static.value_0, $getStroke_0(this$static));
    ge.dataObject = this$static;
    $add_1(valScale.frontGeAry, ge);
    this$static.text_0 == null && this$static.isGoal && (this$static.text_0 = $getLocalizedString(valScale.graph, 'GOAL'));
  }
}

function $draw_9(this$static, valScale, innerBnds){
  var alphaOffset, bkgShape, borderStroke, curAlpha, dim, fillColor, geBkg, geText, highPos, hoverGE, hoverRect, i, index_0, lineHeight, lowPos, lowerVal, pos, pos0, quantFont, quantileNames, quantileValue, quantileValue$array, quantileValue$index, quantileValue$max, rangeRect, rangeShape, rect, rnd, scaleMarkerBorderGE, scaleMarkerGe, text_0, ti, totalOffset, upperVal;
  this$static.valScale = valScale;
  if (!$graphSupportsGoal(valScale.graph))
    return;
  rect = new CFRect(innerBnds.x_0, innerBnds.y_0, innerBnds.width_0, innerBnds.height_0);
  if (this$static.type_0 == 0) {
    scaleMarkerGe = new GraphicElement;
    if (!valScale.graph.treatAsSmall) {
      if (valScale.position == 2)
        $setWidth(rect, rect.width_0 - 5);
      else if (valScale.position == 0) {
        $setX_0(rect, rect.x_0 + 5);
        $setWidth(rect, rect.width_0 - 5);
      }
       else if (valScale.position == 3) {
        $setY_0(rect, rect.y_0 + 5);
        $setHeight(rect, rect.height_0 - 5);
      }
       else 
        $setHeight(rect, rect.height_0 - 5);
    }
    $drawOneGridLine(valScale, scaleMarkerGe, rect, this$static.value_0, new CFStroke(new CFColor_2('#ffffff80'), 3));
    $drawOneGridLine(valScale, scaleMarkerGe, rect, this$static.value_0, $getStroke_0(this$static));
    pos = $getAbsolutePositionForValue(valScale, this$static.value_0);
    $addMarkerHoverRegion(this$static, scaleMarkerGe, innerBnds, pos, valScale);
    valScale.graph.treatAsSmall || $addScaleMarkerScaleIndicator(this$static, scaleMarkerGe, innerBnds, pos, valScale);
    $add_1(valScale.frontGeAry, scaleMarkerGe);
    this$static.text_0 == null && this$static.isGoal && (this$static.text_0 = $getLocalizedString(valScale.graph, 'GOAL'));
  }
   else if (this$static.type_0 == 1) {
    scaleMarkerGe = new GraphicElement;
    scaleMarkerBorderGE = new GraphicElement;
    upperVal = this$static.highValue;
    lowerVal = this$static.value_0;
    this$static.upperIsMax && this$static.highValueType == 0 && (upperVal = valScale.max_0);
    this$static.lowerIsMin && this$static.valueType == 0 && (lowerVal = valScale.min_0);
    lowPos = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(lowerVal):valScale.getMinPosition() - valScale.getPositionForValue(lowerVal);
    highPos = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(upperVal):valScale.getMinPosition() - valScale.getPositionForValue(upperVal);
    this$static.upperIsMax && this$static.highValueType == 0 && (highPos = $getAbsolutePositionForValue(valScale, valScale.max_0));
    valScale.position == 3 || valScale.position == 1?(rangeRect = new CFRect(lowPos, innerBnds.y_0, highPos - lowPos, innerBnds.height_0)):(rangeRect = new CFRect(innerBnds.x_0, highPos, innerBnds.width_0, lowPos - highPos));
    fillColor = $duplicate_0(this$static.fillColor);
    this$static.rngFillAlpha != 255 && $setAlpha(fillColor, this$static.rngFillAlpha);
    rangeShape = new CFShape_1(rangeRect, new CFFill(fillColor), null);
    !scaleMarkerGe.shapeAry && (scaleMarkerGe.shapeAry = new ArrayList);
    $add_1(scaleMarkerGe.shapeAry, rangeShape);
    if (this$static.borderColor) {
      borderStroke = new CFStroke(this$static.borderColor, 1);
      $setStyle_0(borderStroke, this$static.borderStrokeStyle);
      pos0 = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(lowerVal):valScale.getMinPosition() - valScale.getPositionForValue(lowerVal);
      valScale.position == 1 || valScale.position == 3?$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(pos0, rect.y_0, pos0, rect.y_0 + rect.height_0), null, borderStroke)):$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(rect.x_0, pos0, rect.x_0 + rect.width_0, pos0), null, borderStroke));
      pos = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(upperVal):valScale.getMinPosition() - valScale.getPositionForValue(upperVal);
      valScale.position == 1 || valScale.position == 3?$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(pos, rect.y_0, pos, rect.y_0 + rect.height_0), null, borderStroke)):$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(rect.x_0, pos, rect.x_0 + rect.width_0, pos), null, borderStroke));
      $add_1(valScale.geAry, scaleMarkerBorderGE);
    }
    $add_0(valScale.backGeAry, 0, scaleMarkerGe);
  }
   else if (this$static.type_0 == 2) {
    this$static.geAryLines = new ArrayList;
    this$static.geAryText = new ArrayList;
    scaleMarkerGe = new GraphicElement;
    scaleMarkerBorderGE = new GraphicElement;
    if (this$static.quantileVals != null && this$static.quantileVals.length > 0) {
      curAlpha = this$static.rngFillAlpha;
      alphaOffset = 0;
      if (this$static.rngFillAlpha != this$static.rngFillAlphaEnd) {
        totalOffset = this$static.rngFillAlphaEnd - this$static.rngFillAlpha;
        alphaOffset = totalOffset;
        this$static.quantileVals.length > 3 && (alphaOffset = totalOffset / (this$static.quantileVals.length - 2) | 0);
      }
      for (i = 0; i < this$static.quantileVals.length - 1; i++) {
        lowPos = $getAbsolutePositionForValue(valScale, this$static.quantileVals[i + 1]);
        highPos = $getAbsolutePositionForValue(valScale, this$static.quantileVals[i]);
        valScale.position == 3 || valScale.position == 1?(rangeRect = new CFRect(lowPos, innerBnds.y_0, highPos - lowPos, innerBnds.height_0)):(rangeRect = new CFRect(innerBnds.x_0, highPos, innerBnds.width_0, lowPos - highPos));
        if (this$static.fillColor) {
          fillColor = $duplicate_0(this$static.fillColor);
          curAlpha != 255 && (fillColor.alpha_0 = curAlpha);
          curAlpha += alphaOffset;
          rangeShape = new CFShape_1(rangeRect, new CFFill(fillColor), null);
          !scaleMarkerGe.shapeAry && (scaleMarkerGe.shapeAry = new ArrayList);
          $add_1(scaleMarkerGe.shapeAry, rangeShape);
        }
      }
    }
    if (this$static.borderColor) {
      rnd = valScale.graph.rnd;
      borderStroke = new CFStroke(this$static.borderColor, 1);
      $setStyle_0(borderStroke, this$static.borderStrokeStyle);
      quantFont = new CFFont_0(null, 11, $getTextColor(valScale.graph.chart.palette));
      isNaN_0(quantFont.capHeight) && (quantFont.capHeight = (isNaN_0(quantFont.lineHeight) && (quantFont.lineHeight = rnd.measureText_0('A', quantFont).height_0) , quantFont.lineHeight * 0.66));
      lineHeight = (isNaN_0(quantFont.lineHeight) && (quantFont.lineHeight = rnd.measureText_0('A', quantFont).height_0) , quantFont.lineHeight);
      if (this$static.quantileVals != null && this$static.quantileVals.length > 0) {
        index_0 = 0;
        quantileNames = $getQuantileNames(this$static);
        for (quantileValue$array = this$static.quantileVals , quantileValue$index = 0 , quantileValue$max = quantileValue$array.length; quantileValue$index < quantileValue$max; ++quantileValue$index) {
          quantileValue = quantileValue$array[quantileValue$index];
          pos0 = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(quantileValue):valScale.getMinPosition() - valScale.getPositionForValue(quantileValue);
          valScale.position == 1 || valScale.position == 3?$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(pos0, rect.y_0, pos0, rect.y_0 + rect.height_0), null, borderStroke)):$addShape(scaleMarkerBorderGE, new CFShape_0(new CFPath_1(rect.x_0, pos0, rect.x_0 + rect.width_0, pos0), null, borderStroke));
          $add_1(this$static.geAryLines, scaleMarkerBorderGE);
          pos = valScale.position == 1 || valScale.position == 3?valScale.getMinPosition() + valScale.getPositionForValue(quantileValue):valScale.getMinPosition() - valScale.getPositionForValue(quantileValue);
          if (valScale.graph.isHorizontal) {
            hoverRect = new CFShape_1(new CFRect(pos - 3, rect.y_0, 6, rect.height_0), ($clinit_CFFill() , TRANSPARENT_0), null);
            hoverGE = new GraphicElement;
            $addShape_0(hoverGE, hoverRect, this$static);
            $add_1(valScale.geAry, hoverGE);
          }
           else {
            hoverRect = new CFShape_1(new CFRect(rect.x_0, pos - 3, rect.width_0, 6), ($clinit_CFFill() , TRANSPARENT_0), null);
            hoverGE = new GraphicElement;
            $addShape_0(hoverGE, hoverRect, this$static);
            $add_1(valScale.geAry, hoverGE);
          }
          if (quantileNames[index_0] != null && !valScale.graph.treatAsSmall) {
            text_0 = quantileNames[index_0];
            dim = rnd.measureText_0(text_0, quantFont);
            if (valScale.graph.isHorizontal) {
              bkgShape = new CFShape_1(new CFRect(pos + 1, rect.y_0, dim.height_0, dim.width_0 + 4), new CFFill_1('#FFFFFF80'), null);
              geBkg = new GraphicElement;
              $addShape_0(geBkg, bkgShape, this$static);
              ti = new CFTextItem_1(quantileNames[index_0], quantFont, round_int(pos + dim.height_0 / 2), round_int(rect.y_0) + 2, 90);
              geText = new GraphicElement_2(ti);
            }
             else {
              bkgShape = new CFShape_1(new CFRect(rect.x_0, pos - (dim.height_0 + 1), dim.width_0 + 4, dim.height_0), new CFFill_1('#FFFFFF80'), null);
              geBkg = new GraphicElement_0(bkgShape);
              geText = ($clinit_StrUtil() , $clinit_StrUtil() , drawTextInBounds(valScale.graph.rnd, new CFRect(rect.x_0 + 2, pos - dim.height_0, dim.width_0 + 1, lineHeight), quantileNames[index_0], quantFont, 0, VALIGN_MIDDLE, 5, null, null));
            }
            this$static.showQuantileLabels || (geBkg.hidden = true);
            $add_1(valScale.frontGeAry, geBkg);
            $add_1(this$static.geAryText, geBkg);
            this$static.showQuantileLabels || (geText.hidden = true);
            $add_1(valScale.frontGeAry, geText);
            $add_1(this$static.geAryText, geText);
          }
          ++index_0;
        }
      }
      $add_1(valScale.geAry, scaleMarkerBorderGE);
    }
    $add_0(valScale.backGeAry, 0, scaleMarkerGe);
  }
}

function $getDataValueList(graph){
  var col, row, values;
  values = new ArrayList;
  if (graph.typeAttributes.isStacked) {
    row = $getFirstVisibleRow(graph.data_0);
    while (row) {
      $add_1(values, (isNaN_0(row.sum) && (row.sum = $calcSum(row, false, true, false)) , row.sum));
      row = $getNextVisibleRow(graph.data_0, row);
    }
  }
   else {
    col = $getFirstVisibleCol(graph.data_0);
    while (col) {
      graph.graphType == 12?$addAll(values, $getYValues(col, true, false)):$addAll(values, $getValuesNonProjected(col, true, false));
      col = $getNextVisibleCol(graph.data_0, col);
    }
  }
  return values;
}

function $getHighValue(this$static, graph){
  if (this$static.type_0 == 2) {
    this$static.quantileVals = $getQuantileValues(this$static, graph);
    this$static.quantileVals != null && (this$static.highValue = this$static.quantileVals[this$static.quantileVals.length - 1]);
  }
   else {
    this$static.highValue = $getValueOrDynamic(this$static, graph, this$static.highValueType, this$static.highValue, this$static.highCalcVal, this$static.highPercentageOf);
  }
  return this$static.highValue;
}

function $getLegendItem(this$static, graph){
  var goalLegendItem, label_0, lineColor, quantLegendItem, rngColor;
  if (!$graphSupportsGoal(graph))
    return null;
  if (!this$static.hideInLegend) {
    label_0 = this$static.text_0;
    label_0 == null && (this$static.isGoal?(label_0 = graph.getLocalizedString('GOAL')):(label_0 = graph.getLocalizedString('SCALE_MARKER')));
    if (this$static.type_0 == 0) {
      lineColor = GOAL_LINE_COLOR;
      this$static.isGoal || (!this$static.color_0?(lineColor = SM_LINE_COLOR):(lineColor = this$static.color_0));
      goalLegendItem = new LegendItemInfo_1($getLegend(graph), label_0, null, new CFStroke(lineColor, this$static.lineWidth_0));
      goalLegendItem.type_0 = 7;
      return goalLegendItem;
    }
     else if (this$static.type_0 == 1) {
      rngColor = SM_RANGE_COLOR;
      !!this$static.fillColor && (rngColor = $duplicate_0(this$static.fillColor));
      this$static.rngFillAlpha != 255 && $setAlpha(rngColor, this$static.rngFillAlpha);
      goalLegendItem = new LegendItemInfo_1($getLegend(graph), label_0, new CFFill(rngColor), null);
      goalLegendItem.type_0 = 8;
      return goalLegendItem;
    }
     else {
      lineColor = SM_QUANTILE_LINE_COLOR;
      !!this$static.borderColor && (lineColor = $duplicate_0(this$static.borderColor));
      quantLegendItem = new LegendItemInfo_1($getLegend(graph), label_0, null, new CFStroke(lineColor, this$static.lineWidth_0));
      quantLegendItem.type_0 = 7;
      return quantLegendItem;
    }
  }
  return null;
}

function $getNumberFormatter_0(this$static, scale){
  var numberFormatter;
  numberFormatter = new NumberFormatter_0(scale.numberFormatter);
  numberFormatter.useThousandSeparator = true;
  numberFormatter.needsNewNumFormat = true;
  if (!this$static.isGoal) {
    this$static.valueAbbreviation == 1 && (numberFormatter.autoAbbreviate = false , numberFormatter.needsNewNumFormat = true);
    this$static.valueAbbreviation == 2 && (numberFormatter.autoAbbreviate3digit = true , numberFormatter.needsNewNumFormat = true);
    this$static.decimalPlacesStr != null && $applyDecimalPlaces(numberFormatter, this$static.decimalPlacesStr);
  }
  return numberFormatter;
}

function $getOutlierFillColor(this$static){
  var fillColor;
  if (this$static.outlierFillColor) {
    fillColor = $duplicate_0(this$static.outlierFillColor);
    this$static.outlierRngFillAlpha != 255 && $setAlpha(fillColor, this$static.outlierRngFillAlpha);
    return fillColor;
  }
  return null;
}

function $getQuantileNames(this$static){
  var names;
  names = null;
  if (this$static.numQuantiles == 3) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 4, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_3_2');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_3_1');
    names[2] = null;
  }
   else if (this$static.numQuantiles == 4) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 4, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_4_3');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_4_2');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_4_1');
    names[3] = null;
  }
   else if (this$static.numQuantiles == 5) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 5, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_5_4');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_5_3');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_5_2');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_5_1');
    names[4] = null;
  }
   else if (this$static.numQuantiles == 6) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 6, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_6_5');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_6_4');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_6_3');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_6_2');
    names[4] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_6_1');
    names[5] = null;
  }
   else if (this$static.numQuantiles == 7) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 7, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_6');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_5');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_4');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_3');
    names[4] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_2');
    names[5] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_7_1');
    names[6] = null;
  }
   else if (this$static.numQuantiles == 8) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 8, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_7');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_6');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_5');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_4');
    names[4] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_3');
    names[5] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_2');
    names[6] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_8_1');
    names[7] = null;
  }
   else if (this$static.numQuantiles == 9) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 9, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_8');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_7');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_6');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_5');
    names[4] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_4');
    names[5] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_3');
    names[6] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_2');
    names[7] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_9_1');
    names[8] = null;
  }
   else if (this$static.numQuantiles == 10) {
    names = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 10, 6, 1);
    names[0] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_9');
    names[1] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_8');
    names[2] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_7');
    names[3] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_6');
    names[4] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_5');
    names[5] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_4');
    names[6] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_3');
    names[7] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_2');
    names[8] = $getLocalizedString(this$static.valScale.graph, 'QUANTILES_10_1');
    names[9] = null;
  }
  return names;
}

function $getQuantileValues(this$static, graph){
  var values;
  if (!!graph && !!graph.data_0) {
    values = $getDataValueList(graph);
    if (values.array.length > 0)
      return getQuantileValuesForValues(this$static.numQuantiles, values);
  }
  return null;
}

function $getStroke_0(this$static){
  var stroke;
  stroke = new CFStroke(this$static.color_0, this$static.lineWidth_0);
  $setStyle_0(stroke, this$static.lineStyle);
  return stroke;
}

function $getValue_1(this$static, graph){
  if (this$static.type_0 == 2) {
    this$static.quantileVals = $getQuantileValues(this$static, graph);
    this$static.quantileVals != null && (this$static.value_0 = this$static.quantileVals[this$static.quantileVals.length - 1]);
  }
   else {
    this$static.value_0 = $getValueOrDynamic(this$static, graph, this$static.valueType, this$static.value_0, this$static.calcVal, this$static.percentageOf);
  }
  return this$static.value_0;
}

function $getValueOrDynamic(this$static, graph, valueType, value_0, calcVal, percentageOf){
  var numberFormatter, pctOfStr, stdVal, tmpValue, values;
  numberFormatter = new NumberFormatter_1(graph.chart.locale);
  numberFormatter.decimalPlaces = 1;
  numberFormatter.needsNewNumFormat = true;
  this$static.text_0 == null && this$static.type_0 == 1 && (this$static.text_0 = graph.getLocalizedString('SCALE_MARKER'));
  if (valueType != 0 && !!graph && !!graph.data_0) {
    values = $getDataValueList(graph);
    if (valueType == 3) {
      value_0 = getAvgValueForValues(values);
      this$static.text_0 == null && (this$static.text_0 = graph.getLocalizedString('AVERAGE'));
    }
     else if (valueType == 1) {
      value_0 = getMinValueForValues(values);
      this$static.text_0 == null && (this$static.text_0 = graph.getLocalizedString('MINIMUM'));
    }
     else if (valueType == 2) {
      value_0 = getMaxValueForValues(values);
      this$static.text_0 == null && (this$static.text_0 = graph.getLocalizedString('MAXIMUM'));
    }
     else if (valueType == 4) {
      value_0 = getMedianValueForValues(values);
      this$static.text_0 == null && (this$static.text_0 = graph.getLocalizedString('MEDIAN'));
    }
     else if (valueType == 5) {
      value_0 = getStdDeviationsForValues(calcVal, values);
      if (this$static.text_0 == null) {
        stdVal = $formatNumber_1(numberFormatter, calcVal);
        stdVal != null && $equals_2(stdVal, '1')?(this$static.text_0 = stdVal + ' ' + graph.getLocalizedString('STANDARD_DEVIATION')):(this$static.text_0 = stdVal + ' ' + graph.getLocalizedString('STANDARD_DEVIATIONS'));
      }
    }
     else if (valueType == 7) {
      value_0 = getPercentileValueForValues(calcVal / 100, values);
      this$static.text_0 == null && (this$static.text_0 = $formatNumber_1(numberFormatter, calcVal) + ' ' + graph.getLocalizedString('PERCENTILE'));
    }
     else if (valueType == 6) {
      pctOfStr = graph.getLocalizedString('MAXIMUM');
      if (percentageOf == 2) {
        tmpValue = getAvgValueForValues(values);
        pctOfStr = graph.getLocalizedString('AVERAGE');
      }
       else if (percentageOf == 3) {
        tmpValue = getMedianValueForValues(values);
        pctOfStr = graph.getLocalizedString('MEDIAN');
      }
       else if (percentageOf == 1) {
        tmpValue = getMinValueForValues(values);
        pctOfStr = graph.getLocalizedString('MINIMUM');
      }
       else 
        tmpValue = getMaxValueForValues(values);
      value_0 = tmpValue * (calcVal / 100);
      this$static.text_0 == null && (this$static.text_0 = $formatNumber_1(numberFormatter, calcVal) + ('' + graph.getLocalizedString('PCT_OF')) + ' ' + pctOfStr);
    }
  }
  return value_0;
}

function $graphSupportsGoal(graph){
  var graphType, retValue, ta, version;
  retValue = false;
  if (graph) {
    retValue = true;
    version = graph.chart.version_0;
    ta = graph.typeAttributes;
    graphType = graph.graphType;
    version < 6 && (ta.isBullet || graphType == 11 || ta.percentOfCategoryData || ta.percentOfSeriesData || graphType == 12) && (retValue = false);
    (graphType == 10 || graphType == 26) && (retValue = false);
  }
  return retValue;
}

function $setToHoverState(this$static, hover){
  var ge, ge$iterator, ge$iterator0, ge$iterator1, ge$iterator2;
  if (!!this$static.geAryLines && !!this$static.geAryText && this$static.type_0 == 2) {
    if (hover) {
      for (ge$iterator0 = new ArrayList$1(this$static.geAryLines); ge$iterator0.i < ge$iterator0.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator0), 12);
        $remove_3(this$static.valScale.geAry, ge);
      }
      for (ge$iterator1 = new ArrayList$1(this$static.geAryText); ge$iterator1.i < ge$iterator1.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator1), 12);
        $remove_3(this$static.valScale.frontGeAry, ge);
      }
      for (ge$iterator2 = new ArrayList$1(this$static.geAryLines); ge$iterator2.i < ge$iterator2.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator2), 12);
        $add_1(this$static.valScale.frontGeAry, ge);
      }
      for (ge$iterator = new ArrayList$1(this$static.geAryText); ge$iterator.i < ge$iterator.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator), 12);
        this$static.showQuantileLabels || (ge.hidden = false);
        $add_1(this$static.valScale.frontGeAry, ge);
      }
    }
     else {
      for (ge$iterator0 = new ArrayList$1(this$static.geAryLines); ge$iterator0.i < ge$iterator0.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator0), 12);
        $remove_3(this$static.valScale.frontGeAry, ge);
      }
      for (ge$iterator1 = new ArrayList$1(this$static.geAryText); ge$iterator1.i < ge$iterator1.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator1), 12);
        $remove_3(this$static.valScale.frontGeAry, ge);
      }
      for (ge$iterator2 = new ArrayList$1(this$static.geAryLines); ge$iterator2.i < ge$iterator2.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator2), 12);
        $add_1(this$static.valScale.geAry, ge);
      }
      for (ge$iterator = new ArrayList$1(this$static.geAryText); ge$iterator.i < ge$iterator.this$01.array.length;) {
        ge = castTo($next_3(ge$iterator), 12);
        this$static.showQuantileLabels || (ge.hidden = true);
        $add_1(this$static.valScale.frontGeAry, ge);
      }
    }
  }
}

function ScaleMarker(lowValue, highValue, color_0, text_0){
  $clinit_ScaleMarker();
  $$init_14(this);
  this.value_0 = lowValue;
  this.highValue = highValue;
  this.fillColor = color_0;
  this.text_0 = text_0;
  this.type_0 = 1;
}

function ScaleMarker_0(value_0, color_0, text_0){
  $clinit_ScaleMarker();
  this.value_0 = value_0;
  this.color_0 = color_0;
  this.text_0 = text_0;
  !color_0 && (this.color_0 = GOAL_LINE_COLOR);
}

function ScaleMarker_1(color_0, text_0){
  $$init_14(this);
  this.fillColor = color_0;
  this.text_0 = text_0;
  this.type_0 = 2;
}

function getPercentageOfValueTypeForString(valTypeStr){
  valTypeStr = valTypeStr.toLowerCase();
  if ($equalsIgnoreCase(valTypeStr, 'average'))
    return 2;
  else if ($equalsIgnoreCase(valTypeStr, 'minimum'))
    return 1;
  else if ($equalsIgnoreCase(valTypeStr, 'median'))
    return 3;
  return 0;
}

function getScaleMarkerType(typeStr){
  if (typeStr != null && $equalsIgnoreCase(typeStr, 'range'))
    return 1;
  else if (typeStr != null && $equalsIgnoreCase(typeStr, 'quantiles'))
    return 2;
  return 0;
}

function getValueTypeForString(valTypeStr){
  valTypeStr = valTypeStr.toLowerCase();
  if ($equalsIgnoreCase(valTypeStr, 'average'))
    return 3;
  else if ($equalsIgnoreCase(valTypeStr, 'minimum'))
    return 1;
  else if ($equalsIgnoreCase(valTypeStr, 'maximum'))
    return 2;
  else if ($equalsIgnoreCase(valTypeStr, 'median'))
    return 4;
  else if ($equals_2(valTypeStr.substr(0, 10), 'percentage'))
    return 6;
  else if ($equals_2(valTypeStr.substr(0, 10), 'percentile'))
    return 7;
  else if ($equals_2(valTypeStr.substr(0, 3), 'sta'))
    return 5;
  return 0;
}

function processScaleMarkers(compDef){
  $clinit_ScaleMarker();
  var abbrevStr, bkgFillAlpha, bkgFillAlphaEnd, borderColor, borderStrokeStyle, borderStyle, calculationVal, color_0, decimalPlacesStr, hideInLegend, hideTitle, highCalculationVal, highPercentOf, highValType, lineStyle, lineThickness, lowerIsMin, lowerStr, lowerVal, numQuantiles, onSecondary, outlierFillAlpha, outlierFillColor, percentOf, scalePos, showQuantileLabels, sm, style, text_0, type_0, upperIsMax, upperStr, upperVal, valAbbreviation, valType, value_0, widthStr;
  if (!!compDef.overrides && compDef.overrides.containsKey('sm_type') && !$equalsIgnoreCase(getObjectFromMapAsString(compDef.overrides, 'sm_type'), 'default')) {
    type_0 = 0;
    valType = 0;
    compDef.overrides.containsKey('sm_type') && (type_0 = getScaleMarkerType(getObjectFromMapAsString(compDef.overrides, 'sm_type')));
    compDef.overrides.containsKey('sm_val_type') && (valType = getValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_val_type')));
    calculationVal = 0;
    percentOf = 0;
    if (valType == 5) {
      calculationVal = 1;
      compDef.overrides.containsKey('sm_std_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_std_val'), 1));
    }
     else if (valType == 6) {
      calculationVal = 90;
      compDef.overrides.containsKey('sm_percentage_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_percentage_val'), 90));
      compDef.overrides.containsKey('sm_percentage_of') && (percentOf = getPercentageOfValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_percentage_of')));
    }
     else if (valType == 7) {
      calculationVal = 90;
      compDef.overrides.containsKey('sm_percentile_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_percentile_val'), 90));
    }
    upperIsMax = false;
    lowerIsMin = false;
    upperVal = NaN;
    lowerVal = NaN;
    valAbbreviation = 0;
    decimalPlacesStr = null;
    onSecondary = isTrue(getObjectFromMapAsString(compDef.overrides, 'sm_on_secondary'));
    hideInLegend = isTrue(getObjectFromMapAsString(compDef.overrides, 'sm_hide_in_legend'));
    hideTitle = isTrue(getObjectFromMapAsString(compDef.overrides, 'sm_hide_title'));
    if (compDef.overrides.containsKey('sm_abbreviation')) {
      abbrevStr = getObjectFromMapAsString(compDef.overrides, 'sm_abbreviation');
      abbrevStr != null && ($equalsIgnoreCase(abbrevStr, 'none')?(valAbbreviation = 1):$equals_2(abbrevStr.substr(0, 1), '3') && (valAbbreviation = 2));
    }
    if (compDef.overrides.containsKey('sm_scale_pos')) {
      scalePos = getObjectFromMapAsString(compDef.overrides, 'sm_scale_pos');
      (scalePos != null && $equalsIgnoreCase(scalePos, 'right') || $equalsIgnoreCase(scalePos, 'bottom')) && (onSecondary = true);
    }
    compDef.overrides.containsKey('sm_decimal_places') && (decimalPlacesStr = getObjectFromMapAsString(compDef.overrides, 'sm_decimal_places'));
    lineThickness = 2;
    lineStyle = 0;
    text_0 = getObjectFromMapAsString(compDef.overrides, 'sm_text');
    if (type_0 == 0 && (compDef.overrides.containsKey('sm_value') || valType != 0)) {
      value_0 = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_value'), NaN);
      if (compDef.overrides.containsKey('sm_line_width')) {
        widthStr = getObjectFromMapAsString(compDef.overrides, 'sm_line_width');
        widthStr != null && ($equalsIgnoreCase(widthStr, 'Thick')?(lineThickness = 4):$equalsIgnoreCase(widthStr, 'Thin') && (lineThickness = 1));
      }
      if (compDef.overrides.containsKey('sm_line_style')) {
        style = getObjectFromMapAsString(compDef.overrides, 'sm_line_style');
        style != null && $equals_2(style.toLowerCase(), 'dashed') && (lineStyle = 1);
      }
      color_0 = SM_LINE_COLOR;
      compDef.overrides.containsKey('sm_line_color') && (color_0 = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_line_color')));
      sm = new ScaleMarker_0(value_0, color_0, text_0);
      sm.valueType = valType;
      sm.calcVal = calculationVal;
      sm.percentageOf = percentOf;
      sm.lineStyle = lineStyle;
      sm.lineWidth_0 = lineThickness;
      sm.valueAbbreviation = valAbbreviation;
      sm.hideInLegend = hideInLegend;
      sm.hideTitle = hideTitle;
      sm.onSecondaryScale = onSecondary;
      sm.decimalPlacesStr = decimalPlacesStr;
      sm.lowerIsMin = false;
      sm.upperIsMax = false;
      hideTitle || (sm.goalDisplay = 2);
      $addScaleMarker(compDef, sm);
    }
     else if (type_0 == 1) {
      highValType = 0;
      compDef.overrides.containsKey('sm_upper_val_type') && (highValType = getValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_upper_val_type')));
      highCalculationVal = 0;
      highPercentOf = 0;
      if (highValType == 5) {
        highCalculationVal = 1;
        compDef.overrides.containsKey('sm_upper_std_val') && (highCalculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_upper_std_val'), 1));
      }
       else if (highValType == 6) {
        highCalculationVal = 90;
        compDef.overrides.containsKey('sm_upper_percentage_val') && (highCalculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_upper_percentage_val'), 90));
        compDef.overrides.containsKey('sm_upper_percentage_of') && (highPercentOf = getPercentageOfValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_upper_percentage_of')));
      }
       else if (highValType == 7) {
        highCalculationVal = 90;
        compDef.overrides.containsKey('sm_upper_percentile_val') && (highCalculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_upper_percentile_val'), 90));
      }
      if (compDef.overrides.containsKey('sm_upper_val')) {
        upperStr = getObjectFromMapAsString(compDef.overrides, 'sm_upper_val');
        upperStr != null && $equalsIgnoreCase(upperStr, 'max')?(upperIsMax = true):(upperVal = getDouble_0(upperStr, NaN));
      }
      valType = 0;
      compDef.overrides.containsKey('sm_lower_val_type') && (valType = getValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_lower_val_type')));
      calculationVal = 0;
      percentOf = 0;
      if (valType == 5) {
        calculationVal = 1;
        compDef.overrides.containsKey('sm_lower_std_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_lower_std_val'), 1));
      }
       else if (valType == 6) {
        calculationVal = 90;
        compDef.overrides.containsKey('sm_lower_percentage_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_lower_percentage_val'), 90));
        compDef.overrides.containsKey('sm_lower_percentage_of') && (percentOf = getPercentageOfValueTypeForString(getObjectFromMapAsString(compDef.overrides, 'sm_lower_percentage_of')));
      }
       else if (valType == 7) {
        calculationVal = 90;
        compDef.overrides.containsKey('sm_lower_percentile_val') && (calculationVal = getDouble_0(getObjectFromMapAsString(compDef.overrides, 'sm_lower_percentile_val'), 90));
      }
      if (compDef.overrides.containsKey('sm_lower_val')) {
        lowerStr = getObjectFromMapAsString(compDef.overrides, 'sm_lower_val');
        lowerStr != null && $equalsIgnoreCase(lowerStr, 'min')?(lowerIsMin = true):(lowerVal = getDouble_0(lowerStr, NaN));
      }
      borderColor = null;
      outlierFillColor = null;
      bkgFillAlpha = 255;
      outlierFillAlpha = 255;
      borderStrokeStyle = 0;
      color_0 = SM_RANGE_COLOR;
      compDef.overrides.containsKey('sm_fill_outliers') && (outlierFillColor = new CFColor_2('#FDDDDD'));
      compDef.overrides.containsKey('sm_fill_color') && (color_0 = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_fill_color')));
      compDef.overrides.containsKey('sm_fill_trans_pct') && (bkgFillAlpha = getFillTransparencyPct(getObjectFromMapAsString(compDef.overrides, 'sm_fill_trans_pct')));
      compDef.overrides.containsKey('sm_border_line_color') && (borderColor = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_border_line_color')));
      compDef.overrides.containsKey('sm_outlier_fill_color') && (outlierFillColor = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_outlier_fill_color')));
      compDef.overrides.containsKey('sm_outlier_fill_trans_pct') && (outlierFillAlpha = getFillTransparencyPct(getObjectFromMapAsString(compDef.overrides, 'sm_outlier_fill_trans_pct')));
      if (compDef.overrides.containsKey('sm_border_style')) {
        borderStyle = getObjectFromMapAsString(compDef.overrides, 'sm_border_style');
        borderStyle != null && $equals_2(borderStyle.toLowerCase(), 'dashed') && (borderStrokeStyle = 1);
      }
      sm = new ScaleMarker(lowerVal, upperVal, color_0, text_0);
      sm.hideInLegend = hideInLegend;
      sm.hideTitle = hideTitle;
      sm.onSecondaryScale = onSecondary;
      sm.rngFillAlpha = bkgFillAlpha;
      sm.borderColor = borderColor;
      sm.borderStrokeStyle = borderStrokeStyle;
      sm.outlierFillColor = outlierFillColor;
      sm.outlierRngFillAlpha = outlierFillAlpha;
      sm.valueAbbreviation = valAbbreviation;
      sm.decimalPlacesStr = decimalPlacesStr;
      sm.lowerIsMin = lowerIsMin;
      sm.upperIsMax = upperIsMax;
      sm.highCalcVal = highCalculationVal;
      sm.highPercentageOf = highPercentOf;
      sm.highValueType = highValType;
      sm.valueType = valType;
      sm.calcVal = calculationVal;
      sm.percentageOf = percentOf;
      hideTitle || (sm.goalDisplay = 2);
      $addScaleMarker(compDef, sm);
    }
     else if (type_0 == 2) {
      numQuantiles = 4;
      borderColor = SM_QUANTILE_LINE_COLOR;
      bkgFillAlpha = 25;
      bkgFillAlphaEnd = 76;
      borderStrokeStyle = 0;
      color_0 = null;
      compDef.overrides.containsKey('sm_num_quantiles') && (numQuantiles = getInt(getObjectFromMapAsString(compDef.overrides, 'sm_num_quantiles'), 4));
      compDef.overrides.containsKey('sm_quant_fill_color') && (color_0 = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_quant_fill_color')));
      compDef.overrides.containsKey('sm_quant_fill_trans_pct') && (bkgFillAlpha = getFillTransparencyPct(getObjectFromMapAsString(compDef.overrides, 'sm_quant_fill_trans_pct')));
      compDef.overrides.containsKey('sm_quant_fill_trans_pct_end') && (bkgFillAlphaEnd = getFillTransparencyPct(getObjectFromMapAsString(compDef.overrides, 'sm_quant_fill_trans_pct_end')));
      compDef.overrides.containsKey('sm_quant_border_line_color') && (borderColor = new CFColor_2(getObjectFromMapAsString(compDef.overrides, 'sm_quant_border_line_color')));
      if (compDef.overrides.containsKey('sm_quant_border_style')) {
        borderStyle = getObjectFromMapAsString(compDef.overrides, 'sm_quant_border_style');
        borderStyle != null && $equals_2(borderStyle.toLowerCase(), 'dashed') && (borderStrokeStyle = 1);
      }
      showQuantileLabels = false;
      compDef.overrides.containsKey('sm_quant_show_labels') && (showQuantileLabels = isTrue(getObjectFromMapAsString(compDef.overrides, 'sm_quant_show_labels')));
      sm = new ScaleMarker_1(color_0, text_0);
      sm.hideInLegend = hideInLegend;
      sm.hideTitle = hideTitle;
      sm.onSecondaryScale = onSecondary;
      sm.numQuantiles = numQuantiles;
      sm.rngFillAlpha = bkgFillAlpha;
      sm.rngFillAlphaEnd = bkgFillAlphaEnd;
      sm.borderColor = borderColor;
      sm.borderStrokeStyle = borderStrokeStyle;
      sm.valueAbbreviation = valAbbreviation;
      sm.decimalPlacesStr = decimalPlacesStr;
      sm.showQuantileLabels = showQuantileLabels;
      hideTitle || (sm.goalDisplay = 2);
      $addScaleMarker(compDef, sm);
    }
  }
}

defineClass(86, 1, {86:1}, ScaleMarker, ScaleMarker_0, ScaleMarker_1);
_.borderStrokeStyle = 0;
_.calcVal = 0;
_.goalDisplay = 0;
_.hideInLegend = false;
_.hideTitle = false;
_.highCalcVal = 0;
_.highPercentageOf = 0;
_.highValue = 0;
_.highValueType = 0;
_.isGoal = false;
_.lineStyle = 0;
_.lineWidth_0 = 1;
_.lowerIsMin = false;
_.numQuantiles = 0;
_.onSecondaryScale = false;
_.outlierRngFillAlpha = 255;
_.percentageOf = 0;
_.rngFillAlpha = 255;
_.rngFillAlphaEnd = 255;
_.showQuantileLabels = false;
_.type_0 = 0;
_.upperIsMax = false;
_.value_0 = 0;
_.valueAbbreviation = 0;
_.valueType = 0;
var GOAL_LINE_COLOR, SM_LINE_COLOR, SM_QUANTILE_LINE_COLOR, SM_RANGE_COLOR;
var Lcom_domo_charting_scales_ScaleMarker_2_classLit = createForClass('com.domo.charting.scales', 'ScaleMarker', 86);
function $clinit_TimeScale(){
  $clinit_TimeScale = emptyMethod;
  $clinit_ValueScale();
  months1 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 3, 6, 9]);
  months2 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 6]);
  months = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 2), $intern_17, 88, 0, [months1, months2]);
  days1 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]);
  days_for_feb = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]);
  days2 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [1, 5, 10, 15, 20, 25]);
  days4 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [1, 15]);
  days = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 2), $intern_17, 88, 0, [days1, days2, days4]);
  daysfeb = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 2), $intern_17, 88, 0, [days_for_feb, days2, days4]);
  hours1 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]);
  hours2 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 4, 8, 12, 16, 20]);
  hours3 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 6, 12, 18]);
  hours4 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 12]);
  hours_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 2), $intern_17, 88, 0, [hours1, hours2, hours3, hours4]);
  minutes1 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]);
  minutes2 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]);
  minutes3 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 10, 20, 30, 40, 50]);
  minutes4 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 15, 30, 45]);
  minutes5 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [0, 30]);
  minutes_0 = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 2), $intern_17, 88, 0, [minutes1, minutes2, minutes3, minutes4, minutes5]);
}

function $addFirstMinor(this$static, rnd, currentTicks){
  var firstMinor, label_0, pos;
  this$static.nextMinorIndex = 0;
  this$static.firstMajorIsOnMajorBoundary = false;
  firstMinor = $getCurrentMinor(this$static, currentTicks);
  if (compare_22(firstMinor, 0) != 0 && gte_0(firstMinor, this$static.adjustedMinTime)) {
    this$static.minorDivisionsArray[this$static.nextMinorIndex] = firstMinor;
    pos = toDouble_0(sub_1(firstMinor, this$static.adjustedMinTime)) * this$static.ratio + $getMinPosition_1(this$static);
    label_0 = $getLabelForMinorUnit(this$static, firstMinor);
    $addMinorLabelInfoToArrays(this$static, rnd, pos, label_0);
    (this$static.position == 0 || this$static.position == 2) && $addMinorLabelInfoToArrays(this$static, rnd, pos, '');
    $addMajorLabelAndInfo(this$static, rnd, firstMinor);
    $isThisMinorAMajor(this$static, currentTicks) && (this$static.firstMajorIsOnMajorBoundary = true);
    ++this$static.nextMajorIndex;
    ++this$static.nextMinorIndex;
  }
}

function $addMajorLabelAndInfo(this$static, rnd, ticks){
  var label_0;
  this$static.isMajorDivison[this$static.nextMinorIndex] = true;
  label_0 = $getLabelForMajorUnit(this$static, ticks, true);
  $addMajorLabelInfoToArrays(this$static, rnd, this$static.minorLabelRectArray[this$static.nextMinorIndex], label_0);
}

function $addMajorLabelInfoToArrays(this$static, rnd, minorRect, text_0){
  var labelDimension, rect, textItem, textWidth, textHeight, rect_0;
  if (this$static.nextMajorIndex >= this$static.majorLabelRectArray.length)
    return;
  labelDimension = rnd.measureText_0(text_0, this$static.labelFont);
  rect = (textWidth = labelDimension.width_0 , textHeight = labelDimension.height_0 , this$static.position == 1?(rect_0 = new CFRect(minorRect.x_0, this$static.bnds.y_0 + this$static.labelMargin + textHeight, textWidth + this$static.labelMargin, textHeight)):this$static.position == 3?(rect_0 = new CFRect(minorRect.x_0, this$static.bnds.y_0, textWidth + this$static.labelMargin, textHeight)):this$static.position == 0?(rect_0 = new CFRect($getRight(this$static.bnds) - textWidth - this$static.labelMargin, minorRect.y_0 - textHeight / 2, textWidth, textHeight)):(rect_0 = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, minorRect.y_0 - textHeight / 2, textWidth, textHeight)) , rect_0);
  this$static.majorLabelRectArray[this$static.nextMajorIndex] = rect;
  textItem = $getTextItemForPositionAndRect(this$static, rnd, text_0, rect);
  this$static.majorLabelArray[this$static.nextMajorIndex] = textItem;
}

function $addMinorLabelInfoToArrays(this$static, rnd, pos, text_0){
  var labelDimension, rect, textItem, textWidth, textHeight, halfTextHeight, rect_0, textWidth_0, textHeight_0, halfTextHeight_0, rect_1;
  if (this$static.nextMinorIndex >= this$static.minorLabelRectArray.length)
    return;
  labelDimension = rnd.measureText_0(text_0, this$static.labelFont);
  this$static.firstAndLastLabelOnly?this$static.nextMinorIndex == 0?(rect = (textWidth = labelDimension.width_0 , textHeight = labelDimension.height_0 , halfTextHeight = textHeight / 2 , this$static.position == 1?(rect_0 = new CFRect(pos, this$static.bnds.y_0 + this$static.labelMargin, textWidth + this$static.labelMargin, textHeight)):this$static.position == 3?(rect_0 = new CFRect(pos, $getBottom(this$static.bnds) - (textHeight + this$static.labelMargin), textWidth + this$static.labelMargin, textHeight)):this$static.position == 0?(rect_0 = new CFRect($getRight(this$static.bnds) - textWidth - this$static.labelMargin, pos - halfTextHeight, textWidth, textHeight)):(rect_0 = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, pos - halfTextHeight, textWidth, textHeight)) , rect_0)):(rect = (textWidth_0 = labelDimension.width_0 , textHeight_0 = labelDimension.height_0 , halfTextHeight_0 = textHeight_0 / 2 , this$static.position == 1?(rect_1 = new CFRect(pos - textWidth_0, this$static.bnds.y_0 + this$static.labelMargin, textWidth_0, textHeight_0)):this$static.position == 3?(rect_1 = new CFRect(pos - textWidth_0, $getBottom(this$static.bnds) - (textHeight_0 + this$static.labelMargin), textWidth_0, textHeight_0)):this$static.position == 0?(rect_1 = new CFRect($getRight(this$static.bnds) - textWidth_0 - this$static.labelMargin, pos - halfTextHeight_0, textWidth_0, textHeight_0)):(rect_1 = new CFRect(this$static.bnds.x_0 + this$static.labelMargin, pos - halfTextHeight_0, textWidth_0, textHeight_0)) , rect_1)):(rect = $getRectForCenteredLabel(this$static, pos, labelDimension));
  this$static.minorLabelRectArray[this$static.nextMinorIndex] = rect;
  textItem = $getTextItemForPositionAndRect(this$static, rnd, text_0, rect);
  this$static.minorLabelArray[this$static.nextMinorIndex] = textItem;
}

function $adjustIfBars(this$static, numRows){
  var halfTimeMSToAdd, ticks, valRange, ticks_0, handler;
  ticks = (ticks_0 = 0 , handler = this$static.graph.handler , !!handler && instanceOf(handler, 60) && this$static.graph.graphType != 6 && this$static.graph.graphType != 7?(ticks_0 = $getMinimumTicksBetweenBars(castTo(handler, 60), numRows)):!!handler && instanceOf(handler, 111) && (ticks_0 = $getMinimumTicksBetweenBars_0(castTo(handler, 111), numRows)) , ticks_0);
  if (compare_22(ticks, 0) > 0) {
    this$static.hasSubHourData && (ticks = $getSubHourBarWidthInTicks(this$static, ticks));
    this$static.minimumBarIncrement = ticks;
    halfTimeMSToAdd = div(this$static.minimumBarIncrement, 2);
    this$static.adjustedMinTime = sub_1(this$static.adjustedMinTime, halfTimeMSToAdd);
    this$static.adjustedMaxTime = add_1(this$static.adjustedMaxTime, halfTimeMSToAdd);
    this$static.useBarWidths = true;
    valRange = toDouble_0(sub_1(this$static.adjustedMaxTime, this$static.adjustedMinTime));
    $setScaleRatio(this$static, valRange);
  }
}

function $adjustMajorMinorIncrements(this$static){
  ++this$static.minorIncrement;
  if (this$static.minorIncUnit == 6 && this$static.minorIncrement > minutes_0.length + 1) {
    this$static.minorIncUnit = 5;
    this$static.majorIncUnit = 3;
    this$static.minorIncrement = 1;
  }
   else if (this$static.minorIncUnit == 5 && this$static.minorIncrement > hours_0.length + 1) {
    this$static.minorIncUnit = 3;
    this$static.majorIncUnit = 2;
    this$static.minorIncrement = 1;
  }
   else if (this$static.minorIncUnit == 3 && this$static.minorIncrement > days.length + 1) {
    this$static.minorIncUnit = 2;
    this$static.majorIncUnit = 1;
    this$static.minorIncrement = 1;
  }
   else if (this$static.minorIncUnit == 2 && this$static.minorIncrement > months.length + 1) {
    this$static.minorIncUnit = 1;
    this$static.majorIncUnit = 0;
    this$static.minorIncrement = 1;
  }
}

function $adjustOrRemoveMajorLabel(this$static, index_0, rnd, ticks){
  if (index_0 == 1 && !this$static.firstMajorIsOnMajorBoundary) {
    this$static.nextMajorIndex = 0;
    this$static.longDateFormatNotShownYet = true;
    $addMajorLabelAndInfo(this$static, rnd, ticks);
    this$static.firstMajorIsOnMajorBoundary = true;
    this$static.nextMajorIndex = 1;
    return false;
  }
  return true;
}

function $calcTimeDivisions(this$static, rnd){
  $setMajorMinorUnits(this$static);
  while ($createTimeDivsionsBasedOnCurrentMajorMinorUnits(this$static, rnd))
    $adjustMajorMinorIncrements(this$static);
}

function $createTimeDivsionsBasedOnCurrentMajorMinorUnits(this$static, rnd){
  var currentTicks, label_0, pos, result, tempLabel, currentTicks_0, label_1, pos_0;
  if (this$static.firstAndLastLabelOnly)
    return this$static.minorDivisionsArray = initUnidimensionalArray(J_classLit, $intern_24, 41, 2, 14, 1) , this$static.minorLabelRectArray = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, 2, 0, 1) , this$static.majorLabelRectArray = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, 2, 0, 1) , this$static.minorLabelArray = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 2, 0, 1) , this$static.majorLabelArray = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 2, 0, 1) , this$static.nextMajorIndex = this$static.nextMinorIndex = 0 , this$static.longDateFormatNotShownYet = true , this$static.isMajorDivison = initUnidimensionalArray(Z_classLit, $intern_24, 41, 2, 16, 1) , currentTicks_0 = this$static.adjustedMinTime , this$static.minorDivisionsArray[0] = this$static.adjustedMinTime , label_1 = $getLabelForMajorUnit(this$static, currentTicks_0, true) , pos_0 = toDouble_0(sub_1(currentTicks_0, this$static.adjustedMinTime)) * this$static.ratio + $getMinPosition_1(this$static) , $addMinorLabelInfoToArrays(this$static, rnd, pos_0, label_1) , this$static.nextMinorIndex = 1 , currentTicks_0 = this$static.adjustedMaxTime , this$static.minorDivisionsArray[1] = this$static.adjustedMaxTime , this$static.minorIncUnit == 3 && $isDateToday(this$static, currentTicks_0)?(label_1 = getString('DATE_SEL_TODAY', this$static.locale)):(label_1 = $getLabelForMajorUnit(this$static, currentTicks_0, true)) , pos_0 = toDouble_0(sub_1(currentTicks_0, this$static.adjustedMinTime)) * this$static.ratio + $getMinPosition_1(this$static) , $addMinorLabelInfoToArrays(this$static, rnd, pos_0, label_1) , this$static.nextMinorIndex = 2 , false;
  this$static.minorDivisionsArray = initUnidimensionalArray(J_classLit, $intern_24, 41, 200, 14, 1);
  this$static.minorLabelRectArray = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, 200, 0, 1);
  this$static.majorLabelRectArray = initUnidimensionalArray(Lcom_domo_charting_model_CFRect_2_classLit, $intern_9, 4, 200, 0, 1);
  this$static.minorLabelArray = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 200, 0, 1);
  this$static.majorLabelArray = initUnidimensionalArray(Lcom_domo_charting_model_CFTextItem_2_classLit, $intern_9, 26, 200, 0, 1);
  this$static.nextMajorIndex = this$static.nextMinorIndex = 0;
  this$static.longDateFormatNotShownYet = true;
  this$static.isMajorDivison = initUnidimensionalArray(Z_classLit, $intern_24, 41, 200, 16, 1);
  currentTicks = this$static.adjustedMinTime;
  $addFirstMinor(this$static, rnd, currentTicks);
  currentTicks = $getNextMinor(this$static, currentTicks);
  while (lte(currentTicks, this$static.adjustedMaxTime)) {
    this$static.minorDivisionsArray[this$static.nextMinorIndex] = currentTicks;
    label_0 = $getLabelForMinorUnit(this$static, currentTicks);
    pos = toDouble_0(sub_1(currentTicks, this$static.adjustedMinTime)) * this$static.ratio + $getMinPosition_1(this$static);
    $addMinorLabelInfoToArrays(this$static, rnd, pos, label_0);
    if ($minorLabelsOverLap(this$static, this$static.nextMinorIndex)) {
      if (this$static.nextMinorIndex == 1) {
        if ($isThisMinorAMajor(this$static, currentTicks))
          $addFirstMinor(this$static, rnd, currentTicks);
        else if (this$static.minorIncUnit != 1)
          return true;
      }
       else 
        return true;
    }
     else {
      if ($isThisMinorAMajor(this$static, currentTicks) || this$static.nextMajorIndex == 0) {
        this$static.isMajorDivison[this$static.nextMinorIndex] = true;
        (this$static.position == 0 || this$static.position == 2) && $addMinorLabelInfoToArrays(this$static, rnd, pos, '');
        tempLabel = $getLabelForMajorUnit(this$static, currentTicks, (result = this$static.position == 0 || this$static.position == 2 || this$static.nextMajorIndex == 0 , result));
        (this$static.position == 3 || this$static.position == 1 || tempLabel != null && tempLabel.length > 0) && (label_0 = tempLabel);
        $addMajorLabelInfoToArrays(this$static, rnd, this$static.minorLabelRectArray[this$static.nextMinorIndex], label_0);
        if ($majorLabelsOverLap(this$static, this$static.nextMajorIndex)) {
          if ($adjustOrRemoveMajorLabel(this$static, this$static.nextMajorIndex, rnd, currentTicks) && this$static.majorIncUnit == 2)
            return true;
        }
         else 
          ++this$static.nextMajorIndex;
      }
      ++this$static.nextMinorIndex;
    }
    currentTicks = $getNextMinor(this$static, currentTicks);
  }
  return false;
}

function $getBarWidthIfBarType(this$static){
  var barWidth, curTime, location_0, location2;
  barWidth = 0;
  if (this$static.useBarWidths && !!this$static.graph && !!this$static.graph.data_0 && !!$getFirstVisibleRow(this$static.graph.data_0)) {
    curTime = $getFirstVisibleRow(this$static.graph.data_0).timeMS;
    location_0 = toDouble_0(sub_1(curTime, this$static.adjustedMinTime)) * this$static.ratio;
    curTime = add_1(curTime, this$static.minimumBarIncrement);
    location2 = toDouble_0(sub_1(curTime, this$static.adjustedMinTime)) * this$static.ratio;
    barWidth = location2 - location_0;
  }
  return barWidth;
}

function $getCurrentMinor(this$static, ticks){
  var date, dayOfMonth, daysToUse, hour, minute, month, newDate, newDayOfMonth, newHour, newMinute, newmonth, year;
  date = new Date_4(ticks);
  newDate = date;
  year = date.jsdate.getFullYear() - $intern_14;
  month = date.jsdate.getMonth();
  dayOfMonth = date.jsdate.getDate();
  hour = date.jsdate.getHours();
  minute = date.jsdate.getMinutes();
  daysToUse = days;
  switch (this$static.minorIncUnit) {
    case 1:
      newDate = new Date_1(year, 0, 1);
      break;
    case 2:
      newmonth = $getCurrentUnit(this$static, month, months);
      if (newmonth != month)
        return 0;
      newDate = new Date_1(year, month, 1);
      break;
    case 3:
      month == 1 && (daysToUse = daysfeb);
      newDayOfMonth = $getCurrentUnit(this$static, dayOfMonth, daysToUse);
      if (newDayOfMonth != dayOfMonth)
        return 0;
      newDate = new Date_1(year, month, dayOfMonth);
      break;
    case 5:
      newHour = $getCurrentUnit(this$static, hour, hours_0);
      if (newHour != hour)
        return 0;
      newDate = new Date_2(year, month, dayOfMonth, hour, 0);
      break;
    case 6:
      newMinute = $getCurrentUnit(this$static, minute, minutes_0);
      if (newMinute != minute)
        return 0;
      newDate = new Date_2(year, month, dayOfMonth, hour, minute);
  }
  return fromDouble_0(newDate.jsdate.getTime());
}

function $getCurrentUnit(this$static, current, lookup){
  var next, value_0, value$index, value$max;
  if (this$static.minorIncrement == 1)
    return current;
  else {
    next = lookup[this$static.minorIncrement - 2];
    for (value$index = 0 , value$max = next.length; value$index < value$max; ++value$index) {
      value_0 = next[value$index];
      if (value_0 == current)
        return current;
    }
  }
  return -1;
}

function $getFormatStringForDateAndSmaller(this$static, unit){
  var format;
  format = '';
  unit == 3?(this$static.position == 0 || this$static.position == 2) && this$static.majorIncUnit == 3?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('DAY_MONTH_YEAR_FORMAT', this$static.locale))):(format = 'DD'):unit == 5?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('HOUR_ONLY', this$static.locale))):unit == 6 && (format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('HOUR_WITH_MINUTE', this$static.locale)));
  return format;
}

function $getLabelForMajorUnit(this$static, ticks, first){
  var format;
  format = '';
  if (this$static.majorIncUnit == 1) {
    this$static.position == 0 || this$static.position == 2?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('MONTH_WITH_YEAR_FORMAT', this$static.locale))):(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('YEAR_ONLY_FORMAT', this$static.locale)));
  }
   else if (this$static.majorIncUnit == 2) {
    this$static.position == 0 || this$static.position == 2 || this$static.firstAndLastLabelOnly?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('DAY_MONTH_YEAR_FORMAT', this$static.locale))):(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('MONTH_WITH_YEAR_FORMAT', this$static.locale)));
  }
   else if (first && this$static.longDateFormatNotShownYet) {
    format = $getLongFormatStringForDateAndSmaller(this$static, this$static.majorIncUnit, ticks);
    this$static.graph.chart.timeZone != null && (format += ' z');
    this$static.longDateFormatNotShownYet = false;
  }
   else 
    this$static.majorIncUnit != 5 && (format = $getFormatStringForDateAndSmaller(this$static, this$static.majorIncUnit));
  return FormatDate(ticks, format, this$static.locale, this$static.graph.chart.timeZone);
}

function $getLabelForMinorUnit(this$static, ticks){
  var format;
  this$static.minorIncUnit == 1?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('YEAR_ONLY_FORMAT', this$static.locale))):this$static.minorIncUnit == 2?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('MONTH_ONLY_FORMAT', this$static.locale))):(format = $getFormatStringForDateAndSmaller(this$static, this$static.minorIncUnit));
  return FormatDate(ticks, format, this$static.locale, this$static.graph.chart.timeZone);
}

function $getLongFormatStringForDateAndSmaller(this$static, unit, ticks){
  var format;
  format = '';
  unit == 3?(this$static.position == 0 || this$static.position == 2) && !$isMidnight(ticks)?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('HOUR_DAY_MONTH_YEAR_FORMAT', this$static.locale))):(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('DAY_MONTH_YEAR_FORMAT', this$static.locale))):unit == 5?(format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('DAY_MONTH_YEAR_FORMAT', this$static.locale))):unit == 6 && (format = (!!this$static.graph && !!this$static.graph.chart && (this$static.locale = this$static.graph.chart.locale) , getString('HOUR_WITH_MINUTE', this$static.locale)));
  return format;
}

function $getMaxDayWidthOfBarBasedOnScaleMinIncs(this$static){
  var i, lastTicks, minMinorInc, numDaysBetweenMinor;
  if (this$static.minorIncUnit != 3)
    return 0;
  if (!this$static.graph.typeAttributes.isStacked && this$static.graph.data_0.numVisibleCols > 1)
    return 0;
  if (this$static.minorDivisionsArray != null && this$static.minorDivisionsArray.length > 3) {
    minMinorInc = $intern_31;
    lastTicks = 0;
    for (i = 0; i < 3; i++) {
      lt(sub_1(this$static.minorDivisionsArray[i], lastTicks), minMinorInc) && (minMinorInc = sub_1(this$static.minorDivisionsArray[i], lastTicks));
      lastTicks = this$static.minorDivisionsArray[i];
    }
    numDaysBetweenMinor = toDouble_0(minMinorInc) / $intern_34;
    if (numDaysBetweenMinor <= 1)
      return 1.5;
    return numDaysBetweenMinor - 0.5;
  }
  return 0;
}

function $getMinPosition_1(this$static){
  if (this$static.position == 0 || this$static.position == 2)
    return this$static.graph.bnds.y_0 + this$static.startMargin + this$static.endPadding;
  return this$static.graph.bnds.x_0 + this$static.startMargin + this$static.startPadding;
}

function $getNextMinor(this$static, ticks){
  var date, dayOfMonth, daysToUse, hour, minute, month, newDate, newTicks, year;
  date = new Date_4(ticks);
  newDate = date;
  year = date.jsdate.getFullYear() - $intern_14;
  month = date.jsdate.getMonth();
  dayOfMonth = date.jsdate.getDate();
  hour = date.jsdate.getHours();
  minute = date.jsdate.getMinutes();
  daysToUse = days;
  switch (this$static.minorIncUnit) {
    case 1:
      year += this$static.minorIncrement;
      newDate = new Date_1(year, 0, 1);
      break;
    case 2:
      month = $getNextUnit(this$static, month, months, 11, 0);
      month == 0 && ++year;
      newDate = new Date_1(year, month, 1);
      break;
    case 3:
      month == 1 && (daysToUse = daysfeb);
      dayOfMonth = $getNextUnit(this$static, dayOfMonth, daysToUse, 31, 1);
      if (dayOfMonth == 1) {
        ++month;
        if (month > 11) {
          month = 0;
          ++year;
        }
      }

      newDate = new Date_1(year, month, dayOfMonth);
      newDate.jsdate.getMonth() != month && (newDate = new Date_1(newDate.jsdate.getFullYear() - $intern_14, newDate.jsdate.getMonth(), 1));
      break;
    case 5:
      hour = $getNextUnit(this$static, hour, hours_0, 23, 0);
      hour == 0 && ++dayOfMonth;
      newDate = new Date_2(year, month, dayOfMonth, hour, 0);
      break;
    case 6:
      minute = $getNextUnit(this$static, minute, minutes_0, 59, 0);
      minute == 0 && ++hour;
      if (hour > 23) {
        hour = 0;
        ++dayOfMonth;
      }

      newDate = new Date_2(year, month, dayOfMonth, hour, minute);
  }
  newTicks = fromDouble_0(newDate.jsdate.getTime());
  return newTicks;
}

function $getNextUnit(this$static, current, lookup, maxForUnit, resetValue){
  var next, nextUnit, value_0, value$index, value$max;
  nextUnit = current;
  if (this$static.minorIncrement == 1)
    nextUnit += 1;
  else {
    nextUnit = resetValue;
    next = lookup[this$static.minorIncrement - 2];
    for (value$index = 0 , value$max = next.length; value$index < value$max; ++value$index) {
      value_0 = next[value$index];
      if (value_0 > current) {
        nextUnit = value_0;
        break;
      }
    }
  }
  nextUnit > maxForUnit && (nextUnit = resetValue);
  return nextUnit;
}

function $getPositionForTime(this$static, ticks){
  return toDouble_0(sub_1(ticks, this$static.adjustedMinTime)) * this$static.ratio;
}

function $getSubHourBarWidthInTicks(this$static, ticks){
  compare_22(ticks, 3600000) < 0 && compare_22(ticks, 60000) > 0 && (compare_22(ticks, 600000) > 0 && gt(sub_1(this$static.maxTime, this$static.minTime), 7200000)?(ticks = 600000):compare_22(ticks, 240000) > 0 && gt(sub_1(this$static.maxTime, this$static.minTime), 1800000)?(ticks = 240000):(ticks = 60000));
  return ticks;
}

function $getTodayAdjustedForTimeZone_0(this$static){
  var currentOffsetInMinutes, date, minutes, timeZoneOffset;
  date = new Date_0;
  timeZoneOffset = this$static.graph.chart.timeZoneOffset;
  if (timeZoneOffset != null) {
    minutes = convertTimeZoneOffsetToMinutes(timeZoneOffset);
    currentOffsetInMinutes = date.jsdate.getTimezoneOffset();
    $setMinutes(date, date.jsdate.getMinutes() + currentOffsetInMinutes + minutes);
  }
  date.jsdate.setHours(0);
  $fixDaylightSavings(date, 0);
  $setMinutes(date, 0);
  $setSeconds(date, 0);
  return date;
}

function $getWidestLabelWidth(this$static){
  var i, i0, result;
  result = 0;
  for (i0 = 0; i0 < this$static.nextMinorIndex; i0++)
    this$static.minorLabelRectArray[i0].width_0 > result && (result = this$static.minorLabelRectArray[i0].width_0);
  for (i = 0; i < this$static.nextMajorIndex; i++)
    this$static.majorLabelRectArray[i].width_0 > result && (result = this$static.majorLabelRectArray[i].width_0);
  return result;
}

function $isDateToday(this$static, ticks){
  var currentOffsetInMinutes, testDate, testTicks, today, todayTicks;
  today = $getTodayAdjustedForTimeZone_0(this$static);
  testDate = new Date_4(ticks);
  currentOffsetInMinutes = testDate.jsdate.getTimezoneOffset();
  $setMinutes(testDate, testDate.jsdate.getMinutes() + currentOffsetInMinutes);
  testDate.jsdate.setHours(0);
  $fixDaylightSavings(testDate, 0);
  $setMinutes(testDate, 0);
  $setSeconds(testDate, 0);
  testTicks = div(fromDouble_0(testDate.jsdate.getTime()), $intern_10);
  todayTicks = div(fromDouble_0(today.jsdate.getTime()), $intern_10);
  if (compare_22(testTicks, todayTicks) == 0)
    return true;
  return false;
}

function $isMidnight(ticks){
  var date, hour, minute;
  date = new Date_4(ticks);
  hour = date.jsdate.getHours();
  minute = date.jsdate.getMinutes();
  if (hour != 0)
    return false;
  if (minute != 0)
    return false;
  return true;
}

function $isThisMinorAMajor(this$static, ticks){
  var date, dayOfMonth, hour, minute, month;
  date = new Date_4(ticks);
  month = date.jsdate.getMonth();
  dayOfMonth = date.jsdate.getDate();
  hour = date.jsdate.getHours();
  minute = date.jsdate.getMinutes();
  switch (this$static.majorIncUnit) {
    case 0:
      return false;
    case 1:
      if (month != 0)
        return false;
    case 2:
      if (dayOfMonth != 1)
        return false;
    case 3:
      if (hour != 0)
        return false;
    case 5:
      if (minute != 0)
        return false;
  }
  return true;
}

function $majorLabelsOverLap(this$static, index_0){
  if (index_0 >= 1)
    return $intersects(this$static.majorLabelRectArray[index_0], this$static.majorLabelRectArray[index_0 - 1]);
  return false;
}

function $minorLabelsOverLap(this$static, index_0){
  if (index_0 >= 1)
    return $intersects(this$static.minorLabelRectArray[index_0], this$static.minorLabelRectArray[index_0 - 1]);
  return false;
}

function $setFirstAndLastLabelOnly(this$static, firstAndLastLabelOnly){
  this$static.firstAndLastLabelOnly = firstAndLastLabelOnly;
}

function $setMajorMinorUnits(this$static){
  var beginDate, endDate, endYear, minutesApart, startYear, years;
  this$static.majorIncUnit = 1;
  this$static.minorIncUnit = 2;
  this$static.minorIncrement = 1;
  minutesApart = div(sub_1(this$static.maxTime, this$static.minTime), 60000);
  beginDate = new Date_4(this$static.minTime);
  endDate = new Date_4(this$static.maxTime);
  startYear = beginDate.jsdate.getFullYear() - $intern_14 + $intern_14;
  endYear = endDate.jsdate.getFullYear() - $intern_14 + $intern_14;
  if (startYear == endYear || compare_22(minutesApart, 1054080) < 0) {
    if (compare_22(minutesApart, 20160) > 0 && !this$static.hasMonthDaysThatAreDifferent)
      return;
    else if (compare_22(minutesApart, 4320) > 0 || this$static.useBarWidths && gte_0(this$static.minimumBarIncrement, $intern_34)) {
      this$static.majorIncUnit = 2;
      this$static.minorIncUnit = 3;
    }
     else if (this$static.hasSubHourData) {
      this$static.majorIncUnit = 5;
      this$static.minorIncUnit = 6;
    }
     else {
      this$static.majorIncUnit = 3;
      this$static.minorIncUnit = 5;
    }
  }
   else {
    years = endYear - startYear;
    if (years > 6) {
      this$static.majorIncUnit = 0;
      this$static.minorIncUnit = 1;
    }
    years > 11 && (this$static.minorIncrement = round_int($wnd.Math.ceil(years / 11 | 0)));
  }
}

function $setMinAndMaxTimeFromData(this$static){
  var mmTime, valRange;
  mmTime = null;
  this$static.hasSubHourData = false;
  this$static.hasMonthDaysThatAreDifferent = false;
  !!castTo(this$static.graph.handler, 64) && (mmTime = castTo(this$static.graph.handler, 64).getMinMaxTimeValues(this$static));
  if (mmTime) {
    this$static.adjustedMinTime = this$static.minTime = mmTime.minTimeMS;
    this$static.adjustedMaxTime = this$static.maxTime = mmTime.maxTimeMS;
    this$static.hasSubHourData = mmTime.hasSubHourTime;
    this$static.hasMonthDaysThatAreDifferent = mmTime.hasMonthDaysThatAreDifferent;
    this$static.minorIncUnit == 1 && (this$static.adjustedMinTime = $getCurrentMinor(this$static, this$static.adjustedMinTime));
    valRange = toDouble_0(sub_1(this$static.adjustedMaxTime, this$static.adjustedMinTime));
    $setScaleRatio(this$static, valRange);
  }
}

function TimeScale(position, grph){
  $clinit_TimeScale();
  ValueScale.call(this, position, grph, false);
  this.minTime = -1;
  this.maxTime = 0;
  this.adjustedMinTime = -1;
  this.adjustedMaxTime = 0;
  this.locale = 'en-US';
  this.minorIncrement = 1;
  this.longDateFormatNotShownYet = true;
  this.nextMinorIndex = 0;
  this.nextMajorIndex = 0;
}

defineClass(56, 27, {53:1, 56:1, 27:1}, TimeScale);
_.addLabels = function addLabels_3(rnd){
  var drillStr, ge, i, i0, scaleHotRegionShp, scaleRect, sortGE, valueScale;
  if (this.isHidden)
    return;
  ge = new GraphicElement;
  $addTitleIfExists(this, rnd, ge);
  if (!this.hideLabels) {
    for (i0 = 0; i0 < this.nextMinorIndex; i0++)
      $addTextItem(ge, this.minorLabelArray[i0]);
    for (i = 0; i < this.nextMajorIndex; i++)
      $addTextItem(ge, this.majorLabelArray[i]);
  }
  $add_1(this.geAry, ge);
  valueScale = $getValueScaleByNumber(this.graph, 0);
  if (!!valueScale && $showValueScaleSortIcon(valueScale)) {
    sortGE = new GraphicElement;
    scaleRect = new CFRect(this.bnds.x_0 + this.startMargin, this.bnds.y_0, this.bnds.width_0 - (this.startMargin + this.endMargin), this.bnds.height_0);
    (this.position == 0 || this.position == 2) && (scaleRect = new CFRect(this.bnds.x_0, this.bnds.y_0 + this.startMargin, this.bnds.width_0, this.bnds.height_0 - (this.startMargin + this.endMargin)));
    scaleHotRegionShp = new CFShape_1(scaleRect, ($clinit_CFFill() , TRANSPARENT_0), null);
    drillStr = $getHvrDataStrForScale(this.graph, 'Value', valueScale);
    $addShape_0(sortGE, scaleHotRegionShp, drillStr);
    $add_1(this.geAry, sortGE);
  }
}
;
_.createGridDrawObjects = function createGridDrawObjects_3(rnd){
  var ge, i, lineHeight, lines, pos;
  if (this.isHidden)
    return;
  this.drawBaseline && $drawBaseline(this);
  if (this.hideLabels)
    return;
  ge = new GraphicElement;
  lineHeight = $getLineHeight(this.labelFont, rnd);
  lines = this.majorIncUnit == 0?1:2;
  if (!this.firstAndLastLabelOnly) {
    for (i = 0; i < this.nextMinorIndex; i++) {
      pos = $getPositionForTime(this, this.minorDivisionsArray[i]) + $getMinPosition_1(this);
      isNaN(pos)?rnd.log_0('MinorDivision is NaN. ' + toString_23(this.minorDivisionsArray[i]) + ' array length : ' + this.minorDivisionsArray.length):this.position == 1?$addShape(ge, new CFShape_0(new CFPath_1(pos, this.bnds.y_0, pos, this.bnds.y_0 + this.labelMargin), null, this.majorGridLineStroke)):this.position == 3?$addShape(ge, new CFShape_0(new CFPath_1(pos, this.bnds.y_0 + lineHeight * lines, pos, this.bnds.y_0 + lineHeight * lines + this.labelMargin), null, this.majorGridLineStroke)):this.position == 0?$addShape(ge, new CFShape_0(new CFPath_1($getRight(this.bnds) - this.labelMargin, pos, $getRight(this.bnds), pos), null, this.majorGridLineStroke)):this.position == 2 && $addShape(ge, new CFShape_0(new CFPath_1(this.bnds.x_0, pos, this.bnds.x_0 + this.labelMargin, pos), null, this.majorGridLineStroke));
    }
  }
  $add_1(this.geAry, ge);
}
;
_.formatSubClassSpecific = function formatSubClassSpecific_4(rnd, numRows, numCols, formatPass){
  this.useBarWidths = false;
  $limitDataIfNeeded(this, numRows);
  $setMinAndMaxTimeFromData(this);
  this.graph.treatAsSmall && (this.startMargin = this.endMargin = 1);
  $adjustIfBars(this, numRows);
  $calcTimeDivisions(this, rnd);
}
;
_.getMinPosition = function getMinPosition_3(){
  return $getMinPosition_1(this);
}
;
_.getPositionForValue = function getPositionForValue_4(rowIndex){
  var curTime, totalNumRows;
  totalNumRows = $getNumRows(this.graph.data_0);
  eq(this.minTime, -1) && $setMinAndMaxTimeFromData(this);
  if (rowIndex >= 0 && rowIndex < totalNumRows) {
    curTime = $getRow(this.graph.data_0, round_int(rowIndex)).timeMS;
    return toDouble_0(sub_1(curTime, this.adjustedMinTime)) * this.ratio;
  }
  return 0;
}
;
_.getValueForPosition = function getValueForPosition_1(position){
  return toDouble_0(this.adjustedMinTime) + (position - (this.bnds.x_0 + this.startMargin)) / this.ratio;
}
;
_.getWidestLabelWidth = function getWidestLabelWidth_0(){
  return $getWidestLabelWidth(this);
}
;
_.setDimensions = function setDimensions_4(rnd){
  var lines, textDim, titleHeight, widestLabel;
  titleHeight = $getTitleHeight(this, rnd);
  if (this.graph.textAndTicksInBounds && !this.isHidden) {
    textDim = rnd.measureText_0('A', this.labelFont);
    if (this.position == 1 || this.position == 3) {
      lines = 2;
      (this.majorIncUnit == 0 || this.firstAndLastLabelOnly) && (lines = 1);
      $setHeight(this.bnds, textDim.height_0 * lines + this.labelMargin + titleHeight);
    }
     else {
      widestLabel = $getWidestLabelWidth(this);
      widestLabel + this.labelMargin + titleHeight > this.bnds.width_0 && $setWidth(this.bnds, widestLabel + this.labelMargin + titleHeight);
    }
  }
}
;
_.setMargins = function setMargins_2(rnd, numRows){
  var barWidth, length_0, length0, majorRect, marginAdjust, testRect, testRectMajor;
  if (this.graph.textAndTicksInBounds) {
    barWidth = $getBarWidthIfBarType(this);
    testRect = this.minorLabelRectArray[0];
    testRectMajor = this.majorLabelRectArray[0];
    if (!testRect)
      return;
    if (this.position == 1 || this.position == 3) {
      marginAdjust = (testRect.width_0 - barWidth) / 2;
      if (!this.isHidden) {
        marginAdjust > 0 && (this.startMargin = marginAdjust);
        testRect = this.minorLabelRectArray[0];
        testRect.x_0 < 0 && this.startMargin < -testRect.x_0 && (this.startMargin = -testRect.x_0 + 2);
        testRect = this.minorLabelRectArray[this.nextMinorIndex - 1];
        if (this.nextMajorIndex > 0) {
          majorRect = this.majorLabelRectArray[0];
          majorRect.x_0 < 0 && this.startMargin < -majorRect.x_0 && (this.startMargin = -majorRect.x_0 + 2);
          majorRect = this.majorLabelRectArray[this.nextMajorIndex - 1];
          !!majorRect && majorRect.x_0 + majorRect.width_0 > testRect.x_0 + testRect.width_0 && (testRect = majorRect);
        }
        testRect.x_0 + testRect.width_0 > $getMinPosition_1(this) + (length0 = $getLength(this) , length0 - (this.startPadding + this.endPadding)) && (this.endMargin = testRect.x_0 + testRect.width_0 - ($getMinPosition_1(this) + (length_0 = $getLength(this) , length_0 - (this.startPadding + this.endPadding))));
      }
      this.endMargin < 32 && $hasAnnotations(this.graph) && this.graph.isHorizontal && (this.endMargin += 32);
      this.endMargin < 2 && !this.isHidden && (this.endMargin = 2);
      this.endMargin < 5 && !!this.bnds && !!this.graph && $getRight(this.bnds) == this.graph.chart.dimension.width_0 && instanceOf(this.graph.handler, 60) && this.graph.isHorizontal && (this.endMargin = 5);
    }
     else if (testRectMajor) {
      testRectMajor.y_0 < testRect.y_0 && (testRect = testRectMajor);
      testRect.y_0 < $getMinPosition_1(this) && (this.startMargin = $getMinPosition_1(this) - testRect.y_0);
      $hasAnnotations(this.graph) && this.startMargin < 20 && (this.startMargin += 20);
      testRect = this.minorLabelRectArray[this.nextMinorIndex - 1];
      testRectMajor = this.majorLabelRectArray[this.nextMajorIndex - 1];
      testRectMajor.y_0 + testRectMajor.height_0 > testRect.y_0 + testRect.height_0 && (testRect = testRectMajor);
      testRect.y_0 + testRect.height_0 > $getMinPosition_1(this) + (length0 = $getLength(this) , length0 - (this.startPadding + this.endPadding)) && (this.endMargin = testRect.y_0 + testRect.height_0 - ($getMinPosition_1(this) + (length_0 = $getLength(this) , length_0 - (this.startPadding + this.endPadding))));
    }
  }
}
;
_.setPadding = function setPadding_1(rnd, numRows){
  (this.type_0 == 0 || this.graph.graphType == 12) && $setPadding(this);
}
;
_.adjustedMaxTime = 0;
_.adjustedMinTime = 0;
_.firstAndLastLabelOnly = false;
_.firstMajorIsOnMajorBoundary = false;
_.hasMonthDaysThatAreDifferent = false;
_.hasSubHourData = false;
_.longDateFormatNotShownYet = false;
_.majorIncUnit = 0;
_.maxTime = 0;
_.minTime = 0;
_.minimumBarIncrement = 0;
_.minorIncUnit = 0;
_.minorIncrement = 0;
_.nextMajorIndex = 0;
_.nextMinorIndex = 0;
_.useBarWidths = false;
var days, days1, days2, days4, days_for_feb, daysfeb, hours_0, hours1, hours2, hours3, hours4, minutes_0, minutes1, minutes2, minutes3, minutes4, minutes5, months, months1, months2;
var Lcom_domo_charting_scales_TimeScale_2_classLit = createForClass('com.domo.charting.scales', 'TimeScale', 56);
function $clinit_ValueScaleLog(){
  $clinit_ValueScaleLog = emptyMethod;
  $clinit_ValueScale();
  log10 = $wnd.Math.log(10);
}

function $calcDivisionValues(this$static){
  var current, currentValue, divisionIndex, divsionIndex, i, increment, max10toX, min10toX, minPower, n, numDivisions, primary, temp;
  if (this$static.isSecondary) {
    primary = $getValueScaleByNumber(this$static.graph, 0);
    if (this$static.syncedScales) {
      if (!!primary && instanceOf(primary, 73) && primary.divisions != null) {
        this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, primary.divisions.length, 15, 1);
        for (i = 0; i < this$static.divisions.length; i++)
          this$static.divisions[i] = primary.divisions[i];
        this$static.min_0 = primary.min_0;
        this$static.max_0 = primary.max_0;
        return;
      }
    }
     else {
      !!primary && primary.divisions != null && $setSecondaryDivisionsFromManualMinMax(this$static, primary);
      return;
    }
  }
  this$static.MaxForCalc = this$static.max_0 = this$static.maxFromData;
  this$static.MinForCalc = this$static.min_0 = this$static.minFromData;
  this$static.MinForCalc <= 0 && (this$static.MinForCalc = 1);
  this$static.MaxForCalc <= 0 && (this$static.MaxForCalc = 10);
  if (this$static.MaxForCalc == this$static.MinForCalc)
    this$static.MinForCalc -= this$static.MinForCalc * 0.1;
  else if (this$static.MinForCalc > this$static.MaxForCalc) {
    temp = this$static.MaxForCalc;
    this$static.MaxForCalc = this$static.MinForCalc;
    this$static.MinForCalc = temp;
  }
  this$static.LogScaleMinInc = 1;
  n = $wnd.Math.log(this$static.MinForCalc + this$static.MinForCalc * 1.0E-6) / log10;
  minPower = $wnd.Math.floor(n);
  min10toX = round_int(minPower);
  this$static.LogScaleMinInc = $wnd.Math.pow(10, min10toX);
  temp = this$static.MinForCalc / this$static.LogScaleMinInc;
  temp = $wnd.Math.floor(temp);
  temp = temp * this$static.LogScaleMinInc;
  this$static.min_0 = temp;
  this$static.MaxForCalc == 0 && (this$static.MaxForCalc = 1);
  n = $wnd.Math.log(this$static.MaxForCalc + this$static.MaxForCalc * 1.0E-6) / log10;
  n = $wnd.Math.floor(n);
  max10toX = round_int(n);
  this$static.LogScaleMaxInc = $wnd.Math.pow(10, max10toX);
  if (this$static.LogScaleMinInc == this$static.LogScaleMaxInc) {
    if (this$static.max_0 <= this$static.min_0 * 2) {
      this$static.LogScaleMinInc = this$static.LogScaleMinInc / 10;
      numDivisions = round_int(this$static.max_0 / this$static.LogScaleMinInc + 1 - this$static.min_0 / this$static.LogScaleMinInc) + 1;
      numDivisions = (numDivisions / 2 | 0) + 1;
      this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, numDivisions, 15, 1);
      for (divsionIndex = 0; divsionIndex < numDivisions; divsionIndex++)
        this$static.divisions[divsionIndex] = this$static.min_0 + divsionIndex * 2 * this$static.LogScaleMinInc;
      $adjustNumberFormatterBasedOnIncrement(this$static, this$static.LogScaleMinInc, this$static.divisions[numDivisions - 1]);
    }
     else {
      numDivisions = 2;
      this$static.max_0 > this$static.LogScaleMinInc * 5 && this$static.min_0 < this$static.LogScaleMinInc * 5 && ++numDivisions;
      this$static.max_0 > this$static.LogScaleMinInc * 2 && this$static.min_0 < this$static.LogScaleMinInc * 2 && ++numDivisions;
      this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, numDivisions, 15, 1);
      this$static.divisions[0] = this$static.min_0;
      current = this$static.min_0 + this$static.LogScaleMinInc;
      divisionIndex = 1;
      while (current < this$static.max_0) {
        doublesEqualWithinTolerance(current, this$static.LogScaleMinInc * 2)?(this$static.divisions[divisionIndex++] = current):doublesEqualWithinTolerance(current, this$static.LogScaleMinInc * 5) && (this$static.divisions[divisionIndex++] = current);
        current += this$static.LogScaleMinInc;
      }
      this$static.divisions[numDivisions - 1] = current;
      $adjustNumberFormatterBasedOnIncrement(this$static, this$static.LogScaleMinInc, this$static.divisions[numDivisions - 1]);
    }
  }
   else {
    numDivisions = (max10toX - min10toX + 1) * 2 + 1;
    numDivisions < 0 && (numDivisions = 3);
    this$static.min_0 >= this$static.LogScaleMinInc * 5 && --numDivisions;
    this$static.max_0 < this$static.LogScaleMaxInc * 5 && --numDivisions;
    increment = this$static.LogScaleMinInc;
    currentValue = this$static.min_0;
    this$static.divisions = initUnidimensionalArray(D_classLit, $intern_24, 41, numDivisions, 15, 1);
    divsionIndex = 0;
    this$static.divisions[divsionIndex++] = currentValue;
    while (currentValue < this$static.max_0) {
      currentValue += increment;
      if (doublesEqualWithinTolerance(currentValue, increment * 5))
        this$static.divisions[divsionIndex++] = increment * 5;
      else if (doublesEqualWithinTolerance(currentValue, increment * 10)) {
        this$static.divisions[divsionIndex++] = increment * 10;
        increment *= 10;
      }
    }
    this$static.divisions[numDivisions - 1] = currentValue;
    $adjustNumberFormatterBasedOnIncrement(this$static, increment, currentValue);
  }
  this$static.max_0 = this$static.divisions[numDivisions - 1];
}

function $calcNegativeScaleFactor(range){
  var dividend, factor;
  factor = 1;
  do {
    factor /= 10;
    dividend = range / factor;
  }
   while (dividend < 10);
  return factor;
}

function $calcPositiveScaleFactor(range){
  var dividend, factor;
  factor = 1;
  do {
    factor *= 10;
    dividend = range / factor;
  }
   while (dividend > 100);
  return factor;
}

function $getPositionForValue_0(this$static, value_0){
  var calcValue, logValue;
  value_0 <= 0 && (value_0 = this$static.min_0 - this$static.min_0 * 0.02);
  logValue = $wnd.Math.log(value_0) / log10;
  calcValue = (logValue - this$static.minLogForScale) * this$static.ratio;
  return calcValue;
}

function $setScaleRatioLengthOverride(this$static, length_0){
  this$static.minLogForScale = $wnd.Math.log(this$static.min_0) / log10;
  this$static.maxLogForScale = $wnd.Math.log(this$static.max_0) / log10;
  this$static.ratio = length_0 / (this$static.maxLogForScale - this$static.minLogForScale);
}

function ValueScaleLog(valueScale){
  $clinit_ValueScaleLog();
  ValueScale_0.call(this, valueScale);
}

defineClass(73, 27, {53:1, 27:1, 73:1}, ValueScaleLog);
_.addLabels = function addLabels_4(rnd){
  var ge, ti, ti$iterator;
  if (!this.hiddenForNoData_0 && !this.isHidden) {
    ge = new GraphicElement;
    $addTitleIfExists(this, rnd, ge);
    for (ti$iterator = new ArrayList$1(this.labelList); ti$iterator.i < ti$iterator.this$01.array.length;) {
      ti = castTo($next_3(ti$iterator), 26);
      !ge.textAry && (ge.textAry = new ArrayList);
      $add_1(ge.textAry, ti);
    }
    $add_1(this.geAry, ge);
    $addSortIcon(this);
  }
}
;
_.adjustForMinMaxSame = function adjustForMinMaxSame_0(){
  if (this.minFromData == this.maxFromData) {
    this.maxDivisions = 1;
    this.minFromData <= 0 && (this.minFromData = 1);
    this.maxFromData = this.minFromData * 10;
  }
}
;
_.adjustMinMaxForPercentOverAndUnder = function adjustMinMaxForPercentOverAndUnder_0(){
}
;
_.calcCleanDivisionValues = function calcCleanDivisionValues_0(){
  $calcDivisionValues(this);
}
;
_.calcDivisionValues = function calcDivisionValues_0(){
  $calcDivisionValues(this);
}
;
_.calcLabelPositions = function calcLabelPositions_1(rnd){
  var division, division$array, division$index, division$max, label_0, labelDimensions, pos, rect, testRect, text_0, yAdjust;
  if (!this.hiddenForNoData_0 && !this.isHidden && !this.hideLabels) {
    this.existingLableRects.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
    yAdjust = $getMinPosition_0(this);
    for (division$array = this.divisions , division$index = 0 , division$max = division$array.length; division$index < division$max; ++division$index) {
      division = division$array[division$index];
      pos = $getPositionForValue_0(this, division);
      this.position == 0 || this.position == 2?(pos = yAdjust - pos):(pos = yAdjust + pos);
      text_0 = $getFormattedValue_0(this, division);
      labelDimensions = rnd.measureText_0(text_0, this.labelFont);
      rect = $getRectForCenteredLabel(this, pos, labelDimensions);
      testRect = new CFRect(rect.x_0 - 3, rect.y_0, rect.width_0 + 6, rect.height_0);
      if (!$intersectsWithList(testRect, this.existingLableRects)) {
        $add_1(this.existingLableRects, $getRectForCenteredLabel(this, pos, labelDimensions));
        label_0 = $getTextItemForPositionAndRect(this, rnd, text_0, rect);
        $add_1(this.labelList, label_0);
      }
    }
  }
}
;
_.calcMinMaxRatioFromDataRange = function calcMinMaxRatioFromDataRange_0(){
  var minMax, row, tmpMax, tmpMin;
  this.hiddenForNoData_0 = false;
  if (isNaN_0(this.max_0) && !!this.graph && !!this.graph.data_0) {
    row = $getFirstVisibleRow(this.graph.data_0);
    while (row) {
      tmpMax = $getMaxForRow(this, row);
      tmpMin = $getMinForRow(this, row, true);
      (isNaN_0(this.max_0) && tmpMax > 0 && tmpMax > $intern_20 || tmpMax > 0 && tmpMax > this.max_0) && (this.max_0 = tmpMax);
      (isNaN_0(this.min_0) && tmpMin > 0 && tmpMin < $intern_19 || tmpMin > 0 && tmpMin < this.min_0) && (this.min_0 = tmpMin);
      row = $getNextVisibleRow(this.graph.data_0, row);
    }
    $wnd.Math.abs(this.max_0) >= 1 && (this.max_0 = toDouble_0(fromDouble_0($wnd.Math.round(this.max_0 * $intern_12))) / $intern_12);
    $wnd.Math.abs(this.min_0) >= 1 && (this.min_0 = toDouble_0(fromDouble_0($wnd.Math.round(this.min_0 * $intern_12))) / $intern_12);
    minMax = this.graph.handler.calcMinMaxOverride(this, this.min_0, this.max_0);
    if (minMax) {
      minMax.min_0 > 0 && (this.min_0 = minMax.min_0);
      minMax.max_0 > 0 && (this.max_0 = minMax.max_0);
    }
  }
  this.minFromData = this.min_0;
  this.maxFromData = this.max_0;
}
;
_.calcNegativeScaleFactor = function calcNegativeScaleFactor_0(range){
  return $calcNegativeScaleFactor(range);
}
;
_.calcPositiveScaleFactor = function calcPositiveScaleFactor_0(range){
  return $calcPositiveScaleFactor(range);
}
;
_.calcScaleFactor = function calcScaleFactor_0(range){
  var scaleFactor;
  scaleFactor = 1;
  range >= 10?(scaleFactor = $calcPositiveScaleFactor(range)):range > 0 && range < 10 && (scaleFactor = $calcNegativeScaleFactor(range));
  return scaleFactor;
}
;
_.checkForWarningOnNegativeNumbers = function checkForWarningOnNegativeNumbers_1(){
  var containsNegOrZero, row, tmpMin;
  containsNegOrZero = false;
  row = $getFirstVisibleRow(this.graph.data_0);
  while (row) {
    tmpMin = $getMinForRow(this, row, false);
    if (tmpMin <= 0) {
      containsNegOrZero = true;
      break;
    }
    row = $getNextVisibleRow(this.graph.data_0, row);
  }
  return containsNegOrZero;
}
;
_.createGridDrawObjects = function createGridDrawObjects_4(rnd){
  var adjacentScale, division, division$array, division$index, division$max, ge, innerBnds, pos;
  if (this.isHidden) {
    $drawScaleMarkerLines_0(this);
    return;
  }
  this.drawBaseline && $drawBaseline(this);
  if (this.majorGridLineStroke) {
    if (!this.isSecondary) {
      adjacentScale = $getAdjacentScale(this);
      if (adjacentScale) {
        ge = new GraphicElement;
        innerBnds = $getMarginBoundsRect(adjacentScale);
        if (!this.hideGrids && this.divisions != null) {
          for (division$array = this.divisions , division$index = 0 , division$max = division$array.length; division$index < division$max; ++division$index) {
            division = division$array[division$index];
            if (this.position == 1 || this.position == 3) {
              pos = $getMinPosition_0(this) + $getPositionForValue_0(this, division);
              division == 0?$addShape(ge, new CFShape_0(new CFPath_1(pos, innerBnds.y_0, pos, innerBnds.y_0 + innerBnds.height_0), null, this.zeroLineStroke)):$addShape(ge, new CFShape_0(new CFPath_1(pos, innerBnds.y_0, pos, innerBnds.y_0 + innerBnds.height_0), null, this.majorGridLineStroke));
            }
             else {
              pos = $getMinPosition_0(this) - $getPositionForValue_0(this, division);
              division == 0?$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, pos, innerBnds.x_0 + innerBnds.width_0, pos), null, this.zeroLineStroke)):$addShape(ge, new CFShape_0(new CFPath_1(innerBnds.x_0, pos, innerBnds.x_0 + innerBnds.width_0, pos), null, this.majorGridLineStroke));
            }
          }
          $add_1(this.geAry, ge);
        }
      }
    }
  }
  $drawScaleMarkerLines_0(this);
}
;
_.getPositionForValue = function getPositionForValue_5(value_0){
  return $getPositionForValue_0(this, value_0);
}
;
_.getValueForPosition = function getValueForPosition_2(position){
  var value_0;
  value_0 = this.minLogForScale + position / this.ratio;
  value_0 *= log10;
  value_0 = $wnd.Math.exp(value_0);
  return value_0;
}
;
_.getZeroPosition = function getZeroPosition_1(){
  return this.position == 1 || this.position == 3?$getMinPosition_0(this) + $getPositionForValue_0(this, 0):$getMinPosition_0(this) - $getPositionForValue_0(this, 0);
}
;
_.handleAlwaysIncludeZero = function handleAlwaysIncludeZero_0(){
  this.minFromData > 1 && this.alwaysIncludeZero && (this.minFromData = 1);
}
;
_.handleManualDivisions = function handleManualDivisions_0(){
  this.manualDivisions != -1 && (this.maxDivisions = this.manualDivisions);
  this.maxDivisions < 2 && (this.maxDivisions = 2);
}
;
_.handleManualMinMax = function handleManualMinMax_0(){
  isNaN_0(this.manualMax) || (this.max_0 = this.manualMax);
  isNaN_0(this.manualMin) || (this.min_0 = this.manualMin);
}
;
_.handleMinMaxNaN = function handleMinMaxNaN_0(){
  isNaN_0(this.maxFromData) && (this.maxFromData = 10);
  isNaN_0(this.minFromData) && (this.minFromData = 1);
}
;
_.setScaleRatio = function setScaleRatio_0(range){
  var length_0, length0;
  length0 = (length_0 = $getLength(this) , length_0 - (this.startPadding + this.endPadding));
  $setScaleRatioLengthOverride(this, length0);
}
;
_.setScaleRatioLengthOverride = function setScaleRatioLengthOverride_0(length_0, range){
  $setScaleRatioLengthOverride(this, length_0);
}
;
_.LogScaleMaxInc = 0;
_.LogScaleMinInc = 0;
_.MaxForCalc = 0;
_.MinForCalc = 0;
_.maxLogForScale = 0;
_.minLogForScale = 0;
var log10 = 0;
var Lcom_domo_charting_scales_ValueScaleLog_2_classLit = createForClass('com.domo.charting.scales', 'ValueScaleLog', 73);
function $getScalePositionForValueStr(this$static, valueStr){
  var index_0;
  if (!!this$static.rowNameIndexMap && valueStr != null) {
    index_0 = castTo($get_4(this$static.rowNameIndexMap, valueStr), 29).value_0;
    if (index_0 >= 0)
      return this$static.isLineType && !!this$static.rowsToDisplay && this$static.rowsToDisplay.size_1() > 1?index_0 * this$static.catAreaWidth:index_0 * this$static.catAreaWidth + this$static.halfAreaWidth;
  }
  return this$static.isLineType && !!this$static.rowsToDisplay && this$static.rowsToDisplay.size_1() > 1?0:this$static.halfAreaWidth;
}

function XYCategoryScale(position, grph){
  CategoryScale.call(this, position, grph, false);
}

defineClass(123, 36, {36:1, 53:1, 123:1}, XYCategoryScale);
_.limitDataIfNeeded = function limitDataIfNeeded_0(numRows, formatPass){
  var cell, curIndex, entry, i, lastName, newRow, numCells, outerIter, parentDisplayName, parentName, row, row$iterator, rowIndex, rowInfos, rowName, rowName$iterator;
  this.rowNameIndexMap = new LinkedHashMap;
  this.rowCells = new ArrayList;
  curIndex = 0;
  lastName = '';
  for (row$iterator = this.graph.data_0.rows_0.iterator(); row$iterator.hasNext_0();) {
    row = castTo(row$iterator.next_1(), 7);
    numCells = $size(row.cellMap);
    for (i = 0; i < numCells; i++) {
      cell = $getCellByCellIndex(row, i);
      if (!!cell && !cell.hidden) {
        rowName = cell.valueStr;
        if (rowName != null) {
          if (!$equals_2(rowName, lastName) && $get_4(this.rowNameIndexMap, rowName) == null) {
            lastName = rowName;
            $put_3(this.rowNameIndexMap, rowName, valueOf(curIndex++));
            $add_1(this.rowCells, cell);
          }
        }
      }
    }
  }
  rowInfos = new ArrayList;
  parentName = $getRow(this.graph.data_0, 0).name_0;
  parentDisplayName = $getRow(this.graph.data_0, 0).altName;
  for (rowName$iterator = (outerIter = (new AbstractMap$1(this.rowNameIndexMap)).this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter)); rowName$iterator.val$outerIter2.hasNext_0();) {
    rowName = (entry = castTo(rowName$iterator.val$outerIter2.next_1(), 44) , castToString(entry.getKey()));
    rowIndex = castTo($get_4(this.rowNameIndexMap, rowName), 29).value_0;
    cell = castTo($get_2(this.rowCells, rowIndex), 16);
    newRow = new ColRowInfo_4(parentName, rowName, 'STRING', rowIndex);
    newRow.parentDisplayName = null;
    parentDisplayName != null && parentDisplayName.length > 0 && (newRow.parentDisplayName = parentDisplayName);
    $setTimeMS_0(newRow, cell.timeMS);
    rowInfos.array[rowInfos.array.length] = newRow;
  }
  this.rowsToDisplay = rowInfos;
  numRows = this.rowsToDisplay.size_1();
  return numRows;
}
;
var Lcom_domo_charting_scales_XYCategoryScale_2_classLit = createForClass('com.domo.charting.scales', 'XYCategoryScale', 123);
function $execute(this$static, timestamp){
  $update(this$static.this$01, timestamp)?(this$static.this$01.requestHandle = this$static.this$01.scheduler.requestAnimationFrame_0(this$static.this$01.callback_0, this$static.this$01.element)):(this$static.this$01.requestHandle = null);
}

function Animation$1(this$0){
  this.this$01 = this$0;
}

defineClass(314, 1, {}, Animation$1);
_.execute = function execute(timestamp){
  $execute(this, timestamp);
}
;
var Lcom_google_gwt_animation_client_Animation$1_2_classLit = createForClass('com.google.gwt.animation.client', 'Animation/1', 314);
defineClass(393, 1, {});
var instance;
var Lcom_google_gwt_animation_client_AnimationScheduler_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler', 393);
defineClass(203, 1, {203:1});
var Lcom_google_gwt_animation_client_AnimationScheduler$AnimationHandle_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationScheduler/AnimationHandle', 203);
function AnimationSchedulerImplStandard(){
}

function cancelImpl(holder){
  $wnd.cancelAnimationFrame(holder.id);
}

function requestImpl(cb, element){
  var callback = $entry(function(){
    var time = now_1();
    cb.execute(time);
  }
  );
  var handle = $wnd.requestAnimationFrame(callback, element);
  return {id:handle};
}

defineClass(343, 393, {}, AnimationSchedulerImplStandard);
_.requestAnimationFrame_0 = function requestAnimationFrame_0(callback, element){
  var handle;
  handle = requestImpl(callback, element);
  return new AnimationSchedulerImplStandard$1(handle);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard', 343);
function AnimationSchedulerImplStandard$1(val$handle){
  this.val$handle2 = val$handle;
}

defineClass(344, 203, {203:1}, AnimationSchedulerImplStandard$1);
_.cancel = function cancel(){
  cancelImpl(this.val$handle2);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplStandard$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplStandard/1', 344);
function $cancelAnimationFrame(this$static, requestId){
  $remove_3(this$static.animationRequests, requestId);
  this$static.animationRequests.array.length == 0 && $cancel_0(this$static.timer);
}

function $updateAnimations(this$static){
  var curAnimations, duration, requestId, requestId$index, requestId$max;
  curAnimations = initUnidimensionalArray(Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit, {396:1, 8:1, 9:1, 13:1}, 204, this$static.animationRequests.array.length, 0, 1);
  curAnimations = castTo($toArray_0(this$static.animationRequests, curAnimations), 396);
  duration = new Duration;
  for (requestId$index = 0 , requestId$max = curAnimations.length; requestId$index < requestId$max; ++requestId$index) {
    requestId = curAnimations[requestId$index];
    $remove_3(this$static.animationRequests, requestId);
    $execute(requestId.callback, duration.start_0);
  }
  this$static.animationRequests.array.length > 0 && $schedule(this$static.timer, max_1(5, 16 - (now_1() - duration.start_0)));
}

function AnimationSchedulerImplTimer(){
  this.animationRequests = new ArrayList;
  this.timer = new AnimationSchedulerImplTimer$1(this);
}

defineClass(345, 393, {}, AnimationSchedulerImplTimer);
_.requestAnimationFrame_0 = function requestAnimationFrame_1(callback, element){
  var requestId;
  requestId = new AnimationSchedulerImplTimer$AnimationHandleImpl(this, callback);
  $add_1(this.animationRequests, requestId);
  this.animationRequests.array.length == 1 && $schedule(this.timer, 16);
  return requestId;
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer', 345);
function $cancel_0(this$static){
  if (!this$static.timerId) {
    return;
  }
  ++this$static.cancelCounter;
  this$static.isRepeating?clearInterval_0(this$static.timerId.value_0):clearTimeout_0(this$static.timerId.value_0);
  this$static.timerId = null;
}

function $schedule(this$static, delayMillis){
  if (delayMillis < 0) {
    throw toJs(new IllegalArgumentException('must be non-negative'));
  }
  !!this$static.timerId && $cancel_0(this$static);
  this$static.isRepeating = false;
  this$static.timerId = valueOf(setTimeout_0(createCallback(this$static, this$static.cancelCounter), delayMillis));
}

function clearInterval_0(timerId){
  $wnd.clearInterval(timerId);
}

function clearTimeout_0(timerId){
  $wnd.clearTimeout(timerId);
}

function createCallback(timer, cancelCounter){
  return $entry(function(){
    timer.fire(cancelCounter);
  }
  );
}

function setTimeout_0(func, time){
  return $wnd.setTimeout(func, time);
}

defineClass(346, 1, {});
_.fire = function fire(scheduleCancelCounter){
  if (scheduleCancelCounter != this.cancelCounter) {
    return;
  }
  this.isRepeating || (this.timerId = null);
  $updateAnimations(this.this$01);
}
;
_.cancelCounter = 0;
_.isRepeating = false;
_.timerId = null;
var Lcom_google_gwt_user_client_Timer_2_classLit = createForClass('com.google.gwt.user.client', 'Timer', 346);
function AnimationSchedulerImplTimer$1(this$0){
  this.this$01 = this$0;
}

defineClass(347, 346, {}, AnimationSchedulerImplTimer$1);
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$1_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/1', 347);
function AnimationSchedulerImplTimer$AnimationHandleImpl(this$0, callback){
  this.this$01 = this$0;
  this.callback = callback;
}

defineClass(204, 203, {203:1, 204:1}, AnimationSchedulerImplTimer$AnimationHandleImpl);
_.cancel = function cancel_0(){
  $cancelAnimationFrame(this.this$01, this);
}
;
var Lcom_google_gwt_animation_client_AnimationSchedulerImplTimer$AnimationHandleImpl_2_classLit = createForClass('com.google.gwt.animation.client', 'AnimationSchedulerImplTimer/AnimationHandleImpl', 204);
function $setElement(this$static, elem){
  this$static.element = elem;
}

function $setHeight_0(this$static, height){
  ($clinit_DOM() , this$static.element).style['height'] = height;
}

function $setWidth_1(this$static, width_0){
  ($clinit_DOM() , this$static.element).style['width'] = width_0;
}

defineClass(381, 1, {});
_.toString_0 = function toString_18(){
  if (!this.element) {
    return '(null handle)';
  }
  return $getString(($clinit_DOM() , this.element));
}
;
var Lcom_google_gwt_user_client_ui_UIObject_2_classLit = createForClass('com.google.gwt.user.client.ui', 'UIObject', 381);
defineClass(382, 381, $intern_4);
_.onBrowserEvent = function onBrowserEvent_0(event_0){
  var related;
  switch ($clinit_DOM() , $eventGetTypeInt(($clinit_DOMImpl() , event_0).type)) {
    case 16:
    case 32:
      related = impl_0.eventGetRelatedTarget(event_0);
      if (!!related && $isOrHasChild(this.element, related)) {
        return;
      }

  }
}
;
var Lcom_google_gwt_user_client_ui_Widget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'Widget', 382);
function $clinit_FocusWidget(){
  $clinit_FocusWidget = emptyMethod;
  $clinit_FocusImpl();
}

defineClass(383, 382, $intern_4);
var Lcom_google_gwt_user_client_ui_FocusWidget_2_classLit = createForClass('com.google.gwt.user.client.ui', 'FocusWidget', 383);
function $getCanvasElement(this$static){
  return $clinit_DOM() , this$static.element;
}

function $setCoordinateSpaceHeight(this$static, height){
  $setHeight_1(($clinit_DOM() , this$static.element), height);
}

function $setCoordinateSpaceWidth(this$static, width_0){
  $setWidth_2(($clinit_DOM() , this$static.element), width_0);
}

function Canvas_0(element){
  $setElement(this, ($clinit_DOM() , element));
}

function createIfSupported(){
  $clinit_FocusWidget();
  var element;
  !detector && (detector = new Canvas$CanvasElementSupportDetectedMaybe);
  element = $createCanvasElement($doc);
  if (!element.getContext) {
    return null;
  }
  return new Canvas_0(element);
}

defineClass(282, 383, $intern_4, Canvas_0);
var detector;
var Lcom_google_gwt_canvas_client_Canvas_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas', 282);
defineClass(384, 1, {});
var Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetector_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas/CanvasElementSupportDetector', 384);
function Canvas$CanvasElementSupportDetectedMaybe(){
}

defineClass(283, 384, {}, Canvas$CanvasElementSupportDetectedMaybe);
var Lcom_google_gwt_canvas_client_Canvas$CanvasElementSupportDetectedMaybe_2_classLit = createForClass('com.google.gwt.canvas.client', 'Canvas/CanvasElementSupportDetectedMaybe', 283);
var Lcom_google_gwt_core_client_JavaScriptObject_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptObject$', 0);
function $arc(this$static, x_0, y_0, radius, startAngle, endAngle, anticlockwise){
  this$static.arc(x_0, y_0, radius, startAngle, endAngle, anticlockwise);
}

function $bezierCurveTo(this$static, cp1x, cp1y, cp2x, cp2y, x_0, y_0){
  this$static.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x_0, y_0);
}

function $clearRect(this$static, x_0, y_0, w, h){
  this$static.clearRect(x_0, y_0, w, h);
}

function $fillText(this$static, text_0, x_0, y_0){
  this$static.fillText && this$static.fillText(text_0, x_0, y_0);
}

function $isPointInPath(this$static, x_0, y_0){
  return this$static.isPointInPath(x_0, y_0);
}

function $lineTo(this$static, x_0, y_0){
  this$static.lineTo(x_0, y_0);
}

function $measureText_1(this$static, text_0){
  return this$static.measureText(text_0);
}

function $moveTo(this$static, x_0, y_0){
  this$static.moveTo(x_0, y_0);
}

function $quadraticCurveTo(this$static, cpx, cpy, x_0, y_0){
  this$static.quadraticCurveTo(cpx, cpy, x_0, y_0);
}

function $rotate(this$static, angle){
  this$static.rotate(angle);
}

function $setFillStyleWeb(this$static, fillStyle){
  this$static.fillStyle = fillStyle;
}

function $setFont_0(this$static, f){
  this$static.font = f;
}

function $setLineCap(this$static, lineCap){
  this$static.lineCap = lineCap;
}

function $setLineJoin(this$static, lineJoin){
  this$static.lineJoin = lineJoin;
}

function $setLineWidth(this$static, lineWidth){
  this$static.lineWidth = lineWidth;
}

function $setStrokeStyleWeb(this$static, strokeStyle){
  this$static.strokeStyle = strokeStyle;
}

function $translate_0(this$static, x_0, y_0){
  this$static.translate(x_0, y_0);
}

function $compareTo(this$static, other){
  return this$static.ordinal - other.ordinal;
}

function Enum(name_0, ordinal){
  this.name_0 = name_0;
  this.ordinal = ordinal;
}

defineClass(117, 1, {8:1, 108:1, 117:1});
_.compareTo = function compareTo(other){
  return $compareTo(this, castTo(other, 117));
}
;
_.equals_0 = function equals_25(other){
  return this === other;
}
;
_.hashCode_0 = function hashCode_3(){
  return getHashCode_0(this);
}
;
_.toString_0 = function toString_19(){
  return this.name_0 != null?this.name_0:'' + this.ordinal;
}
;
_.ordinal = 0;
var Ljava_lang_Enum_2_classLit = createForClass('java.lang', 'Enum', 117);
function $clinit_Context2d$LineCap(){
  $clinit_Context2d$LineCap = emptyMethod;
  BUTT = new Context2d$LineCap('BUTT', 0, 'butt');
  ROUND = new Context2d$LineCap('ROUND', 1, 'round');
  SQUARE = new Context2d$LineCap('SQUARE', 2, 'square');
}

function Context2d$LineCap(enum$name, enum$ordinal, value_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.value_0 = value_0;
}

function values_0(){
  $clinit_Context2d$LineCap();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_canvas_dom_client_Context2d$LineCap_2_classLit, 1), $intern_41, 157, 0, [BUTT, ROUND, SQUARE]);
}

defineClass(157, 117, {157:1, 8:1, 108:1, 117:1}, Context2d$LineCap);
var BUTT, ROUND, SQUARE;
var Lcom_google_gwt_canvas_dom_client_Context2d$LineCap_2_classLit = createForEnum('com.google.gwt.canvas.dom.client', 'Context2d/LineCap', 157, values_0);
function $clinit_Context2d$LineJoin(){
  $clinit_Context2d$LineJoin = emptyMethod;
  BEVEL = new Context2d$LineJoin('BEVEL', 0, 'bevel');
  MITER = new Context2d$LineJoin('MITER', 1, 'miter');
  ROUND_0 = new Context2d$LineJoin('ROUND', 2, 'round');
}

function Context2d$LineJoin(enum$name, enum$ordinal, value_0){
  Enum.call(this, enum$name, enum$ordinal);
  this.value_0 = value_0;
}

function values_1(){
  $clinit_Context2d$LineJoin();
  return stampJavaTypeInfo(getClassLiteralForArray(Lcom_google_gwt_canvas_dom_client_Context2d$LineJoin_2_classLit, 1), $intern_41, 158, 0, [BEVEL, MITER, ROUND_0]);
}

defineClass(158, 117, {158:1, 8:1, 108:1, 117:1}, Context2d$LineJoin);
var BEVEL, MITER, ROUND_0;
var Lcom_google_gwt_canvas_dom_client_Context2d$LineJoin_2_classLit = createForEnum('com.google.gwt.canvas.dom.client', 'Context2d/LineJoin', 158, values_1);
function Duration(){
  this.start_0 = now_1();
}

defineClass(281, 1, {}, Duration);
_.start_0 = 0;
var Lcom_google_gwt_core_client_Duration_2_classLit = createForClass('com.google.gwt.core.client', 'Duration', 281);
function setUncaughtExceptionHandler(handler){
  uncaughtExceptionHandler = handler;
}

var uncaughtExceptionHandler = null;
function RuntimeException(){
  Exception.call(this);
}

function RuntimeException_0(message){
  Exception_0.call(this, message);
}

function RuntimeException_1(cause){
  $$init_3(this);
  this.detailMessage = !cause?null:cause.toString_0();
  this.cause_0 = cause;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

defineClass(105, 38, $intern_23, RuntimeException_1);
var Ljava_lang_RuntimeException_2_classLit = createForClass('java.lang', 'RuntimeException', 105);
defineClass(186, 105, $intern_23);
var Ljava_lang_JsException_2_classLit = createForClass('java.lang', 'JsException', 186);
defineClass(257, 186, $intern_23);
var Lcom_google_gwt_core_client_impl_JavaScriptExceptionBase_2_classLit = createForClass('com.google.gwt.core.client.impl', 'JavaScriptExceptionBase', 257);
function $clinit_JavaScriptException(){
  $clinit_JavaScriptException = emptyMethod;
  NOT_SET = new Object_0;
}

function $ensureInit(this$static){
  var exception;
  if (this$static.message_0 == null) {
    exception = maskUndefined(this$static.e) === maskUndefined(NOT_SET)?null:this$static.e;
    this$static.name_0 = exception == null?'null':instanceOfJso(exception)?getExceptionName0(castToJso(exception)):instanceOfString(exception)?'String':$getName_1(getClass__Ljava_lang_Class___devirtual$(exception));
    this$static.description = this$static.description + ': ' + (instanceOfJso(exception)?getExceptionDescription0(castToJso(exception)):exception + '');
    this$static.message_0 = '(' + this$static.name_0 + ') ' + this$static.description;
  }
}

function JavaScriptException(e){
  $clinit_JavaScriptException();
  $$init_3(this);
  $fillInStackTrace(this);
  this.backingJsObject = e;
  e != null && setPropertySafe(e, '__java$exception', this);
  this.detailMessage = e == null?'null':toString_24(e);
  this.description = '';
  this.e = e;
  this.description = '';
}

function getExceptionDescription0(e){
  return e == null?null:e.message;
}

function getExceptionName0(e){
  return e == null?null:e.name;
}

defineClass(146, 257, {146:1, 8:1, 38:1, 57:1}, JavaScriptException);
_.getMessage = function getMessage_0(){
  $ensureInit(this);
  return this.message_0;
}
;
_.getThrown = function getThrown(){
  return maskUndefined(this.e) === maskUndefined(NOT_SET)?null:this.e;
}
;
var NOT_SET;
var Lcom_google_gwt_core_client_JavaScriptException_2_classLit = createForClass('com.google.gwt.core.client', 'JavaScriptException', 146);
function now_1(){
  if (Date.now) {
    return Date.now();
  }
  return (new Date).getTime();
}

defineClass(363, 1, {});
var Lcom_google_gwt_core_client_Scheduler_2_classLit = createForClass('com.google.gwt.core.client', 'Scheduler', 363);
function $clinit_Impl(){
  $clinit_Impl = emptyMethod;
  !!($clinit_StackTraceCreator() , collector);
}

function apply_0(jsFunction, thisObj, args){
  return jsFunction.apply(thisObj, args);
  var __0;
}

function enter(){
  var now_0;
  if (entryDepth != 0) {
    now_0 = now_1();
    if (now_0 - watchdogEntryDepthLastScheduled > $intern_36) {
      watchdogEntryDepthLastScheduled = now_0;
      watchdogEntryDepthTimerId = $wnd.setTimeout(watchdogEntryDepthRun, 10);
    }
  }
  if (entryDepth++ == 0) {
    $flushEntryCommands(($clinit_SchedulerImpl() , INSTANCE));
    return true;
  }
  return false;
}

function entry_0(jsFunction){
  $clinit_Impl();
  return function(){
    return entry0_0(jsFunction, this, arguments);
    var __0;
  }
  ;
}

function entry0_0(jsFunction, thisObj, args){
  var initialEntry, t;
  initialEntry = enter();
  try {
    if (uncaughtExceptionHandler) {
      try {
        return apply_0(jsFunction, thisObj, args);
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (instanceOf($e0, 57)) {
          t = $e0;
          reportUncaughtException(t);
          return undefined;
        }
         else 
          throw toJs($e0);
      }
    }
     else {
      return apply_0(jsFunction, thisObj, args);
    }
  }
   finally {
    exit(initialEntry);
  }
}

function exit(initialEntry){
  initialEntry && $flushFinallyCommands(($clinit_SchedulerImpl() , INSTANCE));
  --entryDepth;
  if (initialEntry) {
    if (watchdogEntryDepthTimerId != -1) {
      watchdogEntryDepthCancel(watchdogEntryDepthTimerId);
      watchdogEntryDepthTimerId = -1;
    }
  }
}

function reportToBrowser(e){
  $wnd.setTimeout(function(){
    throw e;
  }
  , 0);
}

function reportUncaughtException(e){
  $clinit_Impl();
  var handler;
  handler = uncaughtExceptionHandler;
  if (handler) {
    if (handler == uncaughtExceptionHandlerForTest) {
      return;
    }
    $log_1(handler.val$log2, ($clinit_Level() , e.getMessage()), e);
    return;
  }
  reportToBrowser(instanceOf(e, 146)?castTo(e, 146).getThrown():e);
}

function watchdogEntryDepthCancel(timerId){
  $wnd.clearTimeout(timerId);
}

function watchdogEntryDepthRun(){
  entryDepth != 0 && (entryDepth = 0);
  watchdogEntryDepthTimerId = -1;
}

var entryDepth = 0, uncaughtExceptionHandlerForTest, watchdogEntryDepthLastScheduled = 0, watchdogEntryDepthTimerId = -1;
function $clinit_SchedulerImpl(){
  $clinit_SchedulerImpl = emptyMethod;
  INSTANCE = new SchedulerImpl;
}

function $flushEntryCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.entryCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.entryCommands;
      this$static.entryCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.entryCommands);
    this$static.entryCommands = rescheduled;
  }
}

function $flushFinallyCommands(this$static){
  var oldQueue, rescheduled;
  if (this$static.finallyCommands) {
    rescheduled = null;
    do {
      oldQueue = this$static.finallyCommands;
      this$static.finallyCommands = null;
      rescheduled = runScheduledTasks(oldQueue, rescheduled);
    }
     while (this$static.finallyCommands);
    this$static.finallyCommands = rescheduled;
  }
}

function SchedulerImpl(){
}

function push_0(queue, task){
  !queue && (queue = []);
  queue[queue.length] = task;
  return queue;
}

function runScheduledTasks(tasks, rescheduled){
  var e, i, j, t;
  for (i = 0 , j = tasks.length; i < j; i++) {
    t = tasks[i];
    try {
      t[1]?t[0].$_nullMethod() && (rescheduled = push_0(rescheduled, t)):t[0].$_nullMethod();
    }
     catch ($e0) {
      $e0 = toJava($e0);
      if (instanceOf($e0, 57)) {
        e = $e0;
        reportUncaughtException(e);
      }
       else 
        throw toJs($e0);
    }
  }
  return rescheduled;
}

defineClass(266, 363, {}, SchedulerImpl);
var INSTANCE;
var Lcom_google_gwt_core_client_impl_SchedulerImpl_2_classLit = createForClass('com.google.gwt.core.client.impl', 'SchedulerImpl', 266);
function $clinit_StackTraceCreator(){
  $clinit_StackTraceCreator = emptyMethod;
  var c, enforceLegacy;
  enforceLegacy = !supportsErrorStack();
  c = new StackTraceCreator$CollectorModernNoSourceMap;
  collector = enforceLegacy?new StackTraceCreator$CollectorLegacy:c;
}

function captureStackTrace(error){
  $clinit_StackTraceCreator();
  collector.collect(error);
}

function dropInternalFrames(stackTrace){
  var dropFrameUntilFnName, dropFrameUntilFnName2, i, numberOfFramesToSearch;
  dropFrameUntilFnName = 'captureStackTrace';
  dropFrameUntilFnName2 = 'initializeBackingError';
  numberOfFramesToSearch = min_1(stackTrace.length);
  for (i = numberOfFramesToSearch - 1; i >= 0; i--) {
    if ($equals_2(stackTrace[i].methodName, dropFrameUntilFnName) || $equals_2(stackTrace[i].methodName, dropFrameUntilFnName2)) {
      stackTrace.length >= i + 1 && (stackTrace.splice(0, i + 1) , undefined);
      break;
    }
  }
  return stackTrace;
}

function extractFunctionName(fnName){
  var fnRE = /function(?:\s+([\w$]+))?\s*\(/;
  var match_0 = fnRE.exec(fnName);
  return match_0 && match_0[1] || 'anonymous';
}

function parseInt_0(number){
  $clinit_StackTraceCreator();
  return parseInt(number) || -1;
}

function supportsErrorStack(){
  if (Error.stackTraceLimit > 0) {
    $wnd.Error.stackTraceLimit = Error.stackTraceLimit = 64;
    return true;
  }
  return 'stack' in new Error;
}

var collector;
defineClass(374, 1, {});
var Lcom_google_gwt_core_client_impl_StackTraceCreator$Collector_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/Collector', 374);
function StackTraceCreator$CollectorLegacy(){
}

defineClass(258, 374, {}, StackTraceCreator$CollectorLegacy);
_.collect = function collect(error){
  var seen = {}, name_1;
  var fnStack = [];
  error['fnStack'] = fnStack;
  var callee = arguments.callee.caller;
  while (callee) {
    var name_0 = ($clinit_StackTraceCreator() , callee.name || (callee.name = extractFunctionName(callee.toString())));
    fnStack.push(name_0);
    var keyName = ':' + name_0;
    var withThisName = seen[keyName];
    if (withThisName) {
      var i, j;
      for (i = 0 , j = withThisName.length; i < j; i++) {
        if (withThisName[i] === callee) {
          return;
        }
      }
    }
    (withThisName || (seen[keyName] = [])).push(callee);
    callee = callee.caller;
  }
}
;
_.getStackTrace = function getStackTrace(t){
  var i, length_0, stack_0, stackTrace;
  stack_0 = ($clinit_StackTraceCreator() , t && t['fnStack']?t['fnStack']:[]);
  length_0 = stack_0.length;
  stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_17, 127, length_0, 0, 1);
  for (i = 0; i < length_0; i++) {
    stackTrace[i] = new StackTraceElement(stack_0[i], null, -1);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorLegacy_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorLegacy', 258);
function $parse(this$static, stString){
  var closeParen, col, endFileUrlIndex, fileName, index_0, lastColonIndex, line, location_0, toReturn;
  if (stString.length == 0) {
    return this$static.createSte('Unknown', 'anonymous', -1, -1);
  }
  toReturn = $trim(stString);
  $equals_2(toReturn.substr(0, 3), 'at ') && (toReturn = toReturn.substr(3, toReturn.length - 3));
  toReturn = toReturn.replace(/\[.*?\]/g, '');
  index_0 = toReturn.indexOf('(');
  if (index_0 == -1) {
    index_0 = toReturn.indexOf('@');
    if (index_0 == -1) {
      location_0 = toReturn;
      toReturn = '';
    }
     else {
      location_0 = $trim(toReturn.substr(index_0 + 1, toReturn.length - (index_0 + 1)));
      toReturn = $trim(toReturn.substr(0, index_0));
    }
  }
   else {
    closeParen = toReturn.indexOf(')', index_0);
    location_0 = toReturn.substr(index_0 + 1, closeParen - (index_0 + 1));
    toReturn = $trim(toReturn.substr(0, index_0));
  }
  index_0 = $indexOf(toReturn, fromCodePoint(46));
  index_0 != -1 && (toReturn = toReturn.substr(index_0 + 1, toReturn.length - (index_0 + 1)));
  (toReturn.length == 0 || $equals_2(toReturn, 'Anonymous function')) && (toReturn = 'anonymous');
  lastColonIndex = $lastIndexOf(location_0, fromCodePoint(58));
  endFileUrlIndex = $lastIndexOf_0(location_0, fromCodePoint(58), lastColonIndex - 1);
  line = -1;
  col = -1;
  fileName = 'Unknown';
  if (lastColonIndex != -1 && endFileUrlIndex != -1) {
    fileName = location_0.substr(0, endFileUrlIndex);
    line = parseInt_0(location_0.substr(endFileUrlIndex + 1, lastColonIndex - (endFileUrlIndex + 1)));
    col = parseInt_0(location_0.substr(lastColonIndex + 1, location_0.length - (lastColonIndex + 1)));
  }
  return this$static.createSte(fileName, toReturn, line, col);
}

defineClass(375, 374, {});
_.collect = function collect_0(error){
}
;
_.createSte = function createSte(fileName, method, line, col){
  return new StackTraceElement(method, fileName + '@' + col, line < 0?-1:line);
}
;
_.getStackTrace = function getStackTrace_0(t){
  var addIndex, i, length_0, stack_0, stackTrace, ste, e;
  stack_0 = ($clinit_StackTraceCreator() , e = t.backingJsObject , e && e.stack?e.stack.split('\n'):[]);
  stackTrace = initUnidimensionalArray(Ljava_lang_StackTraceElement_2_classLit, $intern_17, 127, 0, 0, 1);
  addIndex = 0;
  length_0 = stack_0.length;
  if (length_0 == 0) {
    return stackTrace;
  }
  ste = $parse(this, stack_0[0]);
  $equals_2(ste.methodName, 'anonymous') || (stackTrace[addIndex++] = ste);
  for (i = 1; i < length_0; i++) {
    stackTrace[addIndex++] = $parse(this, stack_0[i]);
  }
  return stackTrace;
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModern_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModern', 375);
function StackTraceCreator$CollectorModernNoSourceMap(){
}

defineClass(259, 375, {}, StackTraceCreator$CollectorModernNoSourceMap);
_.createSte = function createSte_0(fileName, method, line, col){
  return new StackTraceElement(method, fileName, -1);
}
;
var Lcom_google_gwt_core_client_impl_StackTraceCreator$CollectorModernNoSourceMap_2_classLit = createForClass('com.google.gwt.core.client.impl', 'StackTraceCreator/CollectorModernNoSourceMap', 259);
function $isOrHasChild(this$static, child){
  return ($clinit_DOMImpl() , impl_0).isOrHasChild(this$static, child);
}

function $getString(this$static){
  return ($clinit_DOMImpl() , impl_0).toString_1(this$static);
}

function $setHeight_1(this$static, height){
  this$static.height = height;
}

function $setWidth_2(this$static, width_0){
  this$static.width = width_0;
}

function $clinit_DOMImpl(){
  $clinit_DOMImpl = emptyMethod;
  impl_0 = castTo(create_com_google_gwt_dom_client_DOMImpl(), 139);
}

function toInt32(val){
  $clinit_DOMImpl();
  return val | 0;
}

defineClass(139, 1, $intern_48);
_.eventGetCurrentTarget = function eventGetCurrentTarget(event_0){
  return event_0.currentTarget;
}
;
_.toString_1 = function toString_20(elem){
  return elem.outerHTML;
}
;
var impl_0;
var Lcom_google_gwt_dom_client_DOMImpl_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImpl', 139);
defineClass(391, 139, $intern_48);
_.eventGetRelatedTarget = function eventGetRelatedTarget(evt){
  return evt.relatedTarget;
}
;
_.eventPreventDefault = function eventPreventDefault(evt){
  evt.preventDefault();
}
;
_.isOrHasChild = function isOrHasChild(parent_0, child){
  return parent_0.contains(child);
}
;
var Lcom_google_gwt_dom_client_DOMImplStandard_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImplStandard', 391);
defineClass(392, 391, $intern_48);
_.eventGetCurrentTarget = function eventGetCurrentTarget_0(event_0){
  return event_0.currentTarget || $wnd;
}
;
var Lcom_google_gwt_dom_client_DOMImplStandardBase_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImplStandardBase', 392);
function DOMImplIE9(){
  $clinit_DOMImpl();
}

defineClass(318, 392, $intern_48, DOMImplIE9);
_.isOrHasChild = function isOrHasChild_0(parent_0, child){
  return isOrHasChildImpl(parent_0, child);
}
;
var Lcom_google_gwt_dom_client_DOMImplIE9_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImplIE9', 318);
function DOMImplMozilla(){
  $clinit_DOMImpl();
}

defineClass(317, 391, $intern_48, DOMImplMozilla);
_.eventGetRelatedTarget = function eventGetRelatedTarget_0(evt){
  var relatedTarget = evt.relatedTarget;
  if (!relatedTarget) {
    return null;
  }
  try {
    var nodeName = relatedTarget.nodeName;
    return relatedTarget;
  }
   catch (e) {
    return null;
  }
}
;
_.isOrHasChild = function isOrHasChild_1(parent_0, child){
  return parent_0 === child || !!(parent_0.compareDocumentPosition(child) & 16);
}
;
_.toString_1 = function toString_21(elem){
  var doc = elem.ownerDocument;
  var temp = elem.cloneNode(true);
  var tempDiv = doc.createElement('DIV');
  tempDiv.appendChild(temp);
  outer = tempDiv.innerHTML;
  temp.innerHTML = '';
  return outer;
}
;
var Lcom_google_gwt_dom_client_DOMImplMozilla_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImplMozilla', 317);
function isOrHasChildImpl(parent_0, child){
  if (parent_0.nodeType != 1 && parent_0.nodeType != 9) {
    return parent_0 == child;
  }
  if (child.nodeType != 1) {
    child = child.parentNode;
    if (!child) {
      return false;
    }
  }
  if (parent_0.nodeType == 9) {
    return parent_0 === child || parent_0.body && parent_0.body.contains(child);
  }
   else {
    return parent_0 === child || parent_0.contains(child);
  }
}

function DOMImplWebkit(){
  $clinit_DOMImpl();
}

defineClass(316, 392, $intern_48, DOMImplWebkit);
var Lcom_google_gwt_dom_client_DOMImplWebkit_2_classLit = createForClass('com.google.gwt.dom.client', 'DOMImplWebkit', 316);
function $createCanvasElement(this$static){
  return ($clinit_DOMImpl() , this$static).createElement('canvas');
}

function throwIfNull(value_0){
  if (null == value_0) {
    throw toJs(new NullPointerException_0('encodedURLComponent cannot be null'));
  }
}

function canSet(array, value_0){
  var elementTypeCategory;
  switch (getElementTypeCategory(array)) {
    case 6:
      return instanceOfString(value_0);
    case 7:
      return instanceOfDouble(value_0);
    case 8:
      return instanceOfBoolean(value_0);
    case 3:
      return Array.isArray(value_0) && (elementTypeCategory = getElementTypeCategory(value_0) , !(elementTypeCategory >= 14 && elementTypeCategory <= 16));
    case 11:
      return value_0 != null && typeof value_0 === 'function';
    case 12:
      return value_0 != null && (typeof value_0 === 'object' || typeof value_0 == 'function');
    case 0:
      return canCast(value_0, array.__elementTypeId$);
    case 2:
      return isJsObjectOrFunction(value_0) && !(value_0.typeMarker === typeMarkerFn);
    case 1:
      return isJsObjectOrFunction(value_0) && !(value_0.typeMarker === typeMarkerFn) || canCast(value_0, array.__elementTypeId$);
    default:return true;
  }
}

function getClassLiteralForArray(clazz, dimensions){
  return getClassLiteralForArray_0(clazz, dimensions);
}

function getElementTypeCategory(array){
  return array.__elementTypeCategory$ == null?10:array.__elementTypeCategory$;
}

function initUnidimensionalArray(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions){
  var result;
  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);
  elementTypeCategory != 10 && stampJavaTypeInfo(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);
  return result;
}

function initializeArrayElementsWithDefaults(elementTypeCategory, length_0){
  var array = new Array(length_0);
  var initValue;
  switch (elementTypeCategory) {
    case 14:
    case 15:
      initValue = 0;
      break;
    case 16:
      initValue = false;
      break;
    default:return array;
  }
  for (var i = 0; i < length_0; ++i) {
    array[i] = initValue;
  }
  return array;
}

function isJavaArray(src_0){
  return Array.isArray(src_0) && src_0.typeMarker === typeMarkerFn;
}

function setCheck(array, index_0, value_0){
  checkCriticalArrayType(value_0 == null || canSet(array, value_0));
  return array[index_0] = value_0;
}

function stampJavaTypeInfo(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array){
  array.___clazz = arrayClass;
  array.castableTypeMap = castableTypeMap;
  array.typeMarker = typeMarkerFn;
  array.__elementTypeId$ = elementTypeId;
  array.__elementTypeCategory$ = elementTypeCategory;
  return array;
}

function stampJavaTypeInfo_0(array, referenceType){
  getElementTypeCategory(referenceType) != 10 && stampJavaTypeInfo(getClass__Ljava_lang_Class___devirtual$(referenceType), referenceType.castableTypeMap, referenceType.__elementTypeId$, getElementTypeCategory(referenceType), array);
  return array;
}

function create(value_0){
  var a0, a1, a2;
  a0 = value_0 & $intern_49;
  a1 = value_0 >> 22 & $intern_49;
  a2 = value_0 < 0?$intern_50:0;
  return create0(a0, a1, a2);
}

function create_0(a){
  return create0(a.l, a.m, a.h);
}

function create0(l, m, h){
  return {l:l, m:m, h:h};
}

function divMod(a, b, computeRemainder){
  var aIsCopy, aIsMinValue, aIsNegative, bpower, c, negative;
  if (b.l == 0 && b.m == 0 && b.h == 0) {
    throw toJs(new ArithmeticException);
  }
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    computeRemainder && (remainder_0 = create0(0, 0, 0));
    return create0(0, 0, 0);
  }
  if (b.h == $intern_32 && b.m == 0 && b.l == 0) {
    return divModByMinValue(a, computeRemainder);
  }
  negative = false;
  if (b.h >> 19 != 0) {
    b = neg(b);
    negative = true;
  }
  bpower = powerOfTwo(b);
  aIsNegative = false;
  aIsMinValue = false;
  aIsCopy = false;
  if (a.h == $intern_32 && a.m == 0 && a.l == 0) {
    aIsMinValue = true;
    aIsNegative = true;
    if (bpower == -1) {
      a = create_0(($clinit_BigLongLib$Const() , MAX_VALUE));
      aIsCopy = true;
      negative = !negative;
    }
     else {
      c = shr(a, bpower);
      negative && negate(c);
      computeRemainder && (remainder_0 = create0(0, 0, 0));
      return c;
    }
  }
   else if (a.h >> 19 != 0) {
    aIsNegative = true;
    a = neg(a);
    aIsCopy = true;
    negative = !negative;
  }
  if (bpower != -1) {
    return divModByShift(a, bpower, negative, aIsNegative, computeRemainder);
  }
  if (compare_21(a, b) < 0) {
    computeRemainder && (aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h)));
    return create0(0, 0, 0);
  }
  return divModHelper(aIsCopy?a:create0(a.l, a.m, a.h), b, negative, aIsNegative, aIsMinValue, computeRemainder);
}

function divModByMinValue(a, computeRemainder){
  if (a.h == $intern_32 && a.m == 0 && a.l == 0) {
    computeRemainder && (remainder_0 = create0(0, 0, 0));
    return create_0(($clinit_BigLongLib$Const() , ONE));
  }
  computeRemainder && (remainder_0 = create0(a.l, a.m, a.h));
  return create0(0, 0, 0);
}

function divModByShift(a, bpower, negative, aIsNegative, computeRemainder){
  var c;
  c = shr(a, bpower);
  negative && negate(c);
  if (computeRemainder) {
    a = maskRight(a, bpower);
    aIsNegative?(remainder_0 = neg(a)):(remainder_0 = create0(a.l, a.m, a.h));
  }
  return c;
}

function divModHelper(a, b, negative, aIsNegative, aIsMinValue, computeRemainder){
  var bshift, gte, quotient, shift_0, a1, a2, a0;
  shift_0 = numberOfLeadingZeros(b) - numberOfLeadingZeros(a);
  bshift = shl(b, shift_0);
  quotient = create0(0, 0, 0);
  while (shift_0 >= 0) {
    gte = trialSubtract(a, bshift);
    if (gte) {
      shift_0 < 22?(quotient.l |= 1 << shift_0 , undefined):shift_0 < 44?(quotient.m |= 1 << shift_0 - 22 , undefined):(quotient.h |= 1 << shift_0 - 44 , undefined);
      if (a.l == 0 && a.m == 0 && a.h == 0) {
        break;
      }
    }
    a1 = bshift.m;
    a2 = bshift.h;
    a0 = bshift.l;
    bshift.h = a2 >>> 1;
    bshift.m = a1 >>> 1 | (a2 & 1) << 21;
    bshift.l = a0 >>> 1 | (a1 & 1) << 21;
    --shift_0;
  }
  negative && negate(quotient);
  if (computeRemainder) {
    if (aIsNegative) {
      remainder_0 = neg(a);
      aIsMinValue && (remainder_0 = sub_0(remainder_0, ($clinit_BigLongLib$Const() , ONE)));
    }
     else {
      remainder_0 = create0(a.l, a.m, a.h);
    }
  }
  return quotient;
}

function maskRight(a, bits){
  var b0, b1, b2;
  if (bits <= 22) {
    b0 = a.l & (1 << bits) - 1;
    b1 = b2 = 0;
  }
   else if (bits <= 44) {
    b0 = a.l;
    b1 = a.m & (1 << bits - 22) - 1;
    b2 = 0;
  }
   else {
    b0 = a.l;
    b1 = a.m;
    b2 = a.h & (1 << bits - 44) - 1;
  }
  return create0(b0, b1, b2);
}

function negate(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_49;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_49;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_50;
  a.l = neg0;
  a.m = neg1;
  a.h = neg2;
}

function numberOfLeadingZeros(a){
  var b1, b2;
  b2 = numberOfLeadingZeros_0(a.h);
  if (b2 == 32) {
    b1 = numberOfLeadingZeros_0(a.m);
    return b1 == 32?numberOfLeadingZeros_0(a.l) + 32:b1 + 20 - 10;
  }
   else {
    return b2 - 12;
  }
}

function powerOfTwo(a){
  var h, l, m;
  l = a.l;
  if ((l & l - 1) != 0) {
    return -1;
  }
  m = a.m;
  if ((m & m - 1) != 0) {
    return -1;
  }
  h = a.h;
  if ((h & h - 1) != 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l == 0) {
    return -1;
  }
  if (h == 0 && m == 0 && l != 0) {
    return numberOfTrailingZeros(l);
  }
  if (h == 0 && m != 0 && l == 0) {
    return numberOfTrailingZeros(m) + 22;
  }
  if (h != 0 && m == 0 && l == 0) {
    return numberOfTrailingZeros(h) + 44;
  }
  return -1;
}

function toDoubleHelper(a){
  return a.l + a.m * $intern_51 + a.h * $intern_52;
}

function trialSubtract(a, b){
  var sum0, sum1, sum2;
  sum2 = a.h - b.h;
  if (sum2 < 0) {
    return false;
  }
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 += sum1 >> 22;
  if (sum2 < 0) {
    return false;
  }
  a.l = sum0 & $intern_49;
  a.m = sum1 & $intern_49;
  a.h = sum2 & $intern_50;
  return true;
}

var remainder_0;
function add_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l + b.l;
  sum1 = a.m + b.m + (sum0 >> 22);
  sum2 = a.h + b.h + (sum1 >> 22);
  return create0(sum0 & $intern_49, sum1 & $intern_49, sum2 & $intern_50);
}

function compare_21(a, b){
  var a0, a1, a2, b0, b1, b2, signA, signB;
  signA = a.h >> 19;
  signB = b.h >> 19;
  if (signA != signB) {
    return signB - signA;
  }
  a2 = a.h;
  b2 = b.h;
  if (a2 != b2) {
    return a2 - b2;
  }
  a1 = a.m;
  b1 = b.m;
  if (a1 != b1) {
    return a1 - b1;
  }
  a0 = a.l;
  b0 = b.l;
  return a0 - b0;
}

function fromDouble(value_0){
  var a0, a1, a2, negative, result;
  if (isNaN(value_0)) {
    return $clinit_BigLongLib$Const() , ZERO;
  }
  if (value_0 < -9223372036854775808) {
    return $clinit_BigLongLib$Const() , MIN_VALUE;
  }
  if (value_0 >= 9223372036854775807) {
    return $clinit_BigLongLib$Const() , MAX_VALUE;
  }
  negative = false;
  if (value_0 < 0) {
    negative = true;
    value_0 = -value_0;
  }
  a2 = 0;
  if (value_0 >= $intern_52) {
    a2 = round_int(value_0 / $intern_52);
    value_0 -= a2 * $intern_52;
  }
  a1 = 0;
  if (value_0 >= $intern_51) {
    a1 = round_int(value_0 / $intern_51);
    value_0 -= a1 * $intern_51;
  }
  a0 = round_int(value_0);
  result = create0(a0, a1, a2);
  negative && negate(result);
  return result;
}

function mul(a, b){
  var a0, a1, a2, a3, a4, b0, b1, b2, b3, b4, c0, c00, c01, c1, c10, c11, c12, c13, c2, c22, c23, c24, p0, p1, p2, p3, p4;
  a0 = a.l & 8191;
  a1 = a.l >> 13 | (a.m & 15) << 9;
  a2 = a.m >> 4 & 8191;
  a3 = a.m >> 17 | (a.h & 255) << 5;
  a4 = (a.h & 1048320) >> 8;
  b0 = b.l & 8191;
  b1 = b.l >> 13 | (b.m & 15) << 9;
  b2 = b.m >> 4 & 8191;
  b3 = b.m >> 17 | (b.h & 255) << 5;
  b4 = (b.h & 1048320) >> 8;
  p0 = a0 * b0;
  p1 = a1 * b0;
  p2 = a2 * b0;
  p3 = a3 * b0;
  p4 = a4 * b0;
  if (b1 != 0) {
    p1 += a0 * b1;
    p2 += a1 * b1;
    p3 += a2 * b1;
    p4 += a3 * b1;
  }
  if (b2 != 0) {
    p2 += a0 * b2;
    p3 += a1 * b2;
    p4 += a2 * b2;
  }
  if (b3 != 0) {
    p3 += a0 * b3;
    p4 += a1 * b3;
  }
  b4 != 0 && (p4 += a0 * b4);
  c00 = p0 & $intern_49;
  c01 = (p1 & 511) << 13;
  c0 = c00 + c01;
  c10 = p0 >> 22;
  c11 = p1 >> 9;
  c12 = (p2 & 262143) << 4;
  c13 = (p3 & 31) << 17;
  c1 = c10 + c11 + c12 + c13;
  c22 = p2 >> 18;
  c23 = p3 >> 5;
  c24 = (p4 & 4095) << 8;
  c2 = c22 + c23 + c24;
  c1 += c0 >> 22;
  c0 &= $intern_49;
  c2 += c1 >> 22;
  c1 &= $intern_49;
  c2 &= $intern_50;
  return create0(c0, c1, c2);
}

function neg(a){
  var neg0, neg1, neg2;
  neg0 = ~a.l + 1 & $intern_49;
  neg1 = ~a.m + (neg0 == 0?1:0) & $intern_49;
  neg2 = ~a.h + (neg0 == 0 && neg1 == 0?1:0) & $intern_50;
  return create0(neg0, neg1, neg2);
}

function shl(a, n){
  var res0, res1, res2;
  n &= 63;
  if (n < 22) {
    res0 = a.l << n;
    res1 = a.m << n | a.l >> 22 - n;
    res2 = a.h << n | a.m >> 22 - n;
  }
   else if (n < 44) {
    res0 = 0;
    res1 = a.l << n - 22;
    res2 = a.m << n - 22 | a.l >> 44 - n;
  }
   else {
    res0 = 0;
    res1 = 0;
    res2 = a.l << n - 44;
  }
  return create0(res0 & $intern_49, res1 & $intern_49, res2 & $intern_50);
}

function shr(a, n){
  var a2, negative, res0, res1, res2;
  n &= 63;
  a2 = a.h;
  negative = (a2 & $intern_32) != 0;
  negative && (a2 |= -1048576);
  if (n < 22) {
    res2 = a2 >> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = negative?$intern_50:0;
    res1 = a2 >> n - 22;
    res0 = a.m >> n - 22 | a2 << 44 - n;
  }
   else {
    res2 = negative?$intern_50:0;
    res1 = negative?$intern_49:0;
    res0 = a2 >> n - 44;
  }
  return create0(res0 & $intern_49, res1 & $intern_49, res2 & $intern_50);
}

function shru(a, n){
  var a2, res0, res1, res2;
  n &= 63;
  a2 = a.h & $intern_50;
  if (n < 22) {
    res2 = a2 >>> n;
    res1 = a.m >> n | a2 << 22 - n;
    res0 = a.l >> n | a.m << 22 - n;
  }
   else if (n < 44) {
    res2 = 0;
    res1 = a2 >>> n - 22;
    res0 = a.m >> n - 22 | a.h << 44 - n;
  }
   else {
    res2 = 0;
    res1 = 0;
    res0 = a2 >>> n - 44;
  }
  return create0(res0 & $intern_49, res1 & $intern_49, res2 & $intern_50);
}

function sub_0(a, b){
  var sum0, sum1, sum2;
  sum0 = a.l - b.l;
  sum1 = a.m - b.m + (sum0 >> 22);
  sum2 = a.h - b.h + (sum1 >> 22);
  return create0(sum0 & $intern_49, sum1 & $intern_49, sum2 & $intern_50);
}

function toDouble(a){
  if (compare_21(a, ($clinit_BigLongLib$Const() , ZERO)) < 0) {
    return -toDoubleHelper(neg(a));
  }
  return a.l + a.m * $intern_51 + a.h * $intern_52;
}

function toInt(a){
  return a.l | a.m << 22;
}

function toString_22(a){
  var digits, rem, res, tenPowerLong, zeroesNeeded;
  if (a.l == 0 && a.m == 0 && a.h == 0) {
    return '0';
  }
  if (a.h == $intern_32 && a.m == 0 && a.l == 0) {
    return '-9223372036854775808';
  }
  if (a.h >> 19 != 0) {
    return '-' + toString_22(neg(a));
  }
  rem = a;
  res = '';
  while (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
    tenPowerLong = create(1000000000);
    rem = divMod(rem, tenPowerLong, true);
    digits = '' + toInt(remainder_0);
    if (!(rem.l == 0 && rem.m == 0 && rem.h == 0)) {
      zeroesNeeded = 9 - digits.length;
      for (; zeroesNeeded > 0; zeroesNeeded--) {
        digits = '0' + digits;
      }
    }
    res = digits + res;
  }
  return res;
}

function xor(a, b){
  return create0(a.l ^ b.l, a.m ^ b.m, a.h ^ b.h);
}

function $clinit_BigLongLib$Const(){
  $clinit_BigLongLib$Const = emptyMethod;
  MAX_VALUE = create0($intern_49, $intern_49, 524287);
  MIN_VALUE = create0(0, 0, $intern_32);
  ONE = create(1);
  create(2);
  ZERO = create(0);
}

var MAX_VALUE, MIN_VALUE, ONE, ZERO;
function toJava(e){
  var javaException;
  if (instanceOf(e, 57)) {
    return e;
  }
  javaException = e && e['__java$exception'];
  if (!javaException) {
    javaException = new JavaScriptException(e);
    captureStackTrace(javaException);
  }
  return javaException;
}

function toJs(t){
  return t.backingJsObject;
}

function add_1(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a + b;
    if ($intern_53 < result && result < $intern_52) {
      return result;
    }
  }
  return createLongEmul(add_0(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function compare_22(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a - b;
    if (!isNaN(result)) {
      return result;
    }
  }
  return compare_21(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b);
}

function createLongEmul(big_0){
  var a2;
  a2 = big_0.h;
  if (a2 == 0) {
    return big_0.l + big_0.m * $intern_51;
  }
  if (a2 == $intern_50) {
    return big_0.l + big_0.m * $intern_51 - $intern_52;
  }
  return big_0;
}

function div(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a / b;
    if ($intern_53 < result && result < $intern_52) {
      return result < 0?$wnd.Math.ceil(result):$wnd.Math.floor(result);
    }
  }
  return createLongEmul(divMod(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b, false));
}

function eq(a, b){
  return compare_22(a, b) == 0;
}

function fromDouble_0(value_0){
  if ($intern_53 < value_0 && value_0 < $intern_52) {
    return value_0 < 0?$wnd.Math.ceil(value_0):$wnd.Math.floor(value_0);
  }
  return createLongEmul(fromDouble(value_0));
}

function gt(a, b){
  return compare_22(a, b) > 0;
}

function gte_0(a, b){
  return compare_22(a, b) >= 0;
}

function isSmallLong0(value_0){
  return typeof value_0 === 'number';
}

function lt(a, b){
  return compare_22(a, b) < 0;
}

function lte(a, b){
  return compare_22(a, b) <= 0;
}

function mul_0(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a * b;
    if ($intern_53 < result && result < $intern_52) {
      return result;
    }
  }
  return createLongEmul(mul(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function neg_0(a){
  var result;
  if (isSmallLong0(a)) {
    result = 0 - a;
    if (!isNaN(result)) {
      return result;
    }
  }
  return createLongEmul(neg(a));
}

function neq(a, b){
  return compare_22(a, b) != 0;
}

function sub_1(a, b){
  var result;
  if (isSmallLong0(a) && isSmallLong0(b)) {
    result = a - b;
    if ($intern_53 < result && result < $intern_52) {
      return result;
    }
  }
  return createLongEmul(sub_0(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function toBigLong(longValue){
  var a0, a1, a3, value_0;
  value_0 = longValue;
  a3 = 0;
  if (value_0 < 0) {
    value_0 += $intern_52;
    a3 = $intern_50;
  }
  a1 = round_int(value_0 / $intern_51);
  a0 = round_int(value_0 - a1 * $intern_51);
  return create0(a0, a1, a3);
}

function toDouble_0(a){
  var d;
  if (isSmallLong0(a)) {
    d = a;
    return d == -0.?0:d;
  }
  return toDouble(a);
}

function toInt_0(a){
  if (isSmallLong0(a)) {
    return a | 0;
  }
  return toInt(a);
}

function toString_23(a){
  if (isSmallLong0(a)) {
    return '' + a;
  }
  return toString_22(a);
}

function xor_0(a, b){
  return createLongEmul(xor(isSmallLong0(a)?toBigLong(a):a, isSmallLong0(b)?toBigLong(b):b));
}

function init(){
  $wnd.setTimeout($entry(assertCompileTimeUserAgent));
  $onModuleLoad_0();
  $clinit_LogConfiguration();
  $onModuleLoad();
  exportAddCSRContainer();
}

function $getLevel(this$static){
  if (this$static.level) {
    return this$static.level;
  }
  return $clinit_Level() , ALL;
}

function $setFormatter(this$static, newFormatter){
  this$static.formatter = newFormatter;
}

function $setLevel(this$static, newLevel){
  this$static.level = newLevel;
}

defineClass(155, 1, {155:1});
var Ljava_util_logging_Handler_2_classLit = createForClass('java.util.logging', 'Handler', 155);
function ConsoleLogHandler(){
  $setFormatter(this, new TextLogFormatter(true));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(249, 155, {155:1}, ConsoleLogHandler);
_.publish = function publish(record){
  var msg;
  if (!window.console || ($getLevel(this) , false)) {
    return;
  }
  msg = $format_8(this.formatter, record);
  $clinit_Level();
  window.console.error(msg);
}
;
var Lcom_google_gwt_logging_client_ConsoleLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'ConsoleLogHandler', 249);
function DevelopmentModeLogHandler(){
  $setFormatter(this, new TextLogFormatter(false));
  $setLevel(this, ($clinit_Level() , ALL));
}

defineClass(250, 155, {155:1}, DevelopmentModeLogHandler);
_.publish = function publish_0(record){
  return;
}
;
var Lcom_google_gwt_logging_client_DevelopmentModeLogHandler_2_classLit = createForClass('com.google.gwt.logging.client', 'DevelopmentModeLogHandler', 250);
function $clinit_LogConfiguration(){
  $clinit_LogConfiguration = emptyMethod;
  impl_1 = new LogConfiguration$LogConfigurationImplRegular;
}

function $onModuleLoad(){
  var log_0;
  $configureClientSideLogging(impl_1);
  if (!uncaughtExceptionHandler) {
    log_0 = getLogger(($ensureNamesAreInitialized(Lcom_google_gwt_logging_client_LogConfiguration_2_classLit) , Lcom_google_gwt_logging_client_LogConfiguration_2_classLit.typeName));
    setUncaughtExceptionHandler(new LogConfiguration$1(log_0));
  }
}

var impl_1;
var Lcom_google_gwt_logging_client_LogConfiguration_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration', null);
function LogConfiguration$1(val$log){
  this.val$log2 = val$log;
}

defineClass(248, 1, {}, LogConfiguration$1);
var Lcom_google_gwt_logging_client_LogConfiguration$1_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/1', 248);
function $configureClientSideLogging(this$static){
  this$static.root = $ensureLogger(getLogManager(), '');
  this$static.root.useParentHandlers = false;
  $setLevels(this$static.root);
  $setDefaultHandlers(this$static.root);
}

function $setDefaultHandlers(l){
  var console_0, dev;
  console_0 = new ConsoleLogHandler;
  $add_1(l.handlers, console_0);
  dev = new DevelopmentModeLogHandler;
  $add_1(l.handlers, dev);
}

function $setLevels(l){
  var level, levelParam, paramsForName;
  levelParam = (ensureListParameterMap() , paramsForName = castTo(listParamMap.get_0('logLevel'), 42) , !paramsForName?null:castToString(paramsForName.get_1(paramsForName.size_1() - 1)));
  level = levelParam == null?null:parse_1(levelParam);
  level?(l.level = level):$setLevel_0(l, ($clinit_Level() , SEVERE));
}

function LogConfiguration$LogConfigurationImplRegular(){
}

defineClass(247, 1, {}, LogConfiguration$LogConfigurationImplRegular);
var Lcom_google_gwt_logging_client_LogConfiguration$LogConfigurationImplRegular_2_classLit = createForClass('com.google.gwt.logging.client', 'LogConfiguration/LogConfigurationImplRegular', 247);
defineClass(385, 1, {});
var Ljava_util_logging_Formatter_2_classLit = createForClass('java.util.logging', 'Formatter', 385);
defineClass(386, 385, {});
var Lcom_google_gwt_logging_impl_FormatterImpl_2_classLit = createForClass('com.google.gwt.logging.impl', 'FormatterImpl', 386);
function $format_8(this$static, event_0){
  var message, date, s;
  message = new StringBuilder;
  $append_3(message, (date = new Date_4(event_0.millis) , s = new StringBuilder , $append_3(s, $toString_3(date)) , s.string += ' ' , $append_3(s, event_0.loggerName) , s.string += '\n' , s.string += 'SEVERE' , s.string += ': ' , s.string));
  $append_3(message, event_0.msg);
  if (this$static.showStackTraces && !!event_0.thrown) {
    message.string += '\n';
    $printStackTraceImpl(event_0.thrown, new StackTracePrintStream(message), '', '');
  }
  return message.string;
}

function TextLogFormatter(showStackTraces){
  this.showStackTraces = showStackTraces;
}

defineClass(221, 386, {}, TextLogFormatter);
_.showStackTraces = false;
var Lcom_google_gwt_logging_client_TextLogFormatter_2_classLit = createForClass('com.google.gwt.logging.client', 'TextLogFormatter', 221);
defineClass(376, 1, {});
var Ljava_io_OutputStream_2_classLit = createForClass('java.io', 'OutputStream', 376);
function FilterOutputStream(out){
}

defineClass(219, 376, {}, FilterOutputStream);
var Ljava_io_FilterOutputStream_2_classLit = createForClass('java.io', 'FilterOutputStream', 219);
function PrintStream(out){
  FilterOutputStream.call(this, out);
}

defineClass(187, 219, {}, PrintStream);
_.println = function println(s){
}
;
var Ljava_io_PrintStream_2_classLit = createForClass('java.io', 'PrintStream', 187);
function StackTracePrintStream(builder){
  PrintStream.call(this, new FilterOutputStream(null));
  this.builder = builder;
}

defineClass(286, 187, {}, StackTracePrintStream);
_.println = function println_0(str){
  $append_3(this.builder, str);
  $append_3(this.builder, '\n');
}
;
var Lcom_google_gwt_logging_impl_StackTracePrintStream_2_classLit = createForClass('com.google.gwt.logging.impl', 'StackTracePrintStream', 286);
function $clinit_DOM(){
  $clinit_DOM = emptyMethod;
  impl_2 = castTo(create_com_google_gwt_user_client_impl_DOMImpl(), 138);
}

function dispatchEvent_0(evt, elem, listener){
  $clinit_DOM();
  var prevCurrentEvent;
  prevCurrentEvent = currentEvent;
  currentEvent = evt;
  elem == sCaptureElem && $eventGetTypeInt(($clinit_DOMImpl() , evt).type) == 8192 && (sCaptureElem = null);
  listener.onBrowserEvent(evt);
  currentEvent = prevCurrentEvent;
}

var currentEvent = null, impl_2, sCaptureElem;
function $onModuleLoad_0(){
  var allowedModes, currentMode, i;
  currentMode = $doc.compatMode;
  allowedModes = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['CSS1Compat']);
  for (i = 0; i < allowedModes.length; i++) {
    if ($equals_2(allowedModes[i], currentMode)) {
      return;
    }
  }
  allowedModes.length == 1 && $equals_2('CSS1Compat', allowedModes[0]) && $equals_2('BackCompat', currentMode)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\"" + currentMode + '"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' " + currentMode + "').<br>Modify your application's host HTML page doctype, or update your custom " + "'document.compatMode' configuration property settings.";
}

function buildListParamMap(queryString){
  var entry, entry$iterator, key, kv, kvPair, kvPair$array, kvPair$index, kvPair$max, out, qs, val, values, regexp;
  out = new HashMap;
  if (queryString != null && queryString.length > 1) {
    qs = queryString.substr(1, queryString.length - 1);
    for (kvPair$array = $split(qs, '&', 0) , kvPair$index = 0 , kvPair$max = kvPair$array.length; kvPair$index < kvPair$max; ++kvPair$index) {
      kvPair = kvPair$array[kvPair$index];
      kv = $split(kvPair, '=', 2);
      key = kv[0];
      if (key.length == 0) {
        continue;
      }
      val = kv.length > 1?kv[1]:'';
      try {
        val = (throwIfNull(val) , regexp = /\+/g , decodeURIComponent(val.replace(regexp, '%20')));
      }
       catch ($e0) {
        $e0 = toJava($e0);
        if (!instanceOf($e0, 146))
          throw toJs($e0);
      }
      values = castTo(out.get_0(key), 42);
      if (!values) {
        values = new ArrayList;
        out.put(key, values);
      }
      values.add_0(val);
    }
  }
  for (entry$iterator = out.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 44);
    entry.setValue(unmodifiableList(castTo(entry.getValue(), 42)));
  }
  out = new Collections$UnmodifiableMap(out);
  return out;
}

function ensureListParameterMap(){
  var currentQueryString;
  currentQueryString = $wnd.location.search;
  if (!listParamMap || !$equals_2(cachedQueryString, currentQueryString)) {
    listParamMap = buildListParamMap(currentQueryString);
    cachedQueryString = currentQueryString;
  }
}

var cachedQueryString = '', listParamMap;
function $eventGetTypeInt(eventType){
  switch (eventType) {
    case 'blur':
      return 4096;
    case 'change':
      return 1024;
    case 'click':
      return 1;
    case 'dblclick':
      return 2;
    case 'focus':
      return 2048;
    case 'keydown':
      return 128;
    case 'keypress':
      return 256;
    case 'keyup':
      return 512;
    case 'load':
      return 32768;
    case 'losecapture':
      return 8192;
    case 'mousedown':
      return 4;
    case 'mousemove':
      return 64;
    case 'mouseout':
      return 32;
    case 'mouseover':
      return 16;
    case 'mouseup':
      return 8;
    case 'scroll':
      return 16384;
    case 'error':
      return $intern_25;
    case 'DOMMouseScroll':
    case 'mousewheel':
      return $intern_5;
    case 'contextmenu':
      return 262144;
    case 'paste':
      return $intern_32;
    case 'touchstart':
      return 1048576;
    case 'touchmove':
      return 2097152;
    case 'touchend':
      return $intern_51;
    case 'touchcancel':
      return 8388608;
    case 'gesturestart':
      return $intern_54;
    case 'gesturechange':
      return $intern_55;
    case 'gestureend':
      return $intern_56;
    default:return -1;
  }
}

function $maybeInitializeEventSystem(this$static){
  if (!eventSystemIsInitialized) {
    this$static.initEventSystem();
    eventSystemIsInitialized = true;
  }
}

function getEventListener(elem){
  var maybeListener = elem.__listener;
  return !instanceOfJso(maybeListener) && instanceOf(maybeListener, 211)?maybeListener:null;
}

function setEventListener(elem, listener){
  elem.__listener = listener;
}

defineClass(138, 1, $intern_57);
var eventSystemIsInitialized = false;
var Lcom_google_gwt_user_client_impl_DOMImpl_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImpl', 138);
function $clinit_DOMImplStandard(){
  $clinit_DOMImplStandard = emptyMethod;
  bitlessEventDispatchers = {_default_:dispatchEvent_2, dragenter:dispatchDragEvent, dragover:dispatchDragEvent};
  captureEventDispatchers = {click:dispatchCapturedMouseEvent, dblclick:dispatchCapturedMouseEvent, mousedown:dispatchCapturedMouseEvent, mouseup:dispatchCapturedMouseEvent, mousemove:dispatchCapturedMouseEvent, mouseover:dispatchCapturedMouseEvent, mouseout:dispatchCapturedMouseEvent, mousewheel:dispatchCapturedMouseEvent, keydown:dispatchCapturedEvent, keyup:dispatchCapturedEvent, keypress:dispatchCapturedEvent, touchstart:dispatchCapturedMouseEvent, touchend:dispatchCapturedMouseEvent, touchmove:dispatchCapturedMouseEvent, touchcancel:dispatchCapturedMouseEvent, gesturestart:dispatchCapturedMouseEvent, gestureend:dispatchCapturedMouseEvent, gesturechange:dispatchCapturedMouseEvent};
}

function $initEventSystem(){
  dispatchEvent_1 = $entry(dispatchEvent_2);
  dispatchUnhandledEvent = $entry(dispatchUnhandledEvent_0);
  var foreach = foreach_0;
  var bitlessEvents = bitlessEventDispatchers;
  foreach(bitlessEvents, function(e, fn){
    bitlessEvents[e] = $entry(fn);
  }
  );
  var captureEvents_0 = captureEventDispatchers;
  foreach(captureEvents_0, function(e, fn){
    captureEvents_0[e] = $entry(fn);
  }
  );
  foreach(captureEvents_0, function(e, fn){
    $wnd.addEventListener(e, fn, true);
  }
  );
}

function $sinkEventsImpl(elem, bits){
  var chMask = (elem.__eventBits || 0) ^ bits;
  elem.__eventBits = bits;
  if (!chMask)
    return;
  chMask & 1 && (elem.onclick = bits & 1?dispatchEvent_1:null);
  chMask & 2 && (elem.ondblclick = bits & 2?dispatchEvent_1:null);
  chMask & 4 && (elem.onmousedown = bits & 4?dispatchEvent_1:null);
  chMask & 8 && (elem.onmouseup = bits & 8?dispatchEvent_1:null);
  chMask & 16 && (elem.onmouseover = bits & 16?dispatchEvent_1:null);
  chMask & 32 && (elem.onmouseout = bits & 32?dispatchEvent_1:null);
  chMask & 64 && (elem.onmousemove = bits & 64?dispatchEvent_1:null);
  chMask & 128 && (elem.onkeydown = bits & 128?dispatchEvent_1:null);
  chMask & 256 && (elem.onkeypress = bits & 256?dispatchEvent_1:null);
  chMask & 512 && (elem.onkeyup = bits & 512?dispatchEvent_1:null);
  chMask & 1024 && (elem.onchange = bits & 1024?dispatchEvent_1:null);
  chMask & 2048 && (elem.onfocus = bits & 2048?dispatchEvent_1:null);
  chMask & 4096 && (elem.onblur = bits & 4096?dispatchEvent_1:null);
  chMask & 8192 && (elem.onlosecapture = bits & 8192?dispatchEvent_1:null);
  chMask & 16384 && (elem.onscroll = bits & 16384?dispatchEvent_1:null);
  chMask & 32768 && (elem.onload = bits & 32768?dispatchUnhandledEvent:null);
  chMask & $intern_25 && (elem.onerror = bits & $intern_25?dispatchEvent_1:null);
  chMask & $intern_5 && (elem.onmousewheel = bits & $intern_5?dispatchEvent_1:null);
  chMask & 262144 && (elem.oncontextmenu = bits & 262144?dispatchEvent_1:null);
  chMask & $intern_32 && (elem.onpaste = bits & $intern_32?dispatchEvent_1:null);
  chMask & 1048576 && (elem.ontouchstart = bits & 1048576?dispatchEvent_1:null);
  chMask & 2097152 && (elem.ontouchmove = bits & 2097152?dispatchEvent_1:null);
  chMask & $intern_51 && (elem.ontouchend = bits & $intern_51?dispatchEvent_1:null);
  chMask & 8388608 && (elem.ontouchcancel = bits & 8388608?dispatchEvent_1:null);
  chMask & $intern_54 && (elem.ongesturestart = bits & $intern_54?dispatchEvent_1:null);
  chMask & $intern_55 && (elem.ongesturechange = bits & $intern_55?dispatchEvent_1:null);
  chMask & $intern_56 && (elem.ongestureend = bits & $intern_56?dispatchEvent_1:null);
}

function dispatchCapturedEvent(evt){
  $clinit_DOM();
}

function dispatchCapturedMouseEvent(evt){
  $clinit_DOMImplStandard();
  $clinit_DOM();
  return;
}

function dispatchDragEvent(evt){
  ($clinit_DOMImpl() , impl_0).eventPreventDefault(evt);
  dispatchEvent_2(evt);
}

function dispatchEvent_2(evt){
  var element;
  element = getFirstAncestorWithListener(evt);
  if (!element) {
    return;
  }
  dispatchEvent_0(evt, element.nodeType != 1?null:element, getEventListener(element));
}

function dispatchUnhandledEvent_0(evt){
  var element;
  element = ($clinit_DOMImpl() , impl_0).eventGetCurrentTarget(evt);
  element['__gwtLastUnhandledEvent'] = evt.type;
  dispatchEvent_2(evt);
}

function getFirstAncestorWithListener(evt){
  var curElem;
  curElem = ($clinit_DOMImpl() , impl_0).eventGetCurrentTarget(evt);
  while (!!curElem && !getEventListener(curElem)) {
    curElem = curElem.parentNode;
  }
  return curElem;
}

defineClass(389, 138, $intern_57);
_.initEventSystem = function initEventSystem(){
  $initEventSystem();
}
;
_.sinkEvents = function sinkEvents(elem, bits){
  $maybeInitializeEventSystem(this);
  $sinkEventsImpl(elem, bits);
}
;
var bitlessEventDispatchers, captureElem, captureEventDispatchers, dispatchEvent_1, dispatchUnhandledEvent;
var Lcom_google_gwt_user_client_impl_DOMImplStandard_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImplStandard', 389);
defineClass(390, 389, $intern_57);
var Lcom_google_gwt_user_client_impl_DOMImplStandardBase_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImplStandardBase', 390);
function DOMImplIE9_0(){
  $clinit_DOMImplStandard();
}

defineClass(310, 390, $intern_57, DOMImplIE9_0);
var Lcom_google_gwt_user_client_impl_DOMImplIE9_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImplIE9', 310);
function $clinit_DOMImplMozilla(){
  $clinit_DOMImplMozilla = emptyMethod;
  $clinit_DOMImplStandard();
  captureEventDispatchers['DOMMouseScroll'] = dispatchCapturedMouseEvent;
}

function $initSyntheticMouseUpEvents(){
  $wnd.addEventListener('mouseout', $entry(function(evt){
    var cap = ($clinit_DOMImplStandard() , captureElem);
    if (cap && !evt.relatedTarget) {
      if ('html' == evt.target.tagName.toLowerCase()) {
        var muEvent = $doc.createEvent('MouseEvents');
        muEvent.initMouseEvent('mouseup', true, true, $wnd, 0, evt.screenX, evt.screenY, evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, evt.metaKey, evt.button, null);
        cap.dispatchEvent(muEvent);
      }
    }
  }
  ), true);
}

function DOMImplMozilla_0(){
  $clinit_DOMImplMozilla();
}

defineClass(311, 389, $intern_57, DOMImplMozilla_0);
_.initEventSystem = function initEventSystem_0(){
  $initEventSystem();
  $initSyntheticMouseUpEvents();
}
;
_.sinkEvents = function sinkEvents_0(elem, bits){
  $maybeInitializeEventSystem(this);
  $sinkEventsImpl(elem, bits);
  bits & $intern_5 && elem.addEventListener('DOMMouseScroll', ($clinit_DOMImplStandard() , dispatchEvent_1), false);
}
;
var Lcom_google_gwt_user_client_impl_DOMImplMozilla_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImplMozilla', 311);
function DOMImplWebkit_0(){
  $clinit_DOMImplStandard();
}

defineClass(312, 390, $intern_57, DOMImplWebkit_0);
var Lcom_google_gwt_user_client_impl_DOMImplWebkit_2_classLit = createForClass('com.google.gwt.user.client.impl', 'DOMImplWebkit', 312);
function foreach_0(map_0, fn){
  for (var e in map_0) {
    map_0.hasOwnProperty(e) && fn(e, map_0[e]);
  }
}

function $clinit_FocusImpl(){
  $clinit_FocusImpl = emptyMethod;
  implPanel = castTo(create_com_google_gwt_user_client_ui_impl_FocusImpl(), 136);
  instanceOf(implPanel, 172)?new FocusImpl:implPanel;
}

function FocusImpl(){
  $clinit_FocusImpl();
}

defineClass(136, 1, {136:1}, FocusImpl);
var implPanel;
var Lcom_google_gwt_user_client_ui_impl_FocusImpl_2_classLit = createForClass('com.google.gwt.user.client.ui.impl', 'FocusImpl', 136);
function FocusImplIE6(){
  $clinit_FocusImpl();
}

defineClass(308, 136, {136:1}, FocusImplIE6);
var Lcom_google_gwt_user_client_ui_impl_FocusImplIE6_2_classLit = createForClass('com.google.gwt.user.client.ui.impl', 'FocusImplIE6', 308);
function FocusImplStandard(){
  $clinit_FocusImpl();
}

defineClass(172, 136, $intern_58, FocusImplStandard);
var Lcom_google_gwt_user_client_ui_impl_FocusImplStandard_2_classLit = createForClass('com.google.gwt.user.client.ui.impl', 'FocusImplStandard', 172);
function FocusImplSafari(){
  $clinit_FocusImpl();
}

defineClass(309, 172, $intern_58, FocusImplSafari);
var Lcom_google_gwt_user_client_ui_impl_FocusImplSafari_2_classLit = createForClass('com.google.gwt.user.client.ui.impl', 'FocusImplSafari', 309);
function assertCompileTimeUserAgent(){
  var compileTimeValue, impl, runtimeValue;
  impl = castTo(create_com_google_gwt_useragent_client_UserAgent(), 184);
  compileTimeValue = impl.getCompileTimeValue();
  runtimeValue = impl.getRuntimeValue();
  if (!$equals_2(compileTimeValue, runtimeValue)) {
    throw toJs(new UserAgentAsserter$UserAgentAssertionError(compileTimeValue, runtimeValue));
  }
}

function Error_0(message, cause){
  $$init_3(this);
  this.cause_0 = cause;
  this.detailMessage = message;
  $fillInStackTrace(this);
  this.initializeBackingError();
}

defineClass(185, 57, $intern_22);
var Ljava_lang_Error_2_classLit = createForClass('java.lang', 'Error', 185);
defineClass(103, 185, $intern_22);
var Ljava_lang_AssertionError_2_classLit = createForClass('java.lang', 'AssertionError', 103);
function UserAgentAsserter$UserAgentAssertionError(compileTimeValue, runtimeValue){
  Error_0.call(this, 'Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (' + compileTimeValue + ') ' + 'does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.' == null?'null':toString_24('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (' + compileTimeValue + ') ' + 'does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.'), instanceOf('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (' + compileTimeValue + ') ' + 'does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 57)?castTo('Possible problem with your *.gwt.xml module file.\nThe compile time user.agent value (' + compileTimeValue + ') ' + 'does not match the runtime user.agent value (' + runtimeValue + ').\n' + 'Expect more errors.', 57):null);
}

defineClass(246, 103, $intern_22, UserAgentAsserter$UserAgentAssertionError);
var Lcom_google_gwt_useragent_client_UserAgentAsserter$UserAgentAssertionError_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentAsserter/UserAgentAssertionError', 246);
function UserAgentImplGecko1_8(){
}

defineClass(270, 1, $intern_59, UserAgentImplGecko1_8);
_.getCompileTimeValue = function getCompileTimeValue(){
  return 'gecko1_8';
}
;
_.getRuntimeValue = function getRuntimeValue(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
var Lcom_google_gwt_useragent_client_UserAgentImplGecko1_18_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentImplGecko1_8', 270);
function UserAgentImplIe10(){
}

defineClass(268, 1, $intern_59, UserAgentImplIe10);
_.getCompileTimeValue = function getCompileTimeValue_0(){
  return 'ie10';
}
;
_.getRuntimeValue = function getRuntimeValue_0(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
var Lcom_google_gwt_useragent_client_UserAgentImplIe10_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentImplIe10', 268);
function UserAgentImplIe9(){
}

defineClass(267, 1, $intern_59, UserAgentImplIe9);
_.getCompileTimeValue = function getCompileTimeValue_1(){
  return 'ie9';
}
;
_.getRuntimeValue = function getRuntimeValue_1(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
var Lcom_google_gwt_useragent_client_UserAgentImplIe9_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentImplIe9', 267);
function UserAgentImplSafari(){
}

defineClass(269, 1, $intern_59, UserAgentImplSafari);
_.getCompileTimeValue = function getCompileTimeValue_2(){
  return 'safari';
}
;
_.getRuntimeValue = function getRuntimeValue_2(){
  var ua = navigator.userAgent.toLowerCase();
  var docMode = $doc.documentMode;
  if (function(){
    return ua.indexOf('webkit') != -1;
  }
  ())
    return 'safari';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 10 && docMode < 11;
  }
  ())
    return 'ie10';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 9 && docMode < 11;
  }
  ())
    return 'ie9';
  if (function(){
    return ua.indexOf('msie') != -1 && docMode >= 8 && docMode < 11;
  }
  ())
    return 'ie8';
  if (function(){
    return ua.indexOf('gecko') != -1 || docMode >= 11;
  }
  ())
    return 'gecko1_8';
  return 'unknown';
}
;
var Lcom_google_gwt_useragent_client_UserAgentImplSafari_2_classLit = createForClass('com.google.gwt.useragent.client', 'UserAgentImplSafari', 269);
function $charAt(this$static, index_0){
  return $charAt_0(this$static.string, index_0);
}

function AbstractStringBuilder(string){
  this.string = string;
}

defineClass(167, 1, {215:1});
_.toString_0 = function toString_25(){
  return this.string;
}
;
var Ljava_lang_AbstractStringBuilder_2_classLit = createForClass('java.lang', 'AbstractStringBuilder', 167);
function ArithmeticException(){
  RuntimeException_0.call(this, 'divide by zero');
}

defineClass(264, 105, $intern_23, ArithmeticException);
var Ljava_lang_ArithmeticException_2_classLit = createForClass('java.lang', 'ArithmeticException', 264);
function IndexOutOfBoundsException(message){
  RuntimeException_0.call(this, message);
}

defineClass(154, 105, $intern_23, IndexOutOfBoundsException);
var Ljava_lang_IndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'IndexOutOfBoundsException', 154);
function ArrayIndexOutOfBoundsException(msg){
  IndexOutOfBoundsException.call(this, msg);
}

defineClass(362, 154, $intern_23, ArrayIndexOutOfBoundsException);
var Ljava_lang_ArrayIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'ArrayIndexOutOfBoundsException', 362);
function ArrayStoreException(){
  RuntimeException.call(this);
}

defineClass(263, 105, $intern_23, ArrayStoreException);
var Ljava_lang_ArrayStoreException_2_classLit = createForClass('java.lang', 'ArrayStoreException', 263);
function $clinit_Boolean(){
  $clinit_Boolean = emptyMethod;
  FALSE_0 = ($clinit_Boolean() , false);
}

function $compareTo_0(this$static, b){
  return compare_23((checkCriticalNotNull(this$static) , this$static), (checkCriticalNotNull(b) , b));
}

function compare_23(x_0, y_0){
  $clinit_Boolean();
  return x_0 == y_0?0:x_0?1:-1;
}

function compareTo_Ljava_lang_Object__I__devirtual$(this$static, other){
  $clinit_Boolean();
  return instanceOfString(this$static)?$compareTo_4(this$static, castToString(other)):instanceOfDouble(this$static)?$compareTo_1(this$static, castToDouble(other)):instanceOfBoolean(this$static)?$compareTo_0(this$static, castToBoolean(other)):this$static.compareTo(other);
}

booleanCastMap = {8:1, 251:1, 108:1};
var FALSE_0;
var Ljava_lang_Boolean_2_classLit = createForClass('java.lang', 'Boolean', 251);
function digit(c, radix){
  if (radix < 2 || radix > 36) {
    return -1;
  }
  if (c >= 48 && c < 48 + (radix < 10?radix:10)) {
    return c - 48;
  }
  if (c >= 97 && c < radix + 97 - 10) {
    return c - 97 + 10;
  }
  if (c >= 65 && c < radix + 65 - 10) {
    return c - 65 + 10;
  }
  return -1;
}

function ClassCastException(){
  RuntimeException.call(this);
}

defineClass(252, 105, $intern_23, ClassCastException);
var Ljava_lang_ClassCastException_2_classLit = createForClass('java.lang', 'ClassCastException', 252);
function __parseAndValidateDouble(s){
  floatRegex == null && (floatRegex = /^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/);
  if (!floatRegex.test(s)) {
    throw toJs(new NumberFormatException('For input string: "' + s + '"'));
  }
  return parseFloat(s);
}

function __parseAndValidateInt(s, radix){
  var i, isTooLow, length_0, startIndex, toReturn;
  if (s == null) {
    throw toJs(new NumberFormatException('null'));
  }
  if (radix < 2 || radix > 36) {
    throw toJs(new NumberFormatException('radix ' + radix + ' out of range'));
  }
  length_0 = s.length;
  startIndex = length_0 > 0 && (s.charCodeAt(0) == 45 || s.charCodeAt(0) == 43)?1:0;
  for (i = startIndex; i < length_0; i++) {
    if (digit(s.charCodeAt(i), radix) == -1) {
      throw toJs(new NumberFormatException('For input string: "' + s + '"'));
    }
  }
  toReturn = parseInt(s, radix);
  isTooLow = toReturn < -2147483648;
  if (isNaN(toReturn)) {
    throw toJs(new NumberFormatException('For input string: "' + s + '"'));
  }
   else if (isTooLow || toReturn > $intern_0) {
    throw toJs(new NumberFormatException('For input string: "' + s + '"'));
  }
  return toReturn;
}

function __parseAndValidateLong(s){
  var c, firstTime, head, i, length_0, maxDigits, minValue, negative, orig, radixPower, toReturn;
  if (s == null) {
    throw toJs(new NumberFormatException('null'));
  }
  orig = s;
  length_0 = s.length;
  negative = false;
  if (length_0 > 0) {
    c = s.charCodeAt(0);
    if (c == 45 || c == 43) {
      s = s.substr(1, s.length - 1);
      --length_0;
      negative = c == 45;
    }
  }
  if (length_0 == 0) {
    throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
  }
  while (s.length > 0 && s.charCodeAt(0) == 48) {
    s = s.substr(1, s.length - 1);
    --length_0;
  }
  if (length_0 > ($clinit_Number$__ParseLong() , maxLengthForRadix)[10]) {
    throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
  }
  for (i = 0; i < length_0; i++) {
    if (digit(s.charCodeAt(i), 10) == -1) {
      throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
    }
  }
  toReturn = 0;
  maxDigits = maxDigitsForRadix[10];
  radixPower = maxDigitsRadixPower[10];
  minValue = neg_0(maxValueForRadix[10]);
  firstTime = true;
  head = length_0 % maxDigits;
  if (head > 0) {
    toReturn = -parseInt_1(s.substr(0, head), 10);
    s = s.substr(head, s.length - head);
    length_0 -= head;
    firstTime = false;
  }
  while (length_0 >= maxDigits) {
    head = parseInt_1(s.substr(0, maxDigits), 10);
    s = s.substr(maxDigits, s.length - maxDigits);
    length_0 -= maxDigits;
    if (firstTime) {
      firstTime = false;
    }
     else {
      if (compare_22(toReturn, minValue) < 0) {
        throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
      }
      toReturn = mul_0(toReturn, radixPower);
    }
    toReturn = sub_1(toReturn, head);
  }
  if (compare_22(toReturn, 0) > 0) {
    throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
  }
  if (!negative) {
    toReturn = neg_0(toReturn);
    if (compare_22(toReturn, 0) < 0) {
      throw toJs(new NumberFormatException('For input string: "' + orig + '"'));
    }
  }
  return toReturn;
}

defineClass(166, 1, {8:1, 166:1});
var floatRegex;
var Ljava_lang_Number_2_classLit = createForClass('java.lang', 'Number', 166);
function $compareTo_1(this$static, b){
  return compare_24((checkCriticalNotNull(this$static) , this$static), (checkCriticalNotNull(b) , b));
}

function compare_24(x_0, y_0){
  if (x_0 < y_0) {
    return -1;
  }
  if (x_0 > y_0) {
    return 1;
  }
  if (x_0 == y_0) {
    return 0;
  }
  return isNaN(x_0)?isNaN(y_0)?0:1:-1;
}

function isInfinite(x_0){
  return !isNaN(x_0) && !isFinite(x_0);
}

doubleCastMap = {8:1, 108:1, 217:1, 166:1};
var Ljava_lang_Double_2_classLit = createForClass('java.lang', 'Double', 217);
function IllegalArgumentException(message){
  RuntimeException_0.call(this, message);
}

defineClass(147, 105, $intern_23, IllegalArgumentException);
var Ljava_lang_IllegalArgumentException_2_classLit = createForClass('java.lang', 'IllegalArgumentException', 147);
function IllegalStateException(){
  RuntimeException.call(this);
}

defineClass(260, 105, $intern_23, IllegalStateException);
var Ljava_lang_IllegalStateException_2_classLit = createForClass('java.lang', 'IllegalStateException', 260);
function $compareTo_2(this$static, b){
  return compare_25(this$static.value_0, b.value_0);
}

function Integer(value_0){
  this.value_0 = value_0;
}

function compare_25(x_0, y_0){
  return x_0 < y_0?-1:x_0 > y_0?1:0;
}

function numberOfLeadingZeros_0(i){
  var m, n, y_0;
  if (i < 0) {
    return 0;
  }
   else if (i == 0) {
    return 32;
  }
   else {
    y_0 = -(i >> 16);
    m = y_0 >> 16 & 16;
    n = 16 - m;
    i = i >> m;
    y_0 = i - 256;
    m = y_0 >> 16 & 8;
    n += m;
    i <<= m;
    y_0 = i - 4096;
    m = y_0 >> 16 & 4;
    n += m;
    i <<= m;
    y_0 = i - 16384;
    m = y_0 >> 16 & 2;
    n += m;
    i <<= m;
    y_0 = i >> 14;
    m = y_0 & ~(y_0 >> 1);
    return n + 2 - m;
  }
}

function numberOfTrailingZeros(i){
  var r, rtn;
  if (i == 0) {
    return 32;
  }
   else {
    rtn = 0;
    for (r = 1; (r & i) == 0; r <<= 1) {
      ++rtn;
    }
    return rtn;
  }
}

function valueOf(i){
  var rebase, result;
  if (i > -129 && i < 128) {
    rebase = i + 128;
    result = ($clinit_Integer$BoxedValues() , boxedValues)[rebase];
    !result && (result = boxedValues[rebase] = new Integer(i));
    return result;
  }
  return new Integer(i);
}

defineClass(29, 166, {8:1, 108:1, 29:1, 166:1}, Integer);
_.compareTo = function compareTo_0(b){
  return $compareTo_2(this, castTo(b, 29));
}
;
_.equals_0 = function equals_26(o){
  return instanceOf(o, 29) && castTo(o, 29).value_0 == this.value_0;
}
;
_.hashCode_0 = function hashCode_4(){
  return this.value_0;
}
;
_.toString_0 = function toString_27(){
  return '' + this.value_0;
}
;
_.value_0 = 0;
var Ljava_lang_Integer_2_classLit = createForClass('java.lang', 'Integer', 29);
function $clinit_Integer$BoxedValues(){
  $clinit_Integer$BoxedValues = emptyMethod;
  boxedValues = initUnidimensionalArray(Ljava_lang_Integer_2_classLit, $intern_41, 29, 256, 0, 1);
}

var boxedValues;
function $compareTo_3(this$static, b){
  return compare_26(this$static.value_0, b.value_0);
}

function Long(value_0){
  this.value_0 = value_0;
}

function compare_26(x_0, y_0){
  return compare_22(x_0, y_0) < 0?-1:compare_22(x_0, y_0) > 0?1:0;
}

function valueOf_0(i){
  var rebase, result;
  if (compare_22(i, -129) > 0 && compare_22(i, 128) < 0) {
    rebase = toInt_0(i) + 128;
    result = ($clinit_Long$BoxedValues() , boxedValues_0)[rebase];
    !result && (result = boxedValues_0[rebase] = new Long(i));
    return result;
  }
  return new Long(i);
}

defineClass(78, 166, {8:1, 108:1, 78:1, 166:1}, Long);
_.compareTo = function compareTo_1(b){
  return $compareTo_3(this, castTo(b, 78));
}
;
_.equals_0 = function equals_27(o){
  return instanceOf(o, 78) && eq(castTo(o, 78).value_0, this.value_0);
}
;
_.hashCode_0 = function hashCode_5(){
  return toInt_0(this.value_0);
}
;
_.toString_0 = function toString_28(){
  return '' + toString_23(this.value_0);
}
;
_.value_0 = 0;
var Ljava_lang_Long_2_classLit = createForClass('java.lang', 'Long', 78);
function $clinit_Long$BoxedValues(){
  $clinit_Long$BoxedValues = emptyMethod;
  boxedValues_0 = initUnidimensionalArray(Ljava_lang_Long_2_classLit, $intern_41, 78, 256, 0, 1);
}

var boxedValues_0;
function abs_0(x_0){
  return x_0 < 0?-x_0:x_0;
}

function max_1(x_0, y_0){
  return x_0 > y_0?x_0:y_0;
}

function min_1(x_0){
  return x_0 < 5?x_0:5;
}

function NullPointerException(){
  RuntimeException.call(this);
}

function NullPointerException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(188, 186, $intern_23, NullPointerException, NullPointerException_0);
_.createError = function createError_0(msg){
  return new $wnd.TypeError(msg);
}
;
var Ljava_lang_NullPointerException_2_classLit = createForClass('java.lang', 'NullPointerException', 188);
function $clinit_Number$__ParseLong(){
  $clinit_Number$__ParseLong = emptyMethod;
  var i;
  maxDigitsForRadix = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [-1, -1, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
  maxDigitsRadixPower = initUnidimensionalArray(I_classLit, $intern_33, 41, 37, 15, 1);
  maxLengthForRadix = stampJavaTypeInfo(getClassLiteralForArray(I_classLit, 1), $intern_33, 41, 15, [-1, -1, 63, 40, 32, 28, 25, 23, 21, 20, 19, 19, 18, 18, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13]);
  maxValueForRadix = initUnidimensionalArray(J_classLit, $intern_24, 41, 37, 14, 1);
  for (i = 2; i <= 36; i++) {
    maxDigitsRadixPower[i] = round_int($wnd.Math.pow(i, maxDigitsForRadix[i]));
    maxValueForRadix[i] = div($intern_31, maxDigitsRadixPower[i]);
  }
}

var maxDigitsForRadix, maxDigitsRadixPower, maxLengthForRadix, maxValueForRadix;
function NumberFormatException(message){
  IllegalArgumentException.call(this, message);
}

defineClass(98, 147, {8:1, 38:1, 98:1, 57:1}, NumberFormatException);
var Ljava_lang_NumberFormatException_2_classLit = createForClass('java.lang', 'NumberFormatException', 98);
function StackTraceElement(methodName, fileName, lineNumber){
  this.className = 'Unknown';
  this.methodName = methodName;
  this.fileName = fileName;
  this.lineNumber = lineNumber;
}

defineClass(127, 1, {8:1, 127:1}, StackTraceElement);
_.equals_0 = function equals_28(other){
  var st;
  if (instanceOf(other, 127)) {
    st = castTo(other, 127);
    return this.lineNumber == st.lineNumber && equals_41(this.methodName, st.methodName) && equals_41(this.className, st.className) && equals_41(this.fileName, st.fileName);
  }
  return false;
}
;
_.hashCode_0 = function hashCode_6(){
  return hashCode_12(stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_Object_2_classLit, 1), $intern_9, 1, 5, [valueOf(this.lineNumber), this.className, this.methodName, this.fileName]));
}
;
_.toString_0 = function toString_29(){
  return this.className + '.' + this.methodName + '(' + (this.fileName != null?this.fileName:'Unknown Source') + (this.lineNumber >= 0?':' + this.lineNumber:'') + ')';
}
;
_.lineNumber = 0;
var Ljava_lang_StackTraceElement_2_classLit = createForClass('java.lang', 'StackTraceElement', 127);
function $charAt_0(this$static, index_0){
  return this$static.charCodeAt(index_0);
}

function $compareTo_4(this$static, other){
  return compare_28((checkCriticalNotNull(this$static) , this$static), (checkCriticalNotNull(other) , other));
}

function $concat(this$static, str){
  return checkCriticalNotNull(this$static) , this$static + (checkCriticalNotNull(str) , str);
}

function $endsWith(this$static, suffix){
  var suffixlength;
  suffixlength = suffix.length;
  return $equals_2(this$static.substr(this$static.length - suffixlength, suffixlength), suffix);
}

function $equals_2(this$static, other){
  return checkCriticalNotNull(this$static) , this$static === other;
}

function $equalsIgnoreCase(this$static, other){
  checkCriticalNotNull(this$static);
  if (other == null) {
    return false;
  }
  if ($equals_2(this$static, other)) {
    return true;
  }
  return this$static.length == other.length && $equals_2(this$static.toLowerCase(), other.toLowerCase());
}

function $getChars0(this$static, srcBegin, srcEnd, dst, dstBegin){
  while (srcBegin < srcEnd) {
    dst[dstBegin++] = $charAt_0(this$static, srcBegin++);
  }
}

function $indexOf(this$static, str){
  return this$static.indexOf(str);
}

function $indexOf_0(this$static, str, startIndex){
  return this$static.indexOf(str, startIndex);
}

function $lastIndexOf(this$static, str){
  return this$static.lastIndexOf(str);
}

function $lastIndexOf_0(this$static, str, start_0){
  return this$static.lastIndexOf(str, start_0);
}

function $replace(this$static, from, to){
  var hex, regex, replace;
  hex = (from >>> 0).toString(16);
  regex = '\\u' + $substring('0000', hex.length) + hex;
  replace = String.fromCharCode(to);
  return this$static.replace(new $wnd.RegExp(regex, 'g'), replace);
}

function $replaceAll(this$static, regex, replace){
  replace = translateReplaceString(replace);
  return this$static.replace(new $wnd.RegExp(regex, 'g'), replace);
}

function $split(this$static, regex, maxMatch){
  var compiled, count, lastNonEmpty, lastTrail, matchObj, out, trail;
  compiled = new $wnd.RegExp(regex, 'g');
  out = initUnidimensionalArray(Ljava_lang_String_2_classLit, $intern_18, 2, 0, 6, 1);
  count = 0;
  trail = this$static;
  lastTrail = null;
  while (true) {
    matchObj = compiled.exec(trail);
    if (matchObj == null || trail == '' || count == maxMatch - 1 && maxMatch > 0) {
      out[count] = trail;
      break;
    }
     else {
      out[count] = $substring_0(trail, 0, matchObj.index);
      trail = $substring_0(trail, matchObj.index + matchObj[0].length, trail.length);
      compiled.lastIndex = 0;
      if (lastTrail == trail) {
        out[count] = trail.substr(0, 1);
        trail = trail.substr(1, trail.length - 1);
      }
      lastTrail = trail;
      ++count;
    }
  }
  if (maxMatch == 0 && this$static.length > 0) {
    lastNonEmpty = out.length;
    while (lastNonEmpty > 0 && out[lastNonEmpty - 1] == '') {
      --lastNonEmpty;
    }
    lastNonEmpty < out.length && (out.length = lastNonEmpty , undefined);
  }
  return out;
}

function $startsWith(this$static, prefix){
  return $equals_2(this$static.substr(0, prefix.length), prefix);
}

function $substring(this$static, beginIndex){
  return this$static.substr(beginIndex, this$static.length - beginIndex);
}

function $substring_0(this$static, beginIndex, endIndex){
  return this$static.substr(beginIndex, endIndex - beginIndex);
}

function $toUpperCase(this$static, locale){
  return locale == ($clinit_Locale() , $clinit_Locale() , defaultLocale)?this$static.toLocaleUpperCase():this$static.toUpperCase();
}

function $trim(this$static){
  var end, length_0, start_0;
  length_0 = this$static.length;
  start_0 = 0;
  while (start_0 < length_0 && this$static.charCodeAt(start_0) <= 32) {
    ++start_0;
  }
  end = length_0;
  while (end > start_0 && this$static.charCodeAt(end - 1) <= 32) {
    --end;
  }
  return start_0 > 0 || end < length_0?this$static.substr(start_0, end - start_0):this$static;
}

function fromCharCode(array){
  return String.fromCharCode.apply(null, array);
}

function fromCodePoint(codePoint){
  var hiSurrogate, loSurrogate;
  if (codePoint >= $intern_25) {
    hiSurrogate = 55296 + (codePoint - $intern_25 >> 10 & 1023) & $intern_26;
    loSurrogate = 56320 + (codePoint - $intern_25 & 1023) & $intern_26;
    return String.fromCharCode(hiSurrogate) + ('' + String.fromCharCode(loSurrogate));
  }
   else {
    return String.fromCharCode(codePoint & $intern_26);
  }
}

function translateReplaceString(replaceStr){
  var pos;
  pos = 0;
  while (0 <= (pos = replaceStr.indexOf('\\', pos))) {
    replaceStr.charCodeAt(pos + 1) == 36?(replaceStr = replaceStr.substr(0, pos) + '$' + $substring(replaceStr, ++pos)):(replaceStr = replaceStr.substr(0, pos) + ('' + $substring(replaceStr, ++pos)));
  }
  return replaceStr;
}

function valueOf_1(x_0, count){
  var batchEnd, batchStart, s;
  checkCriticalStringBounds(count, x_0.length);
  s = '';
  for (batchStart = 0; batchStart < count;) {
    batchEnd = batchStart + $intern_12 < count?batchStart + $intern_12:count;
    s += fromCharCode(x_0.slice(batchStart, batchEnd));
    batchStart = batchEnd;
  }
  return s;
}

stringCastMap = {8:1, 215:1, 108:1, 2:1};
var Ljava_lang_String_2_classLit = createForClass('java.lang', 'String', 2);
function $append(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function StringBuffer(){
  AbstractStringBuilder.call(this, '');
}

defineClass(254, 167, {215:1}, StringBuffer);
var Ljava_lang_StringBuffer_2_classLit = createForClass('java.lang', 'StringBuffer', 254);
function $append_0(this$static, x_0){
  this$static.string += String.fromCharCode(x_0);
  return this$static;
}

function $append_1(this$static, x_0){
  this$static.string += x_0;
  return this$static;
}

function $append_2(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function $append_3(this$static, x_0){
  this$static.string += '' + x_0;
  return this$static;
}

function $delete(this$static, start_0, end){
  this$static.string = $substring_0(this$static.string, 0, start_0) + '' + $substring(this$static.string, end);
  return this$static;
}

function StringBuilder(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_0(){
  AbstractStringBuilder.call(this, '');
}

function StringBuilder_1(s){
  AbstractStringBuilder.call(this, (checkCriticalNotNull(s) , s));
}

defineClass(72, 167, {215:1}, StringBuilder, StringBuilder_0, StringBuilder_1);
var Ljava_lang_StringBuilder_2_classLit = createForClass('java.lang', 'StringBuilder', 72);
function StringIndexOutOfBoundsException(message){
  IndexOutOfBoundsException.call(this, message);
}

defineClass(261, 154, $intern_23, StringIndexOutOfBoundsException);
var Ljava_lang_StringIndexOutOfBoundsException_2_classLit = createForClass('java.lang', 'StringIndexOutOfBoundsException', 261);
function $clinit_System(){
  $clinit_System = emptyMethod;
  err = new PrintStream(null);
  out_0 = new PrintStream(null);
}

defineClass(410, 1, {});
var err, out_0;
function UnsupportedOperationException(){
  RuntimeException.call(this);
}

function UnsupportedOperationException_0(message){
  RuntimeException_0.call(this, message);
}

defineClass(90, 105, $intern_23, UnsupportedOperationException, UnsupportedOperationException_0);
var Ljava_lang_UnsupportedOperationException_2_classLit = createForClass('java.lang', 'UnsupportedOperationException', 90);
function $advanceToFind(this$static, o, remove){
  var e, iter;
  for (iter = this$static.iterator(); iter.hasNext_0();) {
    e = iter.next_1();
    if (maskUndefined(o) === maskUndefined(e) || o != null && equals_Ljava_lang_Object__Z__devirtual$(o, e)) {
      remove && iter.remove_1();
      return true;
    }
  }
  return false;
}

function $containsAll(this$static, c){
  var e, e$iterator;
  checkCriticalNotNull(c);
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    if (!this$static.contains_0(e)) {
      return false;
    }
  }
  return true;
}

function $toArray(this$static){
  return this$static.toArray_0(initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, this$static.size_1(), 5, 1));
}

defineClass(109, 1, $intern_60);
_.add_0 = function add_2(o){
  throw toJs(new UnsupportedOperationException_0('Add not supported on this collection'));
}
;
_.addAll = function addAll(c){
  var changed, e, e$iterator;
  checkCriticalNotNull(c);
  changed = false;
  for (e$iterator = c.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    changed = changed | this.add_0(e);
  }
  return changed;
}
;
_.clear_0 = function clear_0(){
  var iter;
  for (iter = this.iterator(); iter.hasNext_0();) {
    iter.next_1();
    iter.remove_1();
  }
}
;
_.contains_0 = function contains_0(o){
  return $advanceToFind(this, o, false);
}
;
_.remove = function remove_0(o){
  return $advanceToFind(this, o, true);
}
;
_.toArray = function toArray(){
  return $toArray(this);
}
;
_.toArray_0 = function toArray_0(a){
  var i, it, result, size_0;
  size_0 = this.size_1();
  a.length < size_0 && (a = (result = new Array(size_0) , stampJavaTypeInfo_0(result, a)));
  it = this.iterator();
  for (i = 0; i < size_0; ++i) {
    setCheck(a, i, it.next_1());
  }
  a.length > size_0 && setCheck(a, size_0, null);
  return a;
}
;
_.toString_0 = function toString_30(){
  var e, e$iterator, joiner;
  joiner = new StringJoiner('[', ']');
  for (e$iterator = this.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    $add_2(joiner, e === this?'(this Collection)':e == null?'null':toString_24(e));
  }
  return !joiner.builder?joiner.emptyValue:joiner.suffix.length == 0?joiner.builder.string:joiner.builder.string + ('' + joiner.suffix);
}
;
var Ljava_util_AbstractCollection_2_classLit = createForClass('java.util', 'AbstractCollection', 109);
function $containsEntry(this$static, entry){
  var key, ourValue, value_0;
  key = entry.getKey();
  value_0 = entry.getValue();
  ourValue = this$static.get_0(key);
  if (!(maskUndefined(value_0) === maskUndefined(ourValue) || value_0 != null && equals_Ljava_lang_Object__Z__devirtual$(value_0, ourValue))) {
    return false;
  }
  if (ourValue == null && !this$static.containsKey(key)) {
    return false;
  }
  return true;
}

function $implFindEntry(this$static, key, remove){
  var entry, iter, k;
  for (iter = this$static.entrySet_0().iterator(); iter.hasNext_0();) {
    entry = castTo(iter.next_1(), 44);
    k = entry.getKey();
    if (maskUndefined(key) === maskUndefined(k) || key != null && equals_Ljava_lang_Object__Z__devirtual$(key, k)) {
      if (remove) {
        entry = new AbstractMap$SimpleEntry(entry.getKey(), entry.getValue());
        iter.remove_1();
      }
      return entry;
    }
  }
  return null;
}

function $putAll(this$static, map_0){
  var e, e$iterator;
  checkCriticalNotNull(map_0);
  for (e$iterator = map_0.entrySet_0().iterator(); e$iterator.hasNext_0();) {
    e = castTo(e$iterator.next_1(), 44);
    this$static.put(e.getKey(), e.getValue());
  }
}

function $toString_2(this$static, o){
  return o === this$static?'(this Map)':o == null?'null':toString_24(o);
}

function getEntryValueOrNull(entry){
  return !entry?null:entry.getValue();
}

defineClass(380, 1, $intern_61);
_.clear_0 = function clear_1(){
  this.entrySet_0().clear_0();
}
;
_.containsEntry = function containsEntry(entry){
  return $containsEntry(this, entry);
}
;
_.containsKey = function containsKey(key){
  return !!$implFindEntry(this, key, false);
}
;
_.equals_0 = function equals_29(obj){
  var entry, entry$iterator, otherMap;
  if (obj === this) {
    return true;
  }
  if (!instanceOf(obj, 68)) {
    return false;
  }
  otherMap = castTo(obj, 68);
  if (this.size_1() != otherMap.size_1()) {
    return false;
  }
  for (entry$iterator = otherMap.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 44);
    if (!this.containsEntry(entry)) {
      return false;
    }
  }
  return true;
}
;
_.get_0 = function get_0(key){
  return getEntryValueOrNull($implFindEntry(this, key, false));
}
;
_.hashCode_0 = function hashCode_7(){
  return hashCode_13(this.entrySet_0());
}
;
_.keySet_0 = function keySet(){
  return new AbstractMap$1(this);
}
;
_.put = function put(key, value_0){
  throw toJs(new UnsupportedOperationException_0('Put not supported on this map'));
}
;
_.putAll = function putAll(map_0){
  $putAll(this, map_0);
}
;
_.remove_0 = function remove_1(key){
  return getEntryValueOrNull($implFindEntry(this, key, true));
}
;
_.size_1 = function size_1(){
  return this.entrySet_0().size_1();
}
;
_.toString_0 = function toString_31(){
  var entry, entry$iterator, joiner;
  joiner = new StringJoiner('{', '}');
  for (entry$iterator = this.entrySet_0().iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 44);
    $add_2(joiner, $toString_2(this, entry.getKey()) + '=' + $toString_2(this, entry.getValue()));
  }
  return !joiner.builder?joiner.emptyValue:joiner.suffix.length == 0?joiner.builder.string:joiner.builder.string + ('' + joiner.suffix);
}
;
var Ljava_util_AbstractMap_2_classLit = createForClass('java.util', 'AbstractMap', 380);
function $containsKey(this$static, key){
  return instanceOfString(key)?$hasStringValue(this$static, key):!!$getEntry(this$static.hashCodeMap, key);
}

function $containsValue(this$static, value_0){
  return $containsValue_0(this$static, value_0, this$static.stringMap) || $containsValue_0(this$static, value_0, this$static.hashCodeMap);
}

function $containsValue_0(this$static, value_0, entries){
  var entry, entry$iterator;
  for (entry$iterator = entries.iterator(); entry$iterator.hasNext_0();) {
    entry = castTo(entry$iterator.next_1(), 44);
    if (this$static.equals_1(value_0, entry.getValue())) {
      return true;
    }
  }
  return false;
}

function $get_1(this$static, key){
  return instanceOfString(key)?$getStringValue(this$static, key):getEntryValueOrNull($getEntry(this$static.hashCodeMap, key));
}

function $getStringValue(this$static, key){
  return key == null?getEntryValueOrNull($getEntry(this$static.hashCodeMap, null)):$get_3(this$static.stringMap, key);
}

function $hasStringValue(this$static, key){
  return key == null?!!$getEntry(this$static.hashCodeMap, null):$contains_0(this$static.stringMap, key);
}

function $put_0(this$static, key, value_0){
  return instanceOfString(key)?$putStringValue(this$static, key, value_0):$put_1(this$static.hashCodeMap, key, value_0);
}

function $putStringValue(this$static, key, value_0){
  return key == null?$put_1(this$static.hashCodeMap, null, value_0):$put_2(this$static.stringMap, key, value_0);
}

function $remove(this$static, key){
  return instanceOfString(key)?key == null?$remove_5(this$static.hashCodeMap, null):$remove_6(this$static.stringMap, key):$remove_5(this$static.hashCodeMap, key);
}

function $reset_5(this$static){
  var modCount;
  this$static.hashCodeMap = new InternalHashCodeMap(this$static);
  this$static.stringMap = new InternalStringMap(this$static);
  modCount = this$static['_gwt_modCount'] | 0;
  this$static['_gwt_modCount'] = modCount + 1;
}

function $size(this$static){
  return this$static.hashCodeMap.size_0 + this$static.stringMap.size_0;
}

defineClass(170, 380, $intern_61);
_.clear_0 = function clear_2(){
  $reset_5(this);
}
;
_.containsKey = function containsKey_0(key){
  return $containsKey(this, key);
}
;
_.entrySet_0 = function entrySet(){
  return new AbstractHashMap$EntrySet(this);
}
;
_.get_0 = function get_1(key){
  return $get_1(this, key);
}
;
_.put = function put_0(key, value_0){
  return $put_0(this, key, value_0);
}
;
_.remove_0 = function remove_2(key){
  return $remove(this, key);
}
;
_.size_1 = function size_2(){
  return $size(this);
}
;
var Ljava_util_AbstractHashMap_2_classLit = createForClass('java.util', 'AbstractHashMap', 170);
defineClass(379, 109, $intern_62);
_.equals_0 = function equals_30(o){
  var other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 126)) {
    return false;
  }
  other = castTo(o, 126);
  if (other.size_1() != this.size_1()) {
    return false;
  }
  return $containsAll(this, other);
}
;
_.hashCode_0 = function hashCode_8(){
  return hashCode_13(this);
}
;
var Ljava_util_AbstractSet_2_classLit = createForClass('java.util', 'AbstractSet', 379);
function $contains(this$static, o){
  if (instanceOf(o, 44)) {
    return $containsEntry(this$static.this$01, castTo(o, 44));
  }
  return false;
}

function AbstractHashMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(32, 379, $intern_62, AbstractHashMap$EntrySet);
_.clear_0 = function clear_3(){
  this.this$01.clear_0();
}
;
_.contains_0 = function contains_1(o){
  return $contains(this, o);
}
;
_.iterator = function iterator_0(){
  return new AbstractHashMap$EntrySetIterator(this.this$01);
}
;
_.remove = function remove_3(entry){
  var key;
  if ($contains(this, entry)) {
    key = castTo(entry, 44).getKey();
    this.this$01.remove_0(key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_3(){
  return this.this$01.size_1();
}
;
var Ljava_util_AbstractHashMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySet', 32);
function $computeHasNext(this$static){
  if (this$static.current.hasNext_0()) {
    return true;
  }
  if (this$static.current != this$static.stringMapEntries) {
    return false;
  }
  this$static.current = new InternalHashCodeMap$1(this$static.this$01.hashCodeMap);
  return this$static.current.hasNext_0();
}

function $next_1(this$static){
  var rv;
  checkStructuralChange(this$static.this$01, this$static);
  checkCriticalElement(this$static.hasNext);
  this$static.last = this$static.current;
  rv = castTo(this$static.current.next_1(), 44);
  this$static.hasNext = $computeHasNext(this$static);
  return rv;
}

function $remove_0(this$static){
  checkCriticalState(!!this$static.last);
  checkStructuralChange(this$static.this$01, this$static);
  this$static.last.remove_1();
  this$static.last = null;
  this$static.hasNext = $computeHasNext(this$static);
  recordLastKnownStructure(this$static.this$01, this$static);
}

function AbstractHashMap$EntrySetIterator(this$0){
  var modCount;
  this.this$01 = this$0;
  this.stringMapEntries = new InternalStringMap$1(this.this$01.stringMap);
  this.current = this.stringMapEntries;
  this.hasNext = $computeHasNext(this);
  modCount = this$0['_gwt_modCount'];
  this['_gwt_modCount'] = modCount;
}

defineClass(33, 1, {}, AbstractHashMap$EntrySetIterator);
_.next_1 = function next_0(){
  return $next_1(this);
}
;
_.hasNext_0 = function hasNext(){
  return this.hasNext;
}
;
_.remove_1 = function remove_4(){
  $remove_0(this);
}
;
_.hasNext = false;
var Ljava_util_AbstractHashMap$EntrySetIterator_2_classLit = createForClass('java.util', 'AbstractHashMap/EntrySetIterator', 33);
function $sort_0(this$static, c){
  var a, i;
  a = this$static.toArray();
  mergeSort(a, 0, a.length, c);
  for (i = 0; i < a.length; i++) {
    this$static.set_0(i, a[i]);
  }
}

defineClass(189, 109, $intern_63);
_.sort_0 = function sort_2(c){
  $sort_0(this, c);
}
;
_.add_1 = function add_3(index_0, element){
  throw toJs(new UnsupportedOperationException_0('Add not supported on this list'));
}
;
_.add_0 = function add_4(obj){
  this.add_1(this.size_1(), obj);
  return true;
}
;
_.clear_0 = function clear_4(){
  this.removeRange(0, this.size_1());
}
;
_.equals_0 = function equals_31(o){
  var elem, elem$iterator, elemOther, iterOther, other;
  if (o === this) {
    return true;
  }
  if (!instanceOf(o, 42)) {
    return false;
  }
  other = castTo(o, 42);
  if (this.size_1() != other.size_1()) {
    return false;
  }
  iterOther = other.iterator();
  for (elem$iterator = this.iterator(); elem$iterator.hasNext_0();) {
    elem = elem$iterator.next_1();
    elemOther = iterOther.next_1();
    if (!(maskUndefined(elem) === maskUndefined(elemOther) || elem != null && equals_Ljava_lang_Object__Z__devirtual$(elem, elemOther))) {
      return false;
    }
  }
  return true;
}
;
_.hashCode_0 = function hashCode_9(){
  return hashCode_14(this);
}
;
_.indexOf_0 = function indexOf(toFind){
  var i, n;
  for (i = 0 , n = this.size_1(); i < n; ++i) {
    if (equals_41(toFind, this.get_1(i))) {
      return i;
    }
  }
  return -1;
}
;
_.iterator = function iterator_1(){
  return new AbstractList$IteratorImpl(this);
}
;
_.listIterator = function listIterator(){
  return new AbstractList$ListIteratorImpl(this, 0);
}
;
_.listIterator_0 = function listIterator_0(from){
  return new AbstractList$ListIteratorImpl(this, from);
}
;
_.remove_2 = function remove_5(index_0){
  throw toJs(new UnsupportedOperationException_0('Remove not supported on this list'));
}
;
_.removeRange = function removeRange(fromIndex, endIndex){
  var i, iter;
  iter = new AbstractList$ListIteratorImpl(this, fromIndex);
  for (i = fromIndex; i < endIndex; ++i) {
    checkCriticalElement(iter.i < iter.this$01_0.size_1());
    iter.this$01_0.get_1(iter.last = iter.i++);
    $remove_1(iter);
  }
}
;
_.set_0 = function set_1(index_0, o){
  throw toJs(new UnsupportedOperationException_0('Set not supported on this list'));
}
;
_.subList = function subList(fromIndex, toIndex){
  return new AbstractList$SubList(this, fromIndex, toIndex);
}
;
var Ljava_util_AbstractList_2_classLit = createForClass('java.util', 'AbstractList', 189);
function $hasNext(this$static){
  return this$static.i < this$static.this$01_0.size_1();
}

function $next_2(this$static){
  checkCriticalElement(this$static.i < this$static.this$01_0.size_1());
  return this$static.this$01_0.get_1(this$static.last = this$static.i++);
}

function $remove_1(this$static){
  checkCriticalState(this$static.last != -1);
  this$static.this$01_0.remove_2(this$static.last);
  this$static.i = this$static.last;
  this$static.last = -1;
}

function AbstractList$IteratorImpl(this$0){
  this.this$01_0 = this$0;
}

defineClass(220, 1, {}, AbstractList$IteratorImpl);
_.hasNext_0 = function hasNext_0(){
  return $hasNext(this);
}
;
_.next_1 = function next_1(){
  return $next_2(this);
}
;
_.remove_1 = function remove_6(){
  $remove_1(this);
}
;
_.i = 0;
_.last = -1;
var Ljava_util_AbstractList$IteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/IteratorImpl', 220);
function AbstractList$ListIteratorImpl(this$0, start_0){
  this.this$01 = this$0;
  AbstractList$IteratorImpl.call(this, this$0);
  checkCriticalPositionIndex(start_0, this$0.size_1());
  this.i = start_0;
}

defineClass(169, 220, {}, AbstractList$ListIteratorImpl);
_.remove_1 = function remove_7(){
  $remove_1(this);
}
;
_.nextIndex = function nextIndex_0(){
  return this.i;
}
;
_.previous = function previous_0(){
  checkCriticalElement(this.i > 0);
  return this.this$01.get_1(this.last = --this.i);
}
;
_.previousIndex = function previousIndex(){
  return this.i - 1;
}
;
_.set_1 = function set_2(o){
  checkCriticalState(this.last != -1);
  this.this$01.set_0(this.last, o);
}
;
var Ljava_util_AbstractList$ListIteratorImpl_2_classLit = createForClass('java.util', 'AbstractList/ListIteratorImpl', 169);
function AbstractList$SubList(wrapped, fromIndex, toIndex){
  checkCriticalPositionIndexes(fromIndex, toIndex, wrapped.size_1());
  this.wrapped = wrapped;
  this.fromIndex = fromIndex;
  this.size_0 = toIndex - fromIndex;
}

defineClass(190, 189, $intern_63, AbstractList$SubList);
_.add_1 = function add_5(index_0, element){
  checkCriticalPositionIndex(index_0, this.size_0);
  this.wrapped.add_1(this.fromIndex + index_0, element);
  ++this.size_0;
}
;
_.get_1 = function get_2(index_0){
  checkCriticalElementIndex(index_0, this.size_0);
  return this.wrapped.get_1(this.fromIndex + index_0);
}
;
_.remove_2 = function remove_8(index_0){
  var result;
  checkCriticalElementIndex(index_0, this.size_0);
  result = this.wrapped.remove_2(this.fromIndex + index_0);
  --this.size_0;
  return result;
}
;
_.set_0 = function set_3(index_0, element){
  checkCriticalElementIndex(index_0, this.size_0);
  return this.wrapped.set_0(this.fromIndex + index_0, element);
}
;
_.size_1 = function size_4(){
  return this.size_0;
}
;
_.fromIndex = 0;
_.size_0 = 0;
var Ljava_util_AbstractList$SubList_2_classLit = createForClass('java.util', 'AbstractList/SubList', 190);
function AbstractMap$1(this$0){
  this.this$01 = this$0;
}

defineClass(54, 379, $intern_62, AbstractMap$1);
_.clear_0 = function clear_5(){
  this.this$01.clear_0();
}
;
_.contains_0 = function contains_2(key){
  return this.this$01.containsKey(key);
}
;
_.iterator = function iterator_2(){
  var outerIter;
  return outerIter = this.this$01.entrySet_0().iterator() , new AbstractMap$1$1(outerIter);
}
;
_.remove = function remove_9(key){
  if (this.this$01.containsKey(key)) {
    this.this$01.remove_0(key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_5(){
  return this.this$01.size_1();
}
;
var Ljava_util_AbstractMap$1_2_classLit = createForClass('java.util', 'AbstractMap/1', 54);
function AbstractMap$1$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(62, 1, {}, AbstractMap$1$1);
_.hasNext_0 = function hasNext_1(){
  return this.val$outerIter2.hasNext_0();
}
;
_.next_1 = function next_2(){
  var entry;
  return entry = castTo(this.val$outerIter2.next_1(), 44) , entry.getKey();
}
;
_.remove_1 = function remove_10(){
  this.val$outerIter2.remove_1();
}
;
var Ljava_util_AbstractMap$1$1_2_classLit = createForClass('java.util', 'AbstractMap/1/1', 62);
function AbstractMap$2(this$0){
  this.this$01 = this$0;
}

defineClass(31, 109, $intern_60, AbstractMap$2);
_.clear_0 = function clear_6(){
  $reset_5(this.this$01);
}
;
_.contains_0 = function contains_3(value_0){
  return $containsValue(this.this$01, value_0);
}
;
_.iterator = function iterator_3(){
  var outerIter;
  return outerIter = new AbstractHashMap$EntrySetIterator((new AbstractHashMap$EntrySet(this.this$01)).this$01) , new AbstractMap$2$1(outerIter);
}
;
_.size_1 = function size_6(){
  return $size(this.this$01);
}
;
var Ljava_util_AbstractMap$2_2_classLit = createForClass('java.util', 'AbstractMap/2', 31);
function AbstractMap$2$1(val$outerIter){
  this.val$outerIter2 = val$outerIter;
}

defineClass(34, 1, {}, AbstractMap$2$1);
_.hasNext_0 = function hasNext_2(){
  return this.val$outerIter2.hasNext;
}
;
_.next_1 = function next_3(){
  var entry;
  return entry = $next_1(this.val$outerIter2) , entry.getValue();
}
;
_.remove_1 = function remove_11(){
  $remove_0(this.val$outerIter2);
}
;
var Ljava_util_AbstractMap$2$1_2_classLit = createForClass('java.util', 'AbstractMap/2/1', 34);
function $setValue_0(this$static, value_0){
  var oldValue;
  oldValue = this$static.value_0;
  this$static.value_0 = value_0;
  return oldValue;
}

defineClass(156, 1, {156:1, 44:1});
_.equals_0 = function equals_32(other){
  var entry;
  if (!instanceOf(other, 44)) {
    return false;
  }
  entry = castTo(other, 44);
  return equals_41(this.key, entry.getKey()) && equals_41(this.value_0, entry.getValue());
}
;
_.getKey = function getKey(){
  return this.key;
}
;
_.getValue = function getValue(){
  return this.value_0;
}
;
_.hashCode_0 = function hashCode_10(){
  return hashCode_20(this.key) ^ hashCode_20(this.value_0);
}
;
_.setValue = function setValue(value_0){
  return $setValue_0(this, value_0);
}
;
_.toString_0 = function toString_32(){
  return this.key + '=' + this.value_0;
}
;
var Ljava_util_AbstractMap$AbstractEntry_2_classLit = createForClass('java.util', 'AbstractMap/AbstractEntry', 156);
function AbstractMap$SimpleEntry(key, value_0){
  this.key = key;
  this.value_0 = value_0;
}

defineClass(135, 156, {156:1, 135:1, 44:1}, AbstractMap$SimpleEntry);
var Ljava_util_AbstractMap$SimpleEntry_2_classLit = createForClass('java.util', 'AbstractMap/SimpleEntry', 135);
defineClass(387, 1, {44:1});
_.equals_0 = function equals_33(other){
  var entry;
  if (!instanceOf(other, 44)) {
    return false;
  }
  entry = castTo(other, 44);
  return equals_41(this.val$entry2.value[0], entry.getKey()) && equals_41($getValue_2(this), entry.getValue());
}
;
_.hashCode_0 = function hashCode_11(){
  return hashCode_20(this.val$entry2.value[0]) ^ hashCode_20($getValue_2(this));
}
;
_.toString_0 = function toString_33(){
  return this.val$entry2.value[0] + '=' + $getValue_2(this);
}
;
var Ljava_util_AbstractMapEntry_2_classLit = createForClass('java.util', 'AbstractMapEntry', 387);
function $containsEntry_0(this$static, entry){
  var key, lookupEntry;
  key = entry.getKey();
  lookupEntry = $getEntry_0(this$static, key);
  return !!lookupEntry && equals_41(lookupEntry.value_0, entry.getValue());
}

function $containsKey_0(this$static, k){
  return !!$getEntry_0(this$static, k);
}

defineClass(394, 380, $intern_61);
_.containsEntry = function containsEntry_0(entry){
  return $containsEntry_0(this, entry);
}
;
_.containsKey = function containsKey_1(k){
  return $containsKey_0(this, k);
}
;
_.entrySet_0 = function entrySet_0(){
  return new AbstractNavigableMap$EntrySet(this);
}
;
_.get_0 = function get_3(k){
  return getEntryValueOrNull($getEntry_0(this, k));
}
;
_.keySet_0 = function keySet_0(){
  return new AbstractNavigableMap$NavigableKeySet(this);
}
;
var Ljava_util_AbstractNavigableMap_2_classLit = createForClass('java.util', 'AbstractNavigableMap', 394);
function AbstractNavigableMap$EntrySet(this$0){
  this.this$01_0 = this$0;
}

defineClass(238, 379, $intern_62, AbstractNavigableMap$EntrySet);
_.contains_0 = function contains_4(o){
  return instanceOf(o, 44) && $containsEntry_0(this.this$01_0, castTo(o, 44));
}
;
_.iterator = function iterator_4(){
  return new TreeMap$EntryIterator(this.this$01_0);
}
;
_.remove = function remove_12(o){
  var entry;
  if (instanceOf(o, 44)) {
    entry = castTo(o, 44);
    return $removeEntry(this.this$01_0, entry);
  }
  return false;
}
;
_.size_1 = function size_7(){
  return this.this$01_0.size_0;
}
;
var Ljava_util_AbstractNavigableMap$EntrySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/EntrySet', 238);
function AbstractNavigableMap$NavigableKeySet(map_0){
  this.map_0 = map_0;
}

defineClass(239, 379, $intern_62, AbstractNavigableMap$NavigableKeySet);
_.clear_0 = function clear_7(){
  $clear_0(this.map_0);
}
;
_.contains_0 = function contains_5(o){
  return $containsKey_0(this.map_0, o);
}
;
_.iterator = function iterator_5(){
  var entryIterator;
  return entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet(this.map_0)).this$01_0) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator);
}
;
_.remove = function remove_13(o){
  if ($containsKey_0(this.map_0, o)) {
    $remove_9(this.map_0, o);
    return true;
  }
  return false;
}
;
_.size_1 = function size_8(){
  return this.map_0.size_0;
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet', 239);
function AbstractNavigableMap$NavigableKeySet$1(val$entryIterator){
  this.val$entryIterator2 = val$entryIterator;
}

defineClass(240, 1, {}, AbstractNavigableMap$NavigableKeySet$1);
_.hasNext_0 = function hasNext_3(){
  return $hasNext(this.val$entryIterator2.iter);
}
;
_.next_1 = function next_4(){
  var entry;
  entry = $next_4(this.val$entryIterator2);
  return entry.getKey();
}
;
_.remove_1 = function remove_14(){
  $remove_10(this.val$entryIterator2);
}
;
var Ljava_util_AbstractNavigableMap$NavigableKeySet$1_2_classLit = createForClass('java.util', 'AbstractNavigableMap/NavigableKeySet/1', 240);
function $$init_15(this$static){
  this$static.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}

function $add_0(this$static, index_0, o){
  checkCriticalPositionIndex(index_0, this$static.array.length);
  insertTo(this$static.array, index_0, o);
}

function $add_1(this$static, o){
  this$static.array[this$static.array.length] = o;
  return true;
}

function $addAll(this$static, c){
  var cArray, len;
  cArray = c.toArray();
  len = cArray.length;
  if (len == 0) {
    return false;
  }
  insertTo_0(this$static.array, this$static.array.length, cArray);
  return true;
}

function $get_2(this$static, index_0){
  checkCriticalElementIndex(index_0, this$static.array.length);
  return this$static.array[index_0];
}

function $indexOf_1(this$static, o, index_0){
  for (; index_0 < this$static.array.length; ++index_0) {
    if (equals_41(o, this$static.array[index_0])) {
      return index_0;
    }
  }
  return -1;
}

function $remove_2(this$static, index_0){
  var previous;
  previous = (checkCriticalElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  removeFrom(this$static.array, index_0, 1);
  return previous;
}

function $remove_3(this$static, o){
  var i;
  i = $indexOf_1(this$static, o, 0);
  if (i == -1) {
    return false;
  }
  checkCriticalElementIndex(i, this$static.array.length);
  removeFrom(this$static.array, i, 1);
  return true;
}

function $set(this$static, index_0, o){
  var previous;
  previous = (checkCriticalElementIndex(index_0, this$static.array.length) , this$static.array[index_0]);
  this$static.array[index_0] = o;
  return previous;
}

function $sort(this$static, c){
  sort_4(this$static.array, this$static.array.length, c);
}

function $toArray_0(this$static, out){
  var i, result, size_0;
  size_0 = this$static.array.length;
  out.length < size_0 && (out = (result = new Array(size_0) , stampJavaTypeInfo_0(result, out)));
  for (i = 0; i < size_0; ++i) {
    setCheck(out, i, this$static.array[i]);
  }
  out.length > size_0 && setCheck(out, size_0, null);
  return out;
}

function ArrayList(){
  $$init_15(this);
}

function ArrayList_0(initialCapacity){
  $$init_15(this);
  checkCriticalArgument(initialCapacity >= 0, 'Initial capacity must not be negative');
}

function ArrayList_1(c){
  $$init_15(this);
  insertTo_0(this.array, 0, c.toArray());
}

defineClass(3, 189, {8:1, 9:1, 96:1, 109:1, 189:1, 3:1, 102:1, 42:1, 245:1}, ArrayList, ArrayList_0, ArrayList_1);
_.add_1 = function add_6(index_0, o){
  $add_0(this, index_0, o);
}
;
_.add_0 = function add_7(o){
  return $add_1(this, o);
}
;
_.addAll = function addAll_0(c){
  return $addAll(this, c);
}
;
_.clear_0 = function clear_8(){
  this.array = initUnidimensionalArray(Ljava_lang_Object_2_classLit, $intern_9, 1, 0, 5, 1);
}
;
_.contains_0 = function contains_6(o){
  return $indexOf_1(this, o, 0) != -1;
}
;
_.get_1 = function get_4(index_0){
  return $get_2(this, index_0);
}
;
_.indexOf_0 = function indexOf_0(o){
  return $indexOf_1(this, o, 0);
}
;
_.iterator = function iterator_6(){
  return new ArrayList$1(this);
}
;
_.remove_2 = function remove_15(index_0){
  return $remove_2(this, index_0);
}
;
_.remove = function remove_16(o){
  return $remove_3(this, o);
}
;
_.removeRange = function removeRange_0(fromIndex, endIndex){
  var count;
  checkCriticalPositionIndexes(fromIndex, endIndex, this.array.length);
  count = endIndex - fromIndex;
  removeFrom(this.array, fromIndex, count);
}
;
_.set_0 = function set_4(index_0, o){
  return $set(this, index_0, o);
}
;
_.size_1 = function size_9(){
  return this.array.length;
}
;
_.sort_0 = function sort_3(c){
  $sort(this, c);
}
;
_.toArray = function toArray_1(){
  return clone_0(this.array, this.array.length);
}
;
_.toArray_0 = function toArray_2(out){
  return $toArray_0(this, out);
}
;
var Ljava_util_ArrayList_2_classLit = createForClass('java.util', 'ArrayList', 3);
function $next_3(this$static){
  checkCriticalElement(this$static.i < this$static.this$01.array.length);
  this$static.last = this$static.i++;
  return this$static.this$01.array[this$static.last];
}

function ArrayList$1(this$0){
  this.this$01 = this$0;
}

defineClass(5, 1, {}, ArrayList$1);
_.hasNext_0 = function hasNext_4(){
  return this.i < this.this$01.array.length;
}
;
_.next_1 = function next_5(){
  return $next_3(this);
}
;
_.remove_1 = function remove_17(){
  checkCriticalState(this.last != -1);
  $remove_2(this.this$01, this.i = this.last);
  this.last = -1;
}
;
_.i = 0;
_.last = -1;
var Ljava_util_ArrayList$1_2_classLit = createForClass('java.util', 'ArrayList/1', 5);
function hashCode_12(a){
  var e, e$index, e$max, hashCode;
  hashCode = 1;
  for (e$index = 0 , e$max = a.length; e$index < e$max; ++e$index) {
    e = a[e$index];
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function insertionSort(array, low, high, comp){
  var i, j, t;
  for (i = low + 1; i < high; ++i) {
    for (j = i; j > low && comp.compare(array[j - 1], array[j]) > 0; --j) {
      t = array[j];
      setCheck(array, j, array[j - 1]);
      setCheck(array, j - 1, t);
    }
  }
}

function merge(src_0, srcLow, srcMid, srcHigh, dest, destLow, destHigh, comp){
  var topIdx;
  topIdx = srcMid;
  while (destLow < destHigh) {
    topIdx >= srcHigh || srcLow < srcMid && comp.compare(src_0[srcLow], src_0[topIdx]) <= 0?setCheck(dest, destLow++, src_0[srcLow++]):setCheck(dest, destLow++, src_0[topIdx++]);
  }
}

function mergeSort(x_0, fromIndex, toIndex, comp){
  var temp;
  comp = ($clinit_Comparators() , !comp?INTERNAL_NATURAL_ORDER:comp);
  temp = x_0.slice(fromIndex, toIndex);
  mergeSort_0(temp, x_0, fromIndex, toIndex, -fromIndex, comp);
}

function mergeSort_0(temp, array, low, high, ofs, comp){
  var length_0, tempHigh, tempLow, tempMid;
  length_0 = high - low;
  if (length_0 < 7) {
    insertionSort(array, low, high, comp);
    return;
  }
  tempLow = low + ofs;
  tempHigh = high + ofs;
  tempMid = tempLow + (tempHigh - tempLow >> 1);
  mergeSort_0(array, temp, tempLow, tempMid, -ofs, comp);
  mergeSort_0(array, temp, tempMid, tempHigh, -ofs, comp);
  if (comp.compare(temp[tempMid - 1], temp[tempMid]) <= 0) {
    while (low < high) {
      setCheck(array, low++, temp[tempLow++]);
    }
    return;
  }
  merge(temp, tempLow, tempMid, tempHigh, array, low, high, comp);
}

function sort_4(x_0, toIndex, c){
  checkCriticalArrayBounds(toIndex, x_0.length);
  mergeSort(x_0, 0, toIndex, c);
}

function hashCode_13(collection){
  var e, e$iterator, hashCode;
  hashCode = 0;
  for (e$iterator = collection.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    hashCode = hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function hashCode_14(list){
  var e, e$iterator, hashCode;
  hashCode = 1;
  for (e$iterator = list.iterator(); e$iterator.hasNext_0();) {
    e = e$iterator.next_1();
    hashCode = 31 * hashCode + (e != null?hashCode__I__devirtual$(e):0);
    hashCode = hashCode | 0;
  }
  return hashCode;
}

function reverse(l){
  var head, headElem, iBack, iFront, tail, tailElem, t;
  if (instanceOf(l, 245)) {
    for (iFront = 0 , iBack = l.size_1() - 1; iFront < iBack; ++iFront , --iBack) {
      t = l.get_1(iFront);
      l.set_0(iFront, l.get_1(iBack));
      l.set_0(iBack, t);
    }
  }
   else {
    head = l.listIterator();
    tail = l.listIterator_0(l.size_1());
    while (head.nextIndex() < tail.previousIndex()) {
      headElem = head.next_1();
      tailElem = tail.previous();
      head.set_1(tailElem);
      tail.set_1(headElem);
    }
  }
}

function unmodifiableList(list){
  return instanceOf(list, 245)?new Collections$UnmodifiableRandomAccessList(list):new Collections$UnmodifiableList(list);
}

function Collections$UnmodifiableCollection(coll){
  this.coll = coll;
}

defineClass(222, 1, {96:1, 102:1});
_.add_0 = function add_8(o){
  throw toJs(new UnsupportedOperationException);
}
;
_.addAll = function addAll_1(c){
  throw toJs(new UnsupportedOperationException);
}
;
_.clear_0 = function clear_9(){
  throw toJs(new UnsupportedOperationException);
}
;
_.contains_0 = function contains_7(o){
  return this.coll.contains_0(o);
}
;
_.iterator = function iterator_7(){
  return new Collections$UnmodifiableCollectionIterator(this.coll.iterator());
}
;
_.remove = function remove_18(o){
  throw toJs(new UnsupportedOperationException);
}
;
_.size_1 = function size_10(){
  return this.coll.size_1();
}
;
_.toArray = function toArray_3(){
  return this.coll.toArray();
}
;
_.toString_0 = function toString_34(){
  return toString_24(this.coll);
}
;
var Ljava_util_Collections$UnmodifiableCollection_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollection', 222);
function $remove_4(){
  throw toJs(new UnsupportedOperationException);
}

function Collections$UnmodifiableCollectionIterator(it){
  this.it = it;
}

defineClass(225, 1, {}, Collections$UnmodifiableCollectionIterator);
_.hasNext_0 = function hasNext_5(){
  return this.it.hasNext_0();
}
;
_.next_1 = function next_6(){
  return this.it.next_1();
}
;
_.remove_1 = function remove_19(){
  $remove_4();
}
;
var Ljava_util_Collections$UnmodifiableCollectionIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableCollectionIterator', 225);
function Collections$UnmodifiableList(list){
  Collections$UnmodifiableCollection.call(this, list);
  this.list = list;
}

defineClass(191, 222, {96:1, 102:1, 42:1}, Collections$UnmodifiableList);
_.sort_0 = function sort_5(c){
  $sort_0(this, c);
}
;
_.add_1 = function add_9(index_0, element){
  throw toJs(new UnsupportedOperationException);
}
;
_.equals_0 = function equals_34(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.list, o);
}
;
_.get_1 = function get_5(index_0){
  return this.list.get_1(index_0);
}
;
_.hashCode_0 = function hashCode_15(){
  return hashCode__I__devirtual$(this.list);
}
;
_.indexOf_0 = function indexOf_1(o){
  return this.list.indexOf_0(o);
}
;
_.listIterator = function listIterator_1(){
  return new Collections$UnmodifiableListIterator(this.list.listIterator_0(0));
}
;
_.listIterator_0 = function listIterator_2(from){
  return new Collections$UnmodifiableListIterator(this.list.listIterator_0(from));
}
;
_.remove_2 = function remove_20(index_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.set_0 = function set_5(index_0, element){
  throw toJs(new UnsupportedOperationException);
}
;
_.subList = function subList_0(fromIndex, toIndex){
  return new Collections$UnmodifiableList(this.list.subList(fromIndex, toIndex));
}
;
var Ljava_util_Collections$UnmodifiableList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableList', 191);
function Collections$UnmodifiableListIterator(lit){
  Collections$UnmodifiableCollectionIterator.call(this, lit);
  this.lit = lit;
}

defineClass(226, 225, {}, Collections$UnmodifiableListIterator);
_.remove_1 = function remove_21(){
  $remove_4();
}
;
_.nextIndex = function nextIndex_1(){
  return this.lit.nextIndex();
}
;
_.previous = function previous_1(){
  return this.lit.previous();
}
;
_.previousIndex = function previousIndex_0(){
  return this.lit.previousIndex();
}
;
_.set_1 = function set_6(o){
  throw toJs(new UnsupportedOperationException);
}
;
var Ljava_util_Collections$UnmodifiableListIterator_2_classLit = createForClass('java.util', 'Collections/UnmodifiableListIterator', 226);
function Collections$UnmodifiableMap(map_0){
  this.map_0 = map_0;
}

defineClass(287, 1, $intern_61, Collections$UnmodifiableMap);
_.containsKey = function containsKey_2(key){
  return this.map_0.containsKey(key);
}
;
_.entrySet_0 = function entrySet_1(){
  !this.entrySet && (this.entrySet = new Collections$UnmodifiableMap$UnmodifiableEntrySet(this.map_0.entrySet_0()));
  return this.entrySet;
}
;
_.equals_0 = function equals_35(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.map_0, o);
}
;
_.get_0 = function get_6(key){
  return this.map_0.get_0(key);
}
;
_.hashCode_0 = function hashCode_16(){
  return hashCode__I__devirtual$(this.map_0);
}
;
_.keySet_0 = function keySet_1(){
  !this.keySet && (this.keySet = new Collections$UnmodifiableSet(this.map_0.keySet_0()));
  return this.keySet;
}
;
_.put = function put_1(key, value_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.putAll = function putAll_0(t){
  throw toJs(new UnsupportedOperationException);
}
;
_.remove_0 = function remove_22(key){
  throw toJs(new UnsupportedOperationException);
}
;
_.size_1 = function size_11(){
  return this.map_0.size_1();
}
;
_.toString_0 = function toString_35(){
  return toString_24(this.map_0);
}
;
var Ljava_util_Collections$UnmodifiableMap_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap', 287);
function Collections$UnmodifiableSet(set_0){
  Collections$UnmodifiableCollection.call(this, set_0);
}

defineClass(223, 222, $intern_64, Collections$UnmodifiableSet);
_.equals_0 = function equals_36(o){
  return equals_Ljava_lang_Object__Z__devirtual$(this.coll, o);
}
;
_.hashCode_0 = function hashCode_17(){
  return hashCode__I__devirtual$(this.coll);
}
;
var Ljava_util_Collections$UnmodifiableSet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableSet', 223);
function $wrap(array, size_0){
  var i;
  for (i = 0; i < size_0; ++i) {
    setCheck(array, i, new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(castTo(array[i], 44)));
  }
}

function Collections$UnmodifiableMap$UnmodifiableEntrySet(s){
  Collections$UnmodifiableSet.call(this, s);
}

defineClass(288, 223, $intern_64, Collections$UnmodifiableMap$UnmodifiableEntrySet);
_.contains_0 = function contains_8(o){
  return this.coll.contains_0(o);
}
;
_.iterator = function iterator_8(){
  var it;
  it = this.coll.iterator();
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$1(it);
}
;
_.toArray = function toArray_4(){
  var array;
  array = this.coll.toArray();
  $wrap(array, array.length);
  return array;
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet', 288);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$1(val$it){
  this.val$it2 = val$it;
}

defineClass(290, 1, {}, Collections$UnmodifiableMap$UnmodifiableEntrySet$1);
_.next_1 = function next_7(){
  return new Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(castTo(this.val$it2.next_1(), 44));
}
;
_.hasNext_0 = function hasNext_6(){
  return this.val$it2.hasNext_0();
}
;
_.remove_1 = function remove_23(){
  throw toJs(new UnsupportedOperationException);
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$1_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/1', 290);
function Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry(entry){
  this.entry = entry;
}

defineClass(224, 1, {44:1}, Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry);
_.equals_0 = function equals_37(o){
  return this.entry.equals_0(o);
}
;
_.getKey = function getKey_0(){
  return this.entry.getKey();
}
;
_.getValue = function getValue_0(){
  return this.entry.getValue();
}
;
_.hashCode_0 = function hashCode_18(){
  return this.entry.hashCode_0();
}
;
_.setValue = function setValue_0(value_0){
  throw toJs(new UnsupportedOperationException);
}
;
_.toString_0 = function toString_36(){
  return toString_24(this.entry);
}
;
var Ljava_util_Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry_2_classLit = createForClass('java.util', 'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry', 224);
function Collections$UnmodifiableRandomAccessList(list){
  Collections$UnmodifiableList.call(this, list);
}

defineClass(289, 191, {96:1, 102:1, 42:1, 245:1}, Collections$UnmodifiableRandomAccessList);
var Ljava_util_Collections$UnmodifiableRandomAccessList_2_classLit = createForClass('java.util', 'Collections/UnmodifiableRandomAccessList', 289);
function $clinit_Comparators(){
  $clinit_Comparators = emptyMethod;
  INTERNAL_NATURAL_ORDER = new Comparators$NaturalOrderComparator;
}

var INTERNAL_NATURAL_ORDER;
function $compare_20(a, b){
  return checkCriticalNotNull(a) , compareTo_Ljava_lang_Object__I__devirtual$(a, (checkCriticalNotNull(b) , b));
}

function $compare_21(a, b){
  return $compare_20(castTo(a, 108), castTo(b, 108));
}

function Comparators$NaturalOrderComparator(){
}

defineClass(355, 1, $intern_65, Comparators$NaturalOrderComparator);
_.compare = function compare_27(a, b){
  return $compare_21(a, b);
}
;
_.equals_0 = function equals_38(other){
  return this === other;
}
;
var Ljava_util_Comparators$NaturalOrderComparator_2_classLit = createForClass('java.util', 'Comparators/NaturalOrderComparator', 355);
function checkStructuralChange(host, iterator){
  if (iterator['_gwt_modCount'] != host['_gwt_modCount']) {
    throw toJs(new ConcurrentModificationException);
  }
}

function recordLastKnownStructure(host, iterator){
  var modCount;
  modCount = host['_gwt_modCount'];
  iterator['_gwt_modCount'] = modCount;
}

function structureChanged(map_0){
  var modCount;
  modCount = map_0['_gwt_modCount'] | 0;
  map_0['_gwt_modCount'] = modCount + 1;
}

function ConcurrentModificationException(){
  RuntimeException.call(this);
}

defineClass(361, 105, $intern_23, ConcurrentModificationException);
var Ljava_util_ConcurrentModificationException_2_classLit = createForClass('java.util', 'ConcurrentModificationException', 361);
function $compareTo_5(this$static, other){
  return compare_26(fromDouble_0(this$static.jsdate.getTime()), fromDouble_0(other.jsdate.getTime()));
}

function $fixDaylightSavings(this$static, requestedHours){
  var badHours, copy, day, newTime, originalTimeInMillis, timeDiff, timeDiffHours, timeDiffMinutes;
  requestedHours %= 24;
  if (this$static.jsdate.getHours() != requestedHours) {
    copy = new $wnd.Date(this$static.jsdate.getTime());
    copy.setDate(copy.getDate() + 1);
    timeDiff = this$static.jsdate.getTimezoneOffset() - copy.getTimezoneOffset();
    if (timeDiff > 0) {
      timeDiffHours = timeDiff / 60 | 0;
      timeDiffMinutes = timeDiff % 60;
      day = this$static.jsdate.getDate();
      badHours = this$static.jsdate.getHours();
      badHours + timeDiffHours >= 24 && ++day;
      newTime = new $wnd.Date(this$static.jsdate.getFullYear(), this$static.jsdate.getMonth(), day, requestedHours + timeDiffHours, this$static.jsdate.getMinutes() + timeDiffMinutes, this$static.jsdate.getSeconds(), this$static.jsdate.getMilliseconds());
      this$static.jsdate.setTime(newTime.getTime());
    }
  }
  originalTimeInMillis = this$static.jsdate.getTime();
  this$static.jsdate.setTime(originalTimeInMillis + 3600000);
  this$static.jsdate.getHours() != requestedHours && this$static.jsdate.setTime(originalTimeInMillis);
}

function $setDate(this$static, date){
  var hours;
  hours = this$static.jsdate.getHours();
  this$static.jsdate.setDate(date);
  $fixDaylightSavings(this$static, hours);
}

function $setMinutes(this$static, minutes){
  var hours;
  hours = this$static.jsdate.getHours() + (minutes / 60 | 0);
  this$static.jsdate.setMinutes(minutes);
  $fixDaylightSavings(this$static, hours);
}

function $setSeconds(this$static, seconds){
  var hours;
  hours = this$static.jsdate.getHours() + (seconds / 3600 | 0);
  this$static.jsdate.setSeconds(seconds);
  $fixDaylightSavings(this$static, hours);
}

function $toString_3(this$static){
  var hourOffset, minuteOffset, offset;
  offset = -this$static.jsdate.getTimezoneOffset();
  hourOffset = (offset >= 0?'+':'') + (offset / 60 | 0);
  minuteOffset = (offset < 0?-offset:offset) % 60 < 10?'0' + (offset < 0?-offset:offset) % 60:'' + (offset < 0?-offset:offset) % 60;
  return ($clinit_Date$StringData() , DAYS)[this$static.jsdate.getDay()] + ' ' + MONTHS[this$static.jsdate.getMonth()] + ' ' + padTwo(this$static.jsdate.getDate()) + ' ' + padTwo(this$static.jsdate.getHours()) + ':' + padTwo(this$static.jsdate.getMinutes()) + ':' + padTwo(this$static.jsdate.getSeconds()) + ' GMT' + hourOffset + minuteOffset + ' ' + this$static.jsdate.getFullYear();
}

function Date_0(){
  this.jsdate = new $wnd.Date;
}

function Date_1(year, month, date){
  Date_3.call(this, year, month, date, 0, 0, 0);
}

function Date_2(year, month, date, hrs, min_0){
  Date_3.call(this, year, month, date, hrs, min_0, 0);
}

function Date_3(year, month, date, hrs, min_0, sec){
  this.jsdate = new $wnd.Date;
  this.jsdate.setFullYear(year + $intern_14, month, date);
  this.jsdate.setHours(hrs, min_0, sec, 0);
  $fixDaylightSavings(this, hrs);
}

function Date_4(date){
  this.jsdate = new $wnd.Date(toDouble_0(date));
}

function padTwo(number){
  return number < 10?'0' + number:'' + number;
}

defineClass(21, 1, {8:1, 9:1, 108:1, 21:1}, Date_0, Date_1, Date_2, Date_3, Date_4);
_.compareTo = function compareTo_2(other){
  return $compareTo_5(this, castTo(other, 21));
}
;
_.equals_0 = function equals_39(obj){
  return instanceOf(obj, 21) && eq(fromDouble_0(this.jsdate.getTime()), fromDouble_0(castTo(obj, 21).jsdate.getTime()));
}
;
_.hashCode_0 = function hashCode_19(){
  var time;
  time = fromDouble_0(this.jsdate.getTime());
  return toInt_0(xor_0(time, createLongEmul(shru(isSmallLong0(time)?toBigLong(time):time, 32))));
}
;
_.toString_0 = function toString_37(){
  return $toString_3(this);
}
;
var Ljava_util_Date_2_classLit = createForClass('java.util', 'Date', 21);
function $clinit_Date$StringData(){
  $clinit_Date$StringData = emptyMethod;
  DAYS = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']);
  MONTHS = stampJavaTypeInfo(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_18, 2, 6, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);
}

var DAYS, MONTHS;
function HashMap(){
  $reset_5(this);
}

function HashMap_0(ignored){
  checkCriticalArgument(ignored >= 0, 'Negative initial capacity');
  checkCriticalArgument(true, 'Non-positive load factor');
  $reset_5(this);
}

function HashMap_1(toBeCopied){
  $reset_5(this);
  $putAll(this, toBeCopied);
}

defineClass(24, 170, $intern_66, HashMap, HashMap_0, HashMap_1);
_.equals_1 = function equals_40(value1, value2){
  return maskUndefined(value1) === maskUndefined(value2) || value1 != null && equals_Ljava_lang_Object__Z__devirtual$(value1, value2);
}
;
_.getHashCode = function getHashCode(key){
  var hashCode;
  hashCode = hashCode__I__devirtual$(key);
  return hashCode | 0;
}
;
var Ljava_util_HashMap_2_classLit = createForClass('java.util', 'HashMap', 24);
function $findEntryInChain(this$static, key, chain){
  var entry, entry$index, entry$max;
  for (entry$index = 0 , entry$max = chain.length; entry$index < entry$max; ++entry$index) {
    entry = chain[entry$index];
    if (this$static.host.equals_1(key, entry.getKey())) {
      return entry;
    }
  }
  return null;
}

function $getChainOrEmpty(this$static, hashCode){
  var chain;
  chain = this$static.backingMap.get(hashCode);
  return chain == null?[]:chain;
}

function $getEntry(this$static, key){
  return $findEntryInChain(this$static, key, $getChainOrEmpty(this$static, key == null?0:this$static.host.getHashCode(key)));
}

function $put_1(this$static, key, value_0){
  var chain, chain0, entry, hashCode;
  hashCode = key == null?0:this$static.host.getHashCode(key);
  chain0 = (chain = this$static.backingMap.get(hashCode) , chain == null?[]:chain);
  if (chain0.length == 0) {
    this$static.backingMap.set(hashCode, chain0);
  }
   else {
    entry = $findEntryInChain(this$static, key, chain0);
    if (entry) {
      return entry.setValue(value_0);
    }
  }
  setCheck(chain0, chain0.length, new AbstractMap$SimpleEntry(key, value_0));
  ++this$static.size_0;
  structureChanged(this$static.host);
  return null;
}

function $remove_5(this$static, key){
  var chain, chain0, entry, hashCode, i;
  hashCode = key == null?0:this$static.host.getHashCode(key);
  chain0 = (chain = this$static.backingMap.get(hashCode) , chain == null?[]:chain);
  for (i = 0; i < chain0.length; i++) {
    entry = chain0[i];
    if (this$static.host.equals_1(key, entry.getKey())) {
      if (chain0.length == 1) {
        chain0.length = 0;
        this$static.backingMap['delete'](hashCode);
      }
       else {
        chain0.splice(i, 1);
      }
      --this$static.size_0;
      structureChanged(this$static.host);
      return entry.getValue();
    }
  }
  return null;
}

function InternalHashCodeMap(host){
  this.backingMap = newJsMap();
  this.host = host;
}

defineClass(307, 1, {96:1}, InternalHashCodeMap);
_.iterator = function iterator_9(){
  return new InternalHashCodeMap$1(this);
}
;
_.size_0 = 0;
var Ljava_util_InternalHashCodeMap_2_classLit = createForClass('java.util', 'InternalHashCodeMap', 307);
function InternalHashCodeMap$1(this$0){
  this.this$01 = this$0;
  this.chains = this.this$01.backingMap.entries();
  this.chain = [];
}

defineClass(228, 1, {}, InternalHashCodeMap$1);
_.next_1 = function next_8(){
  return this.lastEntry = this.chain[this.itemIndex++] , this.lastEntry;
}
;
_.hasNext_0 = function hasNext_7(){
  var current;
  if (this.itemIndex < this.chain.length) {
    return true;
  }
  current = this.chains.next();
  if (!current.done) {
    this.chain = current.value[1];
    this.itemIndex = 0;
    return true;
  }
  return false;
}
;
_.remove_1 = function remove_24(){
  $remove_5(this.this$01, this.lastEntry.getKey());
  this.itemIndex != 0 && --this.itemIndex;
}
;
_.itemIndex = 0;
_.lastEntry = null;
var Ljava_util_InternalHashCodeMap$1_2_classLit = createForClass('java.util', 'InternalHashCodeMap/1', 228);
function $clinit_InternalJsMapFactory(){
  $clinit_InternalJsMapFactory = emptyMethod;
  jsMapCtor = getJsMapConstructor();
}

function canHandleObjectCreateAndProto(){
  if (!Object.create || !Object.getOwnPropertyNames) {
    return false;
  }
  var protoField = '__proto__';
  var map_0 = Object.create(null);
  if (map_0[protoField] !== undefined) {
    return false;
  }
  var keys_0 = Object.getOwnPropertyNames(map_0);
  if (keys_0.length != 0) {
    return false;
  }
  map_0[protoField] = 42;
  if (map_0[protoField] !== 42) {
    return false;
  }
  if (Object.getOwnPropertyNames(map_0).length == 0) {
    return false;
  }
  return true;
}

function getJsMapConstructor(){
  function isCorrectIterationProtocol(){
    try {
      return (new Map).entries().next().done;
    }
     catch (e) {
      return false;
    }
  }

  if (typeof Map === 'function' && Map.prototype.entries && isCorrectIterationProtocol()) {
    return Map;
  }
   else {
    return getJsMapPolyFill();
  }
}

function getJsMapPolyFill(){
  function Stringmap(){
    this.obj = this.createObject();
  }

  ;
  Stringmap.prototype.createObject = function(key){
    return Object.create(null);
  }
  ;
  Stringmap.prototype.get = function(key){
    return this.obj[key];
  }
  ;
  Stringmap.prototype.set = function(key, value_0){
    this.obj[key] = value_0;
  }
  ;
  Stringmap.prototype['delete'] = function(key){
    delete this.obj[key];
  }
  ;
  Stringmap.prototype.keys = function(){
    return Object.getOwnPropertyNames(this.obj);
  }
  ;
  Stringmap.prototype.entries = function(){
    var keys_0 = this.keys();
    var map_0 = this;
    var nextIndex = 0;
    return {next:function(){
      if (nextIndex >= keys_0.length)
        return {done:true};
      var key = keys_0[nextIndex++];
      return {value:[key, map_0.get(key)], done:false};
    }
    };
  }
  ;
  if (!canHandleObjectCreateAndProto()) {
    Stringmap.prototype.createObject = function(){
      return {};
    }
    ;
    Stringmap.prototype.get = function(key){
      return this.obj[':' + key];
    }
    ;
    Stringmap.prototype.set = function(key, value_0){
      this.obj[':' + key] = value_0;
    }
    ;
    Stringmap.prototype['delete'] = function(key){
      delete this.obj[':' + key];
    }
    ;
    Stringmap.prototype.keys = function(){
      var result = [];
      for (var key in this.obj) {
        key.charCodeAt(0) == 58 && result.push(key.substring(1));
      }
      return result;
    }
    ;
  }
  return Stringmap;
}

function newJsMap(){
  $clinit_InternalJsMapFactory();
  return new jsMapCtor;
}

var jsMapCtor;
function $contains_0(this$static, key){
  return !(this$static.backingMap.get(key) === undefined);
}

function $get_3(this$static, key){
  return this$static.backingMap.get(key);
}

function $put_2(this$static, key, value_0){
  var oldValue;
  oldValue = this$static.backingMap.get(key);
  this$static.backingMap.set(key, value_0 === undefined?null:value_0);
  if (oldValue === undefined) {
    ++this$static.size_0;
    structureChanged(this$static.host);
  }
   else {
    ++this$static.valueMod;
  }
  return oldValue;
}

function $remove_6(this$static, key){
  var value_0;
  value_0 = this$static.backingMap.get(key);
  if (value_0 === undefined) {
    ++this$static.valueMod;
  }
   else {
    this$static.backingMap['delete'](key);
    --this$static.size_0;
    structureChanged(this$static.host);
  }
  return value_0;
}

function InternalStringMap(host){
  this.backingMap = newJsMap();
  this.host = host;
}

defineClass(291, 1, {96:1}, InternalStringMap);
_.iterator = function iterator_10(){
  return new InternalStringMap$1(this);
}
;
_.size_0 = 0;
_.valueMod = 0;
var Ljava_util_InternalStringMap_2_classLit = createForClass('java.util', 'InternalStringMap', 291);
function InternalStringMap$1(this$0){
  this.this$01 = this$0;
  this.entries_0 = this.this$01.backingMap.entries();
  this.current = this.entries_0.next();
}

defineClass(227, 1, {}, InternalStringMap$1);
_.next_1 = function next_9(){
  return this.last = this.current , this.current = this.entries_0.next() , new InternalStringMap$2(this.this$01, this.last, this.this$01.valueMod);
}
;
_.hasNext_0 = function hasNext_8(){
  return !this.current.done;
}
;
_.remove_1 = function remove_25(){
  $remove_6(this.this$01, this.last.value[0]);
}
;
var Ljava_util_InternalStringMap$1_2_classLit = createForClass('java.util', 'InternalStringMap/1', 227);
function $getValue_2(this$static){
  if (this$static.this$01.valueMod != this$static.val$lastValueMod3) {
    return $get_3(this$static.this$01, this$static.val$entry2.value[0]);
  }
  return this$static.val$entry2.value[1];
}

function InternalStringMap$2(this$0, val$entry, val$lastValueMod){
  this.this$01 = this$0;
  this.val$entry2 = val$entry;
  this.val$lastValueMod3 = val$lastValueMod;
}

defineClass(292, 387, {44:1}, InternalStringMap$2);
_.getKey = function getKey_1(){
  return this.val$entry2.value[0];
}
;
_.getValue = function getValue_1(){
  return $getValue_2(this);
}
;
_.setValue = function setValue_1(object){
  return $put_2(this.this$01, this.val$entry2.value[0], object);
}
;
_.val$lastValueMod3 = 0;
var Ljava_util_InternalStringMap$2_2_classLit = createForClass('java.util', 'InternalStringMap/2', 292);
function $$init_16(this$static){
  this$static.head = new LinkedHashMap$ChainEntry(this$static);
  this$static.map_0 = new HashMap;
}

function $clear(this$static){
  $reset_5(this$static.map_0);
  this$static.head.prev = this$static.head;
  this$static.head.next_0 = this$static.head;
}

function $containsKey_1(this$static, key){
  return $containsKey(this$static.map_0, key);
}

function $get_4(this$static, key){
  var entry;
  entry = castTo($get_1(this$static.map_0, key), 142);
  if (entry) {
    $recordAccess(this$static, entry);
    return entry.value_0;
  }
  return null;
}

function $put_3(this$static, key, value_0){
  var newEntry, old, oldValue;
  old = castTo($get_1(this$static.map_0, key), 142);
  if (!old) {
    newEntry = new LinkedHashMap$ChainEntry_0(this$static, key, value_0);
    $put_0(this$static.map_0, key, newEntry);
    $addToEnd(newEntry);
    return null;
  }
   else {
    oldValue = $setValue_0(old, value_0);
    $recordAccess(this$static, old);
    return oldValue;
  }
}

function $recordAccess(this$static, entry){
  if (this$static.accessOrder) {
    $remove_8(entry);
    $addToEnd(entry);
  }
}

function $remove_7(this$static, key){
  var entry;
  entry = castTo($remove(this$static.map_0, key), 142);
  if (entry) {
    $remove_8(entry);
    return entry.value_0;
  }
  return null;
}

function LinkedHashMap(){
  HashMap.call(this);
  $$init_16(this);
  this.head.prev = this.head;
  this.head.next_0 = this.head;
}

function LinkedHashMap_0(toBeCopied){
  HashMap.call(this);
  $$init_16(this);
  this.head.prev = this.head;
  this.head.next_0 = this.head;
  $putAll(this, toBeCopied);
}

defineClass(141, 24, $intern_66, LinkedHashMap, LinkedHashMap_0);
_.clear_0 = function clear_10(){
  $clear(this);
}
;
_.containsKey = function containsKey_3(key){
  return $containsKey_1(this, key);
}
;
_.entrySet_0 = function entrySet_2(){
  return new LinkedHashMap$EntrySet(this);
}
;
_.get_0 = function get_7(key){
  return $get_4(this, key);
}
;
_.put = function put_2(key, value_0){
  return $put_3(this, key, value_0);
}
;
_.remove_0 = function remove_26(key){
  return $remove_7(this, key);
}
;
_.size_1 = function size_12(){
  return $size(this.map_0);
}
;
_.accessOrder = false;
var Ljava_util_LinkedHashMap_2_classLit = createForClass('java.util', 'LinkedHashMap', 141);
function $addToEnd(this$static){
  var tail;
  tail = this$static.this$01.head.prev;
  this$static.prev = tail;
  this$static.next_0 = this$static.this$01.head;
  tail.next_0 = this$static.this$01.head.prev = this$static;
}

function $remove_8(this$static){
  this$static.next_0.prev = this$static.prev;
  this$static.prev.next_0 = this$static.next_0;
  this$static.next_0 = this$static.prev = null;
}

function LinkedHashMap$ChainEntry(this$0){
  LinkedHashMap$ChainEntry_0.call(this, this$0, null, null);
}

function LinkedHashMap$ChainEntry_0(this$0, key, value_0){
  this.this$01 = this$0;
  AbstractMap$SimpleEntry.call(this, key, value_0);
}

defineClass(142, 135, {156:1, 135:1, 142:1, 44:1}, LinkedHashMap$ChainEntry, LinkedHashMap$ChainEntry_0);
var Ljava_util_LinkedHashMap$ChainEntry_2_classLit = createForClass('java.util', 'LinkedHashMap/ChainEntry', 142);
function $contains_1(this$static, o){
  if (instanceOf(o, 44)) {
    return $containsEntry(this$static.this$01, castTo(o, 44));
  }
  return false;
}

function LinkedHashMap$EntrySet(this$0){
  this.this$01 = this$0;
}

defineClass(323, 379, $intern_62, LinkedHashMap$EntrySet);
_.clear_0 = function clear_11(){
  $clear(this.this$01);
}
;
_.contains_0 = function contains_9(o){
  return $contains_1(this, o);
}
;
_.iterator = function iterator_11(){
  return new LinkedHashMap$EntrySet$EntryIterator(this);
}
;
_.remove = function remove_27(entry){
  var key;
  if ($contains_1(this, entry)) {
    key = castTo(entry, 44).getKey();
    $remove_7(this.this$01, key);
    return true;
  }
  return false;
}
;
_.size_1 = function size_13(){
  return $size(this.this$01.map_0);
}
;
var Ljava_util_LinkedHashMap$EntrySet_2_classLit = createForClass('java.util', 'LinkedHashMap/EntrySet', 323);
function LinkedHashMap$EntrySet$EntryIterator(this$1){
  this.this$11 = this$1;
  this.next_0 = this$1.this$01.head.next_0;
  recordLastKnownStructure(this$1.this$01.map_0, this);
}

defineClass(324, 1, {}, LinkedHashMap$EntrySet$EntryIterator);
_.next_1 = function next_10(){
  return checkStructuralChange(this.this$11.this$01.map_0, this) , checkCriticalElement(this.next_0 != this.this$11.this$01.head) , this.last = this.next_0 , this.next_0 = this.next_0.next_0 , this.last;
}
;
_.hasNext_0 = function hasNext_9(){
  return this.next_0 != this.this$11.this$01.head;
}
;
_.remove_1 = function remove_28(){
  checkCriticalState(!!this.last);
  checkStructuralChange(this.this$11.this$01.map_0, this);
  $remove_8(this.last);
  $remove(this.this$11.this$01.map_0, this.last.key);
  recordLastKnownStructure(this.this$11.this$01.map_0, this);
  this.last = null;
}
;
var Ljava_util_LinkedHashMap$EntrySet$EntryIterator_2_classLit = createForClass('java.util', 'LinkedHashMap/EntrySet/EntryIterator', 324);
function $clinit_Locale(){
  $clinit_Locale = emptyMethod;
  ROOT = new Locale$1;
  defaultLocale = new Locale$4;
}

defineClass(373, 1, {});
var ROOT, defaultLocale;
var Ljava_util_Locale_2_classLit = createForClass('java.util', 'Locale', 373);
function Locale$1(){
}

defineClass(255, 373, {}, Locale$1);
_.toString_0 = function toString_38(){
  return '';
}
;
var Ljava_util_Locale$1_2_classLit = createForClass('java.util', 'Locale/1', 255);
function Locale$4(){
}

defineClass(256, 373, {}, Locale$4);
_.toString_0 = function toString_39(){
  return 'unknown';
}
;
var Ljava_util_Locale$4_2_classLit = createForClass('java.util', 'Locale/4', 256);
function NoSuchElementException(){
  RuntimeException.call(this);
}

defineClass(341, 105, $intern_23, NoSuchElementException);
var Ljava_util_NoSuchElementException_2_classLit = createForClass('java.util', 'NoSuchElementException', 341);
function equals_41(a, b){
  return maskUndefined(a) === maskUndefined(b) || a != null && equals_Ljava_lang_Object__Z__devirtual$(a, b);
}

function hashCode_20(o){
  return o != null?hashCode__I__devirtual$(o):0;
}

function $clinit_Random(){
  $clinit_Random = emptyMethod;
  var i, i0, twoToTheXMinus24Tmp, twoToTheXMinus48Tmp;
  twoToTheXMinus24 = initUnidimensionalArray(D_classLit, $intern_24, 41, 25, 15, 1);
  twoToTheXMinus48 = initUnidimensionalArray(D_classLit, $intern_24, 41, 33, 15, 1);
  twoToTheXMinus48Tmp = 1.52587890625E-5;
  for (i0 = 32; i0 >= 0; i0--) {
    twoToTheXMinus48[i0] = twoToTheXMinus48Tmp;
    twoToTheXMinus48Tmp *= 0.5;
  }
  twoToTheXMinus24Tmp = 1;
  for (i = 24; i >= 0; i--) {
    twoToTheXMinus24[i] = twoToTheXMinus24Tmp;
    twoToTheXMinus24Tmp *= 0.5;
  }
}

function $nextDouble(this$static){
  return $nextInternal(this$static, 26) * 1.4901161193847656E-8 + $nextInternal(this$static, 27) * 1.1102230246251565E-16;
}

function $nextInternal(this$static, bits){
  var carry, dval, h, hi, l, lo;
  hi = this$static.seedhi * 15525485 + this$static.seedlo * 1502;
  lo = this$static.seedlo * 15525485 + 11;
  carry = $wnd.Math.floor(lo * 5.9604644775390625E-8);
  hi += carry;
  lo -= carry * $intern_54;
  hi %= $intern_54;
  this$static.seedhi = hi;
  this$static.seedlo = lo;
  if (bits <= 24) {
    return $wnd.Math.floor(this$static.seedhi * twoToTheXMinus24[bits]);
  }
   else {
    h = this$static.seedhi * (1 << bits - 24);
    l = $wnd.Math.floor(this$static.seedlo * twoToTheXMinus48[bits]);
    dval = h + l;
    dval >= 2147483648 && (dval -= 4294967296);
    return dval;
  }
}

function Random(){
  $clinit_Random();
  this.seedhi = 1497;
  this.seedlo = 12004216;
}

defineClass(353, 1, {}, Random);
_.seedhi = 0;
_.seedlo = 0;
var twoToTheXMinus24, twoToTheXMinus48;
var Ljava_util_Random_2_classLit = createForClass('java.util', 'Random', 353);
function $add_2(this$static, newElement){
  !this$static.builder?(this$static.builder = new StringBuilder_1(this$static.prefix)):$append_3(this$static.builder, this$static.delimiter);
  $append_2(this$static.builder, newElement);
  return this$static;
}

function StringJoiner(prefix, suffix){
  this.delimiter = ', ';
  this.prefix = prefix;
  this.suffix = suffix;
  this.emptyValue = this.prefix + ('' + this.suffix);
}

defineClass(218, 1, {}, StringJoiner);
_.toString_0 = function toString_40(){
  return !this.builder?this.emptyValue:this.suffix.length == 0?this.builder.string:this.builder.string + ('' + this.suffix);
}
;
var Ljava_util_StringJoiner_2_classLit = createForClass('java.util', 'StringJoiner', 218);
function $clear_0(this$static){
  this$static.root = null;
  this$static.size_0 = 0;
}

function $getEntry_0(this$static, key){
  var c, childNum, tree;
  tree = this$static.root;
  while (tree) {
    c = $compare_21(key, tree.key);
    if (c == 0) {
      return tree;
    }
    childNum = c < 0?0:1;
    tree = tree.child[childNum];
  }
  return null;
}

function $inOrderAdd(this$static, list, type_0, current, fromKey, fromInclusive, toKey, toInclusive){
  var leftNode, rightNode;
  if (!current) {
    return;
  }
  leftNode = current.child[0];
  !!leftNode && $inOrderAdd(this$static, list, type_0, leftNode, fromKey, fromInclusive, toKey, toInclusive);
  $inRange(this$static, type_0, current.key, fromKey, fromInclusive, toKey, toInclusive) && list.add_0(current);
  rightNode = current.child[1];
  !!rightNode && $inOrderAdd(this$static, list, type_0, rightNode, fromKey, fromInclusive, toKey, toInclusive);
}

function $inRange(this$static, type_0, key, fromKey, fromInclusive, toKey, toInclusive){
  var compare, compare0;
  if (type_0.fromKeyValid() && (compare0 = $compare_21(key, fromKey) , compare0 < 0 || !fromInclusive && compare0 == 0)) {
    return false;
  }
  if (type_0.toKeyValid() && (compare = $compare_21(key, toKey) , compare > 0 || !toInclusive && compare == 0)) {
    return false;
  }
  return true;
}

function $insert(this$static, tree, newNode, state){
  var c, childNum;
  if (!tree) {
    return newNode;
  }
   else {
    c = $compare_21(newNode.key, tree.key);
    if (c == 0) {
      state.value_0 = $setValue_0(tree, newNode.value_0);
      state.found = true;
      return tree;
    }
    childNum = c < 0?0:1;
    tree.child[childNum] = $insert(this$static, tree.child[childNum], newNode, state);
    if ($isRed(tree.child[childNum])) {
      if ($isRed(tree.child[1 - childNum])) {
        tree.isRed = true;
        tree.child[0].isRed = false;
        tree.child[1].isRed = false;
      }
       else {
        $isRed(tree.child[childNum].child[childNum])?(tree = $rotateSingle(tree, 1 - childNum)):$isRed(tree.child[childNum].child[1 - childNum]) && (tree = $rotateDouble(tree, 1 - childNum));
      }
    }
  }
  return tree;
}

function $isRed(node){
  return !!node && node.isRed;
}

function $put_4(this$static, key, value_0){
  var node, state;
  node = new TreeMap$Node(key, value_0);
  state = new TreeMap$State;
  this$static.root = $insert(this$static, this$static.root, node, state);
  state.found || ++this$static.size_0;
  this$static.root.isRed = false;
  return state.value_0;
}

function $remove_9(this$static, k){
  var state;
  state = new TreeMap$State;
  $removeWithState(this$static, k, state);
  return state.value_0;
}

function $removeEntry(this$static, entry){
  var state;
  state = new TreeMap$State;
  state.matchValue = true;
  state.value_0 = entry.getValue();
  return $removeWithState(this$static, entry.getKey(), state);
}

function $removeWithState(this$static, key, state){
  var c, dir_0, dir2, found, grandparent, head, last, newNode, node, parent_0, sibling;
  if (!this$static.root) {
    return false;
  }
  found = null;
  parent_0 = null;
  head = new TreeMap$Node(null, null);
  dir_0 = 1;
  head.child[1] = this$static.root;
  node = head;
  while (node.child[dir_0]) {
    last = dir_0;
    grandparent = parent_0;
    parent_0 = node;
    node = node.child[dir_0];
    c = $compare_21(key, node.key);
    dir_0 = c < 0?0:1;
    c == 0 && (!state.matchValue || equals_41(node.value_0, state.value_0)) && (found = node);
    if (!(!!node && node.isRed) && !$isRed(node.child[dir_0])) {
      if ($isRed(node.child[1 - dir_0])) {
        parent_0 = parent_0.child[last] = $rotateSingle(node, dir_0);
      }
       else if (!$isRed(node.child[1 - dir_0])) {
        sibling = parent_0.child[1 - last];
        if (sibling) {
          if (!$isRed(sibling.child[1 - last]) && !$isRed(sibling.child[last])) {
            parent_0.isRed = false;
            sibling.isRed = true;
            node.isRed = true;
          }
           else {
            dir2 = grandparent.child[1] == parent_0?1:0;
            $isRed(sibling.child[last])?(grandparent.child[dir2] = $rotateDouble(parent_0, last)):$isRed(sibling.child[1 - last]) && (grandparent.child[dir2] = $rotateSingle(parent_0, last));
            node.isRed = grandparent.child[dir2].isRed = true;
            grandparent.child[dir2].child[0].isRed = false;
            grandparent.child[dir2].child[1].isRed = false;
          }
        }
      }
    }
  }
  if (found) {
    state.found = true;
    state.value_0 = found.value_0;
    if (node != found) {
      newNode = new TreeMap$Node(node.key, node.value_0);
      $replaceNode(this$static, head, found, newNode);
      parent_0 == found && (parent_0 = newNode);
    }
    parent_0.child[parent_0.child[1] == node?1:0] = node.child[!node.child[0]?1:0];
    --this$static.size_0;
  }
  this$static.root = head.child[1];
  !!this$static.root && (this$static.root.isRed = false);
  return state.found;
}

function $replaceNode(this$static, head, node, newNode){
  var direction, parent_0;
  parent_0 = head;
  direction = parent_0.key == null || $compare_21(node.key, parent_0.key) > 0?1:0;
  while (parent_0.child[direction] != node) {
    parent_0 = parent_0.child[direction];
    direction = $compare_21(node.key, parent_0.key) > 0?1:0;
  }
  parent_0.child[direction] = newNode;
  newNode.isRed = node.isRed;
  newNode.child[0] = node.child[0];
  newNode.child[1] = node.child[1];
  node.child[0] = null;
  node.child[1] = null;
}

function $rotateDouble(tree, rotateDirection){
  var otherChildDir;
  otherChildDir = 1 - rotateDirection;
  tree.child[otherChildDir] = $rotateSingle(tree.child[otherChildDir], otherChildDir);
  return $rotateSingle(tree, rotateDirection);
}

function $rotateSingle(tree, rotateDirection){
  var otherChildDir, save;
  otherChildDir = 1 - rotateDirection;
  save = tree.child[otherChildDir];
  tree.child[otherChildDir] = save.child[rotateDirection];
  save.child[rotateDirection] = tree;
  tree.isRed = true;
  save.isRed = false;
  return save;
}

function TreeMap(){
  this.root = null;
  this.cmp = ($clinit_Comparators() , $clinit_Comparators() , INTERNAL_NATURAL_ORDER);
}

defineClass(178, 394, {8:1, 68:1}, TreeMap);
_.clear_0 = function clear_12(){
  $clear_0(this);
}
;
_.entrySet_0 = function entrySet_3(){
  return new TreeMap$EntrySet(this);
}
;
_.put = function put_3(key, value_0){
  return $put_4(this, key, value_0);
}
;
_.remove_0 = function remove_29(k){
  return $remove_9(this, k);
}
;
_.size_1 = function size_14(){
  return this.size_0;
}
;
_.size_0 = 0;
var Ljava_util_TreeMap_2_classLit = createForClass('java.util', 'TreeMap', 178);
function $next_4(this$static){
  return this$static.last = castTo($next_2(this$static.iter), 44);
}

function $remove_10(this$static){
  $remove_1(this$static.iter);
  $removeEntry(this$static.this$01, this$static.last);
  this$static.last = null;
}

function TreeMap$EntryIterator(this$0){
  TreeMap$EntryIterator_0.call(this, this$0, ($clinit_TreeMap$SubMapType() , All));
}

function TreeMap$EntryIterator_0(this$0, type_0){
  var list;
  this.this$01 = this$0;
  list = new ArrayList;
  $inOrderAdd(this$0, list, type_0, this$0.root, null, false, null, false);
  this.iter = new AbstractList$ListIteratorImpl(list, 0);
}

defineClass(179, 1, {}, TreeMap$EntryIterator);
_.next_1 = function next_11(){
  return $next_4(this);
}
;
_.hasNext_0 = function hasNext_10(){
  return $hasNext(this.iter);
}
;
_.remove_1 = function remove_30(){
  $remove_10(this);
}
;
var Ljava_util_TreeMap$EntryIterator_2_classLit = createForClass('java.util', 'TreeMap/EntryIterator', 179);
function TreeMap$EntrySet(this$0){
  this.this$01 = this$0;
  AbstractNavigableMap$EntrySet.call(this, this$0);
}

defineClass(205, 238, $intern_62, TreeMap$EntrySet);
_.clear_0 = function clear_13(){
  $clear_0(this.this$01);
}
;
var Ljava_util_TreeMap$EntrySet_2_classLit = createForClass('java.util', 'TreeMap/EntrySet', 205);
function TreeMap$Node(key, value_0){
  AbstractMap$SimpleEntry.call(this, key, value_0);
  this.child = initUnidimensionalArray(Ljava_util_TreeMap$Node_2_classLit, $intern_9, 152, 2, 0, 1);
  this.isRed = true;
}

defineClass(152, 135, {156:1, 135:1, 44:1, 152:1}, TreeMap$Node);
_.isRed = false;
var Ljava_util_TreeMap$Node_2_classLit = createForClass('java.util', 'TreeMap/Node', 152);
function TreeMap$State(){
}

defineClass(206, 1, {}, TreeMap$State);
_.toString_0 = function toString_41(){
  return 'State: mv=' + this.matchValue + ' value=' + this.value_0 + ' done=' + this.done_0 + ' found=' + this.found;
}
;
_.done_0 = false;
_.found = false;
_.matchValue = false;
var Ljava_util_TreeMap$State_2_classLit = createForClass('java.util', 'TreeMap/State', 206);
function $clinit_TreeMap$SubMapType(){
  $clinit_TreeMap$SubMapType = emptyMethod;
  All = new TreeMap$SubMapType('All', 0);
  Head = new TreeMap$SubMapType$1;
  Range_2 = new TreeMap$SubMapType$2;
  Tail = new TreeMap$SubMapType$3;
}

function TreeMap$SubMapType(enum$name, enum$ordinal){
  Enum.call(this, enum$name, enum$ordinal);
}

function values_2(){
  $clinit_TreeMap$SubMapType();
  return stampJavaTypeInfo(getClassLiteralForArray(Ljava_util_TreeMap$SubMapType_2_classLit, 1), $intern_41, 130, 0, [All, Head, Range_2, Tail]);
}

defineClass(130, 117, $intern_67, TreeMap$SubMapType);
_.fromKeyValid = function fromKeyValid(){
  return false;
}
;
_.toKeyValid = function toKeyValid(){
  return false;
}
;
var All, Head, Range_2, Tail;
var Ljava_util_TreeMap$SubMapType_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType', 130, values_2);
function TreeMap$SubMapType$1(){
  TreeMap$SubMapType.call(this, 'Head', 1);
}

defineClass(348, 130, $intern_67, TreeMap$SubMapType$1);
_.toKeyValid = function toKeyValid_0(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$1_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/1', 348, null);
function TreeMap$SubMapType$2(){
  TreeMap$SubMapType.call(this, 'Range', 2);
}

defineClass(349, 130, $intern_67, TreeMap$SubMapType$2);
_.fromKeyValid = function fromKeyValid_0(){
  return true;
}
;
_.toKeyValid = function toKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$2_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/2', 349, null);
function TreeMap$SubMapType$3(){
  TreeMap$SubMapType.call(this, 'Tail', 3);
}

defineClass(350, 130, $intern_67, TreeMap$SubMapType$3);
_.fromKeyValid = function fromKeyValid_1(){
  return true;
}
;
var Ljava_util_TreeMap$SubMapType$3_2_classLit = createForEnum('java.util', 'TreeMap/SubMapType/3', 350, null);
function TreeSet(){
  this.map_0 = new TreeMap;
}

defineClass(326, 379, {8:1, 96:1, 109:1, 102:1, 126:1}, TreeSet);
_.add_0 = function add_10(o){
  return $put_4(this.map_0, o, ($clinit_Boolean() , FALSE_0)) == null;
}
;
_.clear_0 = function clear_14(){
  $clear_0(this.map_0);
}
;
_.contains_0 = function contains_10(o){
  return $containsKey_0(this.map_0, o);
}
;
_.iterator = function iterator_12(){
  var entryIterator;
  return entryIterator = new TreeMap$EntryIterator((new TreeMap$EntrySet((new AbstractNavigableMap$NavigableKeySet(this.map_0)).map_0)).this$01_0) , new AbstractNavigableMap$NavigableKeySet$1(entryIterator);
}
;
_.remove = function remove_31(o){
  return $remove_9(this.map_0, o) != null;
}
;
_.size_1 = function size_15(){
  return this.map_0.size_0;
}
;
var Ljava_util_TreeSet_2_classLit = createForClass('java.util', 'TreeSet', 326);
function $clinit_Level(){
  $clinit_Level = emptyMethod;
  ALL = new Level$LevelAll;
  CONFIG = new Level$LevelConfig;
  FINE = new Level$LevelFine;
  FINER = new Level$LevelFiner;
  FINEST = new Level$LevelFinest;
  INFO = new Level$LevelInfo;
  OFF = new Level$LevelOff;
  SEVERE = new Level$LevelSevere;
  WARNING = new Level$LevelWarning;
}

function parse_1(name_0){
  $clinit_Level();
  var value_0;
  value_0 = $toUpperCase(name_0, ($clinit_Locale() , ROOT));
  switch (value_0) {
    case 'ALL':
      return ALL;
    case 'CONFIG':
      return CONFIG;
    case 'FINE':
      return FINE;
    case 'FINER':
      return FINER;
    case 'FINEST':
      return FINEST;
    case 'INFO':
      return INFO;
    case 'OFF':
      return OFF;
    case 'SEVERE':
      return SEVERE;
    case 'WARNING':
      return WARNING;
    default:throw toJs(new IllegalArgumentException('Invalid level "' + name_0 + '"'));
  }
}

defineClass(378, 1, $intern_65);
_.getName = function getName_0(){
  return 'DUMMY';
}
;
_.intValue = function intValue(){
  return -1;
}
;
_.toString_0 = function toString_42(){
  return this.getName();
}
;
var ALL, CONFIG, FINE, FINER, FINEST, INFO, OFF, SEVERE, WARNING;
var Ljava_util_logging_Level_2_classLit = createForClass('java.util.logging', 'Level', 378);
function Level$LevelAll(){
}

defineClass(271, 378, $intern_65, Level$LevelAll);
_.getName = function getName_1(){
  return 'ALL';
}
;
_.intValue = function intValue_0(){
  return -2147483648;
}
;
var Ljava_util_logging_Level$LevelAll_2_classLit = createForClass('java.util.logging', 'Level/LevelAll', 271);
function Level$LevelConfig(){
}

defineClass(272, 378, $intern_65, Level$LevelConfig);
_.getName = function getName_2(){
  return 'CONFIG';
}
;
_.intValue = function intValue_1(){
  return 700;
}
;
var Ljava_util_logging_Level$LevelConfig_2_classLit = createForClass('java.util.logging', 'Level/LevelConfig', 272);
function Level$LevelFine(){
}

defineClass(273, 378, $intern_65, Level$LevelFine);
_.getName = function getName_3(){
  return 'FINE';
}
;
_.intValue = function intValue_2(){
  return 500;
}
;
var Ljava_util_logging_Level$LevelFine_2_classLit = createForClass('java.util.logging', 'Level/LevelFine', 273);
function Level$LevelFiner(){
}

defineClass(274, 378, $intern_65, Level$LevelFiner);
_.getName = function getName_4(){
  return 'FINER';
}
;
_.intValue = function intValue_3(){
  return 400;
}
;
var Ljava_util_logging_Level$LevelFiner_2_classLit = createForClass('java.util.logging', 'Level/LevelFiner', 274);
function Level$LevelFinest(){
}

defineClass(275, 378, $intern_65, Level$LevelFinest);
_.getName = function getName_5(){
  return 'FINEST';
}
;
_.intValue = function intValue_4(){
  return 300;
}
;
var Ljava_util_logging_Level$LevelFinest_2_classLit = createForClass('java.util.logging', 'Level/LevelFinest', 275);
function Level$LevelInfo(){
}

defineClass(276, 378, $intern_65, Level$LevelInfo);
_.getName = function getName_6(){
  return 'INFO';
}
;
_.intValue = function intValue_5(){
  return 800;
}
;
var Ljava_util_logging_Level$LevelInfo_2_classLit = createForClass('java.util.logging', 'Level/LevelInfo', 276);
function Level$LevelOff(){
}

defineClass(277, 378, $intern_65, Level$LevelOff);
_.getName = function getName_7(){
  return 'OFF';
}
;
_.intValue = function intValue_6(){
  return $intern_0;
}
;
var Ljava_util_logging_Level$LevelOff_2_classLit = createForClass('java.util.logging', 'Level/LevelOff', 277);
function Level$LevelSevere(){
}

defineClass(278, 378, $intern_65, Level$LevelSevere);
_.getName = function getName_8(){
  return 'SEVERE';
}
;
_.intValue = function intValue_7(){
  return $intern_10;
}
;
var Ljava_util_logging_Level$LevelSevere_2_classLit = createForClass('java.util.logging', 'Level/LevelSevere', 278);
function Level$LevelWarning(){
}

defineClass(279, 378, $intern_65, Level$LevelWarning);
_.getName = function getName_9(){
  return 'WARNING';
}
;
_.intValue = function intValue_8(){
  return 900;
}
;
var Ljava_util_logging_Level$LevelWarning_2_classLit = createForClass('java.util.logging', 'Level/LevelWarning', 279);
function $addLoggerImpl(this$static, logger){
  $putStringValue(this$static.loggerMap, logger.name_0, logger);
}

function $ensureLogger(this$static, name_0){
  var logger, newLogger, name_1, parentName;
  logger = castTo($getStringValue(this$static.loggerMap, name_0), 168);
  if (!logger) {
    newLogger = new Logger(name_0);
    name_1 = newLogger.name_0;
    parentName = $substring_0(name_1, 0, max_1(0, $lastIndexOf(name_1, fromCodePoint(46))));
    $setParent(newLogger, $ensureLogger(this$static, parentName));
    $putStringValue(this$static.loggerMap, newLogger.name_0, newLogger);
    return newLogger;
  }
  return logger;
}

function LogManager(){
  this.loggerMap = new HashMap;
}

function getLogManager(){
  var rootLogger;
  if (!singleton) {
    singleton = new LogManager;
    rootLogger = new Logger('');
    $setLevel_0(rootLogger, ($clinit_Level() , INFO));
    $addLoggerImpl(singleton, rootLogger);
  }
  return singleton;
}

defineClass(265, 1, {}, LogManager);
var singleton;
var Ljava_util_logging_LogManager_2_classLit = createForClass('java.util.logging', 'LogManager', 265);
function $setLoggerName(this$static, newName){
  this$static.loggerName = newName;
}

function LogRecord(msg){
  this.msg = msg;
  this.millis = ($clinit_System() , fromDouble_0(now_2()));
}

defineClass(306, 1, $intern_65, LogRecord);
_.loggerName = '';
_.millis = 0;
_.thrown = null;
var Ljava_util_logging_LogRecord_2_classLit = createForClass('java.util.logging', 'LogRecord', 306);
function $actuallyLog(this$static, record){
  var handler, handler$array, handler$array0, handler$index, handler$index0, handler$max, handler$max0, logger;
  for (handler$array0 = castTo($toArray_0(this$static.handlers, initUnidimensionalArray(Ljava_util_logging_Handler_2_classLit, $intern_68, 155, this$static.handlers.array.length, 0, 1)), 244) , handler$index0 = 0 , handler$max0 = handler$array0.length; handler$index0 < handler$max0; ++handler$index0) {
    handler = handler$array0[handler$index0];
    handler.publish(record);
  }
  logger = this$static.useParentHandlers?this$static.parent_0:null;
  while (logger) {
    for (handler$array = castTo($toArray_0(logger.handlers, initUnidimensionalArray(Ljava_util_logging_Handler_2_classLit, $intern_68, 155, logger.handlers.array.length, 0, 1)), 244) , handler$index = 0 , handler$max = handler$array.length; handler$index < handler$max; ++handler$index) {
      handler = handler$array[handler$index];
      handler.publish(record);
    }
    logger = logger.useParentHandlers?logger.parent_0:null;
  }
}

function $getEffectiveLevel(this$static){
  var effectiveLevel, logger;
  if (this$static.level) {
    return this$static.level;
  }
  logger = this$static.parent_0;
  while (logger) {
    effectiveLevel = logger.level;
    if (effectiveLevel) {
      return effectiveLevel;
    }
    logger = logger.parent_0;
  }
  return $clinit_Level() , INFO;
}

function $log_1(this$static, msg, thrown){
  var record;
  $intern_10 >= $getEffectiveLevel(this$static).intValue() && (record = new LogRecord(msg) , record.thrown = thrown , $setLoggerName(record, this$static.name_0) , $actuallyLog(this$static, record) , undefined);
}

function $setLevel_0(this$static, newLevel){
  this$static.level = newLevel;
}

function $setParent(this$static, newParent){
  !!newParent && (this$static.parent_0 = newParent);
}

function Logger(name_0){
  this.name_0 = name_0;
  this.useParentHandlers = true;
  this.handlers = new ArrayList;
}

function getLogger(name_0){
  return $ensureLogger(getLogManager(), name_0);
}

defineClass(168, 1, {168:1}, Logger);
_.level = null;
_.useParentHandlers = false;
var Ljava_util_logging_Logger_2_classLit = createForClass('java.util.logging', 'Logger', 168);
function applySplice(array, index_0, deleteCount, arrayToAdd){
  Array.prototype.splice.apply(array, [index_0, deleteCount].concat(arrayToAdd));
}

function clone_0(array, toIndex){
  var result;
  result = array.slice(0, toIndex);
  return stampJavaTypeInfo_0(result, array);
}

function copy_0(src_0, srcOfs, dest, destOfs, len){
  var batchEnd, batchStart, end;
  if (src_0 === dest) {
    src_0 = src_0.slice(srcOfs, srcOfs + len);
    srcOfs = 0;
  }
  for (batchStart = srcOfs , end = srcOfs + len; batchStart < end;) {
    batchEnd = batchStart + $intern_12 < end?batchStart + $intern_12:end;
    len = batchEnd - batchStart;
    applySplice(dest, destOfs, 0, src_0.slice(batchStart, batchEnd));
    batchStart = batchEnd;
    destOfs += len;
  }
}

function insertTo(array, index_0, value_0){
  array.splice(index_0, 0, value_0);
}

function insertTo_0(array, index_0, values){
  copy_0(values, 0, array, index_0, values.length);
}

function removeFrom(array, index_0, deleteCount){
  array.splice(index_0, deleteCount);
}

function now_2(){
  if (Date.now) {
    return Date.now();
  }
  return (new Date).getTime();
}

function checkCriticalArgument(expression, errorMessage){
  if (!expression) {
    throw toJs(new IllegalArgumentException(errorMessage));
  }
}

function checkCriticalArrayBounds(end, length_0){
  if (0 > end) {
    throw toJs(new IllegalArgumentException('fromIndex: 0 > toIndex: ' + end));
  }
  if (end > length_0) {
    throw toJs(new ArrayIndexOutOfBoundsException('fromIndex: 0, toIndex: ' + end + ', length: ' + length_0));
  }
}

function checkCriticalArrayType(expression){
  if (!expression) {
    throw toJs(new ArrayStoreException);
  }
}

function checkCriticalElement(expression){
  if (!expression) {
    throw toJs(new NoSuchElementException);
  }
}

function checkCriticalElementIndex(index_0, size_0){
  if (index_0 < 0 || index_0 >= size_0) {
    throw toJs(new IndexOutOfBoundsException('Index: ' + index_0 + ', Size: ' + size_0));
  }
}

function checkCriticalNotNull(reference){
  if (reference == null) {
    throw toJs(new NullPointerException);
  }
  return reference;
}

function checkCriticalPositionIndex(index_0, size_0){
  if (index_0 < 0 || index_0 > size_0) {
    throw toJs(new IndexOutOfBoundsException('Index: ' + index_0 + ', Size: ' + size_0));
  }
}

function checkCriticalPositionIndexes(start_0, end, size_0){
  if (start_0 < 0 || end > size_0) {
    throw toJs(new IndexOutOfBoundsException('fromIndex: ' + start_0 + ', toIndex: ' + end + ', size: ' + size_0));
  }
  if (start_0 > end) {
    throw toJs(new IllegalArgumentException('fromIndex: ' + start_0 + ' > toIndex: ' + end));
  }
}

function checkCriticalState(expression){
  if (!expression) {
    throw toJs(new IllegalStateException);
  }
}

function checkCriticalStringBounds(end, length_0){
  if (end > length_0 || end < 0) {
    throw toJs(new StringIndexOutOfBoundsException('fromIndex: 0, toIndex: ' + end + ', length: ' + length_0));
  }
}

function checkCriticalType(expression){
  if (!expression) {
    throw toJs(new ClassCastException);
  }
}

function checkNotNull(reference){
  checkCriticalNotNull(reference);
  return reference;
}

function compare_28(a, b){
  return a == b?0:a < b?-1:1;
}

function isNaN_0(d){
  return isNaN(d);
}

function parseInt_1(s, radix){
  return parseInt(s, radix);
}

function setPropertySafe(map_0, key, value_0){
  try {
    map_0[key] = value_0;
  }
   catch (ignored) {
  }
}

function getHashCode_0(o){
  return o.$H || (o.$H = ++nextHashId);
}

var nextHashId = 0;
function $clinit_StringHashCache(){
  $clinit_StringHashCache = emptyMethod;
  back_1 = {};
  front = {};
}

function compute(str){
  var hashCode, i, n, nBatch;
  hashCode = 0;
  n = str.length;
  nBatch = n - 4;
  i = 0;
  while (i < nBatch) {
    hashCode = str.charCodeAt(i + 3) + 31 * (str.charCodeAt(i + 2) + 31 * (str.charCodeAt(i + 1) + 31 * (str.charCodeAt(i) + 31 * hashCode)));
    hashCode = hashCode | 0;
    i += 4;
  }
  while (i < n) {
    hashCode = hashCode * 31 + $charAt_0(str, i++);
  }
  hashCode = hashCode | 0;
  return hashCode;
}

function getHashCode_1(str){
  $clinit_StringHashCache();
  var hashCode, key, result;
  key = ':' + str;
  result = front[key];
  if (!(result === undefined)) {
    return result;
  }
  result = back_1[key];
  hashCode = result === undefined?compute(str):result;
  increment_0();
  front[key] = hashCode;
  return hashCode;
}

function increment_0(){
  if (count_0 == 256) {
    back_1 = front;
    front = {};
    count_0 = 0;
  }
  ++count_0;
}

var back_1, count_0 = 0, front;
var C_classLit = createForPrimitive('char', 'C');
var I_classLit = createForPrimitive('int', 'I');
var Z_classLit = createForPrimitive('boolean', 'Z');
var J_classLit = createForPrimitive('long', 'J');
var D_classLit = createForPrimitive('double', 'D');
var F_classLit = createForPrimitive('float', 'F');
var $entry = ($clinit_Impl() , entry_0);
var gwtOnLoad = gwtOnLoad = gwtOnLoad_0;
addInitFunctions(init);
setGwtProperty('permProps', [[['locale', 'default'], ['user.agent', 'gecko1_8']], [['locale', 'default'], ['user.agent', 'ie10']], [['locale', 'default'], ['user.agent', 'ie9']], [['locale', 'default'], ['user.agent', 'safari']]]);

  gwtOnLoad(null, 'DomoChart', null, softPermutationId);
  return $exports.phoenix;
});
