{"version":3,"sources":["MainMenu/domo-logo.jpg","components/CodeExample/CodeExample.tsx","Angular/Angular.tsx","Angular/examples.ts","ApiDoc/ApiDoc.tsx","ApiDoc/examples.ts","components/Chart/Chart.tsx","Area/Area.tsx","Area/examples.ts","Bar/Bar.tsx","Bar/examples.ts","components/PropertyConfig/PropertyConfig.tsx","ChartProperties/ChartProperties.tsx","Charts/Charts.tsx","components/ScrollToTop/ScrollToTop.tsx","Frameworks/Frameworks.tsx","Gauge/Gauge.tsx","Gauge/examples.ts","Home/Home.tsx","Line/Line.tsx","Line/examples.ts","Lollipop/Lollipop.tsx","Lollipop/examples.ts","MainMenu/MainMenu.tsx","Maps/Maps.tsx","Maps/examples.ts","Other/Other.tsx","Other/examples.ts","Pie/Pie.tsx","Pie/examples.ts","React/React.tsx","Theming/Theming.tsx","Theming/examples.ts","Vue/Vue.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","CodeExample","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","language","react_default","a","createElement","react_highlight_default","className","example","Component","AngularIntegration","window","scrollTo","href","target","CodeExample_CodeExample","ApiDoc","style","marginTop","Link","to","Chart","_Component","inherits","createClass","key","value","renderChart","options","width","height","properties","colors","data","rows","columns","chart","PhoenixChart","type","el","ReactDOM","findDOMNode","childNodes","length","firstChild","removeChild","appendChild","canvas","render","STACKEDTREND_DATA","STACKEDTREND_COLUMNS","PHOENIX_DATA_TYPE","STRING","name","mapping","PHOENIX_MAPPING","ITEM","SERIES","DOUBLE","VALUE","FULL_STACKEDTREND_DATA","FULL_STACKEDTREND_COLUMNS","Area","_this","state","showCurved","event","setState","checked","stackedtrend","PHOENIX_CHART_TYPE","VERT_CURVED_STACKED_AREA","STACKEDTREND","horizstackedtrend","HORIZ_CURVED_STACKED_AREA","HORIZ_STACKEDTREND","percentstacked","VERT_CURVED_100PCT_AREA","VERT_100PCT_AREA","FormControlLabel_default","control","Switch_default","onChange","bind","label","Chart_Chart","Bar","VERT_BAR","HORIZ_BAR","categoryMap","config","kpiMetaDataOverrides","reduce","prev","cur","category","deprecated","valueList","push","categoriesArray","PROPERTY_LABELS","propertyLabels","map","c","marginBottom","concat","dangerouslySetInnerHTML","tooltip","__html","replace","filter","v","toLowerCase","val","index","margin","ChartProperties","selectedConfig","chartDef","find","chartType","propConfig","PropertyConfig_Chart","CHART_NAMES","chartNames","AVAILABLE_PROPERTIES","property","chartName","indexOf","prop","sort","b","change","Charts","ScrollToTop","prevProps","location","scrollTop","children","withRouter","Frameworks","GAUGE_DATA","GAUGE_COLUMNS","PROGRESS_DATA","PROGRESS_COLUMNS","COMP_GAUGE_DATA","COMP_GAUGE_COLUMNS","MIN","MAX","PREVIOUS","CURRENT","Gauge","FILLEDGAUGE","GAUGE","COMPFILLGAUGE_BASIC","PROGRESSBAR","Home","Line","vertline","CURVEDLINE","TRENDLINE","horizline","HORIZ_CURVEDLINE","HORIZ_TRENDLINE","Lollipop","VERT_MULTI_DOTPLOT","HORIZ_MULTI_DOTPLOT","MainMenu","src","logo","alt","NavLink","activeClassName","US_DATA","US_COLUMNS","WORLD_DATA","WORLD_COLUMNS","CANADA_DATA","CANADA_COLUMNS","JAPAN_DATA","JAPAN_COLUMNS","AUSTRALIA_DATA","AUSTRALIA_COLUMNS","MAPS","MAP","WORLD_MAP","MAP_CANADA","MAP_JAPAN","MAP_AUSTRALIA","WORD_CLOUD_DATA","WORD_CLOUD_COLUMNS","SPARK_DATA","SPARK_COLUMNS","HEATMAP_DATA","HEATMAP_COLUMNS","TREEMAP_DATA","TREEMAP_COLUMNS","BUBBLE_DATA","BUBBLE_COLUMNS","BUBBLESIZE","Other","BUBBLE","WORD_CLOUD","display","flexDirection","justifyContent","SPARK_LINE","SPARK_BAR","HEATMAP","TREEMAP","Pie","PIE","NAUTILUS","DONUT","NAUTILUS_DONUT","FUNNEL","ReactIntegration","Theming","VueIntegration","App","HashRouter","basename","process","MainMenu_MainMenu","components_ScrollToTop_ScrollToTop","ref","Route","exact","path","component","Maps","Boolean","hostname","match","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63f98847.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/domo-logo.f3adb346.jpg\";","import React, { Component } from 'react';\nimport Highlight from 'react-highlight';\n\nexport default class CodeExample extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const language = this.props.language || 'javascript';\n    return (\n      <Highlight className={language}>\n        {this.props.example}\n      </Highlight>\n    );\n  }\n}","import React, { Component } from 'react';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { COMPONENT_USAGE, CREATE_CHART, INSTALL_PHOENIX, NEW_PROJECT, SAMPLE_COMPONENT } from './examples';\n\nexport default class AngularIntegration extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Phoenix with Angular</h2>\n        <p className=\"body\">This guide assumes you are using Angular CLI for your project and have a working knowledge of Angular version 2+. It will walk you through the setup process and give you a sample component you may decide to build.</p>\n        <h5>Install <a href=\"https://angular.io/cli\" target=\"_blank\">Angular CLI</a></h5>\n\n        <h5>Create new project</h5>\n        <CodeExample example={NEW_PROJECT} language=\"sh\"></CodeExample>\n\n        <h5>Install Phoenix</h5>\n        <CodeExample example={INSTALL_PHOENIX} language=\"sh\"></CodeExample>\n\n        <h5>Create your first Chart</h5>\n        <CodeExample example={CREATE_CHART}></CodeExample>\n\n        <h5>Going Further</h5>\n        <p className=\"body\">At this point you have your chart created and showing on your app. This is a very basic implementation and your own personal implementation is up to your discretion. It is recommended, however, that you create a reusable Angular component for your charts. An example component may look something like this:</p>\n        <CodeExample example={SAMPLE_COMPONENT}></CodeExample>\n        <p className=\"body\">You could then easily use your component in your templates like so:</p>\n        <CodeExample example={COMPONENT_USAGE} language=\"html\"></CodeExample>\n      </div>\n    );\n  }\n}","export const NEW_PROJECT = `$ ng new my-app\n$ cd my-app`;\n\nexport const INSTALL_PHOENIX = `# If you're using npm\n$ npm install --save @domoinc/domo-phoenix\n# If you're using yarn\n$ yarn add @domoinc/domo-phoenix`;\n\nexport const CREATE_CHART = `import { Component, OnInit } from '@angular/core';\nimport {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {\n    const data = {\n      rows: [\n        ['Low', 'Corporate', 8582.8875],\n        ['High', 'Home Office', 14415.941],\n        ['Low', 'Consumer', 1264.8215],\n        ['Medium', 'Small Business', 21478.799],\n        ['Critical', 'Consumer', 2621.97],\n        ['Not Specified', 'Consumer', 2211.31],\n        ['Critical', 'Corporate', 10087.1315],\n        ['Not Specified', 'Corporate', 4407.138],\n        ['High', 'Consumer', 11667.366],\n        ['High', 'Corporate', 19503.323],\n        ['Low', 'Small Business', 1735.3715],\n        ['Low', 'Home Office', 10057.42],\n        ['Medium', 'Home Office', 7691.02],\n        ['Critical', 'Small Business', 4036.064],\n        ['Not Specified', 'Small Business', 84.99],\n        ['High', 'Small Business', 689.74],\n        ['Critical', 'Home Office', 7416.828],\n        ['Not Specified', 'Home Office', 1839.26],\n        ['Medium', 'Consumer', 4280.034],\n        ['Medium', 'Corporate', 7965.238]\n      ],\n      columns: [\n        {\n          type: PHOENIX_DATA_TYPE.STRING,\n          name: 'Order Priority',\n          mapping: PHOENIX_MAPPING.SERIES\n        },\n        {\n          type: PHOENIX_DATA_TYPE.STRING,\n          name: 'Customer Segment',\n          mapping: PHOENIX_MAPPING.ITEM\n        },\n        {\n          type: PHOENIX_DATA_TYPE.DOUBLE,\n          name: 'Sales',\n          mapping: PHOENIX_MAPPING.VALUE\n        }\n      ]\n    };\n\n    // Chart Options\n    const options = {\n      width: 600,\n      height: 500\n    };\n\n    // Create the Phoenix Chart\n    const chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_BAR, data, options);\n\n    // Append the canvas element to your app\n    document.getElementById('myDiv').appendChild(chart.canvas);\n\n    // Render the chart when you're ready for the user to see it\n    chart.render();\n  }\n}`;\n\nexport const SAMPLE_COMPONENT = `import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit\n} from '@angular/core';\nimport {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE\n} from '@domoinc/domo-phoenix';\n\n@Component({\n  selector: 'app-phoenix-chart',\n  templateUrl: './phoenix-chart.component.html',\n  styleUrls: ['./phoenix-chart.component.scss']\n})\nexport class PhoenixChartComponent implements OnInit, OnChanges {\n  @Input() type = PHOENIX_CHART_TYPE.VERT_BAR;\n  @Input() rows: any[];\n  @Input() columns: any[];\n  @Input() width = 600;\n  @Input() height = 500;\n\n  constructor(private elRef: ElementRef) { }\n\n  ngOnInit() {\n    this.render();\n  }\n\n  ngOnChanges() {\n    this.render();\n  }\n\n  render() {\n    const data = {\n      rows: this.rows,\n      columns: this.columns\n    };\n\n    const chart = new PhoenixChart(this.type, data, {\n      width: this.width,\n      height: this.height\n    });\n\n    this.elRef.nativeElement.appendChild(chart.canvas);\n\n    chart.render();\n  }\n}`;\n\nexport const COMPONENT_USAGE = `<app-phoenix-chart [type]=\"myType\" [rows]=\"myData\" [columns]=\"myColumns\"></app-phoenix-chart>`;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { CHART_PROPERTIES, PROPERTIES, RENDER, RESET_COLOR, RESIZE, UPDATE, UPDATE_OPTIONS } from './examples';\n\nexport default class ApiDoc extends Component {\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Chart Options</h2>\n        <p className=\"body\">The following are customizable options along with their defaults:</p>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Property</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>width</td>\n              <td>The width of the Phoenix Chart</td>\n              <td>number</td>\n              <td><code>500</code></td>\n            </tr>\n            <tr>\n              <td>height</td>\n              <td>The height of the Phoenix Chart</td>\n              <td>number</td>\n              <td><code>400</code></td>\n            </tr>\n            <tr>\n              <td>animate</td>\n              <td>Whether or not the chart should animate in when being drawn</td>\n              <td>boolean</td>\n              <td><code>true</code></td>\n            </tr>\n            <tr>\n              <td>colors</td>\n              <td>An array of hex codes to use in drawing charts. Overrides the default color palette.</td>\n              <td>Array of strings</td>\n              <td><code>null</code></td>\n            </tr>\n          </tbody>\n        </table>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Chart Types</h2>\n        <p className=\"body\">We have provided an enum, <code>PHOENIX_CHART_TYPE</code>, for you with all the supported chart types. Note that many of the chart types are not documented yet, but we hope to eventually have all of them fully documented here. Here are a few examples of commonly used chart types:</p>\n        <ul>\n          <li className=\"body\"><code>VERT_BAR</code> (Bar chart)</li>\n          <li className=\"body\"><code>VERT_STACKEDBAR</code> (Stacked bar chart)</li>\n          <li className=\"body\"><code>HORIZ_BAR</code> (Horizontal bar chart)</li>\n          <li className=\"body\"><code>TRENDLINE</code> (Line chart)</li>\n          <li className=\"body\"><code>CURVEDLINE</code> (Curved line chart)</li>\n          <li className=\"body\"><code>NAUTILUS</code> (Nautilus chart)</li>\n          <li className=\"body\"><code>PIE</code> (Pie chart)</li>\n          <li className=\"body\"><code>FUNNEL</code> (Funnel chart)</li>\n          <li className=\"body\"><code>BUBBLE</code> (Bubble chart)</li>\n          <li className=\"body\"><code>DONUT</code> (Donut chart)</li>\n          <li className=\"body\"><code>WORLD_CLOUD</code> (Word cloud)</li>\n        </ul>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Data Types</h2>\n        <p className=\"body\">We have provided an enum, <code>PHOENIX_DATA_TYPE</code>, for you with all the supported data types. Note that for the most part you'll be using <code>STRING</code>, <code>DOUBLE</code>, and <code>DECIMAL</code>. Here are the supported data types:</p>\n        <ul>\n          <li className=\"body\"><code>STRING</code></li>\n          <li className=\"body\"><code>DOUBLE</code></li>\n          <li className=\"body\"><code>LONG</code></li>\n          <li className=\"body\"><code>DECIMAL</code></li>\n          <li className=\"body\"><code>DATE</code></li>\n          <li className=\"body\"><code>DATETIME</code></li>\n          <li className=\"body\"><code>TIME</code></li>\n        </ul>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Mappings</h2>\n        <p className=\"body\">To correctly map your data to the chart, we require that you provide a mapping for your columns. We have an enum, <code>PHOENIX_MAPPING</code>, for the purpose of this mapping. The following are the mappings supported and their purpose:</p>\n        <ul>\n          <li className=\"body\"><code>ITEM</code>: In a bar chart, this would be your x axis</li>\n          <li className=\"body\"><code>VALUE</code>: In a bar chart, this would be your y axis</li>\n          <li className=\"body\"><code>SERIES</code>: This is how your data is grouped</li>\n          <li className=\"body\"><code>CURRENT</code>: This is the current value (see <Link to=\"/chart/gauge\">Gauges</Link>)</li>\n          <li className=\"body\"><code>PREVIOUS</code>: This is the previous value (see <Link to=\"/chart/gauge\">Gauges</Link>)</li>\n          <li className=\"body\"><code>TARGET</code>: This is the target value, usually used to place a target marker on the graph</li>\n          <li className=\"body\"><code>MIN</code>: This is the minimum value (see <Link to=\"/chart/gauge\">Gauges</Link>)</li>\n          <li className=\"body\"><code>MAX</code>: This is the maximum value (see <Link to=\"/chart/gauge\">Gauges</Link>)</li>\n          <li className=\"body\"><code>BUBBLESIZE</code>: This is the value that is used to calculate the bubble size on a bubble chart</li>\n        </ul>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Chart Properties</h2>\n        <p className=\"body\">All Phoenix charts have default properties set to make your chart look great. You can, if you wish, override those properties. Examples of overrides include the chart's font size, whether or not to show the \"Other\" category, bar widths, etc. All usable chart properties are documented on <Link to=\"/properties\">Chart Properties</Link>. You can use them like so:</p>\n        <CodeExample example={CHART_PROPERTIES}></CodeExample>\n        <p className=\"body\">By passing those options, you'll have your chart customized to those settings.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Chart Methods</h2>\n        <p className=\"body\">The following are the methods you have access to on a chart instance.</p>\n\n        <h3 className=\"display-3\" style={{marginTop: '40px'}}>render()</h3>\n        <p className=\"body\">This performs the actual rendering of the chart on the canvas. Your chart will not show up until you have called this method.</p>\n        <CodeExample example={RENDER}></CodeExample>\n\n        <h3 className=\"display-3\" style={{marginTop: '40px'}}>resize(width, height)</h3>\n        <p className=\"body\">The resize method allows you to resize your chart to whatever size you want, given a width and a height. These are in numbers of pixels.</p>\n        <CodeExample example={RESIZE}></CodeExample>\n\n        <h3 className=\"display-3\" style={{marginTop: '40px'}}>update(data, options?)</h3>\n        <p className=\"body\">The update method allows you to provide a new data object, which will update your chart to reflect those changes. NOTE: You do not need to call <code>render()</code> again, this method performs that for you.</p>\n        <CodeExample example={UPDATE}></CodeExample>\n        <p className=\"body\">You may also <em>optionally</em> provide the options object to the update method. In this object you can pass an array of colors for a new color palette, as well as a map of chart property overrides, like so:</p>\n        <CodeExample example={UPDATE_OPTIONS}></CodeExample>\n\n        <h3 className=\"display-3\" style={{marginTop: '40px'}}>setChartProperties(properties)</h3>\n        <p className=\"body\">You can pass your chart new properties any time and that will re-render your chart with those properties your provide. Simply pass an object of property keys with their values to the method.</p>\n        <CodeExample example={PROPERTIES}></CodeExample>\n\n        <h3 className=\"display-3\" style={{marginTop: '40px'}}>resetColorPalette(properties)</h3>\n        <p className=\"body\">This method allows you to reset your chart's color palette back to the default Domo color palette. Your chart will automatically re-draw with the Domo color palette.</p>\n        <CodeExample example={RESET_COLOR}></CodeExample>\n      </div>\n    );\n  }\n}","export const CHART_PROPERTIES = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // ...\n};\n\nconst propertyOverrides = {\n  font_size: 'Largest',\n  hide_other_category: 'true',\n  width_percentage: '50'\n};\n\n// Chart options\nconst options = {\n  width: 600,\n  height: 500,\n  properties: propertyOverrides\n};\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_BAR, data, options);\n\n// Append the canvas element to your app\ndocument.getElementById('myDiv').appendChild(chart.canvas);\n\n// Render the chart when you're ready for the user to see it\nchart.render();`;\n\nexport const RENDER = `// Render chart\nchart.render();`\n\nexport const RESIZE = `// Resize chart to 800px by 500px\nchart.resize(800, 500);`;\n\nexport const UPDATE = `// Get new data\nconst newData = {\n  rows: [['Michael Scott', 43], ['Jim Halpert', 36], ['Dwight Schrute', 41]],\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Name',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Age',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\n// Update chart with new data\nchart.update(newData);`;\n\nexport const UPDATE_OPTIONS = `// Get new data\nconst newData = {\n  // ...\n};\n\nconst options = {\n  colors: ['#002159', '#03449E', '#0967D2', '#47A3F3'],\n  properties: {\n    'chart-property-1': 'value-1',\n    'chart-property-2': 'value-2',\n    'chart-property-3': 'value-3'\n  }\n};\n\n// Update chart with new data as well as options providing a color palette and chart property overrides\nchart.update(newData, options);`;\n\nexport const PROPERTIES = `// Define your properties\nconst properties = {\n  'chart-property-1': 'value-1',\n  'chart-property-2': 'value-2',\n  'chart-property-3': 'value-3'\n};\n// Update chart with new properties\nchart.setChartProperties(properties);`;\n\nexport const RESET_COLOR = `// Reset color palette to default\nchart.resetColorPalette();`;","import { PhoenixChart, PhoenixChartData, PhoenixChartOptions } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport class Chart extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  componentDidUpdate() {\n    this.renderChart();\n  }\n\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  renderChart() {\n    const options: PhoenixChartOptions = {\n      width: this.props.width || 900,\n      height: this.props.height || 400,\n      properties: this.props.properties,\n      colors: this.props.colors\n    };\n    const data: PhoenixChartData = {\n      rows: this.props.data,\n      columns: this.props.columns\n    };\n    const chart = new PhoenixChart(this.props.type, data, options);\n    const el = ReactDOM.findDOMNode(this);\n    if(el) {\n      if(el.childNodes.length > 0 && el.firstChild) {\n        // Trying to render new chart, remove old chart\n        el.removeChild(el.firstChild);\n      }\n      el.appendChild(chart.canvas);\n      chart.render();\n    }\n  }\n\n  render() {\n    return (\n      <div></div>\n    );\n  }\n}","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { AREA, PERCENT } from './examples';\n\nconst STACKEDTREND_DATA = [\n  ['January', 'Store 4', 7256.23],\n  ['January', 'Store 3', 5145.34],\n  ['January', 'Store 2', 3250.00],\n  ['January', 'Store 1', 4578.27],\n  ['February', 'Store 4', 9956.09],\n  ['February', 'Store 3', 9634.46],\n  ['February', 'Store 2', 6672.67],\n  ['February', 'Store 1', 7203.02],\n  ['March', 'Store 4', 6592.02],\n  ['March', 'Store 3', 7205.55],\n  ['March', 'Store 2', 5123.14],\n  ['March', 'Store 1', 3623.52],\n  ['April', 'Store 4', 10283.26],\n  ['April', 'Store 3', 9922.34],\n  ['April', 'Store 2', 7123.00],\n  ['April', 'Store 1', 5293.05]\n];\n\nconst STACKEDTREND_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Date',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Store',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst FULL_STACKEDTREND_DATA = [\n  ['Q1', 'North', 10],\n  ['Q1', 'South', 25],\n  ['Q1', 'West', 38],\n  ['Q1', 'East', 27],\n  ['Q2', 'North', 12],\n  ['Q2', 'South', 33],\n  ['Q2', 'West', 29],\n  ['Q2', 'East', 26],\n  ['Q3', 'North', 12],\n  ['Q3', 'South', 40],\n  ['Q3', 'West', 26],\n  ['Q3', 'East', 22],\n  ['Q4', 'North', 18],\n  ['Q4', 'South', 40],\n  ['Q4', 'West', 11],\n  ['Q4', 'East', 31]\n];\n\nconst FULL_STACKEDTREND_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Quarter',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Region',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Percentage Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class Area extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      showCurved: false\n    };\n  }\n\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  showCurved(event: any) {\n    this.setState({showCurved: event.target.checked});\n  }\n\n  render() {\n    const example = AREA;\n    const percent = PERCENT;\n\n    // Define chart type based on showCurved\n    let stackedtrend = this.state.showCurved ? PHOENIX_CHART_TYPE.VERT_CURVED_STACKED_AREA : PHOENIX_CHART_TYPE.STACKEDTREND;\n    let horizstackedtrend = this.state.showCurved ? PHOENIX_CHART_TYPE.HORIZ_CURVED_STACKED_AREA : PHOENIX_CHART_TYPE.HORIZ_STACKEDTREND;\n    let percentstacked = this.state.showCurved ? PHOENIX_CHART_TYPE.VERT_CURVED_100PCT_AREA : PHOENIX_CHART_TYPE.VERT_100PCT_AREA;\n\n    return (\n      <div className=\"page\">\n        <FormControlLabel\n          className=\"page-switch\"\n          control={\n            <Switch onChange={this.showCurved.bind(this)}></Switch>\n          }\n          label=\"Curved Style\"\n        ></FormControlLabel>\n        <h2 className=\"display-2\">Vertical Stacked Area Charts</h2>\n        <p className=\"body\">A form of area chart, this area chart stacks the series vertically.</p>\n        <Chart type={stackedtrend} data={STACKEDTREND_DATA} columns={STACKEDTREND_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={example}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Horizontal Stacked Area Charts</h2>\n        <p className=\"body\">The same as the vertical stacked area chart, but this chart stacks the series horizontally along the x axis.</p>\n\n        <Chart type={horizstackedtrend} data={STACKEDTREND_DATA} columns={STACKEDTREND_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as the bar chart above, except you use <code>PHOENIX_CHART_TYPE.HORIZ_STACKEDTREND</code> as your chart type.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>100% Stacked Area Charts</h2>\n        <p className=\"body\">A variation of the stacked area chart, this chart fills 100% of the chart and breaks down your values into the percentage it should take.</p>\n\n        <Chart type={percentstacked} data={FULL_STACKEDTREND_DATA} columns={FULL_STACKEDTREND_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={percent}></CodeExample>\n      </div>\n    );\n  }\n}\n","export const AREA = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['January', 'Store 4', 7256.23],\n    ['January', 'Store 3', 5145.34],\n    ['January', 'Store 2', 3250.00],\n    ['January', 'Store 1', 4578.27],\n    ['February', 'Store 4', 9956.09],\n    ['February', 'Store 3', 9634.46],\n    ['February', 'Store 2', 6672.67],\n    ['February', 'Store 1', 7203.02],\n    ['March', 'Store 4', 6592.02],\n    ['March', 'Store 3', 7205.55],\n    ['March', 'Store 2', 5123.14],\n    ['March', 'Store 1', 3623.52],\n    ['April', 'Store 4', 10283.26],\n    ['April', 'Store 3', 9922.34],\n    ['April', 'Store 2', 7123.00],\n    ['April', 'Store 1', 5293.05]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Date',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Store',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.STACKEDTREND, data, options);`;\n\nexport const PERCENT = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Q1', 'North', 10],\n    ['Q1', 'South', 35],\n    ['Q1', 'West', 28],\n    ['Q1', 'East', 27],\n    ['Q2', 'North', 12],\n    ['Q2', 'South', 33],\n    ['Q2', 'West', 29],\n    ['Q2', 'East', 26],\n    ['Q3', 'North', 12],\n    ['Q3', 'South', 40],\n    ['Q3', 'West', 26],\n    ['Q3', 'East', 22],\n    ['Q4', 'North', 13],\n    ['Q4', 'South', 32],\n    ['Q4', 'West', 24],\n    ['Q4', 'East', 31]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Quarter',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Region',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Percentage Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_100PCT_AREA, data, options);`;\n\n","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { VERT_BAR } from './examples';\n\nconst data = [\n  ['Low', 'Corporate', 8582.8875],\n  ['High', 'Home Office', 14415.941],\n  ['Low', 'Consumer', 1264.8215],\n  ['Medium', 'Small Business', 21478.799],\n  ['Critical', 'Consumer', 2621.97],\n  ['Not Specified', 'Consumer', 2211.31],\n  ['Critical', 'Corporate', 10087.1315],\n  ['Not Specified', 'Corporate', 4407.138],\n  ['High', 'Consumer', 11667.366],\n  ['High', 'Corporate', 19503.323],\n  ['Low', 'Small Business', 1735.3715],\n  ['Low', 'Home Office', 10057.42],\n  ['Medium', 'Home Office', 7691.02],\n  ['Critical', 'Small Business', 4036.064],\n  ['Not Specified', 'Small Business', 84.99],\n  ['High', 'Small Business', 689.74],\n  ['Critical', 'Home Office', 7416.828],\n  ['Not Specified', 'Home Office', 1839.26],\n  ['Medium', 'Consumer', 4280.034],\n  ['Medium', 'Corporate', 7965.238]\n];\n\nconst columns = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Order Priority',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Customer Segment',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class Bar extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const example = VERT_BAR;\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Vertical Bar Charts</h2>\n        <p className=\"body\">A basic form of chart, this bar chart displays its data bars vertically.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.VERT_BAR} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={example}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Horizontal Bar Charts</h2>\n        <p className=\"body\">This chart displays its data bars horizontally rather than vertically.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.HORIZ_BAR} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as the bar chart above, except you use <code>PHOENIX_CHART_TYPE.HORIZ_BAR</code> as your chart type.</p>\n      </div>\n    );\n  }\n}\n","export const VERT_BAR = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Low', 'Corporate', 8582.8875],\n    ['High', 'Home Office', 14415.941],\n    ['Low', 'Consumer', 1264.8215],\n    ['Medium', 'Small Business', 21478.799],\n    ['Critical', 'Consumer', 2621.97],\n    ['Not Specified', 'Consumer', 2211.31],\n    ['Critical', 'Corporate', 10087.1315],\n    ['Not Specified', 'Corporate', 4407.138],\n    ['High', 'Consumer', 11667.366],\n    ['High', 'Corporate', 19503.323],\n    ['Low', 'Small Business', 1735.3715],\n    ['Low', 'Home Office', 10057.42],\n    ['Medium', 'Home Office', 7691.02],\n    ['Critical', 'Small Business', 4036.064],\n    ['Not Specified', 'Small Business', 84.99],\n    ['High', 'Small Business', 689.74],\n    ['Critical', 'Home Office', 7416.828],\n    ['Not Specified', 'Home Office', 1839.26],\n    ['Medium', 'Consumer', 4280.034],\n    ['Medium', 'Corporate', 7965.238]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Order Priority',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Customer Segment',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_BAR, data, options);`;\n\n","import React, { Component } from 'react';\nimport propertyLabels from '../../ChartProperties/property-labels.json';\n\nexport default class Chart extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    const categoryMap: any = this.props.config.kpiMetaDataOverrides.reduce(\n      (prev: any, cur: any) => {\n        if (!prev[cur.category]) {\n          prev[cur.category] = [];\n        }\n        if (!cur.deprecated) {\n          if(cur.type !== 'select_list') {\n            if(cur.type === 'boolean') {\n              cur.valueList = ['true', 'false'];\n            }\n            if(cur.type === 'float') {\n              cur.type = 'number';\n            }\n          }\n          prev[cur.category].push(cur);\n        }\n        return prev;\n      },\n      {}\n    );\n    const categoriesArray = [];\n    // Add categories to an iterable array\n    for (const key in categoryMap) {\n      if (categoryMap[key]) {\n        if (key !== 'category__colors') {\n          categoriesArray.push({\n            category: key,\n            properties: categoryMap[key]\n          });\n        }\n      }\n    }\n    const PROPERTY_LABELS: any = propertyLabels;\n    return (\n      <div className=\"chart-property-config\">\n        {/* <h3 className=\"display-3\">{this.props.config.chartName}</h3> */}\n        {categoriesArray.map((c: any) => (\n            <div key={c.category}>\n              <h4 className=\"display-4\">{PROPERTY_LABELS[c.category]}</h4>\n              <table className=\"table\" style={{marginBottom: '40px'}}>\n                <thead>\n                  <tr>\n                    <th>Property</th>\n                    <th>Key</th>\n                    <th>Description</th>\n                    <th>Type</th>\n                    <th>Acceptable Values</th>\n                  </tr>\n                </thead>\n                <tbody>\n                {c.properties.map((p: any) => (\n                  <tr key={p.name}>\n                    <td style={{width: '150px'}}>{PROPERTY_LABELS[`override__${p.name}__label`]}</td>\n                    <td style={{width: '150px'}}><code>{p.name}</code></td>\n                    <td dangerouslySetInnerHTML={p.tooltip ? {__html: PROPERTY_LABELS[p.tooltip].replace(/\\n/g, '<br>')} : {__html: '<p class=\"secondary\">No description</p>'}}></td>\n                    <td style={{width: '100px'}}>{p.type}</td>\n                    <td style={{width: '100px'}}>\n                      {p.valueList && p.valueList.filter((v: any) => v.toLowerCase() !== 'default').map((val: any, index: any) => (\n                        <div key={index}>\n                          <code style={{margin: '5px 0'}}>{val}</code>\n                        </div>\n                      ))}\n                    </td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>\n            </div>\n          )\n        )}\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent, Component } from 'react';\nimport PropertyConfig from '../components/PropertyConfig/PropertyConfig';\nimport chartNames from './chart-names.json';\nimport properties from './chart-property-defs.json';\n\nexport default class ChartProperties extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      selectedConfig: null\n    };\n  }\n\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n  change(event: ChangeEvent<HTMLSelectElement>) {\n    if (event.target.value !== 'select-one') {\n      const chartDef = properties.find(\n        chart => chart.chartType === event.target.value\n      );\n      this.setState({ selectedConfig: chartDef });\n    }\n  }\n\n  render() {\n    let propConfig = null;\n    if (this.state.selectedConfig) {\n      propConfig = <PropertyConfig config={this.state.selectedConfig} />;\n    }\n    const CHART_NAMES: { [key: string]: string } = chartNames;\n    const AVAILABLE_PROPERTIES = properties\n      .map((property: any) => {\n        property.chartName = CHART_NAMES[property.chartType];\n        if(property.chartType.indexOf('horiz') !== -1) {\n          property.chartName += ' (Horizontal)';\n        }\n        return property;\n      })\n      .filter((prop: any) => !!prop.chartName)\n      .sort((a, b) => {\n        if (a.chartName < b.chartName) {\n          return -1;\n        }\n        if (a.chartName > b.chartName) {\n          return 1;\n        }\n        return 0;\n      });\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Chart Properties</h2>\n        <p className=\"body\">\n          Select the chart type you wish to view the properties for. Not all chart types are currently supported.\n        </p>\n        <select onChange={this.change.bind(this)}>\n          <option value=\"select-one\">Select One</option>\n          {AVAILABLE_PROPERTIES.map(prop => (\n            <option key={prop.chartType} value={prop.chartType}>\n              {prop.chartName || prop.chartType}\n            </option>\n          ))}\n        </select>\n        {propConfig}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Charts = () => (\n  <div className=\"page\">\n    <h2 className=\"display-2\">Chart Types</h2>\n    <p className=\"body\">These are the available chart types you can use in Phoenix.</p>\n    <ul>\n      <li>\n        <Link to=\"/chart/bar\">Bar Charts</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/line\">Line Charts</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/lollipop\">Lollipop Charts</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/area\">Area Charts</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/pie\">Pie & Funnel Charts</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/map\">Maps</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/gauge\">Gauges</Link>\n      </li>\n      <li>\n        <Link to=\"/chart/other\">Other Charts</Link>\n      </li>\n    </ul>\n  </div>\n);\n","import { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { withRouter } from 'react-router';\n\nclass ScrollToTop extends Component<any, any> {\n  componentDidUpdate(prevProps: any) {\n    if (this.props.location !== prevProps.location) {\n      const el: any = ReactDOM.findDOMNode(this);\n      if(el) {\n        el.scrollTop = 0;\n      }\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Frameworks extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Framework Examples</h2>\n        <p className=\"body\">We have provided examples of integrating this library with several frameworks.</p>\n        <ul>\n          <li>\n            <Link to=\"/framework/angular\">Angular</Link>\n          </li>\n          <li>\n            <Link to=\"/framework/react\">React</Link>\n          </li>\n          <li>\n            <Link to=\"/framework/vue\">Vue</Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { COMP, GAUGE, PROGRESS } from './examples';\n\nconst GAUGE_DATA = [\n  ['Efficiency', 75]\n];\n\nconst GAUGE_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Metric',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Percentage',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst PROGRESS_DATA = [\n  ['Percent Complete', 75, 100]\n];\n\nconst PROGRESS_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Label',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Percentage',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Max',\n    mapping: PHOENIX_MAPPING.SERIES\n  }\n]\n\nconst COMP_GAUGE_DATA = [\n  [0, 100, 63, 85]\n];\n\nconst COMP_GAUGE_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Min',\n    mapping: PHOENIX_MAPPING.MIN\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Max',\n    mapping: PHOENIX_MAPPING.MAX\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Previous',\n    mapping: PHOENIX_MAPPING.PREVIOUS\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Current',\n    mapping: PHOENIX_MAPPING.CURRENT\n  }\n]\n\nexport default class Gauge extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const gauge = GAUGE;\n    const progress = PROGRESS;\n    const comp = COMP;\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Gauges</h2>\n        <p className=\"body\">A gauge is a type of chart that shows you the current value compared to an existing max value. There are a couple types of gauge you can use.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.FILLEDGAUGE} data={GAUGE_DATA} columns={GAUGE_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={gauge}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Radial Gauge</h2>\n        <p className=\"body\">The radial gauge is the same as the filled gauge above just with a different appearance.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.GAUGE} data={GAUGE_DATA} columns={GAUGE_COLUMNS}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as the gauge above, except you use <code>PHOENIX_CHART_TYPE.GAUGE</code> as your chart type.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Comparative Gauge</h2>\n        <p className=\"body\">A special type of radial gauge that shows a current value on a range of a min to max value, and compares it with a given previous value.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.COMPFILLGAUGE_BASIC} data={COMP_GAUGE_DATA} columns={COMP_GAUGE_COLUMNS}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={comp}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Progress Bar</h2>\n        <p className=\"body\">The progress bar is simply another way of displaying a current value in the context of a max value.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.PROGRESSBAR} data={PROGRESS_DATA} columns={PROGRESS_COLUMNS}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={progress}></CodeExample>\n      </div>\n    );\n  }\n}\n","export const GAUGE = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Efficiency', 85]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Metric',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Percentage',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.PIE, data, options);`;\n\nexport const COMP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    [0, 100, 63, 85]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Min',\n      mapping: PHOENIX_MAPPING.MIN\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Max',\n      mapping: PHOENIX_MAPPING.MAX\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Previous',\n      mapping: PHOENIX_MAPPING.PREVIOUS\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Current',\n      mapping: PHOENIX_MAPPING.CURRENT\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.COMPFILLGAUGE_BASIC, data, options);`;\n\nexport const PROGRESS = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Percent Complete', 85, 100]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Label',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Percentage',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Max',\n      mapping: PHOENIX_MAPPING.SERIES\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.PROGRESSBAR, data, options);`;\n\n","import React from 'react';\nimport CodeExample from '../components/CodeExample/CodeExample';\n\nconst install = `$ npm install --save @domoinc/domo-phoenix`;\n\nconst example = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Low', 'Corporate', 8582.8875],\n    ['High', 'Home Office', 14415.941],\n    ['Low', 'Consumer', 1264.8215],\n    ['Medium', 'Small Business', 21478.799],\n    ['Critical', 'Consumer', 2621.97],\n    ['Not Specified', 'Consumer', 2211.31],\n    ['Critical', 'Corporate', 10087.1315],\n    ['Not Specified', 'Corporate', 4407.138],\n    ['High', 'Consumer', 11667.366],\n    ['High', 'Corporate', 19503.323],\n    ['Low', 'Small Business', 1735.3715],\n    ['Low', 'Home Office', 10057.42],\n    ['Medium', 'Home Office', 7691.02],\n    ['Critical', 'Small Business', 4036.064],\n    ['Not Specified', 'Small Business', 84.99],\n    ['High', 'Small Business', 689.74],\n    ['Critical', 'Home Office', 7416.828],\n    ['Not Specified', 'Home Office', 1839.26],\n    ['Medium', 'Consumer', 4280.034],\n    ['Medium', 'Corporate', 7965.238]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Order Priority',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Customer Segment',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\n// Chart Options\nconst options = {\n  width: 600,\n  height: 500\n};\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_BAR, data, options);\n\n// Append the canvas element to your app\ndocument.getElementById('myDiv').appendChild(chart.canvas);\n\n// Render the chart when you're ready for the user to see it\nchart.render();`;\n\nexport const Home = () => (\n  <div className=\"page\">\n    <h2 className=\"display-2\">Domo Phoenix Charting</h2>\n    <p className=\"body\">Welcome to Phoenix, the powerful charting engine built by Domo!</p>\n\n    <h3>Getting Started</h3>\n    <p className=\"body\">It's easy to get started with Phoenix. First install the library:</p>\n\n    <CodeExample example={install} language=\"sh\"></CodeExample>\n\n    <p className=\"body\">You can now import and use the charts like so:</p>\n\n    <CodeExample example={example}></CodeExample>\n\n    <p className=\"body\" style={{marginBottom: '40px'}}>Read the rest of the documentation for information on available chart types, the API, and other usage examples.</p>\n  </div>\n);\n","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { TRENDLINE } from './examples';\n\nconst data = [\n  ['January', 8582.8875],\n  ['February', 14415.941],\n  ['March', 14264.8215],\n  ['April', 21478.799],\n  ['May', 15355.97],\n  ['June', 12968.31],\n  ['July', 19087.1315],\n];\n\nconst columns = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Date',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class Line extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      showCurved: false\n    };\n  }\n\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  showCurved(event: any) {\n    this.setState({showCurved: event.target.checked});\n  }\n\n  render() {\n    const example = TRENDLINE;\n    // Define chart type based on showCurved\n    let vertline = this.state.showCurved ? PHOENIX_CHART_TYPE.CURVEDLINE : PHOENIX_CHART_TYPE.TRENDLINE;\n    let horizline = this.state.showCurved ? PHOENIX_CHART_TYPE.HORIZ_CURVEDLINE : PHOENIX_CHART_TYPE.HORIZ_TRENDLINE;\n\n    return (\n      <div className=\"page\">\n        <FormControlLabel\n          className=\"page-switch\"\n          control={\n            <Switch onChange={this.showCurved.bind(this)}></Switch>\n          }\n          label=\"Curved Style\"\n        ></FormControlLabel>\n        <h2 className=\"display-2\">Vertical Line Charts</h2>\n        <p className=\"body\">A basic form of line chart, this chart displays the data vertically on the y axis.</p>\n\n        <Chart type={vertline} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={example}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Horizontal Line Charts</h2>\n        <p className=\"body\">This chart displays the data horizontally on the x axis rather than vertically.</p>\n\n        <Chart type={horizline} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as the bar chart above, except you use <code>PHOENIX_CHART_TYPE.HORIZ_TRENDLINE</code> or <code>PHOENIX_CHART_TYPE.HORIZ_CURVEDLINE</code> as your chart type.</p>\n      </div>\n    );\n  }\n}\n","export const TRENDLINE = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['January', 8582.8875],\n    ['February', 14415.941],\n    ['March', 14264.8215],\n    ['April', 21478.799],\n    ['May', 15355.97],\n    ['June', 12968.31],\n    ['July', 19087.1315],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Date',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Normal line chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.TRENDLINE, data, options);\n// Curved line chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.CURVEDLINE, data, options);`;\n\n","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { LOLLIPOP } from './examples';\n\nconst data = [\n  ['Low', 'Corporate', 8582.8875],\n  ['High', 'Home Office', 14415.941],\n  ['Low', 'Consumer', 1264.8215],\n  ['Medium', 'Small Business', 21478.799],\n  ['Critical', 'Consumer', 2621.97],\n  ['Not Specified', 'Consumer', 2211.31],\n  ['Critical', 'Corporate', 10087.1315],\n  ['Not Specified', 'Corporate', 4407.138],\n  ['High', 'Consumer', 11667.366],\n  ['High', 'Corporate', 19503.323],\n  ['Low', 'Small Business', 1735.3715],\n  ['Low', 'Home Office', 10057.42],\n  ['Medium', 'Home Office', 7691.02],\n  ['Critical', 'Small Business', 4036.064],\n  ['Not Specified', 'Small Business', 84.99],\n  ['High', 'Small Business', 689.74],\n  ['Critical', 'Home Office', 7416.828],\n  ['Not Specified', 'Home Office', 1839.26],\n  ['Medium', 'Consumer', 4280.034],\n  ['Medium', 'Corporate', 7965.238]\n];\n\nconst columns = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Order Priority',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Customer Segment',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class Lollipop extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const example = LOLLIPOP;\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Vertical Lollipop Charts</h2>\n        <p className=\"body\">A lollipop chart is simply a variation on a standard bar chart. Use it the same way as you would a bar chart.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.VERT_MULTI_DOTPLOT} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={example}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Horizontal Lollipop Charts</h2>\n        <p className=\"body\">This chart is the horizontal version of the default Lollipop chart.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.HORIZ_MULTI_DOTPLOT} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as the lollipop chart above, except you use <code>PHOENIX_CHART_TYPE.HORIZ_MULTI_DOTPLOT</code> as your chart type.</p>\n      </div>\n    );\n  }\n}\n","export const LOLLIPOP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Low', 'Corporate', 8582.8875],\n    ['High', 'Home Office', 14415.941],\n    ['Low', 'Consumer', 1264.8215],\n    ['Medium', 'Small Business', 21478.799],\n    ['Critical', 'Consumer', 2621.97],\n    ['Not Specified', 'Consumer', 2211.31],\n    ['Critical', 'Corporate', 10087.1315],\n    ['Not Specified', 'Corporate', 4407.138],\n    ['High', 'Consumer', 11667.366],\n    ['High', 'Corporate', 19503.323],\n    ['Low', 'Small Business', 1735.3715],\n    ['Low', 'Home Office', 10057.42],\n    ['Medium', 'Home Office', 7691.02],\n    ['Critical', 'Small Business', 4036.064],\n    ['Not Specified', 'Small Business', 84.99],\n    ['High', 'Small Business', 689.74],\n    ['Critical', 'Home Office', 7416.828],\n    ['Not Specified', 'Home Office', 1839.26],\n    ['Medium', 'Consumer', 4280.034],\n    ['Medium', 'Corporate', 7965.238]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Order Priority',\n      mapping: PHOENIX_MAPPING.SERIES\n    },\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Customer Segment',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_MULTI_DOTPLOT, data, options);`;\n\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport logo from './domo-logo.jpg';\n\n\nexport default class MainMenu extends Component {\n  render() {\n    return (\n      <div className=\"main-menu\">\n        <img src={logo} alt=\"\"/>\n        <NavLink to=\"/\" className=\"brand-name\">\n          <h1>Domo Phoenix</h1>\n        </NavLink>\n        <NavLink to=\"/charts\" className=\"tab\" activeClassName=\"active\">\n          <button>Charts</button>\n        </NavLink>\n        <NavLink to=\"/chart/bar\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Bar</button>\n        </NavLink>\n        <NavLink to=\"/chart/line\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Line</button>\n        </NavLink>\n        <NavLink to=\"/chart/lollipop\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Lollipop</button>\n        </NavLink>\n        <NavLink to=\"/chart/area\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Area</button>\n        </NavLink>\n        <NavLink to=\"/chart/pie\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Pie & Funnel</button>\n        </NavLink>\n        <NavLink to=\"/chart/map\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Maps</button>\n        </NavLink>\n        <NavLink to=\"/chart/gauge\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Gauges</button>\n        </NavLink>\n        <NavLink to=\"/chart/other\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Other</button>\n        </NavLink>\n        <NavLink to=\"/frameworks\" className=\"tab\" activeClassName=\"active\">\n          <button>Framework Examples</button>\n        </NavLink>\n        <NavLink to=\"/framework/angular\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Angular</button>\n        </NavLink>\n        <NavLink to=\"/framework/react\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>React</button>\n        </NavLink>\n        <NavLink to=\"/framework/vue\" className=\"tab sub-tab\" activeClassName=\"active\">\n          <button>Vue</button>\n        </NavLink>\n        <NavLink to=\"/properties\" className=\"tab\" activeClassName=\"active\">\n          <button>Chart Properties</button>\n        </NavLink>\n        <NavLink to=\"/theming\" className=\"tab\" activeClassName=\"active\">\n          <button>Theming</button>\n        </NavLink>\n        <NavLink to=\"/api\" className=\"tab\" activeClassName=\"active\">\n          <button>Phoenix API</button>\n        </NavLink>\n      </div>\n    );\n  }\n}","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { AUSTRALIA_MAP, CANADA_MAP, JAPAN_MAP, US_MAP, WORLD_MAP } from './examples';\n\nconst US_DATA = [\n  ['Utah', 30000],\n  ['California', 2000000],\n  ['South Dakota', 2000],\n  ['Illinois', 45000],\n  ['Wisconsin', 76000],\n  ['Washington', 1200000],\n  ['Oregon', 70000]\n];\n\nconst US_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'State',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst WORLD_DATA = [\n  ['United States', 6246579581],\n  ['Japan', 654321651],\n  ['Canada', 3241226513],\n  ['Australia', 465846524],\n  ['Brazil', 56465432],\n  ['Madagascar', 121365432],\n];\n\nconst WORLD_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Country',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst CANADA_DATA = [\n  ['New Brunswick', 56465432],\n  ['Ontario', 6246579581],\n  ['Quebec', 654321651],\n  ['Alberta', 3241226513],\n  ['Saskatchewan', 465846524],\n  ['Prince Edward Island', 55842522],\n];\n\nconst CANADA_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Province',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst JAPAN_DATA = [\n  ['Tokyo', 56465432],\n  ['Hokkaido', 6246579581],\n  ['Kagoshima', 654321651],\n  ['Hyogo', 3241226513],\n  ['Wakayama', 465846524],\n  ['Fukushima', 55842522],\n];\n\nconst JAPAN_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Prefecture',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst AUSTRALIA_DATA = [\n  ['New South Wales', 5356465432],\n  ['Western Australia', 6246579581],\n  ['Queensland', 654321651],\n  ['South Australia', 3241226513],\n  ['Victoria', 465846524],\n  ['Tasmania', 55842522],\n];\n\nconst AUSTRALIA_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Territory',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class MAPS extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">US State Map</h2>\n        <p className=\"body\">A map of the United States of America that shades each state compared to the other states based on the data given. The darker the shade the larger the number, the lighter the shade the smaller the number.</p>\n        <Chart type={PHOENIX_CHART_TYPE.MAP} data={US_DATA} columns={US_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={US_MAP}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>World Map</h2>\n        <p className=\"body\">A map of the world that shades each country compared to the other countries based on the data given. The darker the shade the larger the number, the lighter the shade the smaller the number.</p>\n        <Chart type={PHOENIX_CHART_TYPE.WORLD_MAP} data={WORLD_DATA} columns={WORLD_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={WORLD_MAP}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Canada Map</h2>\n        <p className=\"body\">A map of Canada that shades each province compared to the other provinces based on the data given. The darker the shade the larger the number, the lighter the shade the smaller the number.</p>\n        <Chart type={PHOENIX_CHART_TYPE.MAP_CANADA} data={CANADA_DATA} columns={CANADA_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={CANADA_MAP}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Japan Map</h2>\n        <p className=\"body\">A map of Japan that shades each area compared to the other areas based on the data given. The darker the shade the larger the number, the lighter the shade the smaller the number.</p>\n        <Chart type={PHOENIX_CHART_TYPE.MAP_JAPAN} data={JAPAN_DATA} columns={JAPAN_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={JAPAN_MAP}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Australia Map</h2>\n        <p className=\"body\">A map of Australia that shades each state/territory compared to the other territories based on the data given. The darker the shade the larger the number, the lighter the shade the smaller the number.</p>\n        <Chart type={PHOENIX_CHART_TYPE.MAP_AUSTRALIA} data={AUSTRALIA_DATA} columns={AUSTRALIA_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={AUSTRALIA_MAP}></CodeExample>\n      </div>\n    );\n  }\n}\n","export const US_MAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Utah', 30000],\n    ['California', 2000000],\n    ['South Dakota', 2000],\n    ['Illinois', 45000],\n    ['Wisconsin', 76000],\n    ['Washington', 1200000],\n    ['Oregon', 70000]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'State',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.MAP, data, options);`;\n\nexport const WORLD_MAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['United States', 6246579581],\n    ['Japan', 654321651],\n    ['Canada', 3241226513],\n    ['Australia', 465846524],\n    ['Brazil', 56465432],\n    ['Madagascar', 121365432],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Country',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.WORLD_MAP, data, options);`;\n\nexport const CANADA_MAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['New Brunswick', 56465432],\n    ['Ontario', 6246579581],\n    ['Quebec', 654321651],\n    ['Alberta', 3241226513],\n    ['Saskatchewan', 465846524],\n    ['Prince Edward Island', 55842522],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Province',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.MAP_CANADA, data, options);`;\n\nexport const JAPAN_MAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Tokyo', 56465432],\n    ['Hokkaido', 6246579581],\n    ['Kagoshima', 654321651],\n    ['Hyogo', 3241226513],\n    ['Wakayama', 465846524],\n    ['Fukushima', 55842522],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Prefecture',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.MAP_JAPAN, data, options);`;\n\nexport const AUSTRALIA_MAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['New South Wales', 5356465432],\n    ['Western Australia', 6246579581],\n    ['Queensland', 654321651],\n    ['South Australia', 3241226513],\n    ['Victoria', 465846524],\n    ['Tasmania', 55842522],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Territory',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.MAP_AUSTRALIA, data, options);`;\n","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { BUBBLE, HEATMAP, SPARK, TREEMAP, WORD_CLOUD } from './examples';\n\nconst WORD_CLOUD_DATA = [\n  ['Awesome', 343],\n  ['Unbelievable', 1654],\n  ['Feature', 465],\n  ['Colors', 665],\n  ['Quit', 363],\n  ['Great', 452],\n  ['Good', 312],\n  ['Bugs', 241],\n  ['Broken', 212],\n  ['Find', 252],\n  ['Icon', 265],\n  ['Funny', 245],\n  ['Yellow', 134],\n  ['App', 367],\n  ['Product', 152],\n  ['Tool', 150],\n  ['Application', 145],\n];\n\nconst WORD_CLOUD_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Word',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Quantity',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst SPARK_DATA = [\n  [\"2010-Jan\", 336526.6805],\n  [\"2010-Feb\", 271580.508],\n  [\"2010-Mar\", 217808.0065],\n  [\"2010-Apr\", 266968.589],\n  [\"2010-May\", 283534.285],\n  [\"2010-Jun\", 293080.665],\n  [\"2010-Jul\", 229885.4985],\n  [\"2010-Aug\", 207937.009],\n  [\"2010-Sep\", 418343.2785],\n  [\"2010-Oct\", 365251.985],\n  [\"2010-Nov\", 290670.3455],\n  [\"2010-Dec\", 368093.954]\n];\n\nconst SPARK_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Month',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst HEATMAP_DATA = [\n  [\"2012-Jan\", 94345.3405, \"Home Office\"],\n  [\"2012-Jan\", 46352.983, \"Consumer\"],\n  [\"2012-Jan\", 65013.506, \"Small Business\"],\n  [\"2012-Jan\", 134914.6775, \"Corporate\"],\n  [\"2012-Feb\", 34079.9635, \"Small Business\"],\n  [\"2012-Feb\", 126976.0045, \"Consumer\"],\n  [\"2012-Feb\", 46524.96, \"Home Office\"],\n  [\"2012-Feb\", 68551.571, \"Corporate\"],\n  [\"2012-Mar\", 168781.116, \"Corporate\"],\n  [\"2012-Mar\", 69157.7275, \"Small Business\"],\n  [\"2012-Mar\", 79837.1575, \"Home Office\"],\n  [\"2012-Mar\", 30432.324, \"Consumer\"],\n  [\"2012-Apr\", 49868.7195, \"Home Office\"],\n  [\"2012-Apr\", 99654.973, \"Corporate\"],\n  [\"2012-Apr\", 79662.237, \"Consumer\"],\n  [\"2012-Apr\", 38839.0405, \"Small Business\"],\n  [\"2012-May\", 85770.6795, \"Home Office\"],\n  [\"2012-May\", 45699.6315, \"Small Business\"],\n  [\"2012-May\", 181699.831, \"Corporate\"],\n  [\"2012-May\", 71417.9195, \"Consumer\"],\n  [\"2012-Jun\", 35105.412, \"Consumer\"],\n  [\"2012-Jun\", 68689.3915, \"Home Office\"],\n  [\"2012-Jun\", 43605.7205, \"Small Business\"],\n  [\"2012-Jun\", 129180.4115, \"Corporate\"]\n];\n\nconst HEATMAP_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Month',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Customer Segment',\n    mapping: PHOENIX_MAPPING.SERIES\n  }\n];\n\nconst TREEMAP_DATA = [\n  [\"Manitoba\", 224134.708],\n  [\"Alberta\", 205070.789],\n  [\"Northwest Territories\", 56008.751],\n  [\"Ontario\", 367259.2495],\n  [\"Quebec\", 251897.3635],\n  [\"Yukon\", 78800.964],\n  [\"British Columbia\", 202852.9245],\n  [\"Saskachewan\", 276014.054],\n  [\"Prince Edward Island\", 32488.485],\n  [\"New Brunswick\", 72751.882],\n  [\"Nova Scotia\", 107758.925]\n];\n\nconst TREEMAP_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Province',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst BUBBLE_DATA = [\n  [5, 12500, 3],\n  [14, 32200, 12],\n  [20, 30000, 18],\n  [18, 34400, 10],\n  [22, 38000, 35],\n  [13, 9000, 23],\n];\n\nconst BUBBLE_COLUMNS = [\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Number of Products',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Percentage Market Share',\n    mapping: PHOENIX_MAPPING.BUBBLESIZE\n  }\n];\n\nexport default class Other extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Bubble Chart</h2>\n        <p className=\"body\">A bubble chart is a variation of a scatter chart in which the data points are replaced with bubbles, and an additional dimension of the data is represented in the size of the bubbles.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.BUBBLE} data={BUBBLE_DATA} columns={BUBBLE_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={BUBBLE}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Word Cloud</h2>\n        <p className=\"body\">A visual representation of text-based data, typically used to display the frequency of a specific word or phrase. It could be used, for example, to display the most frequently used words in app reviews.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.WORD_CLOUD} data={WORD_CLOUD_DATA} columns={WORD_CLOUD_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={WORD_CLOUD}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Spark Charts</h2>\n        <p className=\"body\">A special type of chart, this spark chart is specifically tailored to be visualized in a smaller format by removing most of the text and providing a readable summary number and direction indicator.</p>\n\n        <div style={{display:'flex',flexDirection:'row',justifyContent:'space-between'}}>\n          <Chart type={PHOENIX_CHART_TYPE.SPARK_LINE} data={SPARK_DATA} columns={SPARK_COLUMNS} height=\"200\" width=\"500\"></Chart>\n          <Chart type={PHOENIX_CHART_TYPE.SPARK_BAR} data={SPARK_DATA} columns={SPARK_COLUMNS} height=\"200\" width=\"500\"></Chart>\n        </div>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={SPARK}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Heatmaps</h2>\n        <p className=\"body\">A heatmap represents your data in a tabular format that displays each cell as a shade of color, with the lighter cells being lower on the range, and darker being higher. An example of a heatmap is the GitHub Contribution graph on your profile.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.HEATMAP} data={HEATMAP_DATA} columns={HEATMAP_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={HEATMAP}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Treemaps</h2>\n        <p className=\"body\">A diagram which represents data in the form of nested rectangles, the area of each corresponding to its numerical value.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.TREEMAP} data={TREEMAP_DATA} columns={TREEMAP_COLUMNS}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={TREEMAP}></CodeExample>\n      </div>\n    );\n  }\n}\n","export const BUBBLE = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    [5, 12500, 3],\n    [14, 32200, 12],\n    [20, 30000, 18],\n    [18, 34400, 10],\n    [22, 38000, 35],\n    [13, 9000, 23],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Number of Products',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Percentage Market Share',\n      mapping: PHOENIX_MAPPING.BUBBLESIZE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.BUBBLE, data, options);`;\n\nexport const WORD_CLOUD = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Awesome', 403],\n    ['Unbelievable', 1654],\n    ['Feature', 465],\n    ['Colors', 665],\n    ['Quit', 363],\n    ['Great', 452],\n    ['Good', 312],\n    ['Bugs', 241],\n    ['Broken', 212],\n    ['Find', 252],\n    ['Icon', 265],\n    ['Funny', 245],\n    ['Yellow', 134],\n    ['App', 167],\n    ['Product', 152],\n    ['Tool', 150],\n    ['Application', 145],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Word',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Quantity',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.WORD_CLOUD, data, options);`;\n\nexport const SPARK = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    [\"2010-Jan\", 336526.6805],\n    [\"2010-Feb\", 271580.508],\n    [\"2010-Mar\", 217808.0065],\n    [\"2010-Apr\", 266968.589],\n    [\"2010-May\", 283534.285],\n    [\"2010-Jun\", 293080.665],\n    [\"2010-Jul\", 229885.4985],\n    [\"2010-Aug\", 207937.009],\n    [\"2010-Sep\", 418343.2785],\n    [\"2010-Oct\", 365251.985],\n    [\"2010-Nov\", 290670.3455],\n    [\"2010-Dec\", 368093.954]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Month',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Spark Line Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.SPARK_LINE, data, options);\n// Spark Bar Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.SPARK_BAR, data, options);`;\n\nexport const HEATMAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    [\"2012-Jan\", 94345.3405, \"Home Office\"],\n    [\"2012-Jan\", 46352.983, \"Consumer\"],\n    [\"2012-Jan\", 65013.506, \"Small Business\"],\n    [\"2012-Jan\", 134914.6775, \"Corporate\"],\n    [\"2012-Feb\", 34079.9635, \"Small Business\"],\n    [\"2012-Feb\", 126976.0045, \"Consumer\"],\n    [\"2012-Feb\", 46524.96, \"Home Office\"],\n    [\"2012-Feb\", 68551.571, \"Corporate\"],\n    [\"2012-Mar\", 168781.116, \"Corporate\"],\n    [\"2012-Mar\", 69157.7275, \"Small Business\"],\n    [\"2012-Mar\", 79837.1575, \"Home Office\"],\n    [\"2012-Mar\", 30432.324, \"Consumer\"],\n    [\"2012-Apr\", 49868.7195, \"Home Office\"],\n    [\"2012-Apr\", 99654.973, \"Corporate\"],\n    [\"2012-Apr\", 79662.237, \"Consumer\"],\n    [\"2012-Apr\", 38839.0405, \"Small Business\"],\n    [\"2012-May\", 85770.6795, \"Home Office\"],\n    [\"2012-May\", 45699.6315, \"Small Business\"],\n    [\"2012-May\", 181699.831, \"Corporate\"],\n    [\"2012-May\", 71417.9195, \"Consumer\"],\n    [\"2012-Jun\", 35105.412, \"Consumer\"],\n    [\"2012-Jun\", 68689.3915, \"Home Office\"],\n    [\"2012-Jun\", 43605.7205, \"Small Business\"],\n    [\"2012-Jun\", 129180.4115, \"Corporate\"]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Month',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Customer Segment',\n      mapping: PHOENIX_MAPPING.SERIES\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.HEATMAP, data, options);`;\n\nexport const TREEMAP = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    [\"Manitoba\", 224134.708],\n    [\"Alberta\", 205070.789],\n    [\"Northwest Territories\", 56008.751],\n    [\"Ontario\", 367259.2495],\n    [\"Quebec\", 251897.3635],\n    [\"Yukon\", 78800.964],\n    [\"British Columbia\", 202852.9245],\n    [\"Saskachewan\", 276014.054],\n    [\"Prince Edward Island\", 32488.485],\n    [\"New Brunswick\", 72751.882],\n    [\"Nova Scotia\", 107758.925]\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Province',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Sales',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.TREEMAP, data, options);`;\n\n","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { PIE } from './examples';\n\nconst data = [\n  ['Highly Recommend', 403],\n  ['Recommend', 302],\n  ['Neutral', 140],\n  ['Do not recommend', 203],\n  ['Unsure', 98],\n];\n\nconst columns = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Technology',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Store',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nexport default class Pie extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const example = PIE;\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Pie Charts</h2>\n        <p className=\"body\">A pie chart allows you to display percentages in an easy way, such as a breakdown of the types of reviews left by all reviewers.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.PIE} data={data} columns={columns}></Chart>\n\n        <h4 className=\"display-4\">Example Usage</h4>\n        <CodeExample example={example}></CodeExample>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Nautilus Charts</h2>\n        <p className=\"body\">A nautilus chart has identical usage to a pie chart, but it adds in size as a method of displaying the data.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.NAUTILUS} data={data} columns={columns}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as a pie chart, except you use <code>PHOENIX_CHART_TYPE.NAUTILUS</code> as your chart type.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Donut Charts</h2>\n        <p className=\"body\">A donut chart has identical usage to a pie chart, it simply has a donut appearance.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.DONUT} data={data} columns={columns}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as a pie chart, except you use <code>PHOENIX_CHART_TYPE.DONUT</code> as your chart type.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Nautilus Donut Charts</h2>\n        <p className=\"body\">A nautilus donut chart has identical usage to a donut chart, but it adds in size as a method of displaying the data.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.NAUTILUS_DONUT} data={data} columns={columns}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as a pie chart, except you use <code>PHOENIX_CHART_TYPE.NAUTILUS_DONUT</code> as your chart type.</p>\n\n        <h2 className=\"display-2\" style={{marginTop: '60px'}}>Funnel Charts</h2>\n        <p className=\"body\">The Funnel chart is used to visualize the progressive reduction of data as it passes from one phase to another.</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.FUNNEL} data={data} columns={columns}></Chart>\n        <h4 className=\"display-4\">Example Usage</h4>\n        <p className=\"body\">The same usage exactly as a pie chart, except you use <code>PHOENIX_CHART_TYPE.FUNNEL</code> as your chart type.</p>\n      </div>\n    );\n  }\n}\n","export const PIE = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // This is the data you get back from the Domo Data API\n  rows: [\n    ['Highly Recommend', 403],\n    ['Recommend', 302],\n    ['Neutral', 140],\n    ['Do not recommend', 203],\n    ['Unsure', 98],\n  ],\n  // You provide the names, types, and mappings of your ordered columns\n  columns: [\n    {\n      type: PHOENIX_DATA_TYPE.STRING,\n      name: 'Technology',\n      mapping: PHOENIX_MAPPING.ITEM\n    },\n    {\n      type: PHOENIX_DATA_TYPE.DOUBLE,\n      name: 'Store',\n      mapping: PHOENIX_MAPPING.VALUE\n    }\n  ]\n};\n\nconst options = { /* ... */ };\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.PIE, data, options);`;\n\n","import React, { Component } from 'react';\n\nexport default class ReactIntegration extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Phoenix with React</h2>\n        <p className=\"body secondary\">Documentation coming soon...</p>\n      </div>\n    );\n  }\n}","import { PHOENIX_CHART_TYPE, PHOENIX_DATA_TYPE, PHOENIX_MAPPING } from '@domoinc/domo-phoenix';\nimport React, { Component } from 'react';\nimport { Chart } from '../components/Chart/Chart';\nimport CodeExample from '../components/CodeExample/CodeExample';\nimport { THEMING } from './examples';\n\nconst data = [\n  ['Low', 'Corporate', 8582.8875],\n  ['High', 'Home Office', 14415.941],\n  ['Low', 'Consumer', 1264.8215],\n  ['Medium', 'Small Business', 21478.799],\n  ['Critical', 'Consumer', 2621.97],\n  ['Not Specified', 'Consumer', 2211.31],\n  ['Critical', 'Corporate', 10087.1315],\n  ['Not Specified', 'Corporate', 4407.138],\n  ['High', 'Consumer', 11667.366],\n  ['High', 'Corporate', 19503.323],\n  ['Low', 'Small Business', 1735.3715],\n  ['Low', 'Home Office', 10057.42],\n  ['Medium', 'Home Office', 7691.02],\n  ['Critical', 'Small Business', 4036.064],\n  ['Not Specified', 'Small Business', 84.99],\n  ['High', 'Small Business', 689.74],\n  ['Critical', 'Home Office', 7416.828],\n  ['Not Specified', 'Home Office', 1839.26],\n  ['Medium', 'Consumer', 4280.034],\n  ['Medium', 'Corporate', 7965.238]\n];\n\nconst columns = [\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Order Priority',\n    mapping: PHOENIX_MAPPING.SERIES\n  },\n  {\n    type: PHOENIX_DATA_TYPE.STRING,\n    name: 'Customer Segment',\n    mapping: PHOENIX_MAPPING.ITEM\n  },\n  {\n    type: PHOENIX_DATA_TYPE.DOUBLE,\n    name: 'Sales',\n    mapping: PHOENIX_MAPPING.VALUE\n  }\n];\n\nconst colors = [\n  '#01337D',\n  '#03449E',\n  '#0967D2',\n  '#47A3F3',\n  '#BAE3FF'\n];\n\nexport default class Theming extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Theming</h2>\n        <p className=\"body\">By default, the chart will use Domo's tried and true color palette. You can optionally specify your own custom color palette for your charts to match your own branding. This is simply accomplished by passing an array of Hex Code color strings in your options object. If you were to have a darker blue brand, for example, you might create your chart like this:</p>\n\n        <CodeExample example={THEMING}></CodeExample>\n\n        <p className=\"body\">This would define your custom color palette for that chart, and you would end up with a chart looking like this:</p>\n\n        <Chart type={PHOENIX_CHART_TYPE.VERT_BAR} data={data} columns={columns} colors={colors}></Chart>\n\n        <p className=\"body\">You can pass as few or as many colors as you would like in this array. Phoenix handles this for you by starting with the first color in the list and moving down the array. If it runs out of colors in the array, it will simply loop back around to the beginning and continue. For best visual results, it is recommended that you provide enough different colors to cover the scope of your data.</p>\n\n        <p className=\"body\">To reset your color palette to the default on an existing custom chart, simply use the <code>resetColorPalette()</code> method. See the API Documentation for details.</p>\n      </div>\n    );\n  }\n}","export const THEMING = `import {\n  PhoenixChart,\n  PHOENIX_CHART_TYPE,\n  PHOENIX_DATA_TYPE,\n  PHOENIX_MAPPING\n} from '@domoinc/domo-phoenix';\n\nconst data = {\n  // ...\n};\n\nconst customColors = [\n  '#002159',\n  '#03449E',\n  '#0967D2',\n  '#47A3F3',\n  '#BAE3FF'\n];\n\n// Chart Options\nconst options = {\n  width: 600,\n  height: 500\n  colors: customColors\n};\n\n// Create the Phoenix Chart\nconst chart = new PhoenixChart(PHOENIX_CHART_TYPE.VERT_BAR, data, options);\n\n// Append the canvas element to your app\ndocument.getElementById('myDiv').appendChild(chart.canvas);\n\n// Render the chart when you're ready for the user to see it\nchart.render();`;","import React, { Component } from 'react';\n\nexport default class VueIntegration extends Component {\n  componentWillMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <h2 className=\"display-2\">Phoenix with Vue</h2>\n        <p className=\"body secondary\">Documentation coming soon...</p>\n      </div>\n    );\n  }\n}","import 'normalize.css';\nimport React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport AngularIntegration from './Angular/Angular';\nimport ApiDoc from './ApiDoc/ApiDoc';\nimport './App.css';\nimport Area from './Area/Area';\nimport Bar from './Bar/Bar';\nimport ChartProperties from './ChartProperties/ChartProperties';\nimport { Charts } from './Charts/Charts';\nimport ScrollToTop from './components/ScrollToTop/ScrollToTop';\nimport Frameworks from './Frameworks/Frameworks';\nimport Gauge from './Gauge/Gauge';\nimport { Home } from './Home/Home';\nimport Line from './Line/Line';\nimport Lollipop from './Lollipop/Lollipop';\nimport MainMenu from './MainMenu/MainMenu';\nimport Maps from './Maps/Maps';\nimport Other from './Other/Other';\nimport Pie from './Pie/Pie';\nimport ReactIntegration from './React/React';\nimport Theming from './Theming/Theming';\nimport VueIntegration from './Vue/Vue';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"app\">\n          <MainMenu></MainMenu>\n          <ScrollToTop>\n            <div className=\"app-content\" ref=\"ScrollDiv\">\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/charts\" component={Charts} />\n              <Route exact path=\"/chart/bar\" component={Bar} />\n              <Route exact path=\"/chart/line\" component={Line} />\n              <Route exact path=\"/chart/lollipop\" component={Lollipop} />\n              <Route exact path=\"/chart/area\" component={Area} />\n              <Route exact path=\"/chart/pie\" component={Pie} />\n              <Route exact path=\"/chart/map\" component={Maps} />\n              <Route exact path=\"/chart/gauge\" component={Gauge} />\n              <Route exact path=\"/chart/other\" component={Other} />\n              <Route exact path=\"/frameworks\" component={Frameworks} />\n              <Route exact path=\"/framework/angular\" component={AngularIntegration} />\n              <Route exact path=\"/framework/react\" component={ReactIntegration} />\n              <Route exact path=\"/framework/vue\" component={VueIntegration} />\n              <Route exact path=\"/properties\" component={ChartProperties} />\n              <Route exact path=\"/theming\" component={Theming} />\n              <Route exact path=\"/api\" component={ApiDoc} />\n              {/* <Redirect from=\"/\" to=\"/home\" /> */}\n            </div>\n          </ScrollToTop>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}